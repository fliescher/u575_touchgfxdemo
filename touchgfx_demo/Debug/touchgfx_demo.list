
touchgfx_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000267b8  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002580  080269ec  080269ec  000369ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08028f6c  08028f6c  00038f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08029114  08029114  00039114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00025800  0802912c  0802912c  0003912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  0804e92c  0804e92c  0005e92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  0804e93c  0804e93c  0005e93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  0804e944  0804e944  0005e944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0804e958  0804e958  0005e958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00025900  20000000  0804e960  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00025800  20025900  08074260  00085900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000047dc  2004b100  08099a60  000ab100  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2004f8dc  08099a60  000af8dc  2**0
                  ALLOC
 14 .ARM.attributes 00000036  00000000  00000000  000ab100  2**0
                  CONTENTS, READONLY
 15 .debug_info   000ba82d  00000000  00000000  000ab136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00014c90  00000000  00000000  00165963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003e38  00000000  00000000  0017a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003790  00000000  00000000  0017e430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000494ab  00000000  00000000  00181bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00051002  00000000  00000000  001cb06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0019712f  00000000  00000000  0021c06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cf  00000000  00000000  003b319c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000106c4  00000000  00000000  003b326c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2004b100 	.word	0x2004b100
 8000250:	00000000 	.word	0x00000000
 8000254:	080269d4 	.word	0x080269d4

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	2004b104 	.word	0x2004b104
 8000270:	080269d4 	.word	0x080269d4

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	2004cd14 	.word	0x2004cd14
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	2004cdb0 	.word	0x2004cdb0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	2004cd18 	.word	0x2004cd18
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	2004cd1c 	.word	0x2004cd1c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	2004d31c 	.word	0x2004d31c

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f00b fe1e 	bl	800c090 <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f00b fd8b 	bl	800bf74 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	2004cdbc 	.word	0x2004cdbc
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	2004d31c 	.word	0x2004d31c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	2004cdc0 	.word	0x2004cdc0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	2004ce4c 	.word	0x2004ce4c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	2004ce50 	.word	0x2004ce50
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	2004ce48 	.word	0x2004ce48
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	2004ce44 	.word	0x2004ce44
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	2004cdb0 	.word	0x2004cdb0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	2004cd18 	.word	0x2004cd18
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	2004cd1c 	.word	0x2004cd1c
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <__aeabi_uldivmod>:
 80004b0:	b953      	cbnz	r3, 80004c8 <__aeabi_uldivmod+0x18>
 80004b2:	b94a      	cbnz	r2, 80004c8 <__aeabi_uldivmod+0x18>
 80004b4:	2900      	cmp	r1, #0
 80004b6:	bf08      	it	eq
 80004b8:	2800      	cmpeq	r0, #0
 80004ba:	bf1c      	itt	ne
 80004bc:	f04f 31ff 	movne.w	r1, #4294967295
 80004c0:	f04f 30ff 	movne.w	r0, #4294967295
 80004c4:	f000 b982 	b.w	80007cc <__aeabi_idiv0>
 80004c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004d0:	f000 f806 	bl	80004e0 <__udivmoddi4>
 80004d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004dc:	b004      	add	sp, #16
 80004de:	4770      	bx	lr

080004e0 <__udivmoddi4>:
 80004e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004e6:	4604      	mov	r4, r0
 80004e8:	460f      	mov	r7, r1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d148      	bne.n	8000580 <__udivmoddi4+0xa0>
 80004ee:	428a      	cmp	r2, r1
 80004f0:	4694      	mov	ip, r2
 80004f2:	d961      	bls.n	80005b8 <__udivmoddi4+0xd8>
 80004f4:	fab2 f382 	clz	r3, r2
 80004f8:	b143      	cbz	r3, 800050c <__udivmoddi4+0x2c>
 80004fa:	f1c3 0120 	rsb	r1, r3, #32
 80004fe:	409f      	lsls	r7, r3
 8000500:	fa02 fc03 	lsl.w	ip, r2, r3
 8000504:	409c      	lsls	r4, r3
 8000506:	fa20 f101 	lsr.w	r1, r0, r1
 800050a:	430f      	orrs	r7, r1
 800050c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	fbb7 f6f1 	udiv	r6, r7, r1
 800051a:	fb01 7716 	mls	r7, r1, r6, r7
 800051e:	fb06 f00e 	mul.w	r0, r6, lr
 8000522:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000526:	4290      	cmp	r0, r2
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x5c>
 800052a:	eb1c 0202 	adds.w	r2, ip, r2
 800052e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x5a>
 8000534:	4290      	cmp	r0, r2
 8000536:	f200 8137 	bhi.w	80007a8 <__udivmoddi4+0x2c8>
 800053a:	463e      	mov	r6, r7
 800053c:	1a12      	subs	r2, r2, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb2 f0f1 	udiv	r0, r2, r1
 8000544:	fb01 2210 	mls	r2, r1, r0, r2
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x86>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 32ff 	add.w	r2, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x84>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 811c 	bhi.w	800079c <__udivmoddi4+0x2bc>
 8000564:	4610      	mov	r0, r2
 8000566:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800056a:	eba4 040e 	sub.w	r4, r4, lr
 800056e:	2600      	movs	r6, #0
 8000570:	b11d      	cbz	r5, 800057a <__udivmoddi4+0x9a>
 8000572:	40dc      	lsrs	r4, r3
 8000574:	2300      	movs	r3, #0
 8000576:	e9c5 4300 	strd	r4, r3, [r5]
 800057a:	4631      	mov	r1, r6
 800057c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000580:	428b      	cmp	r3, r1
 8000582:	d909      	bls.n	8000598 <__udivmoddi4+0xb8>
 8000584:	2d00      	cmp	r5, #0
 8000586:	f000 80fd 	beq.w	8000784 <__udivmoddi4+0x2a4>
 800058a:	2600      	movs	r6, #0
 800058c:	e9c5 0100 	strd	r0, r1, [r5]
 8000590:	4630      	mov	r0, r6
 8000592:	4631      	mov	r1, r6
 8000594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000598:	fab3 f683 	clz	r6, r3
 800059c:	2e00      	cmp	r6, #0
 800059e:	d14b      	bne.n	8000638 <__udivmoddi4+0x158>
 80005a0:	428b      	cmp	r3, r1
 80005a2:	f0c0 80f2 	bcc.w	800078a <__udivmoddi4+0x2aa>
 80005a6:	4282      	cmp	r2, r0
 80005a8:	f240 80ef 	bls.w	800078a <__udivmoddi4+0x2aa>
 80005ac:	4630      	mov	r0, r6
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d0e3      	beq.n	800057a <__udivmoddi4+0x9a>
 80005b2:	e9c5 4700 	strd	r4, r7, [r5]
 80005b6:	e7e0      	b.n	800057a <__udivmoddi4+0x9a>
 80005b8:	b902      	cbnz	r2, 80005bc <__udivmoddi4+0xdc>
 80005ba:	deff      	udf	#255	; 0xff
 80005bc:	fab2 f382 	clz	r3, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f040 809d 	bne.w	8000700 <__udivmoddi4+0x220>
 80005c6:	1a89      	subs	r1, r1, r2
 80005c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005cc:	b297      	uxth	r7, r2
 80005ce:	2601      	movs	r6, #1
 80005d0:	0c20      	lsrs	r0, r4, #16
 80005d2:	fbb1 f2fe 	udiv	r2, r1, lr
 80005d6:	fb0e 1112 	mls	r1, lr, r2, r1
 80005da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005de:	fb07 f002 	mul.w	r0, r7, r2
 80005e2:	4288      	cmp	r0, r1
 80005e4:	d90f      	bls.n	8000606 <__udivmoddi4+0x126>
 80005e6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ea:	f102 38ff 	add.w	r8, r2, #4294967295
 80005ee:	bf2c      	ite	cs
 80005f0:	f04f 0901 	movcs.w	r9, #1
 80005f4:	f04f 0900 	movcc.w	r9, #0
 80005f8:	4288      	cmp	r0, r1
 80005fa:	d903      	bls.n	8000604 <__udivmoddi4+0x124>
 80005fc:	f1b9 0f00 	cmp.w	r9, #0
 8000600:	f000 80cf 	beq.w	80007a2 <__udivmoddi4+0x2c2>
 8000604:	4642      	mov	r2, r8
 8000606:	1a09      	subs	r1, r1, r0
 8000608:	b2a4      	uxth	r4, r4
 800060a:	fbb1 f0fe 	udiv	r0, r1, lr
 800060e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000612:	fb00 f707 	mul.w	r7, r0, r7
 8000616:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800061a:	42a7      	cmp	r7, r4
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x150>
 800061e:	eb1c 0404 	adds.w	r4, ip, r4
 8000622:	f100 31ff 	add.w	r1, r0, #4294967295
 8000626:	d202      	bcs.n	800062e <__udivmoddi4+0x14e>
 8000628:	42a7      	cmp	r7, r4
 800062a:	f200 80b4 	bhi.w	8000796 <__udivmoddi4+0x2b6>
 800062e:	4608      	mov	r0, r1
 8000630:	1be4      	subs	r4, r4, r7
 8000632:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000636:	e79b      	b.n	8000570 <__udivmoddi4+0x90>
 8000638:	f1c6 0720 	rsb	r7, r6, #32
 800063c:	40b3      	lsls	r3, r6
 800063e:	fa01 f406 	lsl.w	r4, r1, r6
 8000642:	fa22 fc07 	lsr.w	ip, r2, r7
 8000646:	40f9      	lsrs	r1, r7
 8000648:	40b2      	lsls	r2, r6
 800064a:	ea4c 0c03 	orr.w	ip, ip, r3
 800064e:	fa20 f307 	lsr.w	r3, r0, r7
 8000652:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000656:	431c      	orrs	r4, r3
 8000658:	fa1f fe8c 	uxth.w	lr, ip
 800065c:	fa00 f306 	lsl.w	r3, r0, r6
 8000660:	0c20      	lsrs	r0, r4, #16
 8000662:	fbb1 f8f9 	udiv	r8, r1, r9
 8000666:	fb09 1118 	mls	r1, r9, r8, r1
 800066a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800066e:	fb08 f00e 	mul.w	r0, r8, lr
 8000672:	4288      	cmp	r0, r1
 8000674:	d90f      	bls.n	8000696 <__udivmoddi4+0x1b6>
 8000676:	eb1c 0101 	adds.w	r1, ip, r1
 800067a:	f108 3aff 	add.w	sl, r8, #4294967295
 800067e:	bf2c      	ite	cs
 8000680:	f04f 0b01 	movcs.w	fp, #1
 8000684:	f04f 0b00 	movcc.w	fp, #0
 8000688:	4288      	cmp	r0, r1
 800068a:	d903      	bls.n	8000694 <__udivmoddi4+0x1b4>
 800068c:	f1bb 0f00 	cmp.w	fp, #0
 8000690:	f000 808d 	beq.w	80007ae <__udivmoddi4+0x2ce>
 8000694:	46d0      	mov	r8, sl
 8000696:	1a09      	subs	r1, r1, r0
 8000698:	b2a4      	uxth	r4, r4
 800069a:	fbb1 f0f9 	udiv	r0, r1, r9
 800069e:	fb09 1110 	mls	r1, r9, r0, r1
 80006a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80006a6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006aa:	458e      	cmp	lr, r1
 80006ac:	d907      	bls.n	80006be <__udivmoddi4+0x1de>
 80006ae:	eb1c 0101 	adds.w	r1, ip, r1
 80006b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80006b6:	d201      	bcs.n	80006bc <__udivmoddi4+0x1dc>
 80006b8:	458e      	cmp	lr, r1
 80006ba:	d87f      	bhi.n	80007bc <__udivmoddi4+0x2dc>
 80006bc:	4620      	mov	r0, r4
 80006be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006c2:	eba1 010e 	sub.w	r1, r1, lr
 80006c6:	fba0 9802 	umull	r9, r8, r0, r2
 80006ca:	4541      	cmp	r1, r8
 80006cc:	464c      	mov	r4, r9
 80006ce:	46c6      	mov	lr, r8
 80006d0:	d302      	bcc.n	80006d8 <__udivmoddi4+0x1f8>
 80006d2:	d106      	bne.n	80006e2 <__udivmoddi4+0x202>
 80006d4:	454b      	cmp	r3, r9
 80006d6:	d204      	bcs.n	80006e2 <__udivmoddi4+0x202>
 80006d8:	3801      	subs	r0, #1
 80006da:	ebb9 0402 	subs.w	r4, r9, r2
 80006de:	eb68 0e0c 	sbc.w	lr, r8, ip
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d070      	beq.n	80007c8 <__udivmoddi4+0x2e8>
 80006e6:	1b1a      	subs	r2, r3, r4
 80006e8:	eb61 010e 	sbc.w	r1, r1, lr
 80006ec:	fa22 f306 	lsr.w	r3, r2, r6
 80006f0:	fa01 f707 	lsl.w	r7, r1, r7
 80006f4:	40f1      	lsrs	r1, r6
 80006f6:	2600      	movs	r6, #0
 80006f8:	431f      	orrs	r7, r3
 80006fa:	e9c5 7100 	strd	r7, r1, [r5]
 80006fe:	e73c      	b.n	800057a <__udivmoddi4+0x9a>
 8000700:	fa02 fc03 	lsl.w	ip, r2, r3
 8000704:	f1c3 0020 	rsb	r0, r3, #32
 8000708:	fa01 f203 	lsl.w	r2, r1, r3
 800070c:	fa21 f600 	lsr.w	r6, r1, r0
 8000710:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000714:	fa24 f100 	lsr.w	r1, r4, r0
 8000718:	fa1f f78c 	uxth.w	r7, ip
 800071c:	409c      	lsls	r4, r3
 800071e:	4311      	orrs	r1, r2
 8000720:	fbb6 f0fe 	udiv	r0, r6, lr
 8000724:	0c0a      	lsrs	r2, r1, #16
 8000726:	fb0e 6610 	mls	r6, lr, r0, r6
 800072a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800072e:	fb00 f607 	mul.w	r6, r0, r7
 8000732:	4296      	cmp	r6, r2
 8000734:	d90e      	bls.n	8000754 <__udivmoddi4+0x274>
 8000736:	eb1c 0202 	adds.w	r2, ip, r2
 800073a:	f100 38ff 	add.w	r8, r0, #4294967295
 800073e:	bf2c      	ite	cs
 8000740:	f04f 0901 	movcs.w	r9, #1
 8000744:	f04f 0900 	movcc.w	r9, #0
 8000748:	4296      	cmp	r6, r2
 800074a:	d902      	bls.n	8000752 <__udivmoddi4+0x272>
 800074c:	f1b9 0f00 	cmp.w	r9, #0
 8000750:	d031      	beq.n	80007b6 <__udivmoddi4+0x2d6>
 8000752:	4640      	mov	r0, r8
 8000754:	1b92      	subs	r2, r2, r6
 8000756:	b289      	uxth	r1, r1
 8000758:	fbb2 f6fe 	udiv	r6, r2, lr
 800075c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000764:	fb06 f207 	mul.w	r2, r6, r7
 8000768:	428a      	cmp	r2, r1
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x29c>
 800076c:	eb1c 0101 	adds.w	r1, ip, r1
 8000770:	f106 38ff 	add.w	r8, r6, #4294967295
 8000774:	d201      	bcs.n	800077a <__udivmoddi4+0x29a>
 8000776:	428a      	cmp	r2, r1
 8000778:	d823      	bhi.n	80007c2 <__udivmoddi4+0x2e2>
 800077a:	4646      	mov	r6, r8
 800077c:	1a89      	subs	r1, r1, r2
 800077e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000782:	e725      	b.n	80005d0 <__udivmoddi4+0xf0>
 8000784:	462e      	mov	r6, r5
 8000786:	4628      	mov	r0, r5
 8000788:	e6f7      	b.n	800057a <__udivmoddi4+0x9a>
 800078a:	1a84      	subs	r4, r0, r2
 800078c:	eb61 0303 	sbc.w	r3, r1, r3
 8000790:	2001      	movs	r0, #1
 8000792:	461f      	mov	r7, r3
 8000794:	e70b      	b.n	80005ae <__udivmoddi4+0xce>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	e749      	b.n	8000630 <__udivmoddi4+0x150>
 800079c:	4464      	add	r4, ip
 800079e:	3802      	subs	r0, #2
 80007a0:	e6e1      	b.n	8000566 <__udivmoddi4+0x86>
 80007a2:	3a02      	subs	r2, #2
 80007a4:	4461      	add	r1, ip
 80007a6:	e72e      	b.n	8000606 <__udivmoddi4+0x126>
 80007a8:	3e02      	subs	r6, #2
 80007aa:	4462      	add	r2, ip
 80007ac:	e6c6      	b.n	800053c <__udivmoddi4+0x5c>
 80007ae:	f1a8 0802 	sub.w	r8, r8, #2
 80007b2:	4461      	add	r1, ip
 80007b4:	e76f      	b.n	8000696 <__udivmoddi4+0x1b6>
 80007b6:	3802      	subs	r0, #2
 80007b8:	4462      	add	r2, ip
 80007ba:	e7cb      	b.n	8000754 <__udivmoddi4+0x274>
 80007bc:	3802      	subs	r0, #2
 80007be:	4461      	add	r1, ip
 80007c0:	e77d      	b.n	80006be <__udivmoddi4+0x1de>
 80007c2:	3e02      	subs	r6, #2
 80007c4:	4461      	add	r1, ip
 80007c6:	e7d9      	b.n	800077c <__udivmoddi4+0x29c>
 80007c8:	462e      	mov	r6, r5
 80007ca:	e6d6      	b.n	800057a <__udivmoddi4+0x9a>

080007cc <__aeabi_idiv0>:
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007dc:	2334      	movs	r3, #52	; 0x34
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <tx_application_define+0x64>)
 80007e6:	4914      	ldr	r1, [pc, #80]	; (8000838 <tx_application_define+0x68>)
 80007e8:	4814      	ldr	r0, [pc, #80]	; (800083c <tx_application_define+0x6c>)
 80007ea:	f00b fefb 	bl	800c5e4 <_txe_byte_pool_create>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d109      	bne.n	8000808 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <tx_application_define+0x6c>)
 80007f6:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	f000 fb9e 	bl	8000f3a <App_ThreadX_Init>
 80007fe:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d000      	beq.n	8000808 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000806:	e7fe      	b.n	8000806 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000808:	2334      	movs	r3, #52	; 0x34
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <tx_application_define+0x70>)
 8000812:	490c      	ldr	r1, [pc, #48]	; (8000844 <tx_application_define+0x74>)
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <tx_application_define+0x78>)
 8000816:	f00b fee5 	bl	800c5e4 <_txe_byte_pool_create>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d104      	bne.n	800082a <tx_application_define+0x5a>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <tx_application_define+0x78>)
 8000822:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 8000824:	68b8      	ldr	r0, [r7, #8]
 8000826:	f00c fa67 	bl	800ccf8 <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2004b11c 	.word	0x2004b11c
 8000838:	080269ec 	.word	0x080269ec
 800083c:	2004b51c 	.word	0x2004b51c
 8000840:	2004b550 	.word	0x2004b550
 8000844:	08026a00 	.word	0x08026a00
 8000848:	2004c550 	.word	0x2004c550

0800084c <ST7789V_SEND_COMMAND>:

static uint8_t rotationNum=1;
static bool _cp437    = false;

void ST7789V_SEND_COMMAND(uint16_t cmd)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 8000856:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	8013      	strh	r3, [r2, #0]

}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <ST7789V_SEND_DATA>:
void ST7789V_SEND_DATA(uint16_t data)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <ST7789V_SEND_DATA+0x1c>)
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	8013      	strh	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	60080000 	.word	0x60080000

0800088c <ST7789V_writeRegister32>:
	ST7789V_SEND_COMMAND(r);
	ST7789V_SEND_DATA((d >> 8));
	ST7789V_SEND_DATA(d);
}

void ST7789V_writeRegister32(uint8_t r, uint32_t d) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
	ST7789V_SEND_COMMAND(r);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffd5 	bl	800084c <ST7789V_SEND_COMMAND>
	ST7789V_SEND_DATA((d >> 24));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	0e1b      	lsrs	r3, r3, #24
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ffdf 	bl	800086c <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 16));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	0c1b      	lsrs	r3, r3, #16
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ffd9 	bl	800086c <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 8));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ffd3 	bl	800086c <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA(d);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffce 	bl	800086c <ST7789V_SEND_DATA>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <ST7789V_setCursorPosition>:

void ST7789V_setCursorPosition(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4604      	mov	r4, r0
 80008e0:	4608      	mov	r0, r1
 80008e2:	4611      	mov	r1, r2
 80008e4:	461a      	mov	r2, r3
 80008e6:	4623      	mov	r3, r4
 80008e8:	80fb      	strh	r3, [r7, #6]
 80008ea:	4603      	mov	r3, r0
 80008ec:	80bb      	strh	r3, [r7, #4]
 80008ee:	460b      	mov	r3, r1
 80008f0:	807b      	strh	r3, [r7, #2]
 80008f2:	4613      	mov	r3, r2
 80008f4:	803b      	strh	r3, [r7, #0]
  uint32_t t;
  t = (x0 << 16) | x1;
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	041a      	lsls	r2, r3, #16
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000900:	202c      	movs	r0, #44	; 0x2c
 8000902:	f7ff ffa3 	bl	800084c <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_CASET, t);
 8000906:	68f9      	ldr	r1, [r7, #12]
 8000908:	202a      	movs	r0, #42	; 0x2a
 800090a:	f7ff ffbf 	bl	800088c <ST7789V_writeRegister32>
  t = (y0 << 16) | y1;
 800090e:	88bb      	ldrh	r3, [r7, #4]
 8000910:	041a      	lsls	r2, r3, #16
 8000912:	883b      	ldrh	r3, [r7, #0]
 8000914:	4313      	orrs	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000918:	202c      	movs	r0, #44	; 0x2c
 800091a:	f7ff ff97 	bl	800084c <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_RASET, t);
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	202b      	movs	r0, #43	; 0x2b
 8000922:	f7ff ffb3 	bl	800088c <ST7789V_writeRegister32>
  ST7789V_SEND_COMMAND (ST7789V_RAMWR);
 8000926:	202c      	movs	r0, #44	; 0x2c
 8000928:	f7ff ff90 	bl	800084c <ST7789V_SEND_COMMAND>
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bd90      	pop	{r4, r7, pc}

08000934 <ST7789V_init>:
	/* invert area */
	ST7789V_SEND_COMMAND(ST7789V_INVON);
}

void ST7789V_init(void)
 {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
   ExternalSRAMSpecStruct ST7789VSpec = {
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f8c3 2003 	str.w	r2, [r3, #3]
 8000944:	2310      	movs	r3, #16
 8000946:	703b      	strb	r3, [r7, #0]
 8000948:	2332      	movs	r3, #50	; 0x32
 800094a:	713b      	strb	r3, [r7, #4]
 800094c:	2301      	movs	r3, #1
 800094e:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 8000950:	463b      	mov	r3, r7
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fb05 	bl	8000f64 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2104      	movs	r1, #4
 800095e:	4877      	ldr	r0, [pc, #476]	; (8000b3c <ST7789V_init+0x208>)
 8000960:	f002 fc4a 	bl	80031f8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f001 fbab 	bl	80020c0 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2104      	movs	r1, #4
 800096e:	4873      	ldr	r0, [pc, #460]	; (8000b3c <ST7789V_init+0x208>)
 8000970:	f002 fc42 	bl	80031f8 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8000974:	200a      	movs	r0, #10
 8000976:	f001 fba3 	bl	80020c0 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2104      	movs	r1, #4
 800097e:	486f      	ldr	r0, [pc, #444]	; (8000b3c <ST7789V_init+0x208>)
 8000980:	f002 fc3a 	bl	80031f8 <HAL_GPIO_WritePin>
      HAL_Delay(120);
 8000984:	2078      	movs	r0, #120	; 0x78
 8000986:	f001 fb9b 	bl	80020c0 <HAL_Delay>


      ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 800098a:	2011      	movs	r0, #17
 800098c:	f7ff ff5e 	bl	800084c <ST7789V_SEND_COMMAND>
      HAL_Delay(120);
 8000990:	2078      	movs	r0, #120	; 0x78
 8000992:	f001 fb95 	bl	80020c0 <HAL_Delay>

      ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 8000996:	2036      	movs	r0, #54	; 0x36
 8000998:	f7ff ff58 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff65 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 80009a2:	20b2      	movs	r0, #178	; 0xb2
 80009a4:	f7ff ff52 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0C);
 80009a8:	200c      	movs	r0, #12
 80009aa:	f7ff ff5f 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0C);
 80009ae:	200c      	movs	r0, #12
 80009b0:	f7ff ff5c 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff ff59 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 80009ba:	2033      	movs	r0, #51	; 0x33
 80009bc:	f7ff ff56 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 80009c0:	2033      	movs	r0, #51	; 0x33
 80009c2:	f7ff ff53 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 80009c6:	20b7      	movs	r0, #183	; 0xb7
 80009c8:	f7ff ff40 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x70); //VGH, VGL
 80009cc:	2070      	movs	r0, #112	; 0x70
 80009ce:	f7ff ff4d 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 80009d2:	20bb      	movs	r0, #187	; 0xbb
 80009d4:	f7ff ff3a 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x3A);
 80009d8:	203a      	movs	r0, #58	; 0x3a
 80009da:	f7ff ff47 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 80009de:	20c0      	movs	r0, #192	; 0xc0
 80009e0:	f7ff ff34 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x2C);
 80009e4:	202c      	movs	r0, #44	; 0x2c
 80009e6:	f7ff ff41 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 80009ea:	20c2      	movs	r0, #194	; 0xc2
 80009ec:	f7ff ff2e 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x01);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff ff3b 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VRHS);
 80009f6:	20c3      	movs	r0, #195	; 0xc3
 80009f8:	f7ff ff28 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x14);
 80009fc:	2014      	movs	r0, #20
 80009fe:	f7ff ff35 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVS);
 8000a02:	20c4      	movs	r0, #196	; 0xc4
 8000a04:	f7ff ff22 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x20);
 8000a08:	2020      	movs	r0, #32
 8000a0a:	f7ff ff2f 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 8000a0e:	20c6      	movs	r0, #198	; 0xc6
 8000a10:	f7ff ff1c 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0F); //60Hz 0A
 8000a14:	200f      	movs	r0, #15
 8000a16:	f7ff ff29 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000a1a:	20d0      	movs	r0, #208	; 0xd0
 8000a1c:	f7ff ff16 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xA4);
 8000a20:	20a4      	movs	r0, #164	; 0xa4
 8000a22:	f7ff ff23 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xA1); //AVDD VCL
 8000a26:	20a1      	movs	r0, #161	; 0xa1
 8000a28:	f7ff ff20 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 8000a2c:	20e0      	movs	r0, #224	; 0xe0
 8000a2e:	f7ff ff0d 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000a32:	20d0      	movs	r0, #208	; 0xd0
 8000a34:	f7ff ff1a 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000a38:	2007      	movs	r0, #7
 8000a3a:	f7ff ff17 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000a3e:	200d      	movs	r0, #13
 8000a40:	f7ff ff14 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000a44:	2009      	movs	r0, #9
 8000a46:	f7ff ff11 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x08);
 8000a4a:	2008      	movs	r0, #8
 8000a4c:	f7ff ff0e 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000a50:	2025      	movs	r0, #37	; 0x25
 8000a52:	f7ff ff0b 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x28);
 8000a56:	2028      	movs	r0, #40	; 0x28
 8000a58:	f7ff ff08 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x53);
 8000a5c:	2053      	movs	r0, #83	; 0x53
 8000a5e:	f7ff ff05 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000a62:	2039      	movs	r0, #57	; 0x39
 8000a64:	f7ff ff02 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x12);
 8000a68:	2012      	movs	r0, #18
 8000a6a:	f7ff feff 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0B);
 8000a6e:	200b      	movs	r0, #11
 8000a70:	f7ff fefc 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f7ff fef9 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x17);
 8000a7a:	2017      	movs	r0, #23
 8000a7c:	f7ff fef6 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000a80:	2034      	movs	r0, #52	; 0x34
 8000a82:	f7ff fef3 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 8000a86:	20e1      	movs	r0, #225	; 0xe1
 8000a88:	f7ff fee0 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000a8c:	20d0      	movs	r0, #208	; 0xd0
 8000a8e:	f7ff feed 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000a92:	2007      	movs	r0, #7
 8000a94:	f7ff feea 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000a98:	200d      	movs	r0, #13
 8000a9a:	f7ff fee7 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000a9e:	2009      	movs	r0, #9
 8000aa0:	f7ff fee4 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000aa4:	2009      	movs	r0, #9
 8000aa6:	f7ff fee1 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000aaa:	2025      	movs	r0, #37	; 0x25
 8000aac:	f7ff fede 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x29);
 8000ab0:	2029      	movs	r0, #41	; 0x29
 8000ab2:	f7ff fedb 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x35);
 8000ab6:	2035      	movs	r0, #53	; 0x35
 8000ab8:	f7ff fed8 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000abc:	2039      	movs	r0, #57	; 0x39
 8000abe:	f7ff fed5 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x13);
 8000ac2:	2013      	movs	r0, #19
 8000ac4:	f7ff fed2 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f7ff fecf 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f7ff fecc 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x16);
 8000ad4:	2016      	movs	r0, #22
 8000ad6:	f7ff fec9 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000ada:	2034      	movs	r0, #52	; 0x34
 8000adc:	f7ff fec6 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000ae0:	2021      	movs	r0, #33	; 0x21
 8000ae2:	f7ff feb3 	bl	800084c <ST7789V_SEND_COMMAND>

      ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 8000ae6:	203a      	movs	r0, #58	; 0x3a
 8000ae8:	f7ff feb0 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000aec:	2055      	movs	r0, #85	; 0x55
 8000aee:	f7ff febd 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_CASET);
 8000af2:	202a      	movs	r0, #42	; 0x2a
 8000af4:	f7ff feaa 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff feb7 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f7ff feb4 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff feb1 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xEF);
 8000b0a:	20ef      	movs	r0, #239	; 0xef
 8000b0c:	f7ff feae 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000b10:	202b      	movs	r0, #43	; 0x2b
 8000b12:	f7ff fe9b 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fea8 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fea5 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x01);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fea2 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x3F);
 8000b28:	203f      	movs	r0, #63	; 0x3f
 8000b2a:	f7ff fe9f 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000b2e:	2029      	movs	r0, #41	; 0x29
 8000b30:	f7ff fe8c 	bl	800084c <ST7789V_SEND_COMMAND>
//      ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 }
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	42021000 	.word	0x42021000

08000b40 <ST7789V_drawPixel>:

void ST7789V_drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	807b      	strh	r3, [r7, #2]
	ST7789V_setCursorPosition(x, y, x, y);
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	88fa      	ldrh	r2, [r7, #6]
 8000b56:	88b9      	ldrh	r1, [r7, #4]
 8000b58:	88f8      	ldrh	r0, [r7, #6]
 8000b5a:	f7ff febd 	bl	80008d8 <ST7789V_setCursorPosition>
	ST7789V_SEND_DATA(color);
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fe83 	bl	800086c <ST7789V_SEND_DATA>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <ST7789V_fill>:

void ST7789V_fill(uint16_t color) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ST7789V_PIXEL_COUNT;
 8000b7a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000b7e:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <ST7789V_fill+0x6c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d003      	beq.n	8000b90 <ST7789V_fill+0x20>
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <ST7789V_fill+0x6c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d107      	bne.n	8000ba0 <ST7789V_fill+0x30>
	{
		ST7789V_setCursorPosition(0, 0,   ST7789V_WIDTH -1, ST7789V_HEIGHT -1);
 8000b90:	f240 133f 	movw	r3, #319	; 0x13f
 8000b94:	22ef      	movs	r2, #239	; 0xef
 8000b96:	2100      	movs	r1, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fe9d 	bl	80008d8 <ST7789V_setCursorPosition>
 8000b9e:	e00e      	b.n	8000bbe <ST7789V_fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <ST7789V_fill+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d003      	beq.n	8000bb0 <ST7789V_fill+0x40>
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <ST7789V_fill+0x6c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d106      	bne.n	8000bbe <ST7789V_fill+0x4e>
	{
		ST7789V_setCursorPosition(0, 0, ST7789V_HEIGHT -1, ST7789V_WIDTH -1);
 8000bb0:	23ef      	movs	r3, #239	; 0xef
 8000bb2:	f240 123f 	movw	r2, #319	; 0x13f
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fe8d 	bl	80008d8 <ST7789V_setCursorPosition>
	}

	while (n) {
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <ST7789V_fill+0x64>
	   n--;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
	   ST7789V_SEND_DATA(color);
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe4d 	bl	800086c <ST7789V_SEND_DATA>
	while (n) {
 8000bd2:	e7f4      	b.n	8000bbe <ST7789V_fill+0x4e>
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000004 	.word	0x20000004

08000be0 <ST7789V_drawCircle>:
			ST7789V_SEND_DATA(color);
	}
}

void ST7789V_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4604      	mov	r4, r0
 8000be8:	4608      	mov	r0, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	4623      	mov	r3, r4
 8000bf0:	80fb      	strh	r3, [r7, #6]
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80bb      	strh	r3, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	807b      	strh	r3, [r7, #2]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	f1c3 0301 	rsb	r3, r3, #1
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	03d2      	lsls	r2, r2, #15
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	81fb      	strh	r3, [r7, #14]

  ST7789V_drawPixel(x0  , y0+r, color);
 8000c22:	88ba      	ldrh	r2, [r7, #4]
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	4413      	add	r3, r2
 8000c28:	b299      	uxth	r1, r3
 8000c2a:	883a      	ldrh	r2, [r7, #0]
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff86 	bl	8000b40 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0  , y0-r, color);
 8000c34:	88ba      	ldrh	r2, [r7, #4]
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	b299      	uxth	r1, r3
 8000c3c:	883a      	ldrh	r2, [r7, #0]
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff7d 	bl	8000b40 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0+r, y0  , color);
 8000c46:	88fa      	ldrh	r2, [r7, #6]
 8000c48:	887b      	ldrh	r3, [r7, #2]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	883a      	ldrh	r2, [r7, #0]
 8000c50:	88b9      	ldrh	r1, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff74 	bl	8000b40 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0-r, y0  , color);
 8000c58:	88fa      	ldrh	r2, [r7, #6]
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	883a      	ldrh	r2, [r7, #0]
 8000c62:	88b9      	ldrh	r1, [r7, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff6b 	bl	8000b40 <ST7789V_drawPixel>

  while (x<y) {
 8000c6a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	f280 8083 	bge.w	8000d7e <ST7789V_drawCircle+0x19e>
    if (f >= 0) {
 8000c78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0e      	blt.n	8000c9e <ST7789V_drawCircle+0xbe>
      y--;
 8000c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000c8c:	8a7b      	ldrh	r3, [r7, #18]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8000c94:	8afa      	ldrh	r2, [r7, #22]
 8000c96:	8a7b      	ldrh	r3, [r7, #18]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000c9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000caa:	8abb      	ldrh	r3, [r7, #20]
 8000cac:	3302      	adds	r3, #2
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8000cb2:	8afa      	ldrh	r2, [r7, #22]
 8000cb4:	8abb      	ldrh	r3, [r7, #20]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	82fb      	strh	r3, [r7, #22]
  
    ST7789V_drawPixel(x0 + x, y0 + y, color);
 8000cbc:	8a3a      	ldrh	r2, [r7, #16]
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	89fa      	ldrh	r2, [r7, #14]
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	883a      	ldrh	r2, [r7, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ff36 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 + y, color);
 8000cd4:	8a3b      	ldrh	r3, [r7, #16]
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b298      	uxth	r0, r3
 8000cdc:	89fa      	ldrh	r2, [r7, #14]
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	883a      	ldrh	r2, [r7, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f7ff ff2a 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + x, y0 - y, color);
 8000cec:	8a3a      	ldrh	r2, [r7, #16]
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b298      	uxth	r0, r3
 8000cf4:	89fb      	ldrh	r3, [r7, #14]
 8000cf6:	88ba      	ldrh	r2, [r7, #4]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	883a      	ldrh	r2, [r7, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff ff1e 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 - y, color);
 8000d04:	8a3b      	ldrh	r3, [r7, #16]
 8000d06:	88fa      	ldrh	r2, [r7, #6]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b298      	uxth	r0, r3
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	88ba      	ldrh	r2, [r7, #4]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	883a      	ldrh	r2, [r7, #0]
 8000d16:	4619      	mov	r1, r3
 8000d18:	f7ff ff12 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 + x, color);
 8000d1c:	89fa      	ldrh	r2, [r7, #14]
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	4413      	add	r3, r2
 8000d22:	b298      	uxth	r0, r3
 8000d24:	8a3a      	ldrh	r2, [r7, #16]
 8000d26:	88bb      	ldrh	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	883a      	ldrh	r2, [r7, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff ff06 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 + x, color);
 8000d34:	89fb      	ldrh	r3, [r7, #14]
 8000d36:	88fa      	ldrh	r2, [r7, #6]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b298      	uxth	r0, r3
 8000d3c:	8a3a      	ldrh	r2, [r7, #16]
 8000d3e:	88bb      	ldrh	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	883a      	ldrh	r2, [r7, #0]
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fefa 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 - x, color);
 8000d4c:	89fa      	ldrh	r2, [r7, #14]
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4413      	add	r3, r2
 8000d52:	b298      	uxth	r0, r3
 8000d54:	8a3b      	ldrh	r3, [r7, #16]
 8000d56:	88ba      	ldrh	r2, [r7, #4]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	883a      	ldrh	r2, [r7, #0]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f7ff feee 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 - x, color);
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	88fa      	ldrh	r2, [r7, #6]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	b298      	uxth	r0, r3
 8000d6c:	8a3b      	ldrh	r3, [r7, #16]
 8000d6e:	88ba      	ldrh	r2, [r7, #4]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	883a      	ldrh	r2, [r7, #0]
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fee2 	bl	8000b40 <ST7789V_drawPixel>
  while (x<y) {
 8000d7c:	e775      	b.n	8000c6a <ST7789V_drawCircle+0x8a>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd90      	pop	{r4, r7, pc}

08000d86 <ST7789V_drawLine>:
  ST7789V_drawFastVLine(x0, y0-r, 2*r+1, color);
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

void ST7789V_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000d86:	b590      	push	{r4, r7, lr}
 8000d88:	b087      	sub	sp, #28
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	4611      	mov	r1, r2
 8000d92:	461a      	mov	r2, r3
 8000d94:	4623      	mov	r3, r4
 8000d96:	80fb      	strh	r3, [r7, #6]
 8000d98:	4603      	mov	r3, r0
 8000d9a:	80bb      	strh	r3, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000da4:	883b      	ldrh	r3, [r7, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000db0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	4619      	mov	r1, r3
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	1acb      	subs	r3, r1, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bfb8      	it	lt
 8000dc0:	425b      	neglt	r3, r3
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	bfcc      	ite	gt
 8000dc6:	2301      	movgt	r3, #1
 8000dc8:	2300      	movle	r3, #0
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	827b      	strh	r3, [r7, #18]
  if (steep) {
 8000dce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00b      	beq.n	8000dee <ST7789V_drawLine+0x68>
	std::swap(x0, y0);
 8000dd6:	1d3a      	adds	r2, r7, #4
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f88d 	bl	8000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(x1, y1);
 8000de2:	463a      	mov	r2, r7
 8000de4:	1cbb      	adds	r3, r7, #2
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f887 	bl	8000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  if (x0 > x1) {
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d90b      	bls.n	8000e0e <ST7789V_drawLine+0x88>
	std::swap(x0, x1);
 8000df6:	1cba      	adds	r2, r7, #2
 8000df8:	1dbb      	adds	r3, r7, #6
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f87d 	bl	8000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(y0, y1);
 8000e02:	463a      	mov	r2, r7
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f877 	bl	8000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  uint16_t dx, dy;
  dx = x1 - x0;
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bfb8      	it	lt
 8000e22:	425b      	neglt	r3, r3
 8000e24:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx>>1;
 8000e26:	8a3b      	ldrh	r3, [r7, #16]
 8000e28:	085b      	lsrs	r3, r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	82fb      	strh	r3, [r7, #22]
  int16_t ystep;

  if (y0 < y1) {
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	883b      	ldrh	r3, [r7, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d202      	bcs.n	8000e3c <ST7789V_drawLine+0xb6>
    ystep = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	82bb      	strh	r3, [r7, #20]
 8000e3a:	e002      	b.n	8000e42 <ST7789V_drawLine+0xbc>
  } else {
    ystep = -1;
 8000e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e40:	82bb      	strh	r3, [r7, #20]
  }

  for (; x0<=x1; x0++) {
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d828      	bhi.n	8000e9c <ST7789V_drawLine+0x116>
    if (steep) {
 8000e4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d006      	beq.n	8000e60 <ST7789V_drawLine+0xda>
      ST7789V_drawPixel(y0, x0, color);
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	88f9      	ldrh	r1, [r7, #6]
 8000e56:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fe71 	bl	8000b40 <ST7789V_drawPixel>
 8000e5e:	e005      	b.n	8000e6c <ST7789V_drawLine+0xe6>
    } else {
      ST7789V_drawPixel(x0, y0, color);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	88b9      	ldrh	r1, [r7, #4]
 8000e64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe6a 	bl	8000b40 <ST7789V_drawPixel>
    }
    err -= dy;
 8000e6c:	8afa      	ldrh	r2, [r7, #22]
 8000e6e:	89fb      	ldrh	r3, [r7, #14]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	82fb      	strh	r3, [r7, #22]
    if (err < 0) {
 8000e76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da09      	bge.n	8000e92 <ST7789V_drawLine+0x10c>
      y0 += ystep;
 8000e7e:	88ba      	ldrh	r2, [r7, #4]
 8000e80:	8abb      	ldrh	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000e88:	8afa      	ldrh	r2, [r7, #22]
 8000e8a:	8a3b      	ldrh	r3, [r7, #16]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	82fb      	strh	r3, [r7, #22]
  for (; x0<=x1; x0++) {
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	e7d2      	b.n	8000e42 <ST7789V_drawLine+0xbc>
    }
  }
}	
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}

08000ea4 <ST7789V_drawFastVLine>:
{
	ST7789V_drawLine(x, y, x+w-1, y, color);
}

void ST7789V_drawFastVLine(uint16_t x, uint16_t y, uint16_t h, uint16_t color)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4604      	mov	r4, r0
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4623      	mov	r3, r4
 8000eb4:	80fb      	strh	r3, [r7, #6]
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80bb      	strh	r3, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	807b      	strh	r3, [r7, #2]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	803b      	strh	r3, [r7, #0]
	ST7789V_drawLine(x, y, x, y+h-1, color);
 8000ec2:	88ba      	ldrh	r2, [r7, #4]
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b29c      	uxth	r4, r3
 8000ece:	88fa      	ldrh	r2, [r7, #6]
 8000ed0:	88b9      	ldrh	r1, [r7, #4]
 8000ed2:	88f8      	ldrh	r0, [r7, #6]
 8000ed4:	883b      	ldrh	r3, [r7, #0]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4623      	mov	r3, r4
 8000eda:	f7ff ff54 	bl	8000d86 <ST7789V_drawLine>
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}

08000ee6 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffed 	bl	8000ee6 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 8000f12:	6838      	ldr	r0, [r7, #0]
 8000f14:	f7ff ffe7 	bl	8000ee6 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000f20:	f107 030e 	add.w	r3, r7, #14
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ffde 	bl	8000ee6 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	801a      	strh	r2, [r3, #0]
    }
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b085      	sub	sp, #20
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60bb      	str	r3, [r7, #8]
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000f5c:	f009 ff98 	bl	800ae90 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0a0      	sub	sp, #128	; 0x80
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	2220      	movs	r2, #32
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f024 fcf6 	bl	802596a <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <FMCSRAMInit+0xc4>)
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <FMCSRAMInit+0xc8>)
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d102      	bne.n	8000f92 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000f90:	e005      	b.n	8000f9e <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	2201      	movs	r2, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d102      	bne.n	8000fac <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000faa:	e008      	b.n	8000fbe <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b10      	cmp	r3, #16
 8000fb2:	d102      	bne.n	8000fba <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fb8:	e001      	b.n	8000fbe <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000fec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ff0:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 8000ffe:	2306      	movs	r3, #6
 8001000:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8001002:	2306      	movs	r3, #6
 8001004:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 8001006:	f107 0108 	add.w	r1, r7, #8
 800100a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100e:	2200      	movs	r2, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f007 fa2d 	bl	8008470 <HAL_SRAM_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 800101c:	f000 f808 	bl	8001030 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8001020:	bf00      	nop
 8001022:	3780      	adds	r7, #128	; 0x80
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	420d0400 	.word	0x420d0400
 800102c:	420d0504 	.word	0x420d0504

08001030 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <LL_AHB2_GRP1_EnableClock+0x34>)
 800104a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800104e:	4909      	ldr	r1, [pc, #36]	; (8001074 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <LL_AHB2_GRP1_EnableClock+0x34>)
 800105a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001064:	68fb      	ldr	r3, [r7, #12]
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	46020c00 	.word	0x46020c00

08001078 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <LL_APB1_GRP2_EnableClock+0x34>)
 8001082:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001086:	4909      	ldr	r1, [pc, #36]	; (80010ac <LL_APB1_GRP2_EnableClock+0x34>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4313      	orrs	r3, r2
 800108c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <LL_APB1_GRP2_EnableClock+0x34>)
 8001092:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	46020c00 	.word	0x46020c00

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f000 ffb5 	bl	8002024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f87f 	bl	80011bc <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80010be:	f000 f8e1 	bl	8001284 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c2:	f000 fad3 	bl	800166c <MX_GPIO_Init>
  MX_ADC1_Init();
 80010c6:	f000 f8eb 	bl	80012a0 <MX_ADC1_Init>
  MX_UCPD1_Init();
 80010ca:	f000 f9b7 	bl	800143c <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 80010ce:	f000 f9eb 	bl	80014a8 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010d2:	f000 fa35 	bl	8001540 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 80010d6:	f000 fa5f 	bl	8001598 <MX_FMC_Init>
  MX_CRC_Init();
 80010da:	f000 f925 	bl	8001328 <MX_CRC_Init>
  MX_ICACHE_Init();
 80010de:	f000 f983 	bl	80013e8 <MX_ICACHE_Init>
  MX_DMA2D_Init();
 80010e2:	f000 f943 	bl	800136c <MX_DMA2D_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80010e6:	f00b fdff 	bl	800cce8 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  ST7789V_init();
 80010ea:	f7ff fc23 	bl	8000934 <ST7789V_init>
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 80010ee:	202c      	movs	r0, #44	; 0x2c
 80010f0:	f7ff fbac 	bl	800084c <ST7789V_SEND_COMMAND>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80010f4:	f7ff ff30 	bl	8000f58 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int round_num = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	482b      	ldr	r0, [pc, #172]	; (80011b0 <main+0x100>)
 8001102:	f002 f879 	bl	80031f8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800110a:	f000 ffd9 	bl	80020c0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	4827      	ldr	r0, [pc, #156]	; (80011b0 <main+0x100>)
 8001114:	f002 f870 	bl	80031f8 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8001118:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800111c:	f000 ffd0 	bl	80020c0 <HAL_Delay>


	  if(round_num == 0)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10b      	bne.n	800113e <main+0x8e>

		  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
		  {
			  ST7789V_SEND_DATA(COLOR_RED);
		  }*/
		  ST7789V_fill(COLOR_RED);
 8001126:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800112a:	f7ff fd21 	bl	8000b70 <ST7789V_fill>
		  round_num++;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
		  HAL_Delay(500);
 8001134:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001138:	f000 ffc2 	bl	80020c0 <HAL_Delay>
 800113c:	e013      	b.n	8001166 <main+0xb6>
	  }
	  else
	  {
		  //ST7789V_fillCircle(100, 100, 50, COLOR_BLACK);
		  ST7789V_drawCircle(100, 100, 50, COLOR_WHITE);
 800113e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001142:	2232      	movs	r2, #50	; 0x32
 8001144:	2164      	movs	r1, #100	; 0x64
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f7ff fd4a 	bl	8000be0 <ST7789V_drawCircle>
		  ST7789V_drawFastVLine(150, 80, 100, COLOR_WHITE);
 800114c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001150:	2264      	movs	r2, #100	; 0x64
 8001152:	2150      	movs	r1, #80	; 0x50
 8001154:	2096      	movs	r0, #150	; 0x96
 8001156:	f7ff fea5 	bl	8000ea4 <ST7789V_drawFastVLine>
			  for(int j = 0; j<200; j++)
			  {
				  ST7789V_drawPixel(i, j, COLOR_WHITE);
			  }
		  }
*/		  HAL_Delay(500);
 800115a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115e:	f000 ffaf 	bl	80020c0 <HAL_Delay>
		  round_num = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
	   	  round_num = 0;
	  }
/*
	  else if(round_num == 1)
	  {
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	e009      	b.n	8001180 <main+0xd0>
	   	  {
	   		  ST7789V_SEND_DATA(kuhmuh[i]);
 800116c:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <main+0x104>)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fb79 	bl	800086c <ST7789V_SEND_DATA>
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001186:	dbf1      	blt.n	800116c <main+0xbc>
	   	  }
	  	  HAL_Delay(500);
 8001188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800118c:	f000 ff98 	bl	80020c0 <HAL_Delay>
	  	  	  {
	  	  		 ST7789V_SEND_DATA(COLOR_BLUE);
	  	  	  }
	  	  	  */

	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8001190:	2201      	movs	r2, #1
 8001192:	2104      	movs	r1, #4
 8001194:	4808      	ldr	r0, [pc, #32]	; (80011b8 <main+0x108>)
 8001196:	f002 f82f 	bl	80031f8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800119a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119e:	f000 ff8f 	bl	80020c0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2104      	movs	r1, #4
 80011a6:	4804      	ldr	r0, [pc, #16]	; (80011b8 <main+0x108>)
 80011a8:	f002 f826 	bl	80031f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 80011ac:	e7a6      	b.n	80010fc <main+0x4c>
 80011ae:	bf00      	nop
 80011b0:	42020400 	.word	0x42020400
 80011b4:	20000008 	.word	0x20000008
 80011b8:	42021800 	.word	0x42021800

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b09e      	sub	sp, #120	; 0x78
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	2260      	movs	r2, #96	; 0x60
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f024 fbcd 	bl	802596a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011e0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80011e4:	f003 f924 	bl	8004430 <HAL_PWREx_ControlVoltageScaling>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80011ee:	f000 fb39 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80011f2:	2332      	movs	r3, #50	; 0x32
 80011f4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001202:	2310      	movs	r3, #16
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001206:	2301      	movs	r3, #1
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800120a:	2310      	movs	r3, #16
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800120e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001218:	2301      	movs	r3, #1
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001224:	2350      	movs	r3, #80	; 0x50
 8001226:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800122c:	2302      	movs	r3, #2
 800122e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001230:	2302      	movs	r3, #2
 8001232:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001234:	2300      	movs	r3, #0
 8001236:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4618      	mov	r0, r3
 8001242:	f003 f9e7 	bl	8004614 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800124c:	f000 fb0a 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	231f      	movs	r3, #31
 8001252:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2303      	movs	r3, #3
 8001256:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	2104      	movs	r1, #4
 800126c:	4618      	mov	r0, r3
 800126e:	f004 f8a7 	bl	80053c0 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001278:	f000 faf4 	bl	8001864 <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3778      	adds	r7, #120	; 0x78
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001288:	f003 f9b4 	bl	80045f4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800128c:	2002      	movs	r0, #2
 800128e:	f003 f951 	bl	8004534 <HAL_PWREx_ConfigSupply>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001298:	f000 fae4 	bl	8001864 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_ADC1_Init+0x80>)
 80012a6:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <MX_ADC1_Init+0x84>)
 80012a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_ADC1_Init+0x80>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_ADC1_Init+0x80>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_ADC1_Init+0x80>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_ADC1_Init+0x80>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_ADC1_Init+0x80>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_ADC1_Init+0x80>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_ADC1_Init+0x80>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_ADC1_Init+0x80>)
 80012d8:	2201      	movs	r2, #1
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_ADC1_Init+0x80>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_ADC1_Init+0x80>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_ADC1_Init+0x80>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_ADC1_Init+0x80>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_ADC1_Init+0x80>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_ADC1_Init+0x80>)
 8001300:	2200      	movs	r2, #0
 8001302:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_ADC1_Init+0x80>)
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_ADC1_Init+0x80>)
 800130e:	f000 ffd7 	bl	80022c0 <HAL_ADC_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001318:	f000 faa4 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2004c584 	.word	0x2004c584
 8001324:	42028000 	.word	0x42028000

08001328 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_CRC_Init+0x3c>)
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <MX_CRC_Init+0x40>)
 8001330:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_CRC_Init+0x3c>)
 8001334:	2200      	movs	r2, #0
 8001336:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_CRC_Init+0x3c>)
 800133a:	2200      	movs	r2, #0
 800133c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_CRC_Init+0x3c>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_CRC_Init+0x3c>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_CRC_Init+0x3c>)
 800134c:	2201      	movs	r2, #1
 800134e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_CRC_Init+0x3c>)
 8001352:	f001 fb8f 	bl	8002a74 <HAL_CRC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800135c:	f000 fa82 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2004c610 	.word	0x2004c610
 8001368:	40023000 	.word	0x40023000

0800136c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_DMA2D_Init+0x74>)
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <MX_DMA2D_Init+0x78>)
 8001374:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_DMA2D_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_DMA2D_Init+0x74>)
 800137e:	2202      	movs	r2, #2
 8001380:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_DMA2D_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_DMA2D_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_DMA2D_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_DMA2D_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_DMA2D_Init+0x74>)
 800139c:	2202      	movs	r2, #2
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_DMA2D_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_DMA2D_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_DMA2D_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_DMA2D_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <MX_DMA2D_Init+0x74>)
 80013ba:	f001 fc45 	bl	8002c48 <HAL_DMA2D_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 80013c4:	f000 fa4e 	bl	8001864 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80013c8:	2101      	movs	r1, #1
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_DMA2D_Init+0x74>)
 80013cc:	f001 fc9e 	bl	8002d0c <HAL_DMA2D_ConfigLayer>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 80013d6:	f000 fa45 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2004c634 	.word	0x2004c634
 80013e4:	4002b000 	.word	0x4002b000

080013e8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 80013fc:	f001 ff14 	bl	8003228 <HAL_ICACHE_Disable>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001406:	f000 fa2d 	bl	8001864 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x0;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x0;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8001412:	2301      	movs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(ICACHE_REGION_0, &pRegionConfig) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	2000      	movs	r0, #0
 8001424:	f001 ff30 	bl	8003288 <HAL_ICACHE_EnableRemapRegion>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ICACHE_Init+0x4a>
  {
    Error_Handler();
 800142e:	f000 fa19 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001452:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001456:	f7ff fe0f 	bl	8001078 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800145a:	2002      	movs	r0, #2
 800145c:	f7ff fdf0 	bl	8001040 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff fded 	bl	8001040 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800146a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800146c:	2303      	movs	r3, #3
 800146e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <MX_UCPD1_Init+0x64>)
 800147a:	f008 fb84 	bl	8009b86 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800147e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001482:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001484:	2303      	movs	r3, #3
 8001486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_UCPD1_Init+0x68>)
 8001492:	f008 fb78 	bl	8009b86 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	42020400 	.word	0x42020400
 80014a4:	42020000 	.word	0x42020000

080014a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014ae:	4a23      	ldr	r2, [pc, #140]	; (800153c <MX_USART1_UART_Init+0x94>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f0:	4811      	ldr	r0, [pc, #68]	; (8001538 <MX_USART1_UART_Init+0x90>)
 80014f2:	f007 fbf7 	bl	8008ce4 <HAL_UART_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014fc:	f000 f9b2 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001500:	2100      	movs	r1, #0
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_USART1_UART_Init+0x90>)
 8001504:	f007 ffce 	bl	80094a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800150e:	f000 f9a9 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001512:	2100      	movs	r1, #0
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <MX_USART1_UART_Init+0x90>)
 8001516:	f008 f803 	bl	8009520 <HAL_UARTEx_SetRxFifoThreshold>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001520:	f000 f9a0 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_USART1_UART_Init+0x90>)
 8001526:	f007 ff84 	bl	8009432 <HAL_UARTEx_DisableFifoMode>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001530:	f000 f998 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2004c694 	.word	0x2004c694
 800153c:	40013800 	.word	0x40013800

08001540 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001548:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800154c:	2206      	movs	r2, #6
 800154e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001552:	2202      	movs	r2, #2
 8001554:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800157c:	f001 fed6 	bl	800332c <HAL_PCD_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001586:	f000 f96d 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2004c724 	.word	0x2004c724
 8001594:	42040000 	.word	0x42040000

08001598 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800159e:	463b      	mov	r3, r7
 80015a0:	2220      	movs	r2, #32
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f024 f9e0 	bl	802596a <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_FMC_Init+0xc8>)
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <MX_FMC_Init+0xcc>)
 80015ae:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <MX_FMC_Init+0xc8>)
 80015b2:	4a2d      	ldr	r2, [pc, #180]	; (8001668 <MX_FMC_Init+0xd0>)
 80015b4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <MX_FMC_Init+0xc8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <MX_FMC_Init+0xc8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <MX_FMC_Init+0xc8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <MX_FMC_Init+0xc8>)
 80015ca:	2210      	movs	r2, #16
 80015cc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <MX_FMC_Init+0xc8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_FMC_Init+0xc8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_FMC_Init+0xc8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_FMC_Init+0xc8>)
 80015e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_FMC_Init+0xc8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_FMC_Init+0xc8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_FMC_Init+0xc8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_FMC_Init+0xc8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_FMC_Init+0xc8>)
 8001602:	2200      	movs	r2, #0
 8001604:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_FMC_Init+0xc8>)
 8001608:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800160c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_FMC_Init+0xc8>)
 8001610:	2200      	movs	r2, #0
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_FMC_Init+0xc8>)
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_FMC_Init+0xc8>)
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 7;
 8001622:	2307      	movs	r3, #7
 8001624:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001626:	230f      	movs	r3, #15
 8001628:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 800162a:	2303      	movs	r3, #3
 800162c:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 800162e:	2303      	movs	r3, #3
 8001630:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001632:	230f      	movs	r3, #15
 8001634:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001636:	2310      	movs	r3, #16
 8001638:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800163a:	2311      	movs	r3, #17
 800163c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_FMC_Init+0xc8>)
 800164a:	f006 ff11 	bl	8008470 <HAL_SRAM_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 8001654:	f000 f906 	bl	8001864 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2004cc30 	.word	0x2004cc30
 8001664:	420d0400 	.word	0x420d0400
 8001668:	420d0504 	.word	0x420d0504

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001682:	4b69      	ldr	r3, [pc, #420]	; (8001828 <MX_GPIO_Init+0x1bc>)
 8001684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001688:	4a67      	ldr	r2, [pc, #412]	; (8001828 <MX_GPIO_Init+0x1bc>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001692:	4b65      	ldr	r3, [pc, #404]	; (8001828 <MX_GPIO_Init+0x1bc>)
 8001694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a0:	4b61      	ldr	r3, [pc, #388]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a6:	4a60      	ldr	r2, [pc, #384]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016b0:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ce:	4b56      	ldr	r3, [pc, #344]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016dc:	4b52      	ldr	r3, [pc, #328]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e2:	4a51      	ldr	r2, [pc, #324]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ec:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fa:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <MX_GPIO_Init+0x1bc>)
 80016fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001700:	4a49      	ldr	r2, [pc, #292]	; (8001828 <MX_GPIO_Init+0x1bc>)
 8001702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001706:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <MX_GPIO_Init+0x1bc>)
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <MX_GPIO_Init+0x1bc>)
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171e:	4a42      	ldr	r2, [pc, #264]	; (8001828 <MX_GPIO_Init+0x1bc>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001728:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <MX_GPIO_Init+0x1bc>)
 800172a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2104      	movs	r1, #4
 800173a:	483c      	ldr	r0, [pc, #240]	; (800182c <MX_GPIO_Init+0x1c0>)
 800173c:	f001 fd5c 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2104      	movs	r1, #4
 8001744:	483a      	ldr	r0, [pc, #232]	; (8001830 <MX_GPIO_Init+0x1c4>)
 8001746:	f001 fd57 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	4839      	ldr	r0, [pc, #228]	; (8001834 <MX_GPIO_Init+0x1c8>)
 8001750:	f001 fd52 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	21a0      	movs	r1, #160	; 0xa0
 8001758:	4837      	ldr	r0, [pc, #220]	; (8001838 <MX_GPIO_Init+0x1cc>)
 800175a:	f001 fd4d 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 800175e:	2304      	movs	r3, #4
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	482d      	ldr	r0, [pc, #180]	; (800182c <MX_GPIO_Init+0x1c0>)
 8001776:	f001 fb67 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800177a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001780:	4b2e      	ldr	r3, [pc, #184]	; (800183c <MX_GPIO_Init+0x1d0>)
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4829      	ldr	r0, [pc, #164]	; (8001834 <MX_GPIO_Init+0x1c8>)
 8001790:	f001 fb5a 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001794:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4823      	ldr	r0, [pc, #140]	; (8001838 <MX_GPIO_Init+0x1cc>)
 80017aa:	f001 fb4d 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80017ae:	2304      	movs	r3, #4
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ba:	2302      	movs	r3, #2
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	481a      	ldr	r0, [pc, #104]	; (8001830 <MX_GPIO_Init+0x1c4>)
 80017c6:	f001 fb3f 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d6:	2302      	movs	r3, #2
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	4814      	ldr	r0, [pc, #80]	; (8001834 <MX_GPIO_Init+0x1c8>)
 80017e2:	f001 fb31 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80017e6:	2320      	movs	r3, #32
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	480e      	ldr	r0, [pc, #56]	; (8001838 <MX_GPIO_Init+0x1cc>)
 80017fe:	f001 fb23 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180a:	2301      	movs	r3, #1
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2302      	movs	r3, #2
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_GPIO_Init+0x1cc>)
 800181a:	f001 fb15 	bl	8002e48 <HAL_GPIO_Init>

}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	; 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	46020c00 	.word	0x46020c00
 800182c:	42021000 	.word	0x42021000
 8001830:	42021800 	.word	0x42021800
 8001834:	42020800 	.word	0x42020800
 8001838:	42020400 	.word	0x42020400
 800183c:	10210000 	.word	0x10210000

08001840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001852:	f000 fc15 	bl	8002080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40012c00 	.word	0x40012c00

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	e7fe      	b.n	800186c <Error_Handler+0x8>
	...

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_MspInit+0x34>)
 8001878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187c:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_MspInit+0x34>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_MspInit+0x34>)
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001894:	2004      	movs	r0, #4
 8001896:	f001 f8ba 	bl	8002a0e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	46020c00 	.word	0x46020c00

080018a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0bc      	sub	sp, #240	; 0xf0
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	22c8      	movs	r2, #200	; 0xc8
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f024 f84e 	bl	802596a <memset>
  if(hadc->Instance==ADC1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a24      	ldr	r2, [pc, #144]	; (8001964 <HAL_ADC_MspInit+0xbc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d140      	bne.n	800195a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80018d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80018e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 f973 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80018fc:	f7ff ffb2 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_ADC_MspInit+0xc0>)
 8001902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <HAL_ADC_MspInit+0xc0>)
 8001908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_ADC_MspInit+0xc0>)
 8001912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_ADC_MspInit+0xc0>)
 8001920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001924:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_ADC_MspInit+0xc0>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_ADC_MspInit+0xc0>)
 8001930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800193c:	2304      	movs	r3, #4
 800193e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2303      	movs	r3, #3
 8001944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_ADC_MspInit+0xc4>)
 8001956:	f001 fa77 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	37f0      	adds	r7, #240	; 0xf0
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	42028000 	.word	0x42028000
 8001968:	46020c00 	.word	0x46020c00
 800196c:	42020800 	.word	0x42020800

08001970 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_CRC_MspInit+0x3c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10e      	bne.n	80019a0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_CRC_MspInit+0x40>)
 8001984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001988:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_CRC_MspInit+0x40>)
 800198a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800198e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_CRC_MspInit+0x40>)
 8001994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40023000 	.word	0x40023000
 80019b0:	46020c00 	.word	0x46020c00

080019b4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <HAL_DMA2D_MspInit+0x3c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10e      	bne.n	80019e4 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_DMA2D_MspInit+0x40>)
 80019c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019cc:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_DMA2D_MspInit+0x40>)
 80019ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_DMA2D_MspInit+0x40>)
 80019d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	4002b000 	.word	0x4002b000
 80019f4:	46020c00 	.word	0x46020c00

080019f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0bc      	sub	sp, #240	; 0xf0
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	22c8      	movs	r2, #200	; 0xc8
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f023 ffa6 	bl	802596a <memset>
  if(huart->Instance==USART1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_UART_MspInit+0xc4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d145      	bne.n	8001ab4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a28:	f04f 0201 	mov.w	r2, #1
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a34:	2300      	movs	r3, #0
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 f8cd 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001a48:	f7ff ff0c 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a52:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a70:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001a88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aac:	4619      	mov	r1, r3
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_UART_MspInit+0xcc>)
 8001ab0:	f001 f9ca 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	37f0      	adds	r7, #240	; 0xf0
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	46020c00 	.word	0x46020c00
 8001ac4:	42020000 	.word	0x42020000

08001ac8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0be      	sub	sp, #248	; 0xf8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae0:	f107 0318 	add.w	r3, r7, #24
 8001ae4:	22c8      	movs	r2, #200	; 0xc8
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f023 ff3e 	bl	802596a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a3c      	ldr	r2, [pc, #240]	; (8001be4 <HAL_PCD_MspInit+0x11c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d171      	bne.n	8001bdc <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001af8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0a:	f107 0318 	add.w	r3, r7, #24
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 f864 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001b1a:	f7ff fea3 	bl	8001864 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b24:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001b3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b56:	230a      	movs	r3, #10
 8001b58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4822      	ldr	r0, [pc, #136]	; (8001bec <HAL_PCD_MspInit+0x124>)
 8001b64:	f001 f970 	bl	8002e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d119      	bne.n	8001bc8 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9a:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001bb2:	f002 fd0f 	bl	80045d4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_PCD_MspInit+0x120>)
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001bc6:	e001      	b.n	8001bcc <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001bc8:	f002 fd04 	bl	80045d4 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2049      	movs	r0, #73	; 0x49
 8001bd2:	f000 ff27 	bl	8002a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001bd6:	2049      	movs	r0, #73	; 0x49
 8001bd8:	f000 ff3e 	bl	8002a58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	37f8      	adds	r7, #248	; 0xf8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	42040000 	.word	0x42040000
 8001be8:	46020c00 	.word	0x46020c00
 8001bec:	42020000 	.word	0x42020000

08001bf0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_FMC_MspInit+0x8c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d132      	bne.n	8001c72 <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_FMC_MspInit+0x8c>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_FMC_MspInit+0x90>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_FMC_MspInit+0x90>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_FMC_MspInit+0x90>)
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c30:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001c34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c42:	230c      	movs	r3, #12
 8001c44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480e      	ldr	r0, [pc, #56]	; (8001c84 <HAL_FMC_MspInit+0x94>)
 8001c4c:	f001 f8fc 	bl	8002e48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001c50:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001c54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c62:	230c      	movs	r3, #12
 8001c64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4807      	ldr	r0, [pc, #28]	; (8001c88 <HAL_FMC_MspInit+0x98>)
 8001c6c:	f001 f8ec 	bl	8002e48 <HAL_GPIO_Init>
 8001c70:	e000      	b.n	8001c74 <HAL_FMC_MspInit+0x84>
    return;
 8001c72:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2004cc88 	.word	0x2004cc88
 8001c80:	46020c00 	.word	0x46020c00
 8001c84:	42021000 	.word	0x42021000
 8001c88:	42020c00 	.word	0x42020c00

08001c8c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c94:	f7ff ffac 	bl	8001bf0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_InitTick+0xcc>)
 8001cb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cb6:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <HAL_InitTick+0xcc>)
 8001cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cbc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_InitTick+0xcc>)
 8001cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cce:	f107 0210 	add.w	r2, r7, #16
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fec1 	bl	8005a60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cde:	f003 fe97 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8001ce2:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <HAL_InitTick+0xd0>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9b      	lsrs	r3, r3, #18
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_InitTick+0xd4>)
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_InitTick+0xd8>)
 8001cf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_InitTick+0xd4>)
 8001cfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cfe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d00:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <HAL_InitTick+0xd4>)
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_InitTick+0xd4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_InitTick+0xd4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001d12:	4818      	ldr	r0, [pc, #96]	; (8001d74 <HAL_InitTick+0xd4>)
 8001d14:	f006 fbfc 	bl	8008510 <HAL_TIM_Base_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d26:	4813      	ldr	r0, [pc, #76]	; (8001d74 <HAL_InitTick+0xd4>)
 8001d28:	f006 fc54 	bl	80085d4 <HAL_TIM_Base_Start_IT>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001d32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10e      	bne.n	8001d58 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d808      	bhi.n	8001d52 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	202a      	movs	r0, #42	; 0x2a
 8001d46:	f000 fe6d 	bl	8002a24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4a:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <HAL_InitTick+0xdc>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e002      	b.n	8001d58 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d58:	202a      	movs	r0, #42	; 0x2a
 8001d5a:	f000 fe7d 	bl	8002a58 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3738      	adds	r7, #56	; 0x38
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	46020c00 	.word	0x46020c00
 8001d70:	431bde83 	.word	0x431bde83
 8001d74:	2004cc8c 	.word	0x2004cc8c
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	2002580c 	.word	0x2002580c

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <NMI_Handler+0x4>

08001d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <HardFault_Handler+0x4>

08001d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <MemManage_Handler+0x4>

08001d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <BusFault_Handler+0x4>

08001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <UsageFault_Handler+0x4>

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <TIM1_UP_IRQHandler+0x10>)
 8001db2:	f006 fcaf 	bl	8008714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2004cc8c 	.word	0x2004cc8c

08001dc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <OTG_FS_IRQHandler+0x10>)
 8001dc6:	f001 fbd5 	bl	8003574 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2004c724 	.word	0x2004c724

08001dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_kill>:

int _kill(int pid, int sig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dee:	f023 fd63 	bl	80258b8 <__errno>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2216      	movs	r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
	return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_exit>:

void _exit (int status)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffe7 	bl	8001de4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e16:	e7fe      	b.n	8001e16 <_exit+0x12>

08001e18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e00a      	b.n	8001e40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e2a:	e000      	b.n	8001e2e <_read+0x16>
 8001e2c:	bf00      	nop
 8001e2e:	4601      	mov	r1, r0
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	b2ca      	uxtb	r2, r1
 8001e38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbf0      	blt.n	8001e2a <_read+0x12>
	}

return len;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e009      	b.n	8001e78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	60ba      	str	r2, [r7, #8]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	e000      	b.n	8001e72 <_write+0x20>
 8001e70:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbf1      	blt.n	8001e64 <_write+0x12>
	}
	return len;
 8001e80:	687b      	ldr	r3, [r7, #4]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_close>:

int _close(int file)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
	return -1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_isatty>:

int _isatty(int file)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
	return 1;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <_sbrk+0x5c>)
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <_sbrk+0x60>)
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <_sbrk+0x64>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <_sbrk+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d207      	bcs.n	8001f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f24:	f023 fcc8 	bl	80258b8 <__errno>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <_sbrk+0x64>)
 8001f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200c0000 	.word	0x200c0000
 8001f54:	00000400 	.word	0x00000400
 8001f58:	2004ccd8 	.word	0x2004ccd8
 8001f5c:	2004f8e0 	.word	0x2004f8e0

08001f60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <SystemInit+0x68>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <SystemInit+0x68>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <SystemInit+0x6c>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <SystemInit+0x6c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <SystemInit+0x6c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <SystemInit+0x6c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <SystemInit+0x6c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <SystemInit+0x6c>)
 8001f92:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f96:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <SystemInit+0x6c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <SystemInit+0x6c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <SystemInit+0x6c>)
 8001fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <SystemInit+0x6c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <SystemInit+0x68>)
 8001fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fba:	609a      	str	r2, [r3, #8]
  #endif
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00
 8001fcc:	46020c00 	.word	0x46020c00

08001fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fd6:	e003      	b.n	8001fe0 <LoopCopyDataInit>

08001fd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fde:	3104      	adds	r1, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fe0:	480b      	ldr	r0, [pc, #44]	; (8002010 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fe4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fe6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fe8:	d3f6      	bcc.n	8001fd8 <CopyDataInit>
	ldr	r2, =_sbss
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fec:	e002      	b.n	8001ff4 <LoopFillZerobss>

08001fee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ff0:	f842 3b04 	str.w	r3, [r2], #4

08001ff4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <LoopForever+0x16>)
	cmp	r2, r3
 8001ff6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ff8:	d3f9      	bcc.n	8001fee <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ffa:	f7ff ffb1 	bl	8001f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f023 fc73 	bl	80258e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002002:	f7ff f855 	bl	80010b0 <main>

08002006 <LoopForever>:

LoopForever:
    b LoopForever
 8002006:	e7fe      	b.n	8002006 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002008:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800200c:	0804e960 	.word	0x0804e960
	ldr	r0, =_sdata
 8002010:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002014:	20025900 	.word	0x20025900
	ldr	r2, =_sbss
 8002018:	2004b100 	.word	0x2004b100
	ldr	r3, = _ebss
 800201c:	2004f8dc 	.word	0x2004f8dc

08002020 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC1_IRQHandler>
	...

08002024 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_Init+0x4c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_Init+0x4c>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 fcea 	bl	8002a0e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800203a:	f003 fbb3 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_Init+0x50>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	490b      	ldr	r1, [pc, #44]	; (8002078 <HAL_Init+0x54>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_Init+0x58>)
 8002052:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002054:	2007      	movs	r0, #7
 8002056:	f7ff fe23 	bl	8001ca0 <HAL_InitTick>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e002      	b.n	800206a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fc04 	bl	8001870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000
 8002074:	46020c00 	.word	0x46020c00
 8002078:	08027a2c 	.word	0x08027a2c
 800207c:	20025808 	.word	0x20025808

08002080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_IncTick+0x20>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_IncTick+0x24>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20025810 	.word	0x20025810
 80020a4:	2004ccdc 	.word	0x2004ccdc

080020a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_GetTick+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	2004ccdc 	.word	0x2004ccdc

080020c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff ffee 	bl	80020a8 <HAL_GetTick>
 80020cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d005      	beq.n	80020e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_Delay+0x44>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020e6:	bf00      	nop
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d8f7      	bhi.n	80020e8 <HAL_Delay+0x28>
  {
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20025810 	.word	0x20025810

08002108 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	2a00      	cmp	r2, #0
 8002158:	d002      	beq.n	8002160 <LL_ADC_SetGainCompensation+0x32>
 800215a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800215e:	e000      	b.n	8002162 <LL_ADC_SetGainCompensation+0x34>
 8002160:	2200      	movs	r2, #0
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2107      	movs	r1, #7
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6093      	str	r3, [r2, #8]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ea:	d101      	bne.n	80021f0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800220e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002212:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800223a:	d101      	bne.n	8002240 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <LL_ADC_IsEnabled+0x18>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <LL_ADC_IsEnabled+0x1a>
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b04      	cmp	r3, #4
 8002286:	d101      	bne.n	800228c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d101      	bne.n	80022b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e2e3      	b.n	80028a8 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a92      	ldr	r2, [pc, #584]	; (8002538 <HAL_ADC_Init+0x278>)
 80022ee:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fad5 	bl	80018a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff60 	bl	80021d6 <LL_ADC_IsDeepPowerDownEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff46 	bl	80021b2 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff7b 	bl	8002226 <LL_ADC_IsInternalRegulatorEnabled>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d115      	bne.n	8002362 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff5f 	bl	80021fe <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002340:	4b7e      	ldr	r3, [pc, #504]	; (800253c <HAL_ADC_Init+0x27c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	4a7e      	ldr	r2, [pc, #504]	; (8002540 <HAL_ADC_Init+0x280>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	3301      	adds	r3, #1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002354:	e002      	b.n	800235c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3b01      	subs	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f9      	bne.n	8002356 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff5d 	bl	8002226 <LL_ADC_IsInternalRegulatorEnabled>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10e      	bne.n	8002390 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff6d 	bl	8002274 <LL_ADC_REG_IsConversionOngoing>
 800239a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 8274 	bne.w	8002892 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 8270 	bne.w	8002892 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff41 	bl	800224e <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d14e      	bne.n	8002470 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_ADC_Init+0x278>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d028      	beq.n	800242e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_ADC_Init+0x284>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_Init+0x13a>
 80023e6:	4857      	ldr	r0, [pc, #348]	; (8002544 <HAL_ADC_Init+0x284>)
 80023e8:	f7ff ff31 	bl	800224e <LL_ADC_IsEnabled>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	e008      	b.n	800240c <HAL_ADC_Init+0x14c>
 80023fa:	484f      	ldr	r0, [pc, #316]	; (8002538 <HAL_ADC_Init+0x278>)
 80023fc:	f7ff ff27 	bl	800224e <LL_ADC_IsEnabled>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d02f      	beq.n	8002470 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a4b      	ldr	r2, [pc, #300]	; (8002544 <HAL_ADC_Init+0x284>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_ADC_Init+0x15e>
 800241a:	4a4b      	ldr	r2, [pc, #300]	; (8002548 <HAL_ADC_Init+0x288>)
 800241c:	e000      	b.n	8002420 <HAL_ADC_Init+0x160>
 800241e:	4a4b      	ldr	r2, [pc, #300]	; (800254c <HAL_ADC_Init+0x28c>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4619      	mov	r1, r3
 8002426:	4610      	mov	r0, r2
 8002428:	f7ff fe6e 	bl	8002108 <LL_ADC_SetCommonClock>
 800242c:	e020      	b.n	8002470 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f023 010c 	bic.w	r1, r3, #12
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002440:	4293      	cmp	r3, r2
 8002442:	d005      	beq.n	8002450 <HAL_ADC_Init+0x190>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	3b01      	subs	r3, #1
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	e000      	b.n	8002452 <HAL_ADC_Init+0x192>
 8002450:	230c      	movs	r3, #12
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	430b      	orrs	r3, r1
 8002458:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <HAL_ADC_Init+0x28c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800246a:	4938      	ldr	r1, [pc, #224]	; (800254c <HAL_ADC_Init+0x28c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a30      	ldr	r2, [pc, #192]	; (8002538 <HAL_ADC_Init+0x278>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d010      	beq.n	800249c <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002480:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002486:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800248c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002494:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002496:	4313      	orrs	r3, r2
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	e030      	b.n	80024fe <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7f1b      	ldrb	r3, [r3, #28]
 80024a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024aa:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	d002      	beq.n	80024ba <HAL_ADC_Init+0x1fa>
 80024b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024b8:	e000      	b.n	80024bc <HAL_ADC_Init+0x1fc>
 80024ba:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024bc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80024c2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da04      	bge.n	80024d6 <HAL_ADC_Init+0x216>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024d4:	e001      	b.n	80024da <HAL_ADC_Init+0x21a>
 80024d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80024da:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4918      	ldr	r1, [pc, #96]	; (8002544 <HAL_ADC_Init+0x284>)
 80024e2:	428b      	cmp	r3, r1
 80024e4:	d103      	bne.n	80024ee <HAL_ADC_Init+0x22e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ec:	e003      	b.n	80024f6 <HAL_ADC_Init+0x236>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80024f6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d12f      	bne.n	8002568 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <HAL_ADC_Init+0x278>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	3b01      	subs	r3, #1
 8002518:	045b      	lsls	r3, r3, #17
 800251a:	6a3a      	ldr	r2, [r7, #32]
 800251c:	4313      	orrs	r3, r2
 800251e:	623b      	str	r3, [r7, #32]
 8002520:	e022      	b.n	8002568 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	e018      	b.n	8002568 <HAL_ADC_Init+0x2a8>
 8002536:	bf00      	nop
 8002538:	46021000 	.word	0x46021000
 800253c:	20025808 	.word	0x20025808
 8002540:	053e2d63 	.word	0x053e2d63
 8002544:	42028000 	.word	0x42028000
 8002548:	42028308 	.word	0x42028308
 800254c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a93      	ldr	r2, [pc, #588]	; (80027bc <HAL_ADC_Init+0x4fc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d018      	beq.n	80025a4 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	4313      	orrs	r3, r2
 8002588:	6a3a      	ldr	r2, [r7, #32]
 800258a:	4313      	orrs	r3, r2
 800258c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	4b8a      	ldr	r3, [pc, #552]	; (80027c0 <HAL_ADC_Init+0x500>)
 8002596:	4013      	ands	r3, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	6a39      	ldr	r1, [r7, #32]
 800259e:	430b      	orrs	r3, r1
 80025a0:	60d3      	str	r3, [r2, #12]
 80025a2:	e033      	b.n	800260c <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	4313      	orrs	r3, r2
 80025ba:	6a3a      	ldr	r2, [r7, #32]
 80025bc:	4313      	orrs	r3, r2
 80025be:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 80025ca:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	6a39      	ldr	r1, [r7, #32]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1a      	ldr	r2, [r3, #32]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a6a      	ldr	r2, [pc, #424]	; (80027bc <HAL_ADC_Init+0x4fc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	f000 8093 	beq.w	800273e <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fe29 	bl	8002274 <LL_ADC_REG_IsConversionOngoing>
 8002622:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fe36 	bl	800229a <LL_ADC_INJ_IsConversionOngoing>
 800262e:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d161      	bne.n	80026fa <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d15e      	bne.n	80026fa <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7f1b      	ldrb	r3, [r3, #28]
 8002640:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	495f      	ldr	r1, [pc, #380]	; (80027c4 <HAL_ADC_Init+0x504>)
 8002648:	428b      	cmp	r3, r1
 800264a:	d102      	bne.n	8002652 <HAL_ADC_Init+0x392>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	e002      	b.n	8002658 <HAL_ADC_Init+0x398>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002658:	4313      	orrs	r3, r2
 800265a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002666:	f023 0303 	bic.w	r3, r3, #3
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	430b      	orrs	r3, r1
 8002672:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f7ff fd51 	bl	800212e <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002692:	2b01      	cmp	r3, #1
 8002694:	d11e      	bne.n	80026d4 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <HAL_ADC_Init+0x508>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80026aa:	0411      	lsls	r1, r2, #16
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026b0:	4311      	orrs	r1, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80026bc:	4311      	orrs	r1, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026c2:	0892      	lsrs	r2, r2, #2
 80026c4:	430a      	orrs	r2, r1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	e007      	b.n	80026e4 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10c      	bne.n	800271c <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	f023 010f 	bic.w	r1, r3, #15
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	1e5a      	subs	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
 800271a:	e007      	b.n	800272c <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 020f 	bic.w	r2, r2, #15
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002730:	f023 0303 	bic.w	r3, r3, #3
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800273c:	e0b2      	b.n	80028a4 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002746:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 800274c:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8002752:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	4313      	orrs	r3, r2
 8002758:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002760:	2b01      	cmp	r3, #1
 8002762:	d103      	bne.n	800276c <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <HAL_ADC_Init+0x50c>)
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	69f9      	ldr	r1, [r7, #28]
 800277c:	430b      	orrs	r3, r1
 800277e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	461a      	mov	r2, r3
 800278a:	2100      	movs	r1, #0
 800278c:	f7ff fcf2 	bl	8002174 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002798:	461a      	mov	r2, r3
 800279a:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800279e:	f7ff fce9 	bl	8002174 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d112      	bne.n	80027d0 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f062 020f 	orn	r2, r2, #15
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28
 80027ba:	e044      	b.n	8002846 <HAL_ADC_Init+0x586>
 80027bc:	46021000 	.word	0x46021000
 80027c0:	fff0c013 	.word	0xfff0c013
 80027c4:	42028000 	.word	0x42028000
 80027c8:	fc00f81e 	.word	0xfc00f81e
 80027cc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027d8:	d135      	bne.n	8002846 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e00d      	b.n	80027fc <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	d006      	beq.n	8002804 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	3301      	adds	r3, #1
 80027fa:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b07      	cmp	r3, #7
 8002800:	d9ee      	bls.n	80027e0 <HAL_ADC_Init+0x520>
 8002802:	e000      	b.n	8002806 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8002804:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d108      	bne.n	800281e <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f062 020f 	orn	r2, r2, #15
 800281a:	629a      	str	r2, [r3, #40]	; 0x28
 800281c:	e013      	b.n	8002846 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	f003 031c 	and.w	r3, r3, #28
 8002830:	f06f 020f 	mvn.w	r2, #15
 8002834:	fa02 f103 	lsl.w	r1, r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_ADC_Init+0x5f0>)
 800284e:	4013      	ands	r3, r2
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	429a      	cmp	r2, r3
 8002854:	d10b      	bne.n	800286e <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002860:	f023 0303 	bic.w	r3, r3, #3
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800286c:	e01a      	b.n	80028a4 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002872:	f023 0312 	bic.w	r3, r3, #18
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002890:	e008      	b.n	80028a4 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80028a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	833ffff3 	.word	0x833ffff3

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db0b      	blt.n	8002942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <__NVIC_EnableIRQ+0x38>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2001      	movs	r0, #1
 800293a:	fa00 f202 	lsl.w	r2, r0, r2
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000e100 	.word	0xe000e100

08002954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db0a      	blt.n	800297e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	490c      	ldr	r1, [pc, #48]	; (80029a0 <__NVIC_SetPriority+0x4c>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	440b      	add	r3, r1
 8002978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800297c:	e00a      	b.n	8002994 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4908      	ldr	r1, [pc, #32]	; (80029a4 <__NVIC_SetPriority+0x50>)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3b04      	subs	r3, #4
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	440b      	add	r3, r1
 8002992:	761a      	strb	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f1c3 0307 	rsb	r3, r3, #7
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	bf28      	it	cs
 80029c6:	2304      	movcs	r3, #4
 80029c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <NVIC_EncodePriority+0x30>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3b03      	subs	r3, #3
 80029d6:	e000      	b.n	80029da <NVIC_EncodePriority+0x32>
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	4313      	orrs	r3, r2
         );
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3724      	adds	r7, #36	; 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff4c 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a32:	f7ff ff63 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	6978      	ldr	r0, [r7, #20]
 8002a3e:	f7ff ffb3 	bl	80029a8 <NVIC_EncodePriority>
 8002a42:	4602      	mov	r2, r0
 8002a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff82 	bl	8002954 <__NVIC_SetPriority>
}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff56 	bl	8002918 <__NVIC_EnableIRQ>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e054      	b.n	8002b30 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7f5b      	ldrb	r3, [r3, #29]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe ff6a 	bl	8001970 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	791b      	ldrb	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_CRC_Init+0xc4>)
 8002ab0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0218 	bic.w	r2, r2, #24
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	e00c      	b.n	8002ade <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	461a      	mov	r2, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f834 	bl	8002b3c <HAL_CRCEx_Polynomial_Set>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e028      	b.n	8002b30 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	795b      	ldrb	r3, [r3, #5]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d105      	bne.n	8002af2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f04f 32ff 	mov.w	r2, #4294967295
 8002aee:	611a      	str	r2, [r3, #16]
 8002af0:	e004      	b.n	8002afc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6912      	ldr	r2, [r2, #16]
 8002afa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	04c11db7 	.word	0x04c11db7

08002b3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b4c:	231f      	movs	r3, #31
 8002b4e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002b50:	bf00      	nop
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1e5a      	subs	r2, r3, #1
 8002b56:	613a      	str	r2, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_CRCEx_Polynomial_Set+0x34>
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b18      	cmp	r3, #24
 8002b74:	d846      	bhi.n	8002c04 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002b76:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002c0b 	.word	0x08002c0b
 8002b80:	08002c05 	.word	0x08002c05
 8002b84:	08002c05 	.word	0x08002c05
 8002b88:	08002c05 	.word	0x08002c05
 8002b8c:	08002c05 	.word	0x08002c05
 8002b90:	08002c05 	.word	0x08002c05
 8002b94:	08002c05 	.word	0x08002c05
 8002b98:	08002c05 	.word	0x08002c05
 8002b9c:	08002bf9 	.word	0x08002bf9
 8002ba0:	08002c05 	.word	0x08002c05
 8002ba4:	08002c05 	.word	0x08002c05
 8002ba8:	08002c05 	.word	0x08002c05
 8002bac:	08002c05 	.word	0x08002c05
 8002bb0:	08002c05 	.word	0x08002c05
 8002bb4:	08002c05 	.word	0x08002c05
 8002bb8:	08002c05 	.word	0x08002c05
 8002bbc:	08002bed 	.word	0x08002bed
 8002bc0:	08002c05 	.word	0x08002c05
 8002bc4:	08002c05 	.word	0x08002c05
 8002bc8:	08002c05 	.word	0x08002c05
 8002bcc:	08002c05 	.word	0x08002c05
 8002bd0:	08002c05 	.word	0x08002c05
 8002bd4:	08002c05 	.word	0x08002c05
 8002bd8:	08002c05 	.word	0x08002c05
 8002bdc:	08002be1 	.word	0x08002be1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d913      	bls.n	8002c0e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002bea:	e010      	b.n	8002c0e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b07      	cmp	r3, #7
 8002bf0:	d90f      	bls.n	8002c12 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002bf6:	e00c      	b.n	8002c12 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b0f      	cmp	r3, #15
 8002bfc:	d90b      	bls.n	8002c16 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c02:	e008      	b.n	8002c16 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	75fb      	strb	r3, [r7, #23]
      break;
 8002c08:	e006      	b.n	8002c18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e004      	b.n	8002c18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e002      	b.n	8002c18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c12:	bf00      	nop
 8002c14:	e000      	b.n	8002c18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c16:	bf00      	nop
  }
  if (status == HAL_OK)
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10d      	bne.n	8002c3a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 0118 	bic.w	r1, r3, #24
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e053      	b.n	8002d02 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe fea0 	bl	80019b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6851      	ldr	r1, [r2, #4]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	69d2      	ldr	r2, [r2, #28]
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6891      	ldr	r1, [r2, #8]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6992      	ldr	r2, [r2, #24]
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	041b      	lsls	r3, r3, #16
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68d1      	ldr	r1, [r2, #12]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	051a      	lsls	r2, r3, #20
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	055b      	lsls	r3, r3, #21
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_DMA2D_ConfigLayer+0x20>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e084      	b.n	8002e36 <HAL_DMA2D_ConfigLayer+0x12a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	3328      	adds	r3, #40	; 0x28
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d60:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002d6c:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <HAL_DMA2D_ConfigLayer+0x138>)
 8002d6e:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b0a      	cmp	r3, #10
 8002d76:	d003      	beq.n	8002d80 <HAL_DMA2D_ConfigLayer+0x74>
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b09      	cmp	r3, #9
 8002d7e:	d107      	bne.n	8002d90 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e005      	b.n	8002d9c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d120      	bne.n	8002de4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	ea02 0103 	and.w	r1, r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b0a      	cmp	r3, #10
 8002dca:	d003      	beq.n	8002dd4 <HAL_DMA2D_ConfigLayer+0xc8>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	d127      	bne.n	8002e24 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
 8002de2:	e01f      	b.n	8002e24 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	ea02 0103 	and.w	r1, r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b0a      	cmp	r3, #10
 8002e0c:	d003      	beq.n	8002e16 <HAL_DMA2D_ConfigLayer+0x10a>
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b09      	cmp	r3, #9
 8002e14:	d106      	bne.n	8002e24 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e22:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	ff33000f 	.word	0xff33000f

08002e48 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e5a:	e1ba      	b.n	80031d2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 81aa 	beq.w	80031cc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a55      	ldr	r2, [pc, #340]	; (8002fd0 <HAL_GPIO_Init+0x188>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d15d      	bne.n	8002f3c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002e86:	2201      	movs	r2, #1
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0201 	and.w	r2, r3, #1
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002eb0:	4a48      	ldr	r2, [pc, #288]	; (8002fd4 <HAL_GPIO_Init+0x18c>)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002eb8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002eba:	4a46      	ldr	r2, [pc, #280]	; (8002fd4 <HAL_GPIO_Init+0x18c>)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	08da      	lsrs	r2, r3, #3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	3208      	adds	r2, #8
 8002ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220b      	movs	r2, #11
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	3208      	adds	r2, #8
 8002f06:	69f9      	ldr	r1, [r7, #28]
 8002f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	2202      	movs	r2, #2
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e067      	b.n	800300c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x104>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b12      	cmp	r3, #18
 8002f4a:	d145      	bne.n	8002fd8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	69f9      	ldr	r1, [r7, #28]
 8002f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0203 	and.w	r2, r3, #3
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e01e      	b.n	800300c <HAL_GPIO_Init+0x1c4>
 8002fce:	bf00      	nop
 8002fd0:	46020000 	.word	0x46020000
 8002fd4:	08027a84 	.word	0x08027a84
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0203 	and.w	r2, r3, #3
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	4313      	orrs	r3, r2
 8003004:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d00b      	beq.n	800302c <HAL_GPIO_Init+0x1e4>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d007      	beq.n	800302c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003020:	2b11      	cmp	r3, #17
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b12      	cmp	r3, #18
 800302a:	d130      	bne.n	800308e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	4013      	ands	r3, r2
 8003042:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	4313      	orrs	r3, r2
 8003054:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003062:	2201      	movs	r2, #1
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	4013      	ands	r3, r2
 8003070:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 0201 	and.w	r2, r3, #1
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	4313      	orrs	r3, r2
 8003086:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d017      	beq.n	80030c6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2203      	movs	r2, #3
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d07c      	beq.n	80031cc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80030d2:	4a47      	ldr	r2, [pc, #284]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3318      	adds	r3, #24
 80030da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030de:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	220f      	movs	r2, #15
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0a9a      	lsrs	r2, r3, #10
 80030fa:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <HAL_GPIO_Init+0x3ac>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	f002 0203 	and.w	r2, r2, #3
 8003104:	00d2      	lsls	r2, r2, #3
 8003106:	4093      	lsls	r3, r2
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	4313      	orrs	r3, r2
 800310c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800310e:	4938      	ldr	r1, [pc, #224]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3318      	adds	r3, #24
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800311c:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	43db      	mvns	r3, r3
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	4013      	ands	r3, r2
 800312a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003140:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	4013      	ands	r3, r2
 8003154:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800316a:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003170:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003176:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	4013      	ands	r3, r2
 8003180:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003196:	4a16      	ldr	r2, [pc, #88]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 80031a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <HAL_GPIO_Init+0x3a8>)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	3301      	adds	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f47f ae3d 	bne.w	8002e5c <HAL_GPIO_Init+0x14>
  }
}
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	3724      	adds	r7, #36	; 0x24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	46022000 	.word	0x46022000
 80031f4:	002f7f7f 	.word	0x002f7f7f

080031f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
 8003204:	4613      	mov	r3, r2
 8003206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800320e:	887a      	ldrh	r2, [r7, #2]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003214:	e002      	b.n	800321c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_ICACHE_Disable+0x5c>)
 8003234:	2202      	movs	r2, #2
 8003236:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_ICACHE_Disable+0x5c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a11      	ldr	r2, [pc, #68]	; (8003284 <HAL_ICACHE_Disable+0x5c>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003244:	f7fe ff30 	bl	80020a8 <HAL_GetTick>
 8003248:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800324a:	e00f      	b.n	800326c <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 800324c:	f7fe ff2c 	bl	80020a8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d908      	bls.n	800326c <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_ICACHE_Disable+0x5c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	71fb      	strb	r3, [r7, #7]
        break;
 800326a:	e005      	b.n	8003278 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_ICACHE_Disable+0x5c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e9      	bne.n	800324c <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8003278:	79fb      	ldrb	r3, [r7, #7]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40030400 	.word	0x40030400

08003288 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
 80032a6:	e034      	b.n	8003312 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	009a      	lsls	r2, r3, #2
 80032ac:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 80032ae:	4413      	add	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
 80032c2:	e026      	b.n	8003312 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80032d0:	4013      	ands	r3, r2
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	425b      	negs	r3, r3
 80032e2:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80032e4:	401a      	ands	r2, r3
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	025a      	lsls	r2, r3, #9
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8003300:	4313      	orrs	r3, r2
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40030400 	.word	0x40030400
 8003324:	40030420 	.word	0x40030420
 8003328:	07ff0000 	.word	0x07ff0000

0800332c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800332c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332e:	b08f      	sub	sp, #60	; 0x3c
 8003330:	af0a      	add	r7, sp, #40	; 0x28
 8003332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e116      	b.n	800356c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fe fbb5 	bl	8001ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2203      	movs	r2, #3
 8003362:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f006 fd57 	bl	8009e30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	687e      	ldr	r6, [r7, #4]
 800338a:	466d      	mov	r5, sp
 800338c:	f106 0410 	add.w	r4, r6, #16
 8003390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800339c:	e885 0003 	stmia.w	r5, {r0, r1}
 80033a0:	1d33      	adds	r3, r6, #4
 80033a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033a4:	6838      	ldr	r0, [r7, #0]
 80033a6:	f006 fc74 	bl	8009c92 <USB_CoreInit>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0d7      	b.n	800356c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f006 fd45 	bl	8009e52 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e04a      	b.n	8003464 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	333d      	adds	r3, #61	; 0x3d
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	333c      	adds	r3, #60	; 0x3c
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	b298      	uxth	r0, r3
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3344      	adds	r3, #68	; 0x44
 800340a:	4602      	mov	r2, r0
 800340c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3340      	adds	r3, #64	; 0x40
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	3348      	adds	r3, #72	; 0x48
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	334c      	adds	r3, #76	; 0x4c
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3354      	adds	r3, #84	; 0x54
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	3301      	adds	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d3af      	bcc.n	80033ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e044      	b.n	80034fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	3301      	adds	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	d3b5      	bcc.n	8003474 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	687e      	ldr	r6, [r7, #4]
 8003510:	466d      	mov	r5, sp
 8003512:	f106 0410 	add.w	r4, r6, #16
 8003516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800351a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800351c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800351e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003522:	e885 0003 	stmia.w	r5, {r0, r1}
 8003526:	1d33      	adds	r3, r6, #4
 8003528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800352a:	6838      	ldr	r0, [r7, #0]
 800352c:	f006 fcde 	bl	8009eec <USB_DevInit>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e014      	b.n	800356c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b01      	cmp	r3, #1
 8003558:	d102      	bne.n	8003560 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 ff38 	bl	80043d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f006 fff1 	bl	800a54c <USB_DevDisconnect>

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003574 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b08d      	sub	sp, #52	; 0x34
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f007 f892 	bl	800a6b4 <USB_GetMode>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 84b7 	bne.w	8003f06 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f006 fff6 	bl	800a58e <USB_ReadInterrupts>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 84ad 	beq.w	8003f04 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f006 ffe3 	bl	800a58e <USB_ReadInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d107      	bne.n	80035e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f002 0202 	and.w	r2, r2, #2
 80035e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f006 ffd1 	bl	800a58e <USB_ReadInterrupts>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d161      	bne.n	80036ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699a      	ldr	r2, [r3, #24]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0210 	bic.w	r2, r2, #16
 8003604:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	0c5b      	lsrs	r3, r3, #17
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	2b02      	cmp	r3, #2
 8003630:	d124      	bne.n	800367c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d035      	beq.n	80036aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800364c:	b29b      	uxth	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	6a38      	ldr	r0, [r7, #32]
 8003652:	f006 ff23 	bl	800a49c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003662:	441a      	add	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	6a1a      	ldr	r2, [r3, #32]
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003674:	441a      	add	r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	621a      	str	r2, [r3, #32]
 800367a:	e016      	b.n	80036aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	0c5b      	lsrs	r3, r3, #17
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	2b06      	cmp	r3, #6
 8003686:	d110      	bne.n	80036aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800368e:	2208      	movs	r2, #8
 8003690:	4619      	mov	r1, r3
 8003692:	6a38      	ldr	r0, [r7, #32]
 8003694:	f006 ff02 	bl	800a49c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a4:	441a      	add	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0210 	orr.w	r2, r2, #16
 80036b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f006 ff65 	bl	800a58e <USB_ReadInterrupts>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036ce:	f040 80a7 	bne.w	8003820 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f006 ff6a 	bl	800a5b4 <USB_ReadDevAllOutEpInterrupt>
 80036e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80036e2:	e099      	b.n	8003818 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 808e 	beq.w	800380c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f006 ff8e 	bl	800a61c <USB_ReadDevOutEPInterrupt>
 8003700:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	461a      	mov	r2, r3
 800371a:	2301      	movs	r3, #1
 800371c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800371e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fd27 	bl	8004174 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373c:	461a      	mov	r2, r3
 800373e:	2308      	movs	r3, #8
 8003740:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fdfd 	bl	8004344 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003760:	461a      	mov	r2, r3
 8003762:	2310      	movs	r3, #16
 8003764:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d030      	beq.n	80037d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b80      	cmp	r3, #128	; 0x80
 800377a:	d109      	bne.n	8003790 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800378a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800378e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	3304      	adds	r3, #4
 80037a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	78db      	ldrb	r3, [r3, #3]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d108      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fbf0 	bl	8003fa0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037cc:	461a      	mov	r2, r3
 80037ce:	2302      	movs	r3, #2
 80037d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e8:	461a      	mov	r2, r3
 80037ea:	2320      	movs	r3, #32
 80037ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d009      	beq.n	800380c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	461a      	mov	r2, r3
 8003806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800380a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	3301      	adds	r3, #1
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	085b      	lsrs	r3, r3, #1
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	f47f af62 	bne.w	80036e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f006 feb2 	bl	800a58e <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003834:	f040 80db 	bne.w	80039ee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f006 fed3 	bl	800a5e8 <USB_ReadDevAllInEpInterrupt>
 8003842:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003848:	e0cd      	b.n	80039e6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80c2 	beq.w	80039da <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f006 fef9 	bl	800a658 <USB_ReadDevInEPInterrupt>
 8003866:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d057      	beq.n	8003922 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	2201      	movs	r2, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	43db      	mvns	r3, r3
 800388c:	69f9      	ldr	r1, [r7, #28]
 800388e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003892:	4013      	ands	r3, r2
 8003894:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a2:	461a      	mov	r2, r3
 80038a4:	2301      	movs	r3, #1
 80038a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d132      	bne.n	8003916 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	334c      	adds	r3, #76	; 0x4c
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4403      	add	r3, r0
 80038d0:	3348      	adds	r3, #72	; 0x48
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4419      	add	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4403      	add	r3, r0
 80038e4:	334c      	adds	r3, #76	; 0x4c
 80038e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d113      	bne.n	8003916 <HAL_PCD_IRQHandler+0x3a2>
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3354      	adds	r3, #84	; 0x54
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d108      	bne.n	8003916 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800390e:	461a      	mov	r2, r3
 8003910:	2101      	movs	r1, #1
 8003912:	f006 ff01 	bl	800a718 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	b2db      	uxtb	r3, r3
 800391a:	4619      	mov	r1, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fb01 	bl	8003f24 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003938:	461a      	mov	r2, r3
 800393a:	2308      	movs	r3, #8
 800393c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003954:	461a      	mov	r2, r3
 8003956:	2310      	movs	r3, #16
 8003958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003970:	461a      	mov	r2, r3
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d023      	beq.n	80039c8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003982:	6a38      	ldr	r0, [r7, #32]
 8003984:	f006 fc00 	bl	800a188 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	3338      	adds	r3, #56	; 0x38
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	3304      	adds	r3, #4
 800399a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	78db      	ldrb	r3, [r3, #3]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d108      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2200      	movs	r2, #0
 80039a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fb01 	bl	8003fb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	461a      	mov	r2, r3
 80039c4:	2302      	movs	r3, #2
 80039c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80039d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fb40 	bl	800405a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	3301      	adds	r3, #1
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f af2e 	bne.w	800384a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f006 fdcb 	bl	800a58e <USB_ReadInterrupts>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a02:	d122      	bne.n	8003a4a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d108      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fcf3 	bl	8004418 <HAL_PCDEx_LPM_Callback>
 8003a32:	e002      	b.n	8003a3a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 faa9 	bl	8003f8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f006 fd9d 	bl	800a58e <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5e:	d112      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d102      	bne.n	8003a76 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fa81 	bl	8003f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f006 fd7f 	bl	800a58e <USB_ReadInterrupts>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a9a:	d121      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003aaa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d111      	bne.n	8003ada <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	f003 020f 	and.w	r2, r3, #15
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fca0 	bl	8004418 <HAL_PCDEx_LPM_Callback>
 8003ad8:	e002      	b.n	8003ae0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fa4c 	bl	8003f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f006 fd52 	bl	800a58e <USB_ReadInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	f040 80b7 	bne.w	8003c66 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2110      	movs	r1, #16
 8003b12:	4618      	mov	r0, r3
 8003b14:	f006 fb38 	bl	800a188 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1c:	e046      	b.n	8003bac <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b96:	0151      	lsls	r1, r2, #5
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ba4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	3301      	adds	r3, #1
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d3b3      	bcc.n	8003b1e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bc8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be2:	f043 030b 	orr.w	r3, r3, #11
 8003be6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf8:	f043 030b 	orr.w	r3, r3, #11
 8003bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfe:	e015      	b.n	8003c2c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c26:	f043 030b 	orr.w	r3, r3, #11
 8003c2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c50:	461a      	mov	r2, r3
 8003c52:	f006 fd61 	bl	800a718 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f006 fc8f 	bl	800a58e <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7a:	d124      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f006 fd25 	bl	800a6d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f006 faf9 	bl	800a282 <USB_GetDevSpeed>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681c      	ldr	r4, [r3, #0]
 8003c9c:	f001 fe8a 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4620      	mov	r0, r4
 8003cac:	f006 f81e 	bl	8009cec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f957 	bl	8003f64 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f006 fc5f 	bl	800a58e <USB_ReadInterrupts>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f938 	bl	8003f50 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f002 0208 	and.w	r2, r2, #8
 8003cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f006 fc4a 	bl	800a58e <USB_ReadInterrupts>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	2b80      	cmp	r3, #128	; 0x80
 8003d02:	d122      	bne.n	8003d4a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d10:	2301      	movs	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
 8003d14:	e014      	b.n	8003d40 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d105      	bne.n	8003d3a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f95f 	bl	8003ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d3e5      	bcc.n	8003d16 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f006 fc1d 	bl	800a58e <USB_ReadInterrupts>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5e:	d13b      	bne.n	8003dd8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d60:	2301      	movs	r3, #1
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
 8003d64:	e02b      	b.n	8003dbe <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3340      	adds	r3, #64	; 0x40
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d115      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da12      	bge.n	8003db8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	333f      	adds	r3, #63	; 0x3f
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f920 	bl	8003ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	3301      	adds	r3, #1
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d3ce      	bcc.n	8003d66 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f006 fbd6 	bl	800a58e <USB_ReadInterrupts>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dec:	d155      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dee:	2301      	movs	r3, #1
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
 8003df2:	e045      	b.n	8003e80 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d12e      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	da2b      	bge.n	8003e7a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d121      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e76:	6053      	str	r3, [r2, #4]
            break;
 8003e78:	e007      	b.n	8003e8a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d3b4      	bcc.n	8003df4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f006 fb75 	bl	800a58e <USB_ReadInterrupts>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d10a      	bne.n	8003ec6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f88d 	bl	8003fd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f006 fb5f 	bl	800a58e <USB_ReadInterrupts>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d115      	bne.n	8003f06 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f879 	bl	8003fe4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	e000      	b.n	8003f06 <HAL_PCD_IRQHandler+0x992>
      return;
 8003f04:	bf00      	nop
    }
  }
}
 8003f06:	3734      	adds	r7, #52	; 0x34
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd90      	pop	{r4, r7, pc}

08003f0c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004008:	2b00      	cmp	r3, #0
 800400a:	da0c      	bge.n	8004026 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	f003 020f 	and.w	r2, r3, #15
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	3338      	adds	r3, #56	; 0x38
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	3304      	adds	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e00c      	b.n	8004040 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	3304      	adds	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68f9      	ldr	r1, [r7, #12]
 8004046:	4618      	mov	r0, r3
 8004048:	f006 f940 	bl	800a2cc <USB_EPStopXfer>
 800404c:	4603      	mov	r3, r0
 800404e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004050:	7afb      	ldrb	r3, [r7, #11]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08a      	sub	sp, #40	; 0x28
 800405e:	af02      	add	r7, sp, #8
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	3338      	adds	r3, #56	; 0x38
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	3304      	adds	r3, #4
 8004080:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	429a      	cmp	r2, r3
 800408c:	d901      	bls.n	8004092 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06c      	b.n	800416c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d902      	bls.n	80040ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3303      	adds	r3, #3
 80040b2:	089b      	lsrs	r3, r3, #2
 80040b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040b6:	e02b      	b.n	8004110 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d902      	bls.n	80040d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	3303      	adds	r3, #3
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6919      	ldr	r1, [r3, #16]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4603      	mov	r3, r0
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f006 f994 	bl	800a420 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	441a      	add	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	441a      	add	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	b29b      	uxth	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	429a      	cmp	r2, r3
 8004124:	d809      	bhi.n	800413a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1a      	ldr	r2, [r3, #32]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800412e:	429a      	cmp	r2, r3
 8004130:	d203      	bcs.n	800413a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1be      	bne.n	80040b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	429a      	cmp	r2, r3
 8004144:	d811      	bhi.n	800416a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	2201      	movs	r2, #1
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	43db      	mvns	r3, r3
 8004160:	6939      	ldr	r1, [r7, #16]
 8004162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004166:	4013      	ands	r3, r2
 8004168:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	333c      	adds	r3, #60	; 0x3c
 800418c:	3304      	adds	r3, #4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d17b      	bne.n	80042a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d015      	beq.n	80041e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4a61      	ldr	r2, [pc, #388]	; (800433c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	f240 80b9 	bls.w	8004330 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80b3 	beq.w	8004330 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	461a      	mov	r2, r3
 80041d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041dc:	6093      	str	r3, [r2, #8]
 80041de:	e0a7      	b.n	8004330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	461a      	mov	r2, r3
 80041f8:	2320      	movs	r3, #32
 80041fa:	6093      	str	r3, [r2, #8]
 80041fc:	e098      	b.n	8004330 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	f040 8093 	bne.w	8004330 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	4a4b      	ldr	r2, [pc, #300]	; (800433c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d90f      	bls.n	8004232 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004228:	461a      	mov	r2, r3
 800422a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422e:	6093      	str	r3, [r2, #8]
 8004230:	e07e      	b.n	8004330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4413      	add	r3, r2
 8004244:	3304      	adds	r3, #4
 8004246:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	0159      	lsls	r1, r3, #5
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	440b      	add	r3, r1
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425e:	1ad2      	subs	r2, r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d114      	bne.n	8004294 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800427c:	461a      	mov	r2, r3
 800427e:	2101      	movs	r1, #1
 8004280:	f006 fa4a 	bl	800a718 <USB_EP0_OutStart>
 8004284:	e006      	b.n	8004294 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	441a      	add	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff fe36 	bl	8003f0c <HAL_PCD_DataOutStageCallback>
 80042a0:	e046      	b.n	8004330 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4a26      	ldr	r2, [pc, #152]	; (8004340 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d124      	bne.n	80042f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c0:	461a      	mov	r2, r3
 80042c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c6:	6093      	str	r3, [r2, #8]
 80042c8:	e032      	b.n	8004330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	461a      	mov	r2, r3
 80042e2:	2320      	movs	r3, #32
 80042e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fe0d 	bl	8003f0c <HAL_PCD_DataOutStageCallback>
 80042f2:	e01d      	b.n	8004330 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d114      	bne.n	8004324 <PCD_EP_OutXfrComplete_int+0x1b0>
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d108      	bne.n	8004324 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800431c:	461a      	mov	r2, r3
 800431e:	2100      	movs	r1, #0
 8004320:	f006 f9fa 	bl	800a718 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	4619      	mov	r1, r3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fdee 	bl	8003f0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	4f54300a 	.word	0x4f54300a
 8004340:	4f54310a 	.word	0x4f54310a

08004344 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	333c      	adds	r3, #60	; 0x3c
 800435c:	3304      	adds	r3, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <PCD_EP_OutSetupPacket_int+0x88>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d90e      	bls.n	8004398 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	461a      	mov	r2, r3
 8004392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004396:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fdcf 	bl	8003f3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <PCD_EP_OutSetupPacket_int+0x88>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d90c      	bls.n	80043c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d108      	bne.n	80043c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043b8:	461a      	mov	r2, r3
 80043ba:	2101      	movs	r1, #1
 80043bc:	f006 f9ac 	bl	800a718 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	4f54300a 	.word	0x4f54300a

080043d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004402:	f043 0303 	orr.w	r3, r3, #3
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004438:	4b34      	ldr	r3, [pc, #208]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004440:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	429a      	cmp	r2, r3
 8004448:	d101      	bne.n	800444e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e057      	b.n	80044fe <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d90a      	bls.n	800446c <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004456:	4b2d      	ldr	r3, [pc, #180]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4313      	orrs	r3, r2
 8004462:	4a2a      	ldr	r2, [pc, #168]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004468:	60d3      	str	r3, [r2, #12]
 800446a:	e007      	b.n	800447c <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800446c:	4b27      	ldr	r3, [pc, #156]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004474:	4925      	ldr	r1, [pc, #148]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4313      	orrs	r3, r2
 800447a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800447c:	4b24      	ldr	r3, [pc, #144]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a24      	ldr	r2, [pc, #144]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	2232      	movs	r2, #50	; 0x32
 800448a:	fb02 f303 	mul.w	r3, r2, r3
 800448e:	4a21      	ldr	r2, [pc, #132]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	099b      	lsrs	r3, r3, #6
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800449a:	e002      	b.n	80044a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3b01      	subs	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <HAL_PWREx_ControlVoltageScaling+0x84>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f3      	bne.n	800449c <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01b      	beq.n	80044f2 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a15      	ldr	r2, [pc, #84]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	099b      	lsrs	r3, r3, #6
 80044c6:	2232      	movs	r2, #50	; 0x32
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	4a11      	ldr	r2, [pc, #68]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	099b      	lsrs	r3, r3, #6
 80044d4:	3301      	adds	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80044d8:	e002      	b.n	80044e0 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b01      	subs	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <HAL_PWREx_ControlVoltageScaling+0xc2>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f3      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e000      	b.n	80044fe <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	46020800 	.word	0x46020800
 8004510:	20025808 	.word	0x20025808
 8004514:	10624dd3 	.word	0x10624dd3

08004518 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800451c:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_PWREx_GetVoltageRange+0x18>)
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	46020800 	.word	0x46020800

08004534 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800453c:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <HAL_PWREx_ConfigSupply+0x94>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a22      	ldr	r2, [pc, #136]	; (80045cc <HAL_PWREx_ConfigSupply+0x98>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	2232      	movs	r2, #50	; 0x32
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <HAL_PWREx_ConfigSupply+0x98>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	099b      	lsrs	r3, r3, #6
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d113      	bne.n	8004588 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004566:	f023 0302 	bic.w	r3, r3, #2
 800456a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800456c:	e002      	b.n	8004574 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3b01      	subs	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004574:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b02      	cmp	r3, #2
 800457e:	d116      	bne.n	80045ae <HAL_PWREx_ConfigSupply+0x7a>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f3      	bne.n	800456e <HAL_PWREx_ConfigSupply+0x3a>
 8004586:	e012      	b.n	80045ae <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_PWREx_ConfigSupply+0x9c>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <HAL_PWREx_ConfigSupply+0x9c>)
 800458e:	f043 0302 	orr.w	r3, r3, #2
 8004592:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004594:	e002      	b.n	800459c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3b01      	subs	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <HAL_PWREx_ConfigSupply+0x9c>)
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <HAL_PWREx_ConfigSupply+0x7a>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f3      	bne.n	8004596 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e000      	b.n	80045ba <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20025808 	.word	0x20025808
 80045cc:	10624dd3 	.word	0x10624dd3
 80045d0:	46020800 	.word	0x46020800

080045d4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6113      	str	r3, [r2, #16]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	46020800 	.word	0x46020800

080045f4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_PWREx_EnableVddIO2+0x1c>)
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	4a04      	ldr	r2, [pc, #16]	; (8004610 <HAL_PWREx_EnableVddIO2+0x1c>)
 80045fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004602:	6113      	str	r3, [r2, #16]
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	46020800 	.word	0x46020800

08004614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08e      	sub	sp, #56	; 0x38
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f000 bec3 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800462e:	4b9c      	ldr	r3, [pc, #624]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004638:	4b99      	ldr	r3, [pc, #612]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8172 	beq.w	8004934 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_RCC_OscConfig+0x52>
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	2b0c      	cmp	r3, #12
 800465a:	f040 80e4 	bne.w	8004826 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004660:	2b01      	cmp	r3, #1
 8004662:	f040 80e0 	bne.w	8004826 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004666:	4b8e      	ldr	r3, [pc, #568]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_RCC_OscConfig+0x6c>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f000 be9a 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004684:	4b86      	ldr	r3, [pc, #536]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d004      	beq.n	800469a <HAL_RCC_OscConfig+0x86>
 8004690:	4b83      	ldr	r3, [pc, #524]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004698:	e005      	b.n	80046a6 <HAL_RCC_OscConfig+0x92>
 800469a:	4b81      	ldr	r3, [pc, #516]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800469c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d255      	bcs.n	8004756 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 fa0b 	bl	8005ad0 <RCC_SetFlashLatencyFromMSIRange>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f000 be77 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80046c6:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4a75      	ldr	r2, [pc, #468]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80046cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046d0:	6093      	str	r3, [r2, #8]
 80046d2:	4b73      	ldr	r3, [pc, #460]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	4970      	ldr	r1, [pc, #448]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80046ec:	d309      	bcc.n	8004702 <HAL_RCC_OscConfig+0xee>
 80046ee:	4b6c      	ldr	r3, [pc, #432]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f023 021f 	bic.w	r2, r3, #31
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4969      	ldr	r1, [pc, #420]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60cb      	str	r3, [r1, #12]
 8004700:	e07e      	b.n	8004800 <HAL_RCC_OscConfig+0x1ec>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	da0a      	bge.n	8004720 <HAL_RCC_OscConfig+0x10c>
 800470a:	4b65      	ldr	r3, [pc, #404]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	015b      	lsls	r3, r3, #5
 8004718:	4961      	ldr	r1, [pc, #388]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800471a:	4313      	orrs	r3, r2
 800471c:	60cb      	str	r3, [r1, #12]
 800471e:	e06f      	b.n	8004800 <HAL_RCC_OscConfig+0x1ec>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d30a      	bcc.n	8004740 <HAL_RCC_OscConfig+0x12c>
 800472a:	4b5d      	ldr	r3, [pc, #372]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	029b      	lsls	r3, r3, #10
 8004738:	4959      	ldr	r1, [pc, #356]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	60cb      	str	r3, [r1, #12]
 800473e:	e05f      	b.n	8004800 <HAL_RCC_OscConfig+0x1ec>
 8004740:	4b57      	ldr	r3, [pc, #348]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	03db      	lsls	r3, r3, #15
 800474e:	4954      	ldr	r1, [pc, #336]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004750:	4313      	orrs	r3, r2
 8004752:	60cb      	str	r3, [r1, #12]
 8004754:	e054      	b.n	8004800 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004756:	4b52      	ldr	r3, [pc, #328]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	4a51      	ldr	r2, [pc, #324]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800475c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004760:	6093      	str	r3, [r2, #8]
 8004762:	4b4f      	ldr	r3, [pc, #316]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	494c      	ldr	r1, [pc, #304]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004770:	4313      	orrs	r3, r2
 8004772:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800477c:	d309      	bcc.n	8004792 <HAL_RCC_OscConfig+0x17e>
 800477e:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f023 021f 	bic.w	r2, r3, #31
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4945      	ldr	r1, [pc, #276]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800478c:	4313      	orrs	r3, r2
 800478e:	60cb      	str	r3, [r1, #12]
 8004790:	e028      	b.n	80047e4 <HAL_RCC_OscConfig+0x1d0>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	2b00      	cmp	r3, #0
 8004798:	da0a      	bge.n	80047b0 <HAL_RCC_OscConfig+0x19c>
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	015b      	lsls	r3, r3, #5
 80047a8:	493d      	ldr	r1, [pc, #244]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60cb      	str	r3, [r1, #12]
 80047ae:	e019      	b.n	80047e4 <HAL_RCC_OscConfig+0x1d0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d30a      	bcc.n	80047d0 <HAL_RCC_OscConfig+0x1bc>
 80047ba:	4b39      	ldr	r3, [pc, #228]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	029b      	lsls	r3, r3, #10
 80047c8:	4935      	ldr	r1, [pc, #212]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60cb      	str	r3, [r1, #12]
 80047ce:	e009      	b.n	80047e4 <HAL_RCC_OscConfig+0x1d0>
 80047d0:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	03db      	lsls	r3, r3, #15
 80047de:	4930      	ldr	r1, [pc, #192]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 f96e 	bl	8005ad0 <RCC_SetFlashLatencyFromMSIRange>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f000 bdda 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004800:	f001 f8d8 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004804:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <HAL_RCC_OscConfig+0x290>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7fd fa49 	bl	8001ca0 <HAL_InitTick>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 808a 	beq.w	8004932 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800481e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004822:	f000 bdc7 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d066      	beq.n	80048fc <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800482e:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800483a:	f7fd fc35 	bl	80020a8 <HAL_GetTick>
 800483e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004840:	e009      	b.n	8004856 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004842:	f7fd fc31 	bl	80020a8 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d902      	bls.n	8004856 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	f000 bdaf 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0ef      	beq.n	8004842 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800486c:	6093      	str	r3, [r2, #8]
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	4909      	ldr	r1, [pc, #36]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004888:	d30e      	bcc.n	80048a8 <HAL_RCC_OscConfig+0x294>
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f023 021f 	bic.w	r2, r3, #31
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4902      	ldr	r1, [pc, #8]	; (80048a0 <HAL_RCC_OscConfig+0x28c>)
 8004898:	4313      	orrs	r3, r2
 800489a:	60cb      	str	r3, [r1, #12]
 800489c:	e04a      	b.n	8004934 <HAL_RCC_OscConfig+0x320>
 800489e:	bf00      	nop
 80048a0:	46020c00 	.word	0x46020c00
 80048a4:	2002580c 	.word	0x2002580c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	da0a      	bge.n	80048c6 <HAL_RCC_OscConfig+0x2b2>
 80048b0:	4b9b      	ldr	r3, [pc, #620]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	015b      	lsls	r3, r3, #5
 80048be:	4998      	ldr	r1, [pc, #608]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60cb      	str	r3, [r1, #12]
 80048c4:	e036      	b.n	8004934 <HAL_RCC_OscConfig+0x320>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d30a      	bcc.n	80048e6 <HAL_RCC_OscConfig+0x2d2>
 80048d0:	4b93      	ldr	r3, [pc, #588]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	029b      	lsls	r3, r3, #10
 80048de:	4990      	ldr	r1, [pc, #576]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60cb      	str	r3, [r1, #12]
 80048e4:	e026      	b.n	8004934 <HAL_RCC_OscConfig+0x320>
 80048e6:	4b8e      	ldr	r3, [pc, #568]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	03db      	lsls	r3, r3, #15
 80048f4:	498a      	ldr	r1, [pc, #552]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60cb      	str	r3, [r1, #12]
 80048fa:	e01b      	b.n	8004934 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80048fc:	4b88      	ldr	r3, [pc, #544]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a87      	ldr	r2, [pc, #540]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004908:	f7fd fbce 	bl	80020a8 <HAL_GetTick>
 800490c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800490e:	e009      	b.n	8004924 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004910:	f7fd fbca 	bl	80020a8 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d902      	bls.n	8004924 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	f000 bd48 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004924:	4b7e      	ldr	r3, [pc, #504]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ef      	bne.n	8004910 <HAL_RCC_OscConfig+0x2fc>
 8004930:	e000      	b.n	8004934 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004932:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8094 	beq.w	8004a6a <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	2b08      	cmp	r3, #8
 8004946:	d005      	beq.n	8004954 <HAL_RCC_OscConfig+0x340>
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d110      	bne.n	8004970 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	2b03      	cmp	r3, #3
 8004952:	d10d      	bne.n	8004970 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	4b72      	ldr	r3, [pc, #456]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8083 	beq.w	8004a68 <HAL_RCC_OscConfig+0x454>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d17e      	bne.n	8004a68 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f000 bd22 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d106      	bne.n	8004988 <HAL_RCC_OscConfig+0x374>
 800497a:	4b69      	ldr	r3, [pc, #420]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a68      	ldr	r2, [pc, #416]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e041      	b.n	8004a0c <HAL_RCC_OscConfig+0x3f8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004990:	d112      	bne.n	80049b8 <HAL_RCC_OscConfig+0x3a4>
 8004992:	4b63      	ldr	r3, [pc, #396]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a62      	ldr	r2, [pc, #392]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4b60      	ldr	r3, [pc, #384]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a5f      	ldr	r2, [pc, #380]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	4b5d      	ldr	r3, [pc, #372]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5c      	ldr	r2, [pc, #368]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e029      	b.n	8004a0c <HAL_RCC_OscConfig+0x3f8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80049c0:	d112      	bne.n	80049e8 <HAL_RCC_OscConfig+0x3d4>
 80049c2:	4b57      	ldr	r3, [pc, #348]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a56      	ldr	r2, [pc, #344]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b54      	ldr	r3, [pc, #336]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a53      	ldr	r2, [pc, #332]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	4b51      	ldr	r3, [pc, #324]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a50      	ldr	r2, [pc, #320]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e011      	b.n	8004a0c <HAL_RCC_OscConfig+0x3f8>
 80049e8:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a4c      	ldr	r2, [pc, #304]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	4b4a      	ldr	r3, [pc, #296]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a49      	ldr	r2, [pc, #292]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 80049fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b47      	ldr	r3, [pc, #284]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a46      	ldr	r2, [pc, #280]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004a06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d014      	beq.n	8004a3e <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004a14:	f7fd fb48 	bl	80020a8 <HAL_GetTick>
 8004a18:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1a:	e009      	b.n	8004a30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fd fb44 	bl	80020a8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d902      	bls.n	8004a30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	f000 bcc2 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a30:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0ef      	beq.n	8004a1c <HAL_RCC_OscConfig+0x408>
 8004a3c:	e015      	b.n	8004a6a <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fb33 	bl	80020a8 <HAL_GetTick>
 8004a42:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a44:	e009      	b.n	8004a5a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a46:	f7fd fb2f 	bl	80020a8 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b64      	cmp	r3, #100	; 0x64
 8004a52:	d902      	bls.n	8004a5a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	f000 bcad 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5a:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ef      	bne.n	8004a46 <HAL_RCC_OscConfig+0x432>
 8004a66:	e000      	b.n	8004a6a <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d066      	beq.n	8004b44 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_OscConfig+0x474>
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d11a      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d117      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a88:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d006      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x48e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f000 bc89 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004aa2:	4b1f      	ldr	r3, [pc, #124]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	491b      	ldr	r1, [pc, #108]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab6:	e045      	b.n	8004b44 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d024      	beq.n	8004b0a <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004ac0:	4b17      	ldr	r3, [pc, #92]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004acc:	f7fd faec 	bl	80020a8 <HAL_GetTick>
 8004ad0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad2:	e009      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad4:	f7fd fae8 	bl	80020a8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d902      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	f000 bc66 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ef      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	4907      	ldr	r1, [pc, #28]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	610b      	str	r3, [r1, #16]
 8004b08:	e01c      	b.n	8004b44 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <HAL_RCC_OscConfig+0x50c>)
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b16:	f7fd fac7 	bl	80020a8 <HAL_GetTick>
 8004b1a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1c:	e00c      	b.n	8004b38 <HAL_RCC_OscConfig+0x524>
 8004b1e:	bf00      	nop
 8004b20:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b24:	f7fd fac0 	bl	80020a8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d902      	bls.n	8004b38 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	f000 bc3e 	b.w	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b38:	4baf      	ldr	r3, [pc, #700]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ef      	bne.n	8004b24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80c7 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b58:	4ba7      	ldr	r3, [pc, #668]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d111      	bne.n	8004b8a <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	4ba4      	ldr	r3, [pc, #656]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6c:	4aa2      	ldr	r2, [pc, #648]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004b6e:	f043 0304 	orr.w	r3, r3, #4
 8004b72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004b76:	4ba0      	ldr	r3, [pc, #640]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b8a:	4b9c      	ldr	r3, [pc, #624]	; (8004dfc <HAL_RCC_OscConfig+0x7e8>)
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d118      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004b96:	4b99      	ldr	r3, [pc, #612]	; (8004dfc <HAL_RCC_OscConfig+0x7e8>)
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	4a98      	ldr	r2, [pc, #608]	; (8004dfc <HAL_RCC_OscConfig+0x7e8>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba2:	f7fd fa81 	bl	80020a8 <HAL_GetTick>
 8004ba6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004baa:	f7fd fa7d 	bl	80020a8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e3fb      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004bbc:	4b8f      	ldr	r3, [pc, #572]	; (8004dfc <HAL_RCC_OscConfig+0x7e8>)
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d05f      	beq.n	8004c90 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004bd0:	4b89      	ldr	r3, [pc, #548]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bd6:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d037      	beq.n	8004c56 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d006      	beq.n	8004bfe <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e3da      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004c08:	4b7b      	ldr	r3, [pc, #492]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c0e:	4a7a      	ldr	r2, [pc, #488]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c10:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004c14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004c18:	f7fd fa46 	bl	80020a8 <HAL_GetTick>
 8004c1c:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fd fa42 	bl	80020a8 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e3c0      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004c32:	4b71      	ldr	r3, [pc, #452]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ef      	bne.n	8004c20 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004c40:	4b6d      	ldr	r3, [pc, #436]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	496a      	ldr	r1, [pc, #424]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004c56:	4b68      	ldr	r3, [pc, #416]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c5c:	4a66      	ldr	r2, [pc, #408]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004c66:	f7fd fa1f 	bl	80020a8 <HAL_GetTick>
 8004c6a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6e:	f7fd fa1b 	bl	80020a8 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e399      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004c80:	4b5d      	ldr	r3, [pc, #372]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0ef      	beq.n	8004c6e <HAL_RCC_OscConfig+0x65a>
 8004c8e:	e01b      	b.n	8004cc8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004c90:	4b59      	ldr	r3, [pc, #356]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c96:	4a58      	ldr	r2, [pc, #352]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004c98:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004c9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004ca0:	f7fd fa02 	bl	80020a8 <HAL_GetTick>
 8004ca4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca8:	f7fd f9fe 	bl	80020a8 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e37c      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004cba:	4b4f      	ldr	r3, [pc, #316]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ef      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd0:	4b49      	ldr	r3, [pc, #292]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd6:	4a48      	ldr	r2, [pc, #288]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004cd8:	f023 0304 	bic.w	r3, r3, #4
 8004cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8112 	beq.w	8004f12 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf4:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d111      	bne.n	8004d26 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d02:	4b3d      	ldr	r3, [pc, #244]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d08:	4a3b      	ldr	r2, [pc, #236]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004d0a:	f043 0304 	orr.w	r3, r3, #4
 8004d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004d12:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d26:	4b35      	ldr	r3, [pc, #212]	; (8004dfc <HAL_RCC_OscConfig+0x7e8>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d118      	bne.n	8004d64 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004d32:	4b32      	ldr	r3, [pc, #200]	; (8004dfc <HAL_RCC_OscConfig+0x7e8>)
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	4a31      	ldr	r2, [pc, #196]	; (8004dfc <HAL_RCC_OscConfig+0x7e8>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d3e:	f7fd f9b3 	bl	80020a8 <HAL_GetTick>
 8004d42:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d46:	f7fd f9af 	bl	80020a8 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e32d      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d58:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_RCC_OscConfig+0x7e8>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f0      	beq.n	8004d46 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01f      	beq.n	8004db0 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d7c:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d82:	4a1d      	ldr	r2, [pc, #116]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d92:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d9c:	e018      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d9e:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da4:	4a14      	ldr	r2, [pc, #80]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004dae:	e00f      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004db6:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dc0:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dc6:	4a0c      	ldr	r2, [pc, #48]	; (8004df8 <HAL_RCC_OscConfig+0x7e4>)
 8004dc8:	f023 0304 	bic.w	r3, r3, #4
 8004dcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d058      	beq.n	8004e8a <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8004dd8:	f7fd f966 	bl	80020a8 <HAL_GetTick>
 8004ddc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dde:	e00f      	b.n	8004e00 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de0:	f7fd f962 	bl	80020a8 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d906      	bls.n	8004e00 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e2de      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
 8004df6:	bf00      	nop
 8004df8:	46020c00 	.word	0x46020c00
 8004dfc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e00:	4b9c      	ldr	r3, [pc, #624]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0e8      	beq.n	8004de0 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01b      	beq.n	8004e52 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e1a:	4b96      	ldr	r3, [pc, #600]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e20:	4a94      	ldr	r2, [pc, #592]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7fd f93c 	bl	80020a8 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e2b8      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e42:	4b8c      	ldr	r3, [pc, #560]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ed      	beq.n	8004e2c <HAL_RCC_OscConfig+0x818>
 8004e50:	e053      	b.n	8004efa <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e52:	4b88      	ldr	r3, [pc, #544]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e58:	4a86      	ldr	r2, [pc, #536]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e64:	f7fd f920 	bl	80020a8 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e29c      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e7a:	4b7e      	ldr	r3, [pc, #504]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1ed      	bne.n	8004e64 <HAL_RCC_OscConfig+0x850>
 8004e88:	e037      	b.n	8004efa <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004e8a:	f7fd f90d 	bl	80020a8 <HAL_GetTick>
 8004e8e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e92:	f7fd f909 	bl	80020a8 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e285      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ea8:	4b72      	ldr	r3, [pc, #456]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1ed      	bne.n	8004e92 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004eb6:	4b6f      	ldr	r3, [pc, #444]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01a      	beq.n	8004efa <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ec4:	4b6b      	ldr	r3, [pc, #428]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eca:	4a6a      	ldr	r2, [pc, #424]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ed4:	e00a      	b.n	8004eec <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fd f8e7 	bl	80020a8 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e263      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004eec:	4b61      	ldr	r3, [pc, #388]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1ed      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004efa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d107      	bne.n	8004f12 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f02:	4b5c      	ldr	r3, [pc, #368]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f08:	4a5a      	ldr	r2, [pc, #360]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004f0a:	f023 0304 	bic.w	r3, r3, #4
 8004f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d036      	beq.n	8004f8c <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d019      	beq.n	8004f5a <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004f26:	4b53      	ldr	r3, [pc, #332]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a52      	ldr	r2, [pc, #328]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f30:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004f32:	f7fd f8b9 	bl	80020a8 <HAL_GetTick>
 8004f36:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f3a:	f7fd f8b5 	bl	80020a8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e233      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f4c:	4b49      	ldr	r3, [pc, #292]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x926>
 8004f58:	e018      	b.n	8004f8c <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004f5a:	4b46      	ldr	r3, [pc, #280]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a45      	ldr	r2, [pc, #276]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f64:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004f66:	f7fd f89f 	bl	80020a8 <HAL_GetTick>
 8004f6a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f6e:	f7fd f89b 	bl	80020a8 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e219      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f80:	4b3c      	ldr	r3, [pc, #240]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d036      	beq.n	8005006 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d019      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004fa0:	4b34      	ldr	r3, [pc, #208]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a33      	ldr	r2, [pc, #204]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004faa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004fac:	f7fd f87c 	bl	80020a8 <HAL_GetTick>
 8004fb0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004fb4:	f7fd f878 	bl	80020a8 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e1f6      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004fc6:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x9a0>
 8004fd2:	e018      	b.n	8005006 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a26      	ldr	r2, [pc, #152]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004fe0:	f7fd f862 	bl	80020a8 <HAL_GetTick>
 8004fe4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004fe8:	f7fd f85e 	bl	80020a8 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e1dc      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d07f      	beq.n	8005112 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	2b00      	cmp	r3, #0
 8005018:	d062      	beq.n	80050e0 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800501a:	4b16      	ldr	r3, [pc, #88]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8005020:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005024:	6093      	str	r3, [r2, #8]
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	4910      	ldr	r1, [pc, #64]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005040:	d309      	bcc.n	8005056 <HAL_RCC_OscConfig+0xa42>
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f023 021f 	bic.w	r2, r3, #31
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4909      	ldr	r1, [pc, #36]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8005050:	4313      	orrs	r3, r2
 8005052:	60cb      	str	r3, [r1, #12]
 8005054:	e02a      	b.n	80050ac <HAL_RCC_OscConfig+0xa98>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	da0c      	bge.n	8005078 <HAL_RCC_OscConfig+0xa64>
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	015b      	lsls	r3, r3, #5
 800506c:	4901      	ldr	r1, [pc, #4]	; (8005074 <HAL_RCC_OscConfig+0xa60>)
 800506e:	4313      	orrs	r3, r2
 8005070:	60cb      	str	r3, [r1, #12]
 8005072:	e01b      	b.n	80050ac <HAL_RCC_OscConfig+0xa98>
 8005074:	46020c00 	.word	0x46020c00
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005080:	d30a      	bcc.n	8005098 <HAL_RCC_OscConfig+0xa84>
 8005082:	4ba5      	ldr	r3, [pc, #660]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	029b      	lsls	r3, r3, #10
 8005090:	49a1      	ldr	r1, [pc, #644]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005092:	4313      	orrs	r3, r2
 8005094:	60cb      	str	r3, [r1, #12]
 8005096:	e009      	b.n	80050ac <HAL_RCC_OscConfig+0xa98>
 8005098:	4b9f      	ldr	r3, [pc, #636]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	03db      	lsls	r3, r3, #15
 80050a6:	499c      	ldr	r1, [pc, #624]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80050ac:	4b9a      	ldr	r3, [pc, #616]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a99      	ldr	r2, [pc, #612]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80050b2:	f043 0310 	orr.w	r3, r3, #16
 80050b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80050b8:	f7fc fff6 	bl	80020a8 <HAL_GetTick>
 80050bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80050c0:	f7fc fff2 	bl	80020a8 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e170      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80050d2:	4b91      	ldr	r3, [pc, #580]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0xaac>
 80050de:	e018      	b.n	8005112 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80050e0:	4b8d      	ldr	r3, [pc, #564]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a8c      	ldr	r2, [pc, #560]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80050e6:	f023 0310 	bic.w	r3, r3, #16
 80050ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80050ec:	f7fc ffdc 	bl	80020a8 <HAL_GetTick>
 80050f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80050f4:	f7fc ffd8 	bl	80020a8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e156      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005106:	4b84      	ldr	r3, [pc, #528]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 814b 	beq.w	80053b2 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005122:	4b7d      	ldr	r3, [pc, #500]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b0c      	cmp	r3, #12
 800512c:	f000 80fa 	beq.w	8005324 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	2b02      	cmp	r3, #2
 8005136:	f040 80cc 	bne.w	80052d2 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800513a:	4b77      	ldr	r3, [pc, #476]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a76      	ldr	r2, [pc, #472]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005144:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005146:	f7fc ffaf 	bl	80020a8 <HAL_GetTick>
 800514a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514e:	f7fc ffab 	bl	80020a8 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e129      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005160:	4b6d      	ldr	r3, [pc, #436]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f0      	bne.n	800514e <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800516c:	4b6a      	ldr	r3, [pc, #424]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800516e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d111      	bne.n	800519e <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800517a:	4b67      	ldr	r3, [pc, #412]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800517c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005180:	4a65      	ldr	r2, [pc, #404]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005182:	f043 0304 	orr.w	r3, r3, #4
 8005186:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800518a:	4b63      	ldr	r3, [pc, #396]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800518c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005198:	2301      	movs	r3, #1
 800519a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800519e:	4b5f      	ldr	r3, [pc, #380]	; (800531c <HAL_RCC_OscConfig+0xd08>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051aa:	d102      	bne.n	80051b2 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80051b2:	4b5a      	ldr	r3, [pc, #360]	; (800531c <HAL_RCC_OscConfig+0xd08>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	4a59      	ldr	r2, [pc, #356]	; (800531c <HAL_RCC_OscConfig+0xd08>)
 80051b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051bc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80051be:	4b56      	ldr	r3, [pc, #344]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051d2:	3a01      	subs	r2, #1
 80051d4:	0212      	lsls	r2, r2, #8
 80051d6:	4311      	orrs	r1, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051dc:	430a      	orrs	r2, r1
 80051de:	494e      	ldr	r1, [pc, #312]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	628b      	str	r3, [r1, #40]	; 0x28
 80051e4:	4b4c      	ldr	r3, [pc, #304]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80051e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e8:	4b4d      	ldr	r3, [pc, #308]	; (8005320 <HAL_RCC_OscConfig+0xd0c>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051f0:	3a01      	subs	r2, #1
 80051f2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051fa:	3a01      	subs	r2, #1
 80051fc:	0252      	lsls	r2, r2, #9
 80051fe:	b292      	uxth	r2, r2
 8005200:	4311      	orrs	r1, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005206:	3a01      	subs	r2, #1
 8005208:	0412      	lsls	r2, r2, #16
 800520a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800520e:	4311      	orrs	r1, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005214:	3a01      	subs	r2, #1
 8005216:	0612      	lsls	r2, r2, #24
 8005218:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800521c:	430a      	orrs	r2, r1
 800521e:	493e      	ldr	r1, [pc, #248]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005220:	4313      	orrs	r3, r2
 8005222:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005224:	4b3c      	ldr	r3, [pc, #240]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	4a3b      	ldr	r2, [pc, #236]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800522a:	f023 0310 	bic.w	r3, r3, #16
 800522e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005230:	4b39      	ldr	r3, [pc, #228]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005238:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005240:	00d2      	lsls	r2, r2, #3
 8005242:	4935      	ldr	r1, [pc, #212]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005244:	4313      	orrs	r3, r2
 8005246:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005248:	4b33      	ldr	r3, [pc, #204]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	4a32      	ldr	r2, [pc, #200]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800524e:	f043 0310 	orr.w	r3, r3, #16
 8005252:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005254:	4b30      	ldr	r3, [pc, #192]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f023 020c 	bic.w	r2, r3, #12
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005260:	492d      	ldr	r1, [pc, #180]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005262:	4313      	orrs	r3, r2
 8005264:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005266:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800526a:	2b01      	cmp	r3, #1
 800526c:	d105      	bne.n	800527a <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800526e:	4b2b      	ldr	r3, [pc, #172]	; (800531c <HAL_RCC_OscConfig+0xd08>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	4a2a      	ldr	r2, [pc, #168]	; (800531c <HAL_RCC_OscConfig+0xd08>)
 8005274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005278:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800527a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800527e:	2b01      	cmp	r3, #1
 8005280:	d107      	bne.n	8005292 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005282:	4b25      	ldr	r3, [pc, #148]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005288:	4a23      	ldr	r2, [pc, #140]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800528a:	f023 0304 	bic.w	r3, r3, #4
 800528e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005292:	4b21      	ldr	r3, [pc, #132]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	4a20      	ldr	r2, [pc, #128]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800529c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800529e:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80052a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80052aa:	f7fc fefd 	bl	80020a8 <HAL_GetTick>
 80052ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b2:	f7fc fef9 	bl	80020a8 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e077      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80052c4:	4b14      	ldr	r3, [pc, #80]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0xc9e>
 80052d0:	e06f      	b.n	80053b2 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a10      	ldr	r2, [pc, #64]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80052d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80052de:	f7fc fee3 	bl	80020a8 <HAL_GetTick>
 80052e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e6:	f7fc fedf 	bl	80020a8 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e05d      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80052f8:	4b07      	ldr	r3, [pc, #28]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1f0      	bne.n	80052e6 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	4a03      	ldr	r2, [pc, #12]	; (8005318 <HAL_RCC_OscConfig+0xd04>)
 800530a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800530e:	f023 0303 	bic.w	r3, r3, #3
 8005312:	6293      	str	r3, [r2, #40]	; 0x28
 8005314:	e04d      	b.n	80053b2 <HAL_RCC_OscConfig+0xd9e>
 8005316:	bf00      	nop
 8005318:	46020c00 	.word	0x46020c00
 800531c:	46020800 	.word	0x46020800
 8005320:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005324:	4b25      	ldr	r3, [pc, #148]	; (80053bc <HAL_RCC_OscConfig+0xda8>)
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800532a:	4b24      	ldr	r3, [pc, #144]	; (80053bc <HAL_RCC_OscConfig+0xda8>)
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	2b01      	cmp	r3, #1
 8005336:	d03a      	beq.n	80053ae <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 0203 	and.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d133      	bne.n	80053ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d12a      	bne.n	80053ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	0b1b      	lsrs	r3, r3, #12
 800535c:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d122      	bne.n	80053ae <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005372:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d11a      	bne.n	80053ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	0a5b      	lsrs	r3, r3, #9
 800537c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005384:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d111      	bne.n	80053ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005396:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d108      	bne.n	80053ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	0e1b      	lsrs	r3, r3, #24
 80053a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d001      	beq.n	80053b2 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3738      	adds	r7, #56	; 0x38
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	46020c00 	.word	0x46020c00

080053c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e1d9      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d4:	4b9b      	ldr	r3, [pc, #620]	; (8005644 <HAL_RCC_ClockConfig+0x284>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d910      	bls.n	8005404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e2:	4b98      	ldr	r3, [pc, #608]	; (8005644 <HAL_RCC_ClockConfig+0x284>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 020f 	bic.w	r2, r3, #15
 80053ea:	4996      	ldr	r1, [pc, #600]	; (8005644 <HAL_RCC_ClockConfig+0x284>)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f2:	4b94      	ldr	r3, [pc, #592]	; (8005644 <HAL_RCC_ClockConfig+0x284>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e1c1      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	4b8c      	ldr	r3, [pc, #560]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800541c:	429a      	cmp	r2, r3
 800541e:	d908      	bls.n	8005432 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005420:	4b89      	ldr	r3, [pc, #548]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	4986      	ldr	r1, [pc, #536]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 800542e:	4313      	orrs	r3, r2
 8005430:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d012      	beq.n	8005464 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	4b81      	ldr	r3, [pc, #516]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	091b      	lsrs	r3, r3, #4
 8005448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800544c:	429a      	cmp	r2, r3
 800544e:	d909      	bls.n	8005464 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005450:	4b7d      	ldr	r3, [pc, #500]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	497a      	ldr	r1, [pc, #488]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005460:	4313      	orrs	r3, r2
 8005462:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	4b74      	ldr	r3, [pc, #464]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800547c:	429a      	cmp	r2, r3
 800547e:	d908      	bls.n	8005492 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005480:	4b71      	ldr	r3, [pc, #452]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	496e      	ldr	r1, [pc, #440]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 800548e:	4313      	orrs	r3, r2
 8005490:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d010      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	4b69      	ldr	r3, [pc, #420]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d908      	bls.n	80054c0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80054ae:	4b66      	ldr	r3, [pc, #408]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f023 020f 	bic.w	r2, r3, #15
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	4963      	ldr	r1, [pc, #396]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80d2 	beq.w	8005672 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d143      	bne.n	8005562 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054da:	4b5b      	ldr	r3, [pc, #364]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80054dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d110      	bne.n	800550a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80054e8:	4b57      	ldr	r3, [pc, #348]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80054ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ee:	4a56      	ldr	r2, [pc, #344]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80054f0:	f043 0304 	orr.w	r3, r3, #4
 80054f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80054f8:	4b53      	ldr	r3, [pc, #332]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80054fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	60bb      	str	r3, [r7, #8]
 8005504:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005506:	2301      	movs	r3, #1
 8005508:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800550a:	f7fc fdcd 	bl	80020a8 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005510:	4b4e      	ldr	r3, [pc, #312]	; (800564c <HAL_RCC_ClockConfig+0x28c>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00f      	beq.n	800553c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800551e:	f7fc fdc3 	bl	80020a8 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e12b      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005530:	4b46      	ldr	r3, [pc, #280]	; (800564c <HAL_RCC_ClockConfig+0x28c>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d107      	bne.n	8005552 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005542:	4b41      	ldr	r3, [pc, #260]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005548:	4a3f      	ldr	r2, [pc, #252]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 800554a:	f023 0304 	bic.w	r3, r3, #4
 800554e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005552:	4b3d      	ldr	r3, [pc, #244]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d121      	bne.n	80055a2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e112      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d107      	bne.n	800557a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800556a:	4b37      	ldr	r3, [pc, #220]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d115      	bne.n	80055a2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e106      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005582:	4b31      	ldr	r3, [pc, #196]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0fa      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005592:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e0f2      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80055a2:	4b29      	ldr	r3, [pc, #164]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f023 0203 	bic.w	r2, r3, #3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4926      	ldr	r1, [pc, #152]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80055b4:	f7fc fd78 	bl	80020a8 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d112      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c2:	e00a      	b.n	80055da <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c4:	f7fc fd70 	bl	80020a8 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e0d6      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b0c      	cmp	r3, #12
 80055e4:	d1ee      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x204>
 80055e6:	e044      	b.n	8005672 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d112      	bne.n	8005616 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80055f0:	e00a      	b.n	8005608 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f2:	f7fc fd59 	bl	80020a8 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e0bf      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005608:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f003 030c 	and.w	r3, r3, #12
 8005610:	2b08      	cmp	r3, #8
 8005612:	d1ee      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x232>
 8005614:	e02d      	b.n	8005672 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d123      	bne.n	8005666 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800561e:	e00a      	b.n	8005636 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005620:	f7fc fd42 	bl	80020a8 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	f241 3288 	movw	r2, #5000	; 0x1388
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e0a8      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005636:	4b04      	ldr	r3, [pc, #16]	; (8005648 <HAL_RCC_ClockConfig+0x288>)
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1ee      	bne.n	8005620 <HAL_RCC_ClockConfig+0x260>
 8005642:	e016      	b.n	8005672 <HAL_RCC_ClockConfig+0x2b2>
 8005644:	40022000 	.word	0x40022000
 8005648:	46020c00 	.word	0x46020c00
 800564c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005650:	f7fc fd2a 	bl	80020a8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e090      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005666:	4b4a      	ldr	r3, [pc, #296]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 030c 	and.w	r3, r3, #12
 800566e:	2b04      	cmp	r3, #4
 8005670:	d1ee      	bne.n	8005650 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d010      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	4b43      	ldr	r3, [pc, #268]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	429a      	cmp	r2, r3
 800568c:	d208      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f023 020f 	bic.w	r2, r3, #15
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	493d      	ldr	r1, [pc, #244]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 800569c:	4313      	orrs	r3, r2
 800569e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056a0:	4b3c      	ldr	r3, [pc, #240]	; (8005794 <HAL_RCC_ClockConfig+0x3d4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d210      	bcs.n	80056d0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b39      	ldr	r3, [pc, #228]	; (8005794 <HAL_RCC_ClockConfig+0x3d4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 020f 	bic.w	r2, r3, #15
 80056b6:	4937      	ldr	r1, [pc, #220]	; (8005794 <HAL_RCC_ClockConfig+0x3d4>)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056be:	4b35      	ldr	r3, [pc, #212]	; (8005794 <HAL_RCC_ClockConfig+0x3d4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e05b      	b.n	8005788 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d208      	bcs.n	80056fe <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80056ec:	4b28      	ldr	r3, [pc, #160]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4925      	ldr	r1, [pc, #148]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d012      	beq.n	8005730 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	091b      	lsrs	r3, r3, #4
 8005714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005718:	429a      	cmp	r2, r3
 800571a:	d209      	bcs.n	8005730 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800571c:	4b1c      	ldr	r3, [pc, #112]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	4919      	ldr	r1, [pc, #100]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 800572c:	4313      	orrs	r3, r2
 800572e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b00      	cmp	r3, #0
 800573a:	d010      	beq.n	800575e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	4b13      	ldr	r3, [pc, #76]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005748:	429a      	cmp	r2, r3
 800574a:	d208      	bcs.n	800575e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800574c:	4b10      	ldr	r3, [pc, #64]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	490d      	ldr	r1, [pc, #52]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 800575a:	4313      	orrs	r3, r2
 800575c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800575e:	f000 f821 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8005762:	4602      	mov	r2, r0
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <HAL_RCC_ClockConfig+0x3d0>)
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	490a      	ldr	r1, [pc, #40]	; (8005798 <HAL_RCC_ClockConfig+0x3d8>)
 800576e:	5ccb      	ldrb	r3, [r1, r3]
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_ClockConfig+0x3dc>)
 8005776:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x3e0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fc fa8f 	bl	8001ca0 <HAL_InitTick>
 8005782:	4603      	mov	r3, r0
 8005784:	73fb      	strb	r3, [r7, #15]

  return status;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	46020c00 	.word	0x46020c00
 8005794:	40022000 	.word	0x40022000
 8005798:	08027a2c 	.word	0x08027a2c
 800579c:	20025808 	.word	0x20025808
 80057a0:	2002580c 	.word	0x2002580c

080057a4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b08b      	sub	sp, #44	; 0x2c
 80057a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057b2:	4b7b      	ldr	r3, [pc, #492]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057bc:	4b78      	ldr	r3, [pc, #480]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_GetSysClockFreq+0x34>
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b0c      	cmp	r3, #12
 80057d0:	d121      	bne.n	8005816 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d11e      	bne.n	8005816 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80057d8:	4b71      	ldr	r3, [pc, #452]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d107      	bne.n	80057f4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80057e4:	4b6e      	ldr	r3, [pc, #440]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80057e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057ea:	0b1b      	lsrs	r3, r3, #12
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
 80057f2:	e005      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80057f4:	4b6a      	ldr	r3, [pc, #424]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	0f1b      	lsrs	r3, r3, #28
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005800:	4a68      	ldr	r2, [pc, #416]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005808:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d110      	bne.n	8005832 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005814:	e00d      	b.n	8005832 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005816:	4b62      	ldr	r3, [pc, #392]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f003 030c 	and.w	r3, r3, #12
 800581e:	2b04      	cmp	r3, #4
 8005820:	d102      	bne.n	8005828 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005822:	4b61      	ldr	r3, [pc, #388]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005824:	623b      	str	r3, [r7, #32]
 8005826:	e004      	b.n	8005832 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b08      	cmp	r3, #8
 800582c:	d101      	bne.n	8005832 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800582e:	4b5e      	ldr	r3, [pc, #376]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005830:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	f040 80ac 	bne.w	8005992 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800583a:	4b59      	ldr	r3, [pc, #356]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005844:	4b56      	ldr	r3, [pc, #344]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	0a1b      	lsrs	r3, r3, #8
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005852:	4b53      	ldr	r3, [pc, #332]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	091b      	lsrs	r3, r3, #4
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800585e:	4b50      	ldr	r3, [pc, #320]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	08db      	lsrs	r3, r3, #3
 8005864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 8086 	beq.w	800598e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d003      	beq.n	8005890 <HAL_RCC_GetSysClockFreq+0xec>
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d022      	beq.n	80058d4 <HAL_RCC_GetSysClockFreq+0x130>
 800588e:	e043      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589a:	eddf 6a44 	vldr	s13, [pc, #272]	; 80059ac <HAL_RCC_GetSysClockFreq+0x208>
 800589e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a2:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80058b2:	ed97 6a01 	vldr	s12, [r7, #4]
 80058b6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80059b0 <HAL_RCC_GetSysClockFreq+0x20c>
 80058ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80058c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ce:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80058d2:	e046      	b.n	8005962 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eddf 6a33 	vldr	s13, [pc, #204]	; 80059ac <HAL_RCC_GetSysClockFreq+0x208>
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e6:	4b2e      	ldr	r3, [pc, #184]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80058e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80058f6:	ed97 6a01 	vldr	s12, [r7, #4]
 80058fa:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80059b0 <HAL_RCC_GetSysClockFreq+0x20c>
 80058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005902:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005916:	e024      	b.n	8005962 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005930:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005938:	ee07 3a90 	vmov	s15, r3
 800593c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005940:	ed97 6a01 	vldr	s12, [r7, #4]
 8005944:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80059b0 <HAL_RCC_GetSysClockFreq+0x20c>
 8005948:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800594c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005954:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005960:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005962:	4b0f      	ldr	r3, [pc, #60]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	0e1b      	lsrs	r3, r3, #24
 8005968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596c:	3301      	adds	r3, #1
 800596e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800597a:	edd7 6a07 	vldr	s13, [r7, #28]
 800597e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005986:	ee17 3a90 	vmov	r3, s15
 800598a:	623b      	str	r3, [r7, #32]
 800598c:	e001      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005992:	6a3b      	ldr	r3, [r7, #32]
}
 8005994:	4618      	mov	r0, r3
 8005996:	372c      	adds	r7, #44	; 0x2c
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	46020c00 	.word	0x46020c00
 80059a4:	08027a44 	.word	0x08027a44
 80059a8:	00f42400 	.word	0x00f42400
 80059ac:	4b742400 	.word	0x4b742400
 80059b0:	46000000 	.word	0x46000000

080059b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80059b8:	f7ff fef4 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <HAL_RCC_GetHCLKFreq+0x28>)
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	4906      	ldr	r1, [pc, #24]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80059c8:	5ccb      	ldrb	r3, [r1, r3]
 80059ca:	fa22 f303 	lsr.w	r3, r2, r3
 80059ce:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80059d0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80059d2:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80059d4:	681b      	ldr	r3, [r3, #0]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	46020c00 	.word	0x46020c00
 80059e0:	08027a2c 	.word	0x08027a2c
 80059e4:	20025808 	.word	0x20025808

080059e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80059ec:	f7ff ffe2 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4903      	ldr	r1, [pc, #12]	; (8005a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	46020c00 	.word	0x46020c00
 8005a0c:	08027a3c 	.word	0x08027a3c

08005a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005a14:	f7ff ffce 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	4903      	ldr	r1, [pc, #12]	; (8005a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a26:	5ccb      	ldrb	r3, [r1, r3]
 8005a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	46020c00 	.word	0x46020c00
 8005a34:	08027a3c 	.word	0x08027a3c

08005a38 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005a3c:	f7ff ffba 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	4903      	ldr	r1, [pc, #12]	; (8005a5c <HAL_RCC_GetPCLK3Freq+0x24>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	46020c00 	.word	0x46020c00
 8005a5c:	08027a3c 	.word	0x08027a3c

08005a60 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	221f      	movs	r2, #31
 8005a6e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005a70:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <HAL_RCC_GetClockConfig+0x68>)
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f003 0203 	and.w	r2, r3, #3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005a7c:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <HAL_RCC_GetClockConfig+0x68>)
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <HAL_RCC_GetClockConfig+0x68>)
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <HAL_RCC_GetClockConfig+0x68>)
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	091b      	lsrs	r3, r3, #4
 8005a9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005aa2:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <HAL_RCC_GetClockConfig+0x68>)
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005aae:	4b07      	ldr	r3, [pc, #28]	; (8005acc <HAL_RCC_GetClockConfig+0x6c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 020f 	and.w	r2, r3, #15
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	601a      	str	r2, [r3, #0]
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	46020c00 	.word	0x46020c00
 8005acc:	40022000 	.word	0x40022000

08005ad0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ad8:	4b3e      	ldr	r3, [pc, #248]	; (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ae6:	f7fe fd17 	bl	8004518 <HAL_PWREx_GetVoltageRange>
 8005aea:	6178      	str	r0, [r7, #20]
 8005aec:	e019      	b.n	8005b22 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005aee:	4b39      	ldr	r3, [pc, #228]	; (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005af4:	4a37      	ldr	r2, [pc, #220]	; (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005af6:	f043 0304 	orr.w	r3, r3, #4
 8005afa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005afe:	4b35      	ldr	r3, [pc, #212]	; (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b0c:	f7fe fd04 	bl	8004518 <HAL_PWREx_GetVoltageRange>
 8005b10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b12:	4b30      	ldr	r3, [pc, #192]	; (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b18:	4a2e      	ldr	r2, [pc, #184]	; (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005b1a:	f023 0304 	bic.w	r3, r3, #4
 8005b1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b28:	d003      	beq.n	8005b32 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b30:	d109      	bne.n	8005b46 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b38:	d202      	bcs.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005b3e:	e033      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005b44:	e030      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b4c:	d208      	bcs.n	8005b60 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b54:	d102      	bne.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005b56:	2303      	movs	r3, #3
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	e025      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e035      	b.n	8005bcc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b66:	d90f      	bls.n	8005b88 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d109      	bne.n	8005b82 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b74:	d902      	bls.n	8005b7c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005b76:	2300      	movs	r3, #0
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	e015      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	e012      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e00f      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b8e:	d109      	bne.n	8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b96:	d102      	bne.n	8005b9e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005b98:	2301      	movs	r3, #1
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	e004      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	e001      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f023 020f 	bic.w	r2, r3, #15
 8005bb0:	4909      	ldr	r1, [pc, #36]	; (8005bd8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005bb8:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d001      	beq.n	8005bca <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	46020c00 	.word	0x46020c00
 8005bd8:	40022000 	.word	0x40022000

08005bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be0:	b0ba      	sub	sp, #232	; 0xe8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f002 0401 	and.w	r4, r2, #1
 8005c00:	2500      	movs	r5, #0
 8005c02:	ea54 0305 	orrs.w	r3, r4, r5
 8005c06:	d00b      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005c08:	4bcb      	ldr	r3, [pc, #812]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c0e:	f023 0103 	bic.w	r1, r3, #3
 8005c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c18:	4ac7      	ldr	r2, [pc, #796]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f002 0802 	and.w	r8, r2, #2
 8005c2c:	f04f 0900 	mov.w	r9, #0
 8005c30:	ea58 0309 	orrs.w	r3, r8, r9
 8005c34:	d00b      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005c36:	4bc0      	ldr	r3, [pc, #768]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c3c:	f023 010c 	bic.w	r1, r3, #12
 8005c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c46:	4abc      	ldr	r2, [pc, #752]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f002 0a04 	and.w	sl, r2, #4
 8005c5a:	f04f 0b00 	mov.w	fp, #0
 8005c5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c62:	d00b      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005c64:	4bb4      	ldr	r3, [pc, #720]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c6a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c74:	4ab0      	ldr	r2, [pc, #704]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c76:	430b      	orrs	r3, r1
 8005c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f002 0308 	and.w	r3, r2, #8
 8005c88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005c96:	460b      	mov	r3, r1
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	d00b      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005c9c:	4ba6      	ldr	r3, [pc, #664]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ca2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cac:	4aa2      	ldr	r2, [pc, #648]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f002 0310 	and.w	r3, r2, #16
 8005cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005cd4:	4b98      	ldr	r3, [pc, #608]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	4a94      	ldr	r2, [pc, #592]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f002 0320 	and.w	r3, r2, #32
 8005cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005d06:	460b      	mov	r3, r1
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005d0c:	4b8a      	ldr	r3, [pc, #552]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d12:	f023 0107 	bic.w	r1, r3, #7
 8005d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1c:	4a86      	ldr	r2, [pc, #536]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4313      	orrs	r3, r2
 8005d42:	d00b      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005d44:	4b7c      	ldr	r3, [pc, #496]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d4a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d54:	4a78      	ldr	r2, [pc, #480]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d56:	430b      	orrs	r3, r1
 8005d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005d68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d76:	460b      	mov	r3, r1
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005d7c:	4b6e      	ldr	r3, [pc, #440]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d8c:	4a6a      	ldr	r2, [pc, #424]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005da0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005da4:	2300      	movs	r3, #0
 8005da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005daa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4313      	orrs	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005db4:	4b60      	ldr	r3, [pc, #384]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	4a5c      	ldr	r2, [pc, #368]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005de2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005de6:	460b      	mov	r3, r1
 8005de8:	4313      	orrs	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005dec:	4b52      	ldr	r3, [pc, #328]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005df2:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfc:	4a4e      	ldr	r2, [pc, #312]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e14:	2300      	movs	r3, #0
 8005e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4313      	orrs	r3, r2
 8005e22:	d00b      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005e24:	4b44      	ldr	r3, [pc, #272]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e2a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e34:	4a40      	ldr	r2, [pc, #256]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e36:	430b      	orrs	r3, r1
 8005e38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e52:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005e56:	460b      	mov	r3, r1
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	d00b      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005e5c:	4b36      	ldr	r3, [pc, #216]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e62:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e6c:	4a32      	ldr	r2, [pc, #200]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e84:	2300      	movs	r3, #0
 8005e86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4313      	orrs	r3, r2
 8005e92:	d00c      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005e94:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ea6:	4a24      	ldr	r2, [pc, #144]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ec0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	d04f      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	2b80      	cmp	r3, #128	; 0x80
 8005ed4:	d02d      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005ed6:	2b80      	cmp	r3, #128	; 0x80
 8005ed8:	d827      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005eda:	2b60      	cmp	r3, #96	; 0x60
 8005edc:	d02e      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ede:	2b60      	cmp	r3, #96	; 0x60
 8005ee0:	d823      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d006      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005ee6:	2b40      	cmp	r3, #64	; 0x40
 8005ee8:	d81f      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d011      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005ef2:	e01a      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ef4:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	4a0f      	ldr	r2, [pc, #60]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005efe:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f00:	e01d      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f06:	3308      	adds	r3, #8
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f002 f981 	bl	8008210 <RCCEx_PLL2_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f14:	e013      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f1a:	332c      	adds	r3, #44	; 0x2c
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f002 fa0f 	bl	8008340 <RCCEx_PLL3_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f28:	e009      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005f30:	e005      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005f32:	bf00      	nop
 8005f34:	e003      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005f36:	bf00      	nop
 8005f38:	46020c00 	.word	0x46020c00
        break;
 8005f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10d      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005f46:	4bb6      	ldr	r3, [pc, #728]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005f48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f4c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8005f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f58:	4ab1      	ldr	r2, [pc, #708]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005f60:	e003      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f62:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f66:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005f76:	673b      	str	r3, [r7, #112]	; 0x70
 8005f78:	2300      	movs	r3, #0
 8005f7a:	677b      	str	r3, [r7, #116]	; 0x74
 8005f7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005f80:	460b      	mov	r3, r1
 8005f82:	4313      	orrs	r3, r2
 8005f84:	d053      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f92:	d033      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d82c      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9e:	d02f      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa4:	d826      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005faa:	d008      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb0:	d820      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fba:	d011      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005fbc:	e01a      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fbe:	4b98      	ldr	r3, [pc, #608]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	4a97      	ldr	r2, [pc, #604]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005fca:	e01a      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f002 f91c 	bl	8008210 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005fde:	e010      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fe4:	332c      	adds	r3, #44	; 0x2c
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f002 f9aa 	bl	8008340 <RCCEx_PLL3_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005ff2:	e006      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005ffa:	e002      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005ffc:	bf00      	nop
 8005ffe:	e000      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006002:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10d      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800600a:	4b85      	ldr	r3, [pc, #532]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800600c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006010:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601c:	4a80      	ldr	r2, [pc, #512]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800601e:	430b      	orrs	r3, r1
 8006020:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006024:	e003      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006026:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800602a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800602e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800603a:	66bb      	str	r3, [r7, #104]	; 0x68
 800603c:	2300      	movs	r3, #0
 800603e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006040:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006044:	460b      	mov	r3, r1
 8006046:	4313      	orrs	r3, r2
 8006048:	d046      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800604a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800604e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006052:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006056:	d028      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006058:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800605c:	d821      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800605e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006062:	d022      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006068:	d81b      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800606a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800606e:	d01c      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006070:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006074:	d815      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800607a:	d008      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800607c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006080:	d80f      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608a:	d00e      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800608c:	e009      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800608e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006092:	3308      	adds	r3, #8
 8006094:	4618      	mov	r0, r3
 8006096:	f002 f8bb 	bl	8008210 <RCCEx_PLL2_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80060a0:	e004      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80060a8:	e000      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80060aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10d      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80060b4:	4b5a      	ldr	r3, [pc, #360]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060ba:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80060be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060c6:	4a56      	ldr	r2, [pc, #344]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060c8:	430b      	orrs	r3, r1
 80060ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060ce:	e003      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80060d4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80060d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80060e4:	663b      	str	r3, [r7, #96]	; 0x60
 80060e6:	2300      	movs	r3, #0
 80060e8:	667b      	str	r3, [r7, #100]	; 0x64
 80060ea:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80060ee:	460b      	mov	r3, r1
 80060f0:	4313      	orrs	r3, r2
 80060f2:	d03f      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80060f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d81e      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	08006147 	.word	0x08006147
 800610c:	0800611d 	.word	0x0800611d
 8006110:	0800612b 	.word	0x0800612b
 8006114:	08006147 	.word	0x08006147
 8006118:	08006147 	.word	0x08006147
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800611c:	4b40      	ldr	r3, [pc, #256]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	4a3f      	ldr	r2, [pc, #252]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006126:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006128:	e00e      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800612a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800612e:	332c      	adds	r3, #44	; 0x2c
 8006130:	4618      	mov	r0, r3
 8006132:	f002 f905 	bl	8008340 <RCCEx_PLL3_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800613c:	e004      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006144:	e000      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006146:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006148:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10d      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006150:	4b33      	ldr	r3, [pc, #204]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006152:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006156:	f023 0107 	bic.w	r1, r3, #7
 800615a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006162:	4a2f      	ldr	r2, [pc, #188]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006164:	430b      	orrs	r3, r1
 8006166:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800616a:	e003      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006170:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006180:	65bb      	str	r3, [r7, #88]	; 0x58
 8006182:	2300      	movs	r3, #0
 8006184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006186:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800618a:	460b      	mov	r3, r1
 800618c:	4313      	orrs	r3, r2
 800618e:	d04d      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006190:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006198:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800619c:	d028      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800619e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061a2:	d821      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80061a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061a8:	d024      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80061aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061ae:	d81b      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80061b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061b4:	d00e      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80061b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061ba:	d815      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80061c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c4:	d110      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061c6:	4b16      	ldr	r3, [pc, #88]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	4a15      	ldr	r2, [pc, #84]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80061cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80061d2:	e012      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061d8:	332c      	adds	r3, #44	; 0x2c
 80061da:	4618      	mov	r0, r3
 80061dc:	f002 f8b0 	bl	8008340 <RCCEx_PLL3_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80061e6:	e008      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80061ee:	e004      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80061f0:	bf00      	nop
 80061f2:	e002      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80061f4:	bf00      	nop
 80061f6:	e000      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80061f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80061fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d110      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006208:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800620c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006214:	4a02      	ldr	r2, [pc, #8]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006216:	430b      	orrs	r3, r1
 8006218:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800621c:	e006      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800621e:	bf00      	nop
 8006220:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006228:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800622c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006238:	653b      	str	r3, [r7, #80]	; 0x50
 800623a:	2300      	movs	r3, #0
 800623c:	657b      	str	r3, [r7, #84]	; 0x54
 800623e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006242:	460b      	mov	r3, r1
 8006244:	4313      	orrs	r3, r2
 8006246:	f000 80b5 	beq.w	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800624a:	2300      	movs	r3, #0
 800624c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006250:	4b9d      	ldr	r3, [pc, #628]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	d113      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800625e:	4b9a      	ldr	r3, [pc, #616]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006264:	4a98      	ldr	r2, [pc, #608]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006266:	f043 0304 	orr.w	r3, r3, #4
 800626a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800626e:	4b96      	ldr	r3, [pc, #600]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800627c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006286:	4b91      	ldr	r3, [pc, #580]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	4a90      	ldr	r2, [pc, #576]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006292:	f7fb ff09 	bl	80020a8 <HAL_GetTick>
 8006296:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800629a:	e00b      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800629c:	f7fb ff04 	bl	80020a8 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d903      	bls.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80062b2:	e005      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80062b4:	4b85      	ldr	r3, [pc, #532]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ed      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80062c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d165      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062c8:	4b7f      	ldr	r3, [pc, #508]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d023      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80062de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80062e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01b      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062ee:	4b76      	ldr	r3, [pc, #472]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062fc:	4b72      	ldr	r3, [pc, #456]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006302:	4a71      	ldr	r2, [pc, #452]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006308:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800630c:	4b6e      	ldr	r3, [pc, #440]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800630e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006312:	4a6d      	ldr	r2, [pc, #436]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006318:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800631c:	4a6a      	ldr	r2, [pc, #424]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006322:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d019      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fb feb9 	bl	80020a8 <HAL_GetTick>
 8006336:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800633a:	e00d      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800633c:	f7fb feb4 	bl	80020a8 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006346:	1ad2      	subs	r2, r2, r3
 8006348:	f241 3388 	movw	r3, #5000	; 0x1388
 800634c:	429a      	cmp	r2, r3
 800634e:	d903      	bls.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006356:	e006      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006358:	4b5b      	ldr	r3, [pc, #364]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800635a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0ea      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006366:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800636e:	4b56      	ldr	r3, [pc, #344]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006374:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800637c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006380:	4a51      	ldr	r2, [pc, #324]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006382:	430b      	orrs	r3, r1
 8006384:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006388:	e008      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800638a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800638e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006392:	e003      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006394:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006398:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800639c:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d107      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063a4:	4b48      	ldr	r3, [pc, #288]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063aa:	4a47      	ldr	r2, [pc, #284]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063ac:	f023 0304 	bic.w	r3, r3, #4
 80063b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80063b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80063c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c2:	2300      	movs	r3, #0
 80063c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80063ca:	460b      	mov	r3, r1
 80063cc:	4313      	orrs	r3, r2
 80063ce:	d042      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80063d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063dc:	d022      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80063de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063e2:	d81b      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x840>
 80063e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063e8:	d011      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x832>
 80063ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ee:	d815      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x840>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d019      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80063f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063f8:	d110      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063fe:	3308      	adds	r3, #8
 8006400:	4618      	mov	r0, r3
 8006402:	f001 ff05 	bl	8008210 <RCCEx_PLL2_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800640c:	e00d      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640e:	4b2e      	ldr	r3, [pc, #184]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	4a2d      	ldr	r2, [pc, #180]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006418:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800641a:	e006      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006422:	e002      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006424:	bf00      	nop
 8006426:	e000      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006428:	bf00      	nop
    }
    if (ret == HAL_OK)
 800642a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006432:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006438:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800643c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006440:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006444:	4a20      	ldr	r2, [pc, #128]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006446:	430b      	orrs	r3, r1
 8006448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800644c:	e003      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006452:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006462:	643b      	str	r3, [r7, #64]	; 0x40
 8006464:	2300      	movs	r3, #0
 8006466:	647b      	str	r3, [r7, #68]	; 0x44
 8006468:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800646c:	460b      	mov	r3, r1
 800646e:	4313      	orrs	r3, r2
 8006470:	d032      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800647a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647e:	d00b      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006484:	d804      	bhi.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648e:	d007      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006496:	e004      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006498:	bf00      	nop
 800649a:	e002      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80064a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80064a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d112      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80064b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064bc:	4a02      	ldr	r2, [pc, #8]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064be:	430b      	orrs	r3, r1
 80064c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80064c4:	e008      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80064c6:	bf00      	nop
 80064c8:	46020c00 	.word	0x46020c00
 80064cc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064d4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80064d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80064e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064e6:	2300      	movs	r3, #0
 80064e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d00c      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80064f4:	4b98      	ldr	r3, [pc, #608]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80064f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80064fa:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80064fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006506:	4a94      	ldr	r2, [pc, #592]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006508:	430b      	orrs	r3, r1
 800650a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800650e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800651a:	633b      	str	r3, [r7, #48]	; 0x30
 800651c:	2300      	movs	r3, #0
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
 8006520:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006524:	460b      	mov	r3, r1
 8006526:	4313      	orrs	r3, r2
 8006528:	d019      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800652a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800652e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006536:	d105      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006538:	4b87      	ldr	r3, [pc, #540]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	4a86      	ldr	r2, [pc, #536]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800653e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006542:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006544:	4b84      	ldr	r3, [pc, #528]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006546:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800654a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800654e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006552:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006556:	4a80      	ldr	r2, [pc, #512]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006558:	430b      	orrs	r3, r1
 800655a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800655e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
 800656c:	2300      	movs	r3, #0
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006570:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d00c      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800657a:	4b77      	ldr	r3, [pc, #476]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800657c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006588:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800658c:	4972      	ldr	r1, [pc, #456]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	2300      	movs	r3, #0
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
 80065a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065aa:	460b      	mov	r3, r1
 80065ac:	4313      	orrs	r3, r2
 80065ae:	d00c      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80065b0:	4b69      	ldr	r3, [pc, #420]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80065b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80065c2:	4965      	ldr	r1, [pc, #404]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80065ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80065e0:	460b      	mov	r3, r1
 80065e2:	4313      	orrs	r3, r2
 80065e4:	d00c      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80065e6:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80065e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065ec:	f023 0218 	bic.w	r2, r3, #24
 80065f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065f8:	4957      	ldr	r1, [pc, #348]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006616:	460b      	mov	r3, r1
 8006618:	4313      	orrs	r3, r2
 800661a:	d032      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800661c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006624:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006628:	d105      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662a:	4b4b      	ldr	r3, [pc, #300]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	4a4a      	ldr	r2, [pc, #296]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006634:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800663a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800663e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006642:	d108      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006644:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006648:	3308      	adds	r3, #8
 800664a:	4618      	mov	r0, r3
 800664c:	f001 fde0 	bl	8008210 <RCCEx_PLL2_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006656:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800665e:	4b3e      	ldr	r3, [pc, #248]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800666c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006670:	4939      	ldr	r1, [pc, #228]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800667e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d03a      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800669e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066aa:	d00e      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80066ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066b0:	d815      	bhi.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d017      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80066b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066ba:	d110      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066bc:	4b26      	ldr	r3, [pc, #152]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	4a25      	ldr	r2, [pc, #148]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c6:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80066c8:	e00e      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ce:	3308      	adds	r3, #8
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 fd9d 	bl	8008210 <RCCEx_PLL2_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80066dc:	e004      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80066e4:	e000      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80066e6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80066e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10d      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80066f0:	4b19      	ldr	r3, [pc, #100]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006702:	4915      	ldr	r1, [pc, #84]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800670a:	e003      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006710:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	2300      	movs	r3, #0
 8006724:	607b      	str	r3, [r7, #4]
 8006726:	e9d7 1200 	ldrd	r1, r2, [r7]
 800672a:	460b      	mov	r3, r1
 800672c:	4313      	orrs	r3, r2
 800672e:	d00c      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006736:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800673a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800673e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006742:	4905      	ldr	r1, [pc, #20]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800674a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800674e:	4618      	mov	r0, r3
 8006750:	37e8      	adds	r7, #232	; 0xe8
 8006752:	46bd      	mov	sp, r7
 8006754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006758:	46020c00 	.word	0x46020c00

0800675c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800675c:	b480      	push	{r7}
 800675e:	b089      	sub	sp, #36	; 0x24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006764:	4bac      	ldr	r3, [pc, #688]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800676e:	4baa      	ldr	r3, [pc, #680]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006778:	4ba7      	ldr	r3, [pc, #668]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	3301      	adds	r3, #1
 8006784:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006786:	4ba4      	ldr	r3, [pc, #656]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006790:	4ba1      	ldr	r3, [pc, #644]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	08db      	lsrs	r3, r3, #3
 8006796:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8123 	beq.w	80069fa <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d062      	beq.n	8006880 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	f200 8081 	bhi.w	80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d024      	beq.n	8006812 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d17a      	bne.n	80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d8:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80067dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e0:	4b8d      	ldr	r3, [pc, #564]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80067e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e8:	ee07 3a90 	vmov	s15, r3
 80067ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80067f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80067f4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80067f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006804:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006810:	e08f      	b.n	8006932 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006812:	4b81      	ldr	r3, [pc, #516]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800681e:	4b7e      	ldr	r3, [pc, #504]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	0f1b      	lsrs	r3, r3, #28
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	e006      	b.n	8006838 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800682a:	4b7b      	ldr	r3, [pc, #492]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800682c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006830:	041b      	lsls	r3, r3, #16
 8006832:	0f1b      	lsrs	r3, r3, #28
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	4a7a      	ldr	r2, [pc, #488]	; (8006a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800683a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006862:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006872:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800687e:	e058      	b.n	8006932 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800688e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006892:	4b61      	ldr	r3, [pc, #388]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80068a6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80068aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80068b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068c2:	e036      	b.n	8006932 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80068c4:	4b54      	ldr	r3, [pc, #336]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 80068d0:	4b51      	ldr	r3, [pc, #324]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	0f1b      	lsrs	r3, r3, #28
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	e006      	b.n	80068ea <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 80068dc:	4b4e      	ldr	r3, [pc, #312]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	0f1b      	lsrs	r3, r3, #28
 80068e6:	f003 030f 	and.w	r3, r3, #15
 80068ea:	4a4e      	ldr	r2, [pc, #312]	; (8006a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80068ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f0:	ee07 3a90 	vmov	s15, r3
 80068f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006910:	ed97 6a02 	vldr	s12, [r7, #8]
 8006914:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800691c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006924:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006930:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006932:	4b39      	ldr	r3, [pc, #228]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d017      	beq.n	800696e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800693e:	4b36      	ldr	r3, [pc, #216]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006942:	0a5b      	lsrs	r3, r3, #9
 8006944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006954:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006958:	edd7 6a07 	vldr	s13, [r7, #28]
 800695c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006964:	ee17 2a90 	vmov	r2, s15
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	e002      	b.n	8006974 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006974:	4b28      	ldr	r3, [pc, #160]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d017      	beq.n	80069b0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006980:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006996:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800699a:	edd7 6a07 	vldr	s13, [r7, #28]
 800699e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a6:	ee17 2a90 	vmov	r2, s15
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	e002      	b.n	80069b6 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80069b6:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d017      	beq.n	80069f2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80069c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c6:	0e1b      	lsrs	r3, r3, #24
 80069c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80069d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069d8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80069dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e8:	ee17 2a90 	vmov	r2, s15
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80069f0:	e00c      	b.n	8006a0c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	609a      	str	r2, [r3, #8]
}
 80069f8:	e008      	b.n	8006a0c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	3724      	adds	r7, #36	; 0x24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	46020c00 	.word	0x46020c00
 8006a1c:	4b742400 	.word	0x4b742400
 8006a20:	46000000 	.word	0x46000000
 8006a24:	08027a44 	.word	0x08027a44

08006a28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b089      	sub	sp, #36	; 0x24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006a30:	4bac      	ldr	r3, [pc, #688]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a38:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006a3a:	4baa      	ldr	r3, [pc, #680]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006a44:	4ba7      	ldr	r3, [pc, #668]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	3301      	adds	r3, #1
 8006a50:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006a52:	4ba4      	ldr	r3, [pc, #656]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006a5c:	4ba1      	ldr	r3, [pc, #644]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	08db      	lsrs	r3, r3, #3
 8006a62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	fb02 f303 	mul.w	r3, r2, r3
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a74:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8123 	beq.w	8006cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d062      	beq.n	8006b4c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	f200 8081 	bhi.w	8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d024      	beq.n	8006ade <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d17a      	bne.n	8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aac:	4b8d      	ldr	r3, [pc, #564]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006abc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ac0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006adc:	e08f      	b.n	8006bfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006ade:	4b81      	ldr	r3, [pc, #516]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006aea:	4b7e      	ldr	r3, [pc, #504]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	0f1b      	lsrs	r3, r3, #28
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	e006      	b.n	8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006af6:	4b7b      	ldr	r3, [pc, #492]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006afc:	041b      	lsls	r3, r3, #16
 8006afe:	0f1b      	lsrs	r3, r3, #28
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	4a7a      	ldr	r2, [pc, #488]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	ee07 3a90 	vmov	s15, r3
 8006b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b2e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b4a:	e058      	b.n	8006bfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5e:	4b61      	ldr	r3, [pc, #388]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b72:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b8e:	e036      	b.n	8006bfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006b90:	4b54      	ldr	r3, [pc, #336]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006b9c:	4b51      	ldr	r3, [pc, #324]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	0f1b      	lsrs	r3, r3, #28
 8006ba2:	f003 030f 	and.w	r3, r3, #15
 8006ba6:	e006      	b.n	8006bb6 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006ba8:	4b4e      	ldr	r3, [pc, #312]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	0f1b      	lsrs	r3, r3, #28
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	4a4e      	ldr	r2, [pc, #312]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bbc:	ee07 3a90 	vmov	s15, r3
 8006bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bfc:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006bfe:	4b39      	ldr	r3, [pc, #228]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d017      	beq.n	8006c3a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c0a:	4b36      	ldr	r3, [pc, #216]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	0a5b      	lsrs	r3, r3, #9
 8006c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c14:	ee07 3a90 	vmov	s15, r3
 8006c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c20:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c24:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c30:	ee17 2a90 	vmov	r2, s15
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	e002      	b.n	8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006c40:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d017      	beq.n	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c4c:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c50:	0c1b      	lsrs	r3, r3, #16
 8006c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c62:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c72:	ee17 2a90 	vmov	r2, s15
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	e002      	b.n	8006c82 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006c82:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d017      	beq.n	8006cbe <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c8e:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	0e1b      	lsrs	r3, r3, #24
 8006c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c98:	ee07 3a90 	vmov	s15, r3
 8006c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb4:	ee17 2a90 	vmov	r2, s15
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cbc:	e00c      	b.n	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	609a      	str	r2, [r3, #8]
}
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	609a      	str	r2, [r3, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	3724      	adds	r7, #36	; 0x24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	46020c00 	.word	0x46020c00
 8006ce8:	4b742400 	.word	0x4b742400
 8006cec:	46000000 	.word	0x46000000
 8006cf0:	08027a44 	.word	0x08027a44

08006cf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b089      	sub	sp, #36	; 0x24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006cfc:	4bac      	ldr	r3, [pc, #688]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d04:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006d06:	4baa      	ldr	r3, [pc, #680]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006d10:	4ba7      	ldr	r3, [pc, #668]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006d1e:	4ba4      	ldr	r3, [pc, #656]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	f003 0310 	and.w	r3, r3, #16
 8006d26:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006d28:	4ba1      	ldr	r3, [pc, #644]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2c:	08db      	lsrs	r3, r3, #3
 8006d2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	fb02 f303 	mul.w	r3, r2, r3
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d40:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8123 	beq.w	8006f92 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d062      	beq.n	8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	f200 8081 	bhi.w	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d024      	beq.n	8006daa <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d17a      	bne.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	ee07 3a90 	vmov	s15, r3
 8006d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d70:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d78:	4b8d      	ldr	r3, [pc, #564]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d80:	ee07 3a90 	vmov	s15, r3
 8006d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d88:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d8c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da4:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006da8:	e08f      	b.n	8006eca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006daa:	4b81      	ldr	r3, [pc, #516]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8006db6:	4b7e      	ldr	r3, [pc, #504]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	0f1b      	lsrs	r3, r3, #28
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	e006      	b.n	8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8006dc2:	4b7b      	ldr	r3, [pc, #492]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	0f1b      	lsrs	r3, r3, #28
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	4a7a      	ldr	r2, [pc, #488]	; (8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	ee07 3a90 	vmov	s15, r3
 8006de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dfa:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e16:	e058      	b.n	8006eca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b61      	ldr	r3, [pc, #388]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e3e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e5a:	e036      	b.n	8006eca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006e5c:	4b54      	ldr	r3, [pc, #336]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8006e68:	4b51      	ldr	r3, [pc, #324]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	0f1b      	lsrs	r3, r3, #28
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	e006      	b.n	8006e82 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8006e74:	4b4e      	ldr	r3, [pc, #312]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	0f1b      	lsrs	r3, r3, #28
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	4a4e      	ldr	r2, [pc, #312]	; (8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e88:	ee07 3a90 	vmov	s15, r3
 8006e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eac:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ec8:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006eca:	4b39      	ldr	r3, [pc, #228]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d017      	beq.n	8006f06 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ed6:	4b36      	ldr	r3, [pc, #216]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eda:	0a5b      	lsrs	r3, r3, #9
 8006edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efc:	ee17 2a90 	vmov	r2, s15
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e002      	b.n	8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006f0c:	4b28      	ldr	r3, [pc, #160]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d017      	beq.n	8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3e:	ee17 2a90 	vmov	r2, s15
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]
 8006f46:	e002      	b.n	8006f4e <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006f4e:	4b18      	ldr	r3, [pc, #96]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d017      	beq.n	8006f8a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f5a:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	0e1b      	lsrs	r3, r3, #24
 8006f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f64:	ee07 3a90 	vmov	s15, r3
 8006f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f70:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f80:	ee17 2a90 	vmov	r2, s15
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006f88:	e00c      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	609a      	str	r2, [r3, #8]
}
 8006f90:	e008      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	609a      	str	r2, [r3, #8]
}
 8006fa4:	bf00      	nop
 8006fa6:	3724      	adds	r7, #36	; 0x24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	46020c00 	.word	0x46020c00
 8006fb4:	4b742400 	.word	0x4b742400
 8006fb8:	46000000 	.word	0x46000000
 8006fbc:	08027a44 	.word	0x08027a44

08006fc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08e      	sub	sp, #56	; 0x38
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fce:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	d145      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006fd6:	4ba7      	ldr	r3, [pc, #668]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006fe2:	4ba4      	ldr	r3, [pc, #656]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d108      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff6:	d104      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffe:	f001 b8fc 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007002:	4b9c      	ldr	r3, [pc, #624]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800700c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007010:	d114      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007018:	d110      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800701a:	4b96      	ldr	r3, [pc, #600]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800701c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007028:	d103      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800702a:	23fa      	movs	r3, #250	; 0xfa
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800702e:	f001 b8e4 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007032:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007038:	f001 b8df 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800703c:	4b8d      	ldr	r3, [pc, #564]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007048:	d107      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007050:	d103      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007052:	4b89      	ldr	r3, [pc, #548]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
 8007056:	f001 b8d0 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	637b      	str	r3, [r7, #52]	; 0x34
 800705e:	f001 b8cc 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007066:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800706a:	430b      	orrs	r3, r1
 800706c:	d151      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800706e:	4b81      	ldr	r3, [pc, #516]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007070:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007074:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007078:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	2b80      	cmp	r3, #128	; 0x80
 800707e:	d035      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d841      	bhi.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	2b60      	cmp	r3, #96	; 0x60
 800708a:	d02a      	beq.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	2b60      	cmp	r3, #96	; 0x60
 8007090:	d83b      	bhi.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	2b40      	cmp	r3, #64	; 0x40
 8007096:	d009      	beq.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	2b40      	cmp	r3, #64	; 0x40
 800709c:	d835      	bhi.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00c      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d012      	beq.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80070aa:	e02e      	b.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fb53 	bl	800675c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070ba:	f001 b89e 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070be:	f107 0318 	add.w	r3, r7, #24
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fcb0 	bl	8006a28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070cc:	f001 b895 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070d0:	f107 030c 	add.w	r3, r7, #12
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff fe0d 	bl	8006cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070de:	f001 b88c 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80070e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070e8:	f001 b887 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070ec:	4b61      	ldr	r3, [pc, #388]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f8:	d103      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80070fa:	4b60      	ldr	r3, [pc, #384]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070fe:	f001 b87c 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007106:	f001 b878 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800710e:	f001 b874 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007116:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800711a:	430b      	orrs	r3, r1
 800711c:	d158      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800711e:	4b55      	ldr	r3, [pc, #340]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007120:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007128:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007130:	d03b      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007138:	d846      	bhi.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007140:	d02e      	beq.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007148:	d83e      	bhi.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007150:	d00b      	beq.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007158:	d836      	bhi.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00d      	beq.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007166:	d012      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007168:	e02e      	b.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800716a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff faf4 	bl	800675c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007178:	f001 b83f 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800717c:	f107 0318 	add.w	r3, r7, #24
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff fc51 	bl	8006a28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800718a:	f001 b836 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800718e:	f107 030c 	add.w	r3, r7, #12
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff fdae 	bl	8006cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800719c:	f001 b82d 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80071a0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071a6:	f001 b828 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071aa:	4b32      	ldr	r3, [pc, #200]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b6:	d103      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80071b8:	4b30      	ldr	r3, [pc, #192]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071bc:	f001 b81d 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071c4:	f001 b819 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071cc:	f001 b815 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80071d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d4:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80071d8:	430b      	orrs	r3, r1
 80071da:	d126      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80071e8:	4b22      	ldr	r3, [pc, #136]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f4:	d106      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d103      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80071fc:	4b1f      	ldr	r3, [pc, #124]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80071fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007200:	f000 bffb 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007204:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800720c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007210:	d107      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007218:	d103      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800721a:	4b19      	ldr	r3, [pc, #100]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
 800721e:	f000 bfec 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
 8007226:	f000 bfe8 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800722a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800722e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8007232:	430b      	orrs	r3, r1
 8007234:	d164      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800723c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007240:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007248:	d03d      	beq.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007250:	d852      	bhi.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007258:	d014      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007260:	d84a      	bhi.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01f      	beq.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800726e:	d012      	beq.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007270:	e042      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007272:	bf00      	nop
 8007274:	46020c00 	.word	0x46020c00
 8007278:	0007a120 	.word	0x0007a120
 800727c:	00f42400 	.word	0x00f42400
 8007280:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff fa67 	bl	800675c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007292:	f000 bfb2 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007296:	f107 0318 	add.w	r3, r7, #24
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff fbc4 	bl	8006a28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072a4:	f000 bfa9 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80072a8:	4bab      	ldr	r3, [pc, #684]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b4:	d103      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80072b6:	4ba9      	ldr	r3, [pc, #676]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072ba:	f000 bf9e 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072c2:	f000 bf9a 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072c6:	4ba4      	ldr	r3, [pc, #656]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80072d2:	4ba1      	ldr	r3, [pc, #644]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	0e1b      	lsrs	r3, r3, #24
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	e006      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80072de:	4b9e      	ldr	r3, [pc, #632]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80072e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072e4:	041b      	lsls	r3, r3, #16
 80072e6:	0e1b      	lsrs	r3, r3, #24
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	4a9c      	ldr	r2, [pc, #624]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80072ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072f4:	f000 bf81 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072fc:	f000 bf7d 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007304:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007308:	430b      	orrs	r3, r1
 800730a:	d175      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800730c:	4b92      	ldr	r3, [pc, #584]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800730e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007316:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	2b00      	cmp	r3, #0
 800731c:	d15b      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800731e:	4b8e      	ldr	r3, [pc, #568]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007324:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007328:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007330:	d034      	beq.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007338:	d849      	bhi.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007340:	d00b      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007348:	d841      	bhi.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	2b00      	cmp	r3, #0
 800734e:	d016      	beq.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007356:	d009      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007358:	e039      	b.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800735a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff f9fc 	bl	800675c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007368:	f000 bf47 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800736c:	f107 0318 	add.w	r3, r7, #24
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fb59 	bl	8006a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800737a:	f000 bf3e 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800737e:	4b76      	ldr	r3, [pc, #472]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738a:	d103      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800738c:	4b73      	ldr	r3, [pc, #460]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007390:	f000 bf33 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007398:	f000 bf2f 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800739c:	4b6e      	ldr	r3, [pc, #440]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80073a8:	4b6b      	ldr	r3, [pc, #428]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	0e1b      	lsrs	r3, r3, #24
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	e006      	b.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80073b4:	4b68      	ldr	r3, [pc, #416]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80073b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	0e1b      	lsrs	r3, r3, #24
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	4a67      	ldr	r2, [pc, #412]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80073c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80073ca:	f000 bf16 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80073d2:	f000 bf12 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073dc:	d108      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff f9ba 	bl	800675c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
 80073ec:	f000 bf05 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
 80073f4:	f000 bf01 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80073f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073fc:	1e51      	subs	r1, r2, #1
 80073fe:	430b      	orrs	r3, r1
 8007400:	d136      	bne.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007402:	4b55      	ldr	r3, [pc, #340]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007408:	f003 0303 	and.w	r3, r3, #3
 800740c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fe fafc 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8007418:	6378      	str	r0, [r7, #52]	; 0x34
 800741a:	f000 beee 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	2b01      	cmp	r3, #1
 8007422:	d104      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007424:	f7fe f9be 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8007428:	6378      	str	r0, [r7, #52]	; 0x34
 800742a:	f000 bee6 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800742e:	4b4a      	ldr	r3, [pc, #296]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743a:	d106      	bne.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	2b02      	cmp	r3, #2
 8007440:	d103      	bne.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8007442:	4b48      	ldr	r3, [pc, #288]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
 8007446:	f000 bed8 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800744a:	4b43      	ldr	r3, [pc, #268]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800744c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d107      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	2b03      	cmp	r3, #3
 800745c:	d104      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
 8007464:	f000 bec9 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
 800746c:	f000 bec5 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007474:	1e91      	subs	r1, r2, #2
 8007476:	430b      	orrs	r3, r1
 8007478:	d136      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800747a:	4b37      	ldr	r3, [pc, #220]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800747c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007480:	f003 030c 	and.w	r3, r3, #12
 8007484:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800748c:	f7fe faac 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007490:	6378      	str	r0, [r7, #52]	; 0x34
 8007492:	f000 beb2 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	2b04      	cmp	r3, #4
 800749a:	d104      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800749c:	f7fe f982 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 80074a0:	6378      	str	r0, [r7, #52]	; 0x34
 80074a2:	f000 beaa 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80074a6:	4b2c      	ldr	r3, [pc, #176]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b2:	d106      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	2b08      	cmp	r3, #8
 80074b8:	d103      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80074ba:	4b2a      	ldr	r3, [pc, #168]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
 80074be:	f000 be9c 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80074c2:	4b25      	ldr	r3, [pc, #148]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80074c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d107      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	2b0c      	cmp	r3, #12
 80074d4:	d104      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80074d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
 80074dc:	f000 be8d 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	637b      	str	r3, [r7, #52]	; 0x34
 80074e4:	f000 be89 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80074e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ec:	1f11      	subs	r1, r2, #4
 80074ee:	430b      	orrs	r3, r1
 80074f0:	d13e      	bne.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80074f2:	4b19      	ldr	r3, [pc, #100]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80074f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007504:	f7fe fa70 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007508:	6378      	str	r0, [r7, #52]	; 0x34
 800750a:	f000 be76 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2b10      	cmp	r3, #16
 8007512:	d104      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007514:	f7fe f946 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8007518:	6378      	str	r0, [r7, #52]	; 0x34
 800751a:	f000 be6e 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800751e:	4b0e      	ldr	r3, [pc, #56]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752a:	d106      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	2b20      	cmp	r3, #32
 8007530:	d103      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8007532:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
 8007536:	f000 be60 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800753c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b02      	cmp	r3, #2
 8007546:	d10f      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	2b30      	cmp	r3, #48	; 0x30
 800754c:	d10c      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800754e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007552:	637b      	str	r3, [r7, #52]	; 0x34
 8007554:	f000 be51 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007558:	46020c00 	.word	0x46020c00
 800755c:	02dc6c00 	.word	0x02dc6c00
 8007560:	08027a44 	.word	0x08027a44
 8007564:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
 800756c:	f000 be45 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007574:	f1a2 0108 	sub.w	r1, r2, #8
 8007578:	430b      	orrs	r3, r1
 800757a:	d136      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800757c:	4b9f      	ldr	r3, [pc, #636]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800757e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007582:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007586:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800758e:	f7fe fa2b 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007592:	6378      	str	r0, [r7, #52]	; 0x34
 8007594:	f000 be31 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2b40      	cmp	r3, #64	; 0x40
 800759c:	d104      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800759e:	f7fe f901 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 80075a2:	6378      	str	r0, [r7, #52]	; 0x34
 80075a4:	f000 be29 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80075a8:	4b94      	ldr	r3, [pc, #592]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b4:	d106      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	2b80      	cmp	r3, #128	; 0x80
 80075ba:	d103      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80075bc:	4b90      	ldr	r3, [pc, #576]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075be:	637b      	str	r3, [r7, #52]	; 0x34
 80075c0:	f000 be1b 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80075c4:	4b8d      	ldr	r3, [pc, #564]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80075c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d107      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	2bc0      	cmp	r3, #192	; 0xc0
 80075d6:	d104      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80075d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34
 80075de:	f000 be0c 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
 80075e6:	f000 be08 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80075ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ee:	f1a2 0110 	sub.w	r1, r2, #16
 80075f2:	430b      	orrs	r3, r1
 80075f4:	d139      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80075f6:	4b81      	ldr	r3, [pc, #516]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80075f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007600:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007608:	f7fe f9ee 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 800760c:	6378      	str	r0, [r7, #52]	; 0x34
 800760e:	f000 bdf4 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007618:	d104      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800761a:	f7fe f8c3 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 800761e:	6378      	str	r0, [r7, #52]	; 0x34
 8007620:	f000 bdeb 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007624:	4b75      	ldr	r3, [pc, #468]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800762c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007630:	d107      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007638:	d103      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800763a:	4b71      	ldr	r3, [pc, #452]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
 800763e:	f000 bddc 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007642:	4b6e      	ldr	r3, [pc, #440]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b02      	cmp	r3, #2
 800764e:	d108      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007656:	d104      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765c:	637b      	str	r3, [r7, #52]	; 0x34
 800765e:	f000 bdcc 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
 8007666:	f000 bdc8 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800766a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800766e:	f1a2 0120 	sub.w	r1, r2, #32
 8007672:	430b      	orrs	r3, r1
 8007674:	d158      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007676:	4b61      	ldr	r3, [pc, #388]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007688:	f7fe f9d6 	bl	8005a38 <HAL_RCC_GetPCLK3Freq>
 800768c:	6378      	str	r0, [r7, #52]	; 0x34
 800768e:	f000 bdb4 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	2b01      	cmp	r3, #1
 8007696:	d104      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007698:	f7fe f884 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 800769c:	6378      	str	r0, [r7, #52]	; 0x34
 800769e:	f000 bdac 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80076a2:	4b56      	ldr	r3, [pc, #344]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ae:	d106      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d103      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 80076b6:	4b52      	ldr	r3, [pc, #328]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ba:	f000 bd9e 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80076be:	4b4f      	ldr	r3, [pc, #316]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80076c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d107      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d104      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80076d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
 80076d8:	f000 bd8f 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80076dc:	4b47      	ldr	r3, [pc, #284]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0320 	and.w	r3, r3, #32
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d11b      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d118      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076ee:	4b43      	ldr	r3, [pc, #268]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d005      	beq.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80076fa:	4b40      	ldr	r3, [pc, #256]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	0e1b      	lsrs	r3, r3, #24
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	e006      	b.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007706:	4b3d      	ldr	r3, [pc, #244]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800770c:	041b      	lsls	r3, r3, #16
 800770e:	0e1b      	lsrs	r3, r3, #24
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	4a3b      	ldr	r2, [pc, #236]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
 800771c:	f000 bd6d 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
 8007724:	f000 bd69 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007730:	430b      	orrs	r3, r1
 8007732:	d169      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007734:	4b31      	ldr	r3, [pc, #196]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800773a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800773e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007746:	d104      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007748:	f7fe f82c 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 800774c:	6378      	str	r0, [r7, #52]	; 0x34
 800774e:	f000 bd54 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007758:	d108      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800775a:	f107 0318 	add.w	r3, r7, #24
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff f962 	bl	8006a28 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	637b      	str	r3, [r7, #52]	; 0x34
 8007768:	f000 bd47 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	2b00      	cmp	r3, #0
 8007770:	d104      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007772:	f7fe f91f 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8007776:	6378      	str	r0, [r7, #52]	; 0x34
 8007778:	f000 bd3f 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007782:	d118      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007784:	4b1d      	ldr	r3, [pc, #116]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007790:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	0f1b      	lsrs	r3, r3, #28
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	e006      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800779c:	4b17      	ldr	r3, [pc, #92]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800779e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077a2:	041b      	lsls	r3, r3, #16
 80077a4:	0f1b      	lsrs	r3, r3, #28
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	4a16      	ldr	r2, [pc, #88]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80077ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
 80077b2:	f000 bd22 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80077b6:	4b11      	ldr	r3, [pc, #68]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c2:	d107      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077ca:	d103      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 80077cc:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
 80077d0:	f000 bd13 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80077d4:	4b09      	ldr	r3, [pc, #36]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e0:	d107      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e8:	d103      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 80077ea:	4b05      	ldr	r3, [pc, #20]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
 80077ee:	f000 bd04 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
 80077f6:	f000 bd00 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80077fa:	bf00      	nop
 80077fc:	46020c00 	.word	0x46020c00
 8007800:	00f42400 	.word	0x00f42400
 8007804:	08027a44 	.word	0x08027a44
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800780c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007810:	430b      	orrs	r3, r1
 8007812:	d14e      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007814:	4ba8      	ldr	r3, [pc, #672]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007816:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	2b04      	cmp	r3, #4
 8007824:	d841      	bhi.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007826:	a201      	add	r2, pc, #4	; (adr r2, 800782c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	08007865 	.word	0x08007865
 8007830:	08007841 	.word	0x08007841
 8007834:	08007853 	.word	0x08007853
 8007838:	0800786f 	.word	0x0800786f
 800783c:	08007879 	.word	0x08007879
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe ff89 	bl	800675c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800784e:	f000 bcd4 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fa4c 	bl	8006cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007860:	f000 bccb 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007864:	f7fe f8a6 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8007868:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800786a:	f000 bcc6 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800786e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007874:	f000 bcc1 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007878:	4b8f      	ldr	r3, [pc, #572]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d005      	beq.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007884:	4b8c      	ldr	r3, [pc, #560]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	0e1b      	lsrs	r3, r3, #24
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	e006      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007890:	4b89      	ldr	r3, [pc, #548]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007896:	041b      	lsls	r3, r3, #16
 8007898:	0e1b      	lsrs	r3, r3, #24
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	4a87      	ldr	r2, [pc, #540]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80078a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078a6:	f000 bca8 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078ae:	f000 bca4 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80078b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078b6:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80078ba:	430b      	orrs	r3, r1
 80078bc:	d15d      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80078be:	4b7e      	ldr	r3, [pc, #504]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80078c4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80078c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078d0:	d036      	beq.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078d8:	d84b      	bhi.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078e0:	d029      	beq.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078e8:	d843      	bhi.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f0:	d013      	beq.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f8:	d83b      	bhi.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d015      	beq.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007906:	d134      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800790c:	4618      	mov	r0, r3
 800790e:	f7fe ff25 	bl	800675c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007916:	f000 bc70 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800791a:	f107 030c 	add.w	r3, r7, #12
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff f9e8 	bl	8006cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007928:	f000 bc67 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800792c:	f7fe f842 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8007930:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007932:	f000 bc62 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007936:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800793a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800793c:	f000 bc5d 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007940:	4b5d      	ldr	r3, [pc, #372]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800794c:	4b5a      	ldr	r3, [pc, #360]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	0e1b      	lsrs	r3, r3, #24
 8007952:	f003 030f 	and.w	r3, r3, #15
 8007956:	e006      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007958:	4b57      	ldr	r3, [pc, #348]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800795a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800795e:	041b      	lsls	r3, r3, #16
 8007960:	0e1b      	lsrs	r3, r3, #24
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	4a55      	ldr	r2, [pc, #340]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800796e:	f000 bc44 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007976:	f000 bc40 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800797a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800797e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007982:	430b      	orrs	r3, r1
 8007984:	d14a      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007986:	4b4c      	ldr	r3, [pc, #304]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800798c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007990:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007998:	f7fe f826 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 800799c:	6378      	str	r0, [r7, #52]	; 0x34
 800799e:	f000 bc2c 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a8:	d104      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079aa:	f7fd fefb 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 80079ae:	6378      	str	r0, [r7, #52]	; 0x34
 80079b0:	f000 bc23 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80079b4:	4b40      	ldr	r3, [pc, #256]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c0:	d107      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c8:	d103      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 80079ca:	4b3d      	ldr	r3, [pc, #244]	; (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
 80079ce:	f000 bc14 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80079d2:	4b39      	ldr	r3, [pc, #228]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b20      	cmp	r3, #32
 80079dc:	d11b      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079e4:	d117      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079e6:	4b34      	ldr	r3, [pc, #208]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 80079f2:	4b31      	ldr	r3, [pc, #196]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	0e1b      	lsrs	r3, r3, #24
 80079f8:	f003 030f 	and.w	r3, r3, #15
 80079fc:	e006      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80079fe:	4b2e      	ldr	r3, [pc, #184]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a04:	041b      	lsls	r3, r3, #16
 8007a06:	0e1b      	lsrs	r3, r3, #24
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	4a2b      	ldr	r2, [pc, #172]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a12:	637b      	str	r3, [r7, #52]	; 0x34
 8007a14:	e3f1      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1a:	e3ee      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a20:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007a24:	430b      	orrs	r3, r1
 8007a26:	d14d      	bne.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007a28:	4b23      	ldr	r3, [pc, #140]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a32:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a3a:	f7fd ffd5 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007a3e:	6378      	str	r0, [r7, #52]	; 0x34
 8007a40:	e3db      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a48:	d103      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a4a:	f7fd feab 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8007a4e:	6378      	str	r0, [r7, #52]	; 0x34
 8007a50:	e3d3      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007a52:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a5e:	d106      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a66:	d102      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007a68:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6c:	e3c5      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007a6e:	4b12      	ldr	r3, [pc, #72]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	d11b      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a80:	d117      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a82:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	0e1b      	lsrs	r3, r3, #24
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	e006      	b.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007aa0:	041b      	lsls	r3, r3, #16
 8007aa2:	0e1b      	lsrs	r3, r3, #24
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	4a04      	ldr	r2, [pc, #16]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab0:	e3a3      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab6:	e3a0      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007ab8:	46020c00 	.word	0x46020c00
 8007abc:	08027a44 	.word	0x08027a44
 8007ac0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac8:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007acc:	430b      	orrs	r3, r1
 8007ace:	d148      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007ad0:	4b9d      	ldr	r3, [pc, #628]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ad6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ada:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	2bc0      	cmp	r3, #192	; 0xc0
 8007ae0:	d024      	beq.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	2bc0      	cmp	r3, #192	; 0xc0
 8007ae6:	d839      	bhi.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	2b80      	cmp	r3, #128	; 0x80
 8007aec:	d00d      	beq.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	2b80      	cmp	r3, #128	; 0x80
 8007af2:	d833      	bhi.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	2b40      	cmp	r3, #64	; 0x40
 8007afe:	d011      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007b00:	e02c      	b.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007b02:	f7fd ff99 	bl	8005a38 <HAL_RCC_GetPCLK3Freq>
 8007b06:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b08:	e377      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b0a:	4b8f      	ldr	r3, [pc, #572]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b16:	d102      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007b18:	4b8c      	ldr	r3, [pc, #560]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b1c:	e36d      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b22:	e36a      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007b24:	f7fd fe3e 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8007b28:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b2a:	e366      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007b2c:	4b86      	ldr	r3, [pc, #536]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007b38:	4b83      	ldr	r3, [pc, #524]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	0f1b      	lsrs	r3, r3, #28
 8007b3e:	f003 030f 	and.w	r3, r3, #15
 8007b42:	e006      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007b44:	4b80      	ldr	r3, [pc, #512]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b4a:	041b      	lsls	r3, r3, #16
 8007b4c:	0f1b      	lsrs	r3, r3, #28
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	4a7f      	ldr	r2, [pc, #508]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b5a:	e34e      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b60:	e34b      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b66:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	d147      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007b6e:	4b76      	ldr	r3, [pc, #472]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b78:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d103      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b80:	f7fd ff32 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007b84:	6378      	str	r0, [r7, #52]	; 0x34
 8007b86:	e338      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b8e:	d103      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b90:	f7fd fe08 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8007b94:	6378      	str	r0, [r7, #52]	; 0x34
 8007b96:	e330      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007b98:	4b6b      	ldr	r3, [pc, #428]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba4:	d106      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bac:	d102      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007bae:	4b67      	ldr	r3, [pc, #412]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb2:	e322      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007bb4:	4b64      	ldr	r3, [pc, #400]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d11b      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bc6:	d117      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bc8:	4b5f      	ldr	r3, [pc, #380]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007bd4:	4b5c      	ldr	r3, [pc, #368]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	0e1b      	lsrs	r3, r3, #24
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	e006      	b.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007be0:	4b59      	ldr	r3, [pc, #356]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007be6:	041b      	lsls	r3, r3, #16
 8007be8:	0e1b      	lsrs	r3, r3, #24
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	4a58      	ldr	r2, [pc, #352]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf6:	e300      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfc:	e2fd      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c02:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007c06:	430b      	orrs	r3, r1
 8007c08:	d15b      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007c0a:	4b4f      	ldr	r3, [pc, #316]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c14:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d117      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c1c:	4b4a      	ldr	r3, [pc, #296]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007c28:	4b47      	ldr	r3, [pc, #284]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	0e1b      	lsrs	r3, r3, #24
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	e006      	b.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007c34:	4b44      	ldr	r3, [pc, #272]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c3a:	041b      	lsls	r3, r3, #16
 8007c3c:	0e1b      	lsrs	r3, r3, #24
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	4a43      	ldr	r2, [pc, #268]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4a:	e2d6      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007c4c:	4b3e      	ldr	r3, [pc, #248]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c5a:	d112      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c62:	d10e      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c64:	4b38      	ldr	r3, [pc, #224]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c72:	d102      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007c74:	23fa      	movs	r3, #250	; 0xfa
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c78:	e2bf      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007c7a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c80:	e2bb      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007c82:	4b31      	ldr	r3, [pc, #196]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c8e:	d106      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c96:	d102      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8007c98:	4b2c      	ldr	r3, [pc, #176]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	e2ad      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007c9e:	4b2a      	ldr	r3, [pc, #168]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d107      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cb2:	d103      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cba:	e29e      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc0:	e29b      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc6:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	d162      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007cce:	4b1e      	ldr	r3, [pc, #120]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cd8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d117      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ce0:	4b19      	ldr	r3, [pc, #100]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007cec:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	0e1b      	lsrs	r3, r3, #24
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	e006      	b.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007cf8:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cfe:	041b      	lsls	r3, r3, #16
 8007d00:	0e1b      	lsrs	r3, r3, #24
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	4a12      	ldr	r2, [pc, #72]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0e:	e274      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007d10:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d1e:	d119      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d26:	d115      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d28:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d36:	d102      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007d38:	23fa      	movs	r3, #250	; 0xfa
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d3c:	e25d      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007d3e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d44:	e259      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007d46:	bf00      	nop
 8007d48:	46020c00 	.word	0x46020c00
 8007d4c:	00f42400 	.word	0x00f42400
 8007d50:	08027a44 	.word	0x08027a44
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007d54:	4b9d      	ldr	r3, [pc, #628]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d60:	d106      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d68:	d102      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8007d6a:	4b99      	ldr	r3, [pc, #612]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6e:	e244      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007d70:	4b96      	ldr	r3, [pc, #600]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d107      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d84:	d103      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8007d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8c:	e235      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
 8007d92:	e232      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d98:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	d147      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007da0:	4b8a      	ldr	r3, [pc, #552]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007da6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d103      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007db2:	f7fd fe19 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007db6:	6378      	str	r0, [r7, #52]	; 0x34
 8007db8:	e21f      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007dba:	4b84      	ldr	r3, [pc, #528]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dc8:	d112      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd0:	d10e      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dd2:	4b7e      	ldr	r3, [pc, #504]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de0:	d102      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8007de2:	23fa      	movs	r3, #250	; 0xfa
 8007de4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007de6:	e208      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007de8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dee:	e204      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007df0:	4b76      	ldr	r3, [pc, #472]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfc:	d106      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e04:	d102      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8007e06:	4b72      	ldr	r3, [pc, #456]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0a:	e1f6      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007e0c:	4b6f      	ldr	r3, [pc, #444]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d107      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e20:	d103      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8007e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e26:	637b      	str	r3, [r7, #52]	; 0x34
 8007e28:	e1e7      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2e:	e1e4      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e34:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	d12d      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007e3c:	4b63      	ldr	r3, [pc, #396]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e42:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007e46:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007e48:	4b60      	ldr	r3, [pc, #384]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e54:	d105      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8007e5c:	4b5c      	ldr	r3, [pc, #368]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e60:	e1cb      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e68:	d107      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fc74 	bl	800675c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
 8007e78:	e1bf      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e80:	d107      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e82:	f107 0318 	add.w	r3, r7, #24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fdce 	bl	8006a28 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e90:	e1b3      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	637b      	str	r3, [r7, #52]	; 0x34
 8007e96:	e1b0      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e9c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	d14d      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007ea4:	4b49      	ldr	r3, [pc, #292]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007eaa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007eae:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007eb6:	d028      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ebe:	d83c      	bhi.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ec6:	d013      	beq.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ece:	d834      	bhi.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d004      	beq.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007edc:	d004      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007ede:	e02c      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007ee0:	f7fd fd96 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8007ee4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007ee6:	e188      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ee8:	f7fd fc5c 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8007eec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007eee:	e184      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ef0:	4b36      	ldr	r3, [pc, #216]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efc:	d102      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8007efe:	4b34      	ldr	r3, [pc, #208]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f02:	e17a      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f08:	e177      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f0a:	4b30      	ldr	r3, [pc, #192]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8007f16:	4b2d      	ldr	r3, [pc, #180]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	0e1b      	lsrs	r3, r3, #24
 8007f1c:	f003 030f 	and.w	r3, r3, #15
 8007f20:	e006      	b.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007f22:	4b2a      	ldr	r3, [pc, #168]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	0e1b      	lsrs	r3, r3, #24
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	4a28      	ldr	r2, [pc, #160]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8007f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f38:	e15f      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f3e:	e15c      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f44:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	d154      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007f4c:	4b1f      	ldr	r3, [pc, #124]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f56:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f5e:	d028      	beq.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f66:	d843      	bhi.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f6e:	d013      	beq.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f76:	d83b      	bhi.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f84:	d004      	beq.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8007f86:	e033      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007f88:	f7fd fd2e 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007f8c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f8e:	e134      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007f90:	f7fd fc08 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8007f94:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f96:	e130      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f98:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa4:	d102      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007fa8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007faa:	e126      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fb0:	e123      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fb2:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8007fbe:	4b03      	ldr	r3, [pc, #12]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	0e1b      	lsrs	r3, r3, #24
 8007fc4:	f003 030f 	and.w	r3, r3, #15
 8007fc8:	e00d      	b.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8007fca:	bf00      	nop
 8007fcc:	46020c00 	.word	0x46020c00
 8007fd0:	00f42400 	.word	0x00f42400
 8007fd4:	08027a44 	.word	0x08027a44
 8007fd8:	4b8a      	ldr	r3, [pc, #552]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fde:	041b      	lsls	r3, r3, #16
 8007fe0:	0e1b      	lsrs	r3, r3, #24
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	4a88      	ldr	r2, [pc, #544]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fee:	e104      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ff4:	e101      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ffa:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007ffe:	430b      	orrs	r3, r1
 8008000:	d16e      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008002:	4b80      	ldr	r3, [pc, #512]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008008:	f003 0318 	and.w	r3, r3, #24
 800800c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	2b18      	cmp	r3, #24
 8008012:	d862      	bhi.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8008014:	a201      	add	r2, pc, #4	; (adr r2, 800801c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	08008081 	.word	0x08008081
 8008020:	080080db 	.word	0x080080db
 8008024:	080080db 	.word	0x080080db
 8008028:	080080db 	.word	0x080080db
 800802c:	080080db 	.word	0x080080db
 8008030:	080080db 	.word	0x080080db
 8008034:	080080db 	.word	0x080080db
 8008038:	080080db 	.word	0x080080db
 800803c:	08008089 	.word	0x08008089
 8008040:	080080db 	.word	0x080080db
 8008044:	080080db 	.word	0x080080db
 8008048:	080080db 	.word	0x080080db
 800804c:	080080db 	.word	0x080080db
 8008050:	080080db 	.word	0x080080db
 8008054:	080080db 	.word	0x080080db
 8008058:	080080db 	.word	0x080080db
 800805c:	08008091 	.word	0x08008091
 8008060:	080080db 	.word	0x080080db
 8008064:	080080db 	.word	0x080080db
 8008068:	080080db 	.word	0x080080db
 800806c:	080080db 	.word	0x080080db
 8008070:	080080db 	.word	0x080080db
 8008074:	080080db 	.word	0x080080db
 8008078:	080080db 	.word	0x080080db
 800807c:	080080ab 	.word	0x080080ab
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008080:	f7fd fcda 	bl	8005a38 <HAL_RCC_GetPCLK3Freq>
 8008084:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008086:	e0b8      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008088:	f7fd fb8c 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 800808c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800808e:	e0b4      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008090:	4b5c      	ldr	r3, [pc, #368]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809c:	d102      	bne.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800809e:	4b5b      	ldr	r3, [pc, #364]	; (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80080a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080a2:	e0aa      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080a8:	e0a7      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080aa:	4b56      	ldr	r3, [pc, #344]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80080b6:	4b53      	ldr	r3, [pc, #332]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	0e1b      	lsrs	r3, r3, #24
 80080bc:	f003 030f 	and.w	r3, r3, #15
 80080c0:	e006      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80080c2:	4b50      	ldr	r3, [pc, #320]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80080c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080c8:	041b      	lsls	r3, r3, #16
 80080ca:	0e1b      	lsrs	r3, r3, #24
 80080cc:	f003 030f 	and.w	r3, r3, #15
 80080d0:	4a4d      	ldr	r2, [pc, #308]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80080d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080d8:	e08f      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80080da:	2300      	movs	r3, #0
 80080dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080de:	e08c      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80080e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e4:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80080e8:	430b      	orrs	r3, r1
 80080ea:	d14c      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80080ec:	4b45      	ldr	r3, [pc, #276]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80080ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80080f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80080f6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080fe:	d013      	beq.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008106:	d83b      	bhi.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800810e:	d013      	beq.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008116:	d833      	bhi.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	2b00      	cmp	r3, #0
 800811c:	d014      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008124:	d014      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008126:	e02b      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008128:	f107 0318 	add.w	r3, r7, #24
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe fc7b 	bl	8006a28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008136:	e060      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fb0d 	bl	800675c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008146:	e058      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008148:	f7fd fb2c 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 800814c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800814e:	e054      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008150:	4b2c      	ldr	r3, [pc, #176]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800815c:	4b29      	ldr	r3, [pc, #164]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	0e1b      	lsrs	r3, r3, #24
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	e006      	b.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008168:	4b26      	ldr	r3, [pc, #152]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800816a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	0e1b      	lsrs	r3, r3, #24
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	4a24      	ldr	r2, [pc, #144]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800817c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800817e:	e03c      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008184:	e039      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800818e:	430b      	orrs	r3, r1
 8008190:	d131      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800819c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800819e:	4b19      	ldr	r3, [pc, #100]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80081a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d106      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80081b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b6:	637b      	str	r3, [r7, #52]	; 0x34
 80081b8:	e01f      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80081bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081c8:	d112      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d0:	d10e      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081d2:	4b0c      	ldr	r3, [pc, #48]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80081d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081e0:	d102      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80081e2:	23fa      	movs	r3, #250	; 0xfa
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081e6:	e008      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80081e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081ee:	e004      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	637b      	str	r3, [r7, #52]	; 0x34
 80081f4:	e001      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3738      	adds	r7, #56	; 0x38
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	46020c00 	.word	0x46020c00
 8008208:	08027a44 	.word	0x08027a44
 800820c:	00f42400 	.word	0x00f42400

08008210 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008218:	4b47      	ldr	r3, [pc, #284]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a46      	ldr	r2, [pc, #280]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 800821e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008222:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008224:	f7f9 ff40 	bl	80020a8 <HAL_GetTick>
 8008228:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800822a:	e008      	b.n	800823e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800822c:	f7f9 ff3c 	bl	80020a8 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d901      	bls.n	800823e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e077      	b.n	800832e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800823e:	4b3e      	ldr	r3, [pc, #248]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f0      	bne.n	800822c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800824a:	4b3b      	ldr	r3, [pc, #236]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008252:	f023 0303 	bic.w	r3, r3, #3
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6811      	ldr	r1, [r2, #0]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	6852      	ldr	r2, [r2, #4]
 800825e:	3a01      	subs	r2, #1
 8008260:	0212      	lsls	r2, r2, #8
 8008262:	430a      	orrs	r2, r1
 8008264:	4934      	ldr	r1, [pc, #208]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 8008266:	4313      	orrs	r3, r2
 8008268:	62cb      	str	r3, [r1, #44]	; 0x2c
 800826a:	4b33      	ldr	r3, [pc, #204]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 800826c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800826e:	4b33      	ldr	r3, [pc, #204]	; (800833c <RCCEx_PLL2_Config+0x12c>)
 8008270:	4013      	ands	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6892      	ldr	r2, [r2, #8]
 8008276:	3a01      	subs	r2, #1
 8008278:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	68d2      	ldr	r2, [r2, #12]
 8008280:	3a01      	subs	r2, #1
 8008282:	0252      	lsls	r2, r2, #9
 8008284:	b292      	uxth	r2, r2
 8008286:	4311      	orrs	r1, r2
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	6912      	ldr	r2, [r2, #16]
 800828c:	3a01      	subs	r2, #1
 800828e:	0412      	lsls	r2, r2, #16
 8008290:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008294:	4311      	orrs	r1, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6952      	ldr	r2, [r2, #20]
 800829a:	3a01      	subs	r2, #1
 800829c:	0612      	lsls	r2, r2, #24
 800829e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80082a2:	430a      	orrs	r2, r1
 80082a4:	4924      	ldr	r1, [pc, #144]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80082aa:	4b23      	ldr	r3, [pc, #140]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	f023 020c 	bic.w	r2, r3, #12
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	4920      	ldr	r1, [pc, #128]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80082bc:	4b1e      	ldr	r3, [pc, #120]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	491c      	ldr	r1, [pc, #112]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80082ca:	4b1b      	ldr	r3, [pc, #108]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ce:	4a1a      	ldr	r2, [pc, #104]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082d0:	f023 0310 	bic.w	r3, r3, #16
 80082d4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80082d6:	4b18      	ldr	r3, [pc, #96]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	69d2      	ldr	r2, [r2, #28]
 80082e6:	00d2      	lsls	r2, r2, #3
 80082e8:	4913      	ldr	r1, [pc, #76]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80082ee:	4b12      	ldr	r3, [pc, #72]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f2:	4a11      	ldr	r2, [pc, #68]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082f4:	f043 0310 	orr.w	r3, r3, #16
 80082f8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80082fa:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a0e      	ldr	r2, [pc, #56]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 8008300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008304:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008306:	f7f9 fecf 	bl	80020a8 <HAL_GetTick>
 800830a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800830c:	e008      	b.n	8008320 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800830e:	f7f9 fecb 	bl	80020a8 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d901      	bls.n	8008320 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e006      	b.n	800832e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <RCCEx_PLL2_Config+0x128>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0f0      	beq.n	800830e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800832c:	2300      	movs	r3, #0

}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	46020c00 	.word	0x46020c00
 800833c:	80800000 	.word	0x80800000

08008340 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008348:	4b47      	ldr	r3, [pc, #284]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a46      	ldr	r2, [pc, #280]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 800834e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008352:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008354:	f7f9 fea8 	bl	80020a8 <HAL_GetTick>
 8008358:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800835a:	e008      	b.n	800836e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800835c:	f7f9 fea4 	bl	80020a8 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d901      	bls.n	800836e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e077      	b.n	800845e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800836e:	4b3e      	ldr	r3, [pc, #248]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f0      	bne.n	800835c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800837a:	4b3b      	ldr	r3, [pc, #236]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 800837c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6811      	ldr	r1, [r2, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6852      	ldr	r2, [r2, #4]
 800838e:	3a01      	subs	r2, #1
 8008390:	0212      	lsls	r2, r2, #8
 8008392:	430a      	orrs	r2, r1
 8008394:	4934      	ldr	r1, [pc, #208]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 8008396:	4313      	orrs	r3, r2
 8008398:	630b      	str	r3, [r1, #48]	; 0x30
 800839a:	4b33      	ldr	r3, [pc, #204]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 800839c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800839e:	4b33      	ldr	r3, [pc, #204]	; (800846c <RCCEx_PLL3_Config+0x12c>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	6892      	ldr	r2, [r2, #8]
 80083a6:	3a01      	subs	r2, #1
 80083a8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	68d2      	ldr	r2, [r2, #12]
 80083b0:	3a01      	subs	r2, #1
 80083b2:	0252      	lsls	r2, r2, #9
 80083b4:	b292      	uxth	r2, r2
 80083b6:	4311      	orrs	r1, r2
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6912      	ldr	r2, [r2, #16]
 80083bc:	3a01      	subs	r2, #1
 80083be:	0412      	lsls	r2, r2, #16
 80083c0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80083c4:	4311      	orrs	r1, r2
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6952      	ldr	r2, [r2, #20]
 80083ca:	3a01      	subs	r2, #1
 80083cc:	0612      	lsls	r2, r2, #24
 80083ce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80083d2:	430a      	orrs	r2, r1
 80083d4:	4924      	ldr	r1, [pc, #144]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80083da:	4b23      	ldr	r3, [pc, #140]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	f023 020c 	bic.w	r2, r3, #12
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	4920      	ldr	r1, [pc, #128]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80083ec:	4b1e      	ldr	r3, [pc, #120]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 80083ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a1b      	ldr	r3, [r3, #32]
 80083f4:	491c      	ldr	r1, [pc, #112]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80083fa:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 80083fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fe:	4a1a      	ldr	r2, [pc, #104]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 8008400:	f023 0310 	bic.w	r3, r3, #16
 8008404:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008406:	4b18      	ldr	r3, [pc, #96]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 8008408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800840e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	69d2      	ldr	r2, [r2, #28]
 8008416:	00d2      	lsls	r2, r2, #3
 8008418:	4913      	ldr	r1, [pc, #76]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 800841a:	4313      	orrs	r3, r2
 800841c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	4a11      	ldr	r2, [pc, #68]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 8008424:	f043 0310 	orr.w	r3, r3, #16
 8008428:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800842a:	4b0f      	ldr	r3, [pc, #60]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a0e      	ldr	r2, [pc, #56]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 8008430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008434:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008436:	f7f9 fe37 	bl	80020a8 <HAL_GetTick>
 800843a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800843c:	e008      	b.n	8008450 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800843e:	f7f9 fe33 	bl	80020a8 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d901      	bls.n	8008450 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e006      	b.n	800845e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <RCCEx_PLL3_Config+0x128>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0f0      	beq.n	800843e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	46020c00 	.word	0x46020c00
 800846c:	80800000 	.word	0x80800000

08008470 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e03e      	b.n	8008504 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d106      	bne.n	80084a0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7f9 fbf6 	bl	8001c8c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3308      	adds	r3, #8
 80084a8:	4619      	mov	r1, r3
 80084aa:	4610      	mov	r0, r2
 80084ac:	f001 f8c4 	bl	8009638 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	461a      	mov	r2, r3
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	f001 f98c 	bl	80097d8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6858      	ldr	r0, [r3, #4]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	f001 f9d5 	bl	800987c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	6892      	ldr	r2, [r2, #8]
 80084da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	6892      	ldr	r2, [r2, #8]
 80084e6:	f041 0101 	orr.w	r1, r1, #1
 80084ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80084ee:	4b07      	ldr	r3, [pc, #28]	; (800850c <HAL_SRAM_Init+0x9c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a06      	ldr	r2, [pc, #24]	; (800850c <HAL_SRAM_Init+0x9c>)
 80084f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084f8:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	420d0400 	.word	0x420d0400

08008510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e049      	b.n	80085b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f841 	bl	80085be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3304      	adds	r3, #4
 800854c:	4619      	mov	r1, r3
 800854e:	4610      	mov	r0, r2
 8008550:	f000 fa88 	bl	8008a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
	...

080085d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d001      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e072      	b.n	80086d2 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0201 	orr.w	r2, r2, #1
 8008602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a35      	ldr	r2, [pc, #212]	; (80086e0 <HAL_TIM_Base_Start_IT+0x10c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d040      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a34      	ldr	r2, [pc, #208]	; (80086e4 <HAL_TIM_Base_Start_IT+0x110>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d03b      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008620:	d036      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800862a:	d031      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a2d      	ldr	r2, [pc, #180]	; (80086e8 <HAL_TIM_Base_Start_IT+0x114>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d02c      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a2c      	ldr	r2, [pc, #176]	; (80086ec <HAL_TIM_Base_Start_IT+0x118>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d027      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a2a      	ldr	r2, [pc, #168]	; (80086f0 <HAL_TIM_Base_Start_IT+0x11c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d022      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a29      	ldr	r2, [pc, #164]	; (80086f4 <HAL_TIM_Base_Start_IT+0x120>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d01d      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a27      	ldr	r2, [pc, #156]	; (80086f8 <HAL_TIM_Base_Start_IT+0x124>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d018      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a26      	ldr	r2, [pc, #152]	; (80086fc <HAL_TIM_Base_Start_IT+0x128>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d013      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a24      	ldr	r2, [pc, #144]	; (8008700 <HAL_TIM_Base_Start_IT+0x12c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00e      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a23      	ldr	r2, [pc, #140]	; (8008704 <HAL_TIM_Base_Start_IT+0x130>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d009      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a21      	ldr	r2, [pc, #132]	; (8008708 <HAL_TIM_Base_Start_IT+0x134>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d004      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0xbc>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a20      	ldr	r2, [pc, #128]	; (800870c <HAL_TIM_Base_Start_IT+0x138>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d115      	bne.n	80086bc <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	4b1e      	ldr	r3, [pc, #120]	; (8008710 <HAL_TIM_Base_Start_IT+0x13c>)
 8008698:	4013      	ands	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b06      	cmp	r3, #6
 80086a0:	d015      	beq.n	80086ce <HAL_TIM_Base_Start_IT+0xfa>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a8:	d011      	beq.n	80086ce <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0201 	orr.w	r2, r2, #1
 80086b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ba:	e008      	b.n	80086ce <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0201 	orr.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e000      	b.n	80086d0 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40012c00 	.word	0x40012c00
 80086e4:	50012c00 	.word	0x50012c00
 80086e8:	40000400 	.word	0x40000400
 80086ec:	50000400 	.word	0x50000400
 80086f0:	40000800 	.word	0x40000800
 80086f4:	50000800 	.word	0x50000800
 80086f8:	40000c00 	.word	0x40000c00
 80086fc:	50000c00 	.word	0x50000c00
 8008700:	40013400 	.word	0x40013400
 8008704:	50013400 	.word	0x50013400
 8008708:	40014000 	.word	0x40014000
 800870c:	50014000 	.word	0x50014000
 8008710:	00010007 	.word	0x00010007

08008714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b02      	cmp	r3, #2
 8008728:	d122      	bne.n	8008770 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b02      	cmp	r3, #2
 8008736:	d11b      	bne.n	8008770 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0202 	mvn.w	r2, #2
 8008740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	f003 0303 	and.w	r3, r3, #3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f965 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 800875c:	e005      	b.n	800876a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f957 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f968 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	f003 0304 	and.w	r3, r3, #4
 800877a:	2b04      	cmp	r3, #4
 800877c:	d122      	bne.n	80087c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b04      	cmp	r3, #4
 800878a:	d11b      	bne.n	80087c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f06f 0204 	mvn.w	r2, #4
 8008794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2202      	movs	r2, #2
 800879a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f93b 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 80087b0:	e005      	b.n	80087be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f92d 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f93e 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	d122      	bne.n	8008818 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	2b08      	cmp	r3, #8
 80087de:	d11b      	bne.n	8008818 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f06f 0208 	mvn.w	r2, #8
 80087e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2204      	movs	r2, #4
 80087ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f911 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 8008804:	e005      	b.n	8008812 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f903 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f914 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f003 0310 	and.w	r3, r3, #16
 8008822:	2b10      	cmp	r3, #16
 8008824:	d122      	bne.n	800886c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	f003 0310 	and.w	r3, r3, #16
 8008830:	2b10      	cmp	r3, #16
 8008832:	d11b      	bne.n	800886c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f06f 0210 	mvn.w	r2, #16
 800883c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2208      	movs	r2, #8
 8008842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f8e7 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 8008858:	e005      	b.n	8008866 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f8d9 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f8ea 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b01      	cmp	r3, #1
 8008878:	d10e      	bne.n	8008898 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b01      	cmp	r3, #1
 8008886:	d107      	bne.n	8008898 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f06f 0201 	mvn.w	r2, #1
 8008890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7f8 ffd4 	bl	8001840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b80      	cmp	r3, #128	; 0x80
 80088a4:	d10e      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b0:	2b80      	cmp	r3, #128	; 0x80
 80088b2:	d107      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9d4 	bl	8008c6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d2:	d10e      	bne.n	80088f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088de:	2b80      	cmp	r3, #128	; 0x80
 80088e0:	d107      	bne.n	80088f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f9c7 	bl	8008c80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fc:	2b40      	cmp	r3, #64	; 0x40
 80088fe:	d10e      	bne.n	800891e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d107      	bne.n	800891e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f898 	bl	8008a4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	f003 0320 	and.w	r3, r3, #32
 8008928:	2b20      	cmp	r3, #32
 800892a:	d10e      	bne.n	800894a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b20      	cmp	r3, #32
 8008938:	d107      	bne.n	800894a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f06f 0220 	mvn.w	r2, #32
 8008942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f987 	bl	8008c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008958:	d10f      	bne.n	800897a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008968:	d107      	bne.n	800897a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f98d 	bl	8008c94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008988:	d10f      	bne.n	80089aa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008998:	d107      	bne.n	80089aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80089a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f97f 	bl	8008ca8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089b8:	d10f      	bne.n	80089da <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089c8:	d107      	bne.n	80089da <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80089d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f971 	bl	8008cbc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089e8:	d10f      	bne.n	8008a0a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089f8:	d107      	bne.n	8008a0a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f963 	bl	8008cd0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a0a:	bf00      	nop
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a1a:	bf00      	nop
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a68      	ldr	r2, [pc, #416]	; (8008c18 <TIM_Base_SetConfig+0x1b4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d02b      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a67      	ldr	r2, [pc, #412]	; (8008c1c <TIM_Base_SetConfig+0x1b8>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d027      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8a:	d023      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a92:	d01f      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a62      	ldr	r2, [pc, #392]	; (8008c20 <TIM_Base_SetConfig+0x1bc>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d01b      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a61      	ldr	r2, [pc, #388]	; (8008c24 <TIM_Base_SetConfig+0x1c0>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d017      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a60      	ldr	r2, [pc, #384]	; (8008c28 <TIM_Base_SetConfig+0x1c4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d013      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a5f      	ldr	r2, [pc, #380]	; (8008c2c <TIM_Base_SetConfig+0x1c8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00f      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a5e      	ldr	r2, [pc, #376]	; (8008c30 <TIM_Base_SetConfig+0x1cc>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d00b      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a5d      	ldr	r2, [pc, #372]	; (8008c34 <TIM_Base_SetConfig+0x1d0>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d007      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a5c      	ldr	r2, [pc, #368]	; (8008c38 <TIM_Base_SetConfig+0x1d4>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d003      	beq.n	8008ad4 <TIM_Base_SetConfig+0x70>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a5b      	ldr	r2, [pc, #364]	; (8008c3c <TIM_Base_SetConfig+0x1d8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d108      	bne.n	8008ae6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a4b      	ldr	r2, [pc, #300]	; (8008c18 <TIM_Base_SetConfig+0x1b4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d043      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a4a      	ldr	r2, [pc, #296]	; (8008c1c <TIM_Base_SetConfig+0x1b8>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d03f      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afc:	d03b      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b04:	d037      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a45      	ldr	r2, [pc, #276]	; (8008c20 <TIM_Base_SetConfig+0x1bc>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d033      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a44      	ldr	r2, [pc, #272]	; (8008c24 <TIM_Base_SetConfig+0x1c0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d02f      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a43      	ldr	r2, [pc, #268]	; (8008c28 <TIM_Base_SetConfig+0x1c4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d02b      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a42      	ldr	r2, [pc, #264]	; (8008c2c <TIM_Base_SetConfig+0x1c8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d027      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a41      	ldr	r2, [pc, #260]	; (8008c30 <TIM_Base_SetConfig+0x1cc>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d023      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a40      	ldr	r2, [pc, #256]	; (8008c34 <TIM_Base_SetConfig+0x1d0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d01f      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a3f      	ldr	r2, [pc, #252]	; (8008c38 <TIM_Base_SetConfig+0x1d4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d01b      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a3e      	ldr	r2, [pc, #248]	; (8008c3c <TIM_Base_SetConfig+0x1d8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d017      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a3d      	ldr	r2, [pc, #244]	; (8008c40 <TIM_Base_SetConfig+0x1dc>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d013      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a3c      	ldr	r2, [pc, #240]	; (8008c44 <TIM_Base_SetConfig+0x1e0>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d00f      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a3b      	ldr	r2, [pc, #236]	; (8008c48 <TIM_Base_SetConfig+0x1e4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00b      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a3a      	ldr	r2, [pc, #232]	; (8008c4c <TIM_Base_SetConfig+0x1e8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d007      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a39      	ldr	r2, [pc, #228]	; (8008c50 <TIM_Base_SetConfig+0x1ec>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d003      	beq.n	8008b76 <TIM_Base_SetConfig+0x112>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a38      	ldr	r2, [pc, #224]	; (8008c54 <TIM_Base_SetConfig+0x1f0>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d108      	bne.n	8008b88 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a1a      	ldr	r2, [pc, #104]	; (8008c18 <TIM_Base_SetConfig+0x1b4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d023      	beq.n	8008bfc <TIM_Base_SetConfig+0x198>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a19      	ldr	r2, [pc, #100]	; (8008c1c <TIM_Base_SetConfig+0x1b8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d01f      	beq.n	8008bfc <TIM_Base_SetConfig+0x198>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a1e      	ldr	r2, [pc, #120]	; (8008c38 <TIM_Base_SetConfig+0x1d4>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d01b      	beq.n	8008bfc <TIM_Base_SetConfig+0x198>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a1d      	ldr	r2, [pc, #116]	; (8008c3c <TIM_Base_SetConfig+0x1d8>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d017      	beq.n	8008bfc <TIM_Base_SetConfig+0x198>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a1c      	ldr	r2, [pc, #112]	; (8008c40 <TIM_Base_SetConfig+0x1dc>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d013      	beq.n	8008bfc <TIM_Base_SetConfig+0x198>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <TIM_Base_SetConfig+0x1e0>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00f      	beq.n	8008bfc <TIM_Base_SetConfig+0x198>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a1a      	ldr	r2, [pc, #104]	; (8008c48 <TIM_Base_SetConfig+0x1e4>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d00b      	beq.n	8008bfc <TIM_Base_SetConfig+0x198>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a19      	ldr	r2, [pc, #100]	; (8008c4c <TIM_Base_SetConfig+0x1e8>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d007      	beq.n	8008bfc <TIM_Base_SetConfig+0x198>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a18      	ldr	r2, [pc, #96]	; (8008c50 <TIM_Base_SetConfig+0x1ec>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d003      	beq.n	8008bfc <TIM_Base_SetConfig+0x198>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a17      	ldr	r2, [pc, #92]	; (8008c54 <TIM_Base_SetConfig+0x1f0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d103      	bne.n	8008c04 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	615a      	str	r2, [r3, #20]
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	40012c00 	.word	0x40012c00
 8008c1c:	50012c00 	.word	0x50012c00
 8008c20:	40000400 	.word	0x40000400
 8008c24:	50000400 	.word	0x50000400
 8008c28:	40000800 	.word	0x40000800
 8008c2c:	50000800 	.word	0x50000800
 8008c30:	40000c00 	.word	0x40000c00
 8008c34:	50000c00 	.word	0x50000c00
 8008c38:	40013400 	.word	0x40013400
 8008c3c:	50013400 	.word	0x50013400
 8008c40:	40014000 	.word	0x40014000
 8008c44:	50014000 	.word	0x50014000
 8008c48:	40014400 	.word	0x40014400
 8008c4c:	50014400 	.word	0x50014400
 8008c50:	40014800 	.word	0x40014800
 8008c54:	50014800 	.word	0x50014800

08008c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e042      	b.n	8008d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d106      	bne.n	8008d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7f8 fe75 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2224      	movs	r2, #36	; 0x24
 8008d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 0201 	bic.w	r2, r2, #1
 8008d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f82c 	bl	8008d84 <UART_SetConfig>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e022      	b.n	8008d7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f9c2 	bl	80090c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fa49 	bl	800920c <UART_CheckIdleState>
 8008d7a:	4603      	mov	r3, r0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d88:	b094      	sub	sp, #80	; 0x50
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	4b7e      	ldr	r3, [pc, #504]	; (8008f94 <UART_SetConfig+0x210>)
 8008d9a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	431a      	orrs	r2, r3
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	431a      	orrs	r2, r3
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4977      	ldr	r1, [pc, #476]	; (8008f98 <UART_SetConfig+0x214>)
 8008dbc:	4019      	ands	r1, r3
 8008dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	68d9      	ldr	r1, [r3, #12]
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	ea40 0301 	orr.w	r3, r0, r1
 8008dde:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	4b6a      	ldr	r3, [pc, #424]	; (8008f94 <UART_SetConfig+0x210>)
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d009      	beq.n	8008e04 <UART_SetConfig+0x80>
 8008df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	4b69      	ldr	r3, [pc, #420]	; (8008f9c <UART_SetConfig+0x218>)
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d004      	beq.n	8008e04 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	6a1a      	ldr	r2, [r3, #32]
 8008dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e00:	4313      	orrs	r3, r2
 8008e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008e0e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	f023 000f 	bic.w	r0, r3, #15
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	ea40 0301 	orr.w	r3, r0, r1
 8008e32:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	4b59      	ldr	r3, [pc, #356]	; (8008fa0 <UART_SetConfig+0x21c>)
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d102      	bne.n	8008e44 <UART_SetConfig+0xc0>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e42:	e029      	b.n	8008e98 <UART_SetConfig+0x114>
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	4b56      	ldr	r3, [pc, #344]	; (8008fa4 <UART_SetConfig+0x220>)
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d102      	bne.n	8008e54 <UART_SetConfig+0xd0>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e52:	e021      	b.n	8008e98 <UART_SetConfig+0x114>
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	4b53      	ldr	r3, [pc, #332]	; (8008fa8 <UART_SetConfig+0x224>)
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d102      	bne.n	8008e64 <UART_SetConfig+0xe0>
 8008e5e:	2304      	movs	r3, #4
 8008e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e62:	e019      	b.n	8008e98 <UART_SetConfig+0x114>
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	4b50      	ldr	r3, [pc, #320]	; (8008fac <UART_SetConfig+0x228>)
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d102      	bne.n	8008e74 <UART_SetConfig+0xf0>
 8008e6e:	2308      	movs	r3, #8
 8008e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e72:	e011      	b.n	8008e98 <UART_SetConfig+0x114>
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4b4d      	ldr	r3, [pc, #308]	; (8008fb0 <UART_SetConfig+0x22c>)
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d102      	bne.n	8008e84 <UART_SetConfig+0x100>
 8008e7e:	2310      	movs	r3, #16
 8008e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e82:	e009      	b.n	8008e98 <UART_SetConfig+0x114>
 8008e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <UART_SetConfig+0x210>)
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d102      	bne.n	8008e94 <UART_SetConfig+0x110>
 8008e8e:	2320      	movs	r3, #32
 8008e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e92:	e001      	b.n	8008e98 <UART_SetConfig+0x114>
 8008e94:	2300      	movs	r3, #0
 8008e96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	4b3d      	ldr	r3, [pc, #244]	; (8008f94 <UART_SetConfig+0x210>)
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d005      	beq.n	8008eae <UART_SetConfig+0x12a>
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	4b3d      	ldr	r3, [pc, #244]	; (8008f9c <UART_SetConfig+0x218>)
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	f040 8085 	bne.w	8008fb8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	623b      	str	r3, [r7, #32]
 8008eb4:	627a      	str	r2, [r7, #36]	; 0x24
 8008eb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008eba:	f7fe f881 	bl	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ebe:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 80e8 	beq.w	8009098 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	4a39      	ldr	r2, [pc, #228]	; (8008fb4 <UART_SetConfig+0x230>)
 8008ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eda:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	4413      	add	r3, r2
 8008ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d305      	bcc.n	8008ef8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d903      	bls.n	8008f00 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008efe:	e048      	b.n	8008f92 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f02:	2200      	movs	r2, #0
 8008f04:	61bb      	str	r3, [r7, #24]
 8008f06:	61fa      	str	r2, [r7, #28]
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	4a29      	ldr	r2, [pc, #164]	; (8008fb4 <UART_SetConfig+0x230>)
 8008f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	2200      	movs	r2, #0
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	617a      	str	r2, [r7, #20]
 8008f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f22:	f7f7 fac5 	bl	80004b0 <__aeabi_uldivmod>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	f04f 0300 	mov.w	r3, #0
 8008f36:	020b      	lsls	r3, r1, #8
 8008f38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f3c:	0202      	lsls	r2, r0, #8
 8008f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f40:	6849      	ldr	r1, [r1, #4]
 8008f42:	0849      	lsrs	r1, r1, #1
 8008f44:	2000      	movs	r0, #0
 8008f46:	460c      	mov	r4, r1
 8008f48:	4605      	mov	r5, r0
 8008f4a:	eb12 0804 	adds.w	r8, r2, r4
 8008f4e:	eb43 0905 	adc.w	r9, r3, r5
 8008f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	60bb      	str	r3, [r7, #8]
 8008f5a:	60fa      	str	r2, [r7, #12]
 8008f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f60:	4640      	mov	r0, r8
 8008f62:	4649      	mov	r1, r9
 8008f64:	f7f7 faa4 	bl	80004b0 <__aeabi_uldivmod>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f76:	d308      	bcc.n	8008f8a <UART_SetConfig+0x206>
 8008f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f7e:	d204      	bcs.n	8008f8a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f86:	60da      	str	r2, [r3, #12]
 8008f88:	e003      	b.n	8008f92 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008f90:	e082      	b.n	8009098 <UART_SetConfig+0x314>
 8008f92:	e081      	b.n	8009098 <UART_SetConfig+0x314>
 8008f94:	46002400 	.word	0x46002400
 8008f98:	cfff69f3 	.word	0xcfff69f3
 8008f9c:	56002400 	.word	0x56002400
 8008fa0:	40013800 	.word	0x40013800
 8008fa4:	40004400 	.word	0x40004400
 8008fa8:	40004800 	.word	0x40004800
 8008fac:	40004c00 	.word	0x40004c00
 8008fb0:	40005000 	.word	0x40005000
 8008fb4:	08027b04 	.word	0x08027b04
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc0:	d13c      	bne.n	800903c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fce:	f7fd fff7 	bl	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fd2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d05e      	beq.n	8009098 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	4a39      	ldr	r2, [pc, #228]	; (80090c4 <UART_SetConfig+0x340>)
 8008fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fec:	005a      	lsls	r2, r3, #1
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	085b      	lsrs	r3, r3, #1
 8008ff4:	441a      	add	r2, r3
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009002:	2b0f      	cmp	r3, #15
 8009004:	d916      	bls.n	8009034 <UART_SetConfig+0x2b0>
 8009006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800900c:	d212      	bcs.n	8009034 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800900e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009010:	b29b      	uxth	r3, r3
 8009012:	f023 030f 	bic.w	r3, r3, #15
 8009016:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901a:	085b      	lsrs	r3, r3, #1
 800901c:	b29b      	uxth	r3, r3
 800901e:	f003 0307 	and.w	r3, r3, #7
 8009022:	b29a      	uxth	r2, r3
 8009024:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009026:	4313      	orrs	r3, r2
 8009028:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800902a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009030:	60da      	str	r2, [r3, #12]
 8009032:	e031      	b.n	8009098 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800903a:	e02d      	b.n	8009098 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800903c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800903e:	2200      	movs	r2, #0
 8009040:	469a      	mov	sl, r3
 8009042:	4693      	mov	fp, r2
 8009044:	4650      	mov	r0, sl
 8009046:	4659      	mov	r1, fp
 8009048:	f7fd ffba 	bl	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800904c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800904e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009050:	2b00      	cmp	r3, #0
 8009052:	d021      	beq.n	8009098 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	4a1a      	ldr	r2, [pc, #104]	; (80090c4 <UART_SetConfig+0x340>)
 800905a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905e:	461a      	mov	r2, r3
 8009060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009062:	fbb3 f2f2 	udiv	r2, r3, r2
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	441a      	add	r2, r3
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	fbb2 f3f3 	udiv	r3, r2, r3
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907a:	2b0f      	cmp	r3, #15
 800907c:	d909      	bls.n	8009092 <UART_SetConfig+0x30e>
 800907e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009084:	d205      	bcs.n	8009092 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009088:	b29a      	uxth	r2, r3
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	60da      	str	r2, [r3, #12]
 8009090:	e002      	b.n	8009098 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	2201      	movs	r2, #1
 800909c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	2201      	movs	r2, #1
 80090a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	2200      	movs	r2, #0
 80090ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	2200      	movs	r2, #0
 80090b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80090b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3750      	adds	r7, #80	; 0x50
 80090bc:	46bd      	mov	sp, r7
 80090be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090c2:	bf00      	nop
 80090c4:	08027b04 	.word	0x08027b04

080090c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00a      	beq.n	80090f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00a      	beq.n	8009114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00a      	beq.n	8009136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	430a      	orrs	r2, r1
 8009134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913a:	f003 0308 	and.w	r3, r3, #8
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00a      	beq.n	8009158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915c:	f003 0310 	and.w	r3, r3, #16
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	430a      	orrs	r2, r1
 8009178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01a      	beq.n	80091de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091c6:	d10a      	bne.n	80091de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00a      	beq.n	8009200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	605a      	str	r2, [r3, #4]
  }
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af02      	add	r7, sp, #8
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800921c:	f7f8 ff44 	bl	80020a8 <HAL_GetTick>
 8009220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0308 	and.w	r3, r3, #8
 800922c:	2b08      	cmp	r3, #8
 800922e:	d10e      	bne.n	800924e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f82f 	bl	80092a2 <UART_WaitOnFlagUntilTimeout>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e025      	b.n	800929a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b04      	cmp	r3, #4
 800925a:	d10e      	bne.n	800927a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800925c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f819 	bl	80092a2 <UART_WaitOnFlagUntilTimeout>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e00f      	b.n	800929a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2220      	movs	r2, #32
 800927e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b09c      	sub	sp, #112	; 0x70
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	603b      	str	r3, [r7, #0]
 80092ae:	4613      	mov	r3, r2
 80092b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092b2:	e0a9      	b.n	8009408 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ba:	f000 80a5 	beq.w	8009408 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092be:	f7f8 fef3 	bl	80020a8 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d302      	bcc.n	80092d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80092ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d140      	bne.n	8009356 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092dc:	e853 3f00 	ldrex	r3, [r3]
 80092e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092e8:	667b      	str	r3, [r7, #100]	; 0x64
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e6      	bne.n	80092d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3308      	adds	r3, #8
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	f023 0301 	bic.w	r3, r3, #1
 800931c:	663b      	str	r3, [r7, #96]	; 0x60
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009326:	64ba      	str	r2, [r7, #72]	; 0x48
 8009328:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800932c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e5      	bne.n	8009306 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2220      	movs	r2, #32
 800933e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2220      	movs	r2, #32
 8009346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e069      	b.n	800942a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d051      	beq.n	8009408 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800936e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009372:	d149      	bne.n	8009408 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800937c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	e853 3f00 	ldrex	r3, [r3]
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	461a      	mov	r2, r3
 800939a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939c:	637b      	str	r3, [r7, #52]	; 0x34
 800939e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a4:	e841 2300 	strex	r3, r2, [r1]
 80093a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e6      	bne.n	800937e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	613b      	str	r3, [r7, #16]
   return(result);
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	f023 0301 	bic.w	r3, r3, #1
 80093c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3308      	adds	r3, #8
 80093ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093d0:	623a      	str	r2, [r7, #32]
 80093d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	69f9      	ldr	r1, [r7, #28]
 80093d6:	6a3a      	ldr	r2, [r7, #32]
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e5      	bne.n	80093b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2220      	movs	r2, #32
 80093e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e010      	b.n	800942a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	69da      	ldr	r2, [r3, #28]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	4013      	ands	r3, r2
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	429a      	cmp	r2, r3
 8009416:	bf0c      	ite	eq
 8009418:	2301      	moveq	r3, #1
 800941a:	2300      	movne	r3, #0
 800941c:	b2db      	uxtb	r3, r3
 800941e:	461a      	mov	r2, r3
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	429a      	cmp	r2, r3
 8009424:	f43f af46 	beq.w	80092b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3770      	adds	r7, #112	; 0x70
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_UARTEx_DisableFifoMode+0x16>
 8009444:	2302      	movs	r3, #2
 8009446:	e027      	b.n	8009498 <HAL_UARTEx_DisableFifoMode+0x66>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2224      	movs	r2, #36	; 0x24
 8009454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009476:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e02d      	b.n	8009518 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	; 0x24
 80094c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0201 	bic.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f84f 	bl	800959c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009534:	2302      	movs	r3, #2
 8009536:	e02d      	b.n	8009594 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2224      	movs	r2, #36	; 0x24
 8009544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f022 0201 	bic.w	r2, r2, #1
 800955e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f811 	bl	800959c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d108      	bne.n	80095be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095bc:	e031      	b.n	8009622 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095be:	2308      	movs	r3, #8
 80095c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095c2:	2308      	movs	r3, #8
 80095c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	0e5b      	lsrs	r3, r3, #25
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	0f5b      	lsrs	r3, r3, #29
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	f003 0307 	and.w	r3, r3, #7
 80095e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	7b3a      	ldrb	r2, [r7, #12]
 80095ea:	4911      	ldr	r1, [pc, #68]	; (8009630 <UARTEx_SetNbDataToProcess+0x94>)
 80095ec:	5c8a      	ldrb	r2, [r1, r2]
 80095ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095f2:	7b3a      	ldrb	r2, [r7, #12]
 80095f4:	490f      	ldr	r1, [pc, #60]	; (8009634 <UARTEx_SetNbDataToProcess+0x98>)
 80095f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	7b7a      	ldrb	r2, [r7, #13]
 8009608:	4909      	ldr	r1, [pc, #36]	; (8009630 <UARTEx_SetNbDataToProcess+0x94>)
 800960a:	5c8a      	ldrb	r2, [r1, r2]
 800960c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009610:	7b7a      	ldrb	r2, [r7, #13]
 8009612:	4908      	ldr	r1, [pc, #32]	; (8009634 <UARTEx_SetNbDataToProcess+0x98>)
 8009614:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009616:	fb93 f3f2 	sdiv	r3, r3, r2
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009622:	bf00      	nop
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	08027b1c 	.word	0x08027b1c
 8009634:	08027b24 	.word	0x08027b24

08009638 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	6812      	ldr	r2, [r2, #0]
 8009650:	f023 0101 	bic.w	r1, r3, #1
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	2b08      	cmp	r3, #8
 8009660:	d102      	bne.n	8009668 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009662:	2340      	movs	r3, #64	; 0x40
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	e001      	b.n	800966c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009668:	2300      	movs	r3, #0
 800966a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009678:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800967e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009684:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800968a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009690:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009696:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800969c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80096a2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80096a8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80096ae:	4313      	orrs	r3, r2
 80096b0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80096da:	4b3e      	ldr	r3, [pc, #248]	; (80097d4 <FMC_NORSRAM_Init+0x19c>)
 80096dc:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096e4:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096ec:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80096f4:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80096fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	43db      	mvns	r3, r3
 800970c:	ea02 0103 	and.w	r1, r2, r3
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	4319      	orrs	r1, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009726:	d10c      	bne.n	8009742 <FMC_NORSRAM_Init+0x10a>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d008      	beq.n	8009742 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973c:	431a      	orrs	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d006      	beq.n	8009758 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800975e:	2b01      	cmp	r3, #1
 8009760:	d12f      	bne.n	80097c2 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	0c1b      	lsrs	r3, r3, #16
 8009768:	041b      	lsls	r3, r3, #16
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b04      	cmp	r3, #4
 800977a:	d014      	beq.n	80097a6 <FMC_NORSRAM_Init+0x16e>
 800977c:	2b04      	cmp	r3, #4
 800977e:	d819      	bhi.n	80097b4 <FMC_NORSRAM_Init+0x17c>
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <FMC_NORSRAM_Init+0x152>
 8009784:	2b02      	cmp	r3, #2
 8009786:	d007      	beq.n	8009798 <FMC_NORSRAM_Init+0x160>
 8009788:	e014      	b.n	80097b4 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	621a      	str	r2, [r3, #32]
        break;
 8009796:	e015      	b.n	80097c4 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a1b      	ldr	r3, [r3, #32]
 800979c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	621a      	str	r2, [r3, #32]
        break;
 80097a4:	e00e      	b.n	80097c4 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	621a      	str	r2, [r3, #32]
        break;
 80097b2:	e007      	b.n	80097c4 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	621a      	str	r2, [r3, #32]
        break;
 80097c0:	e000      	b.n	80097c4 <FMC_NORSRAM_Init+0x18c>
    }
  }
 80097c2:	bf00      	nop

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	0008fb7f 	.word	0x0008fb7f

080097d8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80097d8:	b480      	push	{r7}
 80097da:	b087      	sub	sp, #28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	431a      	orrs	r2, r3
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	021b      	lsls	r3, r3, #8
 8009800:	431a      	orrs	r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	079b      	lsls	r3, r3, #30
 8009808:	431a      	orrs	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	041b      	lsls	r3, r3, #16
 8009810:	431a      	orrs	r2, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	3b01      	subs	r3, #1
 8009818:	051b      	lsls	r3, r3, #20
 800981a:	431a      	orrs	r2, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	3b02      	subs	r3, #2
 8009822:	061b      	lsls	r3, r3, #24
 8009824:	ea42 0103 	orr.w	r1, r2, r3
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	3201      	adds	r2, #1
 8009830:	4319      	orrs	r1, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009844:	d113      	bne.n	800986e <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800984e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	3b01      	subs	r3, #1
 8009856:	051b      	lsls	r3, r3, #20
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	4313      	orrs	r3, r2
 800985c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	431a      	orrs	r2, r3
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	371c      	adds	r7, #28
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009890:	d121      	bne.n	80098d6 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989a:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	6819      	ldr	r1, [r3, #0]
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	4319      	orrs	r1, r3
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	021b      	lsls	r3, r3, #8
 80098b0:	4319      	orrs	r1, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	079b      	lsls	r3, r3, #30
 80098b8:	4319      	orrs	r1, r3
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	4319      	orrs	r1, r3
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	041b      	lsls	r3, r3, #16
 80098c6:	430b      	orrs	r3, r1
 80098c8:	ea42 0103 	orr.w	r1, r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80098d4:	e005      	b.n	80098e2 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80098de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b08b      	sub	sp, #44	; 0x2c
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	fa93 f3a3 	rbit	r3, r3
 800990a:	613b      	str	r3, [r7, #16]
  return result;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009916:	2320      	movs	r3, #32
 8009918:	e003      	b.n	8009922 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	fab3 f383 	clz	r3, r3
 8009920:	b2db      	uxtb	r3, r3
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	2103      	movs	r1, #3
 8009926:	fa01 f303 	lsl.w	r3, r1, r3
 800992a:	43db      	mvns	r3, r3
 800992c:	401a      	ands	r2, r3
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	fa93 f3a3 	rbit	r3, r3
 8009938:	61fb      	str	r3, [r7, #28]
  return result;
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009944:	2320      	movs	r3, #32
 8009946:	e003      	b.n	8009950 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	fab3 f383 	clz	r3, r3
 800994e:	b2db      	uxtb	r3, r3
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	fa01 f303 	lsl.w	r3, r1, r3
 8009958:	431a      	orrs	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	601a      	str	r2, [r3, #0]
}
 800995e:	bf00      	nop
 8009960:	372c      	adds	r7, #44	; 0x2c
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800996a:	b480      	push	{r7}
 800996c:	b085      	sub	sp, #20
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	43db      	mvns	r3, r3
 800997e:	401a      	ands	r2, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	431a      	orrs	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	605a      	str	r2, [r3, #4]
}
 800998e:	bf00      	nop
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800999a:	b480      	push	{r7}
 800999c:	b08b      	sub	sp, #44	; 0x2c
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	fa93 f3a3 	rbit	r3, r3
 80099b4:	613b      	str	r3, [r7, #16]
  return result;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80099c0:	2320      	movs	r3, #32
 80099c2:	e003      	b.n	80099cc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	fab3 f383 	clz	r3, r3
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	005b      	lsls	r3, r3, #1
 80099ce:	2103      	movs	r1, #3
 80099d0:	fa01 f303 	lsl.w	r3, r1, r3
 80099d4:	43db      	mvns	r3, r3
 80099d6:	401a      	ands	r2, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	fa93 f3a3 	rbit	r3, r3
 80099e2:	61fb      	str	r3, [r7, #28]
  return result;
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80099ee:	2320      	movs	r3, #32
 80099f0:	e003      	b.n	80099fa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	fab3 f383 	clz	r3, r3
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009a02:	431a      	orrs	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009a08:	bf00      	nop
 8009a0a:	372c      	adds	r7, #44	; 0x2c
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b08b      	sub	sp, #44	; 0x2c
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	fa93 f3a3 	rbit	r3, r3
 8009a2e:	613b      	str	r3, [r7, #16]
  return result;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009a3a:	2320      	movs	r3, #32
 8009a3c:	e003      	b.n	8009a46 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	fab3 f383 	clz	r3, r3
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	2103      	movs	r1, #3
 8009a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a4e:	43db      	mvns	r3, r3
 8009a50:	401a      	ands	r2, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	fa93 f3a3 	rbit	r3, r3
 8009a5c:	61fb      	str	r3, [r7, #28]
  return result;
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009a68:	2320      	movs	r3, #32
 8009a6a:	e003      	b.n	8009a74 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	fab3 f383 	clz	r3, r3
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	fa01 f303 	lsl.w	r3, r1, r3
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	60da      	str	r2, [r3, #12]
}
 8009a82:	bf00      	nop
 8009a84:	372c      	adds	r7, #44	; 0x2c
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b08b      	sub	sp, #44	; 0x2c
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	60b9      	str	r1, [r7, #8]
 8009a98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a1a      	ldr	r2, [r3, #32]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	fa93 f3a3 	rbit	r3, r3
 8009aa8:	613b      	str	r3, [r7, #16]
  return result;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009ab4:	2320      	movs	r3, #32
 8009ab6:	e003      	b.n	8009ac0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	fab3 f383 	clz	r3, r3
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	210f      	movs	r1, #15
 8009ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	401a      	ands	r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	fa93 f3a3 	rbit	r3, r3
 8009ad6:	61fb      	str	r3, [r7, #28]
  return result;
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009ae2:	2320      	movs	r3, #32
 8009ae4:	e003      	b.n	8009aee <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	fab3 f383 	clz	r3, r3
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	fa01 f303 	lsl.w	r3, r1, r3
 8009af6:	431a      	orrs	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009afc:	bf00      	nop
 8009afe:	372c      	adds	r7, #44	; 0x2c
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b08b      	sub	sp, #44	; 0x2c
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	0a1b      	lsrs	r3, r3, #8
 8009b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	fa93 f3a3 	rbit	r3, r3
 8009b24:	613b      	str	r3, [r7, #16]
  return result;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009b30:	2320      	movs	r3, #32
 8009b32:	e003      	b.n	8009b3c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	fab3 f383 	clz	r3, r3
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	210f      	movs	r1, #15
 8009b40:	fa01 f303 	lsl.w	r3, r1, r3
 8009b44:	43db      	mvns	r3, r3
 8009b46:	401a      	ands	r2, r3
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	0a1b      	lsrs	r3, r3, #8
 8009b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	fa93 f3a3 	rbit	r3, r3
 8009b54:	61fb      	str	r3, [r7, #28]
  return result;
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009b60:	2320      	movs	r3, #32
 8009b62:	e003      	b.n	8009b6c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	fab3 f383 	clz	r3, r3
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	fa01 f303 	lsl.w	r3, r1, r3
 8009b74:	431a      	orrs	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009b7a:	bf00      	nop
 8009b7c:	372c      	adds	r7, #44	; 0x2c
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b08a      	sub	sp, #40	; 0x28
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	fa93 f3a3 	rbit	r3, r3
 8009b9c:	617b      	str	r3, [r7, #20]
  return result;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <LL_GPIO_Init+0x26>
    return 32U;
 8009ba8:	2320      	movs	r3, #32
 8009baa:	e003      	b.n	8009bb4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	fab3 f383 	clz	r3, r3
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009bb6:	e050      	b.n	8009c5a <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d042      	beq.n	8009c54 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	6a39      	ldr	r1, [r7, #32]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff fe8a 	bl	80098f0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d003      	beq.n	8009bec <LL_GPIO_Init+0x66>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d106      	bne.n	8009bfa <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	6a39      	ldr	r1, [r7, #32]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff fed0 	bl	800999a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	6a39      	ldr	r1, [r7, #32]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff ff06 	bl	8009a14 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d121      	bne.n	8009c54 <LL_GPIO_Init+0xce>
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	fa93 f3a3 	rbit	r3, r3
 8009c1a:	60bb      	str	r3, [r7, #8]
  return result;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <LL_GPIO_Init+0xa4>
    return 32U;
 8009c26:	2320      	movs	r3, #32
 8009c28:	e003      	b.n	8009c32 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	fab3 f383 	clz	r3, r3
 8009c30:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009c32:	2b07      	cmp	r3, #7
 8009c34:	d807      	bhi.n	8009c46 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	6a39      	ldr	r1, [r7, #32]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff ff25 	bl	8009a8e <LL_GPIO_SetAFPin_0_7>
 8009c44:	e006      	b.n	8009c54 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	6a39      	ldr	r1, [r7, #32]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff ff5a 	bl	8009b08 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	3301      	adds	r3, #1
 8009c58:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	fa22 f303 	lsr.w	r3, r2, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1a7      	bne.n	8009bb8 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d003      	beq.n	8009c78 <LL_GPIO_Init+0xf2>
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d107      	bne.n	8009c88 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	6819      	ldr	r1, [r3, #0]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7ff fe71 	bl	800996a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3728      	adds	r7, #40	; 0x28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c92:	b084      	sub	sp, #16
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	f107 001c 	add.w	r0, r7, #28
 8009ca0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fd8f 	bl	800a7d4 <USB_CoreReset>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d106      	bne.n	8009cce <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	639a      	str	r2, [r3, #56]	; 0x38
 8009ccc:	e005      	b.n	8009cda <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ce6:	b004      	add	sp, #16
 8009ce8:	4770      	bx	lr
	...

08009cec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009cfa:	79fb      	ldrb	r3, [r7, #7]
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d165      	bne.n	8009dcc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4a41      	ldr	r2, [pc, #260]	; (8009e08 <USB_SetTurnaroundTime+0x11c>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d906      	bls.n	8009d16 <USB_SetTurnaroundTime+0x2a>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	4a40      	ldr	r2, [pc, #256]	; (8009e0c <USB_SetTurnaroundTime+0x120>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d202      	bcs.n	8009d16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009d10:	230f      	movs	r3, #15
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e062      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4a3c      	ldr	r2, [pc, #240]	; (8009e0c <USB_SetTurnaroundTime+0x120>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d306      	bcc.n	8009d2c <USB_SetTurnaroundTime+0x40>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	4a3b      	ldr	r2, [pc, #236]	; (8009e10 <USB_SetTurnaroundTime+0x124>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d202      	bcs.n	8009d2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009d26:	230e      	movs	r3, #14
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	e057      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4a38      	ldr	r2, [pc, #224]	; (8009e10 <USB_SetTurnaroundTime+0x124>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d306      	bcc.n	8009d42 <USB_SetTurnaroundTime+0x56>
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4a37      	ldr	r2, [pc, #220]	; (8009e14 <USB_SetTurnaroundTime+0x128>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d202      	bcs.n	8009d42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009d3c:	230d      	movs	r3, #13
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	e04c      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	4a33      	ldr	r2, [pc, #204]	; (8009e14 <USB_SetTurnaroundTime+0x128>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d306      	bcc.n	8009d58 <USB_SetTurnaroundTime+0x6c>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	4a32      	ldr	r2, [pc, #200]	; (8009e18 <USB_SetTurnaroundTime+0x12c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d802      	bhi.n	8009d58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009d52:	230c      	movs	r3, #12
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	e041      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	4a2f      	ldr	r2, [pc, #188]	; (8009e18 <USB_SetTurnaroundTime+0x12c>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d906      	bls.n	8009d6e <USB_SetTurnaroundTime+0x82>
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4a2e      	ldr	r2, [pc, #184]	; (8009e1c <USB_SetTurnaroundTime+0x130>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d802      	bhi.n	8009d6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009d68:	230b      	movs	r3, #11
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e036      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	4a2a      	ldr	r2, [pc, #168]	; (8009e1c <USB_SetTurnaroundTime+0x130>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d906      	bls.n	8009d84 <USB_SetTurnaroundTime+0x98>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	4a29      	ldr	r2, [pc, #164]	; (8009e20 <USB_SetTurnaroundTime+0x134>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d802      	bhi.n	8009d84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009d7e:	230a      	movs	r3, #10
 8009d80:	617b      	str	r3, [r7, #20]
 8009d82:	e02b      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	4a26      	ldr	r2, [pc, #152]	; (8009e20 <USB_SetTurnaroundTime+0x134>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d906      	bls.n	8009d9a <USB_SetTurnaroundTime+0xae>
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4a25      	ldr	r2, [pc, #148]	; (8009e24 <USB_SetTurnaroundTime+0x138>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d202      	bcs.n	8009d9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009d94:	2309      	movs	r3, #9
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	e020      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4a21      	ldr	r2, [pc, #132]	; (8009e24 <USB_SetTurnaroundTime+0x138>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d306      	bcc.n	8009db0 <USB_SetTurnaroundTime+0xc4>
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	4a20      	ldr	r2, [pc, #128]	; (8009e28 <USB_SetTurnaroundTime+0x13c>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d802      	bhi.n	8009db0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009daa:	2308      	movs	r3, #8
 8009dac:	617b      	str	r3, [r7, #20]
 8009dae:	e015      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	4a1d      	ldr	r2, [pc, #116]	; (8009e28 <USB_SetTurnaroundTime+0x13c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d906      	bls.n	8009dc6 <USB_SetTurnaroundTime+0xda>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	4a1c      	ldr	r2, [pc, #112]	; (8009e2c <USB_SetTurnaroundTime+0x140>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d202      	bcs.n	8009dc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009dc0:	2307      	movs	r3, #7
 8009dc2:	617b      	str	r3, [r7, #20]
 8009dc4:	e00a      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009dc6:	2306      	movs	r3, #6
 8009dc8:	617b      	str	r3, [r7, #20]
 8009dca:	e007      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d102      	bne.n	8009dd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009dd2:	2309      	movs	r3, #9
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	e001      	b.n	8009ddc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009dd8:	2309      	movs	r3, #9
 8009dda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	68da      	ldr	r2, [r3, #12]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	029b      	lsls	r3, r3, #10
 8009df0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009df4:	431a      	orrs	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	371c      	adds	r7, #28
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	00d8acbf 	.word	0x00d8acbf
 8009e0c:	00e4e1c0 	.word	0x00e4e1c0
 8009e10:	00f42400 	.word	0x00f42400
 8009e14:	01067380 	.word	0x01067380
 8009e18:	011a499f 	.word	0x011a499f
 8009e1c:	01312cff 	.word	0x01312cff
 8009e20:	014ca43f 	.word	0x014ca43f
 8009e24:	016e3600 	.word	0x016e3600
 8009e28:	01a6ab1f 	.word	0x01a6ab1f
 8009e2c:	01e84800 	.word	0x01e84800

08009e30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f023 0201 	bic.w	r2, r3, #1
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d115      	bne.n	8009ea0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e80:	2001      	movs	r0, #1
 8009e82:	f7f8 f91d 	bl	80020c0 <HAL_Delay>
      ms++;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fc11 	bl	800a6b4 <USB_GetMode>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d01e      	beq.n	8009ed6 <USB_SetCurrentMode+0x84>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b31      	cmp	r3, #49	; 0x31
 8009e9c:	d9f0      	bls.n	8009e80 <USB_SetCurrentMode+0x2e>
 8009e9e:	e01a      	b.n	8009ed6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d115      	bne.n	8009ed2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	f7f8 f904 	bl	80020c0 <HAL_Delay>
      ms++;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fbf8 	bl	800a6b4 <USB_GetMode>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d005      	beq.n	8009ed6 <USB_SetCurrentMode+0x84>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b31      	cmp	r3, #49	; 0x31
 8009ece:	d9f0      	bls.n	8009eb2 <USB_SetCurrentMode+0x60>
 8009ed0:	e001      	b.n	8009ed6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e005      	b.n	8009ee2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b32      	cmp	r3, #50	; 0x32
 8009eda:	d101      	bne.n	8009ee0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e000      	b.n	8009ee2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009eec:	b084      	sub	sp, #16
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b086      	sub	sp, #24
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f06:	2300      	movs	r3, #0
 8009f08:	613b      	str	r3, [r7, #16]
 8009f0a:	e009      	b.n	8009f20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	3340      	adds	r3, #64	; 0x40
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	2200      	movs	r2, #0
 8009f18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	613b      	str	r3, [r7, #16]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b0e      	cmp	r3, #14
 8009f24:	d9f2      	bls.n	8009f0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d11c      	bne.n	8009f66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f3a:	f043 0302 	orr.w	r3, r3, #2
 8009f3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	e005      	b.n	8009f72 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f78:	461a      	mov	r2, r3
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f84:	4619      	mov	r1, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	680b      	ldr	r3, [r1, #0]
 8009f90:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f92:	2103      	movs	r1, #3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f95b 	bl	800a250 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f9a:	2110      	movs	r1, #16
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f8f3 	bl	800a188 <USB_FlushTxFifo>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f91f 	bl	800a1f0 <USB_FlushRxFifo>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fce:	461a      	mov	r2, r3
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fda:	461a      	mov	r2, r3
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	613b      	str	r3, [r7, #16]
 8009fe4:	e043      	b.n	800a06e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ffc:	d118      	bne.n	800a030 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10a      	bne.n	800a01a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a010:	461a      	mov	r2, r3
 800a012:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	e013      	b.n	800a042 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a026:	461a      	mov	r2, r3
 800a028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	e008      	b.n	800a042 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03c:	461a      	mov	r2, r3
 800a03e:	2300      	movs	r3, #0
 800a040:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04e:	461a      	mov	r2, r3
 800a050:	2300      	movs	r3, #0
 800a052:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a060:	461a      	mov	r2, r3
 800a062:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a066:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	3301      	adds	r3, #1
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	429a      	cmp	r2, r3
 800a074:	d3b7      	bcc.n	8009fe6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a076:	2300      	movs	r3, #0
 800a078:	613b      	str	r3, [r7, #16]
 800a07a:	e043      	b.n	800a104 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a08e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a092:	d118      	bne.n	800a0c6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10a      	bne.n	800a0b0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	e013      	b.n	800a0d8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	e008      	b.n	800a0d8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	015a      	lsls	r2, r3, #5
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	3301      	adds	r3, #1
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d3b7      	bcc.n	800a07c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a11a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a11e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a12c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	2b00      	cmp	r3, #0
 800a132:	d105      	bne.n	800a140 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	f043 0210 	orr.w	r2, r3, #16
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	699a      	ldr	r2, [r3, #24]
 800a144:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <USB_DevInit+0x298>)
 800a146:	4313      	orrs	r3, r2
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d005      	beq.n	800a15e <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	f043 0208 	orr.w	r2, r3, #8
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a160:	2b01      	cmp	r3, #1
 800a162:	d107      	bne.n	800a174 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a16c:	f043 0304 	orr.w	r3, r3, #4
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a174:	7dfb      	ldrb	r3, [r7, #23]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a180:	b004      	add	sp, #16
 800a182:	4770      	bx	lr
 800a184:	803c3800 	.word	0x803c3800

0800a188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3301      	adds	r3, #1
 800a19a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4a13      	ldr	r2, [pc, #76]	; (800a1ec <USB_FlushTxFifo+0x64>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d901      	bls.n	800a1a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e01b      	b.n	800a1e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	daf2      	bge.n	800a196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	019b      	lsls	r3, r3, #6
 800a1b8:	f043 0220 	orr.w	r2, r3, #32
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4a08      	ldr	r2, [pc, #32]	; (800a1ec <USB_FlushTxFifo+0x64>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d901      	bls.n	800a1d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e006      	b.n	800a1e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	f003 0320 	and.w	r3, r3, #32
 800a1da:	2b20      	cmp	r3, #32
 800a1dc:	d0f0      	beq.n	800a1c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	00030d40 	.word	0x00030d40

0800a1f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3301      	adds	r3, #1
 800a200:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4a11      	ldr	r2, [pc, #68]	; (800a24c <USB_FlushRxFifo+0x5c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d901      	bls.n	800a20e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e018      	b.n	800a240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	daf2      	bge.n	800a1fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2210      	movs	r2, #16
 800a21e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	3301      	adds	r3, #1
 800a224:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4a08      	ldr	r2, [pc, #32]	; (800a24c <USB_FlushRxFifo+0x5c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d901      	bls.n	800a232 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e006      	b.n	800a240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	f003 0310 	and.w	r3, r3, #16
 800a23a:	2b10      	cmp	r3, #16
 800a23c:	d0f0      	beq.n	800a220 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	00030d40 	.word	0x00030d40

0800a250 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	68f9      	ldr	r1, [r7, #12]
 800a26c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a270:	4313      	orrs	r3, r2
 800a272:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a282:	b480      	push	{r7}
 800a284:	b087      	sub	sp, #28
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 0306 	and.w	r3, r3, #6
 800a29a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d102      	bne.n	800a2a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	75fb      	strb	r3, [r7, #23]
 800a2a6:	e00a      	b.n	800a2be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d002      	beq.n	800a2b4 <USB_GetDevSpeed+0x32>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b06      	cmp	r3, #6
 800a2b2:	d102      	bne.n	800a2ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	75fb      	strb	r3, [r7, #23]
 800a2b8:	e001      	b.n	800a2be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a2ba:	230f      	movs	r3, #15
 800a2bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	785b      	ldrb	r3, [r3, #1]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d14a      	bne.n	800a380 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a302:	f040 8086 	bne.w	800a412 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	7812      	ldrb	r2, [r2, #0]
 800a31a:	0151      	lsls	r1, r2, #5
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	440a      	add	r2, r1
 800a320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a324:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a328:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	4413      	add	r3, r2
 800a334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	7812      	ldrb	r2, [r2, #0]
 800a33e:	0151      	lsls	r1, r2, #5
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	440a      	add	r2, r1
 800a344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a34c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f242 7210 	movw	r2, #10000	; 0x2710
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d902      	bls.n	800a364 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	75fb      	strb	r3, [r7, #23]
          break;
 800a362:	e056      	b.n	800a412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a37c:	d0e7      	beq.n	800a34e <USB_EPStopXfer+0x82>
 800a37e:	e048      	b.n	800a412 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a398:	d13b      	bne.n	800a412 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	7812      	ldrb	r2, [r2, #0]
 800a3ae:	0151      	lsls	r1, r2, #5
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	440a      	add	r2, r1
 800a3b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	7812      	ldrb	r2, [r2, #0]
 800a3d2:	0151      	lsls	r1, r2, #5
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	440a      	add	r2, r1
 800a3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f242 7210 	movw	r2, #10000	; 0x2710
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d902      	bls.n	800a3f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	75fb      	strb	r3, [r7, #23]
          break;
 800a3f6:	e00c      	b.n	800a412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	015a      	lsls	r2, r3, #5
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	4413      	add	r3, r2
 800a402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a40c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a410:	d0e7      	beq.n	800a3e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a412:	7dfb      	ldrb	r3, [r7, #23]
}
 800a414:	4618      	mov	r0, r3
 800a416:	371c      	adds	r7, #28
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a420:	b480      	push	{r7}
 800a422:	b089      	sub	sp, #36	; 0x24
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	4611      	mov	r1, r2
 800a42c:	461a      	mov	r2, r3
 800a42e:	460b      	mov	r3, r1
 800a430:	71fb      	strb	r3, [r7, #7]
 800a432:	4613      	mov	r3, r2
 800a434:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a43e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a442:	2b00      	cmp	r3, #0
 800a444:	d123      	bne.n	800a48e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a446:	88bb      	ldrh	r3, [r7, #4]
 800a448:	3303      	adds	r3, #3
 800a44a:	089b      	lsrs	r3, r3, #2
 800a44c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a44e:	2300      	movs	r3, #0
 800a450:	61bb      	str	r3, [r7, #24]
 800a452:	e018      	b.n	800a486 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	031a      	lsls	r2, r3, #12
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a460:	461a      	mov	r2, r3
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	3301      	adds	r3, #1
 800a46c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	3301      	adds	r3, #1
 800a472:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	3301      	adds	r3, #1
 800a478:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	3301      	adds	r3, #1
 800a47e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	3301      	adds	r3, #1
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d3e2      	bcc.n	800a454 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3724      	adds	r7, #36	; 0x24
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b08b      	sub	sp, #44	; 0x2c
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a4b2:	88fb      	ldrh	r3, [r7, #6]
 800a4b4:	089b      	lsrs	r3, r3, #2
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a4ba:	88fb      	ldrh	r3, [r7, #6]
 800a4bc:	f003 0303 	and.w	r3, r3, #3
 800a4c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	623b      	str	r3, [r7, #32]
 800a4c6:	e014      	b.n	800a4f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	3301      	adds	r3, #1
 800a4de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	623b      	str	r3, [r7, #32]
 800a4f2:	6a3a      	ldr	r2, [r7, #32]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d3e6      	bcc.n	800a4c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a4fa:	8bfb      	ldrh	r3, [r7, #30]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01e      	beq.n	800a53e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a50a:	461a      	mov	r2, r3
 800a50c:	f107 0310 	add.w	r3, r7, #16
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	fa22 f303 	lsr.w	r3, r2, r3
 800a520:	b2da      	uxtb	r2, r3
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	701a      	strb	r2, [r3, #0]
      i++;
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	3301      	adds	r3, #1
 800a52a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	3301      	adds	r3, #1
 800a530:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a532:	8bfb      	ldrh	r3, [r7, #30]
 800a534:	3b01      	subs	r3, #1
 800a536:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a538:	8bfb      	ldrh	r3, [r7, #30]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1ea      	bne.n	800a514 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a540:	4618      	mov	r0, r3
 800a542:	372c      	adds	r7, #44	; 0x2c
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a566:	f023 0303 	bic.w	r3, r3, #3
 800a56a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a57a:	f043 0302 	orr.w	r3, r3, #2
 800a57e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a58e:	b480      	push	{r7}
 800a590:	b085      	sub	sp, #20
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	0c1b      	lsrs	r3, r3, #16
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3714      	adds	r7, #20
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	4013      	ands	r3, r2
 800a60a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	b29b      	uxth	r3, r3
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a62c:	78fb      	ldrb	r3, [r7, #3]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	4013      	ands	r3, r2
 800a648:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a64a:	68bb      	ldr	r3, [r7, #8]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a67c:	78fb      	ldrb	r3, [r7, #3]
 800a67e:	f003 030f 	and.w	r3, r3, #15
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	fa22 f303 	lsr.w	r3, r2, r3
 800a688:	01db      	lsls	r3, r3, #7
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	4313      	orrs	r3, r2
 800a690:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	015a      	lsls	r2, r3, #5
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	f003 0301 	and.w	r3, r3, #1
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a6ee:	f023 0307 	bic.w	r3, r3, #7
 800a6f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a706:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
	...

0800a718 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	460b      	mov	r3, r1
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	333c      	adds	r3, #60	; 0x3c
 800a72e:	3304      	adds	r3, #4
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	4a26      	ldr	r2, [pc, #152]	; (800a7d0 <USB_EP0_OutStart+0xb8>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d90a      	bls.n	800a752 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a74c:	d101      	bne.n	800a752 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	e037      	b.n	800a7c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a758:	461a      	mov	r2, r3
 800a75a:	2300      	movs	r3, #0
 800a75c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a76c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a780:	f043 0318 	orr.w	r3, r3, #24
 800a784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a794:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a798:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a79a:	7afb      	ldrb	r3, [r7, #11]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d10f      	bne.n	800a7c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a7be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	4f54300a 	.word	0x4f54300a

0800a7d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4a13      	ldr	r2, [pc, #76]	; (800a838 <USB_CoreReset+0x64>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d901      	bls.n	800a7f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e01b      	b.n	800a82a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	daf2      	bge.n	800a7e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	f043 0201 	orr.w	r2, r3, #1
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3301      	adds	r3, #1
 800a80e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	4a09      	ldr	r2, [pc, #36]	; (800a838 <USB_CoreReset+0x64>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d901      	bls.n	800a81c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e006      	b.n	800a82a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b01      	cmp	r3, #1
 800a826:	d0f0      	beq.n	800a80a <USB_CoreReset+0x36>

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	00030d40 	.word	0x00030d40

0800a83c <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b096      	sub	sp, #88	; 0x58
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	3303      	adds	r3, #3
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a854:	f3ef 8310 	mrs	r3, PRIMASK
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800a85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800a85c:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800a85e:	b672      	cpsid	i
#endif
    return(int_posture);
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800a862:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a864:	4b55      	ldr	r3, [pc, #340]	; (800a9bc <_tx_byte_allocate+0x180>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800a86a:	2300      	movs	r3, #0
 800a86c:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a872:	621a      	str	r2, [r3, #32]
 800a874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a876:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	f383 8810 	msr	PRIMASK, r3
}
 800a87e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800a880:	6879      	ldr	r1, [r7, #4]
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 f9b2 	bl	800abec <_tx_byte_pool_search>
 800a888:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a88a:	f3ef 8310 	mrs	r3, PRIMASK
 800a88e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a892:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a894:	b672      	cpsid	i
    return(int_posture);
 800a896:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800a898:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800a89a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8a4:	e006      	b.n	800a8b4 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d101      	bne.n	800a8b4 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800a8b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0d9      	beq.n	800a86e <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8be:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800a8c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d008      	beq.n	800a8d8 <_tx_byte_allocate+0x9c>
 800a8c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8c8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	f383 8810 	msr	PRIMASK, r3
}
 800a8d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	653b      	str	r3, [r7, #80]	; 0x50
 800a8d6:	e06c      	b.n	800a9b2 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d061      	beq.n	800a9a2 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800a8de:	4b38      	ldr	r3, [pc, #224]	; (800a9c0 <_tx_byte_allocate+0x184>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d007      	beq.n	800a8f6 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800a8e6:	2310      	movs	r3, #16
 800a8e8:	653b      	str	r3, [r7, #80]	; 0x50
 800a8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	f383 8810 	msr	PRIMASK, r3
}
 800a8f4:	e05d      	b.n	800a9b2 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800a8f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8f8:	4a32      	ldr	r2, [pc, #200]	; (800a9c4 <_tx_byte_allocate+0x188>)
 800a8fa:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800a8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800a902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800a908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800a90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a910:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a918:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a920:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800a92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d109      	bne.n	800a946 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a936:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800a938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a93a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a93c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800a93e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a942:	675a      	str	r2, [r3, #116]	; 0x74
 800a944:	e011      	b.n	800a96a <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a94c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a94e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a950:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a956:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a95a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a95c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a962:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a968:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800a96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a96c:	2209      	movs	r2, #9
 800a96e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a972:	2201      	movs	r2, #1
 800a974:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800a97c:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <_tx_byte_allocate+0x184>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	4a0f      	ldr	r2, [pc, #60]	; (800a9c0 <_tx_byte_allocate+0x184>)
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a988:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	f383 8810 	msr	PRIMASK, r3
}
 800a990:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a992:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a994:	f001 f9d6 	bl	800bd44 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800a998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a99a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a99e:	653b      	str	r3, [r7, #80]	; 0x50
 800a9a0:	e007      	b.n	800a9b2 <_tx_byte_allocate+0x176>
 800a9a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f383 8810 	msr	PRIMASK, r3
}
 800a9ac:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800a9ae:	2310      	movs	r3, #16
 800a9b0:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800a9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3758      	adds	r7, #88	; 0x58
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	2004cd18 	.word	0x2004cd18
 800a9c0:	2004cdb0 	.word	0x2004cdb0
 800a9c4:	0800a9c9 	.word	0x0800a9c9

0800a9c8 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08e      	sub	sp, #56	; 0x38
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a9d6:	623b      	str	r3, [r7, #32]
    return(posture);
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a9da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9dc:	b672      	cpsid	i
    return(int_posture);
 800a9de:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800a9e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9e6:	4a33      	ldr	r2, [pc, #204]	; (800aab4 <_tx_byte_pool_cleanup+0xec>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d158      	bne.n	800aa9e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d152      	bne.n	800aa9e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9fc:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d04c      	beq.n	800aa9e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a2b      	ldr	r2, [pc, #172]	; (800aab8 <_tx_byte_pool_cleanup+0xf0>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d147      	bne.n	800aa9e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d043      	beq.n	800aa9e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	1e5a      	subs	r2, r3, #1
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d103      	bne.n	800aa3a <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	2200      	movs	r2, #0
 800aa36:	625a      	str	r2, [r3, #36]	; 0x24
 800aa38:	e013      	b.n	800aa62 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa44:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa50:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d102      	bne.n	800aa62 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa60:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa66:	2b09      	cmp	r3, #9
 800aa68:	d119      	bne.n	800aa9e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2210      	movs	r2, #16
 800aa6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800aa72:	4b12      	ldr	r3, [pc, #72]	; (800aabc <_tx_byte_pool_cleanup+0xf4>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	4a10      	ldr	r2, [pc, #64]	; (800aabc <_tx_byte_pool_cleanup+0xf4>)
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	f383 8810 	msr	PRIMASK, r3
}
 800aa86:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 f85b 	bl	800bb44 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa8e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa92:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aa94:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aa96:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa98:	b672      	cpsid	i
    return(int_posture);
 800aa9a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f383 8810 	msr	PRIMASK, r3
}
 800aaa8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800aaaa:	bf00      	nop
 800aaac:	3738      	adds	r7, #56	; 0x38
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	0800a9c9 	.word	0x0800a9c9
 800aab8:	42595445 	.word	0x42595445
 800aabc:	2004cdb0 	.word	0x2004cdb0

0800aac0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b08e      	sub	sp, #56	; 0x38
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800aace:	2234      	movs	r2, #52	; 0x34
 800aad0:	2100      	movs	r1, #0
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f01a ff49 	bl	802596a <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	f023 0303 	bic.w	r3, r3, #3
 800aade:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	f1a3 0208 	sub.w	r2, r3, #8
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800ab12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	4413      	add	r3, r2
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800ab1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1c:	3b04      	subs	r3, #4
 800ab1e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ab24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab2c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800ab2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab30:	3b04      	subs	r3, #4
 800ab32:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ab34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab36:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab4a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800ab50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab52:	3304      	adds	r3, #4
 800ab54:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	4a1f      	ldr	r2, [pc, #124]	; (800abdc <_tx_byte_pool_create+0x11c>)
 800ab5e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab66:	f3ef 8310 	mrs	r3, PRIMASK
 800ab6a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ab6c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ab6e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab70:	b672      	cpsid	i
    return(int_posture);
 800ab72:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800ab74:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	4a19      	ldr	r2, [pc, #100]	; (800abe0 <_tx_byte_pool_create+0x120>)
 800ab7a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800ab7c:	4b19      	ldr	r3, [pc, #100]	; (800abe4 <_tx_byte_pool_create+0x124>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d109      	bne.n	800ab98 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800ab84:	4a18      	ldr	r2, [pc, #96]	; (800abe8 <_tx_byte_pool_create+0x128>)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	631a      	str	r2, [r3, #48]	; 0x30
 800ab96:	e011      	b.n	800abbc <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800ab98:	4b13      	ldr	r3, [pc, #76]	; (800abe8 <_tx_byte_pool_create+0x128>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba2:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	69fa      	ldr	r2, [r7, #28]
 800abb4:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6a3a      	ldr	r2, [r7, #32]
 800abba:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800abbc:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <_tx_byte_pool_create+0x124>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3301      	adds	r3, #1
 800abc2:	4a08      	ldr	r2, [pc, #32]	; (800abe4 <_tx_byte_pool_create+0x124>)
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f383 8810 	msr	PRIMASK, r3
}
 800abd0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3738      	adds	r7, #56	; 0x38
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	ffffeeee 	.word	0xffffeeee
 800abe0:	42595445 	.word	0x42595445
 800abe4:	2004cd0c 	.word	0x2004cd0c
 800abe8:	2004cd08 	.word	0x2004cd08

0800abec <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800abec:	b480      	push	{r7}
 800abee:	b097      	sub	sp, #92	; 0x5c
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800abfa:	f3ef 8310 	mrs	r3, PRIMASK
 800abfe:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800ac02:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac04:	b672      	cpsid	i
    return(int_posture);
 800ac06:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800ac08:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	3b02      	subs	r3, #2
 800ac14:	00db      	lsls	r3, r3, #3
 800ac16:	4413      	add	r3, r2
 800ac18:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d308      	bcc.n	800ac34 <_tx_byte_pool_search+0x48>
 800ac22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac24:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	f383 8810 	msr	PRIMASK, r3
}
 800ac2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	653b      	str	r3, [r7, #80]	; 0x50
 800ac32:	e0dd      	b.n	800adf0 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800ac34:	4b72      	ldr	r3, [pc, #456]	; (800ae00 <_tx_byte_pool_search+0x214>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac3e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	695b      	ldr	r3, [r3, #20]
 800ac44:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800ac4e:	2300      	movs	r3, #0
 800ac50:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ac52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac54:	3304      	adds	r3, #4
 800ac56:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ac58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5a:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a68      	ldr	r2, [pc, #416]	; (800ae04 <_tx_byte_pool_search+0x218>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d143      	bne.n	800acee <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800ac66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d104      	bne.n	800ac76 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac70:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800ac72:	2301      	movs	r3, #1
 800ac74:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ac76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac78:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800ac80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ac88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac8a:	3b08      	subs	r3, #8
 800ac8c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800ac8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d257      	bcs.n	800ad46 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800ac96:	2300      	movs	r3, #0
 800ac98:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ac9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800aca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a56      	ldr	r2, [pc, #344]	; (800ae04 <_tx_byte_pool_search+0x218>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d113      	bne.n	800acd6 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800acb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	1e5a      	subs	r2, r3, #1
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acca:	429a      	cmp	r2, r3
 800accc:	d114      	bne.n	800acf8 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acd2:	615a      	str	r2, [r3, #20]
 800acd4:	e010      	b.n	800acf8 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800acd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd8:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800ace0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d008      	beq.n	800acf8 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800ace6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ace8:	3b01      	subs	r3, #1
 800acea:	64bb      	str	r3, [r7, #72]	; 0x48
 800acec:	e004      	b.n	800acf8 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800acee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf0:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800acf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800acf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800acfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad00:	3b01      	subs	r3, #1
 800ad02:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad06:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	f383 8810 	msr	PRIMASK, r3
}
 800ad0e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad10:	f3ef 8310 	mrs	r3, PRIMASK
 800ad14:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ad16:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ad18:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad1a:	b672      	cpsid	i
    return(int_posture);
 800ad1c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800ad1e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d009      	beq.n	800ad3e <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	3301      	adds	r3, #1
 800ad36:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad3c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800ad3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d186      	bne.n	800ac52 <_tx_byte_pool_search+0x66>
 800ad44:	e000      	b.n	800ad48 <_tx_byte_pool_search+0x15c>
                    break;
 800ad46:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800ad48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d048      	beq.n	800ade0 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800ad4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	2b13      	cmp	r3, #19
 800ad56:	d91e      	bls.n	800ad96 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad5e:	4413      	add	r3, r2
 800ad60:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ad62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad64:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ad66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad68:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad70:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ad72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad74:	3304      	adds	r3, #4
 800ad76:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ad78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7a:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7e:	4a21      	ldr	r2, [pc, #132]	; (800ae04 <_tx_byte_pool_search+0x218>)
 800ad80:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad90:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ad96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad98:	3304      	adds	r3, #4
 800ad9a:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9e:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ada0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	689a      	ldr	r2, [r3, #8]
 800adaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	f1a3 0208 	sub.w	r2, r3, #8
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	695b      	ldr	r3, [r3, #20]
 800adba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d105      	bne.n	800adcc <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800adc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adc2:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	615a      	str	r2, [r3, #20]
 800adcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f383 8810 	msr	PRIMASK, r3
}
 800add6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800add8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adda:	3308      	adds	r3, #8
 800addc:	653b      	str	r3, [r7, #80]	; 0x50
 800adde:	e007      	b.n	800adf0 <_tx_byte_pool_search+0x204>
 800ade0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ade2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f383 8810 	msr	PRIMASK, r3
}
 800adea:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800adec:	2300      	movs	r3, #0
 800adee:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800adf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	375c      	adds	r7, #92	; 0x5c
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	2004cd18 	.word	0x2004cd18
 800ae04:	ffffeeee 	.word	0xffffeeee

0800ae08 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800ae0c:	f000 fdd8 	bl	800b9c0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800ae10:	f001 f960 	bl	800c0d4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800ae14:	4b12      	ldr	r3, [pc, #72]	; (800ae60 <_tx_initialize_high_level+0x58>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	4b12      	ldr	r3, [pc, #72]	; (800ae64 <_tx_initialize_high_level+0x5c>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800ae20:	4b11      	ldr	r3, [pc, #68]	; (800ae68 <_tx_initialize_high_level+0x60>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	4b11      	ldr	r3, [pc, #68]	; (800ae6c <_tx_initialize_high_level+0x64>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800ae2c:	4b10      	ldr	r3, [pc, #64]	; (800ae70 <_tx_initialize_high_level+0x68>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	601a      	str	r2, [r3, #0]
 800ae32:	4b10      	ldr	r3, [pc, #64]	; (800ae74 <_tx_initialize_high_level+0x6c>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800ae38:	4b0f      	ldr	r3, [pc, #60]	; (800ae78 <_tx_initialize_high_level+0x70>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	4b0f      	ldr	r3, [pc, #60]	; (800ae7c <_tx_initialize_high_level+0x74>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800ae44:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <_tx_initialize_high_level+0x78>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	4b0e      	ldr	r3, [pc, #56]	; (800ae84 <_tx_initialize_high_level+0x7c>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800ae50:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <_tx_initialize_high_level+0x80>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	4b0d      	ldr	r3, [pc, #52]	; (800ae8c <_tx_initialize_high_level+0x84>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
#endif
}
 800ae5c:	bf00      	nop
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	2004cce0 	.word	0x2004cce0
 800ae64:	2004cce4 	.word	0x2004cce4
 800ae68:	2004cce8 	.word	0x2004cce8
 800ae6c:	2004ccec 	.word	0x2004ccec
 800ae70:	2004ccf0 	.word	0x2004ccf0
 800ae74:	2004ccf4 	.word	0x2004ccf4
 800ae78:	2004cd00 	.word	0x2004cd00
 800ae7c:	2004cd04 	.word	0x2004cd04
 800ae80:	2004cd08 	.word	0x2004cd08
 800ae84:	2004cd0c 	.word	0x2004cd0c
 800ae88:	2004ccf8 	.word	0x2004ccf8
 800ae8c:	2004ccfc 	.word	0x2004ccfc

0800ae90 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800ae94:	4b10      	ldr	r3, [pc, #64]	; (800aed8 <_tx_initialize_kernel_enter+0x48>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800ae9c:	d00c      	beq.n	800aeb8 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ae9e:	4b0e      	ldr	r3, [pc, #56]	; (800aed8 <_tx_initialize_kernel_enter+0x48>)
 800aea0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800aea4:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800aea6:	f7f5 f9e5 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800aeaa:	f7ff ffad 	bl	800ae08 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800aeae:	4b0b      	ldr	r3, [pc, #44]	; (800aedc <_tx_initialize_kernel_enter+0x4c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	4a09      	ldr	r2, [pc, #36]	; (800aedc <_tx_initialize_kernel_enter+0x4c>)
 800aeb6:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800aeb8:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <_tx_initialize_kernel_enter+0x48>)
 800aeba:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800aebe:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800aec0:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <_tx_initialize_kernel_enter+0x50>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7f5 fc83 	bl	80007d0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800aeca:	4b03      	ldr	r3, [pc, #12]	; (800aed8 <_tx_initialize_kernel_enter+0x48>)
 800aecc:	2200      	movs	r2, #0
 800aece:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800aed0:	f7f5 fa0c 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800aed4:	bf00      	nop
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	20025814 	.word	0x20025814
 800aedc:	2004cdb0 	.word	0x2004cdb0
 800aee0:	2004cd10 	.word	0x2004cd10

0800aee4 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08e      	sub	sp, #56	; 0x38
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aeee:	f3ef 8310 	mrs	r3, PRIMASK
 800aef2:	623b      	str	r3, [r7, #32]
    return(posture);
 800aef4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800aef6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aef8:	b672      	cpsid	i
    return(int_posture);
 800aefa:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800aefc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af02:	4a37      	ldr	r2, [pc, #220]	; (800afe0 <_tx_queue_cleanup+0xfc>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d161      	bne.n	800afcc <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d15b      	bne.n	800afcc <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af18:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d055      	beq.n	800afcc <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a2f      	ldr	r2, [pc, #188]	; (800afe4 <_tx_queue_cleanup+0x100>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d150      	bne.n	800afcc <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d04c      	beq.n	800afcc <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af46:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800af48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d103      	bne.n	800af56 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	2200      	movs	r2, #0
 800af52:	629a      	str	r2, [r3, #40]	; 0x28
 800af54:	e013      	b.n	800af7e <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af66:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af6c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	429a      	cmp	r2, r3
 800af76:	d102      	bne.n	800af7e <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7c:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af82:	2b05      	cmp	r3, #5
 800af84:	d122      	bne.n	800afcc <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d004      	beq.n	800af98 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	220b      	movs	r2, #11
 800af92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800af96:	e003      	b.n	800afa0 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	220a      	movs	r2, #10
 800af9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800afa0:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <_tx_queue_cleanup+0x104>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3301      	adds	r3, #1
 800afa6:	4a10      	ldr	r2, [pc, #64]	; (800afe8 <_tx_queue_cleanup+0x104>)
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	f383 8810 	msr	PRIMASK, r3
}
 800afb4:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fdc4 	bl	800bb44 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afbc:	f3ef 8310 	mrs	r3, PRIMASK
 800afc0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800afc2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800afc4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800afc6:	b672      	cpsid	i
    return(int_posture);
 800afc8:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800afca:	637b      	str	r3, [r7, #52]	; 0x34
 800afcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f383 8810 	msr	PRIMASK, r3
}
 800afd6:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800afd8:	bf00      	nop
 800afda:	3738      	adds	r7, #56	; 0x38
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	0800aee5 	.word	0x0800aee5
 800afe4:	51554555 	.word	0x51554555
 800afe8:	2004cdb0 	.word	0x2004cdb0

0800afec <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08c      	sub	sp, #48	; 0x30
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800affa:	2238      	movs	r2, #56	; 0x38
 800affc:	2100      	movs	r1, #0
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f01a fcb3 	bl	802596a <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b016:	fbb2 f3f3 	udiv	r3, r2, r3
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	fb02 f303 	mul.w	r3, r2, r3
 800b024:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	699a      	ldr	r2, [r3, #24]
 800b030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	441a      	add	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b04a:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b050:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b052:	f3ef 8310 	mrs	r3, PRIMASK
 800b056:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b058:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b05a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b05c:	b672      	cpsid	i
    return(int_posture);
 800b05e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b060:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	4a18      	ldr	r2, [pc, #96]	; (800b0c8 <_tx_queue_create+0xdc>)
 800b066:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b068:	4b18      	ldr	r3, [pc, #96]	; (800b0cc <_tx_queue_create+0xe0>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d109      	bne.n	800b084 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b070:	4a17      	ldr	r2, [pc, #92]	; (800b0d0 <_tx_queue_create+0xe4>)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	635a      	str	r2, [r3, #52]	; 0x34
 800b082:	e011      	b.n	800b0a8 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b084:	4b12      	ldr	r3, [pc, #72]	; (800b0d0 <_tx_queue_create+0xe4>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b08e:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	69fa      	ldr	r2, [r7, #28]
 800b0a0:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6a3a      	ldr	r2, [r7, #32]
 800b0a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b0a8:	4b08      	ldr	r3, [pc, #32]	; (800b0cc <_tx_queue_create+0xe0>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	4a07      	ldr	r2, [pc, #28]	; (800b0cc <_tx_queue_create+0xe0>)
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f383 8810 	msr	PRIMASK, r3
}
 800b0bc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3730      	adds	r7, #48	; 0x30
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	51554555 	.word	0x51554555
 800b0cc:	2004ccec 	.word	0x2004ccec
 800b0d0:	2004cce8 	.word	0x2004cce8

0800b0d4 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b096      	sub	sp, #88	; 0x58
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b0e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b0e8:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b0ee:	b672      	cpsid	i
    return(int_posture);
 800b0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800b0f2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 8136 	beq.w	800b370 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b106:	2b00      	cmp	r3, #0
 800b108:	d13c      	bne.n	800b184 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b11a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b11c:	1d13      	adds	r3, r2, #4
 800b11e:	657b      	str	r3, [r7, #84]	; 0x54
 800b120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b122:	1d19      	adds	r1, r3, #4
 800b124:	6539      	str	r1, [r7, #80]	; 0x50
 800b126:	6812      	ldr	r2, [r2, #0]
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d90e      	bls.n	800b14e <_tx_queue_receive+0x7a>
 800b130:	e007      	b.n	800b142 <_tx_queue_receive+0x6e>
 800b132:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b134:	1d13      	adds	r3, r2, #4
 800b136:	657b      	str	r3, [r7, #84]	; 0x54
 800b138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b13a:	1d19      	adds	r1, r3, #4
 800b13c:	6539      	str	r1, [r7, #80]	; 0x50
 800b13e:	6812      	ldr	r2, [r2, #0]
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b144:	3b01      	subs	r3, #1
 800b146:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1f1      	bne.n	800b132 <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b154:	429a      	cmp	r2, r3
 800b156:	d102      	bne.n	800b15e <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b162:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	695b      	ldr	r3, [r3, #20]
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	1e5a      	subs	r2, r3, #1
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	611a      	str	r2, [r3, #16]
 800b178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b17a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	f383 8810 	msr	PRIMASK, r3
}
 800b182:	e163      	b.n	800b44c <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b188:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800b18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b190:	2b01      	cmp	r3, #1
 800b192:	d153      	bne.n	800b23c <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b198:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b1a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1a6:	1d13      	adds	r3, r2, #4
 800b1a8:	657b      	str	r3, [r7, #84]	; 0x54
 800b1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ac:	1d19      	adds	r1, r3, #4
 800b1ae:	6539      	str	r1, [r7, #80]	; 0x50
 800b1b0:	6812      	ldr	r2, [r2, #0]
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d90e      	bls.n	800b1d8 <_tx_queue_receive+0x104>
 800b1ba:	e007      	b.n	800b1cc <_tx_queue_receive+0xf8>
 800b1bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1be:	1d13      	adds	r3, r2, #4
 800b1c0:	657b      	str	r3, [r7, #84]	; 0x54
 800b1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1c4:	1d19      	adds	r1, r3, #4
 800b1c6:	6539      	str	r1, [r7, #80]	; 0x50
 800b1c8:	6812      	ldr	r2, [r2, #0]
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1f1      	bne.n	800b1bc <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800b1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d103      	bne.n	800b1ec <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	629a      	str	r2, [r3, #40]	; 0x28
 800b1ea:	e00e      	b.n	800b20a <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800b1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f0:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1f6:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1fc:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b202:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800b204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b208:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b20e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b212:	2200      	movs	r2, #0
 800b214:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b21e:	4b8e      	ldr	r3, [pc, #568]	; (800b458 <_tx_queue_receive+0x384>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	4a8c      	ldr	r2, [pc, #560]	; (800b458 <_tx_queue_receive+0x384>)
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b22a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	f383 8810 	msr	PRIMASK, r3
}
 800b232:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800b234:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b236:	f000 fc85 	bl	800bb44 <_tx_thread_system_resume>
 800b23a:	e107      	b.n	800b44c <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b24c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b24e:	1d13      	adds	r3, r2, #4
 800b250:	657b      	str	r3, [r7, #84]	; 0x54
 800b252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b254:	1d19      	adds	r1, r3, #4
 800b256:	6539      	str	r1, [r7, #80]	; 0x50
 800b258:	6812      	ldr	r2, [r2, #0]
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d90e      	bls.n	800b280 <_tx_queue_receive+0x1ac>
 800b262:	e007      	b.n	800b274 <_tx_queue_receive+0x1a0>
 800b264:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b266:	1d13      	adds	r3, r2, #4
 800b268:	657b      	str	r3, [r7, #84]	; 0x54
 800b26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b26c:	1d19      	adds	r1, r3, #4
 800b26e:	6539      	str	r1, [r7, #80]	; 0x50
 800b270:	6812      	ldr	r2, [r2, #0]
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b276:	3b01      	subs	r3, #1
 800b278:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1f1      	bne.n	800b264 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b286:	429a      	cmp	r2, r3
 800b288:	d102      	bne.n	800b290 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b294:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800b296:	4b70      	ldr	r3, [pc, #448]	; (800b458 <_tx_queue_receive+0x384>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3301      	adds	r3, #1
 800b29c:	4a6e      	ldr	r2, [pc, #440]	; (800b458 <_tx_queue_receive+0x384>)
 800b29e:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800b2a0:	4b6d      	ldr	r3, [pc, #436]	; (800b458 <_tx_queue_receive+0x384>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	4a6c      	ldr	r2, [pc, #432]	; (800b458 <_tx_queue_receive+0x384>)
 800b2a8:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2ae:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b4:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b2bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2be:	1d13      	adds	r3, r2, #4
 800b2c0:	657b      	str	r3, [r7, #84]	; 0x54
 800b2c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2c4:	1d19      	adds	r1, r3, #4
 800b2c6:	6539      	str	r1, [r7, #80]	; 0x50
 800b2c8:	6812      	ldr	r2, [r2, #0]
 800b2ca:	601a      	str	r2, [r3, #0]
 800b2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d90e      	bls.n	800b2f0 <_tx_queue_receive+0x21c>
 800b2d2:	e007      	b.n	800b2e4 <_tx_queue_receive+0x210>
 800b2d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2d6:	1d13      	adds	r3, r2, #4
 800b2d8:	657b      	str	r3, [r7, #84]	; 0x54
 800b2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2dc:	1d19      	adds	r1, r3, #4
 800b2de:	6539      	str	r1, [r7, #80]	; 0x50
 800b2e0:	6812      	ldr	r2, [r2, #0]
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1f1      	bne.n	800b2d4 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d102      	bne.n	800b300 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b304:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b30a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800b30c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b30e:	3b01      	subs	r3, #1
 800b310:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b314:	2b00      	cmp	r3, #0
 800b316:	d103      	bne.n	800b320 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	629a      	str	r2, [r3, #40]	; 0x28
 800b31e:	e00e      	b.n	800b33e <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800b320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b324:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b32a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b32e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b330:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b336:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800b338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b33c:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b342:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b346:	2200      	movs	r2, #0
 800b348:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b352:	4b41      	ldr	r3, [pc, #260]	; (800b458 <_tx_queue_receive+0x384>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3301      	adds	r3, #1
 800b358:	4a3f      	ldr	r2, [pc, #252]	; (800b458 <_tx_queue_receive+0x384>)
 800b35a:	6013      	str	r3, [r2, #0]
 800b35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b35e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	f383 8810 	msr	PRIMASK, r3
}
 800b366:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800b368:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b36a:	f000 fbeb 	bl	800bb44 <_tx_thread_system_resume>
 800b36e:	e06d      	b.n	800b44c <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d062      	beq.n	800b43c <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b376:	4b38      	ldr	r3, [pc, #224]	; (800b458 <_tx_queue_receive+0x384>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d008      	beq.n	800b390 <_tx_queue_receive+0x2bc>
 800b37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b380:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	f383 8810 	msr	PRIMASK, r3
}
 800b388:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800b38a:	230a      	movs	r3, #10
 800b38c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b38e:	e05d      	b.n	800b44c <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b390:	4b32      	ldr	r3, [pc, #200]	; (800b45c <_tx_queue_receive+0x388>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800b396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b398:	4a31      	ldr	r2, [pc, #196]	; (800b460 <_tx_queue_receive+0x38c>)
 800b39a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800b39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800b3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800b3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800b3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800b3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d109      	bne.n	800b3d8 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3c8:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3ce:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3d4:	675a      	str	r2, [r3, #116]	; 0x74
 800b3d6:	e011      	b.n	800b3fc <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3dc:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3e2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3e8:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3ee:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3f4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3fa:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800b3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800b404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b406:	2205      	movs	r2, #5
 800b408:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40c:	2201      	movs	r2, #1
 800b40e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b416:	4b10      	ldr	r3, [pc, #64]	; (800b458 <_tx_queue_receive+0x384>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	4a0e      	ldr	r2, [pc, #56]	; (800b458 <_tx_queue_receive+0x384>)
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b422:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f383 8810 	msr	PRIMASK, r3
}
 800b42a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b42c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b42e:	f000 fc89 	bl	800bd44 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b438:	64bb      	str	r3, [r7, #72]	; 0x48
 800b43a:	e007      	b.n	800b44c <_tx_queue_receive+0x378>
 800b43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b43e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	f383 8810 	msr	PRIMASK, r3
}
 800b446:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800b448:	230a      	movs	r3, #10
 800b44a:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 800b44c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3758      	adds	r7, #88	; 0x58
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	2004cdb0 	.word	0x2004cdb0
 800b45c:	2004cd18 	.word	0x2004cd18
 800b460:	0800aee5 	.word	0x0800aee5

0800b464 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08e      	sub	sp, #56	; 0x38
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b46e:	f3ef 8310 	mrs	r3, PRIMASK
 800b472:	623b      	str	r3, [r7, #32]
    return(posture);
 800b474:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b476:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b478:	b672      	cpsid	i
    return(int_posture);
 800b47a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800b47c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b482:	4a33      	ldr	r2, [pc, #204]	; (800b550 <_tx_semaphore_cleanup+0xec>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d158      	bne.n	800b53a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	429a      	cmp	r2, r3
 800b492:	d152      	bne.n	800b53a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b498:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d04c      	beq.n	800b53a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a2b      	ldr	r2, [pc, #172]	; (800b554 <_tx_semaphore_cleanup+0xf0>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d147      	bne.n	800b53a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d043      	beq.n	800b53a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	1e5a      	subs	r2, r3, #1
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d103      	bne.n	800b4d6 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	60da      	str	r2, [r3, #12]
 800b4d4:	e013      	b.n	800b4fe <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4da:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4e6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ec:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800b4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d102      	bne.n	800b4fe <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4fc:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b502:	2b06      	cmp	r3, #6
 800b504:	d119      	bne.n	800b53a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	220d      	movs	r2, #13
 800b50a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b50e:	4b12      	ldr	r3, [pc, #72]	; (800b558 <_tx_semaphore_cleanup+0xf4>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3301      	adds	r3, #1
 800b514:	4a10      	ldr	r2, [pc, #64]	; (800b558 <_tx_semaphore_cleanup+0xf4>)
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f383 8810 	msr	PRIMASK, r3
}
 800b522:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fb0d 	bl	800bb44 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b52a:	f3ef 8310 	mrs	r3, PRIMASK
 800b52e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b530:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b532:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b534:	b672      	cpsid	i
    return(int_posture);
 800b536:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b538:	637b      	str	r3, [r7, #52]	; 0x34
 800b53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f383 8810 	msr	PRIMASK, r3
}
 800b544:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b546:	bf00      	nop
 800b548:	3738      	adds	r7, #56	; 0x38
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	0800b465 	.word	0x0800b465
 800b554:	53454d41 	.word	0x53454d41
 800b558:	2004cdb0 	.word	0x2004cdb0

0800b55c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08a      	sub	sp, #40	; 0x28
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800b568:	221c      	movs	r2, #28
 800b56a:	2100      	movs	r1, #0
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f01a f9fc 	bl	802596a <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b57e:	f3ef 8310 	mrs	r3, PRIMASK
 800b582:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b584:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b586:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b588:	b672      	cpsid	i
    return(int_posture);
 800b58a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800b58c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	4a18      	ldr	r2, [pc, #96]	; (800b5f4 <_tx_semaphore_create+0x98>)
 800b592:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800b594:	4b18      	ldr	r3, [pc, #96]	; (800b5f8 <_tx_semaphore_create+0x9c>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d109      	bne.n	800b5b0 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800b59c:	4a17      	ldr	r2, [pc, #92]	; (800b5fc <_tx_semaphore_create+0xa0>)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	619a      	str	r2, [r3, #24]
 800b5ae:	e011      	b.n	800b5d4 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800b5b0:	4b12      	ldr	r3, [pc, #72]	; (800b5fc <_tx_semaphore_create+0xa0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	699b      	ldr	r3, [r3, #24]
 800b5ba:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	69fa      	ldr	r2, [r7, #28]
 800b5cc:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6a3a      	ldr	r2, [r7, #32]
 800b5d2:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800b5d4:	4b08      	ldr	r3, [pc, #32]	; (800b5f8 <_tx_semaphore_create+0x9c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	4a07      	ldr	r2, [pc, #28]	; (800b5f8 <_tx_semaphore_create+0x9c>)
 800b5dc:	6013      	str	r3, [r2, #0]
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	f383 8810 	msr	PRIMASK, r3
}
 800b5e8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3728      	adds	r7, #40	; 0x28
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	53454d41 	.word	0x53454d41
 800b5f8:	2004cce4 	.word	0x2004cce4
 800b5fc:	2004cce0 	.word	0x2004cce0

0800b600 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08e      	sub	sp, #56	; 0x38
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b60a:	2300      	movs	r3, #0
 800b60c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b60e:	f3ef 8310 	mrs	r3, PRIMASK
 800b612:	623b      	str	r3, [r7, #32]
    return(posture);
 800b614:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b616:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b618:	b672      	cpsid	i
    return(int_posture);
 800b61a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800b61c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	1e5a      	subs	r2, r3, #1
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	609a      	str	r2, [r3, #8]
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	f383 8810 	msr	PRIMASK, r3
}
 800b63a:	e068      	b.n	800b70e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d05d      	beq.n	800b6fe <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b642:	4b35      	ldr	r3, [pc, #212]	; (800b718 <_tx_semaphore_get+0x118>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d008      	beq.n	800b65c <_tx_semaphore_get+0x5c>
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f383 8810 	msr	PRIMASK, r3
}
 800b654:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800b656:	230d      	movs	r3, #13
 800b658:	637b      	str	r3, [r7, #52]	; 0x34
 800b65a:	e058      	b.n	800b70e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b65c:	4b2f      	ldr	r3, [pc, #188]	; (800b71c <_tx_semaphore_get+0x11c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b664:	4a2e      	ldr	r2, [pc, #184]	; (800b720 <_tx_semaphore_get+0x120>)
 800b666:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800b668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b670:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b674:	1c5a      	adds	r2, r3, #1
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d109      	bne.n	800b698 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b688:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b68e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b694:	675a      	str	r2, [r3, #116]	; 0x74
 800b696:	e011      	b.n	800b6bc <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6a2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6a8:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ae:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6b4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ba:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800b6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c8:	2206      	movs	r2, #6
 800b6ca:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b6d8:	4b0f      	ldr	r3, [pc, #60]	; (800b718 <_tx_semaphore_get+0x118>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	4a0e      	ldr	r2, [pc, #56]	; (800b718 <_tx_semaphore_get+0x118>)
 800b6e0:	6013      	str	r3, [r2, #0]
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	f383 8810 	msr	PRIMASK, r3
}
 800b6ec:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b6ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6f0:	f000 fb28 	bl	800bd44 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b6fc:	e007      	b.n	800b70e <_tx_semaphore_get+0x10e>
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f383 8810 	msr	PRIMASK, r3
}
 800b708:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800b70a:	230d      	movs	r3, #13
 800b70c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800b70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b710:	4618      	mov	r0, r3
 800b712:	3738      	adds	r7, #56	; 0x38
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	2004cdb0 	.word	0x2004cdb0
 800b71c:	2004cd18 	.word	0x2004cd18
 800b720:	0800b465 	.word	0x0800b465

0800b724 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b08c      	sub	sp, #48	; 0x30
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b72c:	f3ef 8310 	mrs	r3, PRIMASK
 800b730:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b732:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b734:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b736:	b672      	cpsid	i
    return(int_posture);
 800b738:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800b73a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800b742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b744:	2b00      	cmp	r3, #0
 800b746:	d10a      	bne.n	800b75e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	1c5a      	adds	r2, r3, #1
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	609a      	str	r2, [r3, #8]
 800b752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b754:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	f383 8810 	msr	PRIMASK, r3
}
 800b75c:	e033      	b.n	800b7c6 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	3b01      	subs	r3, #1
 800b768:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d103      	bne.n	800b778 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	60da      	str	r2, [r3, #12]
 800b776:	e00e      	b.n	800b796 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b77c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a3a      	ldr	r2, [r7, #32]
 800b782:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b788:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	6a3a      	ldr	r2, [r7, #32]
 800b794:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b79a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79e:	2200      	movs	r2, #0
 800b7a0:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800b7aa:	4b09      	ldr	r3, [pc, #36]	; (800b7d0 <_tx_semaphore_put+0xac>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	4a07      	ldr	r2, [pc, #28]	; (800b7d0 <_tx_semaphore_put+0xac>)
 800b7b2:	6013      	str	r3, [r2, #0]
 800b7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f383 8810 	msr	PRIMASK, r3
}
 800b7be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b7c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7c2:	f000 f9bf 	bl	800bb44 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3730      	adds	r7, #48	; 0x30
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	2004cdb0 	.word	0x2004cdb0

0800b7d4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b092      	sub	sp, #72	; 0x48
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
 800b7e0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800b7e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b7e8:	21ef      	movs	r1, #239	; 0xef
 800b7ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b7ec:	f01a f8bd 	bl	802596a <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800b7f0:	22b0      	movs	r2, #176	; 0xb0
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f01a f8b8 	bl	802596a <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b810:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b816:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b81c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b822:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b82a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b830:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2220      	movs	r2, #32
 800b836:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800b83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b83c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800b83e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b840:	3b01      	subs	r3, #1
 800b842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b844:	4413      	add	r3, r2
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b84c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800b84e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b852:	429a      	cmp	r2, r3
 800b854:	d007      	beq.n	800b866 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b864:	e006      	b.n	800b874 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b86a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b870:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2203      	movs	r2, #3
 800b878:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	4a48      	ldr	r2, [pc, #288]	; (800b9a0 <_tx_thread_create+0x1cc>)
 800b87e:	655a      	str	r2, [r3, #84]	; 0x54
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800b886:	4947      	ldr	r1, [pc, #284]	; (800b9a4 <_tx_thread_create+0x1d0>)
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7f4 fd95 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b88e:	f3ef 8310 	mrs	r3, PRIMASK
 800b892:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800b894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800b896:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b898:	b672      	cpsid	i
    return(int_posture);
 800b89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800b89c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	4a41      	ldr	r2, [pc, #260]	; (800b9a8 <_tx_thread_create+0x1d4>)
 800b8a2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800b8a4:	4b41      	ldr	r3, [pc, #260]	; (800b9ac <_tx_thread_create+0x1d8>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10b      	bne.n	800b8c4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800b8ac:	4a40      	ldr	r2, [pc, #256]	; (800b9b0 <_tx_thread_create+0x1dc>)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800b8c2:	e016      	b.n	800b8f2 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800b8c4:	4b3a      	ldr	r3, [pc, #232]	; (800b9b0 <_tx_thread_create+0x1dc>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800b8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8d0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800b8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800b8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800b8f2:	4b2e      	ldr	r3, [pc, #184]	; (800b9ac <_tx_thread_create+0x1d8>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	4a2c      	ldr	r2, [pc, #176]	; (800b9ac <_tx_thread_create+0x1d8>)
 800b8fa:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b8fc:	4b2d      	ldr	r3, [pc, #180]	; (800b9b4 <_tx_thread_create+0x1e0>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3301      	adds	r3, #1
 800b902:	4a2c      	ldr	r2, [pc, #176]	; (800b9b4 <_tx_thread_create+0x1e0>)
 800b904:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800b906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d129      	bne.n	800b960 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b90c:	f3ef 8305 	mrs	r3, IPSR
 800b910:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800b912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800b914:	4b28      	ldr	r3, [pc, #160]	; (800b9b8 <_tx_thread_create+0x1e4>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4313      	orrs	r3, r2
 800b91a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b91e:	d30d      	bcc.n	800b93c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800b920:	4b26      	ldr	r3, [pc, #152]	; (800b9bc <_tx_thread_create+0x1e8>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800b926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d009      	beq.n	800b940 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800b92c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b930:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800b932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b938:	63da      	str	r2, [r3, #60]	; 0x3c
 800b93a:	e001      	b.n	800b940 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800b93c:	2300      	movs	r3, #0
 800b93e:	647b      	str	r3, [r7, #68]	; 0x44
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	f383 8810 	msr	PRIMASK, r3
}
 800b94a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 f8f9 	bl	800bb44 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800b952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01e      	beq.n	800b996 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800b958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b95a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b95c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b95e:	e01a      	b.n	800b996 <_tx_thread_create+0x1c2>
 800b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b962:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f383 8810 	msr	PRIMASK, r3
}
 800b96a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b96c:	f3ef 8310 	mrs	r3, PRIMASK
 800b970:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b972:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b974:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b976:	b672      	cpsid	i
    return(int_posture);
 800b978:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800b97a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800b97c:	4b0d      	ldr	r3, [pc, #52]	; (800b9b4 <_tx_thread_create+0x1e0>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3b01      	subs	r3, #1
 800b982:	4a0c      	ldr	r2, [pc, #48]	; (800b9b4 <_tx_thread_create+0x1e0>)
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b988:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	f383 8810 	msr	PRIMASK, r3
}
 800b990:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b992:	f000 f89d 	bl	800bad0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3748      	adds	r7, #72	; 0x48
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	0800c019 	.word	0x0800c019
 800b9a4:	0800ba39 	.word	0x0800ba39
 800b9a8:	54485244 	.word	0x54485244
 800b9ac:	2004cd24 	.word	0x2004cd24
 800b9b0:	2004cd20 	.word	0x2004cd20
 800b9b4:	2004cdb0 	.word	0x2004cdb0
 800b9b8:	20025814 	.word	0x20025814
 800b9bc:	2004cd1c 	.word	0x2004cd1c

0800b9c0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800b9c4:	4b12      	ldr	r3, [pc, #72]	; (800ba10 <_tx_thread_initialize+0x50>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800b9ca:	4b12      	ldr	r3, [pc, #72]	; (800ba14 <_tx_thread_initialize+0x54>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	601a      	str	r2, [r3, #0]
 800b9d0:	4b11      	ldr	r3, [pc, #68]	; (800ba18 <_tx_thread_initialize+0x58>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b9d6:	4b11      	ldr	r3, [pc, #68]	; (800ba1c <_tx_thread_initialize+0x5c>)
 800b9d8:	2220      	movs	r2, #32
 800b9da:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800b9dc:	2280      	movs	r2, #128	; 0x80
 800b9de:	2100      	movs	r1, #0
 800b9e0:	480f      	ldr	r0, [pc, #60]	; (800ba20 <_tx_thread_initialize+0x60>)
 800b9e2:	f019 ffc2 	bl	802596a <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800b9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <_tx_thread_initialize+0x64>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800b9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ba28 <_tx_thread_initialize+0x68>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800b9f2:	4b0e      	ldr	r3, [pc, #56]	; (800ba2c <_tx_thread_initialize+0x6c>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800b9f8:	4b0d      	ldr	r3, [pc, #52]	; (800ba30 <_tx_thread_initialize+0x70>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800b9fe:	4b0d      	ldr	r3, [pc, #52]	; (800ba34 <_tx_thread_initialize+0x74>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800ba06:	4a0b      	ldr	r2, [pc, #44]	; (800ba34 <_tx_thread_initialize+0x74>)
 800ba08:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800ba0a:	bf00      	nop
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	2004cd18 	.word	0x2004cd18
 800ba14:	2004cd1c 	.word	0x2004cd1c
 800ba18:	2004cd28 	.word	0x2004cd28
 800ba1c:	2004cd2c 	.word	0x2004cd2c
 800ba20:	2004cd30 	.word	0x2004cd30
 800ba24:	2004cd20 	.word	0x2004cd20
 800ba28:	2004cd24 	.word	0x2004cd24
 800ba2c:	2004cdb0 	.word	0x2004cdb0
 800ba30:	2004cdb4 	.word	0x2004cdb4
 800ba34:	2004cdb8 	.word	0x2004cdb8

0800ba38 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ba3e:	4b21      	ldr	r3, [pc, #132]	; (800bac4 <_tx_thread_shell_entry+0x8c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba48:	69fa      	ldr	r2, [r7, #28]
 800ba4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800ba50:	4b1d      	ldr	r3, [pc, #116]	; (800bac8 <_tx_thread_shell_entry+0x90>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d003      	beq.n	800ba60 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800ba58:	4b1b      	ldr	r3, [pc, #108]	; (800bac8 <_tx_thread_shell_entry+0x90>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	69f8      	ldr	r0, [r7, #28]
 800ba5e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba60:	f3ef 8310 	mrs	r3, PRIMASK
 800ba64:	607b      	str	r3, [r7, #4]
    return(posture);
 800ba66:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ba68:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba6a:	b672      	cpsid	i
    return(int_posture);
 800ba6c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800ba6e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	2201      	movs	r2, #1
 800ba74:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ba82:	4b12      	ldr	r3, [pc, #72]	; (800bacc <_tx_thread_shell_entry+0x94>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3301      	adds	r3, #1
 800ba88:	4a10      	ldr	r2, [pc, #64]	; (800bacc <_tx_thread_shell_entry+0x94>)
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f383 8810 	msr	PRIMASK, r3
}
 800ba96:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800ba98:	f3ef 8314 	mrs	r3, CONTROL
 800ba9c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ba9e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800baa0:	617b      	str	r3, [r7, #20]
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f023 0304 	bic.w	r3, r3, #4
 800baa8:	617b      	str	r3, [r7, #20]
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	f383 8814 	msr	CONTROL, r3
}
 800bab4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800bab6:	69f8      	ldr	r0, [r7, #28]
 800bab8:	f000 f944 	bl	800bd44 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800babc:	bf00      	nop
 800babe:	3720      	adds	r7, #32
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	2004cd18 	.word	0x2004cd18
 800bac8:	2004cdb4 	.word	0x2004cdb4
 800bacc:	2004cdb0 	.word	0x2004cdb0

0800bad0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b089      	sub	sp, #36	; 0x24
 800bad4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bad6:	4b17      	ldr	r3, [pc, #92]	; (800bb34 <_tx_thread_system_preempt_check+0x64>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d121      	bne.n	800bb26 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800bae2:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <_tx_thread_system_preempt_check+0x68>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800bae8:	4b14      	ldr	r3, [pc, #80]	; (800bb3c <_tx_thread_system_preempt_check+0x6c>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d017      	beq.n	800bb26 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800baf6:	4b12      	ldr	r3, [pc, #72]	; (800bb40 <_tx_thread_system_preempt_check+0x70>)
 800baf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bafe:	f3ef 8305 	mrs	r3, IPSR
 800bb02:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800bb04:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10c      	bne.n	800bb24 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb0a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb0e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800bb10:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800bb12:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bb14:	b662      	cpsie	i
}
 800bb16:	bf00      	nop
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f383 8810 	msr	PRIMASK, r3
}
 800bb22:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800bb24:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800bb26:	bf00      	nop
 800bb28:	3724      	adds	r7, #36	; 0x24
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	2004cdb0 	.word	0x2004cdb0
 800bb38:	2004cd18 	.word	0x2004cd18
 800bb3c:	2004cd1c 	.word	0x2004cd1c
 800bb40:	e000ed04 	.word	0xe000ed04

0800bb44 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b096      	sub	sp, #88	; 0x58
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb4c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800bb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800bb54:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb56:	b672      	cpsid	i
    return(int_posture);
 800bb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bb5a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	334c      	adds	r3, #76	; 0x4c
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 fb91 	bl	800c290 <_tx_timer_system_deactivate>
 800bb6e:	e002      	b.n	800bb76 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800bb76:	4b6c      	ldr	r3, [pc, #432]	; (800bd28 <_tx_thread_system_resume+0x1e4>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	4a6a      	ldr	r2, [pc, #424]	; (800bd28 <_tx_thread_system_resume+0x1e4>)
 800bb7e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f040 8083 	bne.w	800bc90 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f000 8097 	beq.w	800bcc2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d172      	bne.n	800bc82 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba6:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800bba8:	4a60      	ldr	r2, [pc, #384]	; (800bd2c <_tx_thread_system_resume+0x1e8>)
 800bbaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbb0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800bbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d154      	bne.n	800bc62 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800bbb8:	495c      	ldr	r1, [pc, #368]	; (800bd2c <_tx_thread_system_resume+0x1e8>)
 800bbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd6:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800bbd8:	4b55      	ldr	r3, [pc, #340]	; (800bd30 <_tx_thread_system_resume+0x1ec>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	4a53      	ldr	r2, [pc, #332]	; (800bd30 <_tx_thread_system_resume+0x1ec>)
 800bbe2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800bbe4:	4b53      	ldr	r3, [pc, #332]	; (800bd34 <_tx_thread_system_resume+0x1f0>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d269      	bcs.n	800bcc2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800bbee:	4a51      	ldr	r2, [pc, #324]	; (800bd34 <_tx_thread_system_resume+0x1f0>)
 800bbf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbf2:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800bbf4:	4b50      	ldr	r3, [pc, #320]	; (800bd38 <_tx_thread_system_resume+0x1f4>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800bbfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d103      	bne.n	800bc08 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800bc00:	4a4d      	ldr	r2, [pc, #308]	; (800bd38 <_tx_thread_system_resume+0x1f4>)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	e05c      	b.n	800bcc2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800bc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d257      	bcs.n	800bcc2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800bc12:	4a49      	ldr	r2, [pc, #292]	; (800bd38 <_tx_thread_system_resume+0x1f4>)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	f383 8810 	msr	PRIMASK, r3
}
 800bc22:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bc24:	4b40      	ldr	r3, [pc, #256]	; (800bd28 <_tx_thread_system_resume+0x1e4>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800bc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d174      	bne.n	800bd1a <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bc30:	4b42      	ldr	r3, [pc, #264]	; (800bd3c <_tx_thread_system_resume+0x1f8>)
 800bc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc36:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc38:	f3ef 8305 	mrs	r3, IPSR
 800bc3c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10c      	bne.n	800bc5e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc44:	f3ef 8310 	mrs	r3, PRIMASK
 800bc48:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800bc4c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bc4e:	b662      	cpsie	i
}
 800bc50:	bf00      	nop
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	f383 8810 	msr	PRIMASK, r3
}
 800bc5c:	bf00      	nop
}
 800bc5e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800bc60:	e05b      	b.n	800bd1a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800bc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc66:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800bc68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800bc6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc78:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc7e:	621a      	str	r2, [r3, #32]
 800bc80:	e01f      	b.n	800bcc2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2203      	movs	r2, #3
 800bc8c:	631a      	str	r2, [r3, #48]	; 0x30
 800bc8e:	e018      	b.n	800bcc2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d014      	beq.n	800bcc2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d010      	beq.n	800bcc2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d106      	bne.n	800bcb6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	631a      	str	r2, [r3, #48]	; 0x30
 800bcb4:	e005      	b.n	800bcc2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2203      	movs	r2, #3
 800bcc0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800bcc2:	4b1f      	ldr	r3, [pc, #124]	; (800bd40 <_tx_thread_system_resume+0x1fc>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	f383 8810 	msr	PRIMASK, r3
}
 800bcd2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800bcd4:	4b18      	ldr	r3, [pc, #96]	; (800bd38 <_tx_thread_system_resume+0x1f4>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d020      	beq.n	800bd20 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bcde:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <_tx_thread_system_resume+0x1e4>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800bce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d11a      	bne.n	800bd20 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bcea:	4b14      	ldr	r3, [pc, #80]	; (800bd3c <_tx_thread_system_resume+0x1f8>)
 800bcec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bcf2:	f3ef 8305 	mrs	r3, IPSR
 800bcf6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bcf8:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10f      	bne.n	800bd1e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcfe:	f3ef 8310 	mrs	r3, PRIMASK
 800bd02:	613b      	str	r3, [r7, #16]
    return(posture);
 800bd04:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800bd06:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bd08:	b662      	cpsie	i
}
 800bd0a:	bf00      	nop
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f383 8810 	msr	PRIMASK, r3
}
 800bd16:	bf00      	nop
}
 800bd18:	e001      	b.n	800bd1e <_tx_thread_system_resume+0x1da>
                                return;
 800bd1a:	bf00      	nop
 800bd1c:	e000      	b.n	800bd20 <_tx_thread_system_resume+0x1dc>
 800bd1e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800bd20:	3758      	adds	r7, #88	; 0x58
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	2004cdb0 	.word	0x2004cdb0
 800bd2c:	2004cd30 	.word	0x2004cd30
 800bd30:	2004cd28 	.word	0x2004cd28
 800bd34:	2004cd2c 	.word	0x2004cd2c
 800bd38:	2004cd1c 	.word	0x2004cd1c
 800bd3c:	e000ed04 	.word	0xe000ed04
 800bd40:	2004cd18 	.word	0x2004cd18

0800bd44 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b09e      	sub	sp, #120	; 0x78
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800bd4c:	4b81      	ldr	r3, [pc, #516]	; (800bf54 <_tx_thread_system_suspend+0x210>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd52:	f3ef 8310 	mrs	r3, PRIMASK
 800bd56:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800bd58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800bd5a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd5c:	b672      	cpsid	i
    return(int_posture);
 800bd5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800bd60:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d112      	bne.n	800bd90 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd6e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800bd70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d008      	beq.n	800bd88 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800bd76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7c:	d004      	beq.n	800bd88 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	334c      	adds	r3, #76	; 0x4c
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 fa22 	bl	800c1cc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	4a72      	ldr	r2, [pc, #456]	; (800bf58 <_tx_thread_system_suspend+0x214>)
 800bd8e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800bd90:	4b72      	ldr	r3, [pc, #456]	; (800bf5c <_tx_thread_system_suspend+0x218>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	4a71      	ldr	r2, [pc, #452]	; (800bf5c <_tx_thread_system_suspend+0x218>)
 800bd98:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	f040 80a6 	bne.w	800bef0 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a1b      	ldr	r3, [r3, #32]
 800bdb4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800bdb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d015      	beq.n	800bdea <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc2:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800bdc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bdc8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800bdca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdce:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800bdd0:	4a63      	ldr	r2, [pc, #396]	; (800bf60 <_tx_thread_system_suspend+0x21c>)
 800bdd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d157      	bne.n	800be8e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800bdde:	4960      	ldr	r1, [pc, #384]	; (800bf60 <_tx_thread_system_suspend+0x21c>)
 800bde0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bde2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bde4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bde8:	e051      	b.n	800be8e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800bdea:	4a5d      	ldr	r2, [pc, #372]	; (800bf60 <_tx_thread_system_suspend+0x21c>)
 800bdec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdee:	2100      	movs	r1, #0
 800bdf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfc:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800bdfe:	4b59      	ldr	r3, [pc, #356]	; (800bf64 <_tx_thread_system_suspend+0x220>)
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be04:	43db      	mvns	r3, r3
 800be06:	4013      	ands	r3, r2
 800be08:	4a56      	ldr	r2, [pc, #344]	; (800bf64 <_tx_thread_system_suspend+0x220>)
 800be0a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800be0c:	2300      	movs	r3, #0
 800be0e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800be10:	4b54      	ldr	r3, [pc, #336]	; (800bf64 <_tx_thread_system_suspend+0x220>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800be16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d12b      	bne.n	800be74 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800be1c:	4b52      	ldr	r3, [pc, #328]	; (800bf68 <_tx_thread_system_suspend+0x224>)
 800be1e:	2220      	movs	r2, #32
 800be20:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800be22:	4b52      	ldr	r3, [pc, #328]	; (800bf6c <_tx_thread_system_suspend+0x228>)
 800be24:	2200      	movs	r2, #0
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be2a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be2e:	f383 8810 	msr	PRIMASK, r3
}
 800be32:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800be34:	4b49      	ldr	r3, [pc, #292]	; (800bf5c <_tx_thread_system_suspend+0x218>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800be3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f040 8081 	bne.w	800bf44 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800be42:	4b4b      	ldr	r3, [pc, #300]	; (800bf70 <_tx_thread_system_suspend+0x22c>)
 800be44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be48:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be4a:	f3ef 8305 	mrs	r3, IPSR
 800be4e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800be50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10c      	bne.n	800be70 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be56:	f3ef 8310 	mrs	r3, PRIMASK
 800be5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800be5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800be5e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800be60:	b662      	cpsie	i
}
 800be62:	bf00      	nop
 800be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be66:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6a:	f383 8810 	msr	PRIMASK, r3
}
 800be6e:	bf00      	nop
}
 800be70:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800be72:	e067      	b.n	800bf44 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800be74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be76:	fa93 f3a3 	rbit	r3, r3
 800be7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be7e:	fab3 f383 	clz	r3, r3
 800be82:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800be84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be88:	4413      	add	r3, r2
 800be8a:	4a37      	ldr	r2, [pc, #220]	; (800bf68 <_tx_thread_system_suspend+0x224>)
 800be8c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800be8e:	4b37      	ldr	r3, [pc, #220]	; (800bf6c <_tx_thread_system_suspend+0x228>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d12b      	bne.n	800bef0 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800be98:	4b33      	ldr	r3, [pc, #204]	; (800bf68 <_tx_thread_system_suspend+0x224>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a30      	ldr	r2, [pc, #192]	; (800bf60 <_tx_thread_system_suspend+0x21c>)
 800be9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea2:	4a32      	ldr	r2, [pc, #200]	; (800bf6c <_tx_thread_system_suspend+0x228>)
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bea8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	f383 8810 	msr	PRIMASK, r3
}
 800beb0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800beb2:	4b2a      	ldr	r3, [pc, #168]	; (800bf5c <_tx_thread_system_suspend+0x218>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800beb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d144      	bne.n	800bf48 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bebe:	4b2c      	ldr	r3, [pc, #176]	; (800bf70 <_tx_thread_system_suspend+0x22c>)
 800bec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bec6:	f3ef 8305 	mrs	r3, IPSR
 800beca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10c      	bne.n	800beec <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bed2:	f3ef 8310 	mrs	r3, PRIMASK
 800bed6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bedc:	b662      	cpsie	i
}
 800bede:	bf00      	nop
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	f383 8810 	msr	PRIMASK, r3
}
 800beea:	bf00      	nop
}
 800beec:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800beee:	e02b      	b.n	800bf48 <_tx_thread_system_suspend+0x204>
 800bef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bef2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	f383 8810 	msr	PRIMASK, r3
}
 800befa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800befc:	4b1b      	ldr	r3, [pc, #108]	; (800bf6c <_tx_thread_system_suspend+0x228>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d022      	beq.n	800bf4c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bf06:	4b15      	ldr	r3, [pc, #84]	; (800bf5c <_tx_thread_system_suspend+0x218>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800bf0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d11c      	bne.n	800bf4c <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bf12:	4b17      	ldr	r3, [pc, #92]	; (800bf70 <_tx_thread_system_suspend+0x22c>)
 800bf14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf18:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf1a:	f3ef 8305 	mrs	r3, IPSR
 800bf1e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bf20:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10c      	bne.n	800bf40 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf26:	f3ef 8310 	mrs	r3, PRIMASK
 800bf2a:	617b      	str	r3, [r7, #20]
    return(posture);
 800bf2c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800bf2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bf30:	b662      	cpsie	i
}
 800bf32:	bf00      	nop
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f383 8810 	msr	PRIMASK, r3
}
 800bf3e:	bf00      	nop
}
 800bf40:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800bf42:	e003      	b.n	800bf4c <_tx_thread_system_suspend+0x208>
                return;
 800bf44:	bf00      	nop
 800bf46:	e002      	b.n	800bf4e <_tx_thread_system_suspend+0x20a>
            return;
 800bf48:	bf00      	nop
 800bf4a:	e000      	b.n	800bf4e <_tx_thread_system_suspend+0x20a>
    return;
 800bf4c:	bf00      	nop
}
 800bf4e:	3778      	adds	r7, #120	; 0x78
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	2004cd18 	.word	0x2004cd18
 800bf58:	2004d31c 	.word	0x2004d31c
 800bf5c:	2004cdb0 	.word	0x2004cdb0
 800bf60:	2004cd30 	.word	0x2004cd30
 800bf64:	2004cd28 	.word	0x2004cd28
 800bf68:	2004cd2c 	.word	0x2004cd2c
 800bf6c:	2004cd1c 	.word	0x2004cd1c
 800bf70:	e000ed04 	.word	0xe000ed04

0800bf74 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b087      	sub	sp, #28
 800bf78:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bf7a:	4b21      	ldr	r3, [pc, #132]	; (800c000 <_tx_thread_time_slice+0x8c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf80:	f3ef 8310 	mrs	r3, PRIMASK
 800bf84:	60fb      	str	r3, [r7, #12]
    return(posture);
 800bf86:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800bf88:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bf8a:	b672      	cpsid	i
    return(int_posture);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800bf8e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800bf90:	4b1c      	ldr	r3, [pc, #112]	; (800c004 <_tx_thread_time_slice+0x90>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d024      	beq.n	800bfe6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d120      	bne.n	800bfe6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	69da      	ldr	r2, [r3, #28]
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	699b      	ldr	r3, [r3, #24]
 800bfb0:	4a15      	ldr	r2, [pc, #84]	; (800c008 <_tx_thread_time_slice+0x94>)
 800bfb2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d013      	beq.n	800bfe6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d10d      	bne.n	800bfe6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	6a12      	ldr	r2, [r2, #32]
 800bfd2:	490e      	ldr	r1, [pc, #56]	; (800c00c <_tx_thread_time_slice+0x98>)
 800bfd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800bfd8:	4b0d      	ldr	r3, [pc, #52]	; (800c010 <_tx_thread_time_slice+0x9c>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a0b      	ldr	r2, [pc, #44]	; (800c00c <_tx_thread_time_slice+0x98>)
 800bfde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfe2:	4a0c      	ldr	r2, [pc, #48]	; (800c014 <_tx_thread_time_slice+0xa0>)
 800bfe4:	6013      	str	r3, [r2, #0]
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f383 8810 	msr	PRIMASK, r3
}
 800bff0:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800bff2:	bf00      	nop
 800bff4:	371c      	adds	r7, #28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	2004cd18 	.word	0x2004cd18
 800c004:	2004cdc0 	.word	0x2004cdc0
 800c008:	2004d31c 	.word	0x2004d31c
 800c00c:	2004cd30 	.word	0x2004cd30
 800c010:	2004cd2c 	.word	0x2004cd2c
 800c014:	2004cd1c 	.word	0x2004cd1c

0800c018 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c024:	f3ef 8310 	mrs	r3, PRIMASK
 800c028:	617b      	str	r3, [r7, #20]
    return(posture);
 800c02a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c02c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c02e:	b672      	cpsid	i
    return(int_posture);
 800c030:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800c032:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c038:	2b04      	cmp	r3, #4
 800c03a:	d10e      	bne.n	800c05a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800c03c:	4b13      	ldr	r3, [pc, #76]	; (800c08c <_tx_thread_timeout+0x74>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	3301      	adds	r3, #1
 800c042:	4a12      	ldr	r2, [pc, #72]	; (800c08c <_tx_thread_timeout+0x74>)
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	6a3b      	ldr	r3, [r7, #32]
 800c048:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f383 8810 	msr	PRIMASK, r3
}
 800c050:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c054:	f7ff fd76 	bl	800bb44 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c058:	e013      	b.n	800c082 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c05e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c066:	61bb      	str	r3, [r7, #24]
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	f383 8810 	msr	PRIMASK, r3
}
 800c072:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d003      	beq.n	800c082 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	69b9      	ldr	r1, [r7, #24]
 800c07e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c080:	4798      	blx	r3
}
 800c082:	bf00      	nop
 800c084:	3728      	adds	r7, #40	; 0x28
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	2004cdb0 	.word	0x2004cdb0

0800c090 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c096:	f3ef 8310 	mrs	r3, PRIMASK
 800c09a:	607b      	str	r3, [r7, #4]
    return(posture);
 800c09c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c09e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c0a0:	b672      	cpsid	i
    return(int_posture);
 800c0a2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800c0a4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800c0a6:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <_tx_timer_expiration_process+0x3c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	4a07      	ldr	r2, [pc, #28]	; (800c0cc <_tx_timer_expiration_process+0x3c>)
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	f383 8810 	msr	PRIMASK, r3
}
 800c0ba:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800c0bc:	4804      	ldr	r0, [pc, #16]	; (800c0d0 <_tx_timer_expiration_process+0x40>)
 800c0be:	f7ff fd41 	bl	800bb44 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c0c2:	bf00      	nop
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	2004cdb0 	.word	0x2004cdb0
 800c0d0:	2004ce60 	.word	0x2004ce60

0800c0d4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800c0d4:	b590      	push	{r4, r7, lr}
 800c0d6:	b089      	sub	sp, #36	; 0x24
 800c0d8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800c0da:	4b28      	ldr	r3, [pc, #160]	; (800c17c <_tx_timer_initialize+0xa8>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800c0e0:	4b27      	ldr	r3, [pc, #156]	; (800c180 <_tx_timer_initialize+0xac>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c0e6:	4b27      	ldr	r3, [pc, #156]	; (800c184 <_tx_timer_initialize+0xb0>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800c0ec:	4b26      	ldr	r3, [pc, #152]	; (800c188 <_tx_timer_initialize+0xb4>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800c0f2:	4b26      	ldr	r3, [pc, #152]	; (800c18c <_tx_timer_initialize+0xb8>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800c0f8:	2280      	movs	r2, #128	; 0x80
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	4824      	ldr	r0, [pc, #144]	; (800c190 <_tx_timer_initialize+0xbc>)
 800c0fe:	f019 fc34 	bl	802596a <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800c102:	4b24      	ldr	r3, [pc, #144]	; (800c194 <_tx_timer_initialize+0xc0>)
 800c104:	4a22      	ldr	r2, [pc, #136]	; (800c190 <_tx_timer_initialize+0xbc>)
 800c106:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800c108:	4b23      	ldr	r3, [pc, #140]	; (800c198 <_tx_timer_initialize+0xc4>)
 800c10a:	4a21      	ldr	r2, [pc, #132]	; (800c190 <_tx_timer_initialize+0xbc>)
 800c10c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800c10e:	4b23      	ldr	r3, [pc, #140]	; (800c19c <_tx_timer_initialize+0xc8>)
 800c110:	4a23      	ldr	r2, [pc, #140]	; (800c1a0 <_tx_timer_initialize+0xcc>)
 800c112:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800c114:	4b21      	ldr	r3, [pc, #132]	; (800c19c <_tx_timer_initialize+0xc8>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	3304      	adds	r3, #4
 800c11a:	4a20      	ldr	r2, [pc, #128]	; (800c19c <_tx_timer_initialize+0xc8>)
 800c11c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800c11e:	4b21      	ldr	r3, [pc, #132]	; (800c1a4 <_tx_timer_initialize+0xd0>)
 800c120:	4a21      	ldr	r2, [pc, #132]	; (800c1a8 <_tx_timer_initialize+0xd4>)
 800c122:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800c124:	4b21      	ldr	r3, [pc, #132]	; (800c1ac <_tx_timer_initialize+0xd8>)
 800c126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c12a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800c12c:	4b20      	ldr	r3, [pc, #128]	; (800c1b0 <_tx_timer_initialize+0xdc>)
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800c132:	4b1c      	ldr	r3, [pc, #112]	; (800c1a4 <_tx_timer_initialize+0xd0>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a1d      	ldr	r2, [pc, #116]	; (800c1ac <_tx_timer_initialize+0xd8>)
 800c138:	6812      	ldr	r2, [r2, #0]
 800c13a:	491d      	ldr	r1, [pc, #116]	; (800c1b0 <_tx_timer_initialize+0xdc>)
 800c13c:	6809      	ldr	r1, [r1, #0]
 800c13e:	481c      	ldr	r0, [pc, #112]	; (800c1b0 <_tx_timer_initialize+0xdc>)
 800c140:	6800      	ldr	r0, [r0, #0]
 800c142:	2400      	movs	r4, #0
 800c144:	9405      	str	r4, [sp, #20]
 800c146:	2400      	movs	r4, #0
 800c148:	9404      	str	r4, [sp, #16]
 800c14a:	9003      	str	r0, [sp, #12]
 800c14c:	9102      	str	r1, [sp, #8]
 800c14e:	9201      	str	r2, [sp, #4]
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	4b18      	ldr	r3, [pc, #96]	; (800c1b4 <_tx_timer_initialize+0xe0>)
 800c154:	4a18      	ldr	r2, [pc, #96]	; (800c1b8 <_tx_timer_initialize+0xe4>)
 800c156:	4919      	ldr	r1, [pc, #100]	; (800c1bc <_tx_timer_initialize+0xe8>)
 800c158:	4819      	ldr	r0, [pc, #100]	; (800c1c0 <_tx_timer_initialize+0xec>)
 800c15a:	f7ff fb3b 	bl	800b7d4 <_tx_thread_create>
 800c15e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1e5      	bne.n	800c132 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800c166:	4b17      	ldr	r3, [pc, #92]	; (800c1c4 <_tx_timer_initialize+0xf0>)
 800c168:	2200      	movs	r2, #0
 800c16a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800c16c:	4b16      	ldr	r3, [pc, #88]	; (800c1c8 <_tx_timer_initialize+0xf4>)
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800c172:	bf00      	nop
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	bd90      	pop	{r4, r7, pc}
 800c17a:	bf00      	nop
 800c17c:	2004cdbc 	.word	0x2004cdbc
 800c180:	2004d31c 	.word	0x2004d31c
 800c184:	2004cdc0 	.word	0x2004cdc0
 800c188:	2004ce50 	.word	0x2004ce50
 800c18c:	2004ce5c 	.word	0x2004ce5c
 800c190:	2004cdc4 	.word	0x2004cdc4
 800c194:	2004ce44 	.word	0x2004ce44
 800c198:	2004ce4c 	.word	0x2004ce4c
 800c19c:	2004ce48 	.word	0x2004ce48
 800c1a0:	2004ce40 	.word	0x2004ce40
 800c1a4:	2004cf10 	.word	0x2004cf10
 800c1a8:	2004cf1c 	.word	0x2004cf1c
 800c1ac:	2004cf14 	.word	0x2004cf14
 800c1b0:	2004cf18 	.word	0x2004cf18
 800c1b4:	4154494d 	.word	0x4154494d
 800c1b8:	0800c301 	.word	0x0800c301
 800c1bc:	08026a1c 	.word	0x08026a1c
 800c1c0:	2004ce60 	.word	0x2004ce60
 800c1c4:	2004ce54 	.word	0x2004ce54
 800c1c8:	2004ce58 	.word	0x2004ce58

0800c1cc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b089      	sub	sp, #36	; 0x24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d04a      	beq.n	800c276 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	d046      	beq.n	800c276 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d142      	bne.n	800c276 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	2b20      	cmp	r3, #32
 800c1f4:	d902      	bls.n	800c1fc <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800c1f6:	231f      	movs	r3, #31
 800c1f8:	61bb      	str	r3, [r7, #24]
 800c1fa:	e002      	b.n	800c202 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	3b01      	subs	r3, #1
 800c200:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800c202:	4b20      	ldr	r3, [pc, #128]	; (800c284 <_tx_timer_system_activate+0xb8>)
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800c20e:	4b1e      	ldr	r3, [pc, #120]	; (800c288 <_tx_timer_system_activate+0xbc>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	69fa      	ldr	r2, [r7, #28]
 800c214:	429a      	cmp	r2, r3
 800c216:	d30b      	bcc.n	800c230 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800c218:	4b1b      	ldr	r3, [pc, #108]	; (800c288 <_tx_timer_system_activate+0xbc>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	69fa      	ldr	r2, [r7, #28]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	109b      	asrs	r3, r3, #2
 800c222:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800c224:	4b19      	ldr	r3, [pc, #100]	; (800c28c <_tx_timer_system_activate+0xc0>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d109      	bne.n	800c24c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	e011      	b.n	800c270 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	695b      	ldr	r3, [r3, #20]
 800c256:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	69fa      	ldr	r2, [r7, #28]
 800c274:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800c276:	bf00      	nop
 800c278:	3724      	adds	r7, #36	; 0x24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	2004ce4c 	.word	0x2004ce4c
 800c288:	2004ce48 	.word	0x2004ce48
 800c28c:	2004ce44 	.word	0x2004ce44

0800c290 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c290:	b480      	push	{r7}
 800c292:	b087      	sub	sp, #28
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d026      	beq.n	800c2f2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d108      	bne.n	800c2c4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d117      	bne.n	800c2ec <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	e013      	b.n	800c2ec <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	693a      	ldr	r2, [r7, #16]
 800c2d4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d105      	bne.n	800c2ec <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	619a      	str	r2, [r3, #24]
    }
}
 800c2f2:	bf00      	nop
 800c2f4:	371c      	adds	r7, #28
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
	...

0800c300 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b098      	sub	sp, #96	; 0x60
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800c308:	2300      	movs	r3, #0
 800c30a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a73      	ldr	r2, [pc, #460]	; (800c4dc <_tx_timer_thread_entry+0x1dc>)
 800c310:	4293      	cmp	r3, r2
 800c312:	f040 80de 	bne.w	800c4d2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c316:	f3ef 8310 	mrs	r3, PRIMASK
 800c31a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800c31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c320:	b672      	cpsid	i
    return(int_posture);
 800c322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800c324:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800c326:	4b6e      	ldr	r3, [pc, #440]	; (800c4e0 <_tx_timer_thread_entry+0x1e0>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f107 020c 	add.w	r2, r7, #12
 800c33a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800c33c:	4b68      	ldr	r3, [pc, #416]	; (800c4e0 <_tx_timer_thread_entry+0x1e0>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2200      	movs	r2, #0
 800c342:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800c344:	4b66      	ldr	r3, [pc, #408]	; (800c4e0 <_tx_timer_thread_entry+0x1e0>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	3304      	adds	r3, #4
 800c34a:	4a65      	ldr	r2, [pc, #404]	; (800c4e0 <_tx_timer_thread_entry+0x1e0>)
 800c34c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800c34e:	4b64      	ldr	r3, [pc, #400]	; (800c4e0 <_tx_timer_thread_entry+0x1e0>)
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	4b64      	ldr	r3, [pc, #400]	; (800c4e4 <_tx_timer_thread_entry+0x1e4>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d103      	bne.n	800c362 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800c35a:	4b63      	ldr	r3, [pc, #396]	; (800c4e8 <_tx_timer_thread_entry+0x1e8>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a60      	ldr	r2, [pc, #384]	; (800c4e0 <_tx_timer_thread_entry+0x1e0>)
 800c360:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800c362:	4b62      	ldr	r3, [pc, #392]	; (800c4ec <_tx_timer_thread_entry+0x1ec>)
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c36a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	f383 8810 	msr	PRIMASK, r3
}
 800c372:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c374:	f3ef 8310 	mrs	r3, PRIMASK
 800c378:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800c37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800c37c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c37e:	b672      	cpsid	i
    return(int_posture);
 800c380:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c382:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800c384:	e07f      	b.n	800c486 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800c390:	2300      	movs	r3, #0
 800c392:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800c394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c398:	429a      	cmp	r2, r3
 800c39a:	d102      	bne.n	800c3a2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800c39c:	2300      	movs	r3, #0
 800c39e:	60fb      	str	r3, [r7, #12]
 800c3a0:	e00e      	b.n	800c3c0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800c3a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c3a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3ac:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3b2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800c3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3b6:	f107 020c 	add.w	r2, r7, #12
 800c3ba:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800c3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3be:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b20      	cmp	r3, #32
 800c3c6:	d911      	bls.n	800c3ec <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c3c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800c3d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3d2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3da:	f107 0208 	add.w	r2, r7, #8
 800c3de:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800c3e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3e4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800c3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e8:	60bb      	str	r3, [r7, #8]
 800c3ea:	e01a      	b.n	800c422 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800c3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800c3f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800c3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3fe:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800c400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d009      	beq.n	800c41c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c40a:	f107 0208 	add.w	r2, r7, #8
 800c40e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800c410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c414:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800c416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c418:	60bb      	str	r3, [r7, #8]
 800c41a:	e002      	b.n	800c422 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800c41c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c41e:	2200      	movs	r2, #0
 800c420:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800c422:	4a33      	ldr	r2, [pc, #204]	; (800c4f0 <_tx_timer_thread_entry+0x1f0>)
 800c424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c42a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42e:	f383 8810 	msr	PRIMASK, r3
}
 800c432:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800c434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c436:	2b00      	cmp	r3, #0
 800c438:	d002      	beq.n	800c440 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800c43a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c43c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c43e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c440:	f3ef 8310 	mrs	r3, PRIMASK
 800c444:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c448:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c44a:	b672      	cpsid	i
    return(int_posture);
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c44e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800c450:	4b27      	ldr	r3, [pc, #156]	; (800c4f0 <_tx_timer_thread_entry+0x1f0>)
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d105      	bne.n	800c46a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800c45e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c460:	2200      	movs	r2, #0
 800c462:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800c464:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c466:	f7ff feb1 	bl	800c1cc <_tx_timer_system_activate>
 800c46a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c46c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	f383 8810 	msr	PRIMASK, r3
}
 800c474:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c476:	f3ef 8310 	mrs	r3, PRIMASK
 800c47a:	623b      	str	r3, [r7, #32]
    return(posture);
 800c47c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c47e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c480:	b672      	cpsid	i
    return(int_posture);
 800c482:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c484:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f47f af7c 	bne.w	800c386 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800c48e:	4b17      	ldr	r3, [pc, #92]	; (800c4ec <_tx_timer_thread_entry+0x1ec>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d116      	bne.n	800c4c4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800c496:	4b17      	ldr	r3, [pc, #92]	; (800c4f4 <_tx_timer_thread_entry+0x1f4>)
 800c498:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c49a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c49c:	2203      	movs	r2, #3
 800c49e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c4a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800c4a6:	4b14      	ldr	r3, [pc, #80]	; (800c4f8 <_tx_timer_thread_entry+0x1f8>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	4a12      	ldr	r2, [pc, #72]	; (800c4f8 <_tx_timer_thread_entry+0x1f8>)
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f383 8810 	msr	PRIMASK, r3
}
 800c4ba:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c4bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c4be:	f7ff fc41 	bl	800bd44 <_tx_thread_system_suspend>
 800c4c2:	e728      	b.n	800c316 <_tx_timer_thread_entry+0x16>
 800c4c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f383 8810 	msr	PRIMASK, r3
}
 800c4ce:	bf00      	nop
            TX_DISABLE
 800c4d0:	e721      	b.n	800c316 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800c4d2:	bf00      	nop
 800c4d4:	3760      	adds	r7, #96	; 0x60
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	4154494d 	.word	0x4154494d
 800c4e0:	2004ce4c 	.word	0x2004ce4c
 800c4e4:	2004ce48 	.word	0x2004ce48
 800c4e8:	2004ce44 	.word	0x2004ce44
 800c4ec:	2004ce50 	.word	0x2004ce50
 800c4f0:	2004ce5c 	.word	0x2004ce5c
 800c4f4:	2004ce60 	.word	0x2004ce60
 800c4f8:	2004cdb0 	.word	0x2004cdb0

0800c4fc <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08a      	sub	sp, #40	; 0x28
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
 800c508:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c50a:	2300      	movs	r3, #0
 800c50c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c514:	2302      	movs	r3, #2
 800c516:	627b      	str	r3, [r7, #36]	; 0x24
 800c518:	e029      	b.n	800c56e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a2d      	ldr	r2, [pc, #180]	; (800c5d4 <_txe_byte_allocate+0xd8>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d002      	beq.n	800c52a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c524:	2302      	movs	r3, #2
 800c526:	627b      	str	r3, [r7, #36]	; 0x24
 800c528:	e021      	b.n	800c56e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d102      	bne.n	800c536 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800c530:	2303      	movs	r3, #3
 800c532:	627b      	str	r3, [r7, #36]	; 0x24
 800c534:	e01b      	b.n	800c56e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d102      	bne.n	800c542 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800c53c:	2305      	movs	r3, #5
 800c53e:	627b      	str	r3, [r7, #36]	; 0x24
 800c540:	e015      	b.n	800c56e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	69db      	ldr	r3, [r3, #28]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d902      	bls.n	800c552 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800c54c:	2305      	movs	r3, #5
 800c54e:	627b      	str	r3, [r7, #36]	; 0x24
 800c550:	e00d      	b.n	800c56e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00a      	beq.n	800c56e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c558:	f3ef 8305 	mrs	r3, IPSR
 800c55c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c55e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c560:	4b1d      	ldr	r3, [pc, #116]	; (800c5d8 <_txe_byte_allocate+0xdc>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4313      	orrs	r3, r2
 800c566:	2b00      	cmp	r3, #0
 800c568:	d001      	beq.n	800c56e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c56a:	2304      	movs	r3, #4
 800c56c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800c56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c570:	2b00      	cmp	r3, #0
 800c572:	d108      	bne.n	800c586 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c574:	4b19      	ldr	r3, [pc, #100]	; (800c5dc <_txe_byte_allocate+0xe0>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c57a:	6a3b      	ldr	r3, [r7, #32]
 800c57c:	4a18      	ldr	r2, [pc, #96]	; (800c5e0 <_txe_byte_allocate+0xe4>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d101      	bne.n	800c586 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c582:	2313      	movs	r3, #19
 800c584:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d114      	bne.n	800c5b6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c58c:	f3ef 8305 	mrs	r3, IPSR
 800c590:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c592:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c594:	4b10      	ldr	r3, [pc, #64]	; (800c5d8 <_txe_byte_allocate+0xdc>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4313      	orrs	r3, r2
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00b      	beq.n	800c5b6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c59e:	f3ef 8305 	mrs	r3, IPSR
 800c5a2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c5a4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c5a6:	4b0c      	ldr	r3, [pc, #48]	; (800c5d8 <_txe_byte_allocate+0xdc>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c5b0:	d201      	bcs.n	800c5b6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c5b2:	2313      	movs	r3, #19
 800c5b4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d106      	bne.n	800c5ca <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f7fe f93a 	bl	800a83c <_tx_byte_allocate>
 800c5c8:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3728      	adds	r7, #40	; 0x28
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	42595445 	.word	0x42595445
 800c5d8:	20025814 	.word	0x20025814
 800c5dc:	2004cd18 	.word	0x2004cd18
 800c5e0:	2004ce60 	.word	0x2004ce60

0800c5e4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b092      	sub	sp, #72	; 0x48
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
 800c5f0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d102      	bne.n	800c602 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	647b      	str	r3, [r7, #68]	; 0x44
 800c600:	e075      	b.n	800c6ee <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800c602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c604:	2b34      	cmp	r3, #52	; 0x34
 800c606:	d002      	beq.n	800c60e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c608:	2302      	movs	r3, #2
 800c60a:	647b      	str	r3, [r7, #68]	; 0x44
 800c60c:	e06f      	b.n	800c6ee <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c60e:	f3ef 8310 	mrs	r3, PRIMASK
 800c612:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c616:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c618:	b672      	cpsid	i
    return(int_posture);
 800c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c61c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c61e:	4b3b      	ldr	r3, [pc, #236]	; (800c70c <_txe_byte_pool_create+0x128>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3301      	adds	r3, #1
 800c624:	4a39      	ldr	r2, [pc, #228]	; (800c70c <_txe_byte_pool_create+0x128>)
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	f383 8810 	msr	PRIMASK, r3
}
 800c632:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800c634:	4b36      	ldr	r3, [pc, #216]	; (800c710 <_txe_byte_pool_create+0x12c>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c63a:	2300      	movs	r3, #0
 800c63c:	643b      	str	r3, [r7, #64]	; 0x40
 800c63e:	e009      	b.n	800c654 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c644:	429a      	cmp	r2, r3
 800c646:	d00b      	beq.n	800c660 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800c648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c64e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c650:	3301      	adds	r3, #1
 800c652:	643b      	str	r3, [r7, #64]	; 0x40
 800c654:	4b2f      	ldr	r3, [pc, #188]	; (800c714 <_txe_byte_pool_create+0x130>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d3f0      	bcc.n	800c640 <_txe_byte_pool_create+0x5c>
 800c65e:	e000      	b.n	800c662 <_txe_byte_pool_create+0x7e>
                break;
 800c660:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c662:	f3ef 8310 	mrs	r3, PRIMASK
 800c666:	623b      	str	r3, [r7, #32]
    return(posture);
 800c668:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c66a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c66c:	b672      	cpsid	i
    return(int_posture);
 800c66e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c670:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c672:	4b26      	ldr	r3, [pc, #152]	; (800c70c <_txe_byte_pool_create+0x128>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	3b01      	subs	r3, #1
 800c678:	4a24      	ldr	r2, [pc, #144]	; (800c70c <_txe_byte_pool_create+0x128>)
 800c67a:	6013      	str	r3, [r2, #0]
 800c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c682:	f383 8810 	msr	PRIMASK, r3
}
 800c686:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c688:	f7ff fa22 	bl	800bad0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c690:	429a      	cmp	r2, r3
 800c692:	d102      	bne.n	800c69a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800c694:	2302      	movs	r3, #2
 800c696:	647b      	str	r3, [r7, #68]	; 0x44
 800c698:	e029      	b.n	800c6ee <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c6a4:	e023      	b.n	800c6ee <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2b63      	cmp	r3, #99	; 0x63
 800c6aa:	d802      	bhi.n	800c6b2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800c6ac:	2305      	movs	r3, #5
 800c6ae:	647b      	str	r3, [r7, #68]	; 0x44
 800c6b0:	e01d      	b.n	800c6ee <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c6b2:	4b19      	ldr	r3, [pc, #100]	; (800c718 <_txe_byte_pool_create+0x134>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ba:	4a18      	ldr	r2, [pc, #96]	; (800c71c <_txe_byte_pool_create+0x138>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d101      	bne.n	800c6c4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c6c0:	2313      	movs	r3, #19
 800c6c2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6c4:	f3ef 8305 	mrs	r3, IPSR
 800c6c8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c6ca:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c6cc:	4b14      	ldr	r3, [pc, #80]	; (800c720 <_txe_byte_pool_create+0x13c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00b      	beq.n	800c6ee <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6d6:	f3ef 8305 	mrs	r3, IPSR
 800c6da:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c6dc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c6de:	4b10      	ldr	r3, [pc, #64]	; (800c720 <_txe_byte_pool_create+0x13c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c6e8:	d201      	bcs.n	800c6ee <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c6ea:	2313      	movs	r3, #19
 800c6ec:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c6ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d106      	bne.n	800c702 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	68b9      	ldr	r1, [r7, #8]
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f7fe f9e0 	bl	800aac0 <_tx_byte_pool_create>
 800c700:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c704:	4618      	mov	r0, r3
 800c706:	3748      	adds	r7, #72	; 0x48
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	2004cdb0 	.word	0x2004cdb0
 800c710:	2004cd08 	.word	0x2004cd08
 800c714:	2004cd0c 	.word	0x2004cd0c
 800c718:	2004cd18 	.word	0x2004cd18
 800c71c:	2004ce60 	.word	0x2004ce60
 800c720:	20025814 	.word	0x20025814

0800c724 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b094      	sub	sp, #80	; 0x50
 800c728:	af02      	add	r7, sp, #8
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
 800c730:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c732:	2300      	movs	r3, #0
 800c734:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d102      	bne.n	800c742 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800c73c:	2309      	movs	r3, #9
 800c73e:	647b      	str	r3, [r7, #68]	; 0x44
 800c740:	e083      	b.n	800c84a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800c742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c744:	2b38      	cmp	r3, #56	; 0x38
 800c746:	d002      	beq.n	800c74e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800c748:	2309      	movs	r3, #9
 800c74a:	647b      	str	r3, [r7, #68]	; 0x44
 800c74c:	e07d      	b.n	800c84a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c74e:	f3ef 8310 	mrs	r3, PRIMASK
 800c752:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c756:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c758:	b672      	cpsid	i
    return(int_posture);
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c75c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c75e:	4b43      	ldr	r3, [pc, #268]	; (800c86c <_txe_queue_create+0x148>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	4a41      	ldr	r2, [pc, #260]	; (800c86c <_txe_queue_create+0x148>)
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	f383 8810 	msr	PRIMASK, r3
}
 800c772:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800c774:	4b3e      	ldr	r3, [pc, #248]	; (800c870 <_txe_queue_create+0x14c>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800c77a:	2300      	movs	r3, #0
 800c77c:	643b      	str	r3, [r7, #64]	; 0x40
 800c77e:	e009      	b.n	800c794 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c784:	429a      	cmp	r2, r3
 800c786:	d00b      	beq.n	800c7a0 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800c788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800c78e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c790:	3301      	adds	r3, #1
 800c792:	643b      	str	r3, [r7, #64]	; 0x40
 800c794:	4b37      	ldr	r3, [pc, #220]	; (800c874 <_txe_queue_create+0x150>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d3f0      	bcc.n	800c780 <_txe_queue_create+0x5c>
 800c79e:	e000      	b.n	800c7a2 <_txe_queue_create+0x7e>
                break;
 800c7a0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c7a6:	623b      	str	r3, [r7, #32]
    return(posture);
 800c7a8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c7aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c7ac:	b672      	cpsid	i
    return(int_posture);
 800c7ae:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c7b0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c7b2:	4b2e      	ldr	r3, [pc, #184]	; (800c86c <_txe_queue_create+0x148>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	4a2c      	ldr	r2, [pc, #176]	; (800c86c <_txe_queue_create+0x148>)
 800c7ba:	6013      	str	r3, [r2, #0]
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	f383 8810 	msr	PRIMASK, r3
}
 800c7c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c7c8:	f7ff f982 	bl	800bad0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d102      	bne.n	800c7da <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800c7d4:	2309      	movs	r3, #9
 800c7d6:	647b      	str	r3, [r7, #68]	; 0x44
 800c7d8:	e037      	b.n	800c84a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d102      	bne.n	800c7e6 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7e4:	e031      	b.n	800c84a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d102      	bne.n	800c7f2 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800c7ec:	2305      	movs	r3, #5
 800c7ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c7f0:	e02b      	b.n	800c84a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b10      	cmp	r3, #16
 800c7f6:	d902      	bls.n	800c7fe <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800c7f8:	2305      	movs	r3, #5
 800c7fa:	647b      	str	r3, [r7, #68]	; 0x44
 800c7fc:	e025      	b.n	800c84a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800c7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c800:	089b      	lsrs	r3, r3, #2
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	429a      	cmp	r2, r3
 800c806:	d902      	bls.n	800c80e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800c808:	2305      	movs	r3, #5
 800c80a:	647b      	str	r3, [r7, #68]	; 0x44
 800c80c:	e01d      	b.n	800c84a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c80e:	4b1a      	ldr	r3, [pc, #104]	; (800c878 <_txe_queue_create+0x154>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c816:	4a19      	ldr	r2, [pc, #100]	; (800c87c <_txe_queue_create+0x158>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d101      	bne.n	800c820 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c81c:	2313      	movs	r3, #19
 800c81e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c820:	f3ef 8305 	mrs	r3, IPSR
 800c824:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c826:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c828:	4b15      	ldr	r3, [pc, #84]	; (800c880 <_txe_queue_create+0x15c>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00b      	beq.n	800c84a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c832:	f3ef 8305 	mrs	r3, IPSR
 800c836:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c838:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c83a:	4b11      	ldr	r3, [pc, #68]	; (800c880 <_txe_queue_create+0x15c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4313      	orrs	r3, r2
 800c840:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c844:	d201      	bcs.n	800c84a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c846:	2313      	movs	r3, #19
 800c848:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d108      	bne.n	800c862 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800c850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	68b9      	ldr	r1, [r7, #8]
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f7fe fbc6 	bl	800afec <_tx_queue_create>
 800c860:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c864:	4618      	mov	r0, r3
 800c866:	3748      	adds	r7, #72	; 0x48
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	2004cdb0 	.word	0x2004cdb0
 800c870:	2004cce8 	.word	0x2004cce8
 800c874:	2004ccec 	.word	0x2004ccec
 800c878:	2004cd18 	.word	0x2004cd18
 800c87c:	2004ce60 	.word	0x2004ce60
 800c880:	20025814 	.word	0x20025814

0800c884 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b088      	sub	sp, #32
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c890:	2300      	movs	r3, #0
 800c892:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d102      	bne.n	800c8a0 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800c89a:	2309      	movs	r3, #9
 800c89c:	61fb      	str	r3, [r7, #28]
 800c89e:	e025      	b.n	800c8ec <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a18      	ldr	r2, [pc, #96]	; (800c908 <_txe_queue_receive+0x84>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d002      	beq.n	800c8b0 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800c8aa:	2309      	movs	r3, #9
 800c8ac:	61fb      	str	r3, [r7, #28]
 800c8ae:	e01d      	b.n	800c8ec <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d102      	bne.n	800c8bc <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	61fb      	str	r3, [r7, #28]
 800c8ba:	e017      	b.n	800c8ec <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d014      	beq.n	800c8ec <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c8c2:	f3ef 8305 	mrs	r3, IPSR
 800c8c6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c8c8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c8ca:	4b10      	ldr	r3, [pc, #64]	; (800c90c <_txe_queue_receive+0x88>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c8d4:	2304      	movs	r3, #4
 800c8d6:	61fb      	str	r3, [r7, #28]
 800c8d8:	e008      	b.n	800c8ec <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c8da:	4b0d      	ldr	r3, [pc, #52]	; (800c910 <_txe_queue_receive+0x8c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	4a0c      	ldr	r2, [pc, #48]	; (800c914 <_txe_queue_receive+0x90>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d101      	bne.n	800c8ec <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c8e8:	2304      	movs	r3, #4
 800c8ea:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d105      	bne.n	800c8fe <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f7fe fbec 	bl	800b0d4 <_tx_queue_receive>
 800c8fc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800c8fe:	69fb      	ldr	r3, [r7, #28]
}
 800c900:	4618      	mov	r0, r3
 800c902:	3720      	adds	r7, #32
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	51554555 	.word	0x51554555
 800c90c:	20025814 	.word	0x20025814
 800c910:	2004cd18 	.word	0x2004cd18
 800c914:	2004ce60 	.word	0x2004ce60

0800c918 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b092      	sub	sp, #72	; 0x48
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
 800c924:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c926:	2300      	movs	r3, #0
 800c928:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d102      	bne.n	800c936 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c930:	230c      	movs	r3, #12
 800c932:	647b      	str	r3, [r7, #68]	; 0x44
 800c934:	e054      	b.n	800c9e0 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b1c      	cmp	r3, #28
 800c93a:	d002      	beq.n	800c942 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c93c:	230c      	movs	r3, #12
 800c93e:	647b      	str	r3, [r7, #68]	; 0x44
 800c940:	e04e      	b.n	800c9e0 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c942:	f3ef 8310 	mrs	r3, PRIMASK
 800c946:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c94a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c94c:	b672      	cpsid	i
    return(int_posture);
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c950:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c952:	4b36      	ldr	r3, [pc, #216]	; (800ca2c <_txe_semaphore_create+0x114>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	4a34      	ldr	r2, [pc, #208]	; (800ca2c <_txe_semaphore_create+0x114>)
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	f383 8810 	msr	PRIMASK, r3
}
 800c966:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800c968:	4b31      	ldr	r3, [pc, #196]	; (800ca30 <_txe_semaphore_create+0x118>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c96e:	2300      	movs	r3, #0
 800c970:	643b      	str	r3, [r7, #64]	; 0x40
 800c972:	e009      	b.n	800c988 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c978:	429a      	cmp	r2, r3
 800c97a:	d00b      	beq.n	800c994 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800c97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c984:	3301      	adds	r3, #1
 800c986:	643b      	str	r3, [r7, #64]	; 0x40
 800c988:	4b2a      	ldr	r3, [pc, #168]	; (800ca34 <_txe_semaphore_create+0x11c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c98e:	429a      	cmp	r2, r3
 800c990:	d3f0      	bcc.n	800c974 <_txe_semaphore_create+0x5c>
 800c992:	e000      	b.n	800c996 <_txe_semaphore_create+0x7e>
                break;
 800c994:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c996:	f3ef 8310 	mrs	r3, PRIMASK
 800c99a:	623b      	str	r3, [r7, #32]
    return(posture);
 800c99c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c99e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9a0:	b672      	cpsid	i
    return(int_posture);
 800c9a2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c9a4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c9a6:	4b21      	ldr	r3, [pc, #132]	; (800ca2c <_txe_semaphore_create+0x114>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	4a1f      	ldr	r2, [pc, #124]	; (800ca2c <_txe_semaphore_create+0x114>)
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c9bc:	f7ff f888 	bl	800bad0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d102      	bne.n	800c9ce <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800c9c8:	230c      	movs	r3, #12
 800c9ca:	647b      	str	r3, [r7, #68]	; 0x44
 800c9cc:	e008      	b.n	800c9e0 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c9ce:	4b1a      	ldr	r3, [pc, #104]	; (800ca38 <_txe_semaphore_create+0x120>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d6:	4a19      	ldr	r2, [pc, #100]	; (800ca3c <_txe_semaphore_create+0x124>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d101      	bne.n	800c9e0 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c9dc:	2313      	movs	r3, #19
 800c9de:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c9e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d114      	bne.n	800ca10 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9e6:	f3ef 8305 	mrs	r3, IPSR
 800c9ea:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c9ec:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c9ee:	4b14      	ldr	r3, [pc, #80]	; (800ca40 <_txe_semaphore_create+0x128>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00b      	beq.n	800ca10 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9f8:	f3ef 8305 	mrs	r3, IPSR
 800c9fc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c9fe:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ca00:	4b0f      	ldr	r3, [pc, #60]	; (800ca40 <_txe_semaphore_create+0x128>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ca0a:	d201      	bcs.n	800ca10 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ca0c:	2313      	movs	r3, #19
 800ca0e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ca10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d105      	bne.n	800ca22 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	68b9      	ldr	r1, [r7, #8]
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7fe fd9e 	bl	800b55c <_tx_semaphore_create>
 800ca20:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800ca22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3748      	adds	r7, #72	; 0x48
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	2004cdb0 	.word	0x2004cdb0
 800ca30:	2004cce0 	.word	0x2004cce0
 800ca34:	2004cce4 	.word	0x2004cce4
 800ca38:	2004cd18 	.word	0x2004cd18
 800ca3c:	2004ce60 	.word	0x2004ce60
 800ca40:	20025814 	.word	0x20025814

0800ca44 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d102      	bne.n	800ca5e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ca58:	230c      	movs	r3, #12
 800ca5a:	617b      	str	r3, [r7, #20]
 800ca5c:	e01f      	b.n	800ca9e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a15      	ldr	r2, [pc, #84]	; (800cab8 <_txe_semaphore_get+0x74>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d002      	beq.n	800ca6e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ca68:	230c      	movs	r3, #12
 800ca6a:	617b      	str	r3, [r7, #20]
 800ca6c:	e017      	b.n	800ca9e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d014      	beq.n	800ca9e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca74:	f3ef 8305 	mrs	r3, IPSR
 800ca78:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ca7a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ca7c:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <_txe_semaphore_get+0x78>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ca86:	2304      	movs	r3, #4
 800ca88:	617b      	str	r3, [r7, #20]
 800ca8a:	e008      	b.n	800ca9e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ca8c:	4b0c      	ldr	r3, [pc, #48]	; (800cac0 <_txe_semaphore_get+0x7c>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	4a0b      	ldr	r2, [pc, #44]	; (800cac4 <_txe_semaphore_get+0x80>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d101      	bne.n	800ca9e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ca9a:	2304      	movs	r3, #4
 800ca9c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d104      	bne.n	800caae <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7fe fdaa 	bl	800b600 <_tx_semaphore_get>
 800caac:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800caae:	697b      	ldr	r3, [r7, #20]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	53454d41 	.word	0x53454d41
 800cabc:	20025814 	.word	0x20025814
 800cac0:	2004cd18 	.word	0x2004cd18
 800cac4:	2004ce60 	.word	0x2004ce60

0800cac8 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d102      	bne.n	800cadc <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cad6:	230c      	movs	r3, #12
 800cad8:	60fb      	str	r3, [r7, #12]
 800cada:	e00b      	b.n	800caf4 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a07      	ldr	r2, [pc, #28]	; (800cb00 <_txe_semaphore_put+0x38>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d002      	beq.n	800caec <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cae6:	230c      	movs	r3, #12
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	e003      	b.n	800caf4 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7fe fe19 	bl	800b724 <_tx_semaphore_put>
 800caf2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800caf4:	68fb      	ldr	r3, [r7, #12]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	53454d41 	.word	0x53454d41

0800cb04 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b09a      	sub	sp, #104	; 0x68
 800cb08:	af06      	add	r7, sp, #24
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cb12:	2300      	movs	r3, #0
 800cb14:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d102      	bne.n	800cb22 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cb1c:	230e      	movs	r3, #14
 800cb1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb20:	e0bb      	b.n	800cc9a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800cb22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb24:	2bb0      	cmp	r3, #176	; 0xb0
 800cb26:	d002      	beq.n	800cb2e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cb28:	230e      	movs	r3, #14
 800cb2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb2c:	e0b5      	b.n	800cc9a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb2e:	f3ef 8310 	mrs	r3, PRIMASK
 800cb32:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800cb36:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb38:	b672      	cpsid	i
    return(int_posture);
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cb3c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cb3e:	4b64      	ldr	r3, [pc, #400]	; (800ccd0 <_txe_thread_create+0x1cc>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3301      	adds	r3, #1
 800cb44:	4a62      	ldr	r2, [pc, #392]	; (800ccd0 <_txe_thread_create+0x1cc>)
 800cb46:	6013      	str	r3, [r2, #0]
 800cb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	f383 8810 	msr	PRIMASK, r3
}
 800cb52:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800cb54:	2300      	movs	r3, #0
 800cb56:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800cb58:	4b5e      	ldr	r3, [pc, #376]	; (800ccd4 <_txe_thread_create+0x1d0>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cb5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb60:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800cb62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb64:	3b01      	subs	r3, #1
 800cb66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb68:	4413      	add	r3, r2
 800cb6a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800cb70:	2300      	movs	r3, #0
 800cb72:	647b      	str	r3, [r7, #68]	; 0x44
 800cb74:	e02b      	b.n	800cbce <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d101      	bne.n	800cb82 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800cb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d028      	beq.n	800cbda <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800cb88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d308      	bcc.n	800cba4 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800cb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d203      	bcs.n	800cba4 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800cba0:	2301      	movs	r3, #1
 800cba2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800cba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d308      	bcc.n	800cbc0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800cbae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d203      	bcs.n	800cbc0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800cbc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbc6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800cbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbca:	3301      	adds	r3, #1
 800cbcc:	647b      	str	r3, [r7, #68]	; 0x44
 800cbce:	4b42      	ldr	r3, [pc, #264]	; (800ccd8 <_txe_thread_create+0x1d4>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d3ce      	bcc.n	800cb76 <_txe_thread_create+0x72>
 800cbd8:	e000      	b.n	800cbdc <_txe_thread_create+0xd8>
                break;
 800cbda:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbdc:	f3ef 8310 	mrs	r3, PRIMASK
 800cbe0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cbe2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cbe4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbe6:	b672      	cpsid	i
    return(int_posture);
 800cbe8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cbea:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cbec:	4b38      	ldr	r3, [pc, #224]	; (800ccd0 <_txe_thread_create+0x1cc>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	4a37      	ldr	r2, [pc, #220]	; (800ccd0 <_txe_thread_create+0x1cc>)
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbfa:	6a3b      	ldr	r3, [r7, #32]
 800cbfc:	f383 8810 	msr	PRIMASK, r3
}
 800cc00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cc02:	f7fe ff65 	bl	800bad0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d102      	bne.n	800cc14 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800cc0e:	230e      	movs	r3, #14
 800cc10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc12:	e042      	b.n	800cc9a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800cc14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d102      	bne.n	800cc20 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc1e:	e03c      	b.n	800cc9a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d102      	bne.n	800cc2c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800cc26:	2303      	movs	r3, #3
 800cc28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc2a:	e036      	b.n	800cc9a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800cc2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc2e:	2bc7      	cmp	r3, #199	; 0xc7
 800cc30:	d802      	bhi.n	800cc38 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800cc32:	2305      	movs	r3, #5
 800cc34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc36:	e030      	b.n	800cc9a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800cc38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc3a:	2b1f      	cmp	r3, #31
 800cc3c:	d902      	bls.n	800cc44 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800cc3e:	230f      	movs	r3, #15
 800cc40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc42:	e02a      	b.n	800cc9a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800cc44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d902      	bls.n	800cc52 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800cc4c:	2318      	movs	r3, #24
 800cc4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc50:	e023      	b.n	800cc9a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800cc52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d902      	bls.n	800cc5e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800cc58:	2310      	movs	r3, #16
 800cc5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc5c:	e01d      	b.n	800cc9a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800cc5e:	4b1f      	ldr	r3, [pc, #124]	; (800ccdc <_txe_thread_create+0x1d8>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800cc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc66:	4a1e      	ldr	r2, [pc, #120]	; (800cce0 <_txe_thread_create+0x1dc>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d101      	bne.n	800cc70 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cc6c:	2313      	movs	r3, #19
 800cc6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc70:	f3ef 8305 	mrs	r3, IPSR
 800cc74:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cc76:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cc78:	4b1a      	ldr	r3, [pc, #104]	; (800cce4 <_txe_thread_create+0x1e0>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00b      	beq.n	800cc9a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc82:	f3ef 8305 	mrs	r3, IPSR
 800cc86:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800cc88:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cc8a:	4b16      	ldr	r3, [pc, #88]	; (800cce4 <_txe_thread_create+0x1e0>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cc94:	d201      	bcs.n	800cc9a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800cc96:	2313      	movs	r3, #19
 800cc98:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d112      	bne.n	800ccc6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800cca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cca2:	9305      	str	r3, [sp, #20]
 800cca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cca6:	9304      	str	r3, [sp, #16]
 800cca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccaa:	9303      	str	r3, [sp, #12]
 800ccac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccae:	9302      	str	r3, [sp, #8]
 800ccb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccb2:	9301      	str	r3, [sp, #4]
 800ccb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	68b9      	ldr	r1, [r7, #8]
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f7fe fd88 	bl	800b7d4 <_tx_thread_create>
 800ccc4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800ccc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3750      	adds	r7, #80	; 0x50
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	2004cdb0 	.word	0x2004cdb0
 800ccd4:	2004cd20 	.word	0x2004cd20
 800ccd8:	2004cd24 	.word	0x2004cd24
 800ccdc:	2004cd18 	.word	0x2004cd18
 800cce0:	2004ce60 	.word	0x2004ce60
 800cce4:	20025814 	.word	0x20025814

0800cce8 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800ccec:	f005 fc64 	bl	80125b8 <touchgfx_components_init>
  touchgfx_init();
 800ccf0:	f005 fc38 	bl	8012564 <touchgfx_init>
}
 800ccf4:	bf00      	nop
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08c      	sub	sp, #48	; 0x30
 800ccfc:	af08      	add	r7, sp, #32
 800ccfe:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800cd00:	2300      	movs	r3, #0
 800cd02:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 800cd08:	f107 0108 	add.w	r1, r7, #8
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7ff fbf2 	bl	800c4fc <_txe_byte_allocate>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 800cd1e:	2302      	movs	r3, #2
 800cd20:	60fb      	str	r3, [r7, #12]
 800cd22:	e019      	b.n	800cd58 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	22b0      	movs	r2, #176	; 0xb0
 800cd28:	9206      	str	r2, [sp, #24]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	9205      	str	r2, [sp, #20]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	9204      	str	r2, [sp, #16]
 800cd32:	2205      	movs	r2, #5
 800cd34:	9203      	str	r2, [sp, #12]
 800cd36:	2205      	movs	r2, #5
 800cd38:	9202      	str	r2, [sp, #8]
 800cd3a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800cd3e:	9201      	str	r2, [sp, #4]
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	2300      	movs	r3, #0
 800cd44:	4a07      	ldr	r2, [pc, #28]	; (800cd64 <MX_TouchGFX_Init+0x6c>)
 800cd46:	4908      	ldr	r1, [pc, #32]	; (800cd68 <MX_TouchGFX_Init+0x70>)
 800cd48:	4808      	ldr	r0, [pc, #32]	; (800cd6c <MX_TouchGFX_Init+0x74>)
 800cd4a:	f7ff fedb 	bl	800cb04 <_txe_thread_create>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 800cd54:	230e      	movs	r3, #14
 800cd56:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cd58:	68fb      	ldr	r3, [r7, #12]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	0800cd71 	.word	0x0800cd71
 800cd68:	08026a30 	.word	0x08026a30
 800cd6c:	2004d320 	.word	0x2004d320

0800cd70 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800cd78:	f005 fc26 	bl	80125c8 <touchgfx_taskEntry>
}
 800cd7c:	bf00      	nop
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
    {
 800cd8c:	4a04      	ldr	r2, [pc, #16]	; (800cda0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	601a      	str	r2, [r3, #0]
    }
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	08027b48 	.word	0x08027b48

0800cda4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
    }
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7ff ffe9 	bl	800cd84 <_ZN8touchgfx12FontProviderD1Ev>
 800cdb2:	2104      	movs	r1, #4
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f018 fd21 	bl	80257fc <_ZdlPvj>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800cdd0:	887b      	ldrh	r3, [r7, #2]
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d010      	beq.n	800cdf8 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	dc13      	bgt.n	800ce02 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d002      	beq.n	800cde4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d005      	beq.n	800cdee <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800cde2:	e00e      	b.n	800ce02 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800cde4:	f003 fd0c 	bl	8010800 <_ZN17TypedTextDatabase8getFontsEv>
 800cde8:	4603      	mov	r3, r0
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	e00a      	b.n	800ce04 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800cdee:	f003 fd07 	bl	8010800 <_ZN17TypedTextDatabase8getFontsEv>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	e005      	b.n	800ce04 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800cdf8:	f003 fd02 	bl	8010800 <_ZN17TypedTextDatabase8getFontsEv>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	e000      	b.n	800ce04 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800ce02:	2300      	movs	r3, #0
    }
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	4a05      	ldr	r2, [pc, #20]	; (800ce2c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff ffb1 	bl	800cd84 <_ZN8touchgfx12FontProviderD1Ev>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	08027b34 	.word	0x08027b34

0800ce30 <_ZN23ApplicationFontProviderD0Ev>:
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff ffe7 	bl	800ce0c <_ZN23ApplicationFontProviderD1Ev>
 800ce3e:	2104      	movs	r1, #4
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f018 fcdb 	bl	80257fc <_ZdlPvj>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
    {
 800ce58:	4a04      	ldr	r2, [pc, #16]	; (800ce6c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
    }
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4618      	mov	r0, r3
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	08027fa0 	.word	0x08027fa0

0800ce70 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
    }
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f7ff ffe9 	bl	800ce50 <_ZN8touchgfx4FontD1Ev>
 800ce7e:	2110      	movs	r1, #16
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f018 fcbb 	bl	80257fc <_ZdlPvj>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800ce90:	b590      	push	{r4, r7, lr}
 800ce92:	b087      	sub	sp, #28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800ce9c:	887b      	ldrh	r3, [r7, #2]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	e010      	b.n	800cec8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3308      	adds	r3, #8
 800ceb4:	681c      	ldr	r4, [r3, #0]
 800ceb6:	f107 030f 	add.w	r3, r7, #15
 800ceba:	f107 0210 	add.w	r2, r7, #16
 800cebe:	8879      	ldrh	r1, [r7, #2]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	47a0      	blx	r4
 800cec4:	6178      	str	r0, [r7, #20]
        return glyph;
 800cec6:	697b      	ldr	r3, [r7, #20]
    }
 800cec8:	4618      	mov	r0, r3
 800ceca:	371c      	adds	r7, #28
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}

0800ced0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	895b      	ldrh	r3, [r3, #10]
    }
 800cedc:	4618      	mov	r0, r3
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	899b      	ldrh	r3, [r3, #12]
    }
 800cef4:	4618      	mov	r0, r3
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	889b      	ldrh	r3, [r3, #4]
    }
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	889a      	ldrh	r2, [r3, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	799b      	ldrb	r3, [r3, #6]
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	4413      	add	r3, r2
 800cf2c:	b29b      	uxth	r3, r3
    }
 800cf2e:	4618      	mov	r0, r3
 800cf30:	370c      	adds	r7, #12
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr

0800cf3a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800cf3a:	b480      	push	{r7}
 800cf3c:	b083      	sub	sp, #12
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	79db      	ldrb	r3, [r3, #7]
 800cf46:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800cf4a:	b2db      	uxtb	r3, r3
    }
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	79db      	ldrb	r3, [r3, #7]
 800cf64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800cf68:	b2db      	uxtb	r3, r3
    }
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	370c      	adds	r7, #12
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
	...

0800cf78 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	4a05      	ldr	r2, [pc, #20]	; (800cf98 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7ff ff61 	bl	800ce50 <_ZN8touchgfx4FontD1Ev>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4618      	mov	r0, r3
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	08028b4c 	.word	0x08028b4c

0800cf9c <_ZN8touchgfx9ConstFontD0Ev>:
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7ff ffe7 	bl	800cf78 <_ZN8touchgfx9ConstFontD1Ev>
 800cfaa:	2118      	movs	r1, #24
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f018 fc25 	bl	80257fc <_ZdlPvj>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	4a05      	ldr	r2, [pc, #20]	; (800cfdc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	601a      	str	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff ffd3 	bl	800cf78 <_ZN8touchgfx9ConstFontD1Ev>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	08027b5c 	.word	0x08027b5c

0800cfe0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f7ff ffe7 	bl	800cfbc <_ZN8touchgfx13GeneratedFontD1Ev>
 800cfee:	2128      	movs	r1, #40	; 0x28
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f018 fc03 	bl	80257fc <_ZdlPvj>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6a1b      	ldr	r3, [r3, #32]
    }
 800d00c:	4618      	mov	r0, r3
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800d024:	4618      	mov	r0, r3
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800d030:	b580      	push	{r7, lr}
 800d032:	b08c      	sub	sp, #48	; 0x30
 800d034:	af08      	add	r7, sp, #32
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	4611      	mov	r1, r2
 800d03c:	461a      	mov	r2, r3
 800d03e:	460b      	mov	r3, r1
 800d040:	80fb      	strh	r3, [r7, #6]
 800d042:	4613      	mov	r3, r2
 800d044:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	88b9      	ldrh	r1, [r7, #4]
 800d04a:	88fa      	ldrh	r2, [r7, #6]
 800d04c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d04e:	9306      	str	r3, [sp, #24]
 800d050:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d052:	9305      	str	r3, [sp, #20]
 800d054:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d058:	9304      	str	r3, [sp, #16]
 800d05a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d05e:	9303      	str	r3, [sp, #12]
 800d060:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d064:	9302      	str	r3, [sp, #8]
 800d066:	7f3b      	ldrb	r3, [r7, #28]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	7e3b      	ldrb	r3, [r7, #24]
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	460b      	mov	r3, r1
 800d070:	68b9      	ldr	r1, [r7, #8]
 800d072:	f00a feff 	bl	8017e74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800d076:	4a0a      	ldr	r2, [pc, #40]	; (800d0a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d080:	619a      	str	r2, [r3, #24]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d086:	61da      	str	r2, [r3, #28]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d08c:	621a      	str	r2, [r3, #32]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d092:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	08027b5c 	.word	0x08027b5c

0800d0a4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	889b      	ldrh	r3, [r3, #4]
 800d0b8:	0adb      	lsrs	r3, r3, #11
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4413      	add	r3, r2
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800d0d6:	b480      	push	{r7}
 800d0d8:	b089      	sub	sp, #36	; 0x24
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	60f8      	str	r0, [r7, #12]
 800d0de:	460b      	mov	r3, r1
 800d0e0:	607a      	str	r2, [r7, #4]
 800d0e2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d003      	beq.n	800d0f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	7b1b      	ldrb	r3, [r3, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	e030      	b.n	800d158 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	69da      	ldr	r2, [r3, #28]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	7b5b      	ldrb	r3, [r3, #13]
 800d102:	021b      	lsls	r3, r3, #8
 800d104:	b21b      	sxth	r3, r3
 800d106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d10a:	b219      	sxth	r1, r3
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	7adb      	ldrb	r3, [r3, #11]
 800d110:	b21b      	sxth	r3, r3
 800d112:	430b      	orrs	r3, r1
 800d114:	b21b      	sxth	r3, r3
 800d116:	b29b      	uxth	r3, r3
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	7b1b      	ldrb	r3, [r3, #12]
 800d122:	837b      	strh	r3, [r7, #26]
 800d124:	8b7b      	ldrh	r3, [r7, #26]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d015      	beq.n	800d156 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	897a      	ldrh	r2, [r7, #10]
 800d130:	429a      	cmp	r2, r3
 800d132:	d103      	bne.n	800d13c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d13a:	e00d      	b.n	800d158 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	881b      	ldrh	r3, [r3, #0]
 800d140:	897a      	ldrh	r2, [r7, #10]
 800d142:	429a      	cmp	r2, r3
 800d144:	d306      	bcc.n	800d154 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d146:	8b7b      	ldrh	r3, [r7, #26]
 800d148:	3b01      	subs	r3, #1
 800d14a:	837b      	strh	r3, [r7, #26]
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	3304      	adds	r3, #4
 800d150:	61fb      	str	r3, [r7, #28]
 800d152:	e7e7      	b.n	800d124 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800d154:	bf00      	nop
        }
    }
    return 0;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3724      	adds	r7, #36	; 0x24
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d164:	b580      	push	{r7, lr}
 800d166:	af00      	add	r7, sp, #0
 800d168:	4801      	ldr	r0, [pc, #4]	; (800d170 <__tcf_0+0xc>)
 800d16a:	f7ff ff27 	bl	800cfbc <_ZN8touchgfx13GeneratedFontD1Ev>
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	2004d3d0 	.word	0x2004d3d0

0800d174 <_Z23getFont_verdana_10_4bppv>:
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08c      	sub	sp, #48	; 0x30
 800d178:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d17a:	4b1f      	ldr	r3, [pc, #124]	; (800d1f8 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d17c:	e8d3 3f8f 	ldab	r3, [r3]
 800d180:	b2db      	uxtb	r3, r3
 800d182:	f003 0301 	and.w	r3, r3, #1
 800d186:	2b00      	cmp	r3, #0
 800d188:	bf0c      	ite	eq
 800d18a:	2301      	moveq	r3, #1
 800d18c:	2300      	movne	r3, #0
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	2b00      	cmp	r3, #0
 800d192:	d02c      	beq.n	800d1ee <_Z23getFont_verdana_10_4bppv+0x7a>
 800d194:	4818      	ldr	r0, [pc, #96]	; (800d1f8 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d196:	f018 fb33 	bl	8025800 <__cxa_guard_acquire>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	bf14      	ite	ne
 800d1a0:	2301      	movne	r3, #1
 800d1a2:	2300      	moveq	r3, #0
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d021      	beq.n	800d1ee <_Z23getFont_verdana_10_4bppv+0x7a>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	930a      	str	r3, [sp, #40]	; 0x28
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	9308      	str	r3, [sp, #32]
 800d1b6:	233f      	movs	r3, #63	; 0x3f
 800d1b8:	9307      	str	r3, [sp, #28]
 800d1ba:	4b10      	ldr	r3, [pc, #64]	; (800d1fc <_Z23getFont_verdana_10_4bppv+0x88>)
 800d1bc:	9306      	str	r3, [sp, #24]
 800d1be:	4b10      	ldr	r3, [pc, #64]	; (800d200 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d1c0:	9305      	str	r3, [sp, #20]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9304      	str	r3, [sp, #16]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	9303      	str	r3, [sp, #12]
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	9302      	str	r3, [sp, #8]
 800d1ce:	2304      	movs	r3, #4
 800d1d0:	9301      	str	r3, [sp, #4]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	230a      	movs	r3, #10
 800d1d8:	2201      	movs	r2, #1
 800d1da:	490a      	ldr	r1, [pc, #40]	; (800d204 <_Z23getFont_verdana_10_4bppv+0x90>)
 800d1dc:	480a      	ldr	r0, [pc, #40]	; (800d208 <_Z23getFont_verdana_10_4bppv+0x94>)
 800d1de:	f7ff ff27 	bl	800d030 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d1e2:	480a      	ldr	r0, [pc, #40]	; (800d20c <_Z23getFont_verdana_10_4bppv+0x98>)
 800d1e4:	f018 fb54 	bl	8025890 <atexit>
 800d1e8:	4803      	ldr	r0, [pc, #12]	; (800d1f8 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d1ea:	f018 fb15 	bl	8025818 <__cxa_guard_release>
    return verdana_10_4bpp;
 800d1ee:	4b06      	ldr	r3, [pc, #24]	; (800d208 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	2004d3f8 	.word	0x2004d3f8
 800d1fc:	08029114 	.word	0x08029114
 800d200:	08029120 	.word	0x08029120
 800d204:	080290e4 	.word	0x080290e4
 800d208:	2004d3d0 	.word	0x2004d3d0
 800d20c:	0800d165 	.word	0x0800d165

0800d210 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0
 800d214:	4801      	ldr	r0, [pc, #4]	; (800d21c <__tcf_0+0xc>)
 800d216:	f7ff fed1 	bl	800cfbc <_ZN8touchgfx13GeneratedFontD1Ev>
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	2004d3fc 	.word	0x2004d3fc

0800d220 <_Z23getFont_verdana_20_4bppv>:
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08c      	sub	sp, #48	; 0x30
 800d224:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d226:	4b1f      	ldr	r3, [pc, #124]	; (800d2a4 <_Z23getFont_verdana_20_4bppv+0x84>)
 800d228:	e8d3 3f8f 	ldab	r3, [r3]
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	bf0c      	ite	eq
 800d236:	2301      	moveq	r3, #1
 800d238:	2300      	movne	r3, #0
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d02c      	beq.n	800d29a <_Z23getFont_verdana_20_4bppv+0x7a>
 800d240:	4818      	ldr	r0, [pc, #96]	; (800d2a4 <_Z23getFont_verdana_20_4bppv+0x84>)
 800d242:	f018 fadd 	bl	8025800 <__cxa_guard_acquire>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	bf14      	ite	ne
 800d24c:	2301      	movne	r3, #1
 800d24e:	2300      	moveq	r3, #0
 800d250:	b2db      	uxtb	r3, r3
 800d252:	2b00      	cmp	r3, #0
 800d254:	d021      	beq.n	800d29a <_Z23getFont_verdana_20_4bppv+0x7a>
 800d256:	2300      	movs	r3, #0
 800d258:	930a      	str	r3, [sp, #40]	; 0x28
 800d25a:	2300      	movs	r3, #0
 800d25c:	9309      	str	r3, [sp, #36]	; 0x24
 800d25e:	2300      	movs	r3, #0
 800d260:	9308      	str	r3, [sp, #32]
 800d262:	233f      	movs	r3, #63	; 0x3f
 800d264:	9307      	str	r3, [sp, #28]
 800d266:	4b10      	ldr	r3, [pc, #64]	; (800d2a8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800d268:	9306      	str	r3, [sp, #24]
 800d26a:	4b10      	ldr	r3, [pc, #64]	; (800d2ac <_Z23getFont_verdana_20_4bppv+0x8c>)
 800d26c:	9305      	str	r3, [sp, #20]
 800d26e:	2300      	movs	r3, #0
 800d270:	9304      	str	r3, [sp, #16]
 800d272:	2300      	movs	r3, #0
 800d274:	9303      	str	r3, [sp, #12]
 800d276:	2301      	movs	r3, #1
 800d278:	9302      	str	r3, [sp, #8]
 800d27a:	2304      	movs	r3, #4
 800d27c:	9301      	str	r3, [sp, #4]
 800d27e:	2300      	movs	r3, #0
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	2314      	movs	r3, #20
 800d284:	2201      	movs	r2, #1
 800d286:	490a      	ldr	r1, [pc, #40]	; (800d2b0 <_Z23getFont_verdana_20_4bppv+0x90>)
 800d288:	480a      	ldr	r0, [pc, #40]	; (800d2b4 <_Z23getFont_verdana_20_4bppv+0x94>)
 800d28a:	f7ff fed1 	bl	800d030 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d28e:	480a      	ldr	r0, [pc, #40]	; (800d2b8 <_Z23getFont_verdana_20_4bppv+0x98>)
 800d290:	f018 fafe 	bl	8025890 <atexit>
 800d294:	4803      	ldr	r0, [pc, #12]	; (800d2a4 <_Z23getFont_verdana_20_4bppv+0x84>)
 800d296:	f018 fabf 	bl	8025818 <__cxa_guard_release>
    return verdana_20_4bpp;
 800d29a:	4b06      	ldr	r3, [pc, #24]	; (800d2b4 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	2004d424 	.word	0x2004d424
 800d2a8:	08029118 	.word	0x08029118
 800d2ac:	08029124 	.word	0x08029124
 800d2b0:	080290f4 	.word	0x080290f4
 800d2b4:	2004d3fc 	.word	0x2004d3fc
 800d2b8:	0800d211 	.word	0x0800d211

0800d2bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	4801      	ldr	r0, [pc, #4]	; (800d2c8 <__tcf_0+0xc>)
 800d2c2:	f7ff fe7b 	bl	800cfbc <_ZN8touchgfx13GeneratedFontD1Ev>
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	2004d428 	.word	0x2004d428

0800d2cc <_Z23getFont_verdana_40_4bppv>:
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08c      	sub	sp, #48	; 0x30
 800d2d0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d2d2:	4b1f      	ldr	r3, [pc, #124]	; (800d350 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d2d4:	e8d3 3f8f 	ldab	r3, [r3]
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	f003 0301 	and.w	r3, r3, #1
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	bf0c      	ite	eq
 800d2e2:	2301      	moveq	r3, #1
 800d2e4:	2300      	movne	r3, #0
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d02c      	beq.n	800d346 <_Z23getFont_verdana_40_4bppv+0x7a>
 800d2ec:	4818      	ldr	r0, [pc, #96]	; (800d350 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d2ee:	f018 fa87 	bl	8025800 <__cxa_guard_acquire>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	bf14      	ite	ne
 800d2f8:	2301      	movne	r3, #1
 800d2fa:	2300      	moveq	r3, #0
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d021      	beq.n	800d346 <_Z23getFont_verdana_40_4bppv+0x7a>
 800d302:	2300      	movs	r3, #0
 800d304:	930a      	str	r3, [sp, #40]	; 0x28
 800d306:	2300      	movs	r3, #0
 800d308:	9309      	str	r3, [sp, #36]	; 0x24
 800d30a:	2300      	movs	r3, #0
 800d30c:	9308      	str	r3, [sp, #32]
 800d30e:	233f      	movs	r3, #63	; 0x3f
 800d310:	9307      	str	r3, [sp, #28]
 800d312:	4b10      	ldr	r3, [pc, #64]	; (800d354 <_Z23getFont_verdana_40_4bppv+0x88>)
 800d314:	9306      	str	r3, [sp, #24]
 800d316:	4b10      	ldr	r3, [pc, #64]	; (800d358 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d318:	9305      	str	r3, [sp, #20]
 800d31a:	2300      	movs	r3, #0
 800d31c:	9304      	str	r3, [sp, #16]
 800d31e:	2300      	movs	r3, #0
 800d320:	9303      	str	r3, [sp, #12]
 800d322:	2301      	movs	r3, #1
 800d324:	9302      	str	r3, [sp, #8]
 800d326:	2304      	movs	r3, #4
 800d328:	9301      	str	r3, [sp, #4]
 800d32a:	2300      	movs	r3, #0
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	2328      	movs	r3, #40	; 0x28
 800d330:	2201      	movs	r2, #1
 800d332:	490a      	ldr	r1, [pc, #40]	; (800d35c <_Z23getFont_verdana_40_4bppv+0x90>)
 800d334:	480a      	ldr	r0, [pc, #40]	; (800d360 <_Z23getFont_verdana_40_4bppv+0x94>)
 800d336:	f7ff fe7b 	bl	800d030 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d33a:	480a      	ldr	r0, [pc, #40]	; (800d364 <_Z23getFont_verdana_40_4bppv+0x98>)
 800d33c:	f018 faa8 	bl	8025890 <atexit>
 800d340:	4803      	ldr	r0, [pc, #12]	; (800d350 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d342:	f018 fa69 	bl	8025818 <__cxa_guard_release>
    return verdana_40_4bpp;
 800d346:	4b06      	ldr	r3, [pc, #24]	; (800d360 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800d348:	4618      	mov	r0, r3
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	2004d450 	.word	0x2004d450
 800d354:	0802911c 	.word	0x0802911c
 800d358:	08029128 	.word	0x08029128
 800d35c:	08029104 	.word	0x08029104
 800d360:	2004d428 	.word	0x2004d428
 800d364:	0800d2bd 	.word	0x0800d2bd

0800d368 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	4618      	mov	r0, r3
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	4608      	mov	r0, r1
 800d38a:	4611      	mov	r1, r2
 800d38c:	461a      	mov	r2, r3
 800d38e:	4603      	mov	r3, r0
 800d390:	817b      	strh	r3, [r7, #10]
 800d392:	460b      	mov	r3, r1
 800d394:	813b      	strh	r3, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	897a      	ldrh	r2, [r7, #10]
 800d39e:	801a      	strh	r2, [r3, #0]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	893a      	ldrh	r2, [r7, #8]
 800d3a4:	805a      	strh	r2, [r3, #2]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	88fa      	ldrh	r2, [r7, #6]
 800d3aa:	809a      	strh	r2, [r3, #4]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	8b3a      	ldrh	r2, [r7, #24]
 800d3b0:	80da      	strh	r2, [r3, #6]
    {
    }
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d3ca:	bf00      	nop
 800d3cc:	370c      	adds	r7, #12
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d3d6:	b480      	push	{r7}
 800d3d8:	b083      	sub	sp, #12
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d3f6:	bf00      	nop
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	460b      	mov	r3, r1
 800d40c:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800d40e:	bf00      	nop
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr

0800d41a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800d41a:	b480      	push	{r7}
 800d41c:	b083      	sub	sp, #12
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
    {
    }
 800d422:	bf00      	nop
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800d42e:	b480      	push	{r7}
 800d430:	b083      	sub	sp, #12
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
    {
    }
 800d436:	bf00      	nop
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
	...

0800d444 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
    {
 800d44c:	4a04      	ldr	r2, [pc, #16]	; (800d460 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	601a      	str	r2, [r3, #0]
    }
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4618      	mov	r0, r3
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	08027dac 	.word	0x08027dac

0800d464 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
    }
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff ffe9 	bl	800d444 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d472:	2104      	movs	r1, #4
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f018 f9c1 	bl	80257fc <_ZdlPvj>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
    {
    }
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d4c2:	6810      	ldr	r0, [r2, #0]
 800d4c4:	6851      	ldr	r1, [r2, #4]
 800d4c6:	c303      	stmia	r3!, {r0, r1}
    }
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
    {
 800d4dc:	4a04      	ldr	r2, [pc, #16]	; (800d4f0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	601a      	str	r2, [r3, #0]
    }
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	08027d94 	.word	0x08027d94

0800d4f4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
    }
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f7ff ffe9 	bl	800d4d4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d502:	2104      	movs	r1, #4
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f018 f979 	bl	80257fc <_ZdlPvj>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4618      	mov	r0, r3
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
    {
 800d51c:	4a04      	ldr	r2, [pc, #16]	; (800d530 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	601a      	str	r2, [r3, #0]
    }
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4618      	mov	r0, r3
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	08028ae4 	.word	0x08028ae4

0800d534 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
    }
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff ffe9 	bl	800d514 <_ZN8touchgfx8DrawableD1Ev>
 800d542:	2128      	movs	r1, #40	; 0x28
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f018 f959 	bl	80257fc <_ZdlPvj>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4618      	mov	r0, r3
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d562:	2b00      	cmp	r3, #0
 800d564:	d005      	beq.n	800d572 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	3314      	adds	r3, #20
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	4798      	blx	r3
        }
    }
 800d572:	bf00      	nop
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800d57a:	b480      	push	{r7}
 800d57c:	b083      	sub	sp, #12
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d582:	2300      	movs	r3, #0
    }
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	4608      	mov	r0, r1
 800d59a:	4611      	mov	r1, r2
 800d59c:	461a      	mov	r2, r3
 800d59e:	4603      	mov	r3, r0
 800d5a0:	817b      	strh	r3, [r7, #10]
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	813b      	strh	r3, [r7, #8]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800d5aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d5ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f000 f837 	bl	800d628 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800d5ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800d5be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 f88b 	bl	800d6e0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800d5ca:	bf00      	nop
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800d5d2:	b480      	push	{r7}
 800d5d4:	b083      	sub	sp, #12
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	887a      	ldrh	r2, [r7, #2]
 800d5fc:	809a      	strh	r2, [r3, #4]
    }
 800d5fe:	bf00      	nop
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800d60a:	b480      	push	{r7}
 800d60c:	b083      	sub	sp, #12
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	460b      	mov	r3, r1
 800d614:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	887a      	ldrh	r2, [r7, #2]
 800d61a:	80da      	strh	r2, [r3, #6]
    }
 800d61c:	bf00      	nop
 800d61e:	370c      	adds	r7, #12
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	460b      	mov	r3, r1
 800d632:	807b      	strh	r3, [r7, #2]
 800d634:	4613      	mov	r3, r2
 800d636:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3330      	adds	r3, #48	; 0x30
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d644:	4611      	mov	r1, r2
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	4798      	blx	r3
        setY(y);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	3334      	adds	r3, #52	; 0x34
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d656:	4611      	mov	r1, r2
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	4798      	blx	r3
    }
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	887a      	ldrh	r2, [r7, #2]
 800d674:	811a      	strh	r2, [r3, #8]
    }
 800d676:	bf00      	nop
 800d678:	370c      	adds	r7, #12
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr

0800d682 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800d682:	b480      	push	{r7}
 800d684:	b083      	sub	sp, #12
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
 800d68a:	460b      	mov	r3, r1
 800d68c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	887a      	ldrh	r2, [r7, #2]
 800d692:	815a      	strh	r2, [r3, #10]
    }
 800d694:	bf00      	nop
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
    {
    }
 800d6a8:	bf00      	nop
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d6be:	bf00      	nop
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d6ca:	b480      	push	{r7}
 800d6cc:	b083      	sub	sp, #12
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
 800d6d2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d6d4:	bf00      	nop
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	807b      	strh	r3, [r7, #2]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	3338      	adds	r3, #56	; 0x38
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	4798      	blx	r3
        setHeight(height);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	333c      	adds	r3, #60	; 0x3c
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d70e:	4611      	mov	r1, r2
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	4798      	blx	r3
    }
 800d714:	bf00      	nop
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d726:	bf00      	nop
 800d728:	370c      	adds	r7, #12
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800d732:	b480      	push	{r7}
 800d734:	b083      	sub	sp, #12
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
    {
    }
 800d73a:	bf00      	nop
 800d73c:	370c      	adds	r7, #12
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800d746:	b480      	push	{r7}
 800d748:	b083      	sub	sp, #12
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800d754:	4618      	mov	r0, r3
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800d76e:	4618      	mov	r0, r3
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	460b      	mov	r3, r1
 800d784:	807b      	strh	r3, [r7, #2]
 800d786:	4613      	mov	r3, r2
 800d788:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	3354      	adds	r3, #84	; 0x54
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	8879      	ldrh	r1, [r7, #2]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d79a:	b292      	uxth	r2, r2
 800d79c:	1a8a      	subs	r2, r1, r2
 800d79e:	b292      	uxth	r2, r2
 800d7a0:	b210      	sxth	r0, r2
 800d7a2:	8839      	ldrh	r1, [r7, #0]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d7aa:	b292      	uxth	r2, r2
 800d7ac:	1a8a      	subs	r2, r1, r2
 800d7ae:	b292      	uxth	r2, r2
 800d7b0:	b212      	sxth	r2, r2
 800d7b2:	4601      	mov	r1, r0
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	4798      	blx	r3
    }
 800d7b8:	bf00      	nop
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7ce:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7d6:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7de:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f7ff ffe1 	bl	800d7c0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	601a      	str	r2, [r3, #0]
    }
 800d80c:	bf00      	nop
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
    {
        return instance;
 800d818:	4b03      	ldr	r3, [pc, #12]	; (800d828 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d81a:	681b      	ldr	r3, [r3, #0]
    }
 800d81c:	4618      	mov	r0, r3
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	2004f630 	.word	0x2004f630

0800d82c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d82c:	b480      	push	{r7}
 800d82e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d830:	4b0b      	ldr	r3, [pc, #44]	; (800d860 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d008      	beq.n	800d84e <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d83c:	4b08      	ldr	r3, [pc, #32]	; (800d860 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d842:	2b00      	cmp	r3, #0
 800d844:	d003      	beq.n	800d84e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d846:	4b06      	ldr	r3, [pc, #24]	; (800d860 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d84c:	e002      	b.n	800d854 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800d84e:	4b04      	ldr	r3, [pc, #16]	; (800d860 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	689b      	ldr	r3, [r3, #8]
    }
 800d854:	4618      	mov	r0, r3
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	2004f630 	.word	0x2004f630

0800d864 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800d86c:	4a07      	ldr	r2, [pc, #28]	; (800d88c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	601a      	str	r2, [r3, #0]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	605a      	str	r2, [r3, #4]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	721a      	strb	r2, [r3, #8]
    {
    }
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4618      	mov	r0, r3
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	08027d70 	.word	0x08027d70

0800d890 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
    {
 800d898:	4a04      	ldr	r2, [pc, #16]	; (800d8ac <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	601a      	str	r2, [r3, #0]
    }
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	370c      	adds	r7, #12
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr
 800d8ac:	08027d70 	.word	0x08027d70

0800d8b0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
    }
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7ff ffe9 	bl	800d890 <_ZN8touchgfx10TransitionD1Ev>
 800d8be:	210c      	movs	r1, #12
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f017 ff9b 	bl	80257fc <_ZdlPvj>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
    {
    }
 800d8d8:	bf00      	nop
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
    {
    }
 800d8ec:	bf00      	nop
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
    {
    }
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800d914:	f009 fa42 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 800d918:	4603      	mov	r3, r0
 800d91a:	4618      	mov	r0, r3
 800d91c:	f009 fe0a 	bl	8017534 <_ZN8touchgfx11Application10invalidateEv>
    }
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	605a      	str	r2, [r3, #4]
    }
 800d938:	bf00      	nop
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	4a05      	ldr	r2, [pc, #20]	; (800d964 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	601a      	str	r2, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff fd75 	bl	800d444 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	08028a98 	.word	0x08028a98

0800d968 <_ZN8touchgfx11ApplicationD0Ev>:
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f7ff ffe7 	bl	800d944 <_ZN8touchgfx11ApplicationD1Ev>
 800d976:	f44f 719c 	mov.w	r1, #312	; 0x138
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f017 ff3e 	bl	80257fc <_ZdlPvj>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
	...

0800d98c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4618      	mov	r0, r3
 800d998:	f009 fa48 	bl	8016e2c <_ZN8touchgfx11ApplicationC1Ev>
 800d99c:	4a09      	ldr	r2, [pc, #36]	; (800d9c4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4a04      	ldr	r2, [pc, #16]	; (800d9c8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800d9b6:	6013      	str	r3, [r2, #0]
    }
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	08027d24 	.word	0x08027d24
 800d9c8:	2004f684 	.word	0x2004f684

0800d9cc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f804 	bl	800d9e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800d9da:	bf00      	nop
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00f      	beq.n	800da14 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	330c      	adds	r3, #12
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4610      	mov	r0, r2
 800da08:	4798      	blx	r3
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800da10:	2301      	movs	r3, #1
 800da12:	e000      	b.n	800da16 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800da14:	2300      	movs	r3, #0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00e      	beq.n	800da38 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	3308      	adds	r3, #8
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4610      	mov	r0, r2
 800da2e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800da38:	bf00      	nop
 800da3a:	3708      	adds	r7, #8
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	683a      	ldr	r2, [r7, #0]
 800da4e:	601a      	str	r2, [r3, #0]
    }
 800da50:	bf00      	nop
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	4a05      	ldr	r2, [pc, #20]	; (800da7c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7ff ff69 	bl	800d944 <_ZN8touchgfx11ApplicationD1Ev>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4618      	mov	r0, r3
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	08027d24 	.word	0x08027d24

0800da80 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7ff ffe7 	bl	800da5c <_ZN8touchgfx14MVPApplicationD1Ev>
 800da8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f017 feb2 	bl	80257fc <_ZdlPvj>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4618      	mov	r0, r3
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
	...

0800daa4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	4a08      	ldr	r2, [pc, #32]	; (800dad0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dab8:	4618      	mov	r0, r3
 800daba:	f001 f88d 	bl	800ebd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff ffcb 	bl	800da5c <_ZN8touchgfx14MVPApplicationD1Ev>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4618      	mov	r0, r3
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	08027cc0 	.word	0x08027cc0

0800dad4 <_ZN23FrontendApplicationBaseD0Ev>:
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7ff ffe1 	bl	800daa4 <_ZN23FrontendApplicationBaseD1Ev>
 800dae2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f017 fe88 	bl	80257fc <_ZdlPvj>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4618      	mov	r0, r3
 800daf0:	3708      	adds	r7, #8
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b082      	sub	sp, #8
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f9c2 	bl	800de88 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	721a      	strb	r2, [r3, #8]
    }
 800db1a:	bf00      	nop
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
	...

0800db28 <_ZN8touchgfx15BlockTransitionC1Ev>:
    /**
     * Initializes a new instance of the BlockTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    BlockTransition()
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
        : Transition(),
          animationCounter(0)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff fe96 	bl	800d864 <_ZN8touchgfx10TransitionC1Ev>
 800db38:	4a20      	ldr	r2, [pc, #128]	; (800dbbc <_ZN8touchgfx15BlockTransitionC1Ev+0x94>)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	741a      	strb	r2, [r3, #16]
    {
        // 8x6 blocks, with 8 blocks on the longest edge
        if (HAL::DISPLAY_WIDTH > HAL::DISPLAY_HEIGHT)
 800db44:	4b1e      	ldr	r3, [pc, #120]	; (800dbc0 <_ZN8touchgfx15BlockTransitionC1Ev+0x98>)
 800db46:	881a      	ldrh	r2, [r3, #0]
 800db48:	4b1e      	ldr	r3, [pc, #120]	; (800dbc4 <_ZN8touchgfx15BlockTransitionC1Ev+0x9c>)
 800db4a:	881b      	ldrh	r3, [r3, #0]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d918      	bls.n	800db82 <_ZN8touchgfx15BlockTransitionC1Ev+0x5a>
        {
            blockWidth = (HAL::DISPLAY_WIDTH + 7) / 8;
 800db50:	4b1b      	ldr	r3, [pc, #108]	; (800dbc0 <_ZN8touchgfx15BlockTransitionC1Ev+0x98>)
 800db52:	881b      	ldrh	r3, [r3, #0]
 800db54:	3307      	adds	r3, #7
 800db56:	2b00      	cmp	r3, #0
 800db58:	da00      	bge.n	800db5c <_ZN8touchgfx15BlockTransitionC1Ev+0x34>
 800db5a:	3307      	adds	r3, #7
 800db5c:	10db      	asrs	r3, r3, #3
 800db5e:	b29a      	uxth	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	815a      	strh	r2, [r3, #10]
            blockHeight = (HAL::DISPLAY_HEIGHT + 5) / 6;
 800db64:	4b17      	ldr	r3, [pc, #92]	; (800dbc4 <_ZN8touchgfx15BlockTransitionC1Ev+0x9c>)
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	3305      	adds	r3, #5
 800db6a:	4a17      	ldr	r2, [pc, #92]	; (800dbc8 <_ZN8touchgfx15BlockTransitionC1Ev+0xa0>)
 800db6c:	fb82 1203 	smull	r1, r2, r2, r3
 800db70:	17db      	asrs	r3, r3, #31
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	b29a      	uxth	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	819a      	strh	r2, [r3, #12]
            blocksHorizontal = 8;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2208      	movs	r2, #8
 800db7e:	81da      	strh	r2, [r3, #14]
 800db80:	e017      	b.n	800dbb2 <_ZN8touchgfx15BlockTransitionC1Ev+0x8a>
        }
        else
        {
            blockWidth = (HAL::DISPLAY_WIDTH + 5) / 6;
 800db82:	4b0f      	ldr	r3, [pc, #60]	; (800dbc0 <_ZN8touchgfx15BlockTransitionC1Ev+0x98>)
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	3305      	adds	r3, #5
 800db88:	4a0f      	ldr	r2, [pc, #60]	; (800dbc8 <_ZN8touchgfx15BlockTransitionC1Ev+0xa0>)
 800db8a:	fb82 1203 	smull	r1, r2, r2, r3
 800db8e:	17db      	asrs	r3, r3, #31
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	b29a      	uxth	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	815a      	strh	r2, [r3, #10]
            blockHeight = (HAL::DISPLAY_HEIGHT + 7) / 8;
 800db98:	4b0a      	ldr	r3, [pc, #40]	; (800dbc4 <_ZN8touchgfx15BlockTransitionC1Ev+0x9c>)
 800db9a:	881b      	ldrh	r3, [r3, #0]
 800db9c:	3307      	adds	r3, #7
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	da00      	bge.n	800dba4 <_ZN8touchgfx15BlockTransitionC1Ev+0x7c>
 800dba2:	3307      	adds	r3, #7
 800dba4:	10db      	asrs	r3, r3, #3
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	819a      	strh	r2, [r3, #12]
            blocksHorizontal = 6;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2206      	movs	r2, #6
 800dbb0:	81da      	strh	r2, [r3, #14]
        }
    }
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	08027c78 	.word	0x08027c78
 800dbc0:	2004f624 	.word	0x2004f624
 800dbc4:	2004f626 	.word	0x2004f626
 800dbc8:	2aaaaaab 	.word	0x2aaaaaab

0800dbcc <_ZN8touchgfx15BlockTransition15handleTickEventEv>:
    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates two blocks in every frame, for a total of 24
     * frames.
     */
    virtual void handleTickEvent()
 800dbcc:	b590      	push	{r4, r7, lr}
 800dbce:	b0bb      	sub	sp, #236	; 0xec
 800dbd0:	af02      	add	r7, sp, #8
 800dbd2:	6078      	str	r0, [r7, #4]
    {
        const int blocks = 48;
 800dbd4:	2330      	movs	r3, #48	; 0x30
 800dbd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        // "Random" sequence of blocks to invalidate
        const int indeces[blocks] = { 20, 11, 47, 14, 10, 0, 18, 28, 13, 6, 2, 41,
 800dbda:	4a42      	ldr	r2, [pc, #264]	; (800dce4 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x118>)
 800dbdc:	f107 0310 	add.w	r3, r7, #16
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	22c0      	movs	r2, #192	; 0xc0
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f017 feb3 	bl	8025950 <memcpy>
                                      44, 5, 3, 17, 36, 46, 26, 15, 29, 39, 25, 12,
                                      19, 24, 7, 38, 37, 30, 9, 43, 4, 31, 22, 23,
                                      35, 16, 32, 42, 8, 1, 40, 33, 21, 27, 34, 45 };

        Transition::handleTickEvent();
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7ff fe6f 	bl	800d8d0 <_ZN8touchgfx10Transition15handleTickEventEv>

        if (animationCounter == 0 && HAL::USE_DOUBLE_BUFFERING)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	7c1b      	ldrb	r3, [r3, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d109      	bne.n	800dc0e <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x42>
 800dbfa:	4b3b      	ldr	r3, [pc, #236]	; (800dce8 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x11c>)
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d005      	beq.n	800dc0e <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x42>
        {
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800dc02:	f009 f8cb 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 800dc06:	4603      	mov	r3, r0
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f009 f8d9 	bl	8016dc0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }

        if (animationCounter < blocks)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	7c1b      	ldrb	r3, [r3, #16]
 800dc12:	2b2f      	cmp	r3, #47	; 0x2f
 800dc14:	d85f      	bhi.n	800dcd6 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x10a>
        {
            int blocks_per_tick = 2;
 800dc16:	2302      	movs	r3, #2
 800dc18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            while (blocks_per_tick-- > 0 && animationCounter < blocks)
 800dc1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc20:	1e5a      	subs	r2, r3, #1
 800dc22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	dd05      	ble.n	800dc36 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x6a>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	7c1b      	ldrb	r3, [r3, #16]
 800dc2e:	2b2f      	cmp	r3, #47	; 0x2f
 800dc30:	d801      	bhi.n	800dc36 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x6a>
 800dc32:	2301      	movs	r3, #1
 800dc34:	e000      	b.n	800dc38 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x6c>
 800dc36:	2300      	movs	r3, #0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d04f      	beq.n	800dcdc <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x110>
            {
                // Invalidate next block in sequence
                const int index = indeces[animationCounter];
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	7c1b      	ldrb	r3, [r3, #16]
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	33e0      	adds	r3, #224	; 0xe0
 800dc44:	443b      	add	r3, r7
 800dc46:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800dc4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

                const int16_t x = (index % blocksHorizontal) * blockWidth;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	89db      	ldrh	r3, [r3, #14]
 800dc52:	461a      	mov	r2, r3
 800dc54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc58:	fb93 f1f2 	sdiv	r1, r3, r2
 800dc5c:	fb01 f202 	mul.w	r2, r1, r2
 800dc60:	1a9b      	subs	r3, r3, r2
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	895b      	ldrh	r3, [r3, #10]
 800dc68:	fb12 f303 	smulbb	r3, r2, r3
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
                const int16_t y = (index / blocksHorizontal) * blockHeight;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	89db      	ldrh	r3, [r3, #14]
 800dc76:	461a      	mov	r2, r3
 800dc78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	899b      	ldrh	r3, [r3, #12]
 800dc86:	fb12 f303 	smulbb	r3, r2, r3
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0

                Rect invRect(x, y, blockWidth, blockHeight);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	895b      	ldrh	r3, [r3, #10]
 800dc94:	b21c      	sxth	r4, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	899b      	ldrh	r3, [r3, #12]
 800dc9a:	b21b      	sxth	r3, r3
 800dc9c:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
 800dca0:	f9b7 10d2 	ldrsh.w	r1, [r7, #210]	; 0xd2
 800dca4:	f107 0008 	add.w	r0, r7, #8
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	4623      	mov	r3, r4
 800dcac:	f7ff fb68 	bl	800d380 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(invRect);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	3310      	adds	r3, #16
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f107 0208 	add.w	r2, r7, #8
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	4798      	blx	r3
                animationCounter++;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7c1b      	ldrb	r3, [r3, #16]
 800dccc:	3301      	adds	r3, #1
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	741a      	strb	r2, [r3, #16]
            while (blocks_per_tick-- > 0 && animationCounter < blocks)
 800dcd4:	e7a2      	b.n	800dc1c <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x50>
            }
        }
        else
        {
            done = true;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	721a      	strb	r2, [r3, #8]
        }
    }
 800dcdc:	bf00      	nop
 800dcde:	37e4      	adds	r7, #228	; 0xe4
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd90      	pop	{r4, r7, pc}
 800dce4:	08026a3c 	.word	0x08026a3c
 800dce8:	2004f62e 	.word	0x2004f62e

0800dcec <_ZN8touchgfx15BlockTransition8tearDownEv>:

    virtual void tearDown()
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
    {
    }
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <_ZN8touchgfx15BlockTransition4initEv>:

    virtual void init()
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7ff fdf4 	bl	800d8f8 <_ZN8touchgfx10Transition4initEv>
    }
 800dd10:	bf00      	nop
 800dd12:	3708      	adds	r7, #8
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <_ZN8touchgfx15BlockTransition10invalidateEv>:

    /**
     * Block transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
    {
    }
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	607b      	str	r3, [r7, #4]
 800dd36:	460b      	mov	r3, r1
 800dd38:	817b      	strh	r3, [r7, #10]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff fd00 	bl	800d746 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d008      	beq.n	800dd5e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff fd06 	bl	800d760 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e000      	b.n	800dd60 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	601a      	str	r2, [r3, #0]
        }
    }
 800dd6a:	bf00      	nop
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800dd72:	b480      	push	{r7}
 800dd74:	b083      	sub	sp, #12
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	683a      	ldr	r2, [r7, #0]
 800dd80:	605a      	str	r2, [r3, #4]
    }
 800dd82:	bf00      	nop
 800dd84:	370c      	adds	r7, #12
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr
	...

0800dd90 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	4a05      	ldr	r2, [pc, #20]	; (800ddb0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7ff fbb7 	bl	800d514 <_ZN8touchgfx8DrawableD1Ev>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	08027c10 	.word	0x08027c10

0800ddb4 <_ZN8touchgfx6WidgetD0Ev>:
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff ffe7 	bl	800dd90 <_ZN8touchgfx6WidgetD1Ev>
 800ddc2:	2128      	movs	r1, #40	; 0x28
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f017 fd19 	bl	80257fc <_ZdlPvj>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7ff fdd2 	bl	800d98c <_ZN8touchgfx14MVPApplicationC1Ev>
 800dde8:	4a12      	ldr	r2, [pc, #72]	; (800de34 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	601a      	str	r2, [r3, #0]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f000 f929 	bl	800e04c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	68ba      	ldr	r2, [r7, #8]
 800de06:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800de0a:	f7ff fd03 	bl	800d814 <_ZN8touchgfx3HAL11getInstanceEv>
 800de0e:	4603      	mov	r3, r0
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	3208      	adds	r2, #8
 800de14:	6812      	ldr	r2, [r2, #0]
 800de16:	2101      	movs	r1, #1
 800de18:	4618      	mov	r0, r3
 800de1a:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800de1c:	f7ff fd06 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 800de20:	4603      	mov	r3, r0
 800de22:	4618      	mov	r0, r3
 800de24:	f010 fadf 	bl	801e3e6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	4618      	mov	r0, r3
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	08027cc0 	.word	0x08027cc0

0800de38 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4618      	mov	r0, r3
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	4611      	mov	r1, r2
 800de60:	4618      	mov	r0, r3
 800de62:	f7ff ffe9 	bl	800de38 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	605a      	str	r2, [r3, #4]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	3308      	adds	r3, #8
 800de74:	3208      	adds	r2, #8
 800de76:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de7a:	e883 0003 	stmia.w	r3, {r0, r1}
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800de88:	b590      	push	{r4, r7, lr}
 800de8a:	b089      	sub	sp, #36	; 0x24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800de96:	4b10      	ldr	r3, [pc, #64]	; (800ded8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800de98:	61bb      	str	r3, [r7, #24]
 800de9a:	2300      	movs	r3, #0
 800de9c:	61fb      	str	r3, [r7, #28]
 800de9e:	f107 0008 	add.w	r0, r7, #8
 800dea2:	f107 0318 	add.w	r3, r7, #24
 800dea6:	cb0c      	ldmia	r3, {r2, r3}
 800dea8:	6879      	ldr	r1, [r7, #4]
 800deaa:	f000 f8eb 	bl	800e084 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800deae:	f107 0308 	add.w	r3, r7, #8
 800deb2:	4619      	mov	r1, r3
 800deb4:	4620      	mov	r0, r4
 800deb6:	f7ff ffcb 	bl	800de50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800deba:	f107 0308 	add.w	r3, r7, #8
 800debe:	4618      	mov	r0, r3
 800dec0:	f000 fe8a 	bl	800ebd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ded0:	bf00      	nop
 800ded2:	3724      	adds	r7, #36	; 0x24
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd90      	pop	{r4, r7, pc}
 800ded8:	0800dedd 	.word	0x0800dedd

0800dedc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af02      	add	r7, sp, #8
 800dee2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800def0:	461a      	mov	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800def8:	9300      	str	r3, [sp, #0]
 800defa:	4b04      	ldr	r3, [pc, #16]	; (800df0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800defc:	4804      	ldr	r0, [pc, #16]	; (800df10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800defe:	f000 f8f3 	bl	800e0e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800df02:	bf00      	nop
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	2004f678 	.word	0x2004f678
 800df10:	2004f674 	.word	0x2004f674

0800df14 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouth()
{
 800df14:	b590      	push	{r4, r7, lr}
 800df16:	b089      	sub	sp, #36	; 0x24
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionSouthImpl);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800df22:	4b10      	ldr	r3, [pc, #64]	; (800df64 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv+0x50>)
 800df24:	61bb      	str	r3, [r7, #24]
 800df26:	2300      	movs	r3, #0
 800df28:	61fb      	str	r3, [r7, #28]
 800df2a:	f107 0008 	add.w	r0, r7, #8
 800df2e:	f107 0318 	add.w	r3, r7, #24
 800df32:	cb0c      	ldmia	r3, {r2, r3}
 800df34:	6879      	ldr	r1, [r7, #4]
 800df36:	f000 f8a5 	bl	800e084 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800df3a:	f107 0308 	add.w	r3, r7, #8
 800df3e:	4619      	mov	r1, r3
 800df40:	4620      	mov	r0, r4
 800df42:	f7ff ff85 	bl	800de50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800df46:	f107 0308 	add.w	r3, r7, #8
 800df4a:	4618      	mov	r0, r3
 800df4c:	f000 fe44 	bl	800ebd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800df5c:	bf00      	nop
 800df5e:	3724      	adds	r7, #36	; 0x24
 800df60:	46bd      	mov	sp, r7
 800df62:	bd90      	pop	{r4, r7, pc}
 800df64:	0800df69 	.word	0x0800df69

0800df68 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouthImpl()
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800df7c:	461a      	mov	r2, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	4b04      	ldr	r3, [pc, #16]	; (800df98 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x30>)
 800df88:	4804      	ldr	r0, [pc, #16]	; (800df9c <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x34>)
 800df8a:	f000 f9cb 	bl	800e324 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800df8e:	bf00      	nop
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	2004f678 	.word	0x2004f678
 800df9c:	2004f674 	.word	0x2004f674

0800dfa0 <_ZN23FrontendApplicationBase32gotoScreen2ScreenBlockTransitionEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenBlockTransition()
{
 800dfa0:	b590      	push	{r4, r7, lr}
 800dfa2:	b089      	sub	sp, #36	; 0x24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenBlockTransitionImpl);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800dfae:	4b10      	ldr	r3, [pc, #64]	; (800dff0 <_ZN23FrontendApplicationBase32gotoScreen2ScreenBlockTransitionEv+0x50>)
 800dfb0:	61bb      	str	r3, [r7, #24]
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	61fb      	str	r3, [r7, #28]
 800dfb6:	f107 0008 	add.w	r0, r7, #8
 800dfba:	f107 0318 	add.w	r3, r7, #24
 800dfbe:	cb0c      	ldmia	r3, {r2, r3}
 800dfc0:	6879      	ldr	r1, [r7, #4]
 800dfc2:	f000 f85f 	bl	800e084 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800dfc6:	f107 0308 	add.w	r3, r7, #8
 800dfca:	4619      	mov	r1, r3
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f7ff ff3f 	bl	800de50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800dfd2:	f107 0308 	add.w	r3, r7, #8
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f000 fdfe 	bl	800ebd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800dfe8:	bf00      	nop
 800dfea:	3724      	adds	r7, #36	; 0x24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd90      	pop	{r4, r7, pc}
 800dff0:	0800dff5 	.word	0x0800dff5

0800dff4 <_ZN23FrontendApplicationBase36gotoScreen2ScreenBlockTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenBlockTransitionImpl()
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af02      	add	r7, sp, #8
 800dffa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e008:	461a      	mov	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	4b04      	ldr	r3, [pc, #16]	; (800e024 <_ZN23FrontendApplicationBase36gotoScreen2ScreenBlockTransitionImplEv+0x30>)
 800e014:	4804      	ldr	r0, [pc, #16]	; (800e028 <_ZN23FrontendApplicationBase36gotoScreen2ScreenBlockTransitionImplEv+0x34>)
 800e016:	f000 faa3 	bl	800e560 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e01a:	bf00      	nop
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	2004f678 	.word	0x2004f678
 800e028:	2004f674 	.word	0x2004f674

0800e02c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	4a04      	ldr	r2, [pc, #16]	; (800e048 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	601a      	str	r2, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4618      	mov	r0, r3
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	08027d94 	.word	0x08027d94

0800e04c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff ffe8 	bl	800e02c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e05c:	4a08      	ldr	r2, [pc, #32]	; (800e080 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	605a      	str	r2, [r3, #4]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2200      	movs	r2, #0
 800e06c:	609a      	str	r2, [r3, #8]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	60da      	str	r2, [r3, #12]
    {
    }
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4618      	mov	r0, r3
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	08027d0c 	.word	0x08027d0c

0800e084 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	4639      	mov	r1, r7
 800e090:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff ffc8 	bl	800e02c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e09c:	4a08      	ldr	r2, [pc, #32]	; (800e0c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	605a      	str	r2, [r3, #4]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	463a      	mov	r2, r7
 800e0ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0b2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3710      	adds	r7, #16
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	08027d0c 	.word	0x08027d0c

0800e0c4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7ff fbc8 	bl	800d864 <_ZN8touchgfx10TransitionC1Ev>
 800e0d4:	4a03      	ldr	r2, [pc, #12]	; (800e0e4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	08027c9c 	.word	0x08027c9c

0800e0e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e0e8:	b590      	push	{r4, r7, lr}
 800e0ea:	b08f      	sub	sp, #60	; 0x3c
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
 800e0f4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	689a      	ldr	r2, [r3, #8]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	3320      	adds	r3, #32
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4610      	mov	r0, r2
 800e106:	4798      	blx	r3
 800e108:	4603      	mov	r3, r0
 800e10a:	f241 023b 	movw	r2, #4155	; 0x103b
 800e10e:	4293      	cmp	r3, r2
 800e110:	d805      	bhi.n	800e11e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800e112:	4b7f      	ldr	r3, [pc, #508]	; (800e310 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e114:	4a7f      	ldr	r2, [pc, #508]	; (800e314 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e116:	21a3      	movs	r1, #163	; 0xa3
 800e118:	487f      	ldr	r0, [pc, #508]	; (800e318 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e11a:	f017 fb9b 	bl	8025854 <__assert_func>
 800e11e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685a      	ldr	r2, [r3, #4]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	3320      	adds	r3, #32
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4610      	mov	r0, r2
 800e130:	4798      	blx	r3
 800e132:	4603      	mov	r3, r0
 800e134:	2b0f      	cmp	r3, #15
 800e136:	d805      	bhi.n	800e144 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800e138:	4b78      	ldr	r3, [pc, #480]	; (800e31c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800e13a:	4a76      	ldr	r2, [pc, #472]	; (800e314 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e13c:	21a4      	movs	r1, #164	; 0xa4
 800e13e:	4876      	ldr	r0, [pc, #472]	; (800e318 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e140:	f017 fb88 	bl	8025854 <__assert_func>
 800e144:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	68da      	ldr	r2, [r3, #12]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3320      	adds	r3, #32
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4610      	mov	r0, r2
 800e156:	4798      	blx	r3
 800e158:	4603      	mov	r3, r0
 800e15a:	2b0b      	cmp	r3, #11
 800e15c:	d805      	bhi.n	800e16a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800e15e:	4b70      	ldr	r3, [pc, #448]	; (800e320 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800e160:	4a6c      	ldr	r2, [pc, #432]	; (800e314 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e162:	21a5      	movs	r1, #165	; 0xa5
 800e164:	486c      	ldr	r0, [pc, #432]	; (800e318 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e166:	f017 fb75 	bl	8025854 <__assert_func>
 800e16a:	bf00      	nop
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	627b      	str	r3, [r7, #36]	; 0x24
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e178:	f008 fe10 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 800e17c:	4603      	mov	r3, r0
 800e17e:	4618      	mov	r0, r3
 800e180:	f008 fe12 	bl	8016da8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d008      	beq.n	800e19e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800e18c:	6a3b      	ldr	r3, [r7, #32]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	6a3b      	ldr	r3, [r7, #32]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	330c      	adds	r3, #12
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4610      	mov	r0, r2
 800e19c:	4798      	blx	r3
    if (*currentTrans)
 800e19e:	6a3b      	ldr	r3, [r7, #32]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d007      	beq.n	800e1b6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	6a3b      	ldr	r3, [r7, #32]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	4798      	blx	r3
    if (*currentScreen)
 800e1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d008      	beq.n	800e1d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800e1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	3314      	adds	r3, #20
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4610      	mov	r0, r2
 800e1ce:	4798      	blx	r3
    if (*currentPresenter)
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d008      	beq.n	800e1ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800e1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	4798      	blx	r3
    if (*currentScreen)
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d007      	beq.n	800e202 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800e1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4610      	mov	r0, r2
 800e200:	4798      	blx	r3
    if (*currentPresenter)
 800e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d008      	beq.n	800e21c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	3308      	adds	r3, #8
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4610      	mov	r0, r2
 800e21a:	4798      	blx	r3
}
 800e21c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	2100      	movs	r1, #0
 800e224:	4618      	mov	r0, r3
 800e226:	f000 fab5 	bl	800e794 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e22a:	4603      	mov	r3, r0
 800e22c:	4619      	mov	r1, r3
 800e22e:	200c      	movs	r0, #12
 800e230:	f7ff f89a 	bl	800d368 <_ZnwjPv>
 800e234:	4604      	mov	r4, r0
 800e236:	4620      	mov	r0, r4
 800e238:	f7ff ff44 	bl	800e0c4 <_ZN8touchgfx12NoTransitionC1Ev>
 800e23c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	2100      	movs	r1, #0
 800e244:	4618      	mov	r0, r3
 800e246:	f000 fab8 	bl	800e7ba <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800e24a:	4603      	mov	r3, r0
 800e24c:	4619      	mov	r1, r3
 800e24e:	f241 003c 	movw	r0, #4156	; 0x103c
 800e252:	f7ff f889 	bl	800d368 <_ZnwjPv>
 800e256:	4604      	mov	r4, r0
 800e258:	4620      	mov	r0, r4
 800e25a:	f002 fc6d 	bl	8010b38 <_ZN11Screen1ViewC1Ev>
 800e25e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	2100      	movs	r1, #0
 800e266:	4618      	mov	r0, r3
 800e268:	f000 faba 	bl	800e7e0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800e26c:	4603      	mov	r3, r0
 800e26e:	4619      	mov	r1, r3
 800e270:	2010      	movs	r0, #16
 800e272:	f7ff f879 	bl	800d368 <_ZnwjPv>
 800e276:	4604      	mov	r4, r0
 800e278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e27a:	4620      	mov	r0, r4
 800e27c:	f002 fc04 	bl	8010a88 <_ZN16Screen1PresenterC1ER11Screen1View>
 800e280:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e286:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e28c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e292:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	2b00      	cmp	r3, #0
 800e298:	d002      	beq.n	800e2a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800e29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29c:	3304      	adds	r3, #4
 800e29e:	e000      	b.n	800e2a2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e2a6:	f7ff fbcb 	bl	800da40 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff fd5e 	bl	800dd72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f000 faa3 	bl	800e806 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800e2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c2:	61fb      	str	r3, [r7, #28]
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	61bb      	str	r3, [r7, #24]
 800e2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ca:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	330c      	adds	r3, #12
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	69f8      	ldr	r0, [r7, #28]
 800e2d6:	4798      	blx	r3
    newPresenter->activate();
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	69b8      	ldr	r0, [r7, #24]
 800e2e0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e2e2:	6979      	ldr	r1, [r7, #20]
 800e2e4:	69f8      	ldr	r0, [r7, #28]
 800e2e6:	f00a f9e5 	bl	80186b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	3310      	adds	r3, #16
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	6978      	ldr	r0, [r7, #20]
 800e2f4:	4798      	blx	r3
    newTransition->invalidate();
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3314      	adds	r3, #20
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6978      	ldr	r0, [r7, #20]
 800e300:	4798      	blx	r3
}
 800e302:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e306:	4618      	mov	r0, r3
 800e308:	373c      	adds	r7, #60	; 0x3c
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd90      	pop	{r4, r7, pc}
 800e30e:	bf00      	nop
 800e310:	08026afc 	.word	0x08026afc
 800e314:	08026b8c 	.word	0x08026b8c
 800e318:	08026c90 	.word	0x08026c90
 800e31c:	08026cd4 	.word	0x08026cd4
 800e320:	08026d78 	.word	0x08026d78

0800e324 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e324:	b590      	push	{r4, r7, lr}
 800e326:	b08f      	sub	sp, #60	; 0x3c
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
 800e330:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	689a      	ldr	r2, [r3, #8]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3320      	adds	r3, #32
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4610      	mov	r0, r2
 800e342:	4798      	blx	r3
 800e344:	4603      	mov	r3, r0
 800e346:	f241 023b 	movw	r2, #4155	; 0x103b
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d805      	bhi.n	800e35a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800e34e:	4b7f      	ldr	r3, [pc, #508]	; (800e54c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e350:	4a7f      	ldr	r2, [pc, #508]	; (800e550 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e352:	21a3      	movs	r1, #163	; 0xa3
 800e354:	487f      	ldr	r0, [pc, #508]	; (800e554 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e356:	f017 fa7d 	bl	8025854 <__assert_func>
 800e35a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685a      	ldr	r2, [r3, #4]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	3320      	adds	r3, #32
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4610      	mov	r0, r2
 800e36c:	4798      	blx	r3
 800e36e:	4603      	mov	r3, r0
 800e370:	2b0f      	cmp	r3, #15
 800e372:	d805      	bhi.n	800e380 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800e374:	4b78      	ldr	r3, [pc, #480]	; (800e558 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800e376:	4a76      	ldr	r2, [pc, #472]	; (800e550 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e378:	21a4      	movs	r1, #164	; 0xa4
 800e37a:	4876      	ldr	r0, [pc, #472]	; (800e554 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e37c:	f017 fa6a 	bl	8025854 <__assert_func>
 800e380:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68da      	ldr	r2, [r3, #12]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	3320      	adds	r3, #32
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4610      	mov	r0, r2
 800e392:	4798      	blx	r3
 800e394:	4603      	mov	r3, r0
 800e396:	2b53      	cmp	r3, #83	; 0x53
 800e398:	d805      	bhi.n	800e3a6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800e39a:	4b70      	ldr	r3, [pc, #448]	; (800e55c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800e39c:	4a6c      	ldr	r2, [pc, #432]	; (800e550 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e39e:	21a5      	movs	r1, #165	; 0xa5
 800e3a0:	486c      	ldr	r0, [pc, #432]	; (800e554 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e3a2:	f017 fa57 	bl	8025854 <__assert_func>
 800e3a6:	bf00      	nop
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e3b4:	f008 fcf2 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f008 fcf4 	bl	8016da8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e3c0:	6a3b      	ldr	r3, [r7, #32]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d008      	beq.n	800e3da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	6a3b      	ldr	r3, [r7, #32]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	330c      	adds	r3, #12
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	4798      	blx	r3
    if (*currentTrans)
 800e3da:	6a3b      	ldr	r3, [r7, #32]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d007      	beq.n	800e3f2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800e3e2:	6a3b      	ldr	r3, [r7, #32]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	6a3b      	ldr	r3, [r7, #32]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	4798      	blx	r3
    if (*currentScreen)
 800e3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d008      	beq.n	800e40c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800e3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	3314      	adds	r3, #20
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4610      	mov	r0, r2
 800e40a:	4798      	blx	r3
    if (*currentPresenter)
 800e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d008      	beq.n	800e426 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3304      	adds	r3, #4
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4610      	mov	r0, r2
 800e424:	4798      	blx	r3
    if (*currentScreen)
 800e426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d007      	beq.n	800e43e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4610      	mov	r0, r2
 800e43c:	4798      	blx	r3
    if (*currentPresenter)
 800e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d008      	beq.n	800e458 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3308      	adds	r3, #8
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4610      	mov	r0, r2
 800e456:	4798      	blx	r3
}
 800e458:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	2100      	movs	r1, #0
 800e460:	4618      	mov	r0, r3
 800e462:	f000 f9de 	bl	800e822 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>
 800e466:	4603      	mov	r3, r0
 800e468:	4619      	mov	r1, r3
 800e46a:	2054      	movs	r0, #84	; 0x54
 800e46c:	f7fe ff7c 	bl	800d368 <_ZnwjPv>
 800e470:	4604      	mov	r4, r0
 800e472:	2114      	movs	r1, #20
 800e474:	4620      	mov	r0, r4
 800e476:	f000 fa2b 	bl	800e8d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>
 800e47a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	2100      	movs	r1, #0
 800e482:	4618      	mov	r0, r3
 800e484:	f000 f999 	bl	800e7ba <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800e488:	4603      	mov	r3, r0
 800e48a:	4619      	mov	r1, r3
 800e48c:	f241 003c 	movw	r0, #4156	; 0x103c
 800e490:	f7fe ff6a 	bl	800d368 <_ZnwjPv>
 800e494:	4604      	mov	r4, r0
 800e496:	4620      	mov	r0, r4
 800e498:	f002 fb4e 	bl	8010b38 <_ZN11Screen1ViewC1Ev>
 800e49c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 f99b 	bl	800e7e0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	2010      	movs	r0, #16
 800e4b0:	f7fe ff5a 	bl	800d368 <_ZnwjPv>
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f002 fae5 	bl	8010a88 <_ZN16Screen1PresenterC1ER11Screen1View>
 800e4be:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4c4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4ca:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800e4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4da:	3304      	adds	r3, #4
 800e4dc:	e000      	b.n	800e4e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e4e4:	f7ff faac 	bl	800da40 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7ff fc3f 	bl	800dd72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 f984 	bl	800e806 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e500:	61fb      	str	r3, [r7, #28]
 800e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e504:	61bb      	str	r3, [r7, #24]
 800e506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e508:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	330c      	adds	r3, #12
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	69f8      	ldr	r0, [r7, #28]
 800e514:	4798      	blx	r3
    newPresenter->activate();
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	69b8      	ldr	r0, [r7, #24]
 800e51e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e520:	6979      	ldr	r1, [r7, #20]
 800e522:	69f8      	ldr	r0, [r7, #28]
 800e524:	f00a f8c6 	bl	80186b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	3310      	adds	r3, #16
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	6978      	ldr	r0, [r7, #20]
 800e532:	4798      	blx	r3
    newTransition->invalidate();
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	3314      	adds	r3, #20
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6978      	ldr	r0, [r7, #20]
 800e53e:	4798      	blx	r3
}
 800e540:	bf00      	nop
    return newPresenter;
 800e542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e544:	4618      	mov	r0, r3
 800e546:	373c      	adds	r7, #60	; 0x3c
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd90      	pop	{r4, r7, pc}
 800e54c:	08026afc 	.word	0x08026afc
 800e550:	08026e1c 	.word	0x08026e1c
 800e554:	08026c90 	.word	0x08026c90
 800e558:	08026cd4 	.word	0x08026cd4
 800e55c:	08026d78 	.word	0x08026d78

0800e560 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e560:	b590      	push	{r4, r7, lr}
 800e562:	b08f      	sub	sp, #60	; 0x3c
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	607a      	str	r2, [r7, #4]
 800e56c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3320      	adds	r3, #32
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4610      	mov	r0, r2
 800e57e:	4798      	blx	r3
 800e580:	4603      	mov	r3, r0
 800e582:	2b97      	cmp	r3, #151	; 0x97
 800e584:	d805      	bhi.n	800e592 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800e586:	4b7e      	ldr	r3, [pc, #504]	; (800e780 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800e588:	4a7e      	ldr	r2, [pc, #504]	; (800e784 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e58a:	21a3      	movs	r1, #163	; 0xa3
 800e58c:	487e      	ldr	r0, [pc, #504]	; (800e788 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e58e:	f017 f961 	bl	8025854 <__assert_func>
 800e592:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3320      	adds	r3, #32
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	4798      	blx	r3
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b0f      	cmp	r3, #15
 800e5aa:	d805      	bhi.n	800e5b8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800e5ac:	4b77      	ldr	r3, [pc, #476]	; (800e78c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e5ae:	4a75      	ldr	r2, [pc, #468]	; (800e784 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e5b0:	21a4      	movs	r1, #164	; 0xa4
 800e5b2:	4875      	ldr	r0, [pc, #468]	; (800e788 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e5b4:	f017 f94e 	bl	8025854 <__assert_func>
 800e5b8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	68da      	ldr	r2, [r3, #12]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	3320      	adds	r3, #32
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	4798      	blx	r3
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b13      	cmp	r3, #19
 800e5d0:	d805      	bhi.n	800e5de <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800e5d2:	4b6f      	ldr	r3, [pc, #444]	; (800e790 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e5d4:	4a6b      	ldr	r2, [pc, #428]	; (800e784 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e5d6:	21a5      	movs	r1, #165	; 0xa5
 800e5d8:	486b      	ldr	r0, [pc, #428]	; (800e788 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e5da:	f017 f93b 	bl	8025854 <__assert_func>
 800e5de:	bf00      	nop
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e5ec:	f008 fbd6 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f008 fbd8 	bl	8016da8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e5f8:	6a3b      	ldr	r3, [r7, #32]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d008      	beq.n	800e612 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800e600:	6a3b      	ldr	r3, [r7, #32]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	6a3b      	ldr	r3, [r7, #32]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	330c      	adds	r3, #12
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4610      	mov	r0, r2
 800e610:	4798      	blx	r3
    if (*currentTrans)
 800e612:	6a3b      	ldr	r3, [r7, #32]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d007      	beq.n	800e62a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800e61a:	6a3b      	ldr	r3, [r7, #32]
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	6a3b      	ldr	r3, [r7, #32]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4610      	mov	r0, r2
 800e628:	4798      	blx	r3
    if (*currentScreen)
 800e62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d008      	beq.n	800e644 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	3314      	adds	r3, #20
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4610      	mov	r0, r2
 800e642:	4798      	blx	r3
    if (*currentPresenter)
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d008      	beq.n	800e65e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	3304      	adds	r3, #4
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4610      	mov	r0, r2
 800e65c:	4798      	blx	r3
    if (*currentScreen)
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d007      	beq.n	800e676 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4610      	mov	r0, r2
 800e674:	4798      	blx	r3
    if (*currentPresenter)
 800e676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d008      	beq.n	800e690 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3308      	adds	r3, #8
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4610      	mov	r0, r2
 800e68e:	4798      	blx	r3
}
 800e690:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	2100      	movs	r1, #0
 800e698:	4618      	mov	r0, r3
 800e69a:	f000 f97d 	bl	800e998 <_ZN8touchgfx17AbstractPartition2atINS_15BlockTransitionEEERT_t>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	2014      	movs	r0, #20
 800e6a4:	f7fe fe60 	bl	800d368 <_ZnwjPv>
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f7ff fa3c 	bl	800db28 <_ZN8touchgfx15BlockTransitionC1Ev>
 800e6b0:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f000 f980 	bl	800e9be <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	2098      	movs	r0, #152	; 0x98
 800e6c4:	f7fe fe50 	bl	800d368 <_ZnwjPv>
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f002 fae8 	bl	8010ca0 <_ZN11Screen2ViewC1Ev>
 800e6d0:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f000 f983 	bl	800e9e4 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	2010      	movs	r0, #16
 800e6e4:	f7fe fe40 	bl	800d368 <_ZnwjPv>
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f002 fa81 	bl	8010bf4 <_ZN16Screen2PresenterC1ER11Screen2View>
 800e6f2:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6f8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6fe:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e704:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	3304      	adds	r3, #4
 800e710:	e000      	b.n	800e714 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e712:	2300      	movs	r3, #0
 800e714:	4619      	mov	r1, r3
 800e716:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e718:	f7ff f992 	bl	800da40 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71e:	3304      	adds	r3, #4
 800e720:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e722:	4618      	mov	r0, r3
 800e724:	f7ff fb25 	bl	800dd72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e72c:	4618      	mov	r0, r3
 800e72e:	f000 f96c 	bl	800ea0a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 800e732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e734:	61fb      	str	r3, [r7, #28]
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	61bb      	str	r3, [r7, #24]
 800e73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e73c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	330c      	adds	r3, #12
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	69f8      	ldr	r0, [r7, #28]
 800e748:	4798      	blx	r3
    newPresenter->activate();
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	69b8      	ldr	r0, [r7, #24]
 800e752:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e754:	6979      	ldr	r1, [r7, #20]
 800e756:	69f8      	ldr	r0, [r7, #28]
 800e758:	f009 ffac 	bl	80186b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3310      	adds	r3, #16
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6978      	ldr	r0, [r7, #20]
 800e766:	4798      	blx	r3
    newTransition->invalidate();
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	3314      	adds	r3, #20
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	6978      	ldr	r0, [r7, #20]
 800e772:	4798      	blx	r3
}
 800e774:	bf00      	nop
    return newPresenter;
 800e776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e778:	4618      	mov	r0, r3
 800e77a:	373c      	adds	r7, #60	; 0x3c
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd90      	pop	{r4, r7, pc}
 800e780:	08026afc 	.word	0x08026afc
 800e784:	08026f34 	.word	0x08026f34
 800e788:	08026c90 	.word	0x08026c90
 800e78c:	08026cd4 	.word	0x08026cd4
 800e790:	08026d78 	.word	0x08026d78

0800e794 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	460b      	mov	r3, r1
 800e79e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	3324      	adds	r3, #36	; 0x24
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	887a      	ldrh	r2, [r7, #2]
 800e7aa:	4611      	mov	r1, r2
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	4798      	blx	r3
 800e7b0:	4603      	mov	r3, r0
    }
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b082      	sub	sp, #8
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	3324      	adds	r3, #36	; 0x24
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	887a      	ldrh	r2, [r7, #2]
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	4798      	blx	r3
 800e7d6:	4603      	mov	r3, r0
    }
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	3324      	adds	r3, #36	; 0x24
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	887a      	ldrh	r2, [r7, #2]
 800e7f6:	4611      	mov	r1, r2
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	4798      	blx	r3
 800e7fc:	4603      	mov	r3, r0
    }
 800e7fe:	4618      	mov	r0, r3
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e806:	b480      	push	{r7}
 800e808:	b083      	sub	sp, #12
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
 800e80e:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	683a      	ldr	r2, [r7, #0]
 800e814:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e816:	bf00      	nop
 800e818:	370c      	adds	r7, #12
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 800e822:	b580      	push	{r7, lr}
 800e824:	b082      	sub	sp, #8
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
 800e82a:	460b      	mov	r3, r1
 800e82c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	3324      	adds	r3, #36	; 0x24
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	887a      	ldrh	r2, [r7, #2]
 800e838:	4611      	mov	r1, r2
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	4798      	blx	r3
 800e83e:	4603      	mov	r3, r0
    }
 800e840:	4618      	mov	r0, r3
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	4a05      	ldr	r2, [pc, #20]	; (800e868 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	601a      	str	r2, [r3, #0]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4618      	mov	r0, r3
 800e85a:	f7ff fa99 	bl	800dd90 <_ZN8touchgfx6WidgetD1Ev>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4618      	mov	r0, r3
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}
 800e868:	080288ec 	.word	0x080288ec

0800e86c <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f7ff ffe7 	bl	800e848 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800e87a:	212c      	movs	r1, #44	; 0x2c
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f016 ffbd 	bl	80257fc <_ZdlPvj>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	4a05      	ldr	r2, [pc, #20]	; (800e8ac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev+0x20>)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	601a      	str	r2, [r3, #0]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4618      	mov	r0, r3
 800e89e:	f000 f90b 	bl	800eab8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	08027be0 	.word	0x08027be0

0800e8b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED0Ev>:
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7ff ffe7 	bl	800e88c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800e8be:	2110      	movs	r1, #16
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f016 ff9b 	bl	80257fc <_ZdlPvj>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800e8d0:	b590      	push	{r4, r7, lr}
 800e8d2:	b087      	sub	sp, #28
 800e8d4:	af02      	add	r7, sp, #8
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	460b      	mov	r3, r1
 800e8da:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fe ffc0 	bl	800d864 <_ZN8touchgfx10TransitionC1Ev>
 800e8e4:	4a27      	ldr	r2, [pc, #156]	; (800e984 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb4>)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	601a      	str	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	330c      	adds	r3, #12
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f006 fa52 	bl	8014d98 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	639a      	str	r2, [r3, #56]	; 0x38
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800e904:	4a20      	ldr	r2, [pc, #128]	; (800e988 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb8>)
 800e906:	f107 0308 	add.w	r3, r7, #8
 800e90a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e90e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e912:	f107 0308 	add.w	r3, r7, #8
 800e916:	cb0c      	ldmia	r3, {r2, r3}
 800e918:	6879      	ldr	r1, [r7, #4]
 800e91a:	4620      	mov	r0, r4
 800e91c:	f000 f8ac 	bl	800ea78 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	78fa      	ldrb	r2, [r7, #3]
 800e924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800e938:	4b14      	ldr	r3, [pc, #80]	; (800e98c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xbc>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d01c      	beq.n	800e97a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f103 000c 	add.w	r0, r3, #12
 800e946:	4b12      	ldr	r3, [pc, #72]	; (800e990 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc0>)
 800e948:	881b      	ldrh	r3, [r3, #0]
 800e94a:	b21a      	sxth	r2, r3
 800e94c:	4b11      	ldr	r3, [pc, #68]	; (800e994 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	b21b      	sxth	r3, r3
 800e952:	9300      	str	r3, [sp, #0]
 800e954:	4613      	mov	r3, r2
 800e956:	2200      	movs	r2, #0
 800e958:	2100      	movs	r1, #0
 800e95a:	f7fe fe19 	bl	800d590 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	330c      	adds	r3, #12
 800e962:	4618      	mov	r0, r3
 800e964:	f006 f99b 	bl	8014c9e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
                break;
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
                break;
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800e968:	4b0a      	ldr	r3, [pc, #40]	; (800e994 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800e96a:	881b      	ldrh	r3, [r3, #0]
 800e96c:	425b      	negs	r3, r3
 800e96e:	b29b      	uxth	r3, r3
 800e970:	b21a      	sxth	r2, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 800e978:	bf00      	nop
            }
        }
    }
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4618      	mov	r0, r3
 800e97e:	3714      	adds	r7, #20
 800e980:	46bd      	mov	sp, r7
 800e982:	bd90      	pop	{r4, r7, pc}
 800e984:	08027bb4 	.word	0x08027bb4
 800e988:	0802703c 	.word	0x0802703c
 800e98c:	2004f62f 	.word	0x2004f62f
 800e990:	2004f624 	.word	0x2004f624
 800e994:	2004f626 	.word	0x2004f626

0800e998 <_ZN8touchgfx17AbstractPartition2atINS_15BlockTransitionEEERT_t>:
    T& at(const uint16_t index)
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	3324      	adds	r3, #36	; 0x24
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	887a      	ldrh	r2, [r7, #2]
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	4798      	blx	r3
 800e9b4:	4603      	mov	r3, r0
    }
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b082      	sub	sp, #8
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	3324      	adds	r3, #36	; 0x24
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	887a      	ldrh	r2, [r7, #2]
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	4798      	blx	r3
 800e9da:	4603      	mov	r3, r0
    }
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	3324      	adds	r3, #36	; 0x24
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	887a      	ldrh	r2, [r7, #2]
 800e9fa:	4611      	mov	r1, r2
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	4798      	blx	r3
 800ea00:	4603      	mov	r3, r0
    }
 800ea02:	4618      	mov	r0, r3
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800ea0a:	b480      	push	{r7}
 800ea0c:	b083      	sub	sp, #12
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ea1a:	bf00      	nop
 800ea1c:	370c      	adds	r7, #12
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b082      	sub	sp, #8
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
 800ea2e:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea34:	683a      	ldr	r2, [r7, #0]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d00a      	beq.n	800ea50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2a>
        case WEST:
            d.moveRelative(calculatedValue, 0);
            break;
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	3354      	adds	r3, #84	; 0x54
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800ea48:	2100      	movs	r1, #0
 800ea4a:	6838      	ldr	r0, [r7, #0]
 800ea4c:	4798      	blx	r3
            break;
 800ea4e:	e000      	b.n	800ea52 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 800ea50:	bf00      	nop
        }
    }
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	4a04      	ldr	r2, [pc, #16]	; (800ea74 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	601a      	str	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	370c      	adds	r7, #12
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr
 800ea74:	08027bf8 	.word	0x08027bf8

0800ea78 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	4639      	mov	r1, r7
 800ea84:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7ff ffe4 	bl	800ea58 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800ea90:	4a08      	ldr	r2, [pc, #32]	; (800eab4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	605a      	str	r2, [r3, #4]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	3308      	adds	r3, #8
 800eaa0:	463a      	mov	r2, r7
 800eaa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eaa6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	08027be0 	.word	0x08027be0

0800eab8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
    }
 800eac0:	4a04      	ldr	r2, [pc, #16]	; (800ead4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4618      	mov	r0, r3
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	08027bf8 	.word	0x08027bf8

0800ead8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
    }
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7ff ffe9 	bl	800eab8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800eae6:	2104      	movs	r1, #4
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f016 fe87 	bl	80257fc <_ZdlPvj>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>:
class SlideTransition : public Transition
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	4a0a      	ldr	r2, [pc, #40]	; (800eb2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev+0x34>)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	601a      	str	r2, [r3, #0]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	333c      	adds	r3, #60	; 0x3c
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7ff febe 	bl	800e88c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	330c      	adds	r3, #12
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff fe97 	bl	800e848 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fe feb7 	bl	800d890 <_ZN8touchgfx10TransitionD1Ev>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	4618      	mov	r0, r3
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	08027bb4 	.word	0x08027bb4

0800eb30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED0Ev>:
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff ffdd 	bl	800eaf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>
 800eb3e:	2154      	movs	r1, #84	; 0x54
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f016 fe5b 	bl	80257fc <_ZdlPvj>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <_ZN8touchgfx15BlockTransitionD1Ev>:
class BlockTransition : public Transition
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	4a05      	ldr	r2, [pc, #20]	; (800eb70 <_ZN8touchgfx15BlockTransitionD1Ev+0x20>)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	601a      	str	r2, [r3, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7fe fe95 	bl	800d890 <_ZN8touchgfx10TransitionD1Ev>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	08027c78 	.word	0x08027c78

0800eb74 <_ZN8touchgfx15BlockTransitionD0Ev>:
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7ff ffe7 	bl	800eb50 <_ZN8touchgfx15BlockTransitionD1Ev>
 800eb82:	2114      	movs	r1, #20
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f016 fe39 	bl	80257fc <_ZdlPvj>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <_ZN8touchgfx12NoTransitionD1Ev>:
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	4a05      	ldr	r2, [pc, #20]	; (800ebb4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	601a      	str	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fe fe73 	bl	800d890 <_ZN8touchgfx10TransitionD1Ev>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	08027c9c 	.word	0x08027c9c

0800ebb8 <_ZN8touchgfx12NoTransitionD0Ev>:
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7ff ffe7 	bl	800eb94 <_ZN8touchgfx12NoTransitionD1Ev>
 800ebc6:	210c      	movs	r1, #12
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f016 fe17 	bl	80257fc <_ZdlPvj>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	4a05      	ldr	r2, [pc, #20]	; (800ebf8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	601a      	str	r2, [r3, #0]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fe fc73 	bl	800d4d4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	08027d0c 	.word	0x08027d0c

0800ebfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f7ff ffe7 	bl	800ebd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ec0a:	2110      	movs	r1, #16
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f016 fdf5 	bl	80257fc <_ZdlPvj>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4618      	mov	r0, r3
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800ec24:	4b40      	ldr	r3, [pc, #256]	; (800ed28 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x10c>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	f083 0301 	eor.w	r3, r3, #1
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d003      	beq.n	800ec3a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1e>
            done = true;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	721a      	strb	r2, [r3, #8]
            return;
 800ec38:	e073      	b.n	800ed22 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7fe fe47 	bl	800d8d0 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ec48:	3301      	adds	r3, #1
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d82f      	bhi.n	800ecc2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ec68:	b298      	uxth	r0, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	2100      	movs	r1, #0
 800ec7a:	f009 fd21 	bl	80186c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	461a      	mov	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d01b      	beq.n	800ecd2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800eca8:	2a00      	cmp	r2, #0
 800ecaa:	dd01      	ble.n	800ecb0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x94>
 800ecac:	2201      	movs	r2, #1
 800ecae:	e001      	b.n	800ecb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x98>
 800ecb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecb4:	4413      	add	r3, r2
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	b21a      	sxth	r2, r3
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800ecc0:	e007      	b.n	800ecd2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
            done = true;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 800ecd0:	e027      	b.n	800ed22 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getY();
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	330c      	adds	r3, #12
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fe fc7b 	bl	800d5d2 <_ZNK8touchgfx8Drawable4getYEv>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	4619      	mov	r1, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800ece6:	b29a      	uxth	r2, r3
 800ece8:	b28b      	uxth	r3, r1
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	b21a      	sxth	r2, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(0, calculatedValue);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f103 000c 	add.w	r0, r3, #12
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800ed02:	461a      	mov	r2, r3
 800ed04:	2100      	movs	r1, #0
 800ed06:	f009 f889 	bl	8017e1c <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800ed0a:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6858      	ldr	r0, [r3, #4]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	337c      	adds	r3, #124	; 0x7c
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	323c      	adds	r2, #60	; 0x3c
 800ed1e:	4611      	mov	r1, r2
 800ed20:	4798      	blx	r3
    }
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	2004f62f 	.word	0x2004f62f

0800ed2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv>:
    virtual void tearDown()
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800ed34:	4b0b      	ldr	r3, [pc, #44]	; (800ed64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x38>)
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00e      	beq.n	800ed5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d00a      	beq.n	800ed5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6858      	ldr	r0, [r3, #4]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	3364      	adds	r3, #100	; 0x64
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	320c      	adds	r2, #12
 800ed56:	4611      	mov	r1, r2
 800ed58:	4798      	blx	r3
    }
 800ed5a:	bf00      	nop
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	2004f62f 	.word	0x2004f62f

0800ed68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv>:
    virtual void init()
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b088      	sub	sp, #32
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800ed70:	4b1a      	ldr	r3, [pc, #104]	; (800eddc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x74>)
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d02d      	beq.n	800edd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x6c>
            Transition::init();
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fe fdbc 	bl	800d8f8 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800ed80:	4a17      	ldr	r2, [pc, #92]	; (800ede0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x78>)
 800ed82:	f107 0318 	add.w	r3, r7, #24
 800ed86:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed8a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed8e:	f107 0008 	add.w	r0, r7, #8
 800ed92:	f107 0318 	add.w	r3, r7, #24
 800ed96:	cb0c      	ldmia	r3, {r2, r3}
 800ed98:	6879      	ldr	r1, [r7, #4]
 800ed9a:	f7ff fe6d 	bl	800ea78 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	685a      	ldr	r2, [r3, #4]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	337c      	adds	r3, #124	; 0x7c
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f107 0108 	add.w	r1, r7, #8
 800edb0:	4610      	mov	r0, r2
 800edb2:	4798      	blx	r3
            screenContainer->add(snapshot);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6858      	ldr	r0, [r3, #4]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	3360      	adds	r3, #96	; 0x60
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	320c      	adds	r2, #12
 800edc6:	4611      	mov	r1, r2
 800edc8:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800edca:	f107 0308 	add.w	r3, r7, #8
 800edce:	4618      	mov	r0, r3
 800edd0:	f7ff fd5c 	bl	800e88c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
    }
 800edd4:	bf00      	nop
 800edd6:	3720      	adds	r7, #32
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	2004f62f 	.word	0x2004f62f
 800ede0:	08027044 	.word	0x08027044

0800ede4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3354      	adds	r3, #84	; 0x54
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a05      	ldr	r2, [pc, #20]	; (800ee0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x28>)
 800edf8:	8812      	ldrh	r2, [r2, #0]
 800edfa:	b212      	sxth	r2, r2
 800edfc:	2100      	movs	r1, #0
 800edfe:	6838      	ldr	r0, [r7, #0]
 800ee00:	4798      	blx	r3
            break;
 800ee02:	bf00      	nop
    }
 800ee04:	bf00      	nop
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	2004f626 	.word	0x2004f626

0800ee10 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	68d2      	ldr	r2, [r2, #12]
 800ee22:	1052      	asrs	r2, r2, #1
 800ee24:	1898      	adds	r0, r3, r2
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	68db      	ldr	r3, [r3, #12]
 800ee2a:	f003 0301 	and.w	r3, r3, #1
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d102      	bne.n	800ee38 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x28>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	e00a      	b.n	800ee4e <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	68d2      	ldr	r2, [r2, #12]
 800ee40:	1052      	asrs	r2, r2, #1
 800ee42:	4413      	add	r3, r2
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	6892      	ldr	r2, [r2, #8]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	6839      	ldr	r1, [r7, #0]
 800ee50:	4798      	blx	r3
    }
 800ee52:	bf00      	nop
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800ee5a:	b480      	push	{r7}
 800ee5c:	b083      	sub	sp, #12
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d010      	beq.n	800ee8c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	689b      	ldr	r3, [r3, #8]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d107      	bne.n	800ee82 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	f003 0301 	and.w	r3, r3, #1
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d101      	bne.n	800ee82 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e000      	b.n	800ee84 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800ee82:	2300      	movs	r3, #0
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d001      	beq.n	800ee8c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800ee88:	2301      	movs	r3, #1
 800ee8a:	e000      	b.n	800ee8e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x34>
 800ee8c:	2300      	movs	r3, #0
    }
 800ee8e:	4618      	mov	r0, r3
 800ee90:	370c      	adds	r7, #12
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr

0800ee9a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b082      	sub	sp, #8
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	68d2      	ldr	r2, [r2, #12]
 800eeaa:	1052      	asrs	r2, r2, #1
 800eeac:	1899      	adds	r1, r3, r2
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	68db      	ldr	r3, [r3, #12]
 800eeb2:	f003 0301 	and.w	r3, r3, #1
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d102      	bne.n	800eec0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	e00a      	b.n	800eed6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	68d2      	ldr	r2, [r2, #12]
 800eec8:	1052      	asrs	r2, r2, #1
 800eeca:	4413      	add	r3, r2
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	6892      	ldr	r2, [r2, #8]
 800eed2:	4413      	add	r3, r2
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4608      	mov	r0, r1
 800eed8:	4798      	blx	r3
    }
 800eeda:	bf00      	nop
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800eee2:	b480      	push	{r7}
 800eee4:	b083      	sub	sp, #12
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d010      	beq.n	800ef14 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d107      	bne.n	800ef0a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	f003 0301 	and.w	r3, r3, #1
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d101      	bne.n	800ef0a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ef06:	2301      	movs	r3, #1
 800ef08:	e000      	b.n	800ef0c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d001      	beq.n	800ef14 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ef10:	2301      	movs	r3, #1
 800ef12:	e000      	b.n	800ef16 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800ef14:	2300      	movs	r3, #0
    }
 800ef16:	4618      	mov	r0, r3
 800ef18:	370c      	adds	r7, #12
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr

0800ef22 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800ef22:	b480      	push	{r7}
 800ef24:	b083      	sub	sp, #12
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
        : color(0)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	601a      	str	r2, [r3, #0]
    }
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4618      	mov	r0, r3
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr

0800ef3e <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800ef3e:	b480      	push	{r7}
 800ef40:	b083      	sub	sp, #12
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	6039      	str	r1, [r7, #0]
        : color(col)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	601a      	str	r2, [r3, #0]
    }
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4618      	mov	r0, r3
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
        return color;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
    }
 800ef68:	4618      	mov	r0, r3
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <_ZN8touchgfx4RectC1Ev>:
    Rect()
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	801a      	strh	r2, [r3, #0]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	805a      	strh	r2, [r3, #2]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	809a      	strh	r2, [r3, #4]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	80da      	strh	r2, [r3, #6]
    }
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4618      	mov	r0, r3
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
	...

0800efa4 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
          visible(true)
 800efac:	4a14      	ldr	r2, [pc, #80]	; (800f000 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	601a      	str	r2, [r3, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	3304      	adds	r3, #4
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff ffdc 	bl	800ef74 <_ZN8touchgfx4RectC1Ev>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	330c      	adds	r3, #12
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff ffd7 	bl	800ef74 <_ZN8touchgfx4RectC1Ev>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	615a      	str	r2, [r3, #20]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	619a      	str	r2, [r3, #24]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	61da      	str	r2, [r3, #28]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	841a      	strh	r2, [r3, #32]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	845a      	strh	r2, [r3, #34]	; 0x22
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4618      	mov	r0, r3
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	08028ae4 	.word	0x08028ae4

0800f004 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800f010:	4618      	mov	r0, r3
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
    {
 800f024:	4a06      	ldr	r2, [pc, #24]	; (800f040 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	3304      	adds	r3, #4
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 ff96 	bl	800ff60 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4618      	mov	r0, r3
 800f038:	3708      	adds	r7, #8
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	08028be0 	.word	0x08028be0

0800f044 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
    }
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7ff ffe5 	bl	800f01c <_ZN8touchgfx6ScreenD1Ev>
 800f052:	213c      	movs	r1, #60	; 0x3c
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f016 fbd1 	bl	80257fc <_ZdlPvj>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
    {
    }
 800f06c:	bf00      	nop
 800f06e:	370c      	adds	r7, #12
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
    {
    }
 800f080:	bf00      	nop
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
    {
    }
 800f094:	bf00      	nop
 800f096:	370c      	adds	r7, #12
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
    {
    }
 800f0a8:	bf00      	nop
 800f0aa:	370c      	adds	r7, #12
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800f0c0:	bf00      	nop
 800f0c2:	370c      	adds	r7, #12
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr

0800f0cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	3304      	adds	r3, #4
 800f0da:	6839      	ldr	r1, [r7, #0]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f003 fd93 	bl	8012c08 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f0e2:	bf00      	nop
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
	...

0800f0ec <_ZN8touchgfx6WidgetC1Ev>:
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff ff54 	bl	800efa4 <_ZN8touchgfx8DrawableC1Ev>
 800f0fc:	4a03      	ldr	r2, [pc, #12]	; (800f10c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	601a      	str	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4618      	mov	r0, r3
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	08027c10 	.word	0x08027c10

0800f110 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4618      	mov	r0, r3
 800f11c:	2326      	movs	r3, #38	; 0x26
 800f11e:	461a      	mov	r2, r3
 800f120:	2100      	movs	r1, #0
 800f122:	f016 fc22 	bl	802596a <memset>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4618      	mov	r0, r3
 800f12a:	f7ff ffdf 	bl	800f0ec <_ZN8touchgfx6WidgetC1Ev>
 800f12e:	4a09      	ldr	r2, [pc, #36]	; (800f154 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	601a      	str	r2, [r3, #0]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	22ff      	movs	r2, #255	; 0xff
 800f138:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	3328      	adds	r3, #40	; 0x28
 800f140:	2100      	movs	r1, #0
 800f142:	4618      	mov	r0, r3
 800f144:	f7ff fefb 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4618      	mov	r0, r3
 800f14c:	3708      	adds	r7, #8
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	0802895c 	.word	0x0802895c

0800f158 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f168:	bf00      	nop
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800f17c:	4a06      	ldr	r2, [pc, #24]	; (800f198 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	601a      	str	r2, [r3, #0]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	809a      	strh	r2, [r3, #4]
    {
    }
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	4618      	mov	r0, r3
 800f18c:	370c      	adds	r7, #12
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	08027f04 	.word	0x08027f04

0800f19c <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
    {
 800f1a4:	4a04      	ldr	r2, [pc, #16]	; (800f1b8 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	601a      	str	r2, [r3, #0]
    }
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	08027f04 	.word	0x08027f04

0800f1bc <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
    }
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7ff ffe9 	bl	800f19c <_ZN8touchgfx15AbstractPainterD1Ev>
 800f1ca:	2108      	movs	r1, #8
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f016 fb15 	bl	80257fc <_ZdlPvj>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800f1e4:	2300      	movs	r3, #0
    }
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	370c      	adds	r7, #12
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800f1f2:	b480      	push	{r7}
 800f1f4:	b083      	sub	sp, #12
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	809a      	strh	r2, [r3, #4]
        return true;
 800f206:	2301      	movs	r3, #1
    }
 800f208:	4618      	mov	r0, r3
 800f20a:	370c      	adds	r7, #12
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
    {
        return;
 800f21c:	bf00      	nop
    }
 800f21e:	370c      	adds	r7, #12
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
     */
    class Q5
    {
    public:
        /** Initializes a new instance of the Q5 class. */
        Q5()
 800f228:	b480      	push	{r7}
 800f22a:	b083      	sub	sp, #12
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
            : v(0)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	601a      	str	r2, [r3, #0]
        {
        }
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6039      	str	r1, [r7, #0]
            : v(i)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	683a      	ldr	r2, [r7, #0]
 800f252:	601a      	str	r2, [r3, #0]
        {
        }
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4618      	mov	r0, r3
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800f262:	b480      	push	{r7}
 800f264:	b083      	sub	sp, #12
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
        {
            return v;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
        }
 800f26e:	4618      	mov	r0, r3
 800f270:	370c      	adds	r7, #12
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q10 format.
         *
         * @param  i int pre-formattet in Q10 format.
         */
        explicit Q10(int i)
 800f27a:	b480      	push	{r7}
 800f27c:	b083      	sub	sp, #12
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	6039      	str	r1, [r7, #0]
            : v(i)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	601a      	str	r2, [r3, #0]
        {
        }
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4618      	mov	r0, r3
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	683a      	ldr	r2, [r7, #0]
 800f2a6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f2a8:	bf00      	nop
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	78fa      	ldrb	r2, [r7, #3]
 800f2c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800f2c8:	bf00      	nop
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	370c      	adds	r7, #12
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	b082      	sub	sp, #8
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7ff fe3b 	bl	800ef74 <_ZN8touchgfx4RectC1Ev>
    }
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
	...

0800f308 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
    {
 800f312:	4a08      	ldr	r2, [pc, #32]	; (800f334 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	601a      	str	r2, [r3, #0]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	3304      	adds	r3, #4
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7ff fe00 	bl	800ef22 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800f322:	6839      	ldr	r1, [r7, #0]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 f827 	bl	800f378 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4618      	mov	r0, r3
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	08027ef0 	.word	0x08027ef0

0800f338 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
    {
 800f340:	4a04      	ldr	r2, [pc, #16]	; (800f354 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	601a      	str	r2, [r3, #0]
    }
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4618      	mov	r0, r3
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	08027ef0 	.word	0x08027ef0

0800f358 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
    }
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7ff ffe9 	bl	800f338 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f366:	2108      	movs	r1, #8
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f016 fa47 	bl	80257fc <_ZdlPvj>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4618      	mov	r0, r3
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800f378:	b480      	push	{r7}
 800f37a:	b083      	sub	sp, #12
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	683a      	ldr	r2, [r7, #0]
 800f386:	605a      	str	r2, [r3, #4]
    }
 800f388:	bf00      	nop
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff fee8 	bl	800f174 <_ZN8touchgfx15AbstractPainterC1Ev>
 800f3a4:	4a26      	ldr	r2, [pc, #152]	; (800f440 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	601a      	str	r2, [r3, #0]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800f3ae:	f7fe fa3d 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	322c      	adds	r2, #44	; 0x2c
 800f3b8:	6812      	ldr	r2, [r2, #0]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	4790      	blx	r2
 800f3be:	4603      	mov	r3, r0
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	7bfb      	ldrb	r3, [r7, #15]
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	bf0c      	ite	eq
 800f3c8:	2301      	moveq	r3, #1
 800f3ca:	2300      	movne	r3, #0
 800f3cc:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800f3ce:	f7fe fa21 	bl	800d814 <_ZN8touchgfx3HAL11getInstanceEv>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7ff fe15 	bl	800f004 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	bf14      	ite	ne
 800f3e0:	2301      	movne	r3, #1
 800f3e2:	2300      	moveq	r3, #0
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d01b      	beq.n	800f422 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800f3ea:	f7fe fa13 	bl	800d814 <_ZN8touchgfx3HAL11getInstanceEv>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7ff fe07 	bl	800f004 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	322c      	adds	r2, #44	; 0x2c
 800f3fc:	6812      	ldr	r2, [r2, #0]
 800f3fe:	4618      	mov	r0, r3
 800f400:	4790      	blx	r2
 800f402:	4603      	mov	r3, r0
 800f404:	461a      	mov	r2, r3
 800f406:	7bfb      	ldrb	r3, [r7, #15]
 800f408:	4293      	cmp	r3, r2
 800f40a:	bf0c      	ite	eq
 800f40c:	2301      	moveq	r3, #1
 800f40e:	2300      	movne	r3, #0
 800f410:	b2da      	uxtb	r2, r3
 800f412:	7bbb      	ldrb	r3, [r7, #14]
 800f414:	4313      	orrs	r3, r2
 800f416:	b2db      	uxtb	r3, r3
 800f418:	2b00      	cmp	r3, #0
 800f41a:	bf14      	ite	ne
 800f41c:	2301      	movne	r3, #1
 800f41e:	2300      	moveq	r3, #0
 800f420:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800f422:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 800f424:	2b00      	cmp	r3, #0
 800f426:	d105      	bne.n	800f434 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 800f428:	4b06      	ldr	r3, [pc, #24]	; (800f444 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 800f42a:	4a07      	ldr	r2, [pc, #28]	; (800f448 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 800f42c:	212c      	movs	r1, #44	; 0x2c
 800f42e:	4807      	ldr	r0, [pc, #28]	; (800f44c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 800f430:	f016 fa10 	bl	8025854 <__assert_func>
 800f434:	bf00      	nop
    }
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4618      	mov	r0, r3
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	08027ed0 	.word	0x08027ed0
 800f444:	0802704c 	.word	0x0802704c
 800f448:	080270ac 	.word	0x080270ac
 800f44c:	080270e8 	.word	0x080270e8

0800f450 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	4a05      	ldr	r2, [pc, #20]	; (800f470 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	f7ff fe9b 	bl	800f19c <_ZN8touchgfx15AbstractPainterD1Ev>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4618      	mov	r0, r3
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	08027ed0 	.word	0x08027ed0

0800f474 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff ffe7 	bl	800f450 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800f482:	2108      	movs	r1, #8
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f016 f9b9 	bl	80257fc <_ZdlPvj>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4618      	mov	r0, r3
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff ff77 	bl	800f394 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	3308      	adds	r3, #8
 800f4aa:	6839      	ldr	r1, [r7, #0]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7ff ff2b 	bl	800f308 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800f4b2:	4a05      	ldr	r2, [pc, #20]	; (800f4c8 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	601a      	str	r2, [r3, #0]
 800f4b8:	4a04      	ldr	r2, [pc, #16]	; (800f4cc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	609a      	str	r2, [r3, #8]
    {
    }
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	08028668 	.word	0x08028668
 800f4cc:	0802868c 	.word	0x0802868c

0800f4d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800f4d0:	b590      	push	{r4, r7, lr}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	3308      	adds	r3, #8
 800f4de:	6839      	ldr	r1, [r7, #0]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7ff ff49 	bl	800f378 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 800f4ec:	f107 030c 	add.w	r3, r7, #12
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7ff fd33 	bl	800ef5c <_ZNK8touchgfx9colortypecvmEv>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	0a1b      	lsrs	r3, r3, #8
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f500:	f023 0307 	bic.w	r3, r3, #7
 800f504:	b29c      	uxth	r4, r3
 800f506:	f107 030c 	add.w	r3, r7, #12
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7ff fd26 	bl	800ef5c <_ZNK8touchgfx9colortypecvmEv>
 800f510:	4603      	mov	r3, r0
 800f512:	095b      	lsrs	r3, r3, #5
 800f514:	b29b      	uxth	r3, r3
 800f516:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	4323      	orrs	r3, r4
 800f51e:	b29c      	uxth	r4, r3
 800f520:	f107 030c 	add.w	r3, r7, #12
 800f524:	4618      	mov	r0, r3
 800f526:	f7ff fd19 	bl	800ef5c <_ZNK8touchgfx9colortypecvmEv>
 800f52a:	4603      	mov	r3, r0
 800f52c:	08db      	lsrs	r3, r3, #3
 800f52e:	b29b      	uxth	r3, r3
 800f530:	f003 031f 	and.w	r3, r3, #31
 800f534:	b29b      	uxth	r3, r3
 800f536:	4323      	orrs	r3, r4
 800f538:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	821a      	strh	r2, [r3, #16]
    }
 800f53e:	bf00      	nop
 800f540:	3714      	adds	r7, #20
 800f542:	46bd      	mov	sp, r7
 800f544:	bd90      	pop	{r4, r7, pc}

0800f546 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800f546:	f1a0 0008 	sub.w	r0, r0, #8
 800f54a:	e7c1      	b.n	800f4d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

0800f54c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	4a05      	ldr	r2, [pc, #20]	; (800f56c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	601a      	str	r2, [r3, #0]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7ff fd5d 	bl	800f01c <_ZN8touchgfx6ScreenD1Ev>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4618      	mov	r0, r3
 800f566:	3708      	adds	r7, #8
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	08027e9c 	.word	0x08027e9c

0800f570 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7ff ffe7 	bl	800f54c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800f57e:	2140      	movs	r1, #64	; 0x40
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f016 f93b 	bl	80257fc <_ZdlPvj>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4618      	mov	r0, r3
 800f58a:	3708      	adds	r7, #8
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	4a1b      	ldr	r2, [pc, #108]	; (800f608 <_ZN15Screen1ViewBaseD1Ev+0x78>)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	601a      	str	r2, [r3, #0]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f000 fd41 	bl	801002c <_ZN8touchgfx13PainterRGB565D1Ev>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f000 fcb3 	bl	800ff1c <_ZN8touchgfx5ShapeILt4EED1Ev>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f000 fd35 	bl	801002c <_ZN8touchgfx13PainterRGB565D1Ev>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	33f4      	adds	r3, #244	; 0xf4
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f000 fca8 	bl	800ff1c <_ZN8touchgfx5ShapeILt4EED1Ev>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	33e0      	adds	r3, #224	; 0xe0
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f000 fd2b 	bl	801002c <_ZN8touchgfx13PainterRGB565D1Ev>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	3398      	adds	r3, #152	; 0x98
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 fd04 	bl	800ffe8 <_ZN8touchgfx6CircleD1Ev>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	336c      	adds	r3, #108	; 0x6c
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f000 fcdd 	bl	800ffa4 <_ZN8touchgfx3BoxD1Ev>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	3340      	adds	r3, #64	; 0x40
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f000 fcd8 	bl	800ffa4 <_ZN8touchgfx3BoxD1Ev>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7ff ffa8 	bl	800f54c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4618      	mov	r0, r3
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	08027dd4 	.word	0x08027dd4

0800f60c <_ZN15Screen1ViewBaseD0Ev>:
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f7ff ffbb 	bl	800f590 <_ZN15Screen1ViewBaseD1Ev>
 800f61a:	f241 013c 	movw	r1, #4156	; 0x103c
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f016 f8ec 	bl	80257fc <_ZdlPvj>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4618      	mov	r0, r3
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}

0800f62e <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 800f62e:	b580      	push	{r7, lr}
 800f630:	b082      	sub	sp, #8
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f636:	f007 fbb1 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 800f63a:	4603      	mov	r3, r0
    }
 800f63c:	4618      	mov	r0, r3
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	4a05      	ldr	r2, [pc, #20]	; (800f664 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4618      	mov	r0, r3
 800f656:	f7fe fb9b 	bl	800dd90 <_ZN8touchgfx6WidgetD1Ev>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4618      	mov	r0, r3
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	08028874 	.word	0x08028874

0800f668 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7ff ffe7 	bl	800f644 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f676:	212c      	movs	r1, #44	; 0x2c
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f016 f8bf 	bl	80257fc <_ZdlPvj>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4618      	mov	r0, r3
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <_ZN8touchgfx13AbstractShapeD1Ev>:
 * around 0,0. The shapes points (corners) are calculated with regards to scaling and
 * rotation to allow for faster redrawing. Care must be taken to call
 * updateAbstractShapeCache() after updating the shape, the scale of the shape or the
 * rotation of the shape.
 */
class AbstractShape : public CanvasWidget
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	4a05      	ldr	r2, [pc, #20]	; (800f6a8 <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	601a      	str	r2, [r3, #0]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4618      	mov	r0, r3
 800f69a:	f7ff ffd3 	bl	800f644 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	08028768 	.word	0x08028768

0800f6ac <_ZN8touchgfx13AbstractShapeD0Ev>:
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7ff ffe7 	bl	800f688 <_ZN8touchgfx13AbstractShapeD1Ev>
 800f6ba:	2148      	movs	r1, #72	; 0x48
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f016 f89d 	bl	80257fc <_ZdlPvj>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <_ZN8touchgfx5ShapeILt4EEC1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 800f6cc:	b5b0      	push	{r4, r5, r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f004 fc92 	bl	8014000 <_ZN8touchgfx13AbstractShapeC1Ev>
 800f6dc:	4a1b      	ldr	r2, [pc, #108]	; (800f74c <_ZN8touchgfx5ShapeILt4EEC1Ev+0x80>)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	3348      	adds	r3, #72	; 0x48
 800f6e6:	2403      	movs	r4, #3
 800f6e8:	461d      	mov	r5, r3
 800f6ea:	2c00      	cmp	r4, #0
 800f6ec:	db05      	blt.n	800f6fa <_ZN8touchgfx5ShapeILt4EEC1Ev+0x2e>
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	f7ff fd9a 	bl	800f228 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800f6f4:	3504      	adds	r5, #4
 800f6f6:	3c01      	subs	r4, #1
 800f6f8:	e7f7      	b.n	800f6ea <_ZN8touchgfx5ShapeILt4EEC1Ev+0x1e>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	3358      	adds	r3, #88	; 0x58
 800f6fe:	2403      	movs	r4, #3
 800f700:	461d      	mov	r5, r3
 800f702:	2c00      	cmp	r4, #0
 800f704:	db05      	blt.n	800f712 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x46>
 800f706:	4628      	mov	r0, r5
 800f708:	f7ff fd8e 	bl	800f228 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800f70c:	3504      	adds	r5, #4
 800f70e:	3c01      	subs	r4, #1
 800f710:	e7f7      	b.n	800f702 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x36>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	3368      	adds	r3, #104	; 0x68
 800f716:	2403      	movs	r4, #3
 800f718:	461d      	mov	r5, r3
 800f71a:	2c00      	cmp	r4, #0
 800f71c:	db05      	blt.n	800f72a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x5e>
 800f71e:	4628      	mov	r0, r5
 800f720:	f7ff fd82 	bl	800f228 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800f724:	3504      	adds	r5, #4
 800f726:	3c01      	subs	r4, #1
 800f728:	e7f7      	b.n	800f71a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x4e>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	3378      	adds	r3, #120	; 0x78
 800f72e:	2403      	movs	r4, #3
 800f730:	461d      	mov	r5, r3
 800f732:	2c00      	cmp	r4, #0
 800f734:	db05      	blt.n	800f742 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x76>
 800f736:	4628      	mov	r0, r5
 800f738:	f7ff fd76 	bl	800f228 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800f73c:	3504      	adds	r5, #4
 800f73e:	3c01      	subs	r4, #1
 800f740:	e7f7      	b.n	800f732 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x66>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4618      	mov	r0, r3
 800f746:	3708      	adds	r7, #8
 800f748:	46bd      	mov	sp, r7
 800f74a:	bdb0      	pop	{r4, r5, r7, pc}
 800f74c:	08027e08 	.word	0x08027e08

0800f750 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase()
 800f750:	b5b0      	push	{r4, r5, r7, lr}
 800f752:	b0a0      	sub	sp, #128	; 0x80
 800f754:	af02      	add	r7, sp, #8
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f000 fa6a 	bl	800fc34 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800f760:	4ae1      	ldr	r2, [pc, #900]	; (800fae8 <_ZN15Screen1ViewBaseC1Ev+0x398>)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	3340      	adds	r3, #64	; 0x40
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff fcd0 	bl	800f110 <_ZN8touchgfx3BoxC1Ev>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	336c      	adds	r3, #108	; 0x6c
 800f774:	4618      	mov	r0, r3
 800f776:	f7ff fccb 	bl	800f110 <_ZN8touchgfx3BoxC1Ev>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	3398      	adds	r3, #152	; 0x98
 800f77e:	4618      	mov	r0, r3
 800f780:	f004 fd5c 	bl	801423c <_ZN8touchgfx6CircleC1Ev>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800f78a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f78e:	2100      	movs	r1, #0
 800f790:	4618      	mov	r0, r3
 800f792:	f7ff fbd4 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
 800f796:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f798:	4620      	mov	r0, r4
 800f79a:	f7ff fe7b 	bl	800f494 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	33f4      	adds	r3, #244	; 0xf4
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7ff ff92 	bl	800f6cc <_ZN8touchgfx5ShapeILt4EEC1Ev>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800f7ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7ff fbc2 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
 800f7ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f7ff fe69 	bl	800f494 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7ff ff7f 	bl	800f6cc <_ZN8touchgfx5ShapeILt4EEC1Ev>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f503 7406 	add.w	r4, r3, #536	; 0x218
 800f7d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f7d8:	2100      	movs	r1, #0
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7ff fbaf 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
 800f7e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f7ff fe56 	bl	800f494 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800f7ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f006 fa26 	bl	8015c44 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 240, 320);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f7fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	23f0      	movs	r3, #240	; 0xf0
 800f806:	2200      	movs	r2, #0
 800f808:	2100      	movs	r1, #0
 800f80a:	f7fd fec1 	bl	800d590 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f814:	2300      	movs	r3, #0
 800f816:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800f81a:	2300      	movs	r3, #0
 800f81c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800f820:	2300      	movs	r3, #0
 800f822:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f826:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f82a:	041b      	lsls	r3, r3, #16
 800f82c:	461a      	mov	r2, r3
 800f82e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800f832:	021b      	lsls	r3, r3, #8
 800f834:	431a      	orrs	r2, r3
 800f836:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800f83a:	4313      	orrs	r3, r2
 800f83c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f840:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f844:	4611      	mov	r1, r2
 800f846:	4618      	mov	r0, r3
 800f848:	f7ff fb79 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
 800f84c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f84e:	4619      	mov	r1, r3
 800f850:	4620      	mov	r0, r4
 800f852:	f7ff fc81 	bl	800f158 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 240, 320);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800f85c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f860:	9300      	str	r3, [sp, #0]
 800f862:	23f0      	movs	r3, #240	; 0xf0
 800f864:	2200      	movs	r2, #0
 800f866:	2100      	movs	r1, #0
 800f868:	f7fd fe92 	bl	800d590 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f872:	23ff      	movs	r3, #255	; 0xff
 800f874:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800f878:	23ff      	movs	r3, #255	; 0xff
 800f87a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800f87e:	23ff      	movs	r3, #255	; 0xff
 800f880:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800f884:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800f888:	041b      	lsls	r3, r3, #16
 800f88a:	461a      	mov	r2, r3
 800f88c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f890:	021b      	lsls	r3, r3, #8
 800f892:	431a      	orrs	r2, r3
 800f894:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f898:	4313      	orrs	r3, r2
 800f89a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f89e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7ff fb4a 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
 800f8aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f7ff fc52 	bl	800f158 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    circle1.setPosition(80, 120, 80, 80);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800f8ba:	2350      	movs	r3, #80	; 0x50
 800f8bc:	9300      	str	r3, [sp, #0]
 800f8be:	2350      	movs	r3, #80	; 0x50
 800f8c0:	2278      	movs	r2, #120	; 0x78
 800f8c2:	2150      	movs	r1, #80	; 0x50
 800f8c4:	f7fd fe64 	bl	800d590 <_ZN8touchgfx8Drawable11setPositionEssss>
    circle1.setCenter(40, 40);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3398      	adds	r3, #152	; 0x98
 800f8cc:	2228      	movs	r2, #40	; 0x28
 800f8ce:	2128      	movs	r1, #40	; 0x28
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f000 f962 	bl	800fb9a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circle1.setRadius(40);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	3398      	adds	r3, #152	; 0x98
 800f8da:	2128      	movs	r1, #40	; 0x28
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f000 f9bf 	bl	800fc60 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circle1.setLineWidth(0);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	3398      	adds	r3, #152	; 0x98
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f000 f9d0 	bl	800fc8e <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circle1.setArc(0, 360);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	3398      	adds	r3, #152	; 0x98
 800f8f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f000 f974 	bl	800fbe6 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circle1Painter.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800f904:	2300      	movs	r3, #0
 800f906:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 800f90a:	23ff      	movs	r3, #255	; 0xff
 800f90c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800f910:	2300      	movs	r3, #0
 800f912:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800f916:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800f91a:	041b      	lsls	r3, r3, #16
 800f91c:	461a      	mov	r2, r3
 800f91e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800f922:	021b      	lsls	r3, r3, #8
 800f924:	431a      	orrs	r2, r3
 800f926:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f92a:	4313      	orrs	r3, r2
 800f92c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f930:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f934:	4611      	mov	r1, r2
 800f936:	4618      	mov	r0, r3
 800f938:	f7ff fb01 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
 800f93c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f93e:	4619      	mov	r1, r3
 800f940:	4620      	mov	r0, r4
 800f942:	f7ff fdc5 	bl	800f4d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    circle1.setPainter(circle1Painter);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	33e0      	adds	r3, #224	; 0xe0
 800f950:	4619      	mov	r1, r3
 800f952:	4610      	mov	r0, r2
 800f954:	f7ff fca0 	bl	800f298 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    circle1.setAlpha(162);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	3398      	adds	r3, #152	; 0x98
 800f95c:	21a2      	movs	r1, #162	; 0xa2
 800f95e:	4618      	mov	r0, r3
 800f960:	f7ff fca8 	bl	800f2b4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>

    shape1.setPosition(80, 40, 80, 80);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 800f96a:	2350      	movs	r3, #80	; 0x50
 800f96c:	9300      	str	r3, [sp, #0]
 800f96e:	2350      	movs	r3, #80	; 0x50
 800f970:	2228      	movs	r2, #40	; 0x28
 800f972:	2150      	movs	r1, #80	; 0x50
 800f974:	f7fd fe0c 	bl	800d590 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setAlpha(95);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	33f4      	adds	r3, #244	; 0xf4
 800f97c:	215f      	movs	r1, #95	; 0x5f
 800f97e:	4618      	mov	r0, r3
 800f980:	f7ff fc98 	bl	800f2b4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    shape1.setOrigin(0.0f, 0.0f);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	33f4      	adds	r3, #244	; 0xf4
 800f988:	eddf 0a58 	vldr	s1, [pc, #352]	; 800faec <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800f98c:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800faec <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800f990:	4618      	mov	r0, r3
 800f992:	f000 f993 	bl	800fcbc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(1.0f, 1.0f);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	33f4      	adds	r3, #244	; 0xf4
 800f99a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800f99e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f000 f9ea 	bl	800fd7c <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.0f);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	33f4      	adds	r3, #244	; 0xf4
 800f9ac:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800faec <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f000 fa27 	bl	800fe04 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800f9bc:	23ff      	movs	r3, #255	; 0xff
 800f9be:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800f9ce:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f9d2:	041b      	lsls	r3, r3, #16
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f9da:	021b      	lsls	r3, r3, #8
 800f9dc:	431a      	orrs	r2, r3
 800f9de:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f9e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f9ec:	4611      	mov	r1, r2
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7ff faa5 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
 800f9f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	f7ff fd69 	bl	800f4d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape1.setPainter(shape1Painter);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	f7ff fc43 	bl	800f298 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 800fa12:	4b37      	ldr	r3, [pc, #220]	; (800faf0 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 800fa14:	f107 0408 	add.w	r4, r7, #8
 800fa18:	461d      	mov	r5, r3
 800fa1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fa22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape1.setShape(shape1Points);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	33f4      	adds	r3, #244	; 0xf4
 800fa2a:	f107 0208 	add.w	r2, r7, #8
 800fa2e:	4611      	mov	r1, r2
 800fa30:	4618      	mov	r0, r3
 800fa32:	f000 fa1f 	bl	800fe74 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    shape2.setPosition(80, 200, 80, 80);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 800fa3c:	2350      	movs	r3, #80	; 0x50
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	2350      	movs	r3, #80	; 0x50
 800fa42:	22c8      	movs	r2, #200	; 0xc8
 800fa44:	2150      	movs	r1, #80	; 0x50
 800fa46:	f7fd fda3 	bl	800d590 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape2.setOrigin(0.0f, 0.0f);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fa50:	eddf 0a26 	vldr	s1, [pc, #152]	; 800faec <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800fa54:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800faec <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f000 f92f 	bl	800fcbc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape2.setScale(1.0f, 1.0f);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fa64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800fa68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f000 f985 	bl	800fd7c <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape2.setAngle(0.0f);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fa78:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800faec <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f000 f9c1 	bl	800fe04 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape2Painter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 255));
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f503 7406 	add.w	r4, r3, #536	; 0x218
 800fa88:	2300      	movs	r3, #0
 800fa8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800fa8e:	2300      	movs	r3, #0
 800fa90:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800fa94:	23ff      	movs	r3, #255	; 0xff
 800fa96:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800fa9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fa9e:	041b      	lsls	r3, r3, #16
 800faa0:	461a      	mov	r2, r3
 800faa2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800faa6:	021b      	lsls	r3, r3, #8
 800faa8:	431a      	orrs	r2, r3
 800faaa:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800faae:	4313      	orrs	r3, r2
 800fab0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fab4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fab8:	4611      	mov	r1, r2
 800faba:	4618      	mov	r0, r3
 800fabc:	f7ff fa3f 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
 800fac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fac2:	4619      	mov	r1, r3
 800fac4:	4620      	mov	r0, r4
 800fac6:	f7ff fd03 	bl	800f4d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape2.setPainter(shape2Painter);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fad6:	4619      	mov	r1, r3
 800fad8:	4610      	mov	r0, r2
 800fada:	f7ff fbdd 	bl	800f298 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape2Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 800fade:	4b04      	ldr	r3, [pc, #16]	; (800faf0 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 800fae0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800fae4:	e006      	b.n	800faf4 <_ZN15Screen1ViewBaseC1Ev+0x3a4>
 800fae6:	bf00      	nop
 800fae8:	08027dd4 	.word	0x08027dd4
 800faec:	00000000 	.word	0x00000000
 800faf0:	08027148 	.word	0x08027148
 800faf4:	461d      	mov	r5, r3
 800faf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fafa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fafe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape2.setShape(shape2Points);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fb08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fb0c:	4611      	mov	r1, r2
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f000 f9b0 	bl	800fe74 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(__background);
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	3340      	adds	r3, #64	; 0x40
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	4610      	mov	r0, r2
 800fb1e:	f7ff fad5 	bl	800f0cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	336c      	adds	r3, #108	; 0x6c
 800fb28:	4619      	mov	r1, r3
 800fb2a:	4610      	mov	r0, r2
 800fb2c:	f7ff face 	bl	800f0cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circle1);
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	3398      	adds	r3, #152	; 0x98
 800fb36:	4619      	mov	r1, r3
 800fb38:	4610      	mov	r0, r2
 800fb3a:	f7ff fac7 	bl	800f0cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape1);
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	33f4      	adds	r3, #244	; 0xf4
 800fb44:	4619      	mov	r1, r3
 800fb46:	4610      	mov	r0, r2
 800fb48:	f7ff fac0 	bl	800f0cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape2);
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fb54:	4619      	mov	r1, r3
 800fb56:	4610      	mov	r0, r2
 800fb58:	f7ff fab8 	bl	800f0cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3778      	adds	r7, #120	; 0x78
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bdb0      	pop	{r4, r5, r7, pc}
 800fb66:	bf00      	nop

0800fb68 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]

}
 800fb70:	bf00      	nop
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <_ZN15Screen1ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen1ViewBase::afterTransition()
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
    //Screen1to2
    //When screen transition ends change screen to Screen2
    //Go to Screen2 with block transition
    application().gotoScreen2ScreenBlockTransition();
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7ff fd52 	bl	800f62e <_ZN15Screen1ViewBase11applicationEv>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fe fa07 	bl	800dfa0 <_ZN23FrontendApplicationBase32gotoScreen2ScreenBlockTransitionEv>
}
 800fb92:	bf00      	nop
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}

0800fb9a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 800fb9a:	b580      	push	{r7, lr}
 800fb9c:	b088      	sub	sp, #32
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	60f8      	str	r0, [r7, #12]
 800fba2:	60b9      	str	r1, [r7, #8]
 800fba4:	607a      	str	r2, [r7, #4]
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	015a      	lsls	r2, r3, #5
 800fbae:	f107 0314 	add.w	r3, r7, #20
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7ff fb45 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5(x);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	62da      	str	r2, [r3, #44]	; 0x2c
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	61fb      	str	r3, [r7, #28]
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	015a      	lsls	r2, r3, #5
 800fbca:	f107 0310 	add.w	r3, r7, #16
 800fbce:	4611      	mov	r1, r2
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff fb37 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5(y);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800fbde:	bf00      	nop
 800fbe0:	3720      	adds	r7, #32
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     *
     * @note    The area containing the Circle is not invalidated.
     * @note    Angles are given in degrees, so a full circle is 360.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b088      	sub	sp, #32
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	60f8      	str	r0, [r7, #12]
 800fbee:	60b9      	str	r1, [r7, #8]
 800fbf0:	607a      	str	r2, [r7, #4]
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	61bb      	str	r3, [r7, #24]
 800fbf6:	69bb      	ldr	r3, [r7, #24]
 800fbf8:	015a      	lsls	r2, r3, #5
 800fbfa:	f107 0314 	add.w	r3, r7, #20
 800fbfe:	4611      	mov	r1, r2
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7ff fb1f 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	639a      	str	r2, [r3, #56]	; 0x38
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	61fb      	str	r3, [r7, #28]
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	015a      	lsls	r2, r3, #5
 800fc16:	f107 0310 	add.w	r3, r7, #16
 800fc1a:	4611      	mov	r1, r2
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7ff fb11 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fc2a:	bf00      	nop
 800fc2c:	3720      	adds	r7, #32
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
	...

0800fc34 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f008 fb8c 	bl	801835c <_ZN8touchgfx6ScreenC1Ev>
 800fc44:	4a05      	ldr	r2, [pc, #20]	; (800fc5c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	4618      	mov	r0, r3
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	08027e9c 	.word	0x08027e9c

0800fc60 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	60fb      	str	r3, [r7, #12]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	015a      	lsls	r2, r3, #5
 800fc72:	f107 0308 	add.w	r3, r7, #8
 800fc76:	4611      	mov	r1, r2
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff fae3 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5(r);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800fc86:	bf00      	nop
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b084      	sub	sp, #16
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
 800fc96:	6039      	str	r1, [r7, #0]
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	60fb      	str	r3, [r7, #12]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	015a      	lsls	r2, r3, #5
 800fca0:	f107 0308 	add.w	r3, r7, #8
 800fca4:	4611      	mov	r1, r2
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7ff facc 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800fcb4:	bf00      	nop
 800fcb6:	3710      	adds	r7, #16
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @see moveOrigin
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setOrigin(T x, T y)
 800fcbc:	b590      	push	{r4, r7, lr}
 800fcbe:	b08b      	sub	sp, #44	; 0x2c
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	60f8      	str	r0, [r7, #12]
 800fcc4:	ed87 0a02 	vstr	s0, [r7, #8]
 800fcc8:	edc7 0a01 	vstr	s1, [r7, #4]
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	623b      	str	r3, [r7, #32]
 800fcd0:	edd7 7a08 	vldr	s15, [r7, #32]
 800fcd4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800fd78 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 800fcd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fcdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fce0:	f107 031c 	add.w	r3, r7, #28
 800fce4:	ee17 1a90 	vmov	r1, s15
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7ff faab 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fcee:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 800fcf0:	617b      	str	r3, [r7, #20]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	627b      	str	r3, [r7, #36]	; 0x24
 800fcf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800fcfa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800fd78 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 800fcfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd06:	f107 0318 	add.w	r3, r7, #24
 800fd0a:	ee17 1a90 	vmov	r1, s15
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7ff fa98 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fd14:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 800fd16:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	332c      	adds	r3, #44	; 0x2c
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff faa0 	bl	800f262 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fd22:	4604      	mov	r4, r0
 800fd24:	f107 0314 	add.w	r3, r7, #20
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff fa9a 	bl	800f262 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	429c      	cmp	r4, r3
 800fd32:	d10f      	bne.n	800fd54 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	3330      	adds	r3, #48	; 0x30
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7ff fa92 	bl	800f262 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fd3e:	4604      	mov	r4, r0
 800fd40:	f107 0310 	add.w	r3, r7, #16
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7ff fa8c 	bl	800f262 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	429c      	cmp	r4, r3
 800fd4e:	d101      	bne.n	800fd54 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 800fd50:	2301      	movs	r3, #1
 800fd52:	e000      	b.n	800fd56 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 800fd54:	2300      	movs	r3, #0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d109      	bne.n	800fd6e <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	697a      	ldr	r2, [r7, #20]
 800fd5e:	62da      	str	r2, [r3, #44]	; 0x2c
        dy = dyNew;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	693a      	ldr	r2, [r7, #16]
 800fd64:	631a      	str	r2, [r3, #48]	; 0x30

        updateAbstractShapeCache();
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f004 f960 	bl	801402c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 800fd6c:	e000      	b.n	800fd70 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 800fd6e:	bf00      	nop
    }
 800fd70:	372c      	adds	r7, #44	; 0x2c
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd90      	pop	{r4, r7, pc}
 800fd76:	bf00      	nop
 800fd78:	42000000 	.word	0x42000000

0800fd7c <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @see getScale, updateScale
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b088      	sub	sp, #32
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	ed87 0a02 	vstr	s0, [r7, #8]
 800fd88:	edc7 0a01 	vstr	s1, [r7, #4]
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10((int)(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 800fd90:	edd7 7a06 	vldr	s15, [r7, #24]
 800fd94:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800fe00 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800fd98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd9c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800fe00 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800fda0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fda4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fda8:	f107 0314 	add.w	r3, r7, #20
 800fdac:	ee17 1a90 	vmov	r1, s15
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff fa62 	bl	800f27a <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	639a      	str	r2, [r3, #56]	; 0x38
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	61fb      	str	r3, [r7, #28]
 800fdc2:	edd7 7a07 	vldr	s15, [r7, #28]
 800fdc6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800fe00 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800fdca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdce:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fe00 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800fdd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdda:	f107 0310 	add.w	r3, r7, #16
 800fdde:	ee17 1a90 	vmov	r1, s15
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7ff fa49 	bl	800f27a <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	63da      	str	r2, [r3, #60]	; 0x3c
        updateAbstractShapeCache();
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	f004 f91b 	bl	801402c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 800fdf6:	bf00      	nop
 800fdf8:	3720      	adds	r7, #32
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	42000000 	.word	0x42000000

0800fe04 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 800fe04:	b590      	push	{r4, r7, lr}
 800fe06:	b087      	sub	sp, #28
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	ed87 0a00 	vstr	s0, [r7]
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	617b      	str	r3, [r7, #20]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800fe14:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe18:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800fe70 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 800fe1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe24:	f107 0310 	add.w	r3, r7, #16
 800fe28:	ee17 1a90 	vmov	r1, s15
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff fa09 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fe32:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 800fe34:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	3334      	adds	r3, #52	; 0x34
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7ff fa11 	bl	800f262 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fe40:	4604      	mov	r4, r0
 800fe42:	f107 030c 	add.w	r3, r7, #12
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7ff fa0b 	bl	800f262 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	429c      	cmp	r4, r3
 800fe50:	bf14      	ite	ne
 800fe52:	2301      	movne	r3, #1
 800fe54:	2300      	moveq	r3, #0
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d005      	beq.n	800fe68 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	635a      	str	r2, [r3, #52]	; 0x34
            updateAbstractShapeCache();
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f004 f8e2 	bl	801402c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 800fe68:	bf00      	nop
 800fe6a:	371c      	adds	r7, #28
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd90      	pop	{r4, r7, pc}
 800fe70:	42000000 	.word	0x42000000

0800fe74 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 800fe74:	b5b0      	push	{r4, r5, r7, lr}
 800fe76:	b088      	sub	sp, #32
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	3370      	adds	r3, #112	; 0x70
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	4798      	blx	r3
 800fe8a:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	61fb      	str	r3, [r7, #28]
 800fe90:	69fa      	ldr	r2, [r7, #28]
 800fe92:	69bb      	ldr	r3, [r7, #24]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	da38      	bge.n	800ff0a <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	3374      	adds	r3, #116	; 0x74
 800fe9e:	681c      	ldr	r4, [r3, #0]
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	00db      	lsls	r3, r3, #3
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	4413      	add	r3, r2
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	613b      	str	r3, [r7, #16]
 800feac:	edd7 7a04 	vldr	s15, [r7, #16]
 800feb0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800ff18 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 800feb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800feb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800febc:	f107 030c 	add.w	r3, r7, #12
 800fec0:	ee17 1a90 	vmov	r1, s15
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff f9bd 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	461d      	mov	r5, r3
 800fece:	69fb      	ldr	r3, [r7, #28]
 800fed0:	00db      	lsls	r3, r3, #3
 800fed2:	683a      	ldr	r2, [r7, #0]
 800fed4:	4413      	add	r3, r2
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	617b      	str	r3, [r7, #20]
 800feda:	edd7 7a05 	vldr	s15, [r7, #20]
 800fede:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800ff18 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 800fee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800feea:	f107 0308 	add.w	r3, r7, #8
 800feee:	ee17 1a90 	vmov	r1, s15
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7ff f9a6 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	462a      	mov	r2, r5
 800fefc:	69f9      	ldr	r1, [r7, #28]
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 800ff02:	69fb      	ldr	r3, [r7, #28]
 800ff04:	3301      	adds	r3, #1
 800ff06:	61fb      	str	r3, [r7, #28]
 800ff08:	e7c2      	b.n	800fe90 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f004 f88e 	bl	801402c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 800ff10:	bf00      	nop
 800ff12:	3720      	adds	r7, #32
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bdb0      	pop	{r4, r5, r7, pc}
 800ff18:	42000000 	.word	0x42000000

0800ff1c <_ZN8touchgfx5ShapeILt4EED1Ev>:
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	4a05      	ldr	r2, [pc, #20]	; (800ff3c <_ZN8touchgfx5ShapeILt4EED1Ev+0x20>)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7ff fbab 	bl	800f688 <_ZN8touchgfx13AbstractShapeD1Ev>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	08027e08 	.word	0x08027e08

0800ff40 <_ZN8touchgfx5ShapeILt4EED0Ev>:
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7ff ffe7 	bl	800ff1c <_ZN8touchgfx5ShapeILt4EED1Ev>
 800ff4e:	2188      	movs	r1, #136	; 0x88
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f015 fc53 	bl	80257fc <_ZdlPvj>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	4a05      	ldr	r2, [pc, #20]	; (800ff80 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fd facf 	bl	800d514 <_ZN8touchgfx8DrawableD1Ev>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	08028480 	.word	0x08028480

0800ff84 <_ZN8touchgfx9ContainerD0Ev>:
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f7ff ffe7 	bl	800ff60 <_ZN8touchgfx9ContainerD1Ev>
 800ff92:	212c      	movs	r1, #44	; 0x2c
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f015 fc31 	bl	80257fc <_ZdlPvj>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	4a05      	ldr	r2, [pc, #20]	; (800ffc4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	601a      	str	r2, [r3, #0]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fd feeb 	bl	800dd90 <_ZN8touchgfx6WidgetD1Ev>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	0802895c 	.word	0x0802895c

0800ffc8 <_ZN8touchgfx3BoxD0Ev>:
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f7ff ffe7 	bl	800ffa4 <_ZN8touchgfx3BoxD1Ev>
 800ffd6:	212c      	movs	r1, #44	; 0x2c
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f015 fc0f 	bl	80257fc <_ZdlPvj>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	4a05      	ldr	r2, [pc, #20]	; (8010008 <_ZN8touchgfx6CircleD1Ev+0x20>)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7ff fb23 	bl	800f644 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	080287fc 	.word	0x080287fc

0801000c <_ZN8touchgfx6CircleD0Ev>:
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f7ff ffe7 	bl	800ffe8 <_ZN8touchgfx6CircleD1Ev>
 801001a:	2148      	movs	r1, #72	; 0x48
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f015 fbed 	bl	80257fc <_ZdlPvj>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4618      	mov	r0, r3
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	4a09      	ldr	r2, [pc, #36]	; (801005c <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	601a      	str	r2, [r3, #0]
 801003a:	4a09      	ldr	r2, [pc, #36]	; (8010060 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	609a      	str	r2, [r3, #8]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	3308      	adds	r3, #8
 8010044:	4618      	mov	r0, r3
 8010046:	f7ff f977 	bl	800f338 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	f7ff f9ff 	bl	800f450 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4618      	mov	r0, r3
 8010056:	3708      	adds	r7, #8
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	08028668 	.word	0x08028668
 8010060:	0802868c 	.word	0x0802868c

08010064 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8010064:	f1a0 0008 	sub.w	r0, r0, #8
 8010068:	e7e0      	b.n	801002c <_ZN8touchgfx13PainterRGB565D1Ev>
 801006a:	bf00      	nop

0801006c <_ZN8touchgfx13PainterRGB565D0Ev>:
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7ff ffd9 	bl	801002c <_ZN8touchgfx13PainterRGB565D1Ev>
 801007a:	2114      	movs	r1, #20
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f015 fbbd 	bl	80257fc <_ZdlPvj>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4618      	mov	r0, r3
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 801008c:	f1a0 0008 	sub.w	r0, r0, #8
 8010090:	e7ec      	b.n	801006c <_ZN8touchgfx13PainterRGB565D0Ev>

08010092 <_ZNK8touchgfx5ShapeILt4EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
 8010092:	b480      	push	{r7}
 8010094:	b083      	sub	sp, #12
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 801009a:	2304      	movs	r3, #4
    }
 801009c:	4618      	mov	r0, r3
 801009e:	370c      	adds	r7, #12
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr

080100a8 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 80100a8:	b480      	push	{r7}
 80100aa:	b085      	sub	sp, #20
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	607a      	str	r2, [r7, #4]
 80100b4:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	db0e      	blt.n	80100da <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	2b03      	cmp	r3, #3
 80100c0:	dc0b      	bgt.n	80100da <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCorner[i] = x, yCorner[i] = y;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	68ba      	ldr	r2, [r7, #8]
 80100c6:	3212      	adds	r2, #18
 80100c8:	6879      	ldr	r1, [r7, #4]
 80100ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	68ba      	ldr	r2, [r7, #8]
 80100d2:	3216      	adds	r2, #22
 80100d4:	6839      	ldr	r1, [r7, #0]
 80100d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 80100da:	bf00      	nop
 80100dc:	3714      	adds	r7, #20
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr

080100e6 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b084      	sub	sp, #16
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	db08      	blt.n	8010108 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	2b03      	cmp	r3, #3
 80100fa:	dc05      	bgt.n	8010108 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
        {
            return xCorner[i];
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	683a      	ldr	r2, [r7, #0]
 8010100:	3212      	adds	r2, #18
 8010102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010106:	e00b      	b.n	8010120 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x3a>
 8010108:	2300      	movs	r3, #0
 801010a:	60fb      	str	r3, [r7, #12]
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	015a      	lsls	r2, r3, #5
 8010110:	f107 0308 	add.w	r3, r7, #8
 8010114:	4611      	mov	r1, r2
 8010116:	4618      	mov	r0, r3
 8010118:	f7ff f894 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801011c:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 801011e:	bf00      	nop
    }
 8010120:	4618      	mov	r0, r3
 8010122:	3710      	adds	r7, #16
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	db08      	blt.n	801014a <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2b03      	cmp	r3, #3
 801013c:	dc05      	bgt.n	801014a <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
        {
            return yCorner[i];
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	683a      	ldr	r2, [r7, #0]
 8010142:	3216      	adds	r2, #22
 8010144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010148:	e00b      	b.n	8010162 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x3a>
 801014a:	2300      	movs	r3, #0
 801014c:	60fb      	str	r3, [r7, #12]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	015a      	lsls	r2, r3, #5
 8010152:	f107 0308 	add.w	r3, r7, #8
 8010156:	4611      	mov	r1, r2
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff f873 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801015e:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010160:	bf00      	nop
    }
 8010162:	4618      	mov	r0, r3
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 801016a:	b480      	push	{r7}
 801016c:	b085      	sub	sp, #20
 801016e:	af00      	add	r7, sp, #0
 8010170:	60f8      	str	r0, [r7, #12]
 8010172:	60b9      	str	r1, [r7, #8]
 8010174:	607a      	str	r2, [r7, #4]
 8010176:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	2b00      	cmp	r3, #0
 801017c:	db0e      	blt.n	801019c <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	2b03      	cmp	r3, #3
 8010182:	dc0b      	bgt.n	801019c <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCache[i] = x, yCache[i] = y;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	68ba      	ldr	r2, [r7, #8]
 8010188:	321a      	adds	r2, #26
 801018a:	6879      	ldr	r1, [r7, #4]
 801018c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	68ba      	ldr	r2, [r7, #8]
 8010194:	321e      	adds	r2, #30
 8010196:	6839      	ldr	r1, [r7, #0]
 8010198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 801019c:	bf00      	nop
 801019e:	3714      	adds	r7, #20
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	db08      	blt.n	80101ca <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	2b03      	cmp	r3, #3
 80101bc:	dc05      	bgt.n	80101ca <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
        {
            return xCache[i];
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	683a      	ldr	r2, [r7, #0]
 80101c2:	321a      	adds	r2, #26
 80101c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c8:	e00b      	b.n	80101e2 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x3a>
 80101ca:	2300      	movs	r3, #0
 80101cc:	60fb      	str	r3, [r7, #12]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	015a      	lsls	r2, r3, #5
 80101d2:	f107 0308 	add.w	r3, r7, #8
 80101d6:	4611      	mov	r1, r2
 80101d8:	4618      	mov	r0, r3
 80101da:	f7ff f833 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80101de:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80101e0:	bf00      	nop
    }
 80101e2:	4618      	mov	r0, r3
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b084      	sub	sp, #16
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
 80101f2:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	db08      	blt.n	801020c <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	2b03      	cmp	r3, #3
 80101fe:	dc05      	bgt.n	801020c <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
        {
            return yCache[i];
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	321e      	adds	r2, #30
 8010206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801020a:	e00b      	b.n	8010224 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x3a>
 801020c:	2300      	movs	r3, #0
 801020e:	60fb      	str	r3, [r7, #12]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	015a      	lsls	r2, r3, #5
 8010214:	f107 0308 	add.w	r3, r7, #8
 8010218:	4611      	mov	r1, r2
 801021a:	4618      	mov	r0, r3
 801021c:	f7ff f812 	bl	800f244 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010220:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010222:	bf00      	nop
    }
 8010224:	4618      	mov	r0, r3
 8010226:	3710      	adds	r7, #16
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	460b      	mov	r3, r1
 8010236:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	887a      	ldrh	r2, [r7, #2]
 801023c:	801a      	strh	r2, [r3, #0]
    {
    }
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4618      	mov	r0, r3
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4618      	mov	r0, r3
 801025a:	2326      	movs	r3, #38	; 0x26
 801025c:	461a      	mov	r2, r3
 801025e:	2100      	movs	r1, #0
 8010260:	f015 fb83 	bl	802596a <memset>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	4618      	mov	r0, r3
 8010268:	f7fe ff40 	bl	800f0ec <_ZN8touchgfx6WidgetC1Ev>
 801026c:	4a09      	ldr	r2, [pc, #36]	; (8010294 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	601a      	str	r2, [r3, #0]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	683a      	ldr	r2, [r7, #0]
 8010276:	8812      	ldrh	r2, [r2, #0]
 8010278:	84da      	strh	r2, [r3, #38]	; 0x26
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	22ff      	movs	r2, #255	; 0xff
 801027e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8010282:	6839      	ldr	r1, [r7, #0]
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f004 fddb 	bl	8014e40 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4618      	mov	r0, r3
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	080289c4 	.word	0x080289c4

08010298 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	4a05      	ldr	r2, [pc, #20]	; (80102b8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	601a      	str	r2, [r3, #0]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fe feb7 	bl	800f01c <_ZN8touchgfx6ScreenD1Ev>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4618      	mov	r0, r3
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	08027f58 	.word	0x08027f58

080102bc <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 80102bc:	b580      	push	{r7, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f7ff ffe7 	bl	8010298 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 80102ca:	2140      	movs	r1, #64	; 0x40
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f015 fa95 	bl	80257fc <_ZdlPvj>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	4618      	mov	r0, r3
 80102d6:	3708      	adds	r7, #8
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	4a0a      	ldr	r2, [pc, #40]	; (8010310 <_ZN15Screen2ViewBaseD1Ev+0x34>)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	601a      	str	r2, [r3, #0]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	336c      	adds	r3, #108	; 0x6c
 80102ee:	4618      	mov	r0, r3
 80102f0:	f000 f8d0 	bl	8010494 <_ZN8touchgfx5ImageD1Ev>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	3340      	adds	r3, #64	; 0x40
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7ff fe53 	bl	800ffa4 <_ZN8touchgfx3BoxD1Ev>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff ffc9 	bl	8010298 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4618      	mov	r0, r3
 801030a:	3708      	adds	r7, #8
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}
 8010310:	08027f24 	.word	0x08027f24

08010314 <_ZN15Screen2ViewBaseD0Ev>:
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7ff ffdd 	bl	80102dc <_ZN15Screen2ViewBaseD1Ev>
 8010322:	2198      	movs	r1, #152	; 0x98
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f015 fa69 	bl	80257fc <_ZdlPvj>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801033c:	f006 fd2e 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 8010340:	4603      	mov	r3, r0
    }
 8010342:	4618      	mov	r0, r3
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
	...

0801034c <_ZN15Screen2ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen2ViewBase::Screen2ViewBase()
 801034c:	b590      	push	{r4, r7, lr}
 801034e:	b089      	sub	sp, #36	; 0x24
 8010350:	af02      	add	r7, sp, #8
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4618      	mov	r0, r3
 8010358:	f000 f886 	bl	8010468 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 801035c:	4a34      	ldr	r2, [pc, #208]	; (8010430 <_ZN15Screen2ViewBaseC1Ev+0xe4>)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	601a      	str	r2, [r3, #0]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	3340      	adds	r3, #64	; 0x40
 8010366:	4618      	mov	r0, r3
 8010368:	f7fe fed2 	bl	800f110 <_ZN8touchgfx3BoxC1Ev>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8010372:	f107 0308 	add.w	r3, r7, #8
 8010376:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801037a:	4618      	mov	r0, r3
 801037c:	f7ff ff56 	bl	801022c <_ZN8touchgfx6BitmapC1Et>
 8010380:	f107 0308 	add.w	r3, r7, #8
 8010384:	4619      	mov	r1, r3
 8010386:	4620      	mov	r0, r4
 8010388:	f7ff ff60 	bl	801024c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{

    __background.setPosition(0, 0, 240, 320);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010392:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	23f0      	movs	r3, #240	; 0xf0
 801039a:	2200      	movs	r2, #0
 801039c:	2100      	movs	r1, #0
 801039e:	f7fd f8f7 	bl	800d590 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80103a8:	2300      	movs	r3, #0
 80103aa:	75fb      	strb	r3, [r7, #23]
 80103ac:	2300      	movs	r3, #0
 80103ae:	75bb      	strb	r3, [r7, #22]
 80103b0:	2300      	movs	r3, #0
 80103b2:	757b      	strb	r3, [r7, #21]
 80103b4:	7dfb      	ldrb	r3, [r7, #23]
 80103b6:	041b      	lsls	r3, r3, #16
 80103b8:	461a      	mov	r2, r3
 80103ba:	7dbb      	ldrb	r3, [r7, #22]
 80103bc:	021b      	lsls	r3, r3, #8
 80103be:	431a      	orrs	r2, r3
 80103c0:	7d7b      	ldrb	r3, [r7, #21]
 80103c2:	4313      	orrs	r3, r2
 80103c4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80103c8:	f107 0310 	add.w	r3, r7, #16
 80103cc:	4611      	mov	r1, r2
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7fe fdb5 	bl	800ef3e <_ZN8touchgfx9colortypeC1Em>
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	4619      	mov	r1, r3
 80103d8:	4620      	mov	r0, r4
 80103da:	f7fe febd 	bl	800f158 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	336c      	adds	r3, #108	; 0x6c
 80103e2:	2200      	movs	r2, #0
 80103e4:	2100      	movs	r1, #0
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7fd f91e 	bl	800d628 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_KUHMUH_VERTICAL_ID));
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80103f2:	f107 030c 	add.w	r3, r7, #12
 80103f6:	2100      	movs	r1, #0
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff ff17 	bl	801022c <_ZN8touchgfx6BitmapC1Et>
 80103fe:	f107 030c 	add.w	r3, r7, #12
 8010402:	4619      	mov	r1, r3
 8010404:	4620      	mov	r0, r4
 8010406:	f004 fd1b 	bl	8014e40 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 801040a:	687a      	ldr	r2, [r7, #4]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	3340      	adds	r3, #64	; 0x40
 8010410:	4619      	mov	r1, r3
 8010412:	4610      	mov	r0, r2
 8010414:	f7fe fe5a 	bl	800f0cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	336c      	adds	r3, #108	; 0x6c
 801041e:	4619      	mov	r1, r3
 8010420:	4610      	mov	r0, r2
 8010422:	f7fe fe53 	bl	800f0cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4618      	mov	r0, r3
 801042a:	371c      	adds	r7, #28
 801042c:	46bd      	mov	sp, r7
 801042e:	bd90      	pop	{r4, r7, pc}
 8010430:	08027f24 	.word	0x08027f24

08010434 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8010434:	b480      	push	{r7}
 8010436:	b083      	sub	sp, #12
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]

}
 801043c:	bf00      	nop
 801043e:	370c      	adds	r7, #12
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr

08010448 <_ZN15Screen2ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen2ViewBase::afterTransition()
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
    //Screen2to1
    //When screen transition ends change screen to Screen1
    //Go to Screen1 with screen transition towards South
    application().gotoScreen1ScreenSlideTransitionSouth();
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff ff6f 	bl	8010334 <_ZN15Screen2ViewBase11applicationEv>
 8010456:	4603      	mov	r3, r0
 8010458:	4618      	mov	r0, r3
 801045a:	f7fd fd5b 	bl	800df14 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>
}
 801045e:	bf00      	nop
 8010460:	3708      	adds	r7, #8
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
	...

08010468 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	4618      	mov	r0, r3
 8010474:	f007 ff72 	bl	801835c <_ZN8touchgfx6ScreenC1Ev>
 8010478:	4a05      	ldr	r2, [pc, #20]	; (8010490 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	601a      	str	r2, [r3, #0]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2200      	movs	r2, #0
 8010482:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	4618      	mov	r0, r3
 8010488:	3708      	adds	r7, #8
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	08027f58 	.word	0x08027f58

08010494 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	4a05      	ldr	r2, [pc, #20]	; (80104b4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fd fc73 	bl	800dd90 <_ZN8touchgfx6WidgetD1Ev>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4618      	mov	r0, r3
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	080289c4 	.word	0x080289c4

080104b8 <_ZN8touchgfx5ImageD0Ev>:
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7ff ffe7 	bl	8010494 <_ZN8touchgfx5ImageD1Ev>
 80104c6:	212c      	movs	r1, #44	; 0x2c
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f015 f997 	bl	80257fc <_ZdlPvj>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4618      	mov	r0, r3
 80104d2:	3708      	adds	r7, #8
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80104d8:	b480      	push	{r7}
 80104da:	af00      	add	r7, sp, #0
    return bitmap_database;
 80104dc:	4b02      	ldr	r3, [pc, #8]	; (80104e8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80104de:	4618      	mov	r0, r3
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr
 80104e8:	08027f84 	.word	0x08027f84

080104ec <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80104ec:	b480      	push	{r7}
 80104ee:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80104f0:	2301      	movs	r3, #1
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80104fc:	b480      	push	{r7}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	460b      	mov	r3, r1
 8010506:	607a      	str	r2, [r7, #4]
 8010508:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 801050a:	2300      	movs	r3, #0
    }
 801050c:	4618      	mov	r0, r3
 801050e:	3714      	adds	r7, #20
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr

08010518 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010520:	2300      	movs	r3, #0
    }
 8010522:	4618      	mov	r0, r3
 8010524:	370c      	adds	r7, #12
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr

0801052e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801052e:	b480      	push	{r7}
 8010530:	b083      	sub	sp, #12
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010536:	2300      	movs	r3, #0
    }
 8010538:	4618      	mov	r0, r3
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr

08010544 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	4613      	mov	r3, r2
 8010550:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8010552:	4a07      	ldr	r2, [pc, #28]	; (8010570 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010558:	4a06      	ldr	r2, [pc, #24]	; (8010574 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801055e:	4a06      	ldr	r2, [pc, #24]	; (8010578 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010560:	88fb      	ldrh	r3, [r7, #6]
 8010562:	8013      	strh	r3, [r2, #0]
    }
 8010564:	bf00      	nop
 8010566:	3714      	adds	r7, #20
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr
 8010570:	2004f688 	.word	0x2004f688
 8010574:	2004f690 	.word	0x2004f690
 8010578:	2004f68c 	.word	0x2004f68c

0801057c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801057c:	b40e      	push	{r1, r2, r3}
 801057e:	b580      	push	{r7, lr}
 8010580:	b085      	sub	sp, #20
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8010586:	f107 0320 	add.w	r3, r7, #32
 801058a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	69fa      	ldr	r2, [r7, #28]
 8010590:	2100      	movs	r1, #0
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f007 faa0 	bl	8017ad8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010598:	4603      	mov	r3, r0
 801059a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 801059c:	89fb      	ldrh	r3, [r7, #14]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3714      	adds	r7, #20
 80105a2:	46bd      	mov	sp, r7
 80105a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80105a8:	b003      	add	sp, #12
 80105aa:	4770      	bx	lr

080105ac <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80105ac:	b40c      	push	{r2, r3}
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b084      	sub	sp, #16
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
 80105b6:	460b      	mov	r3, r1
 80105b8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80105ba:	f107 031c 	add.w	r3, r7, #28
 80105be:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80105c0:	78f9      	ldrb	r1, [r7, #3]
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	69ba      	ldr	r2, [r7, #24]
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f007 fa86 	bl	8017ad8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80105cc:	4603      	mov	r3, r0
 80105ce:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80105d0:	89fb      	ldrh	r3, [r7, #14]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3710      	adds	r7, #16
 80105d6:	46bd      	mov	sp, r7
 80105d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80105dc:	b002      	add	sp, #8
 80105de:	4770      	bx	lr

080105e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b08a      	sub	sp, #40	; 0x28
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	460b      	mov	r3, r1
 80105ea:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d016      	beq.n	8010622 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	3322      	adds	r3, #34	; 0x22
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80105fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fc:	8adb      	ldrh	r3, [r3, #22]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d105      	bne.n	801060e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010602:	4b43      	ldr	r3, [pc, #268]	; (8010710 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010604:	4a43      	ldr	r2, [pc, #268]	; (8010714 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010606:	21c0      	movs	r1, #192	; 0xc0
 8010608:	4843      	ldr	r0, [pc, #268]	; (8010718 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801060a:	f015 f923 	bl	8025854 <__assert_func>
            return buffer[pos];
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	8a9b      	ldrh	r3, [r3, #20]
 8010612:	461a      	mov	r2, r3
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010616:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d001      	beq.n	8010622 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801061e:	2301      	movs	r3, #1
 8010620:	e000      	b.n	8010624 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010622:	2300      	movs	r3, #0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d06a      	beq.n	80106fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f008 fd3e 	bl	80190aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	3322      	adds	r3, #34	; 0x22
 8010632:	623b      	str	r3, [r7, #32]
 8010634:	2301      	movs	r3, #1
 8010636:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010638:	6a3b      	ldr	r3, [r7, #32]
 801063a:	8adb      	ldrh	r3, [r3, #22]
 801063c:	8bfa      	ldrh	r2, [r7, #30]
 801063e:	429a      	cmp	r2, r3
 8010640:	d305      	bcc.n	801064e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010642:	4b36      	ldr	r3, [pc, #216]	; (801071c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010644:	4a36      	ldr	r2, [pc, #216]	; (8010720 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010646:	21c5      	movs	r1, #197	; 0xc5
 8010648:	4833      	ldr	r0, [pc, #204]	; (8010718 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801064a:	f015 f903 	bl	8025854 <__assert_func>
            const uint16_t index = pos + offset;
 801064e:	6a3b      	ldr	r3, [r7, #32]
 8010650:	8a9a      	ldrh	r2, [r3, #20]
 8010652:	8bfb      	ldrh	r3, [r7, #30]
 8010654:	4413      	add	r3, r2
 8010656:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010658:	8bbb      	ldrh	r3, [r7, #28]
 801065a:	2b09      	cmp	r3, #9
 801065c:	d801      	bhi.n	8010662 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 801065e:	8bbb      	ldrh	r3, [r7, #28]
 8010660:	e001      	b.n	8010666 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010662:	8bbb      	ldrh	r3, [r7, #28]
 8010664:	3b0a      	subs	r3, #10
 8010666:	6a3a      	ldr	r2, [r7, #32]
 8010668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801066c:	f640 123f 	movw	r2, #2367	; 0x93f
 8010670:	4293      	cmp	r3, r2
 8010672:	bf0c      	ite	eq
 8010674:	2301      	moveq	r3, #1
 8010676:	2300      	movne	r3, #0
 8010678:	b2db      	uxtb	r3, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	d03f      	beq.n	80106fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	3322      	adds	r3, #34	; 0x22
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	3222      	adds	r2, #34	; 0x22
 8010686:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010688:	68ba      	ldr	r2, [r7, #8]
 801068a:	8ad2      	ldrh	r2, [r2, #22]
 801068c:	2a00      	cmp	r2, #0
 801068e:	d105      	bne.n	801069c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010690:	4b1f      	ldr	r3, [pc, #124]	; (8010710 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010692:	4a20      	ldr	r2, [pc, #128]	; (8010714 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010694:	21c0      	movs	r1, #192	; 0xc0
 8010696:	4820      	ldr	r0, [pc, #128]	; (8010718 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010698:	f015 f8dc 	bl	8025854 <__assert_func>
            return buffer[pos];
 801069c:	68ba      	ldr	r2, [r7, #8]
 801069e:	8a92      	ldrh	r2, [r2, #20]
 80106a0:	4611      	mov	r1, r2
 80106a2:	68ba      	ldr	r2, [r7, #8]
 80106a4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80106a8:	613b      	str	r3, [r7, #16]
 80106aa:	4613      	mov	r3, r2
 80106ac:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	8adb      	ldrh	r3, [r3, #22]
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	d806      	bhi.n	80106c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80106b6:	4b1b      	ldr	r3, [pc, #108]	; (8010724 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80106b8:	4a1b      	ldr	r2, [pc, #108]	; (8010728 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80106ba:	f240 110d 	movw	r1, #269	; 0x10d
 80106be:	4816      	ldr	r0, [pc, #88]	; (8010718 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80106c0:	f015 f8c8 	bl	8025854 <__assert_func>
            const uint16_t index = pos + 1;
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	8a9b      	ldrh	r3, [r3, #20]
 80106c8:	3301      	adds	r3, #1
 80106ca:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80106cc:	89bb      	ldrh	r3, [r7, #12]
 80106ce:	2b09      	cmp	r3, #9
 80106d0:	d801      	bhi.n	80106d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80106d2:	89bb      	ldrh	r3, [r7, #12]
 80106d4:	e000      	b.n	80106d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80106d6:	2300      	movs	r3, #0
 80106d8:	693a      	ldr	r2, [r7, #16]
 80106da:	89f9      	ldrh	r1, [r7, #14]
 80106dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80106e0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	3322      	adds	r3, #34	; 0x22
 80106e6:	61bb      	str	r3, [r7, #24]
 80106e8:	f640 133f 	movw	r3, #2367	; 0x93f
 80106ec:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80106ee:	69bb      	ldr	r3, [r7, #24]
 80106f0:	8a9b      	ldrh	r3, [r3, #20]
 80106f2:	4619      	mov	r1, r3
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	8afa      	ldrh	r2, [r7, #22]
 80106f8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80106fc:	bf00      	nop
        }
    }
    return getNextChar();
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f008 fbd6 	bl	8018eb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010704:	4603      	mov	r3, r0
}
 8010706:	4618      	mov	r0, r3
 8010708:	3728      	adds	r7, #40	; 0x28
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	08027168 	.word	0x08027168
 8010714:	08027174 	.word	0x08027174
 8010718:	08027220 	.word	0x08027220
 801071c:	08027268 	.word	0x08027268
 8010720:	08027278 	.word	0x08027278
 8010724:	0802734c 	.word	0x0802734c
 8010728:	08027358 	.word	0x08027358

0801072c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f008 fb82 	bl	8018e3e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801073a:	bf00      	nop
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
	...

08010744 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8010744:	b590      	push	{r4, r7, lr}
 8010746:	b085      	sub	sp, #20
 8010748:	af00      	add	r7, sp, #0
 801074a:	4603      	mov	r3, r0
 801074c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801074e:	2300      	movs	r3, #0
 8010750:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010752:	88fb      	ldrh	r3, [r7, #6]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d127      	bne.n	80107a8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010758:	88fb      	ldrh	r3, [r7, #6]
 801075a:	4a1e      	ldr	r2, [pc, #120]	; (80107d4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801075c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d016      	beq.n	8010792 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010764:	88fb      	ldrh	r3, [r7, #6]
 8010766:	4a1b      	ldr	r2, [pc, #108]	; (80107d4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801076c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	68ba      	ldr	r2, [r7, #8]
 8010774:	4413      	add	r3, r2
 8010776:	4a18      	ldr	r2, [pc, #96]	; (80107d8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010778:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	68ba      	ldr	r2, [r7, #8]
 8010780:	4413      	add	r3, r2
 8010782:	4a16      	ldr	r2, [pc, #88]	; (80107dc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010784:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	68ba      	ldr	r2, [r7, #8]
 801078c:	4413      	add	r3, r2
 801078e:	60fb      	str	r3, [r7, #12]
 8010790:	e00a      	b.n	80107a8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010792:	4b11      	ldr	r3, [pc, #68]	; (80107d8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010794:	4a12      	ldr	r2, [pc, #72]	; (80107e0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8010796:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010798:	4a12      	ldr	r2, [pc, #72]	; (80107e4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801079a:	4b10      	ldr	r3, [pc, #64]	; (80107dc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801079c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801079e:	88fb      	ldrh	r3, [r7, #6]
 80107a0:	4a11      	ldr	r2, [pc, #68]	; (80107e8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80107a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107a6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00d      	beq.n	80107ca <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80107ae:	4a0f      	ldr	r2, [pc, #60]	; (80107ec <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80107b0:	88fb      	ldrh	r3, [r7, #6]
 80107b2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80107b4:	f000 f824 	bl	8010800 <_ZN17TypedTextDatabase8getFontsEv>
 80107b8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80107ba:	f000 f819 	bl	80107f0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80107be:	4603      	mov	r3, r0
 80107c0:	461a      	mov	r2, r3
 80107c2:	4621      	mov	r1, r4
 80107c4:	68f8      	ldr	r0, [r7, #12]
 80107c6:	f7ff febd 	bl	8010544 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80107ca:	bf00      	nop
 80107cc:	3714      	adds	r7, #20
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd90      	pop	{r4, r7, pc}
 80107d2:	bf00      	nop
 80107d4:	2004d454 	.word	0x2004d454
 80107d8:	2004d45c 	.word	0x2004d45c
 80107dc:	2004d460 	.word	0x2004d460
 80107e0:	0804e930 	.word	0x0804e930
 80107e4:	0804e92c 	.word	0x0804e92c
 80107e8:	0804e938 	.word	0x0804e938
 80107ec:	2004d458 	.word	0x2004d458

080107f0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80107f0:	b480      	push	{r7}
 80107f2:	af00      	add	r7, sp, #0
    return 0;
 80107f4:	2300      	movs	r3, #0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010800:	b480      	push	{r7}
 8010802:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8010804:	4b02      	ldr	r3, [pc, #8]	; (8010810 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8010806:	4618      	mov	r0, r3
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr
 8010810:	2004d464 	.word	0x2004d464

08010814 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2b01      	cmp	r3, #1
 8010822:	d113      	bne.n	801084c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801082a:	4293      	cmp	r3, r2
 801082c:	d10e      	bne.n	801084c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801082e:	f7fc fcf7 	bl	800d220 <_Z23getFont_verdana_20_4bppv>
 8010832:	4603      	mov	r3, r0
};
 8010834:	4a07      	ldr	r2, [pc, #28]	; (8010854 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010836:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8010838:	f7fc fd48 	bl	800d2cc <_Z23getFont_verdana_40_4bppv>
 801083c:	4603      	mov	r3, r0
};
 801083e:	4a05      	ldr	r2, [pc, #20]	; (8010854 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010840:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8010842:	f7fc fc97 	bl	800d174 <_Z23getFont_verdana_10_4bppv>
 8010846:	4603      	mov	r3, r0
};
 8010848:	4a02      	ldr	r2, [pc, #8]	; (8010854 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801084a:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 801084c:	bf00      	nop
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	2004d464 	.word	0x2004d464

08010858 <_GLOBAL__sub_I_touchgfx_fonts>:
 8010858:	b580      	push	{r7, lr}
 801085a:	af00      	add	r7, sp, #0
 801085c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010860:	2001      	movs	r0, #1
 8010862:	f7ff ffd7 	bl	8010814 <_Z41__static_initialization_and_destruction_0ii>
 8010866:	bd80      	pop	{r7, pc}

08010868 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	4a05      	ldr	r2, [pc, #20]	; (8010888 <_ZN19FrontendApplicationD1Ev+0x20>)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	601a      	str	r2, [r3, #0]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4618      	mov	r0, r3
 801087a:	f7fd f913 	bl	800daa4 <_ZN23FrontendApplicationBaseD1Ev>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4618      	mov	r0, r3
 8010882:	3708      	adds	r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	08027ff4 	.word	0x08027ff4

0801088c <_ZN19FrontendApplicationD0Ev>:
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f7ff ffe7 	bl	8010868 <_ZN19FrontendApplicationD1Ev>
 801089a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f014 ffac 	bl	80257fc <_ZdlPvj>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	4618      	mov	r0, r3
 80108a8:	3708      	adds	r7, #8
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b082      	sub	sp, #8
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80108bc:	4618      	mov	r0, r3
 80108be:	f000 f82d 	bl	801091c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f006 f921 	bl	8016b0c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80108ca:	bf00      	nop
 80108cc:	3708      	adds	r7, #8
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
	...

080108d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	60f8      	str	r0, [r7, #12]
 80108dc:	60b9      	str	r1, [r7, #8]
 80108de:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	68b9      	ldr	r1, [r7, #8]
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7fd fa74 	bl	800ddd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80108ec:	4a03      	ldr	r2, [pc, #12]	; (80108fc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	601a      	str	r2, [r3, #0]
{

}
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	4618      	mov	r0, r3
 80108f6:	3710      	adds	r7, #16
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	08027ff4 	.word	0x08027ff4

08010900 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2200      	movs	r2, #0
 801090c:	601a      	str	r2, [r3, #0]
{

}
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	4618      	mov	r0, r3
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <_ZN5Model4tickEv>:

void Model::tick()
{
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]

}
 8010924:	bf00      	nop
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
    {
    }
 8010938:	bf00      	nop
 801093a:	370c      	adds	r7, #12
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
    {
    }
 801094c:	bf00      	nop
 801094e:	370c      	adds	r7, #12
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr

08010958 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
    {
 8010960:	4a04      	ldr	r2, [pc, #16]	; (8010974 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	601a      	str	r2, [r3, #0]
    }
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	4618      	mov	r0, r3
 801096a:	370c      	adds	r7, #12
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr
 8010974:	08028078 	.word	0x08028078

08010978 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
    }
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7ff ffe9 	bl	8010958 <_ZN8touchgfx9PresenterD1Ev>
 8010986:	2104      	movs	r1, #4
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f014 ff37 	bl	80257fc <_ZdlPvj>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
    {
 80109a0:	4a04      	ldr	r2, [pc, #16]	; (80109b4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	601a      	str	r2, [r3, #0]
    }
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4618      	mov	r0, r3
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr
 80109b4:	08028078 	.word	0x08028078

080109b8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80109b8:	b480      	push	{r7}
 80109ba:	b083      	sub	sp, #12
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	4a06      	ldr	r2, [pc, #24]	; (80109dc <_ZN13ModelListenerC1Ev+0x24>)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	601a      	str	r2, [r3, #0]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2200      	movs	r2, #0
 80109ca:	605a      	str	r2, [r3, #4]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	4618      	mov	r0, r3
 80109d0:	370c      	adds	r7, #12
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	08028068 	.word	0x08028068

080109e0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80109e0:	b480      	push	{r7}
 80109e2:	b083      	sub	sp, #12
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	4a04      	ldr	r2, [pc, #16]	; (80109fc <_ZN13ModelListenerD1Ev+0x1c>)
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	601a      	str	r2, [r3, #0]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	4618      	mov	r0, r3
 80109f2:	370c      	adds	r7, #12
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr
 80109fc:	08028068 	.word	0x08028068

08010a00 <_ZN13ModelListenerD0Ev>:
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f7ff ffe9 	bl	80109e0 <_ZN13ModelListenerD1Ev>
 8010a0e:	2108      	movs	r1, #8
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f014 fef3 	bl	80257fc <_ZdlPvj>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	4a09      	ldr	r2, [pc, #36]	; (8010a50 <_ZN16Screen1PresenterD1Ev+0x30>)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	601a      	str	r2, [r3, #0]
 8010a2e:	4a09      	ldr	r2, [pc, #36]	; (8010a54 <_ZN16Screen1PresenterD1Ev+0x34>)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	605a      	str	r2, [r3, #4]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	3304      	adds	r3, #4
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7ff ffd1 	bl	80109e0 <_ZN13ModelListenerD1Ev>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7ff ff89 	bl	8010958 <_ZN8touchgfx9PresenterD1Ev>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	08028040 	.word	0x08028040
 8010a54:	08028058 	.word	0x08028058

08010a58 <_ZThn4_N16Screen1PresenterD1Ev>:
 8010a58:	f1a0 0004 	sub.w	r0, r0, #4
 8010a5c:	e7e0      	b.n	8010a20 <_ZN16Screen1PresenterD1Ev>
 8010a5e:	bf00      	nop

08010a60 <_ZN16Screen1PresenterD0Ev>:
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7ff ffd9 	bl	8010a20 <_ZN16Screen1PresenterD1Ev>
 8010a6e:	2110      	movs	r1, #16
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f014 fec3 	bl	80257fc <_ZdlPvj>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <_ZThn4_N16Screen1PresenterD0Ev>:
 8010a80:	f1a0 0004 	sub.w	r0, r0, #4
 8010a84:	e7ec      	b.n	8010a60 <_ZN16Screen1PresenterD0Ev>
	...

08010a88 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
    : view(v)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7ff ff7f 	bl	8010998 <_ZN8touchgfx9PresenterC1Ev>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	3304      	adds	r3, #4
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7ff ff8a 	bl	80109b8 <_ZN13ModelListenerC1Ev>
 8010aa4:	4a06      	ldr	r2, [pc, #24]	; (8010ac0 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	601a      	str	r2, [r3, #0]
 8010aaa:	4a06      	ldr	r2, [pc, #24]	; (8010ac4 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	605a      	str	r2, [r3, #4]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	683a      	ldr	r2, [r7, #0]
 8010ab4:	60da      	str	r2, [r3, #12]
{

}
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3708      	adds	r7, #8
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	08028040 	.word	0x08028040
 8010ac4:	08028058 	.word	0x08028058

08010ac8 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]

}
 8010ad0:	bf00      	nop
 8010ad2:	370c      	adds	r7, #12
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ada:	4770      	bx	lr

08010adc <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]

}
 8010ae4:	bf00      	nop
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	4a05      	ldr	r2, [pc, #20]	; (8010b10 <_ZN11Screen1ViewD1Ev+0x20>)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fe fd45 	bl	800f590 <_ZN15Screen1ViewBaseD1Ev>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	08028090 	.word	0x08028090

08010b14 <_ZN11Screen1ViewD0Ev>:
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f7ff ffe7 	bl	8010af0 <_ZN11Screen1ViewD1Ev>
 8010b22:	f241 013c 	movw	r1, #4156	; 0x103c
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f014 fe68 	bl	80257fc <_ZdlPvj>
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
	...

08010b38 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fe fe04 	bl	800f750 <_ZN15Screen1ViewBaseC1Ev>
 8010b48:	4a03      	ldr	r2, [pc, #12]	; (8010b58 <_ZN11Screen1ViewC1Ev+0x20>)
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	601a      	str	r2, [r3, #0]
{

}
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4618      	mov	r0, r3
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	08028090 	.word	0x08028090

08010b5c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fe fffe 	bl	800fb68 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8010b6c:	bf00      	nop
 8010b6e:	3708      	adds	r7, #8
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fe fa84 	bl	800f08c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010b84:	bf00      	nop
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	4a09      	ldr	r2, [pc, #36]	; (8010bbc <_ZN16Screen2PresenterD1Ev+0x30>)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	601a      	str	r2, [r3, #0]
 8010b9a:	4a09      	ldr	r2, [pc, #36]	; (8010bc0 <_ZN16Screen2PresenterD1Ev+0x34>)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	605a      	str	r2, [r3, #4]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	3304      	adds	r3, #4
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff ff1b 	bl	80109e0 <_ZN13ModelListenerD1Ev>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7ff fed3 	bl	8010958 <_ZN8touchgfx9PresenterD1Ev>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3708      	adds	r7, #8
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	080280c4 	.word	0x080280c4
 8010bc0:	080280dc 	.word	0x080280dc

08010bc4 <_ZThn4_N16Screen2PresenterD1Ev>:
 8010bc4:	f1a0 0004 	sub.w	r0, r0, #4
 8010bc8:	e7e0      	b.n	8010b8c <_ZN16Screen2PresenterD1Ev>
 8010bca:	bf00      	nop

08010bcc <_ZN16Screen2PresenterD0Ev>:
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7ff ffd9 	bl	8010b8c <_ZN16Screen2PresenterD1Ev>
 8010bda:	2110      	movs	r1, #16
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f014 fe0d 	bl	80257fc <_ZdlPvj>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	4618      	mov	r0, r3
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <_ZThn4_N16Screen2PresenterD0Ev>:
 8010bec:	f1a0 0004 	sub.w	r0, r0, #4
 8010bf0:	e7ec      	b.n	8010bcc <_ZN16Screen2PresenterD0Ev>
	...

08010bf4 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
    : view(v)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff fec9 	bl	8010998 <_ZN8touchgfx9PresenterC1Ev>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	3304      	adds	r3, #4
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7ff fed4 	bl	80109b8 <_ZN13ModelListenerC1Ev>
 8010c10:	4a06      	ldr	r2, [pc, #24]	; (8010c2c <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	4a06      	ldr	r2, [pc, #24]	; (8010c30 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	605a      	str	r2, [r3, #4]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	683a      	ldr	r2, [r7, #0]
 8010c20:	60da      	str	r2, [r3, #12]
{

}
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4618      	mov	r0, r3
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	080280c4 	.word	0x080280c4
 8010c30:	080280dc 	.word	0x080280dc

08010c34 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]

}
 8010c3c:	bf00      	nop
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]

}
 8010c50:	bf00      	nop
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	4a05      	ldr	r2, [pc, #20]	; (8010c7c <_ZN11Screen2ViewD1Ev+0x20>)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	601a      	str	r2, [r3, #0]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7ff fb35 	bl	80102dc <_ZN15Screen2ViewBaseD1Ev>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4618      	mov	r0, r3
 8010c76:	3708      	adds	r7, #8
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	080280ec 	.word	0x080280ec

08010c80 <_ZN11Screen2ViewD0Ev>:
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f7ff ffe7 	bl	8010c5c <_ZN11Screen2ViewD1Ev>
 8010c8e:	2198      	movs	r1, #152	; 0x98
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f014 fdb3 	bl	80257fc <_ZdlPvj>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3708      	adds	r7, #8
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7ff fb4e 	bl	801034c <_ZN15Screen2ViewBaseC1Ev>
 8010cb0:	4a03      	ldr	r2, [pc, #12]	; (8010cc0 <_ZN11Screen2ViewC1Ev+0x20>)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	601a      	str	r2, [r3, #0]
{

}
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	080280ec 	.word	0x080280ec

08010cc4 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7ff fbb0 	bl	8010434 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8010cd4:	bf00      	nop
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7fe f9d0 	bl	800f08c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010cec:	bf00      	nop
 8010cee:	3708      	adds	r7, #8
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
    {
 8010cfc:	4a04      	ldr	r2, [pc, #16]	; (8010d10 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	601a      	str	r2, [r3, #0]
    }
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4618      	mov	r0, r3
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr
 8010d10:	08028138 	.word	0x08028138

08010d14 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
    }
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7ff ffe9 	bl	8010cf4 <_ZN8touchgfx15TouchControllerD1Ev>
 8010d22:	2104      	movs	r1, #4
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f014 fd69 	bl	80257fc <_ZdlPvj>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8010d3c:	bf00      	nop
 8010d3e:	370c      	adds	r7, #12
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr

08010d48 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8010d54:	2300      	movs	r3, #0
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3714      	adds	r7, #20
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d60:	4770      	bx	lr
	...

08010d64 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	4a05      	ldr	r2, [pc, #20]	; (8010d84 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	601a      	str	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7ff ffbd 	bl	8010cf4 <_ZN8touchgfx15TouchControllerD1Ev>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	08028120 	.word	0x08028120

08010d88 <_ZN20STM32TouchControllerD0Ev>:
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7ff ffe7 	bl	8010d64 <_ZN20STM32TouchControllerD1Ev>
 8010d96:	2104      	movs	r1, #4
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f014 fd2f 	bl	80257fc <_ZdlPvj>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4618      	mov	r0, r3
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	4603      	mov	r3, r0
 8010db0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8010db2:	79fb      	ldrb	r3, [r7, #7]
 8010db4:	2b03      	cmp	r3, #3
 8010db6:	d80c      	bhi.n	8010dd2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8010db8:	a201      	add	r2, pc, #4	; (adr r2, 8010dc0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8010dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbe:	bf00      	nop
 8010dc0:	08010dd1 	.word	0x08010dd1
 8010dc4:	08010dd1 	.word	0x08010dd1
 8010dc8:	08010dd1 	.word	0x08010dd1
 8010dcc:	08010dd1 	.word	0x08010dd1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8010dd0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8010dd2:	bf00      	nop
 8010dd4:	370c      	adds	r7, #12
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop

08010de0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	4603      	mov	r3, r0
 8010de8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8010dea:	79fb      	ldrb	r3, [r7, #7]
 8010dec:	2b03      	cmp	r3, #3
 8010dee:	d80c      	bhi.n	8010e0a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8010df0:	a201      	add	r2, pc, #4	; (adr r2, 8010df8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8010df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df6:	bf00      	nop
 8010df8:	08010e09 	.word	0x08010e09
 8010dfc:	08010e09 	.word	0x08010e09
 8010e00:	08010e09 	.word	0x08010e09
 8010e04:	08010e09 	.word	0x08010e09
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8010e08:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8010e0a:	bf00      	nop
 8010e0c:	370c      	adds	r7, #12
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop

08010e18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	4603      	mov	r3, r0
 8010e20:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8010e22:	79fb      	ldrb	r3, [r7, #7]
 8010e24:	2b03      	cmp	r3, #3
 8010e26:	d80c      	bhi.n	8010e42 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8010e28:	a201      	add	r2, pc, #4	; (adr r2, 8010e30 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8010e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e2e:	bf00      	nop
 8010e30:	08010e41 	.word	0x08010e41
 8010e34:	08010e41 	.word	0x08010e41
 8010e38:	08010e41 	.word	0x08010e41
 8010e3c:	08010e41 	.word	0x08010e41
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8010e40:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8010e42:	bf00      	nop
 8010e44:	370c      	adds	r7, #12
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop

08010e50 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
    {
 8010e58:	4a04      	ldr	r2, [pc, #16]	; (8010e6c <_ZN8touchgfx3HALD1Ev+0x1c>)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	601a      	str	r2, [r3, #0]
    }
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	4618      	mov	r0, r3
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr
 8010e6c:	0802851c 	.word	0x0802851c

08010e70 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
    }
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f7ff ffe9 	bl	8010e50 <_ZN8touchgfx3HALD1Ev>
 8010e7e:	217c      	movs	r1, #124	; 0x7c
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f014 fcbb 	bl	80257fc <_ZdlPvj>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3708      	adds	r7, #8
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	460b      	mov	r3, r1
 8010e9a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	78fa      	ldrb	r2, [r7, #3]
 8010ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8010eac:	bf00      	nop
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	807b      	strh	r3, [r7, #2]
 8010ec4:	4613      	mov	r3, r2
 8010ec6:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8010ec8:	4b0c      	ldr	r3, [pc, #48]	; (8010efc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8010eca:	881b      	ldrh	r3, [r3, #0]
 8010ecc:	887a      	ldrh	r2, [r7, #2]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d304      	bcc.n	8010edc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8010ed2:	4b0b      	ldr	r3, [pc, #44]	; (8010f00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8010ed4:	881b      	ldrh	r3, [r3, #0]
 8010ed6:	883a      	ldrh	r2, [r7, #0]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d205      	bcs.n	8010ee8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8010edc:	4b09      	ldr	r3, [pc, #36]	; (8010f04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8010ede:	4a0a      	ldr	r2, [pc, #40]	; (8010f08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8010ee0:	219e      	movs	r1, #158	; 0x9e
 8010ee2:	480a      	ldr	r0, [pc, #40]	; (8010f0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8010ee4:	f014 fcb6 	bl	8025854 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8010ee8:	4a09      	ldr	r2, [pc, #36]	; (8010f10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8010eea:	887b      	ldrh	r3, [r7, #2]
 8010eec:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8010eee:	4a09      	ldr	r2, [pc, #36]	; (8010f14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8010ef0:	883b      	ldrh	r3, [r7, #0]
 8010ef2:	8013      	strh	r3, [r2, #0]
    }
 8010ef4:	bf00      	nop
 8010ef6:	3708      	adds	r7, #8
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	2004f624 	.word	0x2004f624
 8010f00:	2004f626 	.word	0x2004f626
 8010f04:	0802740c 	.word	0x0802740c
 8010f08:	08027470 	.word	0x08027470
 8010f0c:	080274b4 	.word	0x080274b4
 8010f10:	2004f62a 	.word	0x2004f62a
 8010f14:	2004f62c 	.word	0x2004f62c

08010f18 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d009      	beq.n	8010f3e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	685a      	ldr	r2, [r3, #4]
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4610      	mov	r0, r2
 8010f38:	4798      	blx	r3
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	e000      	b.n	8010f40 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 8010f3e:	2300      	movs	r3, #0
    }
 8010f40:	4618      	mov	r0, r3
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f002 fe75 	bl	8013c40 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	33ac      	adds	r3, #172	; 0xac
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	4798      	blx	r3
    }
 8010f62:	bf00      	nop
 8010f64:	3708      	adds	r7, #8
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8010f6a:	b480      	push	{r7}
 8010f6c:	b083      	sub	sp, #12
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
 8010f72:	6039      	str	r1, [r7, #0]
        return false;
 8010f74:	2300      	movs	r3, #0
    }
 8010f76:	4618      	mov	r0, r3
 8010f78:	370c      	adds	r7, #12
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr
	...

08010f84 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
 8010f90:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d106      	bne.n	8010fa6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8010f98:	4b0f      	ldr	r3, [pc, #60]	; (8010fd8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8010f9a:	4a10      	ldr	r2, [pc, #64]	; (8010fdc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8010f9c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8010fa0:	480f      	ldr	r0, [pc, #60]	; (8010fe0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8010fa2:	f014 fc57 	bl	8025854 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	bf14      	ite	ne
 8010fb8:	2301      	movne	r3, #1
 8010fba:	2300      	moveq	r3, #0
 8010fbc:	b2da      	uxtb	r2, r3
 8010fbe:	4b09      	ldr	r3, [pc, #36]	; (8010fe4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8010fc0:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	338c      	adds	r3, #140	; 0x8c
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	6839      	ldr	r1, [r7, #0]
 8010fcc:	68f8      	ldr	r0, [r7, #12]
 8010fce:	4798      	blx	r3
    }
 8010fd0:	bf00      	nop
 8010fd2:	3710      	adds	r7, #16
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	080274f8 	.word	0x080274f8
 8010fdc:	08027530 	.word	0x08027530
 8010fe0:	080274b4 	.word	0x080274b4
 8010fe4:	2004f62e 	.word	0x2004f62e

08010fe8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	683a      	ldr	r2, [r7, #0]
 8010ff6:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	bf14      	ite	ne
 8010ffe:	2301      	movne	r3, #1
 8011000:	2300      	moveq	r3, #0
 8011002:	b2da      	uxtb	r2, r3
 8011004:	4b03      	ldr	r3, [pc, #12]	; (8011014 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8011006:	701a      	strb	r2, [r3, #0]
    }
 8011008:	bf00      	nop
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	2004f62f 	.word	0x2004f62f

08011018 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 8011018:	b480      	push	{r7}
 801101a:	b083      	sub	sp, #12
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
        return 0;
 8011020:	2300      	movs	r3, #0
    }
 8011022:	4618      	mov	r0, r3
 8011024:	370c      	adds	r7, #12
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr

0801102e <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 801102e:	b580      	push	{r7, lr}
 8011030:	b082      	sub	sp, #8
 8011032:	af00      	add	r7, sp, #0
 8011034:	6078      	str	r0, [r7, #4]
 8011036:	460b      	mov	r3, r1
 8011038:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801103e:	2b00      	cmp	r3, #0
 8011040:	d004      	beq.n	801104c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011046:	887a      	ldrh	r2, [r7, #2]
 8011048:	4610      	mov	r0, r2
 801104a:	4798      	blx	r3
    }
 801104c:	bf00      	nop
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 8011054:	b480      	push	{r7}
 8011056:	b083      	sub	sp, #12
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 801105c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8011060:	4618      	mov	r0, r3
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr

0801106c <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	685a      	ldr	r2, [r3, #4]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	3318      	adds	r3, #24
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	4610      	mov	r0, r2
 8011084:	4798      	blx	r3
 8011086:	4603      	mov	r3, r0
    }
 8011088:	4618      	mov	r0, r3
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 8011098:	4b0e      	ldr	r3, [pc, #56]	; (80110d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d00c      	beq.n	80110ba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	3330      	adds	r3, #48	; 0x30
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	4798      	blx	r3
 80110ac:	4602      	mov	r2, r0
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d101      	bne.n	80110ba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 80110b6:	2301      	movs	r3, #1
 80110b8:	e000      	b.n	80110bc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 80110ba:	2300      	movs	r3, #0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d002      	beq.n	80110c6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110c4:	e001      	b.n	80110ca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 80110ca:	4618      	mov	r0, r3
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	2004f62e 	.word	0x2004f62e

080110d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80110d8:	b480      	push	{r7}
 80110da:	b085      	sub	sp, #20
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d011      	beq.n	8011114 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80110f0:	4b14      	ldr	r3, [pc, #80]	; (8011144 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d11e      	bne.n	8011136 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80110f8:	4b13      	ldr	r3, [pc, #76]	; (8011148 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80110fa:	881b      	ldrh	r3, [r3, #0]
 80110fc:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80110fe:	4b13      	ldr	r3, [pc, #76]	; (801114c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011100:	881a      	ldrh	r2, [r3, #0]
 8011102:	4b11      	ldr	r3, [pc, #68]	; (8011148 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011104:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8011106:	4a11      	ldr	r2, [pc, #68]	; (801114c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011108:	89bb      	ldrh	r3, [r7, #12]
 801110a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 801110c:	4b0d      	ldr	r3, [pc, #52]	; (8011144 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801110e:	2201      	movs	r2, #1
 8011110:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8011112:	e010      	b.n	8011136 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8011114:	4b0b      	ldr	r3, [pc, #44]	; (8011144 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d00c      	beq.n	8011136 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 801111c:	4b0a      	ldr	r3, [pc, #40]	; (8011148 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801111e:	881b      	ldrh	r3, [r3, #0]
 8011120:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011122:	4b0a      	ldr	r3, [pc, #40]	; (801114c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011124:	881a      	ldrh	r2, [r3, #0]
 8011126:	4b08      	ldr	r3, [pc, #32]	; (8011148 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011128:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 801112a:	4a08      	ldr	r2, [pc, #32]	; (801114c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801112c:	89fb      	ldrh	r3, [r7, #14]
 801112e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8011130:	4b04      	ldr	r3, [pc, #16]	; (8011144 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011132:	2200      	movs	r2, #0
 8011134:	701a      	strb	r2, [r3, #0]
    }
 8011136:	bf00      	nop
 8011138:	3714      	adds	r7, #20
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop
 8011144:	2004f628 	.word	0x2004f628
 8011148:	2004f626 	.word	0x2004f626
 801114c:	2004f624 	.word	0x2004f624

08011150 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
    {
    }
 8011158:	bf00      	nop
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8011164:	b480      	push	{r7}
 8011166:	b083      	sub	sp, #12
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
    {
    }
 801116c:	bf00      	nop
 801116e:	370c      	adds	r7, #12
 8011170:	46bd      	mov	sp, r7
 8011172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011176:	4770      	bx	lr

08011178 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011178:	b580      	push	{r7, lr}
 801117a:	b082      	sub	sp, #8
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	4618      	mov	r0, r3
 8011184:	f001 ffd4 	bl	8013130 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8011188:	bf00      	nop
 801118a:	3708      	adds	r7, #8
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	4a05      	ldr	r2, [pc, #20]	; (80111b0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	601a      	str	r2, [r3, #0]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7ff fe55 	bl	8010e50 <_ZN8touchgfx3HALD1Ev>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	4618      	mov	r0, r3
 80111aa:	3708      	adds	r7, #8
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	08028374 	.word	0x08028374

080111b4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f7ff ffe7 	bl	8011190 <_ZN20TouchGFXGeneratedHALD1Ev>
 80111c2:	217c      	movs	r1, #124	; 0x7c
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f014 fb19 	bl	80257fc <_ZdlPvj>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4618      	mov	r0, r3
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	4618      	mov	r0, r3
 80111e0:	f7ff ffca 	bl	8011178 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80111e4:	bf00      	nop
 80111e6:	3708      	adds	r7, #8
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f001 fc2c 	bl	8012a54 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80111fc:	bf00      	nop
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	f001 fc88 	bl	8012b24 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011214:	4603      	mov	r3, r0
}
 8011216:	4618      	mov	r0, r3
 8011218:	3708      	adds	r7, #8
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}

0801121e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801121e:	b580      	push	{r7, lr}
 8011220:	b082      	sub	sp, #8
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
 8011226:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6839      	ldr	r1, [r7, #0]
 801122c:	4618      	mov	r0, r3
 801122e:	f001 fc87 	bl	8012b40 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011232:	bf00      	nop
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}

0801123a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801123a:	b590      	push	{r4, r7, lr}
 801123c:	b083      	sub	sp, #12
 801123e:	af00      	add	r7, sp, #0
 8011240:	6078      	str	r0, [r7, #4]
 8011242:	6039      	str	r1, [r7, #0]
	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	f9b3 3000 	ldrsh.w	r3, [r3]
 801124a:	b298      	uxth	r0, r3
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011252:	b299      	uxth	r1, r3
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	f9b3 3000 	ldrsh.w	r3, [r3]
 801125a:	b29a      	uxth	r2, r3
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011262:	b29b      	uxth	r3, r3
 8011264:	4413      	add	r3, r2
 8011266:	b29c      	uxth	r4, r3
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801126e:	b29a      	uxth	r2, r3
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011276:	b29b      	uxth	r3, r3
 8011278:	4413      	add	r3, r2
 801127a:	b29b      	uxth	r3, r3
 801127c:	4622      	mov	r2, r4
 801127e:	f7ef fb2b 	bl	80008d8 <ST7789V_setCursorPosition>
	ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8011282:	202c      	movs	r0, #44	; 0x2c
 8011284:	f7ef fae2 	bl	800084c <ST7789V_SEND_COMMAND>
	this -> copyFrameBufferBlockToLCD(rect);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	33d0      	adds	r3, #208	; 0xd0
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	6839      	ldr	r1, [r7, #0]
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	4798      	blx	r3
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6839      	ldr	r1, [r7, #0]
 801129a:	4618      	mov	r0, r3
 801129c:	f001 fc5b 	bl	8012b56 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80112a0:	bf00      	nop
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd90      	pop	{r4, r7, pc}

080112a8 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE>:

void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect& rect)
{
 80112a8:	b590      	push	{r4, r7, lr}
 80112aa:	b087      	sub	sp, #28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
	__IO uint16_t* ptr;
	uint32_t height;

	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112b8:	b298      	uxth	r0, r3
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112c0:	b299      	uxth	r1, r3
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112c8:	b29a      	uxth	r2, r3
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	4413      	add	r3, r2
 80112d4:	b29c      	uxth	r4, r3
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112dc:	b29a      	uxth	r2, r3
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	4413      	add	r3, r2
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	4622      	mov	r2, r4
 80112ec:	f7ef faf4 	bl	80008d8 <ST7789V_setCursorPosition>

	for(height = 0; height < rect.height; height++)
 80112f0:	2300      	movs	r3, #0
 80112f2:	617b      	str	r3, [r7, #20]
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80112fa:	461a      	mov	r2, r3
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	4293      	cmp	r3, r2
 8011300:	d236      	bcs.n	8011370 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc8>
	{
		ptr = getClientFrameBuffer() + rect.x + (height + rect.y) * HAL::DISPLAY_WIDTH;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	4618      	mov	r0, r3
 8011306:	f7ff fec3 	bl	8011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801130a:	4602      	mov	r2, r0
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011312:	4618      	mov	r0, r3
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801131a:	4619      	mov	r1, r3
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	440b      	add	r3, r1
 8011320:	4915      	ldr	r1, [pc, #84]	; (8011378 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xd0>)
 8011322:	8809      	ldrh	r1, [r1, #0]
 8011324:	fb01 f303 	mul.w	r3, r1, r3
 8011328:	4403      	add	r3, r0
 801132a:	005b      	lsls	r3, r3, #1
 801132c:	4413      	add	r3, r2
 801132e:	60fb      	str	r3, [r7, #12]
		//LCD_IO_WriteMultipleData((uint16_t*)ptr, rect.width);
		//for (uint32_t i = 0; i < Size; i++)
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 8011330:	2300      	movs	r3, #0
 8011332:	613b      	str	r3, [r7, #16]
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801133a:	461a      	mov	r2, r3
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011342:	fb02 f303 	mul.w	r3, r2, r3
 8011346:	461a      	mov	r2, r3
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	4293      	cmp	r3, r2
 801134c:	d20c      	bcs.n	8011368 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc0>
		        {
		            //FMC_BANK1_WriteData(ptr[i]);
					ST7789V_SEND_DATA(ptr[i]);
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	005b      	lsls	r3, r3, #1
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	4413      	add	r3, r2
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	b29b      	uxth	r3, r3
 801135a:	4618      	mov	r0, r3
 801135c:	f7ef fa86 	bl	800086c <ST7789V_SEND_DATA>
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	3301      	adds	r3, #1
 8011364:	613b      	str	r3, [r7, #16]
 8011366:	e7e5      	b.n	8011334 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x8c>
	for(height = 0; height < rect.height; height++)
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	3301      	adds	r3, #1
 801136c:	617b      	str	r3, [r7, #20]
 801136e:	e7c1      	b.n	80112f4 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x4c>
		        }
	}
}
 8011370:	bf00      	nop
 8011372:	371c      	adds	r7, #28
 8011374:	46bd      	mov	sp, r7
 8011376:	bd90      	pop	{r4, r7, pc}
 8011378:	2004f624 	.word	0x2004f624

0801137c <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
 8011388:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	687a      	ldr	r2, [r7, #4]
 8011390:	68b9      	ldr	r1, [r7, #8]
 8011392:	f001 fbee 	bl	8012b72 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011396:	4603      	mov	r3, r0
}
 8011398:	4618      	mov	r0, r3
 801139a:	3710      	adds	r7, #16
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}

080113a0 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	4618      	mov	r0, r3
 80113ac:	f001 fb74 	bl	8012a98 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80113b0:	bf00      	nop
 80113b2:	3708      	adds	r7, #8
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f001 fb74 	bl	8012ab0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80113c8:	bf00      	nop
 80113ca:	3708      	adds	r7, #8
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}

080113d0 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	4618      	mov	r0, r3
 80113dc:	f001 fb73 	bl	8012ac6 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80113e0:	bf00      	nop
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f001 fb72 	bl	8012adc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80113f8:	bf00      	nop
 80113fa:	3708      	adds	r7, #8
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	4618      	mov	r0, r3
 801140c:	f001 fb70 	bl	8012af0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011410:	4603      	mov	r3, r0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}

0801141a <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 801141a:	b580      	push	{r7, lr}
 801141c:	b082      	sub	sp, #8
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4618      	mov	r0, r3
 8011426:	f001 fb70 	bl	8012b0a <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 801142a:	bf00      	nop
 801142c:	3708      	adds	r7, #8
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
	...

08011434 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011434:	b580      	push	{r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	4a05      	ldr	r2, [pc, #20]	; (8011454 <_ZN11TouchGFXHALD1Ev+0x20>)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	601a      	str	r2, [r3, #0]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	4618      	mov	r0, r3
 8011446:	f7ff fea3 	bl	8011190 <_ZN20TouchGFXGeneratedHALD1Ev>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4618      	mov	r0, r3
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	08028150 	.word	0x08028150

08011458 <_ZN11TouchGFXHALD0Ev>:
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7ff ffe7 	bl	8011434 <_ZN11TouchGFXHALD1Ev>
 8011466:	217c      	movs	r1, #124	; 0x7c
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f014 f9c7 	bl	80257fc <_ZdlPvj>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4618      	mov	r0, r3
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af02      	add	r7, sp, #8
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 801147e:	2334      	movs	r3, #52	; 0x34
 8011480:	9300      	str	r3, [sp, #0]
 8011482:	2364      	movs	r3, #100	; 0x64
 8011484:	4a2b      	ldr	r2, [pc, #172]	; (8011534 <_ZN8touchgfx10OSWrappers10initializeEv+0xbc>)
 8011486:	492c      	ldr	r1, [pc, #176]	; (8011538 <_ZN8touchgfx10OSWrappers10initializeEv+0xc0>)
 8011488:	482c      	ldr	r0, [pc, #176]	; (801153c <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 801148a:	f7fb f8ab 	bl	800c5e4 <_txe_byte_pool_create>
 801148e:	4603      	mov	r3, r0
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
 8011490:	2b00      	cmp	r3, #0
 8011492:	bf14      	ite	ne
 8011494:	2301      	movne	r3, #1
 8011496:	2300      	moveq	r3, #0
 8011498:	b2db      	uxtb	r3, r3
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 801149a:	2b00      	cmp	r3, #0
 801149c:	d005      	beq.n	80114aa <_ZN8touchgfx10OSWrappers10initializeEv+0x32>
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 801149e:	4b28      	ldr	r3, [pc, #160]	; (8011540 <_ZN8touchgfx10OSWrappers10initializeEv+0xc8>)
 80114a0:	4a28      	ldr	r2, [pc, #160]	; (8011544 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 80114a2:	2138      	movs	r1, #56	; 0x38
 80114a4:	4828      	ldr	r0, [pc, #160]	; (8011548 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 80114a6:	f014 f9d5 	bl	8025854 <__assert_func>
    }

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 80114aa:	1d39      	adds	r1, r7, #4
 80114ac:	2300      	movs	r3, #0
 80114ae:	2204      	movs	r2, #4
 80114b0:	4822      	ldr	r0, [pc, #136]	; (801153c <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 80114b2:	f7fb f823 	bl	800c4fc <_txe_byte_allocate>
 80114b6:	4603      	mov	r3, r0
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	bf14      	ite	ne
 80114bc:	2301      	movne	r3, #1
 80114be:	2300      	moveq	r3, #0
 80114c0:	b2db      	uxtb	r3, r3
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d005      	beq.n	80114d2 <_ZN8touchgfx10OSWrappers10initializeEv+0x5a>
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80114c6:	4b21      	ldr	r3, [pc, #132]	; (801154c <_ZN8touchgfx10OSWrappers10initializeEv+0xd4>)
 80114c8:	4a1e      	ldr	r2, [pc, #120]	; (8011544 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 80114ca:	213f      	movs	r1, #63	; 0x3f
 80114cc:	481e      	ldr	r0, [pc, #120]	; (8011548 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 80114ce:	f014 f9c1 	bl	8025854 <__assert_func>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2238      	movs	r2, #56	; 0x38
 80114d6:	9201      	str	r2, [sp, #4]
 80114d8:	2204      	movs	r2, #4
 80114da:	9200      	str	r2, [sp, #0]
 80114dc:	2201      	movs	r2, #1
 80114de:	491c      	ldr	r1, [pc, #112]	; (8011550 <_ZN8touchgfx10OSWrappers10initializeEv+0xd8>)
 80114e0:	481c      	ldr	r0, [pc, #112]	; (8011554 <_ZN8touchgfx10OSWrappers10initializeEv+0xdc>)
 80114e2:	f7fb f91f 	bl	800c724 <_txe_queue_create>
 80114e6:	4603      	mov	r3, r0
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	bf14      	ite	ne
 80114ec:	2301      	movne	r3, #1
 80114ee:	2300      	moveq	r3, #0
 80114f0:	b2db      	uxtb	r3, r3
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d005      	beq.n	8011502 <_ZN8touchgfx10OSWrappers10initializeEv+0x8a>
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 80114f6:	4b18      	ldr	r3, [pc, #96]	; (8011558 <_ZN8touchgfx10OSWrappers10initializeEv+0xe0>)
 80114f8:	4a12      	ldr	r2, [pc, #72]	; (8011544 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 80114fa:	2146      	movs	r1, #70	; 0x46
 80114fc:	4812      	ldr	r0, [pc, #72]	; (8011548 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 80114fe:	f014 f9a9 	bl	8025854 <__assert_func>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 8011502:	231c      	movs	r3, #28
 8011504:	2201      	movs	r2, #1
 8011506:	4915      	ldr	r1, [pc, #84]	; (801155c <_ZN8touchgfx10OSWrappers10initializeEv+0xe4>)
 8011508:	4815      	ldr	r0, [pc, #84]	; (8011560 <_ZN8touchgfx10OSWrappers10initializeEv+0xe8>)
 801150a:	f7fb fa05 	bl	800c918 <_txe_semaphore_create>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	bf14      	ite	ne
 8011514:	2301      	movne	r3, #1
 8011516:	2300      	moveq	r3, #0
 8011518:	b2db      	uxtb	r3, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	d005      	beq.n	801152a <_ZN8touchgfx10OSWrappers10initializeEv+0xb2>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 801151e:	4b11      	ldr	r3, [pc, #68]	; (8011564 <_ZN8touchgfx10OSWrappers10initializeEv+0xec>)
 8011520:	4a08      	ldr	r2, [pc, #32]	; (8011544 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011522:	214c      	movs	r1, #76	; 0x4c
 8011524:	4808      	ldr	r0, [pc, #32]	; (8011548 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011526:	f014 f995 	bl	8025854 <__assert_func>
    }
}
 801152a:	bf00      	nop
 801152c:	3708      	adds	r7, #8
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	2004d470 	.word	0x2004d470
 8011538:	08027580 	.word	0x08027580
 801153c:	2004d4d4 	.word	0x2004d4d4
 8011540:	08027594 	.word	0x08027594
 8011544:	080275c4 	.word	0x080275c4
 8011548:	080275f4 	.word	0x080275f4
 801154c:	08027620 	.word	0x08027620
 8011550:	08027660 	.word	0x08027660
 8011554:	2004d524 	.word	0x2004d524
 8011558:	08027674 	.word	0x08027674
 801155c:	080276a4 	.word	0x080276a4
 8011560:	2004d508 	.word	0x2004d508
 8011564:	080276bc 	.word	0x080276bc

08011568 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011568:	b580      	push	{r7, lr}
 801156a:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 801156c:	f04f 31ff 	mov.w	r1, #4294967295
 8011570:	4809      	ldr	r0, [pc, #36]	; (8011598 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 8011572:	f7fb fa67 	bl	800ca44 <_txe_semaphore_get>
 8011576:	4603      	mov	r3, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	bf14      	ite	ne
 801157c:	2301      	movne	r3, #1
 801157e:	2300      	moveq	r3, #0
 8011580:	b2db      	uxtb	r3, r3
 8011582:	2b00      	cmp	r3, #0
 8011584:	d005      	beq.n	8011592 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 8011586:	4b05      	ldr	r3, [pc, #20]	; (801159c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 8011588:	4a05      	ldr	r2, [pc, #20]	; (80115a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 801158a:	2157      	movs	r1, #87	; 0x57
 801158c:	4805      	ldr	r0, [pc, #20]	; (80115a4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x3c>)
 801158e:	f014 f961 	bl	8025854 <__assert_func>
    }
}
 8011592:	bf00      	nop
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	2004d508 	.word	0x2004d508
 801159c:	080276ec 	.word	0x080276ec
 80115a0:	08027718 	.word	0x08027718
 80115a4:	080275f4 	.word	0x080275f4

080115a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	af00      	add	r7, sp, #0
    if (!frame_buffer_sem.tx_semaphore_count)
 80115ac:	4b0b      	ldr	r3, [pc, #44]	; (80115dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 80115ae:	689b      	ldr	r3, [r3, #8]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d110      	bne.n	80115d6 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 80115b4:	4809      	ldr	r0, [pc, #36]	; (80115dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 80115b6:	f7fb fa87 	bl	800cac8 <_txe_semaphore_put>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	bf14      	ite	ne
 80115c0:	2301      	movne	r3, #1
 80115c2:	2300      	moveq	r3, #0
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d005      	beq.n	80115d6 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 80115ca:	4b05      	ldr	r3, [pc, #20]	; (80115e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x38>)
 80115cc:	4a05      	ldr	r2, [pc, #20]	; (80115e4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x3c>)
 80115ce:	2164      	movs	r1, #100	; 0x64
 80115d0:	4805      	ldr	r0, [pc, #20]	; (80115e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x40>)
 80115d2:	f014 f93f 	bl	8025854 <__assert_func>
        }
    }
}
 80115d6:	bf00      	nop
 80115d8:	bd80      	pop	{r7, pc}
 80115da:	bf00      	nop
 80115dc:	2004d508 	.word	0x2004d508
 80115e0:	08027758 	.word	0x08027758
 80115e4:	08027784 	.word	0x08027784
 80115e8:	080275f4 	.word	0x080275f4

080115ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 80115f0:	2100      	movs	r1, #0
 80115f2:	4803      	ldr	r0, [pc, #12]	; (8011600 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80115f4:	f7fb fa26 	bl	800ca44 <_txe_semaphore_get>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b00      	cmp	r3, #0
    {
        // Typically we should inform the requester about failing to get this semaphore
        // Maybe we should update the prototype of this method to return the result of the try
        // assert(0 && "Failed to get FrameBuffer Semaphore!");
    }
}
 80115fc:	bf00      	nop
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	2004d508 	.word	0x2004d508

08011604 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801160a:	f3ef 8310 	mrs	r3, PRIMASK
 801160e:	60bb      	str	r3, [r7, #8]
    return(posture);
 8011610:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8011612:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011614:	b672      	cpsid	i
    return(int_posture);
 8011616:	687b      	ldr	r3, [r7, #4]
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
 8011618:	60fb      	str	r3, [r7, #12]
    _tx_thread_preempt_disable++;
 801161a:	4b15      	ldr	r3, [pc, #84]	; (8011670 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3301      	adds	r3, #1
 8011620:	4a13      	ldr	r2, [pc, #76]	; (8011670 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011622:	6013      	str	r3, [r2, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 8011624:	4b13      	ldr	r3, [pc, #76]	; (8011674 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 8011626:	689b      	ldr	r3, [r3, #8]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d110      	bne.n	801164e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 801162c:	4811      	ldr	r0, [pc, #68]	; (8011674 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 801162e:	f7fb fa4b 	bl	800cac8 <_txe_semaphore_put>
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	bf14      	ite	ne
 8011638:	2301      	movne	r3, #1
 801163a:	2300      	moveq	r3, #0
 801163c:	b2db      	uxtb	r3, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	d005      	beq.n	801164e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8011642:	4b0d      	ldr	r3, [pc, #52]	; (8011678 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x74>)
 8011644:	4a0d      	ldr	r2, [pc, #52]	; (801167c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x78>)
 8011646:	218a      	movs	r1, #138	; 0x8a
 8011648:	480d      	ldr	r0, [pc, #52]	; (8011680 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x7c>)
 801164a:	f014 f903 	bl	8025854 <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 801164e:	4b08      	ldr	r3, [pc, #32]	; (8011670 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	3b01      	subs	r3, #1
 8011654:	4a06      	ldr	r2, [pc, #24]	; (8011670 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011656:	6013      	str	r3, [r2, #0]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	f383 8810 	msr	PRIMASK, r3
}
 8011662:	bf00      	nop
    TX_RESTORE;
    _tx_thread_system_preempt_check();
 8011664:	f7fa fa34 	bl	800bad0 <_tx_thread_system_preempt_check>
}
 8011668:	bf00      	nop
 801166a:	3710      	adds	r7, #16
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	2004cdb0 	.word	0x2004cdb0
 8011674:	2004d508 	.word	0x2004d508
 8011678:	08027758 	.word	0x08027758
 801167c:	080277c4 	.word	0x080277c4
 8011680:	080275f4 	.word	0x080275f4

08011684 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 801168a:	2200      	movs	r2, #0
 801168c:	490f      	ldr	r1, [pc, #60]	; (80116cc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 801168e:	4810      	ldr	r0, [pc, #64]	; (80116d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8011690:	f7fb f8f8 	bl	800c884 <_txe_queue_receive>
 8011694:	6078      	str	r0, [r7, #4]

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d002      	beq.n	80116a2 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b0a      	cmp	r3, #10
 80116a0:	d106      	bne.n	80116b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        // Then, wait for next VSYNC to occur.
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 80116a2:	f04f 32ff 	mov.w	r2, #4294967295
 80116a6:	4909      	ldr	r1, [pc, #36]	; (80116cc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 80116a8:	4809      	ldr	r0, [pc, #36]	; (80116d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 80116aa:	f7fb f8eb 	bl	800c884 <_txe_queue_receive>
 80116ae:	6078      	str	r0, [r7, #4]
    }

    if (ret != TX_SUCCESS)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d005      	beq.n	80116c2 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3e>
    {
        assert(0 && "Failed to Wait for Vsync!");
 80116b6:	4b07      	ldr	r3, [pc, #28]	; (80116d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x50>)
 80116b8:	4a07      	ldr	r2, [pc, #28]	; (80116d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x54>)
 80116ba:	21c9      	movs	r1, #201	; 0xc9
 80116bc:	4807      	ldr	r0, [pc, #28]	; (80116dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x58>)
 80116be:	f014 f8c9 	bl	8025854 <__assert_func>
    }
}
 80116c2:	bf00      	nop
 80116c4:	3708      	adds	r7, #8
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	20025818 	.word	0x20025818
 80116d0:	2004d524 	.word	0x2004d524
 80116d4:	08027858 	.word	0x08027858
 80116d8:	0802787c 	.word	0x0802787c
 80116dc:	080275f4 	.word	0x080275f4

080116e0 <__NVIC_DisableIRQ>:
{
 80116e0:	b480      	push	{r7}
 80116e2:	b083      	sub	sp, #12
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	4603      	mov	r3, r0
 80116e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80116ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	db12      	blt.n	8011718 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80116f2:	79fb      	ldrb	r3, [r7, #7]
 80116f4:	f003 021f 	and.w	r2, r3, #31
 80116f8:	490a      	ldr	r1, [pc, #40]	; (8011724 <__NVIC_DisableIRQ+0x44>)
 80116fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116fe:	095b      	lsrs	r3, r3, #5
 8011700:	2001      	movs	r0, #1
 8011702:	fa00 f202 	lsl.w	r2, r0, r2
 8011706:	3320      	adds	r3, #32
 8011708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801170c:	f3bf 8f4f 	dsb	sy
}
 8011710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011712:	f3bf 8f6f 	isb	sy
}
 8011716:	bf00      	nop
}
 8011718:	bf00      	nop
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr
 8011724:	e000e100 	.word	0xe000e100

08011728 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011728:	b480      	push	{r7}
 801172a:	b083      	sub	sp, #12
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
    {
 8011730:	4a04      	ldr	r2, [pc, #16]	; (8011744 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	601a      	str	r2, [r3, #0]
    }
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4618      	mov	r0, r3
 801173a:	370c      	adds	r7, #12
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr
 8011744:	0802827c 	.word	0x0802827c

08011748 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
    }
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7ff ffe9 	bl	8011728 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011756:	2104      	movs	r1, #4
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f014 f84f 	bl	80257fc <_ZdlPvj>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4618      	mov	r0, r3
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	3344      	adds	r3, #68	; 0x44
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	4798      	blx	r3
    }
 801177c:	bf00      	nop
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8011784:	b480      	push	{r7}
 8011786:	b083      	sub	sp, #12
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
    {
 801178c:	4a04      	ldr	r2, [pc, #16]	; (80117a0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	601a      	str	r2, [r3, #0]
    }
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4618      	mov	r0, r3
 8011796:	370c      	adds	r7, #12
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr
 80117a0:	080285f4 	.word	0x080285f4

080117a4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
    }
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f7ff ffe9 	bl	8011784 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80117b2:	210c      	movs	r1, #12
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f014 f821 	bl	80257fc <_ZdlPvj>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	4618      	mov	r0, r3
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80117ce:	4a09      	ldr	r2, [pc, #36]	; (80117f4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	601a      	str	r2, [r3, #0]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	683a      	ldr	r2, [r7, #0]
 80117d8:	605a      	str	r2, [r3, #4]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	721a      	strb	r2, [r3, #8]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	725a      	strb	r2, [r3, #9]
    {
    }
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	4618      	mov	r0, r3
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr
 80117f4:	080285f4 	.word	0x080285f4

080117f8 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8011800:	2301      	movs	r3, #1
    }
 8011802:	4618      	mov	r0, r3
 8011804:	370c      	adds	r7, #12
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr

0801180e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801180e:	b580      	push	{r7, lr}
 8011810:	b082      	sub	sp, #8
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	3328      	adds	r3, #40	; 0x28
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	4610      	mov	r0, r2
 8011822:	4798      	blx	r3
    }
 8011824:	bf00      	nop
 8011826:	3708      	adds	r7, #8
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	685a      	ldr	r2, [r3, #4]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	3314      	adds	r3, #20
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	4610      	mov	r0, r2
 8011844:	4798      	blx	r3
    }
 8011846:	bf00      	nop
 8011848:	3708      	adds	r7, #8
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
	...

08011850 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8011850:	b580      	push	{r7, lr}
 8011852:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8011854:	4b13      	ldr	r3, [pc, #76]	; (80118a4 <DMA2D_IRQHandler+0x54>)
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	f003 0302 	and.w	r3, r3, #2
 801185c:	2b00      	cmp	r3, #0
 801185e:	bf14      	ite	ne
 8011860:	2301      	movne	r3, #1
 8011862:	2300      	moveq	r3, #0
 8011864:	b2db      	uxtb	r3, r3
 8011866:	2b00      	cmp	r3, #0
 8011868:	d019      	beq.n	801189e <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 801186a:	4b0e      	ldr	r3, [pc, #56]	; (80118a4 <DMA2D_IRQHandler+0x54>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011872:	2b00      	cmp	r3, #0
 8011874:	bf14      	ite	ne
 8011876:	2301      	movne	r3, #1
 8011878:	2300      	moveq	r3, #0
 801187a:	b2db      	uxtb	r3, r3
 801187c:	2b00      	cmp	r3, #0
 801187e:	d00e      	beq.n	801189e <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8011880:	4b08      	ldr	r3, [pc, #32]	; (80118a4 <DMA2D_IRQHandler+0x54>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4a07      	ldr	r2, [pc, #28]	; (80118a4 <DMA2D_IRQHandler+0x54>)
 8011886:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801188a:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 801188c:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <DMA2D_IRQHandler+0x54>)
 801188e:	2202      	movs	r2, #2
 8011890:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8011892:	f7fb ffbf 	bl	800d814 <_ZN8touchgfx3HAL11getInstanceEv>
 8011896:	4603      	mov	r3, r0
 8011898:	4618      	mov	r0, r3
 801189a:	f7ff ffc7 	bl	801182c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 801189e:	bf00      	nop
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	4002b000 	.word	0x4002b000

080118a8 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	330c      	adds	r3, #12
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7fd fb34 	bl	800ef22 <_ZN8touchgfx9colortypeC1Ev>
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	4618      	mov	r0, r3
 80118be:	3708      	adds	r7, #8
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}

080118c4 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 80118c4:	b5b0      	push	{r4, r5, r7, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80118cc:	687a      	ldr	r2, [r7, #4]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	330c      	adds	r3, #12
 80118d2:	4619      	mov	r1, r3
 80118d4:	4610      	mov	r0, r2
 80118d6:	f7ff ff75 	bl	80117c4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80118da:	4a0e      	ldr	r2, [pc, #56]	; (8011914 <_ZN8STM32DMAC1Ev+0x50>)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	601a      	str	r2, [r3, #0]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f103 000c 	add.w	r0, r3, #12
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	3320      	adds	r3, #32
 80118ea:	2260      	movs	r2, #96	; 0x60
 80118ec:	4619      	mov	r1, r3
 80118ee:	f002 faf9 	bl	8013ee4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	3320      	adds	r3, #32
 80118f6:	245f      	movs	r4, #95	; 0x5f
 80118f8:	461d      	mov	r5, r3
 80118fa:	2c00      	cmp	r4, #0
 80118fc:	db05      	blt.n	801190a <_ZN8STM32DMAC1Ev+0x46>
 80118fe:	4628      	mov	r0, r5
 8011900:	f7ff ffd2 	bl	80118a8 <_ZN8touchgfx6BlitOpC1Ev>
 8011904:	3524      	adds	r5, #36	; 0x24
 8011906:	3c01      	subs	r4, #1
 8011908:	e7f7      	b.n	80118fa <_ZN8STM32DMAC1Ev+0x36>
{
}
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4618      	mov	r0, r3
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bdb0      	pop	{r4, r5, r7, pc}
 8011914:	0802822c 	.word	0x0802822c

08011918 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	4a09      	ldr	r2, [pc, #36]	; (8011948 <_ZN8STM32DMAD1Ev+0x30>)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8011926:	2076      	movs	r0, #118	; 0x76
 8011928:	f7ff feda 	bl	80116e0 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	330c      	adds	r3, #12
 8011930:	4618      	mov	r0, r3
 8011932:	f000 fb31 	bl	8011f98 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	4618      	mov	r0, r3
 801193a:	f7ff ff23 	bl	8011784 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	4618      	mov	r0, r3
 8011942:	3708      	adds	r7, #8
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}
 8011948:	0802822c 	.word	0x0802822c

0801194c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
}
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7ff ffdf 	bl	8011918 <_ZN8STM32DMAD1Ev>
 801195a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f013 ff4c 	bl	80257fc <_ZdlPvj>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	4618      	mov	r0, r3
 8011968:	3708      	adds	r7, #8
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}
	...

08011970 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8011978:	4b13      	ldr	r3, [pc, #76]	; (80119c8 <_ZN8STM32DMA10initializeEv+0x58>)
 801197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801197e:	4a12      	ldr	r2, [pc, #72]	; (80119c8 <_ZN8STM32DMA10initializeEv+0x58>)
 8011980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8011988:	4b0f      	ldr	r3, [pc, #60]	; (80119c8 <_ZN8STM32DMA10initializeEv+0x58>)
 801198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801198e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011992:	60fb      	str	r3, [r7, #12]
 8011994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8011996:	4b0c      	ldr	r3, [pc, #48]	; (80119c8 <_ZN8STM32DMA10initializeEv+0x58>)
 8011998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801199a:	4a0b      	ldr	r2, [pc, #44]	; (80119c8 <_ZN8STM32DMA10initializeEv+0x58>)
 801199c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80119a0:	6613      	str	r3, [r2, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80119a2:	4b09      	ldr	r3, [pc, #36]	; (80119c8 <_ZN8STM32DMA10initializeEv+0x58>)
 80119a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80119a6:	4a08      	ldr	r2, [pc, #32]	; (80119c8 <_ZN8STM32DMA10initializeEv+0x58>)
 80119a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80119ac:	6613      	str	r3, [r2, #96]	; 0x60

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80119ae:	2200      	movs	r2, #0
 80119b0:	2105      	movs	r1, #5
 80119b2:	2076      	movs	r0, #118	; 0x76
 80119b4:	f7f1 f836 	bl	8002a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80119b8:	2076      	movs	r0, #118	; 0x76
 80119ba:	f7f1 f84d 	bl	8002a58 <HAL_NVIC_EnableIRQ>
}
 80119be:	bf00      	nop
 80119c0:	3710      	adds	r7, #16
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	46020c00 	.word	0x46020c00

080119cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	460b      	mov	r3, r1
 80119d6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80119d8:	2300      	movs	r3, #0
 80119da:	60fb      	str	r3, [r7, #12]

    switch (format)
 80119dc:	78fb      	ldrb	r3, [r7, #3]
 80119de:	2b0b      	cmp	r3, #11
 80119e0:	d826      	bhi.n	8011a30 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80119e2:	a201      	add	r2, pc, #4	; (adr r2, 80119e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80119e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e8:	08011a25 	.word	0x08011a25
 80119ec:	08011a1f 	.word	0x08011a1f
 80119f0:	08011a19 	.word	0x08011a19
 80119f4:	08011a31 	.word	0x08011a31
 80119f8:	08011a31 	.word	0x08011a31
 80119fc:	08011a31 	.word	0x08011a31
 8011a00:	08011a31 	.word	0x08011a31
 8011a04:	08011a2b 	.word	0x08011a2b
 8011a08:	08011a2b 	.word	0x08011a2b
 8011a0c:	08011a2b 	.word	0x08011a2b
 8011a10:	08011a2b 	.word	0x08011a2b
 8011a14:	08011a2b 	.word	0x08011a2b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	60fb      	str	r3, [r7, #12]
        break;
 8011a1c:	e00e      	b.n	8011a3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8011a1e:	2301      	movs	r3, #1
 8011a20:	60fb      	str	r3, [r7, #12]
        break;
 8011a22:	e00b      	b.n	8011a3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8011a24:	2302      	movs	r3, #2
 8011a26:	60fb      	str	r3, [r7, #12]
        break;
 8011a28:	e008      	b.n	8011a3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8011a2a:	2305      	movs	r3, #5
 8011a2c:	60fb      	str	r3, [r7, #12]
        break;
 8011a2e:	e005      	b.n	8011a3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8011a30:	4b05      	ldr	r3, [pc, #20]	; (8011a48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8011a32:	4a06      	ldr	r2, [pc, #24]	; (8011a4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8011a34:	216e      	movs	r1, #110	; 0x6e
 8011a36:	4806      	ldr	r0, [pc, #24]	; (8011a50 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8011a38:	f013 ff0c 	bl	8025854 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3710      	adds	r7, #16
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	bf00      	nop
 8011a48:	080278b0 	.word	0x080278b0
 8011a4c:	080278cc 	.word	0x080278cc
 8011a50:	08027918 	.word	0x08027918

08011a54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011a60:	2300      	movs	r3, #0
 8011a62:	60fb      	str	r3, [r7, #12]

    switch (format)
 8011a64:	78fb      	ldrb	r3, [r7, #3]
 8011a66:	2b0a      	cmp	r3, #10
 8011a68:	d821      	bhi.n	8011aae <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8011a6a:	a201      	add	r2, pc, #4	; (adr r2, 8011a70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8011a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a70:	08011aa9 	.word	0x08011aa9
 8011a74:	08011aa3 	.word	0x08011aa3
 8011a78:	08011a9d 	.word	0x08011a9d
 8011a7c:	08011aaf 	.word	0x08011aaf
 8011a80:	08011aaf 	.word	0x08011aaf
 8011a84:	08011aaf 	.word	0x08011aaf
 8011a88:	08011aaf 	.word	0x08011aaf
 8011a8c:	08011aa3 	.word	0x08011aa3
 8011a90:	08011aa3 	.word	0x08011aa3
 8011a94:	08011aa3 	.word	0x08011aa3
 8011a98:	08011aa3 	.word	0x08011aa3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	60fb      	str	r3, [r7, #12]
        break;
 8011aa0:	e00b      	b.n	8011aba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	60fb      	str	r3, [r7, #12]
        break;
 8011aa6:	e008      	b.n	8011aba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	60fb      	str	r3, [r7, #12]
        break;
 8011aac:	e005      	b.n	8011aba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8011aae:	4b05      	ldr	r3, [pc, #20]	; (8011ac4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8011ab0:	4a05      	ldr	r2, [pc, #20]	; (8011ac8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8011ab2:	218f      	movs	r1, #143	; 0x8f
 8011ab4:	4805      	ldr	r0, [pc, #20]	; (8011acc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8011ab6:	f013 fecd 	bl	8025854 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8011aba:	68fb      	ldr	r3, [r7, #12]
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3710      	adds	r7, #16
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	080278b0 	.word	0x080278b0
 8011ac8:	08027944 	.word	0x08027944
 8011acc:	08027918 	.word	0x08027918

08011ad0 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8011ad8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	370c      	adds	r7, #12
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr

08011ae8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8011ae8:	b590      	push	{r4, r7, lr}
 8011aea:	b089      	sub	sp, #36	; 0x24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	7f5b      	ldrb	r3, [r3, #29]
 8011af6:	4619      	mov	r1, r3
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f7ff ff67 	bl	80119cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011afe:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	7f9b      	ldrb	r3, [r3, #30]
 8011b04:	4619      	mov	r1, r3
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f7ff ff60 	bl	80119cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011b0c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	7f9b      	ldrb	r3, [r3, #30]
 8011b12:	4619      	mov	r1, r3
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f7ff ff9d 	bl	8011a54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011b1a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	8b5b      	ldrh	r3, [r3, #26]
 8011b20:	461a      	mov	r2, r3
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	8a9b      	ldrh	r3, [r3, #20]
 8011b26:	1ad2      	subs	r2, r2, r3
 8011b28:	4b95      	ldr	r3, [pc, #596]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	8b5b      	ldrh	r3, [r3, #26]
 8011b30:	461a      	mov	r2, r3
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	8a9b      	ldrh	r3, [r3, #20]
 8011b36:	1ad2      	subs	r2, r2, r3
 8011b38:	4b91      	ldr	r3, [pc, #580]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011b3a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	8b1b      	ldrh	r3, [r3, #24]
 8011b40:	461a      	mov	r2, r3
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	8a9b      	ldrh	r3, [r3, #20]
 8011b46:	1ad2      	subs	r2, r2, r3
 8011b48:	4b8d      	ldr	r3, [pc, #564]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011b4a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011b4c:	4a8c      	ldr	r2, [pc, #560]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	8adb      	ldrh	r3, [r3, #22]
 8011b56:	461a      	mov	r2, r3
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	8a9b      	ldrh	r3, [r3, #20]
 8011b5c:	041b      	lsls	r3, r3, #16
 8011b5e:	431a      	orrs	r2, r3
 8011b60:	4b87      	ldr	r3, [pc, #540]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011b62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	691a      	ldr	r2, [r3, #16]
 8011b68:	4b85      	ldr	r3, [pc, #532]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	685a      	ldr	r2, [r3, #4]
 8011b70:	4b83      	ldr	r3, [pc, #524]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011b72:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b7c:	d037      	beq.n	8011bee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8011b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b82:	f200 80e8 	bhi.w	8011d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8011b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b8a:	d014      	beq.n	8011bb6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8011b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b90:	f200 80e1 	bhi.w	8011d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8011b94:	2b80      	cmp	r3, #128	; 0x80
 8011b96:	d05b      	beq.n	8011c50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8011b98:	2b80      	cmp	r3, #128	; 0x80
 8011b9a:	f200 80dc 	bhi.w	8011d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8011b9e:	2b40      	cmp	r3, #64	; 0x40
 8011ba0:	f000 80c4 	beq.w	8011d2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8011ba4:	2b40      	cmp	r3, #64	; 0x40
 8011ba6:	f200 80d6 	bhi.w	8011d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8011baa:	2b04      	cmp	r3, #4
 8011bac:	d03b      	beq.n	8011c26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8011bae:	2b20      	cmp	r3, #32
 8011bb0:	f000 80bc 	beq.w	8011d2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8011bb4:	e0cf      	b.n	8011d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	7f1b      	ldrb	r3, [r3, #28]
 8011bba:	061b      	lsls	r3, r3, #24
 8011bbc:	4a70      	ldr	r2, [pc, #448]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011bc2:	f043 030a 	orr.w	r3, r3, #10
 8011bc6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	330c      	adds	r3, #12
 8011bcc:	4c6c      	ldr	r4, [pc, #432]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7fd f9c4 	bl	800ef5c <_ZNK8touchgfx9colortypecvmEv>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011bd8:	4a69      	ldr	r2, [pc, #420]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	691a      	ldr	r2, [r3, #16]
 8011be2:	4b67      	ldr	r3, [pc, #412]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011be4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011be6:	4b66      	ldr	r3, [pc, #408]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011be8:	4a66      	ldr	r2, [pc, #408]	; (8011d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011bea:	601a      	str	r2, [r3, #0]
        break;
 8011bec:	e0d9      	b.n	8011da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	7f1b      	ldrb	r3, [r3, #28]
 8011bf2:	061b      	lsls	r3, r3, #24
 8011bf4:	4a62      	ldr	r2, [pc, #392]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011bfa:	f043 0309 	orr.w	r3, r3, #9
 8011bfe:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	330c      	adds	r3, #12
 8011c04:	4c5e      	ldr	r4, [pc, #376]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fd f9a8 	bl	800ef5c <_ZNK8touchgfx9colortypecvmEv>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c10:	4a5b      	ldr	r2, [pc, #364]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	691a      	ldr	r2, [r3, #16]
 8011c1a:	4b59      	ldr	r3, [pc, #356]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c1c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011c1e:	4b58      	ldr	r3, [pc, #352]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c20:	4a58      	ldr	r2, [pc, #352]	; (8011d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011c22:	601a      	str	r2, [r3, #0]
        break;
 8011c24:	e0bd      	b.n	8011da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	7f1b      	ldrb	r3, [r3, #28]
 8011c2a:	061b      	lsls	r3, r3, #24
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	4313      	orrs	r3, r2
 8011c32:	4a53      	ldr	r2, [pc, #332]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c38:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c3a:	4a51      	ldr	r2, [pc, #324]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	691a      	ldr	r2, [r3, #16]
 8011c44:	4b4e      	ldr	r3, [pc, #312]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c46:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011c48:	4b4d      	ldr	r3, [pc, #308]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c4a:	4a4e      	ldr	r2, [pc, #312]	; (8011d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011c4c:	601a      	str	r2, [r3, #0]
        break;
 8011c4e:	e0a8      	b.n	8011da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8011c50:	2301      	movs	r3, #1
 8011c52:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	1d1a      	adds	r2, r3, #4
 8011c5e:	4b48      	ldr	r3, [pc, #288]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c60:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	7f1b      	ldrb	r3, [r3, #28]
 8011c66:	061b      	lsls	r3, r3, #24
 8011c68:	461a      	mov	r2, r3
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	4a44      	ldr	r2, [pc, #272]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c74:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c76:	4a42      	ldr	r2, [pc, #264]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	691a      	ldr	r2, [r3, #16]
 8011c80:	4b3f      	ldr	r3, [pc, #252]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c82:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	881b      	ldrh	r3, [r3, #0]
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d002      	beq.n	8011c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d00f      	beq.n	8011cb2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8011c92:	e024      	b.n	8011cde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011c94:	4b3a      	ldr	r3, [pc, #232]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c96:	69db      	ldr	r3, [r3, #28]
 8011c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011c9c:	f023 0310 	bic.w	r3, r3, #16
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	8852      	ldrh	r2, [r2, #2]
 8011ca4:	3a01      	subs	r2, #1
 8011ca6:	0212      	lsls	r2, r2, #8
 8011ca8:	4611      	mov	r1, r2
 8011caa:	4a35      	ldr	r2, [pc, #212]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cac:	430b      	orrs	r3, r1
 8011cae:	61d3      	str	r3, [r2, #28]
                break;
 8011cb0:	e01c      	b.n	8011cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	7f1b      	ldrb	r3, [r3, #28]
 8011cb6:	2bff      	cmp	r3, #255	; 0xff
 8011cb8:	d101      	bne.n	8011cbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                    blend = false;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011cbe:	4b30      	ldr	r3, [pc, #192]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cc0:	69db      	ldr	r3, [r3, #28]
 8011cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011cc6:	f023 0310 	bic.w	r3, r3, #16
 8011cca:	68fa      	ldr	r2, [r7, #12]
 8011ccc:	8852      	ldrh	r2, [r2, #2]
 8011cce:	3a01      	subs	r2, #1
 8011cd0:	0212      	lsls	r2, r2, #8
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	4a2a      	ldr	r2, [pc, #168]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cd6:	f043 0310 	orr.w	r3, r3, #16
 8011cda:	61d3      	str	r3, [r2, #28]
                break;
 8011cdc:	e006      	b.n	8011cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8011cde:	4b2a      	ldr	r3, [pc, #168]	; (8011d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8011ce0:	4a2a      	ldr	r2, [pc, #168]	; (8011d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8011ce2:	f240 1119 	movw	r1, #281	; 0x119
 8011ce6:	482a      	ldr	r0, [pc, #168]	; (8011d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8011ce8:	f013 fdb4 	bl	8025854 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8011cec:	4b24      	ldr	r3, [pc, #144]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cee:	69db      	ldr	r3, [r3, #28]
 8011cf0:	4a23      	ldr	r2, [pc, #140]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cf2:	f043 0320 	orr.w	r3, r3, #32
 8011cf6:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8011cf8:	4b21      	ldr	r3, [pc, #132]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cfa:	69db      	ldr	r3, [r3, #28]
 8011cfc:	f003 0320 	and.w	r3, r3, #32
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	bf14      	ite	ne
 8011d04:	2301      	movne	r3, #1
 8011d06:	2300      	moveq	r3, #0
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d000      	beq.n	8011d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8011d0e:	e7f3      	b.n	8011cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8011d10:	4b1b      	ldr	r3, [pc, #108]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d12:	2210      	movs	r2, #16
 8011d14:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8011d16:	7ffb      	ldrb	r3, [r7, #31]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d003      	beq.n	8011d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011d1c:	4b18      	ldr	r3, [pc, #96]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d1e:	4a19      	ldr	r2, [pc, #100]	; (8011d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011d20:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8011d22:	e03e      	b.n	8011da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011d24:	4b16      	ldr	r3, [pc, #88]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d26:	4a1b      	ldr	r2, [pc, #108]	; (8011d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8011d28:	601a      	str	r2, [r3, #0]
        break;
 8011d2a:	e03a      	b.n	8011da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	7f1b      	ldrb	r3, [r3, #28]
 8011d30:	061b      	lsls	r3, r3, #24
 8011d32:	461a      	mov	r2, r3
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	4313      	orrs	r3, r2
 8011d38:	4a11      	ldr	r2, [pc, #68]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d3e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011d40:	4a0f      	ldr	r2, [pc, #60]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	691a      	ldr	r2, [r3, #16]
 8011d4a:	4b0d      	ldr	r3, [pc, #52]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d4c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011d4e:	4b0c      	ldr	r3, [pc, #48]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d50:	4a0c      	ldr	r2, [pc, #48]	; (8011d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011d52:	601a      	str	r2, [r3, #0]
        break;
 8011d54:	e025      	b.n	8011da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	7f1b      	ldrb	r3, [r3, #28]
 8011d5a:	061b      	lsls	r3, r3, #24
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	4313      	orrs	r3, r2
 8011d62:	4a07      	ldr	r2, [pc, #28]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d68:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	7f5a      	ldrb	r2, [r3, #29]
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	7f9b      	ldrb	r3, [r3, #30]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d010      	beq.n	8011d98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011d76:	4b02      	ldr	r3, [pc, #8]	; (8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d78:	4a06      	ldr	r2, [pc, #24]	; (8011d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8011d7a:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8011d7c:	e010      	b.n	8011da0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8011d7e:	bf00      	nop
 8011d80:	4002b000 	.word	0x4002b000
 8011d84:	00020201 	.word	0x00020201
 8011d88:	08027990 	.word	0x08027990
 8011d8c:	080279ac 	.word	0x080279ac
 8011d90:	08027918 	.word	0x08027918
 8011d94:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8011d98:	4b04      	ldr	r3, [pc, #16]	; (8011dac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8011d9a:	f240 2201 	movw	r2, #513	; 0x201
 8011d9e:	601a      	str	r2, [r3, #0]
        break;
 8011da0:	bf00      	nop
    }
}
 8011da2:	bf00      	nop
 8011da4:	3724      	adds	r7, #36	; 0x24
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd90      	pop	{r4, r7, pc}
 8011daa:	bf00      	nop
 8011dac:	4002b000 	.word	0x4002b000

08011db0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8011db0:	b590      	push	{r4, r7, lr}
 8011db2:	b085      	sub	sp, #20
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	7f9b      	ldrb	r3, [r3, #30]
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f7ff fe47 	bl	8011a54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011dc6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011dc8:	4a3b      	ldr	r2, [pc, #236]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	8adb      	ldrh	r3, [r3, #22]
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	8a9b      	ldrh	r3, [r3, #20]
 8011dd8:	041b      	lsls	r3, r3, #16
 8011dda:	431a      	orrs	r2, r3
 8011ddc:	4b36      	ldr	r3, [pc, #216]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011dde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	691a      	ldr	r2, [r3, #16]
 8011de4:	4b34      	ldr	r3, [pc, #208]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011de6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	8b5b      	ldrh	r3, [r3, #26]
 8011dec:	461a      	mov	r2, r3
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	8a9b      	ldrh	r3, [r3, #20]
 8011df2:	1ad2      	subs	r2, r2, r3
 8011df4:	4b30      	ldr	r3, [pc, #192]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011df6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	2b08      	cmp	r3, #8
 8011dfe:	d12f      	bne.n	8011e60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	8b5b      	ldrh	r3, [r3, #26]
 8011e04:	461a      	mov	r2, r3
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	8a9b      	ldrh	r3, [r3, #20]
 8011e0a:	1ad2      	subs	r2, r2, r3
 8011e0c:	4b2a      	ldr	r3, [pc, #168]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e0e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	8b5b      	ldrh	r3, [r3, #26]
 8011e14:	461a      	mov	r2, r3
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	8a9b      	ldrh	r3, [r3, #20]
 8011e1a:	1ad2      	subs	r2, r2, r3
 8011e1c:	4b26      	ldr	r3, [pc, #152]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e1e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011e20:	4a25      	ldr	r2, [pc, #148]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	7f1b      	ldrb	r3, [r3, #28]
 8011e2a:	061b      	lsls	r3, r3, #24
 8011e2c:	4a22      	ldr	r2, [pc, #136]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011e32:	f043 0309 	orr.w	r3, r3, #9
 8011e36:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	330c      	adds	r3, #12
 8011e3c:	4c1e      	ldr	r4, [pc, #120]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fd f88c 	bl	800ef5c <_ZNK8touchgfx9colortypecvmEv>
 8011e44:	4603      	mov	r3, r0
 8011e46:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	691a      	ldr	r2, [r3, #16]
 8011e4c:	4b1a      	ldr	r3, [pc, #104]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e4e:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	691a      	ldr	r2, [r3, #16]
 8011e54:	4b18      	ldr	r3, [pc, #96]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e56:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011e58:	4b17      	ldr	r3, [pc, #92]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e5a:	4a18      	ldr	r2, [pc, #96]	; (8011ebc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8011e5c:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8011e5e:	e027      	b.n	8011eb0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8011e60:	4a15      	ldr	r2, [pc, #84]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8011e66:	4b14      	ldr	r3, [pc, #80]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e68:	2200      	movs	r2, #0
 8011e6a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	330c      	adds	r3, #12
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7fd f873 	bl	800ef5c <_ZNK8touchgfx9colortypecvmEv>
 8011e76:	4603      	mov	r3, r0
 8011e78:	0a1b      	lsrs	r3, r3, #8
 8011e7a:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	330c      	adds	r3, #12
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7fd f86a 	bl	800ef5c <_ZNK8touchgfx9colortypecvmEv>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	095b      	lsrs	r3, r3, #5
 8011e8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8011e90:	431c      	orrs	r4, r3
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	330c      	adds	r3, #12
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7fd f860 	bl	800ef5c <_ZNK8touchgfx9colortypecvmEv>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	08db      	lsrs	r3, r3, #3
 8011ea0:	f003 031f 	and.w	r3, r3, #31
 8011ea4:	4a04      	ldr	r2, [pc, #16]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011ea6:	4323      	orrs	r3, r4
 8011ea8:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8011eaa:	4b03      	ldr	r3, [pc, #12]	; (8011eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011eac:	4a04      	ldr	r2, [pc, #16]	; (8011ec0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8011eae:	601a      	str	r2, [r3, #0]
}
 8011eb0:	bf00      	nop
 8011eb2:	3714      	adds	r7, #20
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd90      	pop	{r4, r7, pc}
 8011eb8:	4002b000 	.word	0x4002b000
 8011ebc:	00020201 	.word	0x00020201
 8011ec0:	00030201 	.word	0x00030201

08011ec4 <_ZN8touchgfx5paint6rgb5658tearDownEv>:
    * @fn void tearDown();
    *
    * @brief Waits until previous DMA drawing operation has finished
    */
    void tearDown()
    {
 8011ec4:	b480      	push	{r7}
 8011ec6:	af00      	add	r7, sp, #0
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8011ec8:	4b09      	ldr	r3, [pc, #36]	; (8011ef0 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f003 0301 	and.w	r3, r3, #1
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	bf14      	ite	ne
 8011ed4:	2301      	movne	r3, #1
 8011ed6:	2300      	moveq	r3, #0
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d000      	beq.n	8011ee0 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x1c>
 8011ede:	e7f3      	b.n	8011ec8 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x4>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8011ee0:	4b03      	ldr	r3, [pc, #12]	; (8011ef0 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 8011ee2:	2223      	movs	r2, #35	; 0x23
 8011ee4:	609a      	str	r2, [r3, #8]
    }
 8011ee6:	bf00      	nop
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr
 8011ef0:	4002b000 	.word	0x4002b000

08011ef4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
    *
    * @brief Renders Canvas Widget chunks using DMA.
    * This functions will not generate an interrupt, and will not affect the DMA queue.
    */
    void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
    {
 8011ef4:	b480      	push	{r7}
 8011ef6:	b085      	sub	sp, #20
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	60f8      	str	r0, [r7, #12]
 8011efc:	60b9      	str	r1, [r7, #8]
 8011efe:	607a      	str	r2, [r7, #4]
 8011f00:	70fb      	strb	r3, [r7, #3]
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8011f02:	4b22      	ldr	r3, [pc, #136]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f003 0301 	and.w	r3, r3, #1
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	bf14      	ite	ne
 8011f0e:	2301      	movne	r3, #1
 8011f10:	2300      	moveq	r3, #0
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d000      	beq.n	8011f1a <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x26>
 8011f18:	e7f3      	b.n	8011f02 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xe>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8011f1a:	4b1c      	ldr	r3, [pc, #112]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f1c:	2223      	movs	r2, #35	; 0x23
 8011f1e:	609a      	str	r2, [r3, #8]

        /* DMA2D OPFCCR register configuration */
        WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8011f20:	4b1a      	ldr	r3, [pc, #104]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f22:	2202      	movs	r2, #2
 8011f24:	635a      	str	r2, [r3, #52]	; 0x34

        /* Configure DMA2D data size */
        WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	041b      	lsls	r3, r3, #16
 8011f2a:	4a18      	ldr	r2, [pc, #96]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f2c:	f043 0301 	orr.w	r3, r3, #1
 8011f30:	6453      	str	r3, [r2, #68]	; 0x44

        /* Configure DMA2D destination address */
        WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8011f32:	4a16      	ldr	r2, [pc, #88]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	63d3      	str	r3, [r2, #60]	; 0x3c

        if (alpha < 0xFF)
 8011f38:	78fb      	ldrb	r3, [r7, #3]
 8011f3a:	2bff      	cmp	r3, #255	; 0xff
 8011f3c:	d017      	beq.n	8011f6e <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
        {
            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011f3e:	4b13      	ldr	r3, [pc, #76]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f40:	2202      	movs	r2, #2
 8011f42:	625a      	str	r2, [r3, #36]	; 0x24

            /* Write DMA2D FGPFCCR register */
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8011f44:	78fb      	ldrb	r3, [r7, #3]
 8011f46:	061b      	lsls	r3, r3, #24
 8011f48:	4a10      	ldr	r2, [pc, #64]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011f4e:	f043 0309 	orr.w	r3, r3, #9
 8011f52:	61d3      	str	r3, [r2, #28]

            /* DMA2D FGCOLR register configuration */
            WRITE_REG(DMA2D->FGCOLR, color);
 8011f54:	4a0d      	ldr	r2, [pc, #52]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6213      	str	r3, [r2, #32]

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8011f5a:	4a0c      	ldr	r2, [pc, #48]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	6153      	str	r3, [r2, #20]

            /* Configure DMA2D source address */
            WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8011f60:	4a0a      	ldr	r2, [pc, #40]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	60d3      	str	r3, [r2, #12]

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011f66:	4b09      	ldr	r3, [pc, #36]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f68:	4a09      	ldr	r2, [pc, #36]	; (8011f90 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 8011f6a:	601a      	str	r2, [r3, #0]
            WRITE_REG(DMA2D->OCOLR, color565);

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
        }
    }
 8011f6c:	e008      	b.n	8011f80 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8011f6e:	4b07      	ldr	r3, [pc, #28]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f70:	2202      	movs	r2, #2
 8011f72:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->OCOLR, color565);
 8011f74:	4a05      	ldr	r2, [pc, #20]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f76:	69bb      	ldr	r3, [r7, #24]
 8011f78:	6393      	str	r3, [r2, #56]	; 0x38
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8011f7a:	4b04      	ldr	r3, [pc, #16]	; (8011f8c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f7c:	4a05      	ldr	r2, [pc, #20]	; (8011f94 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 8011f7e:	601a      	str	r2, [r3, #0]
    }
 8011f80:	bf00      	nop
 8011f82:	3714      	adds	r7, #20
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr
 8011f8c:	4002b000 	.word	0x4002b000
 8011f90:	00020001 	.word	0x00020001
 8011f94:	00030001 	.word	0x00030001

08011f98 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	4a05      	ldr	r2, [pc, #20]	; (8011fb8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	601a      	str	r2, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7ff fbbd 	bl	8011728 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3708      	adds	r7, #8
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	08028644 	.word	0x08028644

08011fbc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f7ff ffe7 	bl	8011f98 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011fca:	2114      	movs	r1, #20
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f013 fc15 	bl	80257fc <_ZdlPvj>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3708      	adds	r7, #8
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}

08011fdc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8011fe4:	4a04      	ldr	r2, [pc, #16]	; (8011ff8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6013      	str	r3, [r2, #0]
    }
 8011fea:	bf00      	nop
 8011fec:	370c      	adds	r7, #12
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr
 8011ff6:	bf00      	nop
 8011ff8:	2004f694 	.word	0x2004f694

08011ffc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011ffc:	b480      	push	{r7}
 8011ffe:	b085      	sub	sp, #20
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	607a      	str	r2, [r7, #4]
 8012008:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801200a:	4a0b      	ldr	r2, [pc, #44]	; (8012038 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	601a      	str	r2, [r3, #0]
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	68ba      	ldr	r2, [r7, #8]
 8012014:	605a      	str	r2, [r3, #4]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	609a      	str	r2, [r3, #8]
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	683a      	ldr	r2, [r7, #0]
 8012020:	60da      	str	r2, [r3, #12]
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	69ba      	ldr	r2, [r7, #24]
 8012026:	611a      	str	r2, [r3, #16]
    {
    }
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	4618      	mov	r0, r3
 801202c:	3714      	adds	r7, #20
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr
 8012036:	bf00      	nop
 8012038:	08028364 	.word	0x08028364

0801203c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 801203c:	b480      	push	{r7}
 801203e:	b083      	sub	sp, #12
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
    {
 8012044:	4a04      	ldr	r2, [pc, #16]	; (8012058 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	601a      	str	r2, [r3, #0]
    }
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	4618      	mov	r0, r3
 801204e:	370c      	adds	r7, #12
 8012050:	46bd      	mov	sp, r7
 8012052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012056:	4770      	bx	lr
 8012058:	08028364 	.word	0x08028364

0801205c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
    }
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f7ff ffe9 	bl	801203c <_ZN8touchgfx7MVPHeapD1Ev>
 801206a:	2114      	movs	r1, #20
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f013 fbc5 	bl	80257fc <_ZdlPvj>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	4618      	mov	r0, r3
 8012076:	3708      	adds	r7, #8
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
    {
 8012084:	4a04      	ldr	r2, [pc, #16]	; (8012098 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	601a      	str	r2, [r3, #0]
    }
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	370c      	adds	r7, #12
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr
 8012098:	08028a40 	.word	0x08028a40

0801209c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801209c:	b580      	push	{r7, lr}
 801209e:	b082      	sub	sp, #8
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
    }
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f7ff ffe9 	bl	801207c <_ZN8touchgfx3LCDD1Ev>
 80120aa:	2108      	movs	r1, #8
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f013 fba5 	bl	80257fc <_ZdlPvj>
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	4618      	mov	r0, r3
 80120b6:	3708      	adds	r7, #8
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80120bc:	b480      	push	{r7}
 80120be:	b083      	sub	sp, #12
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	801a      	strh	r2, [r3, #0]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2200      	movs	r2, #0
 80120ce:	805a      	strh	r2, [r3, #2]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2200      	movs	r2, #0
 80120d4:	809a      	strh	r2, [r3, #4]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2200      	movs	r2, #0
 80120da:	80da      	strh	r2, [r3, #6]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2200      	movs	r2, #0
 80120e0:	811a      	strh	r2, [r3, #8]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2200      	movs	r2, #0
 80120e6:	815a      	strh	r2, [r3, #10]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	819a      	strh	r2, [r3, #12]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	739a      	strb	r2, [r3, #14]
        {
        }
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	4618      	mov	r0, r3
 80120f8:	370c      	adds	r7, #12
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr

08012102 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8012102:	b580      	push	{r7, lr}
 8012104:	b082      	sub	sp, #8
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	4618      	mov	r0, r3
 801210e:	f7ff ffd5 	bl	80120bc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2200      	movs	r2, #0
 8012116:	611a      	str	r2, [r3, #16]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	829a      	strh	r2, [r3, #20]
    {
    }
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4618      	mov	r0, r3
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
 8012134:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8012136:	4a55      	ldr	r2, [pc, #340]	; (801228c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	68ba      	ldr	r2, [r7, #8]
 8012140:	605a      	str	r2, [r3, #4]
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	609a      	str	r2, [r3, #8]
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	683a      	ldr	r2, [r7, #0]
 801214c:	60da      	str	r2, [r3, #12]
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2200      	movs	r2, #0
 8012152:	611a      	str	r2, [r3, #16]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2200      	movs	r2, #0
 8012158:	615a      	str	r2, [r3, #20]
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2200      	movs	r2, #0
 801215e:	619a      	str	r2, [r3, #24]
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	331c      	adds	r3, #28
 8012164:	4618      	mov	r0, r3
 8012166:	f7ff ffcc 	bl	8012102 <_ZN8touchgfx8GesturesC1Ev>
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2200      	movs	r2, #0
 801216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	2200      	movs	r2, #0
 8012176:	639a      	str	r2, [r3, #56]	; 0x38
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2200      	movs	r2, #0
 801217c:	63da      	str	r2, [r3, #60]	; 0x3c
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2200      	movs	r2, #0
 8012182:	641a      	str	r2, [r3, #64]	; 0x40
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2200      	movs	r2, #0
 8012188:	645a      	str	r2, [r3, #68]	; 0x44
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	2200      	movs	r2, #0
 801218e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2201      	movs	r2, #1
 8012196:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	2200      	movs	r2, #0
 801219e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	2200      	movs	r2, #0
 80121a6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2200      	movs	r2, #0
 80121ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	3350      	adds	r3, #80	; 0x50
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7fc fedd 	bl	800ef74 <_ZN8touchgfx4RectC1Ev>
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2200      	movs	r2, #0
 80121be:	659a      	str	r2, [r3, #88]	; 0x58
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	2200      	movs	r2, #0
 80121c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2200      	movs	r2, #0
 80121ca:	661a      	str	r2, [r3, #96]	; 0x60
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2201      	movs	r2, #1
 80121d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2200      	movs	r2, #0
 80121d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2200      	movs	r2, #0
 80121e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2201      	movs	r2, #1
 80121e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2200      	movs	r2, #0
 80121f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	2200      	movs	r2, #0
 80121f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2200      	movs	r2, #0
 8012200:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2200      	movs	r2, #0
 8012208:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2200      	movs	r2, #0
 8012210:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	2200      	movs	r2, #0
 8012218:	671a      	str	r2, [r3, #112]	; 0x70
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2200      	movs	r2, #0
 801221e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	2200      	movs	r2, #0
 8012226:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2200      	movs	r2, #0
 801222e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2201      	movs	r2, #1
 8012236:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	2201      	movs	r2, #1
 801223e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8012242:	4a13      	ldr	r2, [pc, #76]	; (8012290 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8012248:	4a12      	ldr	r2, [pc, #72]	; (8012294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801224a:	8b3b      	ldrh	r3, [r7, #24]
 801224c:	8013      	strh	r3, [r2, #0]
 801224e:	4b11      	ldr	r3, [pc, #68]	; (8012294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8012250:	881a      	ldrh	r2, [r3, #0]
 8012252:	4b11      	ldr	r3, [pc, #68]	; (8012298 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8012254:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8012256:	4a11      	ldr	r2, [pc, #68]	; (801229c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8012258:	8bbb      	ldrh	r3, [r7, #28]
 801225a:	8013      	strh	r3, [r2, #0]
 801225c:	4b0f      	ldr	r3, [pc, #60]	; (801229c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801225e:	881a      	ldrh	r2, [r3, #0]
 8012260:	4b0f      	ldr	r3, [pc, #60]	; (80122a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8012262:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8012264:	4b0f      	ldr	r3, [pc, #60]	; (80122a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8012266:	2200      	movs	r2, #0
 8012268:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801226a:	8b3a      	ldrh	r2, [r7, #24]
 801226c:	8bbb      	ldrh	r3, [r7, #28]
 801226e:	429a      	cmp	r2, r3
 8012270:	bf34      	ite	cc
 8012272:	2301      	movcc	r3, #1
 8012274:	2300      	movcs	r3, #0
 8012276:	b2db      	uxtb	r3, r3
 8012278:	461a      	mov	r2, r3
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	4618      	mov	r0, r3
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	0802851c 	.word	0x0802851c
 8012290:	2004f630 	.word	0x2004f630
 8012294:	2004f624 	.word	0x2004f624
 8012298:	2004f62a 	.word	0x2004f62a
 801229c:	2004f626 	.word	0x2004f626
 80122a0:	2004f62c 	.word	0x2004f62c
 80122a4:	2004f628 	.word	0x2004f628

080122a8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7fb fde7 	bl	800de88 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80122ba:	bf00      	nop
 80122bc:	3708      	adds	r7, #8
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
	...

080122c4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b086      	sub	sp, #24
 80122c8:	af02      	add	r7, sp, #8
 80122ca:	60f8      	str	r0, [r7, #12]
 80122cc:	60b9      	str	r1, [r7, #8]
 80122ce:	607a      	str	r2, [r7, #4]
 80122d0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80122d2:	68f8      	ldr	r0, [r7, #12]
 80122d4:	69bb      	ldr	r3, [r7, #24]
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	68b9      	ldr	r1, [r7, #8]
 80122de:	f7ff fe8d 	bl	8011ffc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80122e2:	4a04      	ldr	r2, [pc, #16]	; (80122f4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	601a      	str	r2, [r3, #0]
    {

    }
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	4618      	mov	r0, r3
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	08028350 	.word	0x08028350

080122f8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80122f8:	b580      	push	{r7, lr}
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	4801      	ldr	r0, [pc, #4]	; (8012304 <__tcf_0+0xc>)
 80122fe:	f000 f96d 	bl	80125dc <_ZN12FrontendHeapD1Ev>
 8012302:	bd80      	pop	{r7, pc}
 8012304:	2004d55c 	.word	0x2004d55c

08012308 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012308:	b580      	push	{r7, lr}
 801230a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801230c:	4b11      	ldr	r3, [pc, #68]	; (8012354 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801230e:	e8d3 3f8f 	ldab	r3, [r3]
 8012312:	b2db      	uxtb	r3, r3
 8012314:	f003 0301 	and.w	r3, r3, #1
 8012318:	2b00      	cmp	r3, #0
 801231a:	bf0c      	ite	eq
 801231c:	2301      	moveq	r3, #1
 801231e:	2300      	movne	r3, #0
 8012320:	b2db      	uxtb	r3, r3
 8012322:	2b00      	cmp	r3, #0
 8012324:	d013      	beq.n	801234e <_ZN12FrontendHeap11getInstanceEv+0x46>
 8012326:	480b      	ldr	r0, [pc, #44]	; (8012354 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012328:	f013 fa6a 	bl	8025800 <__cxa_guard_acquire>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	bf14      	ite	ne
 8012332:	2301      	movne	r3, #1
 8012334:	2300      	moveq	r3, #0
 8012336:	b2db      	uxtb	r3, r3
 8012338:	2b00      	cmp	r3, #0
 801233a:	d008      	beq.n	801234e <_ZN12FrontendHeap11getInstanceEv+0x46>
 801233c:	4806      	ldr	r0, [pc, #24]	; (8012358 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801233e:	f000 f867 	bl	8012410 <_ZN12FrontendHeapC1Ev>
 8012342:	4806      	ldr	r0, [pc, #24]	; (801235c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012344:	f013 faa4 	bl	8025890 <atexit>
 8012348:	4802      	ldr	r0, [pc, #8]	; (8012354 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801234a:	f013 fa65 	bl	8025818 <__cxa_guard_release>
        return instance;
 801234e:	4b02      	ldr	r3, [pc, #8]	; (8012358 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8012350:	4618      	mov	r0, r3
 8012352:	bd80      	pop	{r7, pc}
 8012354:	2004e784 	.word	0x2004e784
 8012358:	2004d55c 	.word	0x2004d55c
 801235c:	080122f9 	.word	0x080122f9

08012360 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012360:	b580      	push	{r7, lr}
 8012362:	b082      	sub	sp, #8
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	4a05      	ldr	r2, [pc, #20]	; (8012380 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	601a      	str	r2, [r3, #0]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	4618      	mov	r0, r3
 8012372:	f7ff fe63 	bl	801203c <_ZN8touchgfx7MVPHeapD1Ev>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4618      	mov	r0, r3
 801237a:	3708      	adds	r7, #8
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	08028350 	.word	0x08028350

08012384 <_ZN16FrontendHeapBaseD0Ev>:
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7ff ffe7 	bl	8012360 <_ZN16FrontendHeapBaseD1Ev>
 8012392:	2114      	movs	r1, #20
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f013 fa31 	bl	80257fc <_ZdlPvj>
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	4618      	mov	r0, r3
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f000 fc16 	bl	8012be0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80123b4:	4a03      	ldr	r2, [pc, #12]	; (80123c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	601a      	str	r2, [r3, #0]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	4618      	mov	r0, r3
 80123be:	3708      	adds	r7, #8
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}
 80123c4:	0802831c 	.word	0x0802831c

080123c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f000 fc04 	bl	8012be0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80123d8:	4a03      	ldr	r2, [pc, #12]	; (80123e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	601a      	str	r2, [r3, #0]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4618      	mov	r0, r3
 80123e2:	3708      	adds	r7, #8
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	080282e8 	.word	0x080282e8

080123ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f000 fbf2 	bl	8012be0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80123fc:	4a03      	ldr	r2, [pc, #12]	; (801240c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	601a      	str	r2, [r3, #0]
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	4618      	mov	r0, r3
 8012406:	3708      	adds	r7, #8
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}
 801240c:	080282b4 	.word	0x080282b4

08012410 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012410:	b590      	push	{r4, r7, lr}
 8012412:	b085      	sub	sp, #20
 8012414:	af02      	add	r7, sp, #8
 8012416:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f103 0114 	add.w	r1, r3, #20
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f503 5283 	add.w	r2, r3, #4192	; 0x1060
 801242c:	3210      	adds	r2, #16
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012434:	3310      	adds	r3, #16
                     app(model, *this)
 8012436:	9300      	str	r3, [sp, #0]
 8012438:	4613      	mov	r3, r2
 801243a:	4622      	mov	r2, r4
 801243c:	f7ff ff42 	bl	80122c4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012440:	4a1a      	ldr	r2, [pc, #104]	; (80124ac <_ZN12FrontendHeapC1Ev+0x9c>)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	3314      	adds	r3, #20
 801244a:	4618      	mov	r0, r3
 801244c:	f7ff ffaa 	bl	80123a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	332c      	adds	r3, #44	; 0x2c
 8012454:	4618      	mov	r0, r3
 8012456:	f7ff ffb7 	bl	80123c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8012460:	3310      	adds	r3, #16
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff ffc2 	bl	80123ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801246e:	330c      	adds	r3, #12
 8012470:	4618      	mov	r0, r3
 8012472:	f7fe fa45 	bl	8010900 <_ZN5ModelC1Ev>
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801247c:	3310      	adds	r3, #16
 801247e:	687a      	ldr	r2, [r7, #4]
 8012480:	f502 5186 	add.w	r1, r2, #4288	; 0x10c0
 8012484:	310c      	adds	r1, #12
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	4618      	mov	r0, r3
 801248a:	f7fe fa23 	bl	80108d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012496:	3310      	adds	r3, #16
 8012498:	4619      	mov	r1, r3
 801249a:	4610      	mov	r0, r2
 801249c:	f7ff ff04 	bl	80122a8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	4618      	mov	r0, r3
 80124a4:	370c      	adds	r7, #12
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd90      	pop	{r4, r7, pc}
 80124aa:	bf00      	nop
 80124ac:	080282a0 	.word	0x080282a0

080124b0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b086      	sub	sp, #24
 80124b4:	af02      	add	r7, sp, #8
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	607a      	str	r2, [r7, #4]
 80124bc:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	8bbb      	ldrh	r3, [r7, #28]
 80124c2:	9301      	str	r3, [sp, #4]
 80124c4:	8b3b      	ldrh	r3, [r7, #24]
 80124c6:	9300      	str	r3, [sp, #0]
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	687a      	ldr	r2, [r7, #4]
 80124cc:	68b9      	ldr	r1, [r7, #8]
 80124ce:	f7ff fe2b 	bl	8012128 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80124d2:	4a04      	ldr	r2, [pc, #16]	; (80124e4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	601a      	str	r2, [r3, #0]
    }
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	4618      	mov	r0, r3
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	08028374 	.word	0x08028374

080124e8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
 80124f4:	603b      	str	r3, [r7, #0]
 80124f6:	68f8      	ldr	r0, [r7, #12]
 80124f8:	8bbb      	ldrh	r3, [r7, #28]
 80124fa:	9301      	str	r3, [sp, #4]
 80124fc:	8b3b      	ldrh	r3, [r7, #24]
 80124fe:	9300      	str	r3, [sp, #0]
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	687a      	ldr	r2, [r7, #4]
 8012504:	68b9      	ldr	r1, [r7, #8]
 8012506:	f7ff ffd3 	bl	80124b0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801250a:	4a04      	ldr	r2, [pc, #16]	; (801251c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	601a      	str	r2, [r3, #0]
    }
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	4618      	mov	r0, r3
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	08028150 	.word	0x08028150

08012520 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8012520:	b480      	push	{r7}
 8012522:	b083      	sub	sp, #12
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	4a04      	ldr	r2, [pc, #16]	; (801253c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	601a      	str	r2, [r3, #0]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	4618      	mov	r0, r3
 8012532:	370c      	adds	r7, #12
 8012534:	46bd      	mov	sp, r7
 8012536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253a:	4770      	bx	lr
 801253c:	08028138 	.word	0x08028138

08012540 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8012540:	b580      	push	{r7, lr}
 8012542:	b082      	sub	sp, #8
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	4618      	mov	r0, r3
 801254c:	f7ff ffe8 	bl	8012520 <_ZN8touchgfx15TouchControllerC1Ev>
 8012550:	4a03      	ldr	r2, [pc, #12]	; (8012560 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	601a      	str	r2, [r3, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	4618      	mov	r0, r3
 801255a:	3708      	adds	r7, #8
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}
 8012560:	08028120 	.word	0x08028120

08012564 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8012564:	b590      	push	{r4, r7, lr}
 8012566:	b085      	sub	sp, #20
 8012568:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801256a:	f7fd ffb5 	bl	80104d8 <_ZN14BitmapDatabase11getInstanceEv>
 801256e:	4604      	mov	r4, r0
 8012570:	f7fd ffbc 	bl	80104ec <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012574:	4603      	mov	r3, r0
 8012576:	4619      	mov	r1, r3
 8012578:	2300      	movs	r3, #0
 801257a:	9300      	str	r3, [sp, #0]
 801257c:	2300      	movs	r3, #0
 801257e:	2200      	movs	r2, #0
 8012580:	4620      	mov	r0, r4
 8012582:	f007 f867 	bl	8019654 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8012586:	4809      	ldr	r0, [pc, #36]	; (80125ac <touchgfx_init+0x48>)
 8012588:	f7ff fd28 	bl	8011fdc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801258c:	2000      	movs	r0, #0
 801258e:	f7fe f8d9 	bl	8010744 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8012592:	4807      	ldr	r0, [pc, #28]	; (80125b0 <touchgfx_init+0x4c>)
 8012594:	f006 ffc6 	bl	8019524 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8012598:	f7ff feb6 	bl	8012308 <_ZN12FrontendHeap11getInstanceEv>
 801259c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801259e:	4805      	ldr	r0, [pc, #20]	; (80125b4 <touchgfx_init+0x50>)
 80125a0:	f7fe fe24 	bl	80111ec <_ZN11TouchGFXHAL10initializeEv>
}
 80125a4:	bf00      	nop
 80125a6:	370c      	adds	r7, #12
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd90      	pop	{r4, r7, pc}
 80125ac:	2004f5a4 	.word	0x2004f5a4
 80125b0:	2002581c 	.word	0x2002581c
 80125b4:	2004f5a8 	.word	0x2004f5a8

080125b8 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80125b8:	b480      	push	{r7}
 80125ba:	af00      	add	r7, sp, #0
}
 80125bc:	bf00      	nop
 80125be:	46bd      	mov	sp, r7
 80125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c4:	4770      	bx	lr
	...

080125c8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80125cc:	4802      	ldr	r0, [pc, #8]	; (80125d8 <touchgfx_taskEntry+0x10>)
 80125ce:	f000 fe16 	bl	80131fe <_ZN8touchgfx3HAL9taskEntryEv>
}
 80125d2:	bf00      	nop
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	2004f5a8 	.word	0x2004f5a8

080125dc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	4a11      	ldr	r2, [pc, #68]	; (801262c <_ZN12FrontendHeapD1Ev+0x50>)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	601a      	str	r2, [r3, #0]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80125f0:	3310      	adds	r3, #16
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7fe f938 	bl	8010868 <_ZN19FrontendApplicationD1Ev>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80125fe:	3310      	adds	r3, #16
 8012600:	4618      	mov	r0, r3
 8012602:	f000 f827 	bl	8012654 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	332c      	adds	r3, #44	; 0x2c
 801260a:	4618      	mov	r0, r3
 801260c:	f000 f844 	bl	8012698 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	3314      	adds	r3, #20
 8012614:	4618      	mov	r0, r3
 8012616:	f000 f863 	bl	80126e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	4618      	mov	r0, r3
 801261e:	f7ff fe9f 	bl	8012360 <_ZN16FrontendHeapBaseD1Ev>
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	4618      	mov	r0, r3
 8012626:	3708      	adds	r7, #8
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	080282a0 	.word	0x080282a0

08012630 <_ZN12FrontendHeapD0Ev>:
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f7ff ffcf 	bl	80125dc <_ZN12FrontendHeapD1Ev>
 801263e:	f241 2128 	movw	r1, #4648	; 0x1228
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f013 f8da 	bl	80257fc <_ZdlPvj>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	4618      	mov	r0, r3
 801264c:	3708      	adds	r7, #8
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
	...

08012654 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	4a05      	ldr	r2, [pc, #20]	; (8012674 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	601a      	str	r2, [r3, #0]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	4618      	mov	r0, r3
 8012666:	f000 fab9 	bl	8012bdc <_ZN8touchgfx17AbstractPartitionD1Ev>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	4618      	mov	r0, r3
 801266e:	3708      	adds	r7, #8
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	080282b4 	.word	0x080282b4

08012678 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f7ff ffe7 	bl	8012654 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8012686:	215c      	movs	r1, #92	; 0x5c
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f013 f8b7 	bl	80257fc <_ZdlPvj>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4618      	mov	r0, r3
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	4a05      	ldr	r2, [pc, #20]	; (80126b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	601a      	str	r2, [r3, #0]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f000 fa97 	bl	8012bdc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	4618      	mov	r0, r3
 80126b2:	3708      	adds	r7, #8
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	080282e8 	.word	0x080282e8

080126bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f7ff ffe7 	bl	8012698 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80126ca:	f241 0144 	movw	r1, #4164	; 0x1044
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f013 f894 	bl	80257fc <_ZdlPvj>
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	4618      	mov	r0, r3
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
	...

080126e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	4a05      	ldr	r2, [pc, #20]	; (8012700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	601a      	str	r2, [r3, #0]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	f000 fa73 	bl	8012bdc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	4618      	mov	r0, r3
 80126fa:	3708      	adds	r7, #8
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}
 8012700:	0802831c 	.word	0x0802831c

08012704 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012704:	b580      	push	{r7, lr}
 8012706:	b082      	sub	sp, #8
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7ff ffe7 	bl	80126e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012712:	2118      	movs	r1, #24
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f013 f871 	bl	80257fc <_ZdlPvj>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4618      	mov	r0, r3
 801271e:	3708      	adds	r7, #8
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}

08012724 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	4a05      	ldr	r2, [pc, #20]	; (8012744 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	601a      	str	r2, [r3, #0]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff fca1 	bl	801207c <_ZN8touchgfx3LCDD1Ev>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}
 8012744:	08028e44 	.word	0x08028e44

08012748 <_ZN8touchgfx8LCD16bppD0Ev>:
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f7ff ffe7 	bl	8012724 <_ZN8touchgfx8LCD16bppD1Ev>
 8012756:	2178      	movs	r1, #120	; 0x78
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f013 f84f 	bl	80257fc <_ZdlPvj>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	4618      	mov	r0, r3
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <_Z41__static_initialization_and_destruction_0ii>:
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af02      	add	r7, sp, #8
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	6039      	str	r1, [r7, #0]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d118      	bne.n	80127aa <_Z41__static_initialization_and_destruction_0ii+0x42>
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801277e:	4293      	cmp	r3, r2
 8012780:	d113      	bne.n	80127aa <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 8012782:	4817      	ldr	r0, [pc, #92]	; (80127e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8012784:	f7ff fedc 	bl	8012540 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8012788:	4816      	ldr	r0, [pc, #88]	; (80127e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801278a:	f7ff f89b 	bl	80118c4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801278e:	4816      	ldr	r0, [pc, #88]	; (80127e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012790:	f00a f860 	bl	801c854 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 8012794:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8012798:	9301      	str	r3, [sp, #4]
 801279a:	23f0      	movs	r3, #240	; 0xf0
 801279c:	9300      	str	r3, [sp, #0]
 801279e:	4b10      	ldr	r3, [pc, #64]	; (80127e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80127a0:	4a11      	ldr	r2, [pc, #68]	; (80127e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80127a2:	4910      	ldr	r1, [pc, #64]	; (80127e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80127a4:	4811      	ldr	r0, [pc, #68]	; (80127ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80127a6:	f7ff fe9f 	bl	80124e8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d113      	bne.n	80127d8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d10e      	bne.n	80127d8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80127ba:	480c      	ldr	r0, [pc, #48]	; (80127ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80127bc:	f7fe fe3a 	bl	8011434 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80127c0:	480b      	ldr	r0, [pc, #44]	; (80127f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80127c2:	f7fa fb23 	bl	800ce0c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80127c6:	4808      	ldr	r0, [pc, #32]	; (80127e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80127c8:	f7ff ffac 	bl	8012724 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80127cc:	4805      	ldr	r0, [pc, #20]	; (80127e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80127ce:	f7ff f8a3 	bl	8011918 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80127d2:	4803      	ldr	r0, [pc, #12]	; (80127e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80127d4:	f7fe fac6 	bl	8010d64 <_ZN20STM32TouchControllerD1Ev>
}
 80127d8:	bf00      	nop
 80127da:	3708      	adds	r7, #8
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}
 80127e0:	2004e788 	.word	0x2004e788
 80127e4:	2004e78c 	.word	0x2004e78c
 80127e8:	2004f52c 	.word	0x2004f52c
 80127ec:	2004f5a8 	.word	0x2004f5a8
 80127f0:	2002581c 	.word	0x2002581c

080127f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80127fc:	2301      	movs	r3, #1
    }
 80127fe:	4618      	mov	r0, r3
 8012800:	370c      	adds	r7, #12
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr

0801280a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 801280a:	b480      	push	{r7}
 801280c:	b083      	sub	sp, #12
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8012812:	2354      	movs	r3, #84	; 0x54
    }
 8012814:	4618      	mov	r0, r3
 8012816:	370c      	adds	r7, #12
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr

08012820 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	460b      	mov	r3, r1
 801282a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801282c:	887b      	ldrh	r3, [r7, #2]
 801282e:	2254      	movs	r2, #84	; 0x54
 8012830:	fb02 f303 	mul.w	r3, r2, r3
 8012834:	3308      	adds	r3, #8
 8012836:	687a      	ldr	r2, [r7, #4]
 8012838:	4413      	add	r3, r2
    }
 801283a:	4618      	mov	r0, r3
 801283c:	370c      	adds	r7, #12
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr

08012846 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8012846:	b480      	push	{r7}
 8012848:	b083      	sub	sp, #12
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	460b      	mov	r3, r1
 8012850:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012852:	887b      	ldrh	r3, [r7, #2]
 8012854:	2254      	movs	r2, #84	; 0x54
 8012856:	fb02 f303 	mul.w	r3, r2, r3
 801285a:	3308      	adds	r3, #8
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	4413      	add	r3, r2
    }
 8012860:	4618      	mov	r0, r3
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr

0801286c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801286c:	b480      	push	{r7}
 801286e:	b083      	sub	sp, #12
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012874:	2301      	movs	r3, #1
    }
 8012876:	4618      	mov	r0, r3
 8012878:	370c      	adds	r7, #12
 801287a:	46bd      	mov	sp, r7
 801287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012880:	4770      	bx	lr

08012882 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012882:	b480      	push	{r7}
 8012884:	b083      	sub	sp, #12
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801288a:	f241 033c 	movw	r3, #4156	; 0x103c
    }
 801288e:	4618      	mov	r0, r3
 8012890:	370c      	adds	r7, #12
 8012892:	46bd      	mov	sp, r7
 8012894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012898:	4770      	bx	lr

0801289a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801289a:	b480      	push	{r7}
 801289c:	b083      	sub	sp, #12
 801289e:	af00      	add	r7, sp, #0
 80128a0:	6078      	str	r0, [r7, #4]
 80128a2:	460b      	mov	r3, r1
 80128a4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80128a6:	887b      	ldrh	r3, [r7, #2]
 80128a8:	f241 023c 	movw	r2, #4156	; 0x103c
 80128ac:	fb02 f303 	mul.w	r3, r2, r3
 80128b0:	3308      	adds	r3, #8
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	4413      	add	r3, r2
    }
 80128b6:	4618      	mov	r0, r3
 80128b8:	370c      	adds	r7, #12
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr

080128c2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80128c2:	b480      	push	{r7}
 80128c4:	b083      	sub	sp, #12
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
 80128ca:	460b      	mov	r3, r1
 80128cc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80128ce:	887b      	ldrh	r3, [r7, #2]
 80128d0:	f241 023c 	movw	r2, #4156	; 0x103c
 80128d4:	fb02 f303 	mul.w	r3, r2, r3
 80128d8:	3308      	adds	r3, #8
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	4413      	add	r3, r2
    }
 80128de:	4618      	mov	r0, r3
 80128e0:	370c      	adds	r7, #12
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr

080128ea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80128ea:	b480      	push	{r7}
 80128ec:	b083      	sub	sp, #12
 80128ee:	af00      	add	r7, sp, #0
 80128f0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80128f2:	2301      	movs	r3, #1
    }
 80128f4:	4618      	mov	r0, r3
 80128f6:	370c      	adds	r7, #12
 80128f8:	46bd      	mov	sp, r7
 80128fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fe:	4770      	bx	lr

08012900 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012900:	b480      	push	{r7}
 8012902:	b083      	sub	sp, #12
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012908:	2310      	movs	r3, #16
    }
 801290a:	4618      	mov	r0, r3
 801290c:	370c      	adds	r7, #12
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr

08012916 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012916:	b480      	push	{r7}
 8012918:	b083      	sub	sp, #12
 801291a:	af00      	add	r7, sp, #0
 801291c:	6078      	str	r0, [r7, #4]
 801291e:	460b      	mov	r3, r1
 8012920:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012922:	887b      	ldrh	r3, [r7, #2]
 8012924:	011b      	lsls	r3, r3, #4
 8012926:	3308      	adds	r3, #8
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	4413      	add	r3, r2
    }
 801292c:	4618      	mov	r0, r3
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	460b      	mov	r3, r1
 8012942:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012944:	887b      	ldrh	r3, [r7, #2]
 8012946:	011b      	lsls	r3, r3, #4
 8012948:	3308      	adds	r3, #8
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	4413      	add	r3, r2
    }
 801294e:	4618      	mov	r0, r3
 8012950:	370c      	adds	r7, #12
 8012952:	46bd      	mov	sp, r7
 8012954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012958:	4770      	bx	lr

0801295a <_GLOBAL__sub_I_touchgfx_init>:
 801295a:	b580      	push	{r7, lr}
 801295c:	af00      	add	r7, sp, #0
 801295e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012962:	2001      	movs	r0, #1
 8012964:	f7ff ff00 	bl	8012768 <_Z41__static_initialization_and_destruction_0ii>
 8012968:	bd80      	pop	{r7, pc}

0801296a <_GLOBAL__sub_D_touchgfx_init>:
 801296a:	b580      	push	{r7, lr}
 801296c:	af00      	add	r7, sp, #0
 801296e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012972:	2000      	movs	r0, #0
 8012974:	f7ff fef8 	bl	8012768 <_Z41__static_initialization_and_destruction_0ii>
 8012978:	bd80      	pop	{r7, pc}
	...

0801297c <__NVIC_EnableIRQ>:
{
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	4603      	mov	r3, r0
 8012984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801298a:	2b00      	cmp	r3, #0
 801298c:	db0b      	blt.n	80129a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801298e:	79fb      	ldrb	r3, [r7, #7]
 8012990:	f003 021f 	and.w	r2, r3, #31
 8012994:	4907      	ldr	r1, [pc, #28]	; (80129b4 <__NVIC_EnableIRQ+0x38>)
 8012996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801299a:	095b      	lsrs	r3, r3, #5
 801299c:	2001      	movs	r0, #1
 801299e:	fa00 f202 	lsl.w	r2, r0, r2
 80129a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80129a6:	bf00      	nop
 80129a8:	370c      	adds	r7, #12
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop
 80129b4:	e000e100 	.word	0xe000e100

080129b8 <__NVIC_DisableIRQ>:
{
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	4603      	mov	r3, r0
 80129c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80129c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	db12      	blt.n	80129f0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80129ca:	79fb      	ldrb	r3, [r7, #7]
 80129cc:	f003 021f 	and.w	r2, r3, #31
 80129d0:	490a      	ldr	r1, [pc, #40]	; (80129fc <__NVIC_DisableIRQ+0x44>)
 80129d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80129d6:	095b      	lsrs	r3, r3, #5
 80129d8:	2001      	movs	r0, #1
 80129da:	fa00 f202 	lsl.w	r2, r0, r2
 80129de:	3320      	adds	r3, #32
 80129e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80129e4:	f3bf 8f4f 	dsb	sy
}
 80129e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80129ea:	f3bf 8f6f 	isb	sy
}
 80129ee:	bf00      	nop
}
 80129f0:	bf00      	nop
 80129f2:	370c      	adds	r7, #12
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr
 80129fc:	e000e100 	.word	0xe000e100

08012a00 <__NVIC_SetPriority>:
{
 8012a00:	b480      	push	{r7}
 8012a02:	b083      	sub	sp, #12
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	4603      	mov	r3, r0
 8012a08:	6039      	str	r1, [r7, #0]
 8012a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	db0a      	blt.n	8012a2a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	b2da      	uxtb	r2, r3
 8012a18:	490c      	ldr	r1, [pc, #48]	; (8012a4c <__NVIC_SetPriority+0x4c>)
 8012a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a1e:	0112      	lsls	r2, r2, #4
 8012a20:	b2d2      	uxtb	r2, r2
 8012a22:	440b      	add	r3, r1
 8012a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012a28:	e00a      	b.n	8012a40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	b2da      	uxtb	r2, r3
 8012a2e:	4908      	ldr	r1, [pc, #32]	; (8012a50 <__NVIC_SetPriority+0x50>)
 8012a30:	79fb      	ldrb	r3, [r7, #7]
 8012a32:	f003 030f 	and.w	r3, r3, #15
 8012a36:	3b04      	subs	r3, #4
 8012a38:	0112      	lsls	r2, r2, #4
 8012a3a:	b2d2      	uxtb	r2, r2
 8012a3c:	440b      	add	r3, r1
 8012a3e:	761a      	strb	r2, [r3, #24]
}
 8012a40:	bf00      	nop
 8012a42:	370c      	adds	r7, #12
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr
 8012a4c:	e000e100 	.word	0xe000e100
 8012a50:	e000ed00 	.word	0xe000ed00

08012a54 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8012a54:	b5b0      	push	{r4, r5, r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f000 fbbb 	bl	80131da <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8012a64:	687d      	ldr	r5, [r7, #4]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	3364      	adds	r3, #100	; 0x64
 8012a6c:	681c      	ldr	r4, [r3, #0]
 8012a6e:	f004 f995 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 8012a72:	4603      	mov	r3, r0
 8012a74:	4619      	mov	r1, r3
 8012a76:	4628      	mov	r0, r5
 8012a78:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	3388      	adds	r3, #136	; 0x88
 8012a82:	681c      	ldr	r4, [r3, #0]
 8012a84:	2300      	movs	r3, #0
 8012a86:	2200      	movs	r2, #0
 8012a88:	4902      	ldr	r1, [pc, #8]	; (8012a94 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8012a8a:	47a0      	blx	r4
}
 8012a8c:	bf00      	nop
 8012a8e:	3708      	adds	r7, #8
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bdb0      	pop	{r4, r5, r7, pc}
 8012a94:	20025900 	.word	0x20025900

08012a98 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b082      	sub	sp, #8
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8012aa0:	2109      	movs	r1, #9
 8012aa2:	2076      	movs	r0, #118	; 0x76
 8012aa4:	f7ff ffac 	bl	8012a00 <__NVIC_SetPriority>
}
 8012aa8:	bf00      	nop
 8012aaa:	3708      	adds	r7, #8
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8012ab8:	2076      	movs	r0, #118	; 0x76
 8012aba:	f7ff ff5f 	bl	801297c <__NVIC_EnableIRQ>
}
 8012abe:	bf00      	nop
 8012ac0:	3708      	adds	r7, #8
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b082      	sub	sp, #8
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012ace:	2076      	movs	r0, #118	; 0x76
 8012ad0:	f7ff ff72 	bl	80129b8 <__NVIC_DisableIRQ>
}
 8012ad4:	bf00      	nop
 8012ad6:	3708      	adds	r7, #8
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
}
 8012ae4:	bf00      	nop
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr

08012af0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4618      	mov	r0, r3
 8012afc:	f000 fb54 	bl	80131a8 <_ZN8touchgfx3HAL10beginFrameEv>
 8012b00:	4603      	mov	r3, r0
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3708      	adds	r7, #8
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}

08012b0a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8012b0a:	b580      	push	{r7, lr}
 8012b0c:	b082      	sub	sp, #8
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	4618      	mov	r0, r3
 8012b16:	f000 fb53 	bl	80131c0 <_ZN8touchgfx3HAL8endFrameEv>
}
 8012b1a:	bf00      	nop
 8012b1c:	3708      	adds	r7, #8
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
	...

08012b24 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8012b2c:	4b03      	ldr	r3, [pc, #12]	; (8012b3c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	370c      	adds	r7, #12
 8012b32:	46bd      	mov	sp, r7
 8012b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b38:	4770      	bx	lr
 8012b3a:	bf00      	nop
 8012b3c:	20025900 	.word	0x20025900

08012b40 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8012b40:	b480      	push	{r7}
 8012b42:	b083      	sub	sp, #12
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8012b4a:	bf00      	nop
 8012b4c:	370c      	adds	r7, #12
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr

08012b56 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012b56:	b580      	push	{r7, lr}
 8012b58:	b082      	sub	sp, #8
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	6078      	str	r0, [r7, #4]
 8012b5e:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6839      	ldr	r1, [r7, #0]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f000 fae9 	bl	801313c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8012b6a:	bf00      	nop
 8012b6c:	3708      	adds	r7, #8
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}

08012b72 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8012b72:	b580      	push	{r7, lr}
 8012b74:	b084      	sub	sp, #16
 8012b76:	af00      	add	r7, sp, #0
 8012b78:	60f8      	str	r0, [r7, #12]
 8012b7a:	60b9      	str	r1, [r7, #8]
 8012b7c:	607a      	str	r2, [r7, #4]
 8012b7e:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8012b80:	68f8      	ldr	r0, [r7, #12]
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	68b9      	ldr	r1, [r7, #8]
 8012b88:	f000 fc41 	bl	801340e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8012b8c:	4603      	mov	r3, r0
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3710      	adds	r7, #16
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012b96:	8880      	ldrh	r0, [r0, #4]
 8012b98:	4770      	bx	lr

08012b9a <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012b9a:	b570      	push	{r4, r5, r6, lr}
 8012b9c:	6803      	ldr	r3, [r0, #0]
 8012b9e:	4605      	mov	r5, r0
 8012ba0:	460c      	mov	r4, r1
 8012ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	4798      	blx	r3
 8012ba8:	682b      	ldr	r3, [r5, #0]
 8012baa:	4606      	mov	r6, r0
 8012bac:	6a1b      	ldr	r3, [r3, #32]
 8012bae:	4628      	mov	r0, r5
 8012bb0:	4798      	blx	r3
 8012bb2:	1ba4      	subs	r4, r4, r6
 8012bb4:	b2a4      	uxth	r4, r4
 8012bb6:	fbb4 f0f0 	udiv	r0, r4, r0
 8012bba:	bd70      	pop	{r4, r5, r6, pc}

08012bbc <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	8083      	strh	r3, [r0, #4]
 8012bc0:	4770      	bx	lr

08012bc2 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012bc2:	b510      	push	{r4, lr}
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	6803      	ldr	r3, [r0, #0]
 8012bc8:	8881      	ldrh	r1, [r0, #4]
 8012bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bcc:	4798      	blx	r3
 8012bce:	88a3      	ldrh	r3, [r4, #4]
 8012bd0:	3301      	adds	r3, #1
 8012bd2:	80a3      	strh	r3, [r4, #4]
 8012bd4:	bd10      	pop	{r4, pc}

08012bd6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012bd6:	6803      	ldr	r3, [r0, #0]
 8012bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bda:	4718      	bx	r3

08012bdc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012bdc:	4770      	bx	lr
	...

08012be0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012be0:	4a02      	ldr	r2, [pc, #8]	; (8012bec <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012be2:	6002      	str	r2, [r0, #0]
 8012be4:	2200      	movs	r2, #0
 8012be6:	8082      	strh	r2, [r0, #4]
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop
 8012bec:	0802844c 	.word	0x0802844c

08012bf0 <_ZN8touchgfx9Container13getFirstChildEv>:
 8012bf0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012bf2:	4770      	bx	lr

08012bf4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012bf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	b12b      	cbz	r3, 8012c06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012bfa:	b920      	cbnz	r0, 8012c06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012bfc:	1a5a      	subs	r2, r3, r1
 8012bfe:	4250      	negs	r0, r2
 8012c00:	4150      	adcs	r0, r2
 8012c02:	699b      	ldr	r3, [r3, #24]
 8012c04:	e7f8      	b.n	8012bf8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012c06:	4770      	bx	lr

08012c08 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012c08:	2300      	movs	r3, #0
 8012c0a:	6148      	str	r0, [r1, #20]
 8012c0c:	618b      	str	r3, [r1, #24]
 8012c0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c10:	b913      	cbnz	r3, 8012c18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012c12:	6281      	str	r1, [r0, #40]	; 0x28
 8012c14:	4770      	bx	lr
 8012c16:	4613      	mov	r3, r2
 8012c18:	699a      	ldr	r2, [r3, #24]
 8012c1a:	2a00      	cmp	r2, #0
 8012c1c:	d1fb      	bne.n	8012c16 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012c1e:	6199      	str	r1, [r3, #24]
 8012c20:	4770      	bx	lr

08012c22 <_ZN8touchgfx9Container9removeAllEv>:
 8012c22:	2200      	movs	r2, #0
 8012c24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c26:	b123      	cbz	r3, 8012c32 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012c28:	6999      	ldr	r1, [r3, #24]
 8012c2a:	6281      	str	r1, [r0, #40]	; 0x28
 8012c2c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012c30:	e7f8      	b.n	8012c24 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012c32:	4770      	bx	lr

08012c34 <_ZN8touchgfx9Container6unlinkEv>:
 8012c34:	2300      	movs	r3, #0
 8012c36:	6283      	str	r3, [r0, #40]	; 0x28
 8012c38:	4770      	bx	lr

08012c3a <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	8002      	strh	r2, [r0, #0]
 8012c3e:	8042      	strh	r2, [r0, #2]
 8012c40:	8082      	strh	r2, [r0, #4]
 8012c42:	80c2      	strh	r2, [r0, #6]
 8012c44:	4770      	bx	lr

08012c46 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012c46:	b570      	push	{r4, r5, r6, lr}
 8012c48:	460d      	mov	r5, r1
 8012c4a:	4616      	mov	r6, r2
 8012c4c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012c4e:	b13c      	cbz	r4, 8012c60 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012c50:	6823      	ldr	r3, [r4, #0]
 8012c52:	4620      	mov	r0, r4
 8012c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c56:	4632      	mov	r2, r6
 8012c58:	4629      	mov	r1, r5
 8012c5a:	4798      	blx	r3
 8012c5c:	69a4      	ldr	r4, [r4, #24]
 8012c5e:	e7f6      	b.n	8012c4e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012c60:	bd70      	pop	{r4, r5, r6, pc}

08012c62 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012c62:	b538      	push	{r3, r4, r5, lr}
 8012c64:	460d      	mov	r5, r1
 8012c66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012c68:	b134      	cbz	r4, 8012c78 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012c6a:	682b      	ldr	r3, [r5, #0]
 8012c6c:	4621      	mov	r1, r4
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	4628      	mov	r0, r5
 8012c72:	4798      	blx	r3
 8012c74:	69a4      	ldr	r4, [r4, #24]
 8012c76:	e7f7      	b.n	8012c68 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012c78:	bd38      	pop	{r3, r4, r5, pc}

08012c7a <_ZNK8touchgfx9Container17invalidateContentEv>:
 8012c7a:	b510      	push	{r4, lr}
 8012c7c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012c7e:	b12c      	cbz	r4, 8012c8c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8012c80:	6823      	ldr	r3, [r4, #0]
 8012c82:	4620      	mov	r0, r4
 8012c84:	699b      	ldr	r3, [r3, #24]
 8012c86:	4798      	blx	r3
 8012c88:	69a4      	ldr	r4, [r4, #24]
 8012c8a:	e7f8      	b.n	8012c7e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8012c8c:	bd10      	pop	{r4, pc}

08012c8e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012c8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c90:	b19b      	cbz	r3, 8012cba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012c92:	428b      	cmp	r3, r1
 8012c94:	d109      	bne.n	8012caa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012c96:	2100      	movs	r1, #0
 8012c98:	699a      	ldr	r2, [r3, #24]
 8012c9a:	6159      	str	r1, [r3, #20]
 8012c9c:	6282      	str	r2, [r0, #40]	; 0x28
 8012c9e:	b902      	cbnz	r2, 8012ca2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012ca0:	4770      	bx	lr
 8012ca2:	6199      	str	r1, [r3, #24]
 8012ca4:	4770      	bx	lr
 8012ca6:	4613      	mov	r3, r2
 8012ca8:	b13a      	cbz	r2, 8012cba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012caa:	699a      	ldr	r2, [r3, #24]
 8012cac:	428a      	cmp	r2, r1
 8012cae:	d1fa      	bne.n	8012ca6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012cb0:	698a      	ldr	r2, [r1, #24]
 8012cb2:	619a      	str	r2, [r3, #24]
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012cba:	4770      	bx	lr

08012cbc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012cbc:	b410      	push	{r4}
 8012cbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012cc0:	4604      	mov	r4, r0
 8012cc2:	b92b      	cbnz	r3, 8012cd0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012cc4:	6803      	ldr	r3, [r0, #0]
 8012cc6:	4611      	mov	r1, r2
 8012cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cce:	4718      	bx	r3
 8012cd0:	b941      	cbnz	r1, 8012ce4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012cd2:	6193      	str	r3, [r2, #24]
 8012cd4:	6282      	str	r2, [r0, #40]	; 0x28
 8012cd6:	6154      	str	r4, [r2, #20]
 8012cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cdc:	4770      	bx	lr
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d0f9      	beq.n	8012cd8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012ce4:	4299      	cmp	r1, r3
 8012ce6:	6998      	ldr	r0, [r3, #24]
 8012ce8:	d1f9      	bne.n	8012cde <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012cea:	6190      	str	r0, [r2, #24]
 8012cec:	618a      	str	r2, [r1, #24]
 8012cee:	e7f2      	b.n	8012cd6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012cf0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf4:	461f      	mov	r7, r3
 8012cf6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012cfa:	460d      	mov	r5, r1
 8012cfc:	4616      	mov	r6, r2
 8012cfe:	b103      	cbz	r3, 8012d02 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012d00:	6038      	str	r0, [r7, #0]
 8012d02:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012d04:	b314      	cbz	r4, 8012d4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012d06:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012d0a:	b1eb      	cbz	r3, 8012d48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d0c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012d10:	428d      	cmp	r5, r1
 8012d12:	db19      	blt.n	8012d48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d14:	8923      	ldrh	r3, [r4, #8]
 8012d16:	b289      	uxth	r1, r1
 8012d18:	440b      	add	r3, r1
 8012d1a:	b21b      	sxth	r3, r3
 8012d1c:	429d      	cmp	r5, r3
 8012d1e:	da13      	bge.n	8012d48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d20:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012d24:	4296      	cmp	r6, r2
 8012d26:	db0f      	blt.n	8012d48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d28:	8963      	ldrh	r3, [r4, #10]
 8012d2a:	b292      	uxth	r2, r2
 8012d2c:	4413      	add	r3, r2
 8012d2e:	b21b      	sxth	r3, r3
 8012d30:	429e      	cmp	r6, r3
 8012d32:	da09      	bge.n	8012d48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d34:	6823      	ldr	r3, [r4, #0]
 8012d36:	1ab2      	subs	r2, r6, r2
 8012d38:	1a69      	subs	r1, r5, r1
 8012d3a:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8012d3e:	b212      	sxth	r2, r2
 8012d40:	463b      	mov	r3, r7
 8012d42:	b209      	sxth	r1, r1
 8012d44:	4620      	mov	r0, r4
 8012d46:	47c0      	blx	r8
 8012d48:	69a4      	ldr	r4, [r4, #24]
 8012d4a:	e7db      	b.n	8012d04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d54:	4c6c      	ldr	r4, [pc, #432]	; (8012f08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8012d56:	b0a1      	sub	sp, #132	; 0x84
 8012d58:	6824      	ldr	r4, [r4, #0]
 8012d5a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8012d5c:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8012d60:	2400      	movs	r4, #0
 8012d62:	802c      	strh	r4, [r5, #0]
 8012d64:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8012d66:	4606      	mov	r6, r0
 8012d68:	802c      	strh	r4, [r5, #0]
 8012d6a:	601c      	str	r4, [r3, #0]
 8012d6c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012d70:	9303      	str	r3, [sp, #12]
 8012d72:	f7ff ffbd 	bl	8012cf0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012d76:	f1b9 0f03 	cmp.w	r9, #3
 8012d7a:	f340 80bf 	ble.w	8012efc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8012d7e:	4631      	mov	r1, r6
 8012d80:	a80c      	add	r0, sp, #48	; 0x30
 8012d82:	f005 f865 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012d86:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012d8a:	9306      	str	r3, [sp, #24]
 8012d8c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012d90:	9307      	str	r3, [sp, #28]
 8012d92:	9b03      	ldr	r3, [sp, #12]
 8012d94:	f8d3 a000 	ldr.w	sl, [r3]
 8012d98:	f1ba 0f00 	cmp.w	sl, #0
 8012d9c:	f000 80b1 	beq.w	8012f02 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8012da0:	4651      	mov	r1, sl
 8012da2:	a810      	add	r0, sp, #64	; 0x40
 8012da4:	f005 f854 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012da8:	2002      	movs	r0, #2
 8012daa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8012dae:	9b01      	ldr	r3, [sp, #4]
 8012db0:	fb91 f1f0 	sdiv	r1, r1, r0
 8012db4:	9a06      	ldr	r2, [sp, #24]
 8012db6:	189d      	adds	r5, r3, r2
 8012db8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8012dbc:	9a07      	ldr	r2, [sp, #28]
 8012dbe:	4419      	add	r1, r3
 8012dc0:	9b02      	ldr	r3, [sp, #8]
 8012dc2:	1a6d      	subs	r5, r5, r1
 8012dc4:	4413      	add	r3, r2
 8012dc6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012dca:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012dce:	fb92 f2f0 	sdiv	r2, r2, r0
 8012dd2:	440a      	add	r2, r1
 8012dd4:	1a9b      	subs	r3, r3, r2
 8012dd6:	435b      	muls	r3, r3
 8012dd8:	fb05 3505 	mla	r5, r5, r5, r3
 8012ddc:	4f4b      	ldr	r7, [pc, #300]	; (8012f0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012dde:	ac10      	add	r4, sp, #64	; 0x40
 8012de0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012de4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012de8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012dec:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012df4:	2303      	movs	r3, #3
 8012df6:	f1b9 0f0c 	cmp.w	r9, #12
 8012dfa:	bfda      	itte	le
 8012dfc:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012e00:	fb92 f8f3 	sdivle	r8, r2, r3
 8012e04:	4698      	movgt	r8, r3
 8012e06:	2400      	movs	r4, #0
 8012e08:	f8cd 9000 	str.w	r9, [sp]
 8012e0c:	1c63      	adds	r3, r4, #1
 8012e0e:	9308      	str	r3, [sp, #32]
 8012e10:	9b00      	ldr	r3, [sp, #0]
 8012e12:	f04f 0b00 	mov.w	fp, #0
 8012e16:	fb93 f3f8 	sdiv	r3, r3, r8
 8012e1a:	f004 0401 	and.w	r4, r4, #1
 8012e1e:	aa10      	add	r2, sp, #64	; 0x40
 8012e20:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	3404      	adds	r4, #4
 8012e28:	9304      	str	r3, [sp, #16]
 8012e2a:	9a04      	ldr	r2, [sp, #16]
 8012e2c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012e30:	fb13 f302 	smulbb	r3, r3, r2
 8012e34:	9a01      	ldr	r2, [sp, #4]
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	1899      	adds	r1, r3, r2
 8012e3a:	9305      	str	r3, [sp, #20]
 8012e3c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012e40:	b209      	sxth	r1, r1
 8012e42:	4299      	cmp	r1, r3
 8012e44:	db4d      	blt.n	8012ee2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012e46:	8932      	ldrh	r2, [r6, #8]
 8012e48:	4413      	add	r3, r2
 8012e4a:	b21b      	sxth	r3, r3
 8012e4c:	4299      	cmp	r1, r3
 8012e4e:	da48      	bge.n	8012ee2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012e50:	9b04      	ldr	r3, [sp, #16]
 8012e52:	6827      	ldr	r7, [r4, #0]
 8012e54:	fb17 f703 	smulbb	r7, r7, r3
 8012e58:	9b02      	ldr	r3, [sp, #8]
 8012e5a:	b2bf      	uxth	r7, r7
 8012e5c:	18fa      	adds	r2, r7, r3
 8012e5e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012e62:	b212      	sxth	r2, r2
 8012e64:	429a      	cmp	r2, r3
 8012e66:	db3c      	blt.n	8012ee2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012e68:	8970      	ldrh	r0, [r6, #10]
 8012e6a:	4403      	add	r3, r0
 8012e6c:	b21b      	sxth	r3, r3
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	da37      	bge.n	8012ee2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012e72:	2300      	movs	r3, #0
 8012e74:	4630      	mov	r0, r6
 8012e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e78:	ab0b      	add	r3, sp, #44	; 0x2c
 8012e7a:	f7ff ff39 	bl	8012cf0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012e7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e80:	b37a      	cbz	r2, 8012ee2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012e82:	4552      	cmp	r2, sl
 8012e84:	d02d      	beq.n	8012ee2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012e86:	4611      	mov	r1, r2
 8012e88:	a80e      	add	r0, sp, #56	; 0x38
 8012e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8012e8c:	f004 ffe0 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012e90:	f04f 0e02 	mov.w	lr, #2
 8012e94:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8012e98:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8012e9c:	fb91 f1fe 	sdiv	r1, r1, lr
 8012ea0:	fb9c fcfe 	sdiv	ip, ip, lr
 8012ea4:	9a06      	ldr	r2, [sp, #24]
 8012ea6:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8012eaa:	9b01      	ldr	r3, [sp, #4]
 8012eac:	4401      	add	r1, r0
 8012eae:	4413      	add	r3, r2
 8012eb0:	1a58      	subs	r0, r3, r1
 8012eb2:	9a07      	ldr	r2, [sp, #28]
 8012eb4:	9b02      	ldr	r3, [sp, #8]
 8012eb6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012eba:	4413      	add	r3, r2
 8012ebc:	448c      	add	ip, r1
 8012ebe:	eba3 030c 	sub.w	r3, r3, ip
 8012ec2:	435b      	muls	r3, r3
 8012ec4:	fb00 3300 	mla	r3, r0, r0, r3
 8012ec8:	42ab      	cmp	r3, r5
 8012eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ecc:	d208      	bcs.n	8012ee0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8012ece:	461d      	mov	r5, r3
 8012ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012ed2:	9803      	ldr	r0, [sp, #12]
 8012ed4:	6001      	str	r1, [r0, #0]
 8012ed6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012ed8:	9805      	ldr	r0, [sp, #20]
 8012eda:	8008      	strh	r0, [r1, #0]
 8012edc:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012ede:	800f      	strh	r7, [r1, #0]
 8012ee0:	4692      	mov	sl, r2
 8012ee2:	f10b 0b01 	add.w	fp, fp, #1
 8012ee6:	f1bb 0f04 	cmp.w	fp, #4
 8012eea:	f104 0408 	add.w	r4, r4, #8
 8012eee:	d19c      	bne.n	8012e2a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8012ef0:	9b00      	ldr	r3, [sp, #0]
 8012ef2:	9c08      	ldr	r4, [sp, #32]
 8012ef4:	444b      	add	r3, r9
 8012ef6:	4544      	cmp	r4, r8
 8012ef8:	9300      	str	r3, [sp, #0]
 8012efa:	d187      	bne.n	8012e0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8012efc:	b021      	add	sp, #132	; 0x84
 8012efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f02:	f04f 35ff 	mov.w	r5, #4294967295
 8012f06:	e769      	b.n	8012ddc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012f08:	2004f630 	.word	0x2004f630
 8012f0c:	080279ec 	.word	0x080279ec

08012f10 <_ZN8touchgfx4RectaNERKS0_>:
 8012f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f14:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012f18:	888c      	ldrh	r4, [r1, #4]
 8012f1a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012f1e:	443c      	add	r4, r7
 8012f20:	b2a4      	uxth	r4, r4
 8012f22:	fa0f f884 	sxth.w	r8, r4
 8012f26:	45c1      	cmp	r9, r8
 8012f28:	da2f      	bge.n	8012f8a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f2a:	8882      	ldrh	r2, [r0, #4]
 8012f2c:	444a      	add	r2, r9
 8012f2e:	b292      	uxth	r2, r2
 8012f30:	fa0f fe82 	sxth.w	lr, r2
 8012f34:	4577      	cmp	r7, lr
 8012f36:	da28      	bge.n	8012f8a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f38:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012f3c:	88cb      	ldrh	r3, [r1, #6]
 8012f3e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012f42:	442b      	add	r3, r5
 8012f44:	b21b      	sxth	r3, r3
 8012f46:	429e      	cmp	r6, r3
 8012f48:	da1f      	bge.n	8012f8a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f4a:	88c3      	ldrh	r3, [r0, #6]
 8012f4c:	4433      	add	r3, r6
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	fa0f fc83 	sxth.w	ip, r3
 8012f54:	4565      	cmp	r5, ip
 8012f56:	da18      	bge.n	8012f8a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f58:	454f      	cmp	r7, r9
 8012f5a:	bfb8      	it	lt
 8012f5c:	464f      	movlt	r7, r9
 8012f5e:	42b5      	cmp	r5, r6
 8012f60:	bfb8      	it	lt
 8012f62:	4635      	movlt	r5, r6
 8012f64:	45f0      	cmp	r8, lr
 8012f66:	bfd8      	it	le
 8012f68:	4622      	movle	r2, r4
 8012f6a:	1bd2      	subs	r2, r2, r7
 8012f6c:	8082      	strh	r2, [r0, #4]
 8012f6e:	884a      	ldrh	r2, [r1, #2]
 8012f70:	88c9      	ldrh	r1, [r1, #6]
 8012f72:	8007      	strh	r7, [r0, #0]
 8012f74:	440a      	add	r2, r1
 8012f76:	b292      	uxth	r2, r2
 8012f78:	b211      	sxth	r1, r2
 8012f7a:	458c      	cmp	ip, r1
 8012f7c:	bfa8      	it	ge
 8012f7e:	4613      	movge	r3, r2
 8012f80:	1b5b      	subs	r3, r3, r5
 8012f82:	80c3      	strh	r3, [r0, #6]
 8012f84:	8045      	strh	r5, [r0, #2]
 8012f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	8003      	strh	r3, [r0, #0]
 8012f8e:	8043      	strh	r3, [r0, #2]
 8012f90:	8083      	strh	r3, [r0, #4]
 8012f92:	80c3      	strh	r3, [r0, #6]
 8012f94:	e7f7      	b.n	8012f86 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012f96 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012f96:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	dd06      	ble.n	8012fac <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012f9e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	bfcc      	ite	gt
 8012fa6:	2000      	movgt	r0, #0
 8012fa8:	2001      	movle	r0, #1
 8012faa:	4770      	bx	lr
 8012fac:	2001      	movs	r0, #1
 8012fae:	4770      	bx	lr

08012fb0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012fba:	8003      	strh	r3, [r0, #0]
 8012fbc:	8043      	strh	r3, [r0, #2]
 8012fbe:	8083      	strh	r3, [r0, #4]
 8012fc0:	80c3      	strh	r3, [r0, #6]
 8012fc2:	2d00      	cmp	r5, #0
 8012fc4:	d040      	beq.n	8013048 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012fc6:	1d28      	adds	r0, r5, #4
 8012fc8:	f7ff ffe5 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012fcc:	b988      	cbnz	r0, 8012ff2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f7ff ffe1 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012fd4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012fd8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012fdc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012fe0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012fe4:	b138      	cbz	r0, 8012ff6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012fe6:	8022      	strh	r2, [r4, #0]
 8012fe8:	8063      	strh	r3, [r4, #2]
 8012fea:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012fee:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012ff2:	69ad      	ldr	r5, [r5, #24]
 8012ff4:	e7e5      	b.n	8012fc2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012ff6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012ffa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012ffe:	4290      	cmp	r0, r2
 8013000:	4607      	mov	r7, r0
 8013002:	bfa8      	it	ge
 8013004:	4617      	movge	r7, r2
 8013006:	4299      	cmp	r1, r3
 8013008:	460e      	mov	r6, r1
 801300a:	bfa8      	it	ge
 801300c:	461e      	movge	r6, r3
 801300e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8013012:	4472      	add	r2, lr
 8013014:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8013018:	4440      	add	r0, r8
 801301a:	4471      	add	r1, lr
 801301c:	4463      	add	r3, ip
 801301e:	b200      	sxth	r0, r0
 8013020:	b212      	sxth	r2, r2
 8013022:	b209      	sxth	r1, r1
 8013024:	b21b      	sxth	r3, r3
 8013026:	4290      	cmp	r0, r2
 8013028:	bfac      	ite	ge
 801302a:	ebc7 0200 	rsbge	r2, r7, r0
 801302e:	ebc7 0202 	rsblt	r2, r7, r2
 8013032:	4299      	cmp	r1, r3
 8013034:	bfac      	ite	ge
 8013036:	ebc6 0301 	rsbge	r3, r6, r1
 801303a:	ebc6 0303 	rsblt	r3, r6, r3
 801303e:	8027      	strh	r7, [r4, #0]
 8013040:	8066      	strh	r6, [r4, #2]
 8013042:	80a2      	strh	r2, [r4, #4]
 8013044:	80e3      	strh	r3, [r4, #6]
 8013046:	e7d4      	b.n	8012ff2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013048:	4620      	mov	r0, r4
 801304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801304e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801304e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013052:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013056:	b383      	cbz	r3, 80130ba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013058:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801305a:	b374      	cbz	r4, 80130ba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801305c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013060:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8013064:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013068:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801306c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013070:	b303      	cbz	r3, 80130b4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013072:	4668      	mov	r0, sp
 8013074:	1d21      	adds	r1, r4, #4
 8013076:	f8ad 5000 	strh.w	r5, [sp]
 801307a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801307e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013082:	f8ad 8006 	strh.w	r8, [sp, #6]
 8013086:	f7ff ff43 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 801308a:	4668      	mov	r0, sp
 801308c:	f7ff ff83 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013090:	b980      	cbnz	r0, 80130b4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013092:	f8bd 3000 	ldrh.w	r3, [sp]
 8013096:	88a2      	ldrh	r2, [r4, #4]
 8013098:	4669      	mov	r1, sp
 801309a:	1a9b      	subs	r3, r3, r2
 801309c:	f8ad 3000 	strh.w	r3, [sp]
 80130a0:	88e2      	ldrh	r2, [r4, #6]
 80130a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80130a6:	4620      	mov	r0, r4
 80130a8:	1a9b      	subs	r3, r3, r2
 80130aa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80130ae:	6823      	ldr	r3, [r4, #0]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	4798      	blx	r3
 80130b4:	69a4      	ldr	r4, [r4, #24]
 80130b6:	2c00      	cmp	r4, #0
 80130b8:	d1d8      	bne.n	801306c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80130ba:	b002      	add	sp, #8
 80130bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130c0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80130c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130c2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80130c6:	460d      	mov	r5, r1
 80130c8:	4616      	mov	r6, r2
 80130ca:	b323      	cbz	r3, 8013116 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80130cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80130ce:	b314      	cbz	r4, 8013116 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80130d0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80130d4:	b1eb      	cbz	r3, 8013112 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80130d6:	466b      	mov	r3, sp
 80130d8:	6828      	ldr	r0, [r5, #0]
 80130da:	6869      	ldr	r1, [r5, #4]
 80130dc:	c303      	stmia	r3!, {r0, r1}
 80130de:	4668      	mov	r0, sp
 80130e0:	1d21      	adds	r1, r4, #4
 80130e2:	f7ff ff15 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 80130e6:	4668      	mov	r0, sp
 80130e8:	f7ff ff55 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 80130ec:	b988      	cbnz	r0, 8013112 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80130ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80130f2:	88a2      	ldrh	r2, [r4, #4]
 80130f4:	4669      	mov	r1, sp
 80130f6:	1a9b      	subs	r3, r3, r2
 80130f8:	f8ad 3000 	strh.w	r3, [sp]
 80130fc:	88e2      	ldrh	r2, [r4, #6]
 80130fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013102:	4620      	mov	r0, r4
 8013104:	1a9b      	subs	r3, r3, r2
 8013106:	f8ad 3002 	strh.w	r3, [sp, #2]
 801310a:	6823      	ldr	r3, [r4, #0]
 801310c:	4632      	mov	r2, r6
 801310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013110:	4798      	blx	r3
 8013112:	69a4      	ldr	r4, [r4, #24]
 8013114:	e7db      	b.n	80130ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013116:	b002      	add	sp, #8
 8013118:	bd70      	pop	{r4, r5, r6, pc}

0801311a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801311a:	b513      	push	{r0, r1, r4, lr}
 801311c:	6803      	ldr	r3, [r0, #0]
 801311e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8013122:	2300      	movs	r3, #0
 8013124:	e9cd 3300 	strd	r3, r3, [sp]
 8013128:	466b      	mov	r3, sp
 801312a:	47a0      	blx	r4
 801312c:	b002      	add	sp, #8
 801312e:	bd10      	pop	{r4, pc}

08013130 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8013130:	2301      	movs	r3, #1
 8013132:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013136:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801313a:	4770      	bx	lr

0801313c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801313c:	2301      	movs	r3, #1
 801313e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013142:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013146:	4770      	bx	lr

08013148 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8013148:	2201      	movs	r2, #1
 801314a:	6843      	ldr	r3, [r0, #4]
 801314c:	725a      	strb	r2, [r3, #9]
 801314e:	6840      	ldr	r0, [r0, #4]
 8013150:	6803      	ldr	r3, [r0, #0]
 8013152:	691b      	ldr	r3, [r3, #16]
 8013154:	4718      	bx	r3

08013156 <_ZN8touchgfx3HAL8flushDMAEv>:
 8013156:	6840      	ldr	r0, [r0, #4]
 8013158:	6803      	ldr	r3, [r0, #0]
 801315a:	689b      	ldr	r3, [r3, #8]
 801315c:	4718      	bx	r3

0801315e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801315e:	b530      	push	{r4, r5, lr}
 8013160:	b08b      	sub	sp, #44	; 0x2c
 8013162:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8013166:	6804      	ldr	r4, [r0, #0]
 8013168:	9509      	str	r5, [sp, #36]	; 0x24
 801316a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801316e:	9508      	str	r5, [sp, #32]
 8013170:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8013174:	9507      	str	r5, [sp, #28]
 8013176:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801317a:	9506      	str	r5, [sp, #24]
 801317c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8013180:	9505      	str	r5, [sp, #20]
 8013182:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8013186:	9504      	str	r5, [sp, #16]
 8013188:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801318c:	9503      	str	r5, [sp, #12]
 801318e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013192:	9502      	str	r5, [sp, #8]
 8013194:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013198:	e9cd 3500 	strd	r3, r5, [sp]
 801319c:	4613      	mov	r3, r2
 801319e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80131a0:	2200      	movs	r2, #0
 80131a2:	47a0      	blx	r4
 80131a4:	b00b      	add	sp, #44	; 0x2c
 80131a6:	bd30      	pop	{r4, r5, pc}

080131a8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80131a8:	4b04      	ldr	r3, [pc, #16]	; (80131bc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	b123      	cbz	r3, 80131b8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80131ae:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80131b2:	f080 0001 	eor.w	r0, r0, #1
 80131b6:	4770      	bx	lr
 80131b8:	2001      	movs	r0, #1
 80131ba:	4770      	bx	lr
 80131bc:	2004f62e 	.word	0x2004f62e

080131c0 <_ZN8touchgfx3HAL8endFrameEv>:
 80131c0:	b510      	push	{r4, lr}
 80131c2:	4604      	mov	r4, r0
 80131c4:	6840      	ldr	r0, [r0, #4]
 80131c6:	6803      	ldr	r3, [r0, #0]
 80131c8:	689b      	ldr	r3, [r3, #8]
 80131ca:	4798      	blx	r3
 80131cc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80131d0:	b113      	cbz	r3, 80131d8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80131d2:	2301      	movs	r3, #1
 80131d4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80131d8:	bd10      	pop	{r4, pc}

080131da <_ZN8touchgfx3HAL10initializeEv>:
 80131da:	b510      	push	{r4, lr}
 80131dc:	4604      	mov	r4, r0
 80131de:	f7fe f94b 	bl	8011478 <_ZN8touchgfx10OSWrappers10initializeEv>
 80131e2:	6860      	ldr	r0, [r4, #4]
 80131e4:	6803      	ldr	r3, [r0, #0]
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	4798      	blx	r3
 80131ea:	68e0      	ldr	r0, [r4, #12]
 80131ec:	6803      	ldr	r3, [r0, #0]
 80131ee:	689b      	ldr	r3, [r3, #8]
 80131f0:	4798      	blx	r3
 80131f2:	6823      	ldr	r3, [r4, #0]
 80131f4:	4620      	mov	r0, r4
 80131f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131fc:	4718      	bx	r3

080131fe <_ZN8touchgfx3HAL9taskEntryEv>:
 80131fe:	4604      	mov	r4, r0
 8013200:	b508      	push	{r3, lr}
 8013202:	6803      	ldr	r3, [r0, #0]
 8013204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013208:	4798      	blx	r3
 801320a:	6823      	ldr	r3, [r4, #0]
 801320c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801320e:	4620      	mov	r0, r4
 8013210:	4798      	blx	r3
 8013212:	f7fe fa37 	bl	8011684 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013216:	6823      	ldr	r3, [r4, #0]
 8013218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801321a:	e7f8      	b.n	801320e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801321c <_ZN8touchgfx3HAL4tickEv>:
 801321c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801321e:	6803      	ldr	r3, [r0, #0]
 8013220:	4604      	mov	r4, r0
 8013222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013226:	4798      	blx	r3
 8013228:	4d59      	ldr	r5, [pc, #356]	; (8013390 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801322a:	2800      	cmp	r0, #0
 801322c:	f000 8095 	beq.w	801335a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013230:	2600      	movs	r6, #0
 8013232:	2001      	movs	r0, #1
 8013234:	f7fd fdb8 	bl	8010da8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013238:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801323c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8013240:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013244:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8013248:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801324c:	b133      	cbz	r3, 801325c <_ZN8touchgfx3HAL4tickEv+0x40>
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	4620      	mov	r0, r4
 8013252:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013256:	4798      	blx	r3
 8013258:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801325c:	2601      	movs	r6, #1
 801325e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013262:	6862      	ldr	r2, [r4, #4]
 8013264:	f083 0301 	eor.w	r3, r3, #1
 8013268:	7253      	strb	r3, [r2, #9]
 801326a:	702e      	strb	r6, [r5, #0]
 801326c:	f003 fd96 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 8013270:	6803      	ldr	r3, [r0, #0]
 8013272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013274:	4798      	blx	r3
 8013276:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801327a:	b90b      	cbnz	r3, 8013280 <_ZN8touchgfx3HAL4tickEv+0x64>
 801327c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013280:	f003 fd8c 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 8013284:	6803      	ldr	r3, [r0, #0]
 8013286:	695b      	ldr	r3, [r3, #20]
 8013288:	4798      	blx	r3
 801328a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801328c:	6803      	ldr	r3, [r0, #0]
 801328e:	691b      	ldr	r3, [r3, #16]
 8013290:	4798      	blx	r3
 8013292:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013296:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801329a:	3b01      	subs	r3, #1
 801329c:	b2db      	uxtb	r3, r3
 801329e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80132a2:	b10a      	cbz	r2, 80132a8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d1eb      	bne.n	8013280 <_ZN8touchgfx3HAL4tickEv+0x64>
 80132a8:	4a3a      	ldr	r2, [pc, #232]	; (8013394 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80132aa:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80132ae:	7813      	ldrb	r3, [r2, #0]
 80132b0:	3301      	adds	r3, #1
 80132b2:	b25b      	sxtb	r3, r3
 80132b4:	4299      	cmp	r1, r3
 80132b6:	7013      	strb	r3, [r2, #0]
 80132b8:	dc10      	bgt.n	80132dc <_ZN8touchgfx3HAL4tickEv+0xc0>
 80132ba:	2300      	movs	r3, #0
 80132bc:	68e0      	ldr	r0, [r4, #12]
 80132be:	7013      	strb	r3, [r2, #0]
 80132c0:	6803      	ldr	r3, [r0, #0]
 80132c2:	aa03      	add	r2, sp, #12
 80132c4:	68db      	ldr	r3, [r3, #12]
 80132c6:	a902      	add	r1, sp, #8
 80132c8:	4798      	blx	r3
 80132ca:	6823      	ldr	r3, [r4, #0]
 80132cc:	2800      	cmp	r0, #0
 80132ce:	d050      	beq.n	8013372 <_ZN8touchgfx3HAL4tickEv+0x156>
 80132d0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80132d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80132d8:	4620      	mov	r0, r4
 80132da:	4798      	blx	r3
 80132dc:	2300      	movs	r3, #0
 80132de:	6960      	ldr	r0, [r4, #20]
 80132e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80132e4:	b158      	cbz	r0, 80132fe <_ZN8touchgfx3HAL4tickEv+0xe2>
 80132e6:	6803      	ldr	r3, [r0, #0]
 80132e8:	f10d 0107 	add.w	r1, sp, #7
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	4798      	blx	r3
 80132f0:	b128      	cbz	r0, 80132fe <_ZN8touchgfx3HAL4tickEv+0xe2>
 80132f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80132f8:	6803      	ldr	r3, [r0, #0]
 80132fa:	68db      	ldr	r3, [r3, #12]
 80132fc:	4798      	blx	r3
 80132fe:	f104 001c 	add.w	r0, r4, #28
 8013302:	f011 feb7 	bl	8025074 <_ZN8touchgfx8Gestures4tickEv>
 8013306:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801330a:	b30b      	cbz	r3, 8013350 <_ZN8touchgfx3HAL4tickEv+0x134>
 801330c:	6920      	ldr	r0, [r4, #16]
 801330e:	6803      	ldr	r3, [r0, #0]
 8013310:	691b      	ldr	r3, [r3, #16]
 8013312:	4798      	blx	r3
 8013314:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013316:	4606      	mov	r6, r0
 8013318:	b903      	cbnz	r3, 801331c <_ZN8touchgfx3HAL4tickEv+0x100>
 801331a:	6720      	str	r0, [r4, #112]	; 0x70
 801331c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801331e:	4a1e      	ldr	r2, [pc, #120]	; (8013398 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013320:	1af3      	subs	r3, r6, r3
 8013322:	4293      	cmp	r3, r2
 8013324:	d914      	bls.n	8013350 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013326:	6920      	ldr	r0, [r4, #16]
 8013328:	6803      	ldr	r3, [r0, #0]
 801332a:	699b      	ldr	r3, [r3, #24]
 801332c:	4798      	blx	r3
 801332e:	2264      	movs	r2, #100	; 0x64
 8013330:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013332:	1af3      	subs	r3, r6, r3
 8013334:	fbb3 f3f2 	udiv	r3, r3, r2
 8013338:	fbb0 f0f3 	udiv	r0, r0, r3
 801333c:	2800      	cmp	r0, #0
 801333e:	dc1d      	bgt.n	801337c <_ZN8touchgfx3HAL4tickEv+0x160>
 8013340:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013344:	6920      	ldr	r0, [r4, #16]
 8013346:	2100      	movs	r1, #0
 8013348:	6803      	ldr	r3, [r0, #0]
 801334a:	69db      	ldr	r3, [r3, #28]
 801334c:	4798      	blx	r3
 801334e:	6726      	str	r6, [r4, #112]	; 0x70
 8013350:	f003 fd24 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 8013354:	6803      	ldr	r3, [r0, #0]
 8013356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013358:	4798      	blx	r3
 801335a:	6823      	ldr	r3, [r4, #0]
 801335c:	4620      	mov	r0, r4
 801335e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013362:	4798      	blx	r3
 8013364:	2001      	movs	r0, #1
 8013366:	f7fd fd3b 	bl	8010de0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801336a:	2300      	movs	r3, #0
 801336c:	702b      	strb	r3, [r5, #0]
 801336e:	b004      	add	sp, #16
 8013370:	bd70      	pop	{r4, r5, r6, pc}
 8013372:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013376:	4620      	mov	r0, r4
 8013378:	4798      	blx	r3
 801337a:	e7af      	b.n	80132dc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801337c:	2863      	cmp	r0, #99	; 0x63
 801337e:	bfcb      	itete	gt
 8013380:	2300      	movgt	r3, #0
 8013382:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8013386:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801338a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801338e:	e7d9      	b.n	8013344 <_ZN8touchgfx3HAL4tickEv+0x128>
 8013390:	2004f634 	.word	0x2004f634
 8013394:	2004f635 	.word	0x2004f635
 8013398:	05f5e100 	.word	0x05f5e100

0801339c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801339c:	f7fe b904 	b.w	80115a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080133a0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80133a0:	6581      	str	r1, [r0, #88]	; 0x58
 80133a2:	301c      	adds	r0, #28
 80133a4:	f011 be64 	b.w	8025070 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080133a8 <_ZN8touchgfx3HAL5touchEll>:
 80133a8:	b530      	push	{r4, r5, lr}
 80133aa:	4604      	mov	r4, r0
 80133ac:	b087      	sub	sp, #28
 80133ae:	a804      	add	r0, sp, #16
 80133b0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80133b4:	f003 fa78 	bl	80168a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80133b8:	9b04      	ldr	r3, [sp, #16]
 80133ba:	a906      	add	r1, sp, #24
 80133bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80133c0:	9b05      	ldr	r3, [sp, #20]
 80133c2:	a803      	add	r0, sp, #12
 80133c4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80133c8:	f003 fac0 	bl	801694c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80133cc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80133d0:	f104 001c 	add.w	r0, r4, #28
 80133d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80133d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80133dc:	b189      	cbz	r1, 8013402 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80133de:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80133e2:	9300      	str	r3, [sp, #0]
 80133e4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80133e8:	4613      	mov	r3, r2
 80133ea:	462a      	mov	r2, r5
 80133ec:	f011 fe50 	bl	8025090 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80133f0:	b128      	cbz	r0, 80133fe <_ZN8touchgfx3HAL5touchEll+0x56>
 80133f2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80133f6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80133f8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80133fc:	6623      	str	r3, [r4, #96]	; 0x60
 80133fe:	b007      	add	sp, #28
 8013400:	bd30      	pop	{r4, r5, pc}
 8013402:	f011 fe85 	bl	8025110 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013406:	2301      	movs	r3, #1
 8013408:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801340c:	e7f1      	b.n	80133f2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801340e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801340e:	b510      	push	{r4, lr}
 8013410:	2b00      	cmp	r3, #0
 8013412:	d046      	beq.n	80134a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013414:	ea81 0002 	eor.w	r0, r1, r2
 8013418:	07c4      	lsls	r4, r0, #31
 801341a:	d508      	bpl.n	801342e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801341c:	440b      	add	r3, r1
 801341e:	3a01      	subs	r2, #1
 8013420:	428b      	cmp	r3, r1
 8013422:	d93e      	bls.n	80134a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013424:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013428:	f801 0b01 	strb.w	r0, [r1], #1
 801342c:	e7f8      	b.n	8013420 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801342e:	07d0      	lsls	r0, r2, #31
 8013430:	bf42      	ittt	mi
 8013432:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8013436:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801343a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801343e:	2b01      	cmp	r3, #1
 8013440:	d911      	bls.n	8013466 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013442:	ea81 0402 	eor.w	r4, r1, r2
 8013446:	07a4      	lsls	r4, r4, #30
 8013448:	4610      	mov	r0, r2
 801344a:	d022      	beq.n	8013492 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801344c:	f023 0401 	bic.w	r4, r3, #1
 8013450:	440c      	add	r4, r1
 8013452:	428c      	cmp	r4, r1
 8013454:	4602      	mov	r2, r0
 8013456:	d904      	bls.n	8013462 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8013458:	8812      	ldrh	r2, [r2, #0]
 801345a:	3002      	adds	r0, #2
 801345c:	f821 2b02 	strh.w	r2, [r1], #2
 8013460:	e7f7      	b.n	8013452 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8013462:	f003 0301 	and.w	r3, r3, #1
 8013466:	f023 0003 	bic.w	r0, r3, #3
 801346a:	4408      	add	r0, r1
 801346c:	4288      	cmp	r0, r1
 801346e:	4614      	mov	r4, r2
 8013470:	d904      	bls.n	801347c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8013472:	6824      	ldr	r4, [r4, #0]
 8013474:	3204      	adds	r2, #4
 8013476:	f841 4b04 	str.w	r4, [r1], #4
 801347a:	e7f7      	b.n	801346c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801347c:	f003 0303 	and.w	r3, r3, #3
 8013480:	440b      	add	r3, r1
 8013482:	3a01      	subs	r2, #1
 8013484:	428b      	cmp	r3, r1
 8013486:	d90c      	bls.n	80134a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013488:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801348c:	f801 0b01 	strb.w	r0, [r1], #1
 8013490:	e7f8      	b.n	8013484 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8013492:	0790      	lsls	r0, r2, #30
 8013494:	d0e7      	beq.n	8013466 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013496:	f832 0b02 	ldrh.w	r0, [r2], #2
 801349a:	3b02      	subs	r3, #2
 801349c:	f821 0b02 	strh.w	r0, [r1], #2
 80134a0:	e7e1      	b.n	8013466 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80134a2:	2001      	movs	r0, #1
 80134a4:	bd10      	pop	{r4, pc}

080134a6 <_ZN8touchgfx3HAL7noTouchEv>:
 80134a6:	b510      	push	{r4, lr}
 80134a8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80134ac:	4604      	mov	r4, r0
 80134ae:	b153      	cbz	r3, 80134c6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80134b0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80134b4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80134b8:	2101      	movs	r1, #1
 80134ba:	301c      	adds	r0, #28
 80134bc:	f011 fe28 	bl	8025110 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80134c0:	2300      	movs	r3, #0
 80134c2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80134c6:	bd10      	pop	{r4, pc}

080134c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80134c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134cc:	4604      	mov	r4, r0
 80134ce:	2000      	movs	r0, #0
 80134d0:	b085      	sub	sp, #20
 80134d2:	ad04      	add	r5, sp, #16
 80134d4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80134d8:	69a0      	ldr	r0, [r4, #24]
 80134da:	4699      	mov	r9, r3
 80134dc:	6806      	ldr	r6, [r0, #0]
 80134de:	9501      	str	r5, [sp, #4]
 80134e0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80134e4:	460f      	mov	r7, r1
 80134e6:	9500      	str	r5, [sp, #0]
 80134e8:	6835      	ldr	r5, [r6, #0]
 80134ea:	4690      	mov	r8, r2
 80134ec:	47a8      	blx	r5
 80134ee:	4d10      	ldr	r5, [pc, #64]	; (8013530 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80134f0:	4606      	mov	r6, r0
 80134f2:	f8a5 9000 	strh.w	r9, [r5]
 80134f6:	f7fa f999 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 80134fa:	6803      	ldr	r3, [r0, #0]
 80134fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134fe:	4798      	blx	r3
 8013500:	b128      	cbz	r0, 801350e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013502:	2801      	cmp	r0, #1
 8013504:	d00b      	beq.n	801351e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8013506:	4630      	mov	r0, r6
 8013508:	b005      	add	sp, #20
 801350a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801350e:	882b      	ldrh	r3, [r5, #0]
 8013510:	fb08 7203 	mla	r2, r8, r3, r7
 8013514:	9b03      	ldr	r3, [sp, #12]
 8013516:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801351a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801351c:	e7f3      	b.n	8013506 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801351e:	882a      	ldrh	r2, [r5, #0]
 8013520:	9b03      	ldr	r3, [sp, #12]
 8013522:	fb08 7202 	mla	r2, r8, r2, r7
 8013526:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801352a:	1a9a      	subs	r2, r3, r2
 801352c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801352e:	e7ea      	b.n	8013506 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013530:	2004f62a 	.word	0x2004f62a

08013534 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8013534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013536:	b08b      	sub	sp, #44	; 0x2c
 8013538:	4617      	mov	r7, r2
 801353a:	4604      	mov	r4, r0
 801353c:	460e      	mov	r6, r1
 801353e:	461d      	mov	r5, r3
 8013540:	f7fa f974 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8013544:	6803      	ldr	r3, [r0, #0]
 8013546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013548:	4798      	blx	r3
 801354a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801354e:	9007      	str	r0, [sp, #28]
 8013550:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013554:	4b0d      	ldr	r3, [pc, #52]	; (801358c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8013556:	6822      	ldr	r2, [r4, #0]
 8013558:	881b      	ldrh	r3, [r3, #0]
 801355a:	4631      	mov	r1, r6
 801355c:	9306      	str	r3, [sp, #24]
 801355e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013562:	4620      	mov	r0, r4
 8013564:	9305      	str	r3, [sp, #20]
 8013566:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801356a:	9304      	str	r3, [sp, #16]
 801356c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013570:	9303      	str	r3, [sp, #12]
 8013572:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013576:	9302      	str	r3, [sp, #8]
 8013578:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801357c:	e9cd 5300 	strd	r5, r3, [sp]
 8013580:	463b      	mov	r3, r7
 8013582:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8013584:	2200      	movs	r2, #0
 8013586:	47a8      	blx	r5
 8013588:	b00b      	add	sp, #44	; 0x2c
 801358a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801358c:	2004f62a 	.word	0x2004f62a

08013590 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013594:	4698      	mov	r8, r3
 8013596:	6803      	ldr	r3, [r0, #0]
 8013598:	b08b      	sub	sp, #44	; 0x2c
 801359a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801359c:	4b14      	ldr	r3, [pc, #80]	; (80135f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801359e:	4617      	mov	r7, r2
 80135a0:	f8b3 9000 	ldrh.w	r9, [r3]
 80135a4:	460e      	mov	r6, r1
 80135a6:	4604      	mov	r4, r0
 80135a8:	f7fa f940 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 80135ac:	6803      	ldr	r3, [r0, #0]
 80135ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b0:	4798      	blx	r3
 80135b2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80135b6:	2200      	movs	r2, #0
 80135b8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80135bc:	2302      	movs	r3, #2
 80135be:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80135c2:	2301      	movs	r3, #1
 80135c4:	9305      	str	r3, [sp, #20]
 80135c6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80135ca:	4631      	mov	r1, r6
 80135cc:	9304      	str	r3, [sp, #16]
 80135ce:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80135d2:	4620      	mov	r0, r4
 80135d4:	9303      	str	r3, [sp, #12]
 80135d6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80135da:	9302      	str	r3, [sp, #8]
 80135dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80135e0:	e9cd 8300 	strd	r8, r3, [sp]
 80135e4:	463b      	mov	r3, r7
 80135e6:	47a8      	blx	r5
 80135e8:	b00b      	add	sp, #44	; 0x2c
 80135ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135ee:	bf00      	nop
 80135f0:	2004f62a 	.word	0x2004f62a

080135f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80135f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135f8:	4698      	mov	r8, r3
 80135fa:	6803      	ldr	r3, [r0, #0]
 80135fc:	b087      	sub	sp, #28
 80135fe:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8013600:	4b10      	ldr	r3, [pc, #64]	; (8013644 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8013602:	460e      	mov	r6, r1
 8013604:	f8b3 9000 	ldrh.w	r9, [r3]
 8013608:	4617      	mov	r7, r2
 801360a:	4604      	mov	r4, r0
 801360c:	f7fa f90e 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8013610:	6803      	ldr	r3, [r0, #0]
 8013612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013614:	4798      	blx	r3
 8013616:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801361a:	f8cd 900c 	str.w	r9, [sp, #12]
 801361e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8013622:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8013626:	463a      	mov	r2, r7
 8013628:	9302      	str	r3, [sp, #8]
 801362a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801362e:	4631      	mov	r1, r6
 8013630:	9301      	str	r3, [sp, #4]
 8013632:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013636:	4620      	mov	r0, r4
 8013638:	9300      	str	r3, [sp, #0]
 801363a:	4643      	mov	r3, r8
 801363c:	47a8      	blx	r5
 801363e:	b007      	add	sp, #28
 8013640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013644:	2004f62a 	.word	0x2004f62a

08013648 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801364c:	4604      	mov	r4, r0
 801364e:	b08f      	sub	sp, #60	; 0x3c
 8013650:	4610      	mov	r0, r2
 8013652:	460d      	mov	r5, r1
 8013654:	4691      	mov	r9, r2
 8013656:	461e      	mov	r6, r3
 8013658:	f005 ff7c 	bl	8019554 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801365c:	2800      	cmp	r0, #0
 801365e:	f000 809d 	beq.w	801379c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8013662:	6823      	ldr	r3, [r4, #0]
 8013664:	4620      	mov	r0, r4
 8013666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013668:	4798      	blx	r3
 801366a:	6823      	ldr	r3, [r4, #0]
 801366c:	f8df b190 	ldr.w	fp, [pc, #400]	; 8013800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8013670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013672:	4620      	mov	r0, r4
 8013674:	4798      	blx	r3
 8013676:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8013804 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801367a:	f8bb 3000 	ldrh.w	r3, [fp]
 801367e:	4f5d      	ldr	r7, [pc, #372]	; (80137f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	f8ba 3000 	ldrh.w	r3, [sl]
 8013686:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801368a:	9302      	str	r3, [sp, #8]
 801368c:	883b      	ldrh	r3, [r7, #0]
 801368e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8013692:	9303      	str	r3, [sp, #12]
 8013694:	4b58      	ldr	r3, [pc, #352]	; (80137f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013696:	4640      	mov	r0, r8
 8013698:	881a      	ldrh	r2, [r3, #0]
 801369a:	9305      	str	r3, [sp, #20]
 801369c:	9204      	str	r2, [sp, #16]
 801369e:	f005 ffed 	bl	801967c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80136a2:	8038      	strh	r0, [r7, #0]
 80136a4:	4640      	mov	r0, r8
 80136a6:	f006 f81d 	bl	80196e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80136aa:	9b05      	ldr	r3, [sp, #20]
 80136ac:	b280      	uxth	r0, r0
 80136ae:	8018      	strh	r0, [r3, #0]
 80136b0:	4b52      	ldr	r3, [pc, #328]	; (80137fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80136b2:	781b      	ldrb	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d174      	bne.n	80137a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80136b8:	883b      	ldrh	r3, [r7, #0]
 80136ba:	f8aa 0000 	strh.w	r0, [sl]
 80136be:	f8ab 3000 	strh.w	r3, [fp]
 80136c2:	4648      	mov	r0, r9
 80136c4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80136c8:	f005 ff44 	bl	8019554 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80136cc:	2200      	movs	r2, #0
 80136ce:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80136d2:	4611      	mov	r1, r2
 80136d4:	4628      	mov	r0, r5
 80136d6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80136da:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80136de:	f7f9 ffa3 	bl	800d628 <_ZN8touchgfx8Drawable5setXYEss>
 80136e2:	2301      	movs	r3, #1
 80136e4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80136e8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80136ec:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	dd5c      	ble.n	80137ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80136f4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	dd58      	ble.n	80137ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80136fc:	462a      	mov	r2, r5
 80136fe:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013702:	ab0a      	add	r3, sp, #40	; 0x28
 8013704:	6851      	ldr	r1, [r2, #4]
 8013706:	c303      	stmia	r3!, {r0, r1}
 8013708:	4631      	mov	r1, r6
 801370a:	a80a      	add	r0, sp, #40	; 0x28
 801370c:	f7ff fc00 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 8013710:	2100      	movs	r1, #0
 8013712:	4b38      	ldr	r3, [pc, #224]	; (80137f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013714:	910c      	str	r1, [sp, #48]	; 0x30
 8013716:	f9b3 2000 	ldrsh.w	r2, [r3]
 801371a:	4b37      	ldr	r3, [pc, #220]	; (80137f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801371c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013724:	aa0a      	add	r2, sp, #40	; 0x28
 8013726:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801372a:	ab08      	add	r3, sp, #32
 801372c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013730:	e883 0003 	stmia.w	r3, {r0, r1}
 8013734:	4618      	mov	r0, r3
 8013736:	a90c      	add	r1, sp, #48	; 0x30
 8013738:	f7ff fbea 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 801373c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801373e:	2b00      	cmp	r3, #0
 8013740:	d13c      	bne.n	80137bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8013742:	2000      	movs	r0, #0
 8013744:	2600      	movs	r6, #0
 8013746:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801374a:	696b      	ldr	r3, [r5, #20]
 801374c:	682a      	ldr	r2, [r5, #0]
 801374e:	616e      	str	r6, [r5, #20]
 8013750:	9305      	str	r3, [sp, #20]
 8013752:	6892      	ldr	r2, [r2, #8]
 8013754:	a908      	add	r1, sp, #32
 8013756:	4628      	mov	r0, r5
 8013758:	4790      	blx	r2
 801375a:	9b05      	ldr	r3, [sp, #20]
 801375c:	4652      	mov	r2, sl
 801375e:	616b      	str	r3, [r5, #20]
 8013760:	4649      	mov	r1, r9
 8013762:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8013766:	4628      	mov	r0, r5
 8013768:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801376c:	f7f9 ff5c 	bl	800d628 <_ZN8touchgfx8Drawable5setXYEss>
 8013770:	9a01      	ldr	r2, [sp, #4]
 8013772:	4b23      	ldr	r3, [pc, #140]	; (8013800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8013774:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8013778:	801a      	strh	r2, [r3, #0]
 801377a:	9a02      	ldr	r2, [sp, #8]
 801377c:	4b21      	ldr	r3, [pc, #132]	; (8013804 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801377e:	4620      	mov	r0, r4
 8013780:	801a      	strh	r2, [r3, #0]
 8013782:	9a03      	ldr	r2, [sp, #12]
 8013784:	4b1b      	ldr	r3, [pc, #108]	; (80137f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013786:	801a      	strh	r2, [r3, #0]
 8013788:	4b1b      	ldr	r3, [pc, #108]	; (80137f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801378a:	9a04      	ldr	r2, [sp, #16]
 801378c:	801a      	strh	r2, [r3, #0]
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013792:	4798      	blx	r3
 8013794:	6823      	ldr	r3, [r4, #0]
 8013796:	4620      	mov	r0, r4
 8013798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801379a:	4798      	blx	r3
 801379c:	b00f      	add	sp, #60	; 0x3c
 801379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a2:	883b      	ldrh	r3, [r7, #0]
 80137a4:	f8ab 0000 	strh.w	r0, [fp]
 80137a8:	f8aa 3000 	strh.w	r3, [sl]
 80137ac:	e789      	b.n	80136c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80137ae:	462a      	mov	r2, r5
 80137b0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80137b4:	ab0a      	add	r3, sp, #40	; 0x28
 80137b6:	6851      	ldr	r1, [r2, #4]
 80137b8:	c303      	stmia	r3!, {r0, r1}
 80137ba:	e7a9      	b.n	8013710 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80137bc:	a807      	add	r0, sp, #28
 80137be:	f006 f8cd 	bl	801995c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80137c2:	4606      	mov	r6, r0
 80137c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80137c6:	6803      	ldr	r3, [r0, #0]
 80137c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ca:	4798      	blx	r3
 80137cc:	4286      	cmp	r6, r0
 80137ce:	d1b8      	bne.n	8013742 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80137d0:	f7fa f82c 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 80137d4:	6803      	ldr	r3, [r0, #0]
 80137d6:	4606      	mov	r6, r0
 80137d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137da:	a807      	add	r0, sp, #28
 80137dc:	9305      	str	r3, [sp, #20]
 80137de:	f006 f8bd 	bl	801995c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80137e2:	9b05      	ldr	r3, [sp, #20]
 80137e4:	4601      	mov	r1, r0
 80137e6:	4630      	mov	r0, r6
 80137e8:	4798      	blx	r3
 80137ea:	f080 0001 	eor.w	r0, r0, #1
 80137ee:	b2c0      	uxtb	r0, r0
 80137f0:	e7a8      	b.n	8013744 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80137f2:	bf00      	nop
 80137f4:	2004f624 	.word	0x2004f624
 80137f8:	2004f626 	.word	0x2004f626
 80137fc:	2004f628 	.word	0x2004f628
 8013800:	2004f62a 	.word	0x2004f62a
 8013804:	2004f62c 	.word	0x2004f62c

08013808 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8013808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801380c:	461d      	mov	r5, r3
 801380e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013812:	2400      	movs	r4, #0
 8013814:	b08a      	sub	sp, #40	; 0x28
 8013816:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801381a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801381e:	4690      	mov	r8, r2
 8013820:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013824:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013828:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801382c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013830:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013834:	4607      	mov	r7, r0
 8013836:	f8ad 301c 	strh.w	r3, [sp, #28]
 801383a:	9404      	str	r4, [sp, #16]
 801383c:	f88d 4020 	strb.w	r4, [sp, #32]
 8013840:	f7fd fc26 	bl	8011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013844:	fb06 8505 	mla	r5, r6, r5, r8
 8013848:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	9505      	str	r5, [sp, #20]
 8013850:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013854:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8013858:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801385c:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8013860:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8013864:	6803      	ldr	r3, [r0, #0]
 8013866:	a901      	add	r1, sp, #4
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	4798      	blx	r3
 801386c:	b00a      	add	sp, #40	; 0x28
 801386e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013872 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8013872:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013876:	2400      	movs	r4, #0
 8013878:	461d      	mov	r5, r3
 801387a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801387e:	4691      	mov	r9, r2
 8013880:	b08b      	sub	sp, #44	; 0x2c
 8013882:	4688      	mov	r8, r1
 8013884:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8013888:	4607      	mov	r7, r0
 801388a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801388e:	9404      	str	r4, [sp, #16]
 8013890:	f7fd fbfe 	bl	8011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013894:	fb06 9505 	mla	r5, r6, r5, r9
 8013898:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801389c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80138a0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80138a4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	9505      	str	r5, [sp, #20]
 80138ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 80138b0:	f8ad 401c 	strh.w	r4, [sp, #28]
 80138b4:	f8ad 601e 	strh.w	r6, [sp, #30]
 80138b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80138bc:	f8ad 4020 	strh.w	r4, [sp, #32]
 80138c0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80138c4:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80138c8:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80138cc:	6803      	ldr	r3, [r0, #0]
 80138ce:	a901      	add	r1, sp, #4
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	4798      	blx	r3
 80138d4:	b00b      	add	sp, #44	; 0x2c
 80138d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080138dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80138dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138e0:	4698      	mov	r8, r3
 80138e2:	2300      	movs	r3, #0
 80138e4:	b08a      	sub	sp, #40	; 0x28
 80138e6:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80138ea:	4606      	mov	r6, r0
 80138ec:	2d0b      	cmp	r5, #11
 80138ee:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80138f2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80138f6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80138fa:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80138fe:	9304      	str	r3, [sp, #16]
 8013900:	d137      	bne.n	8013972 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8013902:	2380      	movs	r3, #128	; 0x80
 8013904:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013908:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801390c:	f88d 0020 	strb.w	r0, [sp, #32]
 8013910:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013914:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013918:	4630      	mov	r0, r6
 801391a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801391e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013922:	9203      	str	r2, [sp, #12]
 8013924:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013928:	f7fd fbb2 	bl	8011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801392c:	2c0b      	cmp	r4, #11
 801392e:	bf8c      	ite	hi
 8013930:	2100      	movhi	r1, #0
 8013932:	4b1b      	ldrls	r3, [pc, #108]	; (80139a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8013934:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8013938:	bf98      	it	ls
 801393a:	5d19      	ldrbls	r1, [r3, r4]
 801393c:	fb02 8307 	mla	r3, r2, r7, r8
 8013940:	10c9      	asrs	r1, r1, #3
 8013942:	fb01 0003 	mla	r0, r1, r3, r0
 8013946:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801394a:	9005      	str	r0, [sp, #20]
 801394c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8013950:	2300      	movs	r3, #0
 8013952:	6870      	ldr	r0, [r6, #4]
 8013954:	f8ad 701e 	strh.w	r7, [sp, #30]
 8013958:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801395c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8013960:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013964:	6803      	ldr	r3, [r0, #0]
 8013966:	a901      	add	r1, sp, #4
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	4798      	blx	r3
 801396c:	b00a      	add	sp, #40	; 0x28
 801396e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013972:	2d02      	cmp	r5, #2
 8013974:	d109      	bne.n	801398a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8013976:	28ff      	cmp	r0, #255	; 0xff
 8013978:	d105      	bne.n	8013986 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801397a:	f1bc 0f00 	cmp.w	ip, #0
 801397e:	bf14      	ite	ne
 8013980:	2340      	movne	r3, #64	; 0x40
 8013982:	2320      	moveq	r3, #32
 8013984:	e7be      	b.n	8013904 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013986:	2340      	movs	r3, #64	; 0x40
 8013988:	e7bc      	b.n	8013904 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801398a:	28ff      	cmp	r0, #255	; 0xff
 801398c:	d105      	bne.n	801399a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801398e:	f1bc 0f00 	cmp.w	ip, #0
 8013992:	bf14      	ite	ne
 8013994:	2304      	movne	r3, #4
 8013996:	2301      	moveq	r3, #1
 8013998:	e7b4      	b.n	8013904 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801399a:	2304      	movs	r3, #4
 801399c:	e7b2      	b.n	8013904 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801399e:	bf00      	nop
 80139a0:	08028508 	.word	0x08028508

080139a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80139a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a8:	b08b      	sub	sp, #44	; 0x2c
 80139aa:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80139ae:	461d      	mov	r5, r3
 80139b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80139b4:	bf14      	ite	ne
 80139b6:	2308      	movne	r3, #8
 80139b8:	2302      	moveq	r3, #2
 80139ba:	2400      	movs	r4, #0
 80139bc:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80139c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139c4:	4688      	mov	r8, r1
 80139c6:	4693      	mov	fp, r2
 80139c8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80139cc:	9404      	str	r4, [sp, #16]
 80139ce:	4607      	mov	r7, r0
 80139d0:	f7fd fb5e 	bl	8011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80139d4:	2e0b      	cmp	r6, #11
 80139d6:	bf98      	it	ls
 80139d8:	4b15      	ldrls	r3, [pc, #84]	; (8013a30 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80139da:	fb05 b50a 	mla	r5, r5, sl, fp
 80139de:	bf98      	it	ls
 80139e0:	5d9c      	ldrbls	r4, [r3, r6]
 80139e2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80139e6:	10e4      	asrs	r4, r4, #3
 80139e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80139ec:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80139f0:	fb04 0405 	mla	r4, r4, r5, r0
 80139f4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80139f8:	2300      	movs	r3, #0
 80139fa:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	9405      	str	r4, [sp, #20]
 8013a02:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013a06:	f8ad a01e 	strh.w	sl, [sp, #30]
 8013a0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a0e:	f88d 9020 	strb.w	r9, [sp, #32]
 8013a12:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8013a16:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013a1a:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8013a1e:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8013a22:	6803      	ldr	r3, [r0, #0]
 8013a24:	a901      	add	r1, sp, #4
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	4798      	blx	r3
 8013a2a:	b00b      	add	sp, #44	; 0x2c
 8013a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a30:	08028508 	.word	0x08028508

08013a34 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a38:	461e      	mov	r6, r3
 8013a3a:	4b0a      	ldr	r3, [pc, #40]	; (8013a64 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013a3c:	460f      	mov	r7, r1
 8013a3e:	881d      	ldrh	r5, [r3, #0]
 8013a40:	4690      	mov	r8, r2
 8013a42:	f7f9 fef3 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8013a46:	6803      	ldr	r3, [r0, #0]
 8013a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4a:	4798      	blx	r3
 8013a4c:	280b      	cmp	r0, #11
 8013a4e:	bf8e      	itee	hi
 8013a50:	2400      	movhi	r4, #0
 8013a52:	4b05      	ldrls	r3, [pc, #20]	; (8013a68 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013a54:	5c1c      	ldrbls	r4, [r3, r0]
 8013a56:	fb08 7005 	mla	r0, r8, r5, r7
 8013a5a:	10e4      	asrs	r4, r4, #3
 8013a5c:	fb04 6000 	mla	r0, r4, r0, r6
 8013a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a64:	2004f62a 	.word	0x2004f62a
 8013a68:	08028508 	.word	0x08028508

08013a6c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a6e:	2500      	movs	r5, #0
 8013a70:	b08b      	sub	sp, #44	; 0x2c
 8013a72:	461f      	mov	r7, r3
 8013a74:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013a78:	4604      	mov	r4, r0
 8013a7a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013a7e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013a82:	4616      	mov	r6, r2
 8013a84:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013a88:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013a8c:	9504      	str	r5, [sp, #16]
 8013a8e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013a92:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013a96:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013a9a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013a9e:	f88d 3020 	strb.w	r3, [sp, #32]
 8013aa2:	f7fd faf5 	bl	8011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013aa6:	463a      	mov	r2, r7
 8013aa8:	4631      	mov	r1, r6
 8013aaa:	4603      	mov	r3, r0
 8013aac:	4620      	mov	r0, r4
 8013aae:	f7ff ffc1 	bl	8013a34 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013ab2:	4b0e      	ldr	r3, [pc, #56]	; (8013aec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8013ab4:	9005      	str	r0, [sp, #20]
 8013ab6:	881b      	ldrh	r3, [r3, #0]
 8013ab8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013abc:	f7f9 feb6 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8013ac0:	6803      	ldr	r3, [r0, #0]
 8013ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ac4:	4798      	blx	r3
 8013ac6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013ac8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8013acc:	9304      	str	r3, [sp, #16]
 8013ace:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013ad2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8013ad6:	6860      	ldr	r0, [r4, #4]
 8013ad8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8013adc:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8013ae0:	6803      	ldr	r3, [r0, #0]
 8013ae2:	a901      	add	r1, sp, #4
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	4798      	blx	r3
 8013ae8:	b00b      	add	sp, #44	; 0x2c
 8013aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aec:	2004f62a 	.word	0x2004f62a

08013af0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013af2:	b08d      	sub	sp, #52	; 0x34
 8013af4:	466b      	mov	r3, sp
 8013af6:	e883 0006 	stmia.w	r3, {r1, r2}
 8013afa:	2300      	movs	r3, #0
 8013afc:	2501      	movs	r5, #1
 8013afe:	9306      	str	r3, [sp, #24]
 8013b00:	6803      	ldr	r3, [r0, #0]
 8013b02:	9503      	str	r5, [sp, #12]
 8013b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b06:	4604      	mov	r4, r0
 8013b08:	f8bd 6000 	ldrh.w	r6, [sp]
 8013b0c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013b10:	4798      	blx	r3
 8013b12:	463a      	mov	r2, r7
 8013b14:	4631      	mov	r1, r6
 8013b16:	4603      	mov	r3, r0
 8013b18:	4620      	mov	r0, r4
 8013b1a:	f7ff ff8b 	bl	8013a34 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013b1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013b20:	9004      	str	r0, [sp, #16]
 8013b22:	9307      	str	r3, [sp, #28]
 8013b24:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013b28:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013b2c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013b30:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013b34:	4b0e      	ldr	r3, [pc, #56]	; (8013b70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013b36:	881b      	ldrh	r3, [r3, #0]
 8013b38:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013b3c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013b40:	f7f9 fe74 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8013b44:	6803      	ldr	r3, [r0, #0]
 8013b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b48:	4798      	blx	r3
 8013b4a:	23ff      	movs	r3, #255	; 0xff
 8013b4c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013b50:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013b54:	6860      	ldr	r0, [r4, #4]
 8013b56:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013b5a:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013b5e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013b62:	6803      	ldr	r3, [r0, #0]
 8013b64:	a903      	add	r1, sp, #12
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	4798      	blx	r3
 8013b6a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013b6c:	b00d      	add	sp, #52	; 0x34
 8013b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b70:	2004f62a 	.word	0x2004f62a

08013b74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b78:	b08c      	sub	sp, #48	; 0x30
 8013b7a:	466d      	mov	r5, sp
 8013b7c:	461e      	mov	r6, r3
 8013b7e:	2300      	movs	r3, #0
 8013b80:	e885 0006 	stmia.w	r5, {r1, r2}
 8013b84:	2501      	movs	r5, #1
 8013b86:	9306      	str	r3, [sp, #24]
 8013b88:	6803      	ldr	r3, [r0, #0]
 8013b8a:	9503      	str	r5, [sp, #12]
 8013b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b8e:	4604      	mov	r4, r0
 8013b90:	f8bd 7000 	ldrh.w	r7, [sp]
 8013b94:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013b98:	4798      	blx	r3
 8013b9a:	4642      	mov	r2, r8
 8013b9c:	4639      	mov	r1, r7
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f7ff ff47 	bl	8013a34 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013ba6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013baa:	9004      	str	r0, [sp, #16]
 8013bac:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013bb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013bb4:	9607      	str	r6, [sp, #28]
 8013bb6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013bba:	4b10      	ldr	r3, [pc, #64]	; (8013bfc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013bbc:	881b      	ldrh	r3, [r3, #0]
 8013bbe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013bc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013bc4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013bc8:	f7f9 fe30 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8013bcc:	6803      	ldr	r3, [r0, #0]
 8013bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bd0:	4798      	blx	r3
 8013bd2:	23ff      	movs	r3, #255	; 0xff
 8013bd4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013bd8:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013bdc:	6860      	ldr	r0, [r4, #4]
 8013bde:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013be2:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013be6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013bea:	6803      	ldr	r3, [r0, #0]
 8013bec:	a903      	add	r1, sp, #12
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	4798      	blx	r3
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	b00c      	add	sp, #48	; 0x30
 8013bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bfa:	bf00      	nop
 8013bfc:	2004f62a 	.word	0x2004f62a

08013c00 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c02:	b085      	sub	sp, #20
 8013c04:	ac02      	add	r4, sp, #8
 8013c06:	e884 0006 	stmia.w	r4, {r1, r2}
 8013c0a:	4605      	mov	r5, r0
 8013c0c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013c10:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013c14:	f7fd fa3c 	bl	8011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013c18:	463a      	mov	r2, r7
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	4631      	mov	r1, r6
 8013c1e:	4628      	mov	r0, r5
 8013c20:	f7ff ff08 	bl	8013a34 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013c24:	4a05      	ldr	r2, [pc, #20]	; (8013c3c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013c26:	682b      	ldr	r3, [r5, #0]
 8013c28:	8812      	ldrh	r2, [r2, #0]
 8013c2a:	9200      	str	r2, [sp, #0]
 8013c2c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8013c2e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013c32:	4603      	mov	r3, r0
 8013c34:	4628      	mov	r0, r5
 8013c36:	47b0      	blx	r6
 8013c38:	b005      	add	sp, #20
 8013c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c3c:	2004f62a 	.word	0x2004f62a

08013c40 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013c40:	b570      	push	{r4, r5, r6, lr}
 8013c42:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8013c46:	4604      	mov	r4, r0
 8013c48:	b19b      	cbz	r3, 8013c72 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013c4a:	2002      	movs	r0, #2
 8013c4c:	f7fd f8e4 	bl	8010e18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013c50:	2300      	movs	r3, #0
 8013c52:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013c56:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8013c5a:	6823      	ldr	r3, [r4, #0]
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8013c62:	f7fd fa15 	bl	8011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013c66:	462b      	mov	r3, r5
 8013c68:	4601      	mov	r1, r0
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c70:	4718      	bx	r3
 8013c72:	bd70      	pop	{r4, r5, r6, pc}

08013c74 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013c74:	b538      	push	{r3, r4, r5, lr}
 8013c76:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	428b      	cmp	r3, r1
 8013c7e:	460d      	mov	r5, r1
 8013c80:	d006      	beq.n	8013c90 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013c82:	6803      	ldr	r3, [r0, #0]
 8013c84:	b929      	cbnz	r1, 8013c92 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013c86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013c8a:	4798      	blx	r3
 8013c8c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8013c90:	bd38      	pop	{r3, r4, r5, pc}
 8013c92:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013c96:	e7f8      	b.n	8013c8a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013c98 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013c98:	b510      	push	{r4, lr}
 8013c9a:	4b0d      	ldr	r3, [pc, #52]	; (8013cd0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	781b      	ldrb	r3, [r3, #0]
 8013ca0:	b95b      	cbnz	r3, 8013cba <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013ca2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013ca6:	2b02      	cmp	r3, #2
 8013ca8:	d007      	beq.n	8013cba <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013caa:	6840      	ldr	r0, [r0, #4]
 8013cac:	f000 f926 	bl	8013efc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013cb0:	b118      	cbz	r0, 8013cba <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013cb2:	6862      	ldr	r2, [r4, #4]
 8013cb4:	7a53      	ldrb	r3, [r2, #9]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d0fc      	beq.n	8013cb4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013cba:	f7fd fc55 	bl	8011568 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	2100      	movs	r1, #0
 8013cc2:	f7ff ffd7 	bl	8013c74 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	f7fd f9e2 	bl	8011090 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013ccc:	bd10      	pop	{r4, pc}
 8013cce:	bf00      	nop
 8013cd0:	2004f62e 	.word	0x2004f62e

08013cd4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8013cd4:	b570      	push	{r4, r5, r6, lr}
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	6803      	ldr	r3, [r0, #0]
 8013cda:	b919      	cbnz	r1, 8013ce4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8013cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ce2:	4718      	bx	r3
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8013cea:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8013cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cf0:	4798      	blx	r3
 8013cf2:	4605      	mov	r5, r0
 8013cf4:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	2101      	movs	r1, #1
 8013cfc:	f7ff ffba 	bl	8013c74 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013d00:	4628      	mov	r0, r5
 8013d02:	bd70      	pop	{r4, r5, r6, pc}

08013d04 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013d04:	4770      	bx	lr

08013d06 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013d06:	2000      	movs	r0, #0
 8013d08:	4770      	bx	lr

08013d0a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013d0a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013d0e:	1a13      	subs	r3, r2, r0
 8013d10:	4258      	negs	r0, r3
 8013d12:	4158      	adcs	r0, r3
 8013d14:	4770      	bx	lr

08013d16 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013d16:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013d1a:	1a9b      	subs	r3, r3, r2
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	bfdc      	itt	le
 8013d20:	6882      	ldrle	r2, [r0, #8]
 8013d22:	189b      	addle	r3, r3, r2
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	bfcc      	ite	gt
 8013d28:	2000      	movgt	r0, #0
 8013d2a:	2001      	movle	r0, #1
 8013d2c:	4770      	bx	lr

08013d2e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013d2e:	6902      	ldr	r2, [r0, #16]
 8013d30:	6843      	ldr	r3, [r0, #4]
 8013d32:	2024      	movs	r0, #36	; 0x24
 8013d34:	fb00 3002 	mla	r0, r0, r2, r3
 8013d38:	4770      	bx	lr

08013d3a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013d3a:	6803      	ldr	r3, [r0, #0]
 8013d3c:	691b      	ldr	r3, [r3, #16]
 8013d3e:	4718      	bx	r3

08013d40 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013d40:	2301      	movs	r3, #1
 8013d42:	b570      	push	{r4, r5, r6, lr}
 8013d44:	7203      	strb	r3, [r0, #8]
 8013d46:	4604      	mov	r4, r0
 8013d48:	6840      	ldr	r0, [r0, #4]
 8013d4a:	6803      	ldr	r3, [r0, #0]
 8013d4c:	699b      	ldr	r3, [r3, #24]
 8013d4e:	4798      	blx	r3
 8013d50:	6803      	ldr	r3, [r0, #0]
 8013d52:	4605      	mov	r5, r0
 8013d54:	2b40      	cmp	r3, #64	; 0x40
 8013d56:	d00c      	beq.n	8013d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d58:	d810      	bhi.n	8013d7c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013d5a:	2b04      	cmp	r3, #4
 8013d5c:	d01d      	beq.n	8013d9a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013d5e:	d804      	bhi.n	8013d6a <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d006      	beq.n	8013d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d64:	2b02      	cmp	r3, #2
 8013d66:	d02c      	beq.n	8013dc2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013d68:	bd70      	pop	{r4, r5, r6, pc}
 8013d6a:	2b08      	cmp	r3, #8
 8013d6c:	d01d      	beq.n	8013daa <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013d6e:	2b20      	cmp	r3, #32
 8013d70:	d1fa      	bne.n	8013d68 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013d72:	6823      	ldr	r3, [r4, #0]
 8013d74:	4620      	mov	r0, r4
 8013d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d78:	4798      	blx	r3
 8013d7a:	e013      	b.n	8013da4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013d80:	d0f7      	beq.n	8013d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d82:	d804      	bhi.n	8013d8e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013d84:	2b80      	cmp	r3, #128	; 0x80
 8013d86:	d0f4      	beq.n	8013d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013d8c:	e7f0      	b.n	8013d70 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d92:	d0ee      	beq.n	8013d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013d98:	e7e5      	b.n	8013d66 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013d9a:	6823      	ldr	r3, [r4, #0]
 8013d9c:	7f01      	ldrb	r1, [r0, #28]
 8013d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013da0:	4620      	mov	r0, r4
 8013da2:	4798      	blx	r3
 8013da4:	6823      	ldr	r3, [r4, #0]
 8013da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013da8:	e006      	b.n	8013db8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013daa:	6823      	ldr	r3, [r4, #0]
 8013dac:	7f01      	ldrb	r1, [r0, #28]
 8013dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013db0:	4620      	mov	r0, r4
 8013db2:	4798      	blx	r3
 8013db4:	6823      	ldr	r3, [r4, #0]
 8013db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013db8:	4629      	mov	r1, r5
 8013dba:	4620      	mov	r0, r4
 8013dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dc0:	4718      	bx	r3
 8013dc2:	6823      	ldr	r3, [r4, #0]
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dc8:	4798      	blx	r3
 8013dca:	e7f3      	b.n	8013db4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013dcc <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013dcc:	4770      	bx	lr

08013dce <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013dce:	4770      	bx	lr

08013dd0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013dd0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013dd4:	1ad2      	subs	r2, r2, r3
 8013dd6:	2a00      	cmp	r2, #0
 8013dd8:	b510      	push	{r4, lr}
 8013dda:	bfdc      	itt	le
 8013ddc:	6884      	ldrle	r4, [r0, #8]
 8013dde:	1912      	addle	r2, r2, r4
 8013de0:	2a01      	cmp	r2, #1
 8013de2:	dd16      	ble.n	8013e12 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013de4:	2424      	movs	r4, #36	; 0x24
 8013de6:	6842      	ldr	r2, [r0, #4]
 8013de8:	fb04 2303 	mla	r3, r4, r3, r2
 8013dec:	f101 0220 	add.w	r2, r1, #32
 8013df0:	f851 4b04 	ldr.w	r4, [r1], #4
 8013df4:	4291      	cmp	r1, r2
 8013df6:	f843 4b04 	str.w	r4, [r3], #4
 8013dfa:	d1f9      	bne.n	8013df0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013dfc:	780a      	ldrb	r2, [r1, #0]
 8013dfe:	701a      	strb	r2, [r3, #0]
 8013e00:	68c3      	ldr	r3, [r0, #12]
 8013e02:	6882      	ldr	r2, [r0, #8]
 8013e04:	3301      	adds	r3, #1
 8013e06:	429a      	cmp	r2, r3
 8013e08:	bfd8      	it	le
 8013e0a:	1a9b      	suble	r3, r3, r2
 8013e0c:	f3bf 8f5b 	dmb	ish
 8013e10:	60c3      	str	r3, [r0, #12]
 8013e12:	bd10      	pop	{r4, pc}

08013e14 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013e14:	6903      	ldr	r3, [r0, #16]
 8013e16:	6882      	ldr	r2, [r0, #8]
 8013e18:	3301      	adds	r3, #1
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	bfd8      	it	le
 8013e1e:	1a9b      	suble	r3, r3, r2
 8013e20:	f3bf 8f5b 	dmb	ish
 8013e24:	6103      	str	r3, [r0, #16]
 8013e26:	4770      	bx	lr

08013e28 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013e28:	b570      	push	{r4, r5, r6, lr}
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	460e      	mov	r6, r1
 8013e2e:	6860      	ldr	r0, [r4, #4]
 8013e30:	6803      	ldr	r3, [r0, #0]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	4798      	blx	r3
 8013e36:	2800      	cmp	r0, #0
 8013e38:	d1f9      	bne.n	8013e2e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013e3a:	4d0d      	ldr	r5, [pc, #52]	; (8013e70 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013e3c:	6828      	ldr	r0, [r5, #0]
 8013e3e:	6803      	ldr	r3, [r0, #0]
 8013e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e42:	4798      	blx	r3
 8013e44:	f7fd fbd2 	bl	80115ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013e48:	6828      	ldr	r0, [r5, #0]
 8013e4a:	2101      	movs	r1, #1
 8013e4c:	f7ff ff12 	bl	8013c74 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013e50:	6860      	ldr	r0, [r4, #4]
 8013e52:	4631      	mov	r1, r6
 8013e54:	6803      	ldr	r3, [r0, #0]
 8013e56:	689b      	ldr	r3, [r3, #8]
 8013e58:	4798      	blx	r3
 8013e5a:	6823      	ldr	r3, [r4, #0]
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e60:	4798      	blx	r3
 8013e62:	6828      	ldr	r0, [r5, #0]
 8013e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e68:	6803      	ldr	r3, [r0, #0]
 8013e6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e6c:	4718      	bx	r3
 8013e6e:	bf00      	nop
 8013e70:	2004f630 	.word	0x2004f630

08013e74 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013e74:	b508      	push	{r3, lr}
 8013e76:	f7fd fb77 	bl	8011568 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013e7e:	f7fd bb93 	b.w	80115a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013e82 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013e82:	b510      	push	{r4, lr}
 8013e84:	4604      	mov	r4, r0
 8013e86:	6840      	ldr	r0, [r0, #4]
 8013e88:	6803      	ldr	r3, [r0, #0]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	4798      	blx	r3
 8013e8e:	b948      	cbnz	r0, 8013ea4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013e90:	7a63      	ldrb	r3, [r4, #9]
 8013e92:	b13b      	cbz	r3, 8013ea4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013e94:	7a23      	ldrb	r3, [r4, #8]
 8013e96:	b92b      	cbnz	r3, 8013ea4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013e98:	6823      	ldr	r3, [r4, #0]
 8013e9a:	4620      	mov	r0, r4
 8013e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ea2:	4718      	bx	r3
 8013ea4:	bd10      	pop	{r4, pc}

08013ea6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013ea6:	b570      	push	{r4, r5, r6, lr}
 8013ea8:	4604      	mov	r4, r0
 8013eaa:	6840      	ldr	r0, [r0, #4]
 8013eac:	6803      	ldr	r3, [r0, #0]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	4798      	blx	r3
 8013eb2:	4605      	mov	r5, r0
 8013eb4:	b930      	cbnz	r0, 8013ec4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013eb6:	7a23      	ldrb	r3, [r4, #8]
 8013eb8:	b123      	cbz	r3, 8013ec4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013eba:	6860      	ldr	r0, [r4, #4]
 8013ebc:	6803      	ldr	r3, [r0, #0]
 8013ebe:	695b      	ldr	r3, [r3, #20]
 8013ec0:	4798      	blx	r3
 8013ec2:	7225      	strb	r5, [r4, #8]
 8013ec4:	6860      	ldr	r0, [r4, #4]
 8013ec6:	6803      	ldr	r3, [r0, #0]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	4798      	blx	r3
 8013ecc:	b928      	cbnz	r0, 8013eda <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013ece:	6823      	ldr	r3, [r4, #0]
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed8:	4718      	bx	r3
 8013eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ede:	f7fd bb91 	b.w	8011604 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013ee4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013ee4:	6082      	str	r2, [r0, #8]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	b510      	push	{r4, lr}
 8013eea:	4c03      	ldr	r4, [pc, #12]	; (8013ef8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013eec:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013ef0:	e9c0 4100 	strd	r4, r1, [r0]
 8013ef4:	bd10      	pop	{r4, pc}
 8013ef6:	bf00      	nop
 8013ef8:	08028644 	.word	0x08028644

08013efc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013efc:	6840      	ldr	r0, [r0, #4]
 8013efe:	6803      	ldr	r3, [r0, #0]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	4718      	bx	r3

08013f04 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8013f04:	b508      	push	{r3, lr}
 8013f06:	4b05      	ldr	r3, [pc, #20]	; (8013f1c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8013f08:	6818      	ldr	r0, [r3, #0]
 8013f0a:	6803      	ldr	r3, [r0, #0]
 8013f0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013f10:	4798      	blx	r3
 8013f12:	1e43      	subs	r3, r0, #1
 8013f14:	4258      	negs	r0, r3
 8013f16:	4158      	adcs	r0, r3
 8013f18:	bd08      	pop	{r3, pc}
 8013f1a:	bf00      	nop
 8013f1c:	2004f630 	.word	0x2004f630

08013f20 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8013f20:	b430      	push	{r4, r5}
 8013f22:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8013f26:	8a02      	ldrh	r2, [r0, #16]
 8013f28:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8013f2c:	9202      	str	r2, [sp, #8]
 8013f2e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013f32:	68c2      	ldr	r2, [r0, #12]
 8013f34:	4629      	mov	r1, r5
 8013f36:	4620      	mov	r0, r4
 8013f38:	bc30      	pop	{r4, r5}
 8013f3a:	f7fd bfdb 	b.w	8011ef4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08013f3e <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8013f3e:	f7fd bfc1 	b.w	8011ec4 <_ZN8touchgfx5paint6rgb5658tearDownEv>

08013f42 <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 8013f42:	4602      	mov	r2, r0
 8013f44:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8013f48:	cb03      	ldmia	r3!, {r0, r1}
 8013f4a:	6010      	str	r0, [r2, #0]
 8013f4c:	6051      	str	r1, [r2, #4]
 8013f4e:	4610      	mov	r0, r2
 8013f50:	4770      	bx	lr

08013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8013f52:	b507      	push	{r0, r1, r2, lr}
 8013f54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013f58:	ab01      	add	r3, sp, #4
 8013f5a:	6809      	ldr	r1, [r1, #0]
 8013f5c:	6800      	ldr	r0, [r0, #0]
 8013f5e:	f004 f87e 	bl	801805e <_ZN8touchgfx6muldivElllRl>
 8013f62:	b003      	add	sp, #12
 8013f64:	f85d fb04 	ldr.w	pc, [sp], #4

08013f68 <_ZN8touchgfx7CWRUtil4sineEi>:
 8013f68:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8013f6c:	fb90 f2f3 	sdiv	r2, r0, r3
 8013f70:	fb02 0013 	mls	r0, r2, r3, r0
 8013f74:	2800      	cmp	r0, #0
 8013f76:	bfb8      	it	lt
 8013f78:	18c0      	addlt	r0, r0, r3
 8013f7a:	285a      	cmp	r0, #90	; 0x5a
 8013f7c:	4b09      	ldr	r3, [pc, #36]	; (8013fa4 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8013f7e:	dc02      	bgt.n	8013f86 <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8013f80:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013f84:	4770      	bx	lr
 8013f86:	28b4      	cmp	r0, #180	; 0xb4
 8013f88:	dc02      	bgt.n	8013f90 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8013f8a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8013f8e:	e7f7      	b.n	8013f80 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8013f90:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8013f94:	bfd4      	ite	le
 8013f96:	38b4      	suble	r0, #180	; 0xb4
 8013f98:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8013f9c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013fa0:	4240      	negs	r0, r0
 8013fa2:	4770      	bx	lr
 8013fa4:	080286a8 	.word	0x080286a8

08013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8013fa8:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8013fac:	fb90 f2f3 	sdiv	r2, r0, r3
 8013fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013fb2:	fb02 0013 	mls	r0, r2, r3, r0
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	bfb8      	it	lt
 8013fba:	18c0      	addlt	r0, r0, r3
 8013fbc:	1144      	asrs	r4, r0, #5
 8013fbe:	f000 061f 	and.w	r6, r0, #31
 8013fc2:	4620      	mov	r0, r4
 8013fc4:	f7ff ffd0 	bl	8013f68 <_ZN8touchgfx7CWRUtil4sineEi>
 8013fc8:	4605      	mov	r5, r0
 8013fca:	b90e      	cbnz	r6, 8013fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8013fcc:	b002      	add	sp, #8
 8013fce:	bd70      	pop	{r4, r5, r6, pc}
 8013fd0:	1c60      	adds	r0, r4, #1
 8013fd2:	f7ff ffc9 	bl	8013f68 <_ZN8touchgfx7CWRUtil4sineEi>
 8013fd6:	ab01      	add	r3, sp, #4
 8013fd8:	2220      	movs	r2, #32
 8013fda:	4631      	mov	r1, r6
 8013fdc:	1b40      	subs	r0, r0, r5
 8013fde:	f004 f83e 	bl	801805e <_ZN8touchgfx6muldivElllRl>
 8013fe2:	4428      	add	r0, r5
 8013fe4:	e7f2      	b.n	8013fcc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

08013fe6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 8013fe6:	b507      	push	{r0, r1, r2, lr}
 8013fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013fec:	ab01      	add	r3, sp, #4
 8013fee:	0140      	lsls	r0, r0, #5
 8013ff0:	f004 f835 	bl	801805e <_ZN8touchgfx6muldivElllRl>
 8013ff4:	2320      	movs	r3, #32
 8013ff6:	fb90 f0f3 	sdiv	r0, r0, r3
 8013ffa:	b003      	add	sp, #12
 8013ffc:	f85d fb04 	ldr.w	pc, [sp], #4

08014000 <_ZN8touchgfx13AbstractShapeC1Ev>:
 8014000:	b510      	push	{r4, lr}
 8014002:	4604      	mov	r4, r0
 8014004:	f000 fe28 	bl	8014c58 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014008:	4b07      	ldr	r3, [pc, #28]	; (8014028 <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 801400a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801400e:	6023      	str	r3, [r4, #0]
 8014010:	2300      	movs	r3, #0
 8014012:	e9c4 220e 	strd	r2, r2, [r4, #56]	; 0x38
 8014016:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801401a:	6363      	str	r3, [r4, #52]	; 0x34
 801401c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 8014020:	60a3      	str	r3, [r4, #8]
 8014022:	4620      	mov	r0, r4
 8014024:	bd10      	pop	{r4, pc}
 8014026:	bf00      	nop
 8014028:	08028768 	.word	0x08028768

0801402c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 801402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014030:	2500      	movs	r5, #0
 8014032:	6803      	ldr	r3, [r0, #0]
 8014034:	b087      	sub	sp, #28
 8014036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014038:	4604      	mov	r4, r0
 801403a:	4798      	blx	r3
 801403c:	462e      	mov	r6, r5
 801403e:	46a8      	mov	r8, r5
 8014040:	462f      	mov	r7, r5
 8014042:	46a9      	mov	r9, r5
 8014044:	9000      	str	r0, [sp, #0]
 8014046:	9b00      	ldr	r3, [sp, #0]
 8014048:	429d      	cmp	r5, r3
 801404a:	da7d      	bge.n	8014148 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x11c>
 801404c:	6823      	ldr	r3, [r4, #0]
 801404e:	4629      	mov	r1, r5
 8014050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014052:	4620      	mov	r0, r4
 8014054:	4798      	blx	r3
 8014056:	6823      	ldr	r3, [r4, #0]
 8014058:	4682      	mov	sl, r0
 801405a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801405c:	4629      	mov	r1, r5
 801405e:	4620      	mov	r0, r4
 8014060:	4798      	blx	r3
 8014062:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014064:	4683      	mov	fp, r0
 8014066:	4650      	mov	r0, sl
 8014068:	f7ff ffbd 	bl	8013fe6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801406c:	9002      	str	r0, [sp, #8]
 801406e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014070:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014074:	f7ff ff98 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014078:	a903      	add	r1, sp, #12
 801407a:	9003      	str	r0, [sp, #12]
 801407c:	a802      	add	r0, sp, #8
 801407e:	f7ff ff68 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014082:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014084:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014086:	4402      	add	r2, r0
 8014088:	4658      	mov	r0, fp
 801408a:	9201      	str	r2, [sp, #4]
 801408c:	f7ff ffab 	bl	8013fe6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014090:	9004      	str	r0, [sp, #16]
 8014092:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014094:	f7ff ff88 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014098:	a905      	add	r1, sp, #20
 801409a:	9005      	str	r0, [sp, #20]
 801409c:	a804      	add	r0, sp, #16
 801409e:	f7ff ff58 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80140a2:	9a01      	ldr	r2, [sp, #4]
 80140a4:	1a12      	subs	r2, r2, r0
 80140a6:	b125      	cbz	r5, 80140b2 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x86>
 80140a8:	2320      	movs	r3, #32
 80140aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80140ae:	429f      	cmp	r7, r3
 80140b0:	da03      	bge.n	80140ba <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8e>
 80140b2:	2720      	movs	r7, #32
 80140b4:	fb92 f7f7 	sdiv	r7, r2, r7
 80140b8:	b125      	cbz	r5, 80140c4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x98>
 80140ba:	2320      	movs	r3, #32
 80140bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80140c0:	4599      	cmp	r9, r3
 80140c2:	dd03      	ble.n	80140cc <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa0>
 80140c4:	f04f 0920 	mov.w	r9, #32
 80140c8:	fb92 f9f9 	sdiv	r9, r2, r9
 80140cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80140ce:	4658      	mov	r0, fp
 80140d0:	9201      	str	r2, [sp, #4]
 80140d2:	f7ff ff88 	bl	8013fe6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80140d6:	9002      	str	r0, [sp, #8]
 80140d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80140da:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80140de:	f7ff ff63 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80140e2:	a903      	add	r1, sp, #12
 80140e4:	9003      	str	r0, [sp, #12]
 80140e6:	a802      	add	r0, sp, #8
 80140e8:	f7ff ff33 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80140ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80140ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80140f0:	eb00 0b03 	add.w	fp, r0, r3
 80140f4:	4650      	mov	r0, sl
 80140f6:	f7ff ff76 	bl	8013fe6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80140fa:	9004      	str	r0, [sp, #16]
 80140fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80140fe:	f7ff ff53 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014102:	a905      	add	r1, sp, #20
 8014104:	9005      	str	r0, [sp, #20]
 8014106:	a804      	add	r0, sp, #16
 8014108:	f7ff ff23 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801410c:	9a01      	ldr	r2, [sp, #4]
 801410e:	eb00 030b 	add.w	r3, r0, fp
 8014112:	b125      	cbz	r5, 801411e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf2>
 8014114:	2120      	movs	r1, #32
 8014116:	fb93 f1f1 	sdiv	r1, r3, r1
 801411a:	428e      	cmp	r6, r1
 801411c:	da03      	bge.n	8014126 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfa>
 801411e:	2620      	movs	r6, #32
 8014120:	fb93 f6f6 	sdiv	r6, r3, r6
 8014124:	b125      	cbz	r5, 8014130 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x104>
 8014126:	2120      	movs	r1, #32
 8014128:	fb93 f1f1 	sdiv	r1, r3, r1
 801412c:	4588      	cmp	r8, r1
 801412e:	dd03      	ble.n	8014138 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x10c>
 8014130:	f04f 0820 	mov.w	r8, #32
 8014134:	fb93 f8f8 	sdiv	r8, r3, r8
 8014138:	6821      	ldr	r1, [r4, #0]
 801413a:	4620      	mov	r0, r4
 801413c:	f8d1 a080 	ldr.w	sl, [r1, #128]	; 0x80
 8014140:	4629      	mov	r1, r5
 8014142:	47d0      	blx	sl
 8014144:	3501      	adds	r5, #1
 8014146:	e77e      	b.n	8014046 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 8014148:	3701      	adds	r7, #1
 801414a:	3601      	adds	r6, #1
 801414c:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
 8014150:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
 8014154:	eba7 0909 	sub.w	r9, r7, r9
 8014158:	eba6 0808 	sub.w	r8, r6, r8
 801415c:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 8014160:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 8014164:	b007      	add	sp, #28
 8014166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801416c <_ZN8touchgfx6CanvasD1Ev>:
 801416c:	b510      	push	{r4, lr}
 801416e:	4604      	mov	r4, r0
 8014170:	4b03      	ldr	r3, [pc, #12]	; (8014180 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8014172:	f840 3b20 	str.w	r3, [r0], #32
 8014176:	f000 fed9 	bl	8014f2c <_ZN8touchgfx7OutlineD1Ev>
 801417a:	4620      	mov	r0, r4
 801417c:	bd10      	pop	{r4, pc}
 801417e:	bf00      	nop
 8014180:	080286a0 	.word	0x080286a0

08014184 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 8014184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014186:	4604      	mov	r4, r0
 8014188:	b09d      	sub	sp, #116	; 0x74
 801418a:	460a      	mov	r2, r1
 801418c:	4601      	mov	r1, r0
 801418e:	4668      	mov	r0, sp
 8014190:	f011 f90c 	bl	80253ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014194:	6823      	ldr	r3, [r4, #0]
 8014196:	4620      	mov	r0, r4
 8014198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801419a:	4798      	blx	r3
 801419c:	4606      	mov	r6, r0
 801419e:	2800      	cmp	r0, #0
 80141a0:	d037      	beq.n	8014212 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x8e>
 80141a2:	6823      	ldr	r3, [r4, #0]
 80141a4:	2100      	movs	r1, #0
 80141a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80141aa:	4620      	mov	r0, r4
 80141ac:	4798      	blx	r3
 80141ae:	6823      	ldr	r3, [r4, #0]
 80141b0:	4605      	mov	r5, r0
 80141b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141b6:	2100      	movs	r1, #0
 80141b8:	4620      	mov	r0, r4
 80141ba:	4798      	blx	r3
 80141bc:	4629      	mov	r1, r5
 80141be:	4602      	mov	r2, r0
 80141c0:	4668      	mov	r0, sp
 80141c2:	f011 fac9 	bl	8025758 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80141c6:	2501      	movs	r5, #1
 80141c8:	42b5      	cmp	r5, r6
 80141ca:	da17      	bge.n	80141fc <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x78>
 80141cc:	6823      	ldr	r3, [r4, #0]
 80141ce:	4629      	mov	r1, r5
 80141d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80141d4:	4620      	mov	r0, r4
 80141d6:	4798      	blx	r3
 80141d8:	6823      	ldr	r3, [r4, #0]
 80141da:	4607      	mov	r7, r0
 80141dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141e0:	4629      	mov	r1, r5
 80141e2:	4620      	mov	r0, r4
 80141e4:	4798      	blx	r3
 80141e6:	4639      	mov	r1, r7
 80141e8:	4602      	mov	r2, r0
 80141ea:	4668      	mov	r0, sp
 80141ec:	f011 f98c 	bl	8025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80141f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d80e      	bhi.n	8014216 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x92>
 80141f8:	3501      	adds	r5, #1
 80141fa:	e7e5      	b.n	80141c8 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x44>
 80141fc:	21ff      	movs	r1, #255	; 0xff
 80141fe:	4668      	mov	r0, sp
 8014200:	f011 f9fe 	bl	8025600 <_ZN8touchgfx6Canvas6renderEh>
 8014204:	4604      	mov	r4, r0
 8014206:	4668      	mov	r0, sp
 8014208:	f7ff ffb0 	bl	801416c <_ZN8touchgfx6CanvasD1Ev>
 801420c:	4620      	mov	r0, r4
 801420e:	b01d      	add	sp, #116	; 0x74
 8014210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014212:	2401      	movs	r4, #1
 8014214:	e7f7      	b.n	8014206 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 8014216:	2400      	movs	r4, #0
 8014218:	e7f5      	b.n	8014206 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>

0801421a <_ZN8touchgfx6CanvasD0Ev>:
 801421a:	b510      	push	{r4, lr}
 801421c:	4604      	mov	r4, r0
 801421e:	f7ff ffa5 	bl	801416c <_ZN8touchgfx6CanvasD1Ev>
 8014222:	4620      	mov	r0, r4
 8014224:	2170      	movs	r1, #112	; 0x70
 8014226:	f011 fae9 	bl	80257fc <_ZdlPvj>
 801422a:	4620      	mov	r0, r4
 801422c:	bd10      	pop	{r4, pc}

0801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801422e:	b508      	push	{r3, lr}
 8014230:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014234:	f7ff feb8 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014238:	bd08      	pop	{r3, pc}
	...

0801423c <_ZN8touchgfx6CircleC1Ev>:
 801423c:	b510      	push	{r4, lr}
 801423e:	4604      	mov	r4, r0
 8014240:	f000 fd0a 	bl	8014c58 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014244:	4b08      	ldr	r3, [pc, #32]	; (8014268 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8014246:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801424a:	6023      	str	r3, [r4, #0]
 801424c:	2300      	movs	r3, #0
 801424e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 8014252:	f24b 4205 	movw	r2, #46085	; 0xb405
 8014256:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801425a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801425e:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 8014262:	60a3      	str	r3, [r4, #8]
 8014264:	4620      	mov	r0, r4
 8014266:	bd10      	pop	{r4, pc}
 8014268:	080287fc 	.word	0x080287fc

0801426c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 801426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014270:	4680      	mov	r8, r0
 8014272:	4610      	mov	r0, r2
 8014274:	428a      	cmp	r2, r1
 8014276:	bfa8      	it	ge
 8014278:	460a      	movge	r2, r1
 801427a:	4699      	mov	r9, r3
 801427c:	bfac      	ite	ge
 801427e:	4603      	movge	r3, r0
 8014280:	460b      	movlt	r3, r1
 8014282:	1a99      	subs	r1, r3, r2
 8014284:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 8014288:	bfa4      	itt	ge
 801428a:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 801428e:	2200      	movge	r2, #0
 8014290:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 8014294:	b085      	sub	sp, #20
 8014296:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 801429a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801429c:	9300      	str	r3, [sp, #0]
 801429e:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 80142a2:	f102 0b01 	add.w	fp, r2, #1
 80142a6:	2c00      	cmp	r4, #0
 80142a8:	f040 80af 	bne.w	801440a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19e>
 80142ac:	4610      	mov	r0, r2
 80142ae:	9201      	str	r2, [sp, #4]
 80142b0:	f7ff fe7a 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80142b4:	a903      	add	r1, sp, #12
 80142b6:	9003      	str	r0, [sp, #12]
 80142b8:	4650      	mov	r0, sl
 80142ba:	f7ff fe4a 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80142be:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80142c2:	9a01      	ldr	r2, [sp, #4]
 80142c4:	4408      	add	r0, r1
 80142c6:	f8d9 1000 	ldr.w	r1, [r9]
 80142ca:	4281      	cmp	r1, r0
 80142cc:	bfc8      	it	gt
 80142ce:	f8c9 0000 	strgt.w	r0, [r9]
 80142d2:	6839      	ldr	r1, [r7, #0]
 80142d4:	4288      	cmp	r0, r1
 80142d6:	bfc8      	it	gt
 80142d8:	6038      	strgt	r0, [r7, #0]
 80142da:	4610      	mov	r0, r2
 80142dc:	f7ff ffa7 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80142e0:	a903      	add	r1, sp, #12
 80142e2:	9003      	str	r0, [sp, #12]
 80142e4:	4650      	mov	r0, sl
 80142e6:	f7ff fe34 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80142ea:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80142ee:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80142f2:	1a10      	subs	r0, r2, r0
 80142f4:	6832      	ldr	r2, [r6, #0]
 80142f6:	4282      	cmp	r2, r0
 80142f8:	bfc8      	it	gt
 80142fa:	6030      	strgt	r0, [r6, #0]
 80142fc:	682a      	ldr	r2, [r5, #0]
 80142fe:	4290      	cmp	r0, r2
 8014300:	fb9b f2f1 	sdiv	r2, fp, r1
 8014304:	fb01 b212 	mls	r2, r1, r2, fp
 8014308:	eba1 0202 	sub.w	r2, r1, r2
 801430c:	bfc8      	it	gt
 801430e:	6028      	strgt	r0, [r5, #0]
 8014310:	fb92 f0f1 	sdiv	r0, r2, r1
 8014314:	fb01 2210 	mls	r2, r1, r0, r2
 8014318:	4493      	add	fp, r2
 801431a:	9b00      	ldr	r3, [sp, #0]
 801431c:	455b      	cmp	r3, fp
 801431e:	db2a      	blt.n	8014376 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x10a>
 8014320:	4658      	mov	r0, fp
 8014322:	f7ff fe41 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014326:	a903      	add	r1, sp, #12
 8014328:	9003      	str	r0, [sp, #12]
 801432a:	4650      	mov	r0, sl
 801432c:	f7ff fe11 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014330:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014334:	4410      	add	r0, r2
 8014336:	f8d9 2000 	ldr.w	r2, [r9]
 801433a:	4282      	cmp	r2, r0
 801433c:	bfc8      	it	gt
 801433e:	f8c9 0000 	strgt.w	r0, [r9]
 8014342:	683a      	ldr	r2, [r7, #0]
 8014344:	4290      	cmp	r0, r2
 8014346:	bfc8      	it	gt
 8014348:	6038      	strgt	r0, [r7, #0]
 801434a:	4658      	mov	r0, fp
 801434c:	f7ff ff6f 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014350:	a903      	add	r1, sp, #12
 8014352:	9003      	str	r0, [sp, #12]
 8014354:	4650      	mov	r0, sl
 8014356:	f7ff fdfc 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801435a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801435e:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 8014362:	1a10      	subs	r0, r2, r0
 8014364:	6832      	ldr	r2, [r6, #0]
 8014366:	4282      	cmp	r2, r0
 8014368:	bfc8      	it	gt
 801436a:	6030      	strgt	r0, [r6, #0]
 801436c:	682a      	ldr	r2, [r5, #0]
 801436e:	4290      	cmp	r0, r2
 8014370:	bfc8      	it	gt
 8014372:	6028      	strgt	r0, [r5, #0]
 8014374:	e7d1      	b.n	801431a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xae>
 8014376:	9b00      	ldr	r3, [sp, #0]
 8014378:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 801437c:	455b      	cmp	r3, fp
 801437e:	dd27      	ble.n	80143d0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x164>
 8014380:	4618      	mov	r0, r3
 8014382:	f7ff fe11 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014386:	a903      	add	r1, sp, #12
 8014388:	9003      	str	r0, [sp, #12]
 801438a:	4650      	mov	r0, sl
 801438c:	f7ff fde1 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014390:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014394:	4410      	add	r0, r2
 8014396:	f8d9 2000 	ldr.w	r2, [r9]
 801439a:	4282      	cmp	r2, r0
 801439c:	bfc8      	it	gt
 801439e:	f8c9 0000 	strgt.w	r0, [r9]
 80143a2:	683a      	ldr	r2, [r7, #0]
 80143a4:	4290      	cmp	r0, r2
 80143a6:	bfc8      	it	gt
 80143a8:	6038      	strgt	r0, [r7, #0]
 80143aa:	9800      	ldr	r0, [sp, #0]
 80143ac:	f7ff ff3f 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80143b0:	a903      	add	r1, sp, #12
 80143b2:	9003      	str	r0, [sp, #12]
 80143b4:	4650      	mov	r0, sl
 80143b6:	f7ff fdcc 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80143ba:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80143be:	1a10      	subs	r0, r2, r0
 80143c0:	6832      	ldr	r2, [r6, #0]
 80143c2:	4282      	cmp	r2, r0
 80143c4:	bfc8      	it	gt
 80143c6:	6030      	strgt	r0, [r6, #0]
 80143c8:	682a      	ldr	r2, [r5, #0]
 80143ca:	4290      	cmp	r0, r2
 80143cc:	bfc8      	it	gt
 80143ce:	6028      	strgt	r0, [r5, #0]
 80143d0:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80143d4:	f8d9 1000 	ldr.w	r1, [r9]
 80143d8:	4291      	cmp	r1, r2
 80143da:	bfc8      	it	gt
 80143dc:	f8c9 2000 	strgt.w	r2, [r9]
 80143e0:	683a      	ldr	r2, [r7, #0]
 80143e2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80143e6:	429a      	cmp	r2, r3
 80143e8:	bfb8      	it	lt
 80143ea:	603b      	strlt	r3, [r7, #0]
 80143ec:	6832      	ldr	r2, [r6, #0]
 80143ee:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80143f2:	429a      	cmp	r2, r3
 80143f4:	bfc8      	it	gt
 80143f6:	6033      	strgt	r3, [r6, #0]
 80143f8:	682a      	ldr	r2, [r5, #0]
 80143fa:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80143fe:	429a      	cmp	r2, r3
 8014400:	da00      	bge.n	8014404 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 8014402:	602b      	str	r3, [r5, #0]
 8014404:	b005      	add	sp, #20
 8014406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801440a:	2002      	movs	r0, #2
 801440c:	3401      	adds	r4, #1
 801440e:	fb94 f4f0 	sdiv	r4, r4, r0
 8014412:	4610      	mov	r0, r2
 8014414:	9201      	str	r2, [sp, #4]
 8014416:	f7ff fdc7 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801441a:	a903      	add	r1, sp, #12
 801441c:	9003      	str	r0, [sp, #12]
 801441e:	4650      	mov	r0, sl
 8014420:	f7ff fd97 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014424:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8014428:	9a01      	ldr	r2, [sp, #4]
 801442a:	4408      	add	r0, r1
 801442c:	f8d9 1000 	ldr.w	r1, [r9]
 8014430:	1b03      	subs	r3, r0, r4
 8014432:	4299      	cmp	r1, r3
 8014434:	bfc8      	it	gt
 8014436:	f8c9 3000 	strgt.w	r3, [r9]
 801443a:	6839      	ldr	r1, [r7, #0]
 801443c:	4420      	add	r0, r4
 801443e:	428b      	cmp	r3, r1
 8014440:	bfc8      	it	gt
 8014442:	603b      	strgt	r3, [r7, #0]
 8014444:	f8d9 1000 	ldr.w	r1, [r9]
 8014448:	4281      	cmp	r1, r0
 801444a:	bfc8      	it	gt
 801444c:	f8c9 0000 	strgt.w	r0, [r9]
 8014450:	6839      	ldr	r1, [r7, #0]
 8014452:	4288      	cmp	r0, r1
 8014454:	bfc8      	it	gt
 8014456:	6038      	strgt	r0, [r7, #0]
 8014458:	4610      	mov	r0, r2
 801445a:	f7ff fee8 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801445e:	a903      	add	r1, sp, #12
 8014460:	9003      	str	r0, [sp, #12]
 8014462:	4650      	mov	r0, sl
 8014464:	f7ff fd75 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014468:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801446c:	1a10      	subs	r0, r2, r0
 801446e:	6832      	ldr	r2, [r6, #0]
 8014470:	1b01      	subs	r1, r0, r4
 8014472:	428a      	cmp	r2, r1
 8014474:	bfc8      	it	gt
 8014476:	6031      	strgt	r1, [r6, #0]
 8014478:	682a      	ldr	r2, [r5, #0]
 801447a:	4420      	add	r0, r4
 801447c:	4291      	cmp	r1, r2
 801447e:	bfc8      	it	gt
 8014480:	6029      	strgt	r1, [r5, #0]
 8014482:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8014486:	6832      	ldr	r2, [r6, #0]
 8014488:	4282      	cmp	r2, r0
 801448a:	bfc8      	it	gt
 801448c:	6030      	strgt	r0, [r6, #0]
 801448e:	682a      	ldr	r2, [r5, #0]
 8014490:	4290      	cmp	r0, r2
 8014492:	fb9b f2f1 	sdiv	r2, fp, r1
 8014496:	fb01 b212 	mls	r2, r1, r2, fp
 801449a:	eba1 0202 	sub.w	r2, r1, r2
 801449e:	bfc8      	it	gt
 80144a0:	6028      	strgt	r0, [r5, #0]
 80144a2:	fb92 f0f1 	sdiv	r0, r2, r1
 80144a6:	fb01 2210 	mls	r2, r1, r0, r2
 80144aa:	4493      	add	fp, r2
 80144ac:	9b00      	ldr	r3, [sp, #0]
 80144ae:	455b      	cmp	r3, fp
 80144b0:	db40      	blt.n	8014534 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c8>
 80144b2:	4658      	mov	r0, fp
 80144b4:	f7ff fd78 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80144b8:	a903      	add	r1, sp, #12
 80144ba:	9003      	str	r0, [sp, #12]
 80144bc:	4650      	mov	r0, sl
 80144be:	f7ff fd48 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80144c2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80144c6:	4410      	add	r0, r2
 80144c8:	f8d9 2000 	ldr.w	r2, [r9]
 80144cc:	1b01      	subs	r1, r0, r4
 80144ce:	428a      	cmp	r2, r1
 80144d0:	bfc8      	it	gt
 80144d2:	f8c9 1000 	strgt.w	r1, [r9]
 80144d6:	683a      	ldr	r2, [r7, #0]
 80144d8:	4420      	add	r0, r4
 80144da:	4291      	cmp	r1, r2
 80144dc:	bfc8      	it	gt
 80144de:	6039      	strgt	r1, [r7, #0]
 80144e0:	f8d9 2000 	ldr.w	r2, [r9]
 80144e4:	4282      	cmp	r2, r0
 80144e6:	bfc8      	it	gt
 80144e8:	f8c9 0000 	strgt.w	r0, [r9]
 80144ec:	683a      	ldr	r2, [r7, #0]
 80144ee:	4290      	cmp	r0, r2
 80144f0:	bfc8      	it	gt
 80144f2:	6038      	strgt	r0, [r7, #0]
 80144f4:	4658      	mov	r0, fp
 80144f6:	f7ff fe9a 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80144fa:	a903      	add	r1, sp, #12
 80144fc:	9003      	str	r0, [sp, #12]
 80144fe:	4650      	mov	r0, sl
 8014500:	f7ff fd27 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014504:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014508:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 801450c:	1a10      	subs	r0, r2, r0
 801450e:	6832      	ldr	r2, [r6, #0]
 8014510:	1b01      	subs	r1, r0, r4
 8014512:	428a      	cmp	r2, r1
 8014514:	bfc8      	it	gt
 8014516:	6031      	strgt	r1, [r6, #0]
 8014518:	682a      	ldr	r2, [r5, #0]
 801451a:	4420      	add	r0, r4
 801451c:	4291      	cmp	r1, r2
 801451e:	bfc8      	it	gt
 8014520:	6029      	strgt	r1, [r5, #0]
 8014522:	6832      	ldr	r2, [r6, #0]
 8014524:	4282      	cmp	r2, r0
 8014526:	bfc8      	it	gt
 8014528:	6030      	strgt	r0, [r6, #0]
 801452a:	682a      	ldr	r2, [r5, #0]
 801452c:	4290      	cmp	r0, r2
 801452e:	bfc8      	it	gt
 8014530:	6028      	strgt	r0, [r5, #0]
 8014532:	e7bb      	b.n	80144ac <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x240>
 8014534:	9b00      	ldr	r3, [sp, #0]
 8014536:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 801453a:	455b      	cmp	r3, fp
 801453c:	f77f af62 	ble.w	8014404 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 8014540:	4618      	mov	r0, r3
 8014542:	f7ff fd31 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014546:	a903      	add	r1, sp, #12
 8014548:	9003      	str	r0, [sp, #12]
 801454a:	4650      	mov	r0, sl
 801454c:	f7ff fd01 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014550:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014554:	4410      	add	r0, r2
 8014556:	f8d9 2000 	ldr.w	r2, [r9]
 801455a:	1b01      	subs	r1, r0, r4
 801455c:	428a      	cmp	r2, r1
 801455e:	bfc8      	it	gt
 8014560:	f8c9 1000 	strgt.w	r1, [r9]
 8014564:	683a      	ldr	r2, [r7, #0]
 8014566:	4420      	add	r0, r4
 8014568:	4291      	cmp	r1, r2
 801456a:	bfc8      	it	gt
 801456c:	6039      	strgt	r1, [r7, #0]
 801456e:	f8d9 2000 	ldr.w	r2, [r9]
 8014572:	4282      	cmp	r2, r0
 8014574:	bfc8      	it	gt
 8014576:	f8c9 0000 	strgt.w	r0, [r9]
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	4298      	cmp	r0, r3
 801457e:	bfc8      	it	gt
 8014580:	6038      	strgt	r0, [r7, #0]
 8014582:	9800      	ldr	r0, [sp, #0]
 8014584:	f7ff fe53 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014588:	a903      	add	r1, sp, #12
 801458a:	9003      	str	r0, [sp, #12]
 801458c:	4650      	mov	r0, sl
 801458e:	f7ff fce0 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014592:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8014596:	6832      	ldr	r2, [r6, #0]
 8014598:	1a18      	subs	r0, r3, r0
 801459a:	1b03      	subs	r3, r0, r4
 801459c:	429a      	cmp	r2, r3
 801459e:	bfc8      	it	gt
 80145a0:	6033      	strgt	r3, [r6, #0]
 80145a2:	682a      	ldr	r2, [r5, #0]
 80145a4:	4404      	add	r4, r0
 80145a6:	4293      	cmp	r3, r2
 80145a8:	bfc8      	it	gt
 80145aa:	602b      	strgt	r3, [r5, #0]
 80145ac:	6833      	ldr	r3, [r6, #0]
 80145ae:	42a3      	cmp	r3, r4
 80145b0:	bfc8      	it	gt
 80145b2:	6034      	strgt	r4, [r6, #0]
 80145b4:	682b      	ldr	r3, [r5, #0]
 80145b6:	429c      	cmp	r4, r3
 80145b8:	bfc8      	it	gt
 80145ba:	602c      	strgt	r4, [r5, #0]
 80145bc:	e722      	b.n	8014404 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>

080145be <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 80145be:	b530      	push	{r4, r5, lr}
 80145c0:	4604      	mov	r4, r0
 80145c2:	4608      	mov	r0, r1
 80145c4:	2500      	movs	r5, #0
 80145c6:	4611      	mov	r1, r2
 80145c8:	461a      	mov	r2, r3
 80145ca:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80145ce:	b089      	sub	sp, #36	; 0x24
 80145d0:	015b      	lsls	r3, r3, #5
 80145d2:	9304      	str	r3, [sp, #16]
 80145d4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80145d8:	9505      	str	r5, [sp, #20]
 80145da:	015b      	lsls	r3, r3, #5
 80145dc:	e9cd 3506 	strd	r3, r5, [sp, #24]
 80145e0:	2520      	movs	r5, #32
 80145e2:	ab07      	add	r3, sp, #28
 80145e4:	9302      	str	r3, [sp, #8]
 80145e6:	ab06      	add	r3, sp, #24
 80145e8:	9301      	str	r3, [sp, #4]
 80145ea:	ab05      	add	r3, sp, #20
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	ab04      	add	r3, sp, #16
 80145f0:	f7ff fe3c 	bl	801426c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 80145f4:	9a04      	ldr	r2, [sp, #16]
 80145f6:	9805      	ldr	r0, [sp, #20]
 80145f8:	fb92 f2f5 	sdiv	r2, r2, r5
 80145fc:	fb90 f0f5 	sdiv	r0, r0, r5
 8014600:	9b06      	ldr	r3, [sp, #24]
 8014602:	9907      	ldr	r1, [sp, #28]
 8014604:	b292      	uxth	r2, r2
 8014606:	fb93 f3f5 	sdiv	r3, r3, r5
 801460a:	fb91 f1f5 	sdiv	r1, r1, r5
 801460e:	3002      	adds	r0, #2
 8014610:	1a80      	subs	r0, r0, r2
 8014612:	80a0      	strh	r0, [r4, #4]
 8014614:	4620      	mov	r0, r4
 8014616:	b29b      	uxth	r3, r3
 8014618:	3102      	adds	r1, #2
 801461a:	1ac9      	subs	r1, r1, r3
 801461c:	3a01      	subs	r2, #1
 801461e:	3b01      	subs	r3, #1
 8014620:	8022      	strh	r2, [r4, #0]
 8014622:	8063      	strh	r3, [r4, #2]
 8014624:	80e1      	strh	r1, [r4, #6]
 8014626:	b009      	add	sp, #36	; 0x24
 8014628:	bd30      	pop	{r4, r5, pc}

0801462a <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801462a:	b510      	push	{r4, lr}
 801462c:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8014630:	4604      	mov	r4, r0
 8014632:	f7ff ffc4 	bl	80145be <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8014636:	4620      	mov	r0, r4
 8014638:	bd10      	pop	{r4, pc}

0801463a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 801463a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801463e:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 8014642:	42b5      	cmp	r5, r6
 8014644:	bfde      	ittt	le
 8014646:	4633      	movle	r3, r6
 8014648:	462e      	movle	r6, r5
 801464a:	461d      	movle	r5, r3
 801464c:	2220      	movs	r2, #32
 801464e:	1bab      	subs	r3, r5, r6
 8014650:	468b      	mov	fp, r1
 8014652:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 8014656:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 801465a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801465c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014660:	b0ab      	sub	sp, #172	; 0xac
 8014662:	4604      	mov	r4, r0
 8014664:	bfa4      	itt	ge
 8014666:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 801466a:	2600      	movge	r6, #0
 801466c:	fb99 f9f2 	sdiv	r9, r9, r2
 8014670:	fb9a faf2 	sdiv	sl, sl, r2
 8014674:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014676:	2900      	cmp	r1, #0
 8014678:	f000 80f4 	beq.w	8014864 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 801467c:	f9bb 0000 	ldrsh.w	r0, [fp]
 8014680:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8014684:	eba9 0700 	sub.w	r7, r9, r0
 8014688:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 801468c:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 8014690:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 8014694:	ebaa 0802 	sub.w	r8, sl, r2
 8014698:	4407      	add	r7, r0
 801469a:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 801469e:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 80146a2:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 80146a6:	b23f      	sxth	r7, r7
 80146a8:	4490      	add	r8, r2
 80146aa:	2202      	movs	r2, #2
 80146ac:	fb91 f1f2 	sdiv	r1, r1, r2
 80146b0:	eba9 0707 	sub.w	r7, r9, r7
 80146b4:	fa0f f888 	sxth.w	r8, r8
 80146b8:	ebaa 0808 	sub.w	r8, sl, r8
 80146bc:	2f00      	cmp	r7, #0
 80146be:	bfb8      	it	lt
 80146c0:	427f      	neglt	r7, r7
 80146c2:	f1b8 0f00 	cmp.w	r8, #0
 80146c6:	bfb8      	it	lt
 80146c8:	f1c8 0800 	rsblt	r8, r8, #0
 80146cc:	45bc      	cmp	ip, r7
 80146ce:	bfcc      	ite	gt
 80146d0:	f10c 0701 	addgt.w	r7, ip, #1
 80146d4:	3701      	addle	r7, #1
 80146d6:	4540      	cmp	r0, r8
 80146d8:	bfc8      	it	gt
 80146da:	f100 0801 	addgt.w	r8, r0, #1
 80146de:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80146e2:	eba3 0301 	sub.w	r3, r3, r1
 80146e6:	f100 0001 	add.w	r0, r0, #1
 80146ea:	ea4f 0060 	mov.w	r0, r0, asr #1
 80146ee:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80146f2:	bfd8      	it	le
 80146f4:	f108 0801 	addle.w	r8, r8, #1
 80146f8:	9201      	str	r2, [sp, #4]
 80146fa:	930d      	str	r3, [sp, #52]	; 0x34
 80146fc:	f7ff fc34 	bl	8013f68 <_ZN8touchgfx7CWRUtil4sineEi>
 8014700:	a92a      	add	r1, sp, #168	; 0xa8
 8014702:	f841 0d70 	str.w	r0, [r1, #-112]!
 8014706:	a80d      	add	r0, sp, #52	; 0x34
 8014708:	f7ff fc23 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801470c:	f04f 0c20 	mov.w	ip, #32
 8014710:	fb90 f0fc 	sdiv	r0, r0, ip
 8014714:	fb08 f808 	mul.w	r8, r8, r8
 8014718:	4340      	muls	r0, r0
 801471a:	fb07 8707 	mla	r7, r7, r7, r8
 801471e:	4287      	cmp	r7, r0
 8014720:	9a01      	ldr	r2, [sp, #4]
 8014722:	da04      	bge.n	801472e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf4>
 8014724:	2401      	movs	r4, #1
 8014726:	4620      	mov	r0, r4
 8014728:	b02b      	add	sp, #172	; 0xac
 801472a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801472e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014730:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014732:	fb91 f3f2 	sdiv	r3, r1, r2
 8014736:	4403      	add	r3, r0
 8014738:	fb93 f3fc 	sdiv	r3, r3, ip
 801473c:	f9bb 1000 	ldrsh.w	r1, [fp]
 8014740:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8014744:	3301      	adds	r3, #1
 8014746:	440a      	add	r2, r1
 8014748:	b212      	sxth	r2, r2
 801474a:	454a      	cmp	r2, r9
 801474c:	bfa8      	it	ge
 801474e:	464a      	movge	r2, r9
 8014750:	428a      	cmp	r2, r1
 8014752:	bfac      	ite	ge
 8014754:	eba9 0902 	subge.w	r9, r9, r2
 8014758:	eba9 0901 	sublt.w	r9, r9, r1
 801475c:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8014760:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014764:	435b      	muls	r3, r3
 8014766:	440a      	add	r2, r1
 8014768:	b212      	sxth	r2, r2
 801476a:	4552      	cmp	r2, sl
 801476c:	bfa8      	it	ge
 801476e:	4652      	movge	r2, sl
 8014770:	428a      	cmp	r2, r1
 8014772:	bfac      	ite	ge
 8014774:	ebaa 0a02 	subge.w	sl, sl, r2
 8014778:	ebaa 0a01 	sublt.w	sl, sl, r1
 801477c:	fb0a fa0a 	mul.w	sl, sl, sl
 8014780:	fb09 a909 	mla	r9, r9, r9, sl
 8014784:	4599      	cmp	r9, r3
 8014786:	dccd      	bgt.n	8014724 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 8014788:	465a      	mov	r2, fp
 801478a:	4621      	mov	r1, r4
 801478c:	a80e      	add	r0, sp, #56	; 0x38
 801478e:	f010 fe0d 	bl	80253ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014792:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014796:	9209      	str	r2, [sp, #36]	; 0x24
 8014798:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801479c:	930a      	str	r3, [sp, #40]	; 0x28
 801479e:	dd07      	ble.n	80147b0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 80147a0:	2102      	movs	r1, #2
 80147a2:	fb93 f3f1 	sdiv	r3, r3, r1
 80147a6:	4413      	add	r3, r2
 80147a8:	930a      	str	r3, [sp, #40]	; 0x28
 80147aa:	fb93 f3f1 	sdiv	r3, r3, r1
 80147ae:	9309      	str	r3, [sp, #36]	; 0x24
 80147b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80147b4:	4630      	mov	r0, r6
 80147b6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80147ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80147bc:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 80147c0:	f7ff fbf2 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80147c4:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 80147c8:	f849 0d74 	str.w	r0, [r9, #-116]!
 80147cc:	4649      	mov	r1, r9
 80147ce:	a80b      	add	r0, sp, #44	; 0x2c
 80147d0:	f7ff fbbf 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80147d4:	f04f 0a02 	mov.w	sl, #2
 80147d8:	fb90 f0fa 	sdiv	r0, r0, sl
 80147dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80147de:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 80147e2:	eb00 0b03 	add.w	fp, r0, r3
 80147e6:	4630      	mov	r0, r6
 80147e8:	f7ff fd21 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80147ec:	f848 0d78 	str.w	r0, [r8, #-120]!
 80147f0:	4641      	mov	r1, r8
 80147f2:	a80b      	add	r0, sp, #44	; 0x2c
 80147f4:	f7ff fbad 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80147f8:	fb90 f0fa 	sdiv	r0, r0, sl
 80147fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80147fe:	4659      	mov	r1, fp
 8014800:	1a12      	subs	r2, r2, r0
 8014802:	017f      	lsls	r7, r7, #5
 8014804:	a80e      	add	r0, sp, #56	; 0x38
 8014806:	f010 ffa7 	bl	8025758 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801480a:	f106 0a20 	add.w	sl, r6, #32
 801480e:	bb67      	cbnz	r7, 801486a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 8014810:	46b3      	mov	fp, r6
 8014812:	45aa      	cmp	sl, r5
 8014814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014816:	dc33      	bgt.n	8014880 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x246>
 8014818:	9909      	ldr	r1, [sp, #36]	; 0x24
 801481a:	4650      	mov	r0, sl
 801481c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8014820:	920b      	str	r2, [sp, #44]	; 0x2c
 8014822:	f7ff fbc1 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014826:	4641      	mov	r1, r8
 8014828:	900c      	str	r0, [sp, #48]	; 0x30
 801482a:	a80b      	add	r0, sp, #44	; 0x2c
 801482c:	f7ff fb91 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014830:	2302      	movs	r3, #2
 8014832:	fb90 f0f3 	sdiv	r0, r0, r3
 8014836:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014838:	eb00 0b02 	add.w	fp, r0, r2
 801483c:	4650      	mov	r0, sl
 801483e:	f7ff fcf6 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014842:	4649      	mov	r1, r9
 8014844:	900d      	str	r0, [sp, #52]	; 0x34
 8014846:	a80b      	add	r0, sp, #44	; 0x2c
 8014848:	f7ff fb83 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801484c:	2302      	movs	r3, #2
 801484e:	fb90 f0f3 	sdiv	r0, r0, r3
 8014852:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014854:	4659      	mov	r1, fp
 8014856:	1a12      	subs	r2, r2, r0
 8014858:	a80e      	add	r0, sp, #56	; 0x38
 801485a:	46d3      	mov	fp, sl
 801485c:	f010 fe54 	bl	8025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014860:	44ba      	add	sl, r7
 8014862:	e7d6      	b.n	8014812 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d8>
 8014864:	fb93 f3f2 	sdiv	r3, r3, r2
 8014868:	e768      	b.n	801473c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x102>
 801486a:	fb9a f2f7 	sdiv	r2, sl, r7
 801486e:	fb07 a212 	mls	r2, r7, r2, sl
 8014872:	1aba      	subs	r2, r7, r2
 8014874:	fb92 f1f7 	sdiv	r1, r2, r7
 8014878:	fb07 2211 	mls	r2, r7, r1, r2
 801487c:	4492      	add	sl, r2
 801487e:	e7c7      	b.n	8014810 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d6>
 8014880:	455d      	cmp	r5, fp
 8014882:	dd23      	ble.n	80148cc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x292>
 8014884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014886:	4628      	mov	r0, r5
 8014888:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801488c:	920b      	str	r2, [sp, #44]	; 0x2c
 801488e:	f7ff fb8b 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014892:	4641      	mov	r1, r8
 8014894:	900c      	str	r0, [sp, #48]	; 0x30
 8014896:	a80b      	add	r0, sp, #44	; 0x2c
 8014898:	f7ff fb5b 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801489c:	f04f 0a02 	mov.w	sl, #2
 80148a0:	fb90 f0fa 	sdiv	r0, r0, sl
 80148a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80148a6:	4403      	add	r3, r0
 80148a8:	4628      	mov	r0, r5
 80148aa:	9301      	str	r3, [sp, #4]
 80148ac:	f7ff fcbf 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80148b0:	4649      	mov	r1, r9
 80148b2:	900d      	str	r0, [sp, #52]	; 0x34
 80148b4:	a80b      	add	r0, sp, #44	; 0x2c
 80148b6:	f7ff fb4c 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80148ba:	fb90 f0fa 	sdiv	r0, r0, sl
 80148be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80148c0:	9b01      	ldr	r3, [sp, #4]
 80148c2:	1a12      	subs	r2, r2, r0
 80148c4:	4619      	mov	r1, r3
 80148c6:	a80e      	add	r0, sp, #56	; 0x38
 80148c8:	f010 fe1e 	bl	8025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80148cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148ce:	b98b      	cbnz	r3, 80148f4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 80148d0:	1bad      	subs	r5, r5, r6
 80148d2:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 80148d6:	da04      	bge.n	80148e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 80148d8:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 80148dc:	a80e      	add	r0, sp, #56	; 0x38
 80148de:	f010 fe13 	bl	8025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80148e2:	21ff      	movs	r1, #255	; 0xff
 80148e4:	a80e      	add	r0, sp, #56	; 0x38
 80148e6:	f010 fe8b 	bl	8025600 <_ZN8touchgfx6Canvas6renderEh>
 80148ea:	4604      	mov	r4, r0
 80148ec:	a80e      	add	r0, sp, #56	; 0x38
 80148ee:	f7ff fc3d 	bl	801416c <_ZN8touchgfx6CanvasD1Ev>
 80148f2:	e718      	b.n	8014726 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xec>
 80148f4:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 80148f8:	429a      	cmp	r2, r3
 80148fa:	f200 8107 	bhi.w	8014b0c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d2>
 80148fe:	1bab      	subs	r3, r5, r6
 8014900:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8014904:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014908:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 801490c:	9301      	str	r3, [sp, #4]
 801490e:	da43      	bge.n	8014998 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 8014910:	4628      	mov	r0, r5
 8014912:	f7ff fb49 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014916:	4649      	mov	r1, r9
 8014918:	900d      	str	r0, [sp, #52]	; 0x34
 801491a:	a809      	add	r0, sp, #36	; 0x24
 801491c:	f7ff fb19 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014920:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014922:	18c3      	adds	r3, r0, r3
 8014924:	4628      	mov	r0, r5
 8014926:	9303      	str	r3, [sp, #12]
 8014928:	f7ff fc81 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801492c:	4649      	mov	r1, r9
 801492e:	900d      	str	r0, [sp, #52]	; 0x34
 8014930:	a809      	add	r0, sp, #36	; 0x24
 8014932:	f7ff fb0e 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014936:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014938:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 801493c:	1a1b      	subs	r3, r3, r0
 801493e:	9302      	str	r3, [sp, #8]
 8014940:	9204      	str	r2, [sp, #16]
 8014942:	eb05 030a 	add.w	r3, r5, sl
 8014946:	9a04      	ldr	r2, [sp, #16]
 8014948:	4293      	cmp	r3, r2
 801494a:	da25      	bge.n	8014998 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 801494c:	4618      	mov	r0, r3
 801494e:	9306      	str	r3, [sp, #24]
 8014950:	f7ff fb2a 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014954:	4649      	mov	r1, r9
 8014956:	900d      	str	r0, [sp, #52]	; 0x34
 8014958:	a80a      	add	r0, sp, #40	; 0x28
 801495a:	f7ff fafa 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801495e:	2202      	movs	r2, #2
 8014960:	fb90 f0f2 	sdiv	r0, r0, r2
 8014964:	9b03      	ldr	r3, [sp, #12]
 8014966:	9207      	str	r2, [sp, #28]
 8014968:	18c3      	adds	r3, r0, r3
 801496a:	9305      	str	r3, [sp, #20]
 801496c:	9b06      	ldr	r3, [sp, #24]
 801496e:	4618      	mov	r0, r3
 8014970:	f7ff fc5d 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014974:	a92a      	add	r1, sp, #168	; 0xa8
 8014976:	f841 0d78 	str.w	r0, [r1, #-120]!
 801497a:	a80a      	add	r0, sp, #40	; 0x28
 801497c:	f7ff fae9 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014980:	9a07      	ldr	r2, [sp, #28]
 8014982:	9b02      	ldr	r3, [sp, #8]
 8014984:	fb90 f2f2 	sdiv	r2, r0, r2
 8014988:	9905      	ldr	r1, [sp, #20]
 801498a:	1a9a      	subs	r2, r3, r2
 801498c:	a80e      	add	r0, sp, #56	; 0x38
 801498e:	f010 fdbb 	bl	8025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014992:	9b06      	ldr	r3, [sp, #24]
 8014994:	4453      	add	r3, sl
 8014996:	e7d6      	b.n	8014946 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x30c>
 8014998:	455d      	cmp	r5, fp
 801499a:	dd25      	ble.n	80149e8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ae>
 801499c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80149a0:	4628      	mov	r0, r5
 80149a2:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80149a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80149a8:	f7ff fafe 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80149ac:	4641      	mov	r1, r8
 80149ae:	900c      	str	r0, [sp, #48]	; 0x30
 80149b0:	a80b      	add	r0, sp, #44	; 0x2c
 80149b2:	f7ff face 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80149b6:	2202      	movs	r2, #2
 80149b8:	fb90 f0f2 	sdiv	r0, r0, r2
 80149bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80149be:	9202      	str	r2, [sp, #8]
 80149c0:	eb00 0903 	add.w	r9, r0, r3
 80149c4:	4628      	mov	r0, r5
 80149c6:	f7ff fc32 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80149ca:	a92a      	add	r1, sp, #168	; 0xa8
 80149cc:	f841 0d74 	str.w	r0, [r1, #-116]!
 80149d0:	a80b      	add	r0, sp, #44	; 0x2c
 80149d2:	f7ff fabe 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80149d6:	9a02      	ldr	r2, [sp, #8]
 80149d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80149da:	fb90 f2f2 	sdiv	r2, r0, r2
 80149de:	4649      	mov	r1, r9
 80149e0:	1a9a      	subs	r2, r3, r2
 80149e2:	a80e      	add	r0, sp, #56	; 0x38
 80149e4:	f010 fd90 	bl	8025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80149e8:	46d9      	mov	r9, fp
 80149ea:	2502      	movs	r5, #2
 80149ec:	45b1      	cmp	r9, r6
 80149ee:	db25      	blt.n	8014a3c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x402>
 80149f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80149f4:	4648      	mov	r0, r9
 80149f6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80149fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80149fc:	f7ff fad4 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a00:	4641      	mov	r1, r8
 8014a02:	900c      	str	r0, [sp, #48]	; 0x30
 8014a04:	a80b      	add	r0, sp, #44	; 0x2c
 8014a06:	f7ff faa4 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a0a:	fb90 f0f5 	sdiv	r0, r0, r5
 8014a0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014a10:	eb00 0b03 	add.w	fp, r0, r3
 8014a14:	4648      	mov	r0, r9
 8014a16:	f7ff fc0a 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014a1a:	a90d      	add	r1, sp, #52	; 0x34
 8014a1c:	900d      	str	r0, [sp, #52]	; 0x34
 8014a1e:	a80b      	add	r0, sp, #44	; 0x2c
 8014a20:	f7ff fa97 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a24:	fb90 f0f5 	sdiv	r0, r0, r5
 8014a28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014a2a:	4659      	mov	r1, fp
 8014a2c:	1a12      	subs	r2, r2, r0
 8014a2e:	a80e      	add	r0, sp, #56	; 0x38
 8014a30:	46cb      	mov	fp, r9
 8014a32:	f010 fd69 	bl	8025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014a36:	eba9 0907 	sub.w	r9, r9, r7
 8014a3a:	e7d7      	b.n	80149ec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b2>
 8014a3c:	455e      	cmp	r6, fp
 8014a3e:	da22      	bge.n	8014a86 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44c>
 8014a40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a44:	4630      	mov	r0, r6
 8014a46:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8014a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a4c:	f7ff faac 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a50:	4641      	mov	r1, r8
 8014a52:	900c      	str	r0, [sp, #48]	; 0x30
 8014a54:	a80b      	add	r0, sp, #44	; 0x2c
 8014a56:	f7ff fa7c 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a5a:	2502      	movs	r5, #2
 8014a5c:	fb90 f0f5 	sdiv	r0, r0, r5
 8014a60:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014a62:	4407      	add	r7, r0
 8014a64:	4630      	mov	r0, r6
 8014a66:	f7ff fbe2 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014a6a:	a92a      	add	r1, sp, #168	; 0xa8
 8014a6c:	f841 0d74 	str.w	r0, [r1, #-116]!
 8014a70:	a80b      	add	r0, sp, #44	; 0x2c
 8014a72:	f7ff fa6e 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a76:	fb90 f0f5 	sdiv	r0, r0, r5
 8014a7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014a7c:	4639      	mov	r1, r7
 8014a7e:	1a12      	subs	r2, r2, r0
 8014a80:	a80e      	add	r0, sp, #56	; 0x38
 8014a82:	f010 fd41 	bl	8025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014a86:	9b01      	ldr	r3, [sp, #4]
 8014a88:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014a8c:	f6bf af29 	bge.w	80148e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8014a90:	4630      	mov	r0, r6
 8014a92:	f7ff fa89 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a96:	ad2a      	add	r5, sp, #168	; 0xa8
 8014a98:	f845 0d74 	str.w	r0, [r5, #-116]!
 8014a9c:	4629      	mov	r1, r5
 8014a9e:	a809      	add	r0, sp, #36	; 0x24
 8014aa0:	f7ff fa57 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014aa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014aa6:	f04f 0b02 	mov.w	fp, #2
 8014aaa:	eb00 0903 	add.w	r9, r0, r3
 8014aae:	4630      	mov	r0, r6
 8014ab0:	f7ff fbbd 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014ab4:	4629      	mov	r1, r5
 8014ab6:	900d      	str	r0, [sp, #52]	; 0x34
 8014ab8:	a809      	add	r0, sp, #36	; 0x24
 8014aba:	f7ff fa4a 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014abe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014ac0:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 8014ac4:	eba3 0800 	sub.w	r8, r3, r0
 8014ac8:	4454      	add	r4, sl
 8014aca:	42b4      	cmp	r4, r6
 8014acc:	f6bf af09 	bge.w	80148e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	f7ff fa69 	bl	8013fa8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014ad6:	4629      	mov	r1, r5
 8014ad8:	900d      	str	r0, [sp, #52]	; 0x34
 8014ada:	a80a      	add	r0, sp, #40	; 0x28
 8014adc:	f7ff fa39 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ae0:	fb90 f0fb 	sdiv	r0, r0, fp
 8014ae4:	eb00 0709 	add.w	r7, r0, r9
 8014ae8:	4620      	mov	r0, r4
 8014aea:	f7ff fba0 	bl	801422e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014aee:	a90c      	add	r1, sp, #48	; 0x30
 8014af0:	900c      	str	r0, [sp, #48]	; 0x30
 8014af2:	a80a      	add	r0, sp, #40	; 0x28
 8014af4:	f7ff fa2d 	bl	8013f52 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014af8:	fb90 f2fb 	sdiv	r2, r0, fp
 8014afc:	4639      	mov	r1, r7
 8014afe:	eba8 0202 	sub.w	r2, r8, r2
 8014b02:	a80e      	add	r0, sp, #56	; 0x38
 8014b04:	f010 fd00 	bl	8025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014b08:	4454      	add	r4, sl
 8014b0a:	e7de      	b.n	8014aca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x490>
 8014b0c:	2400      	movs	r4, #0
 8014b0e:	e6ed      	b.n	80148ec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

08014b10 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8014b10:	2200      	movs	r2, #0
 8014b12:	b510      	push	{r4, lr}
 8014b14:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8014b18:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8014b1c:	8002      	strh	r2, [r0, #0]
 8014b1e:	8042      	strh	r2, [r0, #2]
 8014b20:	8084      	strh	r4, [r0, #4]
 8014b22:	80c1      	strh	r1, [r0, #6]
 8014b24:	bd10      	pop	{r4, pc}
	...

08014b28 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8014b28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014b2a:	6803      	ldr	r3, [r0, #0]
 8014b2c:	460d      	mov	r5, r1
 8014b2e:	4604      	mov	r4, r0
 8014b30:	4601      	mov	r1, r0
 8014b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014b34:	a802      	add	r0, sp, #8
 8014b36:	4798      	blx	r3
 8014b38:	466b      	mov	r3, sp
 8014b3a:	6828      	ldr	r0, [r5, #0]
 8014b3c:	6869      	ldr	r1, [r5, #4]
 8014b3e:	c303      	stmia	r3!, {r0, r1}
 8014b40:	4668      	mov	r0, sp
 8014b42:	4619      	mov	r1, r3
 8014b44:	f7fe f9e4 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 8014b48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014b4a:	b1a8      	cbz	r0, 8014b78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014b4c:	6803      	ldr	r3, [r0, #0]
 8014b4e:	1d21      	adds	r1, r4, #4
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	4798      	blx	r3
 8014b54:	b180      	cbz	r0, 8014b78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014b56:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	dd0c      	ble.n	8014b78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014b5e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8014b62:	2d00      	cmp	r5, #0
 8014b64:	dd08      	ble.n	8014b78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014b66:	4a2d      	ldr	r2, [pc, #180]	; (8014c1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8014b68:	7812      	ldrb	r2, [r2, #0]
 8014b6a:	b13a      	cbz	r2, 8014b7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8014b6c:	2a01      	cmp	r2, #1
 8014b6e:	d02d      	beq.n	8014bcc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8014b70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014b72:	6803      	ldr	r3, [r0, #0]
 8014b74:	691b      	ldr	r3, [r3, #16]
 8014b76:	4798      	blx	r3
 8014b78:	b004      	add	sp, #16
 8014b7a:	bd70      	pop	{r4, r5, r6, pc}
 8014b7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014b80:	441d      	add	r5, r3
 8014b82:	b2ad      	uxth	r5, r5
 8014b84:	b22e      	sxth	r6, r5
 8014b86:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8014b8a:	42b3      	cmp	r3, r6
 8014b8c:	daf0      	bge.n	8014b70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014b8e:	6823      	ldr	r3, [r4, #0]
 8014b90:	4669      	mov	r1, sp
 8014b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b94:	4620      	mov	r0, r4
 8014b96:	4798      	blx	r3
 8014b98:	b940      	cbnz	r0, 8014bac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8014b9a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8014b9e:	2b01      	cmp	r3, #1
 8014ba0:	d004      	beq.n	8014bac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	105b      	asrs	r3, r3, #1
 8014ba6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014baa:	e7f0      	b.n	8014b8e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8014bac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014bb0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014bb4:	4413      	add	r3, r2
 8014bb6:	b29b      	uxth	r3, r3
 8014bb8:	441a      	add	r2, r3
 8014bba:	b212      	sxth	r2, r2
 8014bbc:	4296      	cmp	r6, r2
 8014bbe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014bc2:	dae0      	bge.n	8014b86 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8014bc4:	1aeb      	subs	r3, r5, r3
 8014bc6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014bca:	e7dc      	b.n	8014b86 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8014bcc:	f8bd 5000 	ldrh.w	r5, [sp]
 8014bd0:	441d      	add	r5, r3
 8014bd2:	b2ad      	uxth	r5, r5
 8014bd4:	b22e      	sxth	r6, r5
 8014bd6:	f9bd 3000 	ldrsh.w	r3, [sp]
 8014bda:	42b3      	cmp	r3, r6
 8014bdc:	dac8      	bge.n	8014b70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014bde:	6823      	ldr	r3, [r4, #0]
 8014be0:	4669      	mov	r1, sp
 8014be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014be4:	4620      	mov	r0, r4
 8014be6:	4798      	blx	r3
 8014be8:	b940      	cbnz	r0, 8014bfc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8014bea:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d004      	beq.n	8014bfc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	105b      	asrs	r3, r3, #1
 8014bf6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014bfa:	e7f0      	b.n	8014bde <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8014bfc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014c00:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c04:	4413      	add	r3, r2
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	441a      	add	r2, r3
 8014c0a:	b212      	sxth	r2, r2
 8014c0c:	4296      	cmp	r6, r2
 8014c0e:	f8ad 3000 	strh.w	r3, [sp]
 8014c12:	dae0      	bge.n	8014bd6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8014c14:	1aeb      	subs	r3, r5, r3
 8014c16:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014c1a:	e7dc      	b.n	8014bd6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8014c1c:	2004f628 	.word	0x2004f628

08014c20 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8014c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c22:	6803      	ldr	r3, [r0, #0]
 8014c24:	4604      	mov	r4, r0
 8014c26:	4601      	mov	r1, r0
 8014c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c2a:	4668      	mov	r0, sp
 8014c2c:	4798      	blx	r3
 8014c2e:	2100      	movs	r1, #0
 8014c30:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8014c34:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014c38:	9102      	str	r1, [sp, #8]
 8014c3a:	4668      	mov	r0, sp
 8014c3c:	a902      	add	r1, sp, #8
 8014c3e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8014c42:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014c46:	f7fe f963 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 8014c4a:	6823      	ldr	r3, [r4, #0]
 8014c4c:	4669      	mov	r1, sp
 8014c4e:	691b      	ldr	r3, [r3, #16]
 8014c50:	4620      	mov	r0, r4
 8014c52:	4798      	blx	r3
 8014c54:	b004      	add	sp, #16
 8014c56:	bd10      	pop	{r4, pc}

08014c58 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8014c58:	2101      	movs	r1, #1
 8014c5a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8014c5e:	490b      	ldr	r1, [pc, #44]	; (8014c8c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8014c60:	2200      	movs	r2, #0
 8014c62:	6001      	str	r1, [r0, #0]
 8014c64:	21ff      	movs	r1, #255	; 0xff
 8014c66:	8082      	strh	r2, [r0, #4]
 8014c68:	80c2      	strh	r2, [r0, #6]
 8014c6a:	8102      	strh	r2, [r0, #8]
 8014c6c:	8142      	strh	r2, [r0, #10]
 8014c6e:	8182      	strh	r2, [r0, #12]
 8014c70:	81c2      	strh	r2, [r0, #14]
 8014c72:	8202      	strh	r2, [r0, #16]
 8014c74:	8242      	strh	r2, [r0, #18]
 8014c76:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014c7a:	61c2      	str	r2, [r0, #28]
 8014c7c:	8402      	strh	r2, [r0, #32]
 8014c7e:	8442      	strh	r2, [r0, #34]	; 0x22
 8014c80:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014c84:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8014c88:	6282      	str	r2, [r0, #40]	; 0x28
 8014c8a:	4770      	bx	lr
 8014c8c:	08028874 	.word	0x08028874

08014c90 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8014c90:	b508      	push	{r3, lr}
 8014c92:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8014c96:	b10b      	cbz	r3, 8014c9c <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8014c98:	f7f8 fc5c 	bl	800d554 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8014c9c:	bd08      	pop	{r3, pc}

08014c9e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8014c9e:	6803      	ldr	r3, [r0, #0]
 8014ca0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8014ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ca6:	4718      	bx	r3

08014ca8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8014ca8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8014cac:	b510      	push	{r4, lr}
 8014cae:	2bff      	cmp	r3, #255	; 0xff
 8014cb0:	d104      	bne.n	8014cbc <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8014cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cb6:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8014cb8:	429a      	cmp	r2, r3
 8014cba:	d105      	bne.n	8014cc8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	8003      	strh	r3, [r0, #0]
 8014cc0:	8043      	strh	r3, [r0, #2]
 8014cc2:	8083      	strh	r3, [r0, #4]
 8014cc4:	80c3      	strh	r3, [r0, #6]
 8014cc6:	bd10      	pop	{r4, pc}
 8014cc8:	2300      	movs	r3, #0
 8014cca:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8014cce:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8014cd2:	8003      	strh	r3, [r0, #0]
 8014cd4:	8043      	strh	r3, [r0, #2]
 8014cd6:	8084      	strh	r4, [r0, #4]
 8014cd8:	80c2      	strh	r2, [r0, #6]
 8014cda:	e7f4      	b.n	8014cc6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08014cdc <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8014cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ce0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8014ce4:	b087      	sub	sp, #28
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	4689      	mov	r9, r1
 8014cea:	b363      	cbz	r3, 8014d46 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8014cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cf0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d027      	beq.n	8014d46 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8014cf6:	ad06      	add	r5, sp, #24
 8014cf8:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	f004 fcbd 	bl	801967c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014d02:	2700      	movs	r7, #0
 8014d04:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014d08:	a904      	add	r1, sp, #16
 8014d0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014d0e:	6823      	ldr	r3, [r4, #0]
 8014d10:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d16:	4620      	mov	r0, r4
 8014d18:	9704      	str	r7, [sp, #16]
 8014d1a:	4798      	blx	r3
 8014d1c:	f7f8 fd86 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8014d20:	6803      	ldr	r3, [r0, #0]
 8014d22:	4606      	mov	r6, r0
 8014d24:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8014d28:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014d30:	f004 fd90 	bl	8019854 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014d34:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014d38:	4601      	mov	r1, r0
 8014d3a:	9300      	str	r3, [sp, #0]
 8014d3c:	9701      	str	r7, [sp, #4]
 8014d3e:	464b      	mov	r3, r9
 8014d40:	aa04      	add	r2, sp, #16
 8014d42:	4630      	mov	r0, r6
 8014d44:	47c0      	blx	r8
 8014d46:	b007      	add	sp, #28
 8014d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014d4c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8014d4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014d4e:	460d      	mov	r5, r1
 8014d50:	2100      	movs	r1, #0
 8014d52:	4604      	mov	r4, r0
 8014d54:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014d58:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8014d5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014d60:	6803      	ldr	r3, [r0, #0]
 8014d62:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d68:	9100      	str	r1, [sp, #0]
 8014d6a:	4669      	mov	r1, sp
 8014d6c:	4798      	blx	r3
 8014d6e:	4621      	mov	r1, r4
 8014d70:	a802      	add	r0, sp, #8
 8014d72:	f003 f86d 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014d76:	f7f8 fd59 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8014d7a:	6803      	ldr	r3, [r0, #0]
 8014d7c:	aa02      	add	r2, sp, #8
 8014d7e:	695e      	ldr	r6, [r3, #20]
 8014d80:	4669      	mov	r1, sp
 8014d82:	462b      	mov	r3, r5
 8014d84:	47b0      	blx	r6
 8014d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d8a:	2800      	cmp	r0, #0
 8014d8c:	bf08      	it	eq
 8014d8e:	461d      	moveq	r5, r3
 8014d90:	84e5      	strh	r5, [r4, #38]	; 0x26
 8014d92:	b004      	add	sp, #16
 8014d94:	bd70      	pop	{r4, r5, r6, pc}
	...

08014d98 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8014d98:	2200      	movs	r2, #0
 8014d9a:	8082      	strh	r2, [r0, #4]
 8014d9c:	80c2      	strh	r2, [r0, #6]
 8014d9e:	8102      	strh	r2, [r0, #8]
 8014da0:	8142      	strh	r2, [r0, #10]
 8014da2:	8182      	strh	r2, [r0, #12]
 8014da4:	81c2      	strh	r2, [r0, #14]
 8014da6:	8202      	strh	r2, [r0, #16]
 8014da8:	8242      	strh	r2, [r0, #18]
 8014daa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014dae:	61c2      	str	r2, [r0, #28]
 8014db0:	8402      	strh	r2, [r0, #32]
 8014db2:	8442      	strh	r2, [r0, #34]	; 0x22
 8014db4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014db8:	2201      	movs	r2, #1
 8014dba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8014dbe:	4a04      	ldr	r2, [pc, #16]	; (8014dd0 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8014dc0:	6002      	str	r2, [r0, #0]
 8014dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014dc6:	84c2      	strh	r2, [r0, #38]	; 0x26
 8014dc8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8014dcc:	4770      	bx	lr
 8014dce:	bf00      	nop
 8014dd0:	080288ec 	.word	0x080288ec

08014dd4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	8083      	strh	r3, [r0, #4]
 8014dd8:	80c3      	strh	r3, [r0, #6]
 8014dda:	8003      	strh	r3, [r0, #0]
 8014ddc:	8043      	strh	r3, [r0, #2]
 8014dde:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8014de2:	2bff      	cmp	r3, #255	; 0xff
 8014de4:	bf01      	itttt	eq
 8014de6:	890b      	ldrheq	r3, [r1, #8]
 8014de8:	8083      	strheq	r3, [r0, #4]
 8014dea:	894b      	ldrheq	r3, [r1, #10]
 8014dec:	80c3      	strheq	r3, [r0, #6]
 8014dee:	4770      	bx	lr

08014df0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8014df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014df2:	4604      	mov	r4, r0
 8014df4:	466b      	mov	r3, sp
 8014df6:	6808      	ldr	r0, [r1, #0]
 8014df8:	6849      	ldr	r1, [r1, #4]
 8014dfa:	c303      	stmia	r3!, {r0, r1}
 8014dfc:	6823      	ldr	r3, [r4, #0]
 8014dfe:	4669      	mov	r1, sp
 8014e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e02:	4620      	mov	r0, r4
 8014e04:	4798      	blx	r3
 8014e06:	4b08      	ldr	r3, [pc, #32]	; (8014e28 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014e0e:	b10a      	cbz	r2, 8014e14 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8014e10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014e12:	b900      	cbnz	r0, 8014e16 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8014e14:	6898      	ldr	r0, [r3, #8]
 8014e16:	6803      	ldr	r3, [r0, #0]
 8014e18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014e1a:	6a1d      	ldr	r5, [r3, #32]
 8014e1c:	4669      	mov	r1, sp
 8014e1e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014e22:	47a8      	blx	r5
 8014e24:	b003      	add	sp, #12
 8014e26:	bd30      	pop	{r4, r5, pc}
 8014e28:	2004f630 	.word	0x2004f630

08014e2c <_ZNK8touchgfx3Box17invalidateContentEv>:
 8014e2c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8014e30:	b12a      	cbz	r2, 8014e3e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014e32:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8014e36:	b112      	cbz	r2, 8014e3e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014e38:	6803      	ldr	r3, [r0, #0]
 8014e3a:	695b      	ldr	r3, [r3, #20]
 8014e3c:	4718      	bx	r3
 8014e3e:	4770      	bx	lr

08014e40 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8014e40:	b570      	push	{r4, r5, r6, lr}
 8014e42:	880b      	ldrh	r3, [r1, #0]
 8014e44:	4604      	mov	r4, r0
 8014e46:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014e48:	4608      	mov	r0, r1
 8014e4a:	460d      	mov	r5, r1
 8014e4c:	f004 fc16 	bl	801967c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014e50:	4606      	mov	r6, r0
 8014e52:	4628      	mov	r0, r5
 8014e54:	f004 fc46 	bl	80196e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014e58:	4605      	mov	r5, r0
 8014e5a:	6823      	ldr	r3, [r4, #0]
 8014e5c:	4631      	mov	r1, r6
 8014e5e:	4620      	mov	r0, r4
 8014e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e62:	4798      	blx	r3
 8014e64:	6823      	ldr	r3, [r4, #0]
 8014e66:	4629      	mov	r1, r5
 8014e68:	4620      	mov	r0, r4
 8014e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e70:	4718      	bx	r3

08014e72 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014e72:	b510      	push	{r4, lr}
 8014e74:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8014e78:	4604      	mov	r4, r0
 8014e7a:	2bff      	cmp	r3, #255	; 0xff
 8014e7c:	d006      	beq.n	8014e8c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8014e7e:	2300      	movs	r3, #0
 8014e80:	8003      	strh	r3, [r0, #0]
 8014e82:	8043      	strh	r3, [r0, #2]
 8014e84:	8083      	strh	r3, [r0, #4]
 8014e86:	80c3      	strh	r3, [r0, #6]
 8014e88:	4620      	mov	r0, r4
 8014e8a:	bd10      	pop	{r4, pc}
 8014e8c:	3126      	adds	r1, #38	; 0x26
 8014e8e:	f004 fc5d 	bl	801974c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014e92:	e7f9      	b.n	8014e88 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08014e94 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8014e94:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8014e98:	b12a      	cbz	r2, 8014ea6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014e9a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8014e9e:	b112      	cbz	r2, 8014ea6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014ea0:	6803      	ldr	r3, [r0, #0]
 8014ea2:	695b      	ldr	r3, [r3, #20]
 8014ea4:	4718      	bx	r3
 8014ea6:	4770      	bx	lr

08014ea8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eac:	4604      	mov	r4, r0
 8014eae:	2500      	movs	r5, #0
 8014eb0:	f854 3b26 	ldr.w	r3, [r4], #38
 8014eb4:	b088      	sub	sp, #32
 8014eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eb8:	460f      	mov	r7, r1
 8014eba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014ebe:	a904      	add	r1, sp, #16
 8014ec0:	4606      	mov	r6, r0
 8014ec2:	4798      	blx	r3
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	f004 fbd9 	bl	801967c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014eca:	4680      	mov	r8, r0
 8014ecc:	4620      	mov	r0, r4
 8014ece:	f004 fc09 	bl	80196e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014ed2:	9506      	str	r5, [sp, #24]
 8014ed4:	ad06      	add	r5, sp, #24
 8014ed6:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014eda:	4639      	mov	r1, r7
 8014edc:	4628      	mov	r0, r5
 8014ede:	f8ad 801c 	strh.w	r8, [sp, #28]
 8014ee2:	f7fe f815 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 8014ee6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	dd19      	ble.n	8014f22 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014eee:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	dd15      	ble.n	8014f22 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014ef6:	4b0c      	ldr	r3, [pc, #48]	; (8014f28 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014efe:	b10a      	cbz	r2, 8014f04 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8014f00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014f02:	b900      	cbnz	r0, 8014f06 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8014f04:	6898      	ldr	r0, [r3, #8]
 8014f06:	2701      	movs	r7, #1
 8014f08:	6801      	ldr	r1, [r0, #0]
 8014f0a:	9702      	str	r7, [sp, #8]
 8014f0c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8014f10:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014f14:	e9cd 5600 	strd	r5, r6, [sp]
 8014f18:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014f1c:	688d      	ldr	r5, [r1, #8]
 8014f1e:	4621      	mov	r1, r4
 8014f20:	47a8      	blx	r5
 8014f22:	b008      	add	sp, #32
 8014f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f28:	2004f630 	.word	0x2004f630

08014f2c <_ZN8touchgfx7OutlineD1Ev>:
 8014f2c:	4770      	bx	lr

08014f2e <_ZN8touchgfx7OutlineD0Ev>:
 8014f2e:	b510      	push	{r4, lr}
 8014f30:	4604      	mov	r4, r0
 8014f32:	2130      	movs	r1, #48	; 0x30
 8014f34:	f010 fc62 	bl	80257fc <_ZdlPvj>
 8014f38:	4620      	mov	r0, r4
 8014f3a:	bd10      	pop	{r4, pc}

08014f3c <_ZN8touchgfx7Outline5resetEv>:
 8014f3c:	b510      	push	{r4, lr}
 8014f3e:	4604      	mov	r4, r0
 8014f40:	f000 fe8a 	bl	8015c58 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8014f44:	60e0      	str	r0, [r4, #12]
 8014f46:	f000 fe8d 	bl	8015c64 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014f50:	68e3      	ldr	r3, [r4, #12]
 8014f52:	08c0      	lsrs	r0, r0, #3
 8014f54:	3801      	subs	r0, #1
 8014f56:	6123      	str	r3, [r4, #16]
 8014f58:	6060      	str	r0, [r4, #4]
 8014f5a:	60a2      	str	r2, [r4, #8]
 8014f5c:	8019      	strh	r1, [r3, #0]
 8014f5e:	8059      	strh	r1, [r3, #2]
 8014f60:	809a      	strh	r2, [r3, #4]
 8014f62:	80da      	strh	r2, [r3, #6]
 8014f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f66:	f023 0301 	bic.w	r3, r3, #1
 8014f6a:	f043 0302 	orr.w	r3, r3, #2
 8014f6e:	6263      	str	r3, [r4, #36]	; 0x24
 8014f70:	bd10      	pop	{r4, pc}
	...

08014f74 <_ZN8touchgfx7OutlineC1Ev>:
 8014f74:	4b0a      	ldr	r3, [pc, #40]	; (8014fa0 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8014f76:	b510      	push	{r4, lr}
 8014f78:	6003      	str	r3, [r0, #0]
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8014f80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f84:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014f88:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8014f8c:	6243      	str	r3, [r0, #36]	; 0x24
 8014f8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014f92:	4604      	mov	r4, r0
 8014f94:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8014f98:	f7ff ffd0 	bl	8014f3c <_ZN8touchgfx7Outline5resetEv>
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	bd10      	pop	{r4, pc}
 8014fa0:	08028a30 	.word	0x08028a30

08014fa4 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8014fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa8:	b093      	sub	sp, #76	; 0x4c
 8014faa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014fac:	9305      	str	r3, [sp, #20]
 8014fae:	f004 051f 	and.w	r5, r4, #31
 8014fb2:	1153      	asrs	r3, r2, #5
 8014fb4:	9504      	str	r5, [sp, #16]
 8014fb6:	1156      	asrs	r6, r2, #5
 8014fb8:	1165      	asrs	r5, r4, #5
 8014fba:	9303      	str	r3, [sp, #12]
 8014fbc:	42ae      	cmp	r6, r5
 8014fbe:	ea4f 1364 	mov.w	r3, r4, asr #5
 8014fc2:	9306      	str	r3, [sp, #24]
 8014fc4:	f002 031f 	and.w	r3, r2, #31
 8014fc8:	f040 80f8 	bne.w	80151bc <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8014fcc:	9c04      	ldr	r4, [sp, #16]
 8014fce:	9a05      	ldr	r2, [sp, #20]
 8014fd0:	42a3      	cmp	r3, r4
 8014fd2:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8014fd6:	6902      	ldr	r2, [r0, #16]
 8014fd8:	d125      	bne.n	8015026 <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8014fda:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014fde:	459e      	cmp	lr, r3
 8014fe0:	d103      	bne.n	8014fea <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 8014fe2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014fe6:	429e      	cmp	r6, r3
 8014fe8:	d035      	beq.n	8015056 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8014fea:	88d1      	ldrh	r1, [r2, #6]
 8014fec:	8893      	ldrh	r3, [r2, #4]
 8014fee:	430b      	orrs	r3, r1
 8014ff0:	d010      	beq.n	8015014 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8014ff2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	db0c      	blt.n	8015014 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8014ffa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014ffc:	428b      	cmp	r3, r1
 8014ffe:	da09      	bge.n	8015014 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015000:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015004:	428b      	cmp	r3, r1
 8015006:	bf38      	it	cc
 8015008:	3208      	addcc	r2, #8
 801500a:	f103 0301 	add.w	r3, r3, #1
 801500e:	bf38      	it	cc
 8015010:	6102      	strcc	r2, [r0, #16]
 8015012:	6083      	str	r3, [r0, #8]
 8015014:	6903      	ldr	r3, [r0, #16]
 8015016:	9a03      	ldr	r2, [sp, #12]
 8015018:	f8a3 e000 	strh.w	lr, [r3]
 801501c:	805a      	strh	r2, [r3, #2]
 801501e:	2200      	movs	r2, #0
 8015020:	809a      	strh	r2, [r3, #4]
 8015022:	80da      	strh	r2, [r3, #6]
 8015024:	e017      	b.n	8015056 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015026:	9c05      	ldr	r4, [sp, #20]
 8015028:	114e      	asrs	r6, r1, #5
 801502a:	f004 041f 	and.w	r4, r4, #31
 801502e:	9402      	str	r4, [sp, #8]
 8015030:	9c04      	ldr	r4, [sp, #16]
 8015032:	4576      	cmp	r6, lr
 8015034:	f001 0c1f 	and.w	ip, r1, #31
 8015038:	eba4 0403 	sub.w	r4, r4, r3
 801503c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8015040:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8015044:	d10a      	bne.n	801505c <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 8015046:	9b02      	ldr	r3, [sp, #8]
 8015048:	44a0      	add	r8, r4
 801504a:	449c      	add	ip, r3
 801504c:	fb04 a40c 	mla	r4, r4, ip, sl
 8015050:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015054:	80d4      	strh	r4, [r2, #6]
 8015056:	b013      	add	sp, #76	; 0x4c
 8015058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801505c:	9d05      	ldr	r5, [sp, #20]
 801505e:	1a69      	subs	r1, r5, r1
 8015060:	bf5b      	ittet	pl
 8015062:	f1cc 0520 	rsbpl	r5, ip, #32
 8015066:	436c      	mulpl	r4, r5
 8015068:	2500      	movmi	r5, #0
 801506a:	2520      	movpl	r5, #32
 801506c:	bf44      	itt	mi
 801506e:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015072:	4249      	negmi	r1, r1
 8015074:	9501      	str	r5, [sp, #4]
 8015076:	fb94 f5f1 	sdiv	r5, r4, r1
 801507a:	bf54      	ite	pl
 801507c:	f04f 0901 	movpl.w	r9, #1
 8015080:	f04f 39ff 	movmi.w	r9, #4294967295
 8015084:	fb01 4415 	mls	r4, r1, r5, r4
 8015088:	9f01      	ldr	r7, [sp, #4]
 801508a:	2c00      	cmp	r4, #0
 801508c:	bfb8      	it	lt
 801508e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015092:	44bc      	add	ip, r7
 8015094:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015098:	44a8      	add	r8, r5
 801509a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801509e:	f8a2 c006 	strh.w	ip, [r2, #6]
 80150a2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80150a6:	bfb8      	it	lt
 80150a8:	1864      	addlt	r4, r4, r1
 80150aa:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80150ae:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80150b2:	444e      	add	r6, r9
 80150b4:	ea58 0202 	orrs.w	r2, r8, r2
 80150b8:	d011      	beq.n	80150de <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80150ba:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80150be:	f1b8 0f00 	cmp.w	r8, #0
 80150c2:	db0c      	blt.n	80150de <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80150c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80150c6:	4590      	cmp	r8, r2
 80150c8:	da09      	bge.n	80150de <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80150ca:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80150ce:	4590      	cmp	r8, r2
 80150d0:	bf3c      	itt	cc
 80150d2:	f10c 0208 	addcc.w	r2, ip, #8
 80150d6:	6102      	strcc	r2, [r0, #16]
 80150d8:	f108 0201 	add.w	r2, r8, #1
 80150dc:	6082      	str	r2, [r0, #8]
 80150de:	2700      	movs	r7, #0
 80150e0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80150e4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80150e8:	45b6      	cmp	lr, r6
 80150ea:	f8ac 6000 	strh.w	r6, [ip]
 80150ee:	f8ac 2002 	strh.w	r2, [ip, #2]
 80150f2:	f8ac 7004 	strh.w	r7, [ip, #4]
 80150f6:	f8ac 7006 	strh.w	r7, [ip, #6]
 80150fa:	442b      	add	r3, r5
 80150fc:	d04d      	beq.n	801519a <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 80150fe:	9f04      	ldr	r7, [sp, #16]
 8015100:	f04f 0a00 	mov.w	sl, #0
 8015104:	1aff      	subs	r7, r7, r3
 8015106:	443d      	add	r5, r7
 8015108:	016d      	lsls	r5, r5, #5
 801510a:	fb95 f8f1 	sdiv	r8, r5, r1
 801510e:	fb01 5518 	mls	r5, r1, r8, r5
 8015112:	2d00      	cmp	r5, #0
 8015114:	bfb8      	it	lt
 8015116:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801511a:	f108 0701 	add.w	r7, r8, #1
 801511e:	bfb8      	it	lt
 8015120:	186d      	addlt	r5, r5, r1
 8015122:	1a64      	subs	r4, r4, r1
 8015124:	9703      	str	r7, [sp, #12]
 8015126:	1964      	adds	r4, r4, r5
 8015128:	bf48      	it	mi
 801512a:	4647      	movmi	r7, r8
 801512c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015130:	bf58      	it	pl
 8015132:	9f03      	ldrpl	r7, [sp, #12]
 8015134:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8015138:	443b      	add	r3, r7
 801513a:	44bb      	add	fp, r7
 801513c:	f8ac b004 	strh.w	fp, [ip, #4]
 8015140:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015144:	bf58      	it	pl
 8015146:	1a64      	subpl	r4, r4, r1
 8015148:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801514c:	f8ac b006 	strh.w	fp, [ip, #6]
 8015150:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015154:	444e      	add	r6, r9
 8015156:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801515a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801515e:	ea5b 0707 	orrs.w	r7, fp, r7
 8015162:	d011      	beq.n	8015188 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015164:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8015168:	f1bb 0f00 	cmp.w	fp, #0
 801516c:	db0c      	blt.n	8015188 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801516e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015170:	45bb      	cmp	fp, r7
 8015172:	da09      	bge.n	8015188 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015174:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015178:	45bb      	cmp	fp, r7
 801517a:	bf3c      	itt	cc
 801517c:	f10c 0708 	addcc.w	r7, ip, #8
 8015180:	6107      	strcc	r7, [r0, #16]
 8015182:	f10b 0701 	add.w	r7, fp, #1
 8015186:	6087      	str	r7, [r0, #8]
 8015188:	6907      	ldr	r7, [r0, #16]
 801518a:	45b6      	cmp	lr, r6
 801518c:	803e      	strh	r6, [r7, #0]
 801518e:	807a      	strh	r2, [r7, #2]
 8015190:	f8a7 a004 	strh.w	sl, [r7, #4]
 8015194:	f8a7 a006 	strh.w	sl, [r7, #6]
 8015198:	d1c5      	bne.n	8015126 <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 801519a:	9a04      	ldr	r2, [sp, #16]
 801519c:	1ad3      	subs	r3, r2, r3
 801519e:	6902      	ldr	r2, [r0, #16]
 80151a0:	8891      	ldrh	r1, [r2, #4]
 80151a2:	88d6      	ldrh	r6, [r2, #6]
 80151a4:	4419      	add	r1, r3
 80151a6:	8091      	strh	r1, [r2, #4]
 80151a8:	9902      	ldr	r1, [sp, #8]
 80151aa:	f101 0c20 	add.w	ip, r1, #32
 80151ae:	9901      	ldr	r1, [sp, #4]
 80151b0:	ebac 0c01 	sub.w	ip, ip, r1
 80151b4:	fb03 630c 	mla	r3, r3, ip, r6
 80151b8:	80d3      	strh	r3, [r2, #6]
 80151ba:	e74c      	b.n	8015056 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80151bc:	9d05      	ldr	r5, [sp, #20]
 80151be:	1aa2      	subs	r2, r4, r2
 80151c0:	eba5 0501 	sub.w	r5, r5, r1
 80151c4:	9508      	str	r5, [sp, #32]
 80151c6:	9202      	str	r2, [sp, #8]
 80151c8:	f140 8128 	bpl.w	801541c <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 80151cc:	9a03      	ldr	r2, [sp, #12]
 80151ce:	2a00      	cmp	r2, #0
 80151d0:	f6ff af41 	blt.w	8015056 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80151d4:	f04f 34ff 	mov.w	r4, #4294967295
 80151d8:	9a02      	ldr	r2, [sp, #8]
 80151da:	940b      	str	r4, [sp, #44]	; 0x2c
 80151dc:	4252      	negs	r2, r2
 80151de:	9202      	str	r2, [sp, #8]
 80151e0:	9a06      	ldr	r2, [sp, #24]
 80151e2:	2400      	movs	r4, #0
 80151e4:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80151e8:	9206      	str	r2, [sp, #24]
 80151ea:	462a      	mov	r2, r5
 80151ec:	435a      	muls	r2, r3
 80151ee:	9401      	str	r4, [sp, #4]
 80151f0:	9c02      	ldr	r4, [sp, #8]
 80151f2:	9d02      	ldr	r5, [sp, #8]
 80151f4:	fb92 f4f4 	sdiv	r4, r2, r4
 80151f8:	fb05 2214 	mls	r2, r5, r4, r2
 80151fc:	2a00      	cmp	r2, #0
 80151fe:	9207      	str	r2, [sp, #28]
 8015200:	bfbc      	itt	lt
 8015202:	1952      	addlt	r2, r2, r5
 8015204:	9207      	strlt	r2, [sp, #28]
 8015206:	9a01      	ldr	r2, [sp, #4]
 8015208:	bfb8      	it	lt
 801520a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801520e:	eb04 0901 	add.w	r9, r4, r1
 8015212:	429a      	cmp	r2, r3
 8015214:	ea4f 1669 	mov.w	r6, r9, asr #5
 8015218:	6905      	ldr	r5, [r0, #16]
 801521a:	f040 8112 	bne.w	8015442 <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 801521e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015222:	429e      	cmp	r6, r3
 8015224:	d104      	bne.n	8015230 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8015226:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801522a:	9a03      	ldr	r2, [sp, #12]
 801522c:	429a      	cmp	r2, r3
 801522e:	d01b      	beq.n	8015268 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8015230:	88ea      	ldrh	r2, [r5, #6]
 8015232:	88ab      	ldrh	r3, [r5, #4]
 8015234:	4313      	orrs	r3, r2
 8015236:	d010      	beq.n	801525a <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015238:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801523c:	2a00      	cmp	r2, #0
 801523e:	db0c      	blt.n	801525a <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015240:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015242:	429a      	cmp	r2, r3
 8015244:	da09      	bge.n	801525a <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015246:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801524a:	429a      	cmp	r2, r3
 801524c:	bf38      	it	cc
 801524e:	3508      	addcc	r5, #8
 8015250:	f102 0201 	add.w	r2, r2, #1
 8015254:	bf38      	it	cc
 8015256:	6105      	strcc	r5, [r0, #16]
 8015258:	6082      	str	r2, [r0, #8]
 801525a:	6903      	ldr	r3, [r0, #16]
 801525c:	9a03      	ldr	r2, [sp, #12]
 801525e:	801e      	strh	r6, [r3, #0]
 8015260:	805a      	strh	r2, [r3, #2]
 8015262:	2200      	movs	r2, #0
 8015264:	809a      	strh	r2, [r3, #4]
 8015266:	80da      	strh	r2, [r3, #6]
 8015268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801526a:	9a03      	ldr	r2, [sp, #12]
 801526c:	6901      	ldr	r1, [r0, #16]
 801526e:	441a      	add	r2, r3
 8015270:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015274:	42b3      	cmp	r3, r6
 8015276:	d103      	bne.n	8015280 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8015278:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801527c:	429a      	cmp	r2, r3
 801527e:	d01a      	beq.n	80152b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8015280:	88cc      	ldrh	r4, [r1, #6]
 8015282:	888b      	ldrh	r3, [r1, #4]
 8015284:	4323      	orrs	r3, r4
 8015286:	d010      	beq.n	80152aa <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015288:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801528c:	2c00      	cmp	r4, #0
 801528e:	db0c      	blt.n	80152aa <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015290:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015292:	429c      	cmp	r4, r3
 8015294:	da09      	bge.n	80152aa <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015296:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801529a:	429c      	cmp	r4, r3
 801529c:	bf38      	it	cc
 801529e:	3108      	addcc	r1, #8
 80152a0:	f104 0401 	add.w	r4, r4, #1
 80152a4:	bf38      	it	cc
 80152a6:	6101      	strcc	r1, [r0, #16]
 80152a8:	6084      	str	r4, [r0, #8]
 80152aa:	2100      	movs	r1, #0
 80152ac:	6903      	ldr	r3, [r0, #16]
 80152ae:	801e      	strh	r6, [r3, #0]
 80152b0:	805a      	strh	r2, [r3, #2]
 80152b2:	8099      	strh	r1, [r3, #4]
 80152b4:	80d9      	strh	r1, [r3, #6]
 80152b6:	9b06      	ldr	r3, [sp, #24]
 80152b8:	4293      	cmp	r3, r2
 80152ba:	f000 8082 	beq.w	80153c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 80152be:	9b08      	ldr	r3, [sp, #32]
 80152c0:	9902      	ldr	r1, [sp, #8]
 80152c2:	015b      	lsls	r3, r3, #5
 80152c4:	fb93 f1f1 	sdiv	r1, r3, r1
 80152c8:	9c02      	ldr	r4, [sp, #8]
 80152ca:	9103      	str	r1, [sp, #12]
 80152cc:	fb04 3311 	mls	r3, r4, r1, r3
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	9308      	str	r3, [sp, #32]
 80152d4:	da04      	bge.n	80152e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 80152d6:	1e4b      	subs	r3, r1, #1
 80152d8:	9303      	str	r3, [sp, #12]
 80152da:	9b08      	ldr	r3, [sp, #32]
 80152dc:	4423      	add	r3, r4
 80152de:	9308      	str	r3, [sp, #32]
 80152e0:	464f      	mov	r7, r9
 80152e2:	2600      	movs	r6, #0
 80152e4:	9b07      	ldr	r3, [sp, #28]
 80152e6:	9902      	ldr	r1, [sp, #8]
 80152e8:	1a5b      	subs	r3, r3, r1
 80152ea:	9307      	str	r3, [sp, #28]
 80152ec:	9b01      	ldr	r3, [sp, #4]
 80152ee:	f1c3 0320 	rsb	r3, r3, #32
 80152f2:	930e      	str	r3, [sp, #56]	; 0x38
 80152f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80152f6:	9b01      	ldr	r3, [sp, #4]
 80152f8:	1a5b      	subs	r3, r3, r1
 80152fa:	930a      	str	r3, [sp, #40]	; 0x28
 80152fc:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8015300:	185b      	adds	r3, r3, r1
 8015302:	bf58      	it	pl
 8015304:	9902      	ldrpl	r1, [sp, #8]
 8015306:	9307      	str	r3, [sp, #28]
 8015308:	bf5d      	ittte	pl
 801530a:	1a5b      	subpl	r3, r3, r1
 801530c:	9307      	strpl	r3, [sp, #28]
 801530e:	9b03      	ldrpl	r3, [sp, #12]
 8015310:	9903      	ldrmi	r1, [sp, #12]
 8015312:	bf58      	it	pl
 8015314:	1c59      	addpl	r1, r3, #1
 8015316:	4489      	add	r9, r1
 8015318:	2a00      	cmp	r2, #0
 801531a:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801531e:	db2e      	blt.n	801537e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015320:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015322:	4293      	cmp	r3, r2
 8015324:	dd2b      	ble.n	801537e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015326:	9c01      	ldr	r4, [sp, #4]
 8015328:	6905      	ldr	r5, [r0, #16]
 801532a:	46a0      	mov	r8, r4
 801532c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801532e:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8015332:	45a0      	cmp	r8, r4
 8015334:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8015338:	f040 8150 	bne.w	80155dc <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 801533c:	f9b5 1000 	ldrsh.w	r1, [r5]
 8015340:	4551      	cmp	r1, sl
 8015342:	d103      	bne.n	801534c <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8015344:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015348:	4291      	cmp	r1, r2
 801534a:	d018      	beq.n	801537e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801534c:	ea5c 010e 	orrs.w	r1, ip, lr
 8015350:	d00f      	beq.n	8015372 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015352:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015356:	2900      	cmp	r1, #0
 8015358:	db0b      	blt.n	8015372 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801535a:	428b      	cmp	r3, r1
 801535c:	dd09      	ble.n	8015372 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801535e:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8015362:	4299      	cmp	r1, r3
 8015364:	bf38      	it	cc
 8015366:	3508      	addcc	r5, #8
 8015368:	f101 0101 	add.w	r1, r1, #1
 801536c:	bf38      	it	cc
 801536e:	6105      	strcc	r5, [r0, #16]
 8015370:	6081      	str	r1, [r0, #8]
 8015372:	6903      	ldr	r3, [r0, #16]
 8015374:	f8a3 a000 	strh.w	sl, [r3]
 8015378:	805a      	strh	r2, [r3, #2]
 801537a:	809e      	strh	r6, [r3, #4]
 801537c:	80de      	strh	r6, [r3, #6]
 801537e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015380:	6901      	ldr	r1, [r0, #16]
 8015382:	441a      	add	r2, r3
 8015384:	88cc      	ldrh	r4, [r1, #6]
 8015386:	888b      	ldrh	r3, [r1, #4]
 8015388:	4323      	orrs	r3, r4
 801538a:	d010      	beq.n	80153ae <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801538c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015390:	2c00      	cmp	r4, #0
 8015392:	db0c      	blt.n	80153ae <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015394:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015396:	429c      	cmp	r4, r3
 8015398:	da09      	bge.n	80153ae <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801539a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801539e:	429c      	cmp	r4, r3
 80153a0:	bf38      	it	cc
 80153a2:	3108      	addcc	r1, #8
 80153a4:	f104 0401 	add.w	r4, r4, #1
 80153a8:	bf38      	it	cc
 80153aa:	6101      	strcc	r1, [r0, #16]
 80153ac:	6084      	str	r4, [r0, #8]
 80153ae:	6903      	ldr	r3, [r0, #16]
 80153b0:	464f      	mov	r7, r9
 80153b2:	f8a3 a000 	strh.w	sl, [r3]
 80153b6:	805a      	strh	r2, [r3, #2]
 80153b8:	809e      	strh	r6, [r3, #4]
 80153ba:	80de      	strh	r6, [r3, #6]
 80153bc:	9b06      	ldr	r3, [sp, #24]
 80153be:	4293      	cmp	r3, r2
 80153c0:	d19c      	bne.n	80152fc <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 80153c2:	9b01      	ldr	r3, [sp, #4]
 80153c4:	6907      	ldr	r7, [r0, #16]
 80153c6:	f1c3 0620 	rsb	r6, r3, #32
 80153ca:	9b05      	ldr	r3, [sp, #20]
 80153cc:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80153d0:	9b04      	ldr	r3, [sp, #16]
 80153d2:	429e      	cmp	r6, r3
 80153d4:	f040 81cc 	bne.w	8015770 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 80153d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80153dc:	459e      	cmp	lr, r3
 80153de:	d104      	bne.n	80153ea <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 80153e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	f43f ae36 	beq.w	8015056 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80153ea:	88f9      	ldrh	r1, [r7, #6]
 80153ec:	88bb      	ldrh	r3, [r7, #4]
 80153ee:	430b      	orrs	r3, r1
 80153f0:	d010      	beq.n	8015414 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 80153f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	db0c      	blt.n	8015414 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 80153fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80153fc:	428b      	cmp	r3, r1
 80153fe:	da09      	bge.n	8015414 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015400:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015404:	428b      	cmp	r3, r1
 8015406:	bf38      	it	cc
 8015408:	3708      	addcc	r7, #8
 801540a:	f103 0301 	add.w	r3, r3, #1
 801540e:	bf38      	it	cc
 8015410:	6107      	strcc	r7, [r0, #16]
 8015412:	6083      	str	r3, [r0, #8]
 8015414:	6903      	ldr	r3, [r0, #16]
 8015416:	f8a3 e000 	strh.w	lr, [r3]
 801541a:	e5ff      	b.n	801501c <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 801541c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801541e:	9c03      	ldr	r4, [sp, #12]
 8015420:	42a2      	cmp	r2, r4
 8015422:	f6ff ae18 	blt.w	8015056 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015426:	9c06      	ldr	r4, [sp, #24]
 8015428:	42a2      	cmp	r2, r4
 801542a:	bfb8      	it	lt
 801542c:	3201      	addlt	r2, #1
 801542e:	9c08      	ldr	r4, [sp, #32]
 8015430:	bfb8      	it	lt
 8015432:	9206      	strlt	r2, [sp, #24]
 8015434:	f1c3 0220 	rsb	r2, r3, #32
 8015438:	4362      	muls	r2, r4
 801543a:	2401      	movs	r4, #1
 801543c:	940b      	str	r4, [sp, #44]	; 0x2c
 801543e:	2420      	movs	r4, #32
 8015440:	e6d5      	b.n	80151ee <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8015442:	f009 021f 	and.w	r2, r9, #31
 8015446:	ea4f 1861 	mov.w	r8, r1, asr #5
 801544a:	920c      	str	r2, [sp, #48]	; 0x30
 801544c:	9a01      	ldr	r2, [sp, #4]
 801544e:	45b0      	cmp	r8, r6
 8015450:	f001 011f 	and.w	r1, r1, #31
 8015454:	eba2 0203 	sub.w	r2, r2, r3
 8015458:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801545c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8015460:	d108      	bne.n	8015474 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8015462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015464:	4496      	add	lr, r2
 8015466:	4419      	add	r1, r3
 8015468:	fb02 a101 	mla	r1, r2, r1, sl
 801546c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8015470:	80e9      	strh	r1, [r5, #6]
 8015472:	e6f9      	b.n	8015268 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8015474:	2c00      	cmp	r4, #0
 8015476:	f2c0 80aa 	blt.w	80155ce <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 801547a:	2701      	movs	r7, #1
 801547c:	970a      	str	r7, [sp, #40]	; 0x28
 801547e:	2720      	movs	r7, #32
 8015480:	f1c1 0c20 	rsb	ip, r1, #32
 8015484:	fb02 f20c 	mul.w	r2, r2, ip
 8015488:	fb92 fcf4 	sdiv	ip, r2, r4
 801548c:	fb04 221c 	mls	r2, r4, ip, r2
 8015490:	9709      	str	r7, [sp, #36]	; 0x24
 8015492:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015494:	2a00      	cmp	r2, #0
 8015496:	bfb8      	it	lt
 8015498:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801549c:	4439      	add	r1, r7
 801549e:	fb0c a101 	mla	r1, ip, r1, sl
 80154a2:	44e6      	add	lr, ip
 80154a4:	80e9      	strh	r1, [r5, #6]
 80154a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80154a8:	f8a5 e004 	strh.w	lr, [r5, #4]
 80154ac:	eb08 0501 	add.w	r5, r8, r1
 80154b0:	6901      	ldr	r1, [r0, #16]
 80154b2:	bfb8      	it	lt
 80154b4:	1912      	addlt	r2, r2, r4
 80154b6:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80154ba:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80154be:	ea58 070e 	orrs.w	r7, r8, lr
 80154c2:	d010      	beq.n	80154e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80154c4:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80154c8:	f1be 0f00 	cmp.w	lr, #0
 80154cc:	db0b      	blt.n	80154e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80154ce:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80154d0:	45be      	cmp	lr, r7
 80154d2:	da08      	bge.n	80154e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80154d4:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80154d8:	45be      	cmp	lr, r7
 80154da:	bf3c      	itt	cc
 80154dc:	3108      	addcc	r1, #8
 80154de:	6101      	strcc	r1, [r0, #16]
 80154e0:	f10e 0101 	add.w	r1, lr, #1
 80154e4:	6081      	str	r1, [r0, #8]
 80154e6:	f04f 0e00 	mov.w	lr, #0
 80154ea:	6901      	ldr	r1, [r0, #16]
 80154ec:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80154f0:	42ae      	cmp	r6, r5
 80154f2:	800d      	strh	r5, [r1, #0]
 80154f4:	f8a1 8002 	strh.w	r8, [r1, #2]
 80154f8:	f8a1 e004 	strh.w	lr, [r1, #4]
 80154fc:	f8a1 e006 	strh.w	lr, [r1, #6]
 8015500:	4463      	add	r3, ip
 8015502:	d055      	beq.n	80155b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 8015504:	9901      	ldr	r1, [sp, #4]
 8015506:	1b12      	subs	r2, r2, r4
 8015508:	1ac9      	subs	r1, r1, r3
 801550a:	4461      	add	r1, ip
 801550c:	0149      	lsls	r1, r1, #5
 801550e:	fb91 fef4 	sdiv	lr, r1, r4
 8015512:	fb04 111e 	mls	r1, r4, lr, r1
 8015516:	2900      	cmp	r1, #0
 8015518:	bfb8      	it	lt
 801551a:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801551e:	f10e 0701 	add.w	r7, lr, #1
 8015522:	bfb8      	it	lt
 8015524:	1909      	addlt	r1, r1, r4
 8015526:	970d      	str	r7, [sp, #52]	; 0x34
 8015528:	1852      	adds	r2, r2, r1
 801552a:	bf48      	it	mi
 801552c:	46f4      	movmi	ip, lr
 801552e:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8015532:	bf58      	it	pl
 8015534:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8015538:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801553c:	4463      	add	r3, ip
 801553e:	44e3      	add	fp, ip
 8015540:	f8aa b004 	strh.w	fp, [sl, #4]
 8015544:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8015548:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801554a:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801554e:	f8aa b006 	strh.w	fp, [sl, #6]
 8015552:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015556:	bf58      	it	pl
 8015558:	1b12      	subpl	r2, r2, r4
 801555a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801555e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8015562:	443d      	add	r5, r7
 8015564:	ea5b 070a 	orrs.w	r7, fp, sl
 8015568:	d014      	beq.n	8015594 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 801556a:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801556e:	f1ba 0f00 	cmp.w	sl, #0
 8015572:	db0f      	blt.n	8015594 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8015574:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015576:	45ba      	cmp	sl, r7
 8015578:	da0c      	bge.n	8015594 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 801557a:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801557e:	45ba      	cmp	sl, r7
 8015580:	bf38      	it	cc
 8015582:	f10c 0c08 	addcc.w	ip, ip, #8
 8015586:	f10a 0a01 	add.w	sl, sl, #1
 801558a:	bf38      	it	cc
 801558c:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8015590:	f8c0 a008 	str.w	sl, [r0, #8]
 8015594:	f04f 0700 	mov.w	r7, #0
 8015598:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801559c:	42ae      	cmp	r6, r5
 801559e:	f8ac 5000 	strh.w	r5, [ip]
 80155a2:	f8ac 8002 	strh.w	r8, [ip, #2]
 80155a6:	f8ac 7004 	strh.w	r7, [ip, #4]
 80155aa:	f8ac 7006 	strh.w	r7, [ip, #6]
 80155ae:	d1bb      	bne.n	8015528 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 80155b0:	6904      	ldr	r4, [r0, #16]
 80155b2:	9a01      	ldr	r2, [sp, #4]
 80155b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80155b6:	1ad3      	subs	r3, r2, r3
 80155b8:	88a2      	ldrh	r2, [r4, #4]
 80155ba:	3120      	adds	r1, #32
 80155bc:	441a      	add	r2, r3
 80155be:	80a2      	strh	r2, [r4, #4]
 80155c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155c2:	1a89      	subs	r1, r1, r2
 80155c4:	88e2      	ldrh	r2, [r4, #6]
 80155c6:	fb03 2301 	mla	r3, r3, r1, r2
 80155ca:	80e3      	strh	r3, [r4, #6]
 80155cc:	e64c      	b.n	8015268 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80155ce:	f04f 37ff 	mov.w	r7, #4294967295
 80155d2:	434a      	muls	r2, r1
 80155d4:	970a      	str	r7, [sp, #40]	; 0x28
 80155d6:	4264      	negs	r4, r4
 80155d8:	2700      	movs	r7, #0
 80155da:	e755      	b.n	8015488 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 80155dc:	ea4f 1867 	mov.w	r8, r7, asr #5
 80155e0:	f009 031f 	and.w	r3, r9, #31
 80155e4:	45d0      	cmp	r8, sl
 80155e6:	f007 071f 	and.w	r7, r7, #31
 80155ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80155ec:	fa1f fc8c 	uxth.w	ip, ip
 80155f0:	fa1f fe8e 	uxth.w	lr, lr
 80155f4:	d10a      	bne.n	801560c <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 80155f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155f8:	449c      	add	ip, r3
 80155fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155fc:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015600:	441f      	add	r7, r3
 8015602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015604:	fb03 e707 	mla	r7, r3, r7, lr
 8015608:	80ef      	strh	r7, [r5, #6]
 801560a:	e6b8      	b.n	801537e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801560c:	2900      	cmp	r1, #0
 801560e:	f2c0 80a7 	blt.w	8015760 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8015612:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015614:	f1c7 0320 	rsb	r3, r7, #32
 8015618:	4363      	muls	r3, r4
 801561a:	2401      	movs	r4, #1
 801561c:	940d      	str	r4, [sp, #52]	; 0x34
 801561e:	2420      	movs	r4, #32
 8015620:	940c      	str	r4, [sp, #48]	; 0x30
 8015622:	fb93 f4f1 	sdiv	r4, r3, r1
 8015626:	fb01 3b14 	mls	fp, r1, r4, r3
 801562a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801562c:	f1bb 0f00 	cmp.w	fp, #0
 8015630:	bfb8      	it	lt
 8015632:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015636:	441f      	add	r7, r3
 8015638:	fb04 e707 	mla	r7, r4, r7, lr
 801563c:	44a4      	add	ip, r4
 801563e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015642:	80ef      	strh	r7, [r5, #6]
 8015644:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801564a:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801564e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015652:	bfb8      	it	lt
 8015654:	448b      	addlt	fp, r1
 8015656:	eb08 0503 	add.w	r5, r8, r3
 801565a:	ea5e 0307 	orrs.w	r3, lr, r7
 801565e:	d011      	beq.n	8015684 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8015660:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8015664:	f1be 0f00 	cmp.w	lr, #0
 8015668:	db0c      	blt.n	8015684 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 801566a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801566c:	45be      	cmp	lr, r7
 801566e:	da09      	bge.n	8015684 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8015670:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8015674:	45be      	cmp	lr, r7
 8015676:	bf3c      	itt	cc
 8015678:	f10c 0708 	addcc.w	r7, ip, #8
 801567c:	6107      	strcc	r7, [r0, #16]
 801567e:	f10e 0701 	add.w	r7, lr, #1
 8015682:	6087      	str	r7, [r0, #8]
 8015684:	6907      	ldr	r7, [r0, #16]
 8015686:	b213      	sxth	r3, r2
 8015688:	9310      	str	r3, [sp, #64]	; 0x40
 801568a:	807b      	strh	r3, [r7, #2]
 801568c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801568e:	4555      	cmp	r5, sl
 8015690:	803d      	strh	r5, [r7, #0]
 8015692:	80be      	strh	r6, [r7, #4]
 8015694:	80fe      	strh	r6, [r7, #6]
 8015696:	eb04 0c03 	add.w	ip, r4, r3
 801569a:	d050      	beq.n	801573e <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 801569c:	9b01      	ldr	r3, [sp, #4]
 801569e:	eba3 070c 	sub.w	r7, r3, ip
 80156a2:	443c      	add	r4, r7
 80156a4:	0164      	lsls	r4, r4, #5
 80156a6:	fb94 f8f1 	sdiv	r8, r4, r1
 80156aa:	fb01 4418 	mls	r4, r1, r8, r4
 80156ae:	2c00      	cmp	r4, #0
 80156b0:	bfb8      	it	lt
 80156b2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80156b6:	ebab 0301 	sub.w	r3, fp, r1
 80156ba:	f108 0701 	add.w	r7, r8, #1
 80156be:	bfb8      	it	lt
 80156c0:	1864      	addlt	r4, r4, r1
 80156c2:	9309      	str	r3, [sp, #36]	; 0x24
 80156c4:	9711      	str	r7, [sp, #68]	; 0x44
 80156c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156c8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80156cc:	191b      	adds	r3, r3, r4
 80156ce:	bf4c      	ite	mi
 80156d0:	4647      	movmi	r7, r8
 80156d2:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 80156d4:	f8be b004 	ldrh.w	fp, [lr, #4]
 80156d8:	44bc      	add	ip, r7
 80156da:	44bb      	add	fp, r7
 80156dc:	f8ae b004 	strh.w	fp, [lr, #4]
 80156e0:	f8be b006 	ldrh.w	fp, [lr, #6]
 80156e4:	9309      	str	r3, [sp, #36]	; 0x24
 80156e6:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80156ea:	f8ae b006 	strh.w	fp, [lr, #6]
 80156ee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80156f0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80156f4:	443d      	add	r5, r7
 80156f6:	f8be b006 	ldrh.w	fp, [lr, #6]
 80156fa:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80156fe:	bf5c      	itt	pl
 8015700:	1a5b      	subpl	r3, r3, r1
 8015702:	9309      	strpl	r3, [sp, #36]	; 0x24
 8015704:	ea5b 0307 	orrs.w	r3, fp, r7
 8015708:	d011      	beq.n	801572e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801570a:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801570e:	f1bb 0f00 	cmp.w	fp, #0
 8015712:	db0c      	blt.n	801572e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8015714:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015716:	45bb      	cmp	fp, r7
 8015718:	da09      	bge.n	801572e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801571a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801571e:	45bb      	cmp	fp, r7
 8015720:	bf3c      	itt	cc
 8015722:	f10e 0708 	addcc.w	r7, lr, #8
 8015726:	6107      	strcc	r7, [r0, #16]
 8015728:	f10b 0701 	add.w	r7, fp, #1
 801572c:	6087      	str	r7, [r0, #8]
 801572e:	6907      	ldr	r7, [r0, #16]
 8015730:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015732:	4555      	cmp	r5, sl
 8015734:	803d      	strh	r5, [r7, #0]
 8015736:	807b      	strh	r3, [r7, #2]
 8015738:	80be      	strh	r6, [r7, #4]
 801573a:	80fe      	strh	r6, [r7, #6]
 801573c:	d1c3      	bne.n	80156c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 801573e:	9b01      	ldr	r3, [sp, #4]
 8015740:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015742:	eba3 0c0c 	sub.w	ip, r3, ip
 8015746:	6903      	ldr	r3, [r0, #16]
 8015748:	3720      	adds	r7, #32
 801574a:	8899      	ldrh	r1, [r3, #4]
 801574c:	4461      	add	r1, ip
 801574e:	8099      	strh	r1, [r3, #4]
 8015750:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015752:	1a7f      	subs	r7, r7, r1
 8015754:	88d9      	ldrh	r1, [r3, #6]
 8015756:	fb0c 1c07 	mla	ip, ip, r7, r1
 801575a:	f8a3 c006 	strh.w	ip, [r3, #6]
 801575e:	e60e      	b.n	801537e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015760:	f04f 34ff 	mov.w	r4, #4294967295
 8015764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015766:	940d      	str	r4, [sp, #52]	; 0x34
 8015768:	437b      	muls	r3, r7
 801576a:	4249      	negs	r1, r1
 801576c:	2400      	movs	r4, #0
 801576e:	e757      	b.n	8015620 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8015770:	9905      	ldr	r1, [sp, #20]
 8015772:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8015776:	f001 011f 	and.w	r1, r1, #31
 801577a:	9102      	str	r1, [sp, #8]
 801577c:	9904      	ldr	r1, [sp, #16]
 801577e:	45f3      	cmp	fp, lr
 8015780:	f009 0c1f 	and.w	ip, r9, #31
 8015784:	eba1 0406 	sub.w	r4, r1, r6
 8015788:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801578c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8015790:	d108      	bne.n	80157a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8015792:	9b02      	ldr	r3, [sp, #8]
 8015794:	44a0      	add	r8, r4
 8015796:	449c      	add	ip, r3
 8015798:	fb04 a40c 	mla	r4, r4, ip, sl
 801579c:	f8a7 8004 	strh.w	r8, [r7, #4]
 80157a0:	80fc      	strh	r4, [r7, #6]
 80157a2:	e458      	b.n	8015056 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80157a4:	9905      	ldr	r1, [sp, #20]
 80157a6:	ebb1 0109 	subs.w	r1, r1, r9
 80157aa:	bf5b      	ittet	pl
 80157ac:	f1cc 0520 	rsbpl	r5, ip, #32
 80157b0:	436c      	mulpl	r4, r5
 80157b2:	2500      	movmi	r5, #0
 80157b4:	2520      	movpl	r5, #32
 80157b6:	bf44      	itt	mi
 80157b8:	fb04 f40c 	mulmi.w	r4, r4, ip
 80157bc:	4249      	negmi	r1, r1
 80157be:	9501      	str	r5, [sp, #4]
 80157c0:	fb94 f5f1 	sdiv	r5, r4, r1
 80157c4:	bf54      	ite	pl
 80157c6:	f04f 0901 	movpl.w	r9, #1
 80157ca:	f04f 39ff 	movmi.w	r9, #4294967295
 80157ce:	fb01 4415 	mls	r4, r1, r5, r4
 80157d2:	9b01      	ldr	r3, [sp, #4]
 80157d4:	2c00      	cmp	r4, #0
 80157d6:	bfb8      	it	lt
 80157d8:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80157dc:	449c      	add	ip, r3
 80157de:	fb05 ac0c 	mla	ip, r5, ip, sl
 80157e2:	44a8      	add	r8, r5
 80157e4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80157e8:	f8a7 c006 	strh.w	ip, [r7, #6]
 80157ec:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80157f0:	bfb8      	it	lt
 80157f2:	1864      	addlt	r4, r4, r1
 80157f4:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80157f8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80157fc:	eb0b 0309 	add.w	r3, fp, r9
 8015800:	ea58 0707 	orrs.w	r7, r8, r7
 8015804:	d011      	beq.n	801582a <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8015806:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801580a:	f1b8 0f00 	cmp.w	r8, #0
 801580e:	db0c      	blt.n	801582a <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8015810:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015812:	45b8      	cmp	r8, r7
 8015814:	da09      	bge.n	801582a <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8015816:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801581a:	45b8      	cmp	r8, r7
 801581c:	bf3c      	itt	cc
 801581e:	f10c 0708 	addcc.w	r7, ip, #8
 8015822:	6107      	strcc	r7, [r0, #16]
 8015824:	f108 0701 	add.w	r7, r8, #1
 8015828:	6087      	str	r7, [r0, #8]
 801582a:	f04f 0c00 	mov.w	ip, #0
 801582e:	6907      	ldr	r7, [r0, #16]
 8015830:	b212      	sxth	r2, r2
 8015832:	459e      	cmp	lr, r3
 8015834:	803b      	strh	r3, [r7, #0]
 8015836:	807a      	strh	r2, [r7, #2]
 8015838:	f8a7 c004 	strh.w	ip, [r7, #4]
 801583c:	f8a7 c006 	strh.w	ip, [r7, #6]
 8015840:	442e      	add	r6, r5
 8015842:	d04d      	beq.n	80158e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8015844:	9f04      	ldr	r7, [sp, #16]
 8015846:	f04f 0a00 	mov.w	sl, #0
 801584a:	1bbf      	subs	r7, r7, r6
 801584c:	443d      	add	r5, r7
 801584e:	016d      	lsls	r5, r5, #5
 8015850:	fb95 f8f1 	sdiv	r8, r5, r1
 8015854:	fb01 5518 	mls	r5, r1, r8, r5
 8015858:	4565      	cmp	r5, ip
 801585a:	bfb8      	it	lt
 801585c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015860:	f108 0701 	add.w	r7, r8, #1
 8015864:	bfb8      	it	lt
 8015866:	186d      	addlt	r5, r5, r1
 8015868:	1a64      	subs	r4, r4, r1
 801586a:	9703      	str	r7, [sp, #12]
 801586c:	1964      	adds	r4, r4, r5
 801586e:	bf48      	it	mi
 8015870:	4647      	movmi	r7, r8
 8015872:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015876:	bf58      	it	pl
 8015878:	9f03      	ldrpl	r7, [sp, #12]
 801587a:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801587e:	443e      	add	r6, r7
 8015880:	44bb      	add	fp, r7
 8015882:	f8ac b004 	strh.w	fp, [ip, #4]
 8015886:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801588a:	bf58      	it	pl
 801588c:	1a64      	subpl	r4, r4, r1
 801588e:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015892:	f8ac b006 	strh.w	fp, [ip, #6]
 8015896:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801589a:	444b      	add	r3, r9
 801589c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80158a0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80158a4:	ea5b 0707 	orrs.w	r7, fp, r7
 80158a8:	d011      	beq.n	80158ce <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 80158aa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80158ae:	f1bb 0f00 	cmp.w	fp, #0
 80158b2:	db0c      	blt.n	80158ce <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 80158b4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80158b6:	45bb      	cmp	fp, r7
 80158b8:	da09      	bge.n	80158ce <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 80158ba:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80158be:	45bb      	cmp	fp, r7
 80158c0:	bf3c      	itt	cc
 80158c2:	f10c 0708 	addcc.w	r7, ip, #8
 80158c6:	6107      	strcc	r7, [r0, #16]
 80158c8:	f10b 0701 	add.w	r7, fp, #1
 80158cc:	6087      	str	r7, [r0, #8]
 80158ce:	6907      	ldr	r7, [r0, #16]
 80158d0:	459e      	cmp	lr, r3
 80158d2:	803b      	strh	r3, [r7, #0]
 80158d4:	807a      	strh	r2, [r7, #2]
 80158d6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80158da:	f8a7 a006 	strh.w	sl, [r7, #6]
 80158de:	d1c5      	bne.n	801586c <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 80158e0:	9b04      	ldr	r3, [sp, #16]
 80158e2:	1b9e      	subs	r6, r3, r6
 80158e4:	6903      	ldr	r3, [r0, #16]
 80158e6:	889a      	ldrh	r2, [r3, #4]
 80158e8:	4432      	add	r2, r6
 80158ea:	809a      	strh	r2, [r3, #4]
 80158ec:	9a02      	ldr	r2, [sp, #8]
 80158ee:	f102 0c20 	add.w	ip, r2, #32
 80158f2:	9a01      	ldr	r2, [sp, #4]
 80158f4:	ebac 0c02 	sub.w	ip, ip, r2
 80158f8:	88da      	ldrh	r2, [r3, #6]
 80158fa:	fb06 260c 	mla	r6, r6, ip, r2
 80158fe:	80de      	strh	r6, [r3, #6]
 8015900:	f7ff bba9 	b.w	8015056 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

08015904 <_ZN8touchgfx7Outline6lineToEii>:
 8015904:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015908:	079b      	lsls	r3, r3, #30
 801590a:	460e      	mov	r6, r1
 801590c:	4615      	mov	r5, r2
 801590e:	d511      	bpl.n	8015934 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8015910:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8015914:	ea86 0701 	eor.w	r7, r6, r1
 8015918:	ea85 0302 	eor.w	r3, r5, r2
 801591c:	433b      	orrs	r3, r7
 801591e:	d009      	beq.n	8015934 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8015920:	4633      	mov	r3, r6
 8015922:	9500      	str	r5, [sp, #0]
 8015924:	f7ff fb3e 	bl	8014fa4 <_ZN8touchgfx7Outline10renderLineEiiii>
 8015928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801592a:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801592e:	f043 0301 	orr.w	r3, r3, #1
 8015932:	6243      	str	r3, [r0, #36]	; 0x24
 8015934:	b003      	add	sp, #12
 8015936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015938 <_ZN8touchgfx7Outline6moveToEii>:
 8015938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801593a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801593c:	4615      	mov	r5, r2
 801593e:	079a      	lsls	r2, r3, #30
 8015940:	4604      	mov	r4, r0
 8015942:	460e      	mov	r6, r1
 8015944:	d401      	bmi.n	801594a <_ZN8touchgfx7Outline6moveToEii+0x12>
 8015946:	f7ff faf9 	bl	8014f3c <_ZN8touchgfx7Outline5resetEv>
 801594a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801594c:	07db      	lsls	r3, r3, #31
 801594e:	d504      	bpl.n	801595a <_ZN8touchgfx7Outline6moveToEii+0x22>
 8015950:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8015954:	4620      	mov	r0, r4
 8015956:	f7ff ffd5 	bl	8015904 <_ZN8touchgfx7Outline6lineToEii>
 801595a:	6923      	ldr	r3, [r4, #16]
 801595c:	1170      	asrs	r0, r6, #5
 801595e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015962:	1169      	asrs	r1, r5, #5
 8015964:	4290      	cmp	r0, r2
 8015966:	d103      	bne.n	8015970 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8015968:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801596c:	4291      	cmp	r1, r2
 801596e:	d01a      	beq.n	80159a6 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8015970:	88df      	ldrh	r7, [r3, #6]
 8015972:	889a      	ldrh	r2, [r3, #4]
 8015974:	433a      	orrs	r2, r7
 8015976:	d010      	beq.n	801599a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8015978:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801597c:	2a00      	cmp	r2, #0
 801597e:	db0c      	blt.n	801599a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8015980:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8015982:	42ba      	cmp	r2, r7
 8015984:	da09      	bge.n	801599a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8015986:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801598a:	42ba      	cmp	r2, r7
 801598c:	bf38      	it	cc
 801598e:	3308      	addcc	r3, #8
 8015990:	f102 0201 	add.w	r2, r2, #1
 8015994:	bf38      	it	cc
 8015996:	6123      	strcc	r3, [r4, #16]
 8015998:	60a2      	str	r2, [r4, #8]
 801599a:	2200      	movs	r2, #0
 801599c:	6923      	ldr	r3, [r4, #16]
 801599e:	8018      	strh	r0, [r3, #0]
 80159a0:	8059      	strh	r1, [r3, #2]
 80159a2:	809a      	strh	r2, [r3, #4]
 80159a4:	80da      	strh	r2, [r3, #6]
 80159a6:	6166      	str	r6, [r4, #20]
 80159a8:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80159ac:	6225      	str	r5, [r4, #32]
 80159ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080159b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80159b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159b4:	b0d0      	sub	sp, #320	; 0x140
 80159b6:	466c      	mov	r4, sp
 80159b8:	4627      	mov	r7, r4
 80159ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80159be:	1a0d      	subs	r5, r1, r0
 80159c0:	2d48      	cmp	r5, #72	; 0x48
 80159c2:	f100 0308 	add.w	r3, r0, #8
 80159c6:	f340 80d5 	ble.w	8015b74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80159ca:	112d      	asrs	r5, r5, #4
 80159cc:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80159d0:	6816      	ldr	r6, [r2, #0]
 80159d2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80159d6:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80159da:	6006      	str	r6, [r0, #0]
 80159dc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80159e0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80159e4:	6856      	ldr	r6, [r2, #4]
 80159e6:	6046      	str	r6, [r0, #4]
 80159e8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80159ec:	f8a2 8002 	strh.w	r8, [r2, #2]
 80159f0:	f8a2 e004 	strh.w	lr, [r2, #4]
 80159f4:	f8a2 c006 	strh.w	ip, [r2, #6]
 80159f8:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80159fc:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8015a00:	f1a1 0208 	sub.w	r2, r1, #8
 8015a04:	4565      	cmp	r5, ip
 8015a06:	db06      	blt.n	8015a16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8015a08:	d119      	bne.n	8015a3e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8015a0a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8015a0e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8015a12:	42ae      	cmp	r6, r5
 8015a14:	dd13      	ble.n	8015a3e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8015a16:	460e      	mov	r6, r1
 8015a18:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8015a1c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8015a20:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8015a24:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8015a28:	601d      	str	r5, [r3, #0]
 8015a2a:	6875      	ldr	r5, [r6, #4]
 8015a2c:	605d      	str	r5, [r3, #4]
 8015a2e:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015a32:	f821 cc06 	strh.w	ip, [r1, #-6]
 8015a36:	f821 8c04 	strh.w	r8, [r1, #-4]
 8015a3a:	f821 ec02 	strh.w	lr, [r1, #-2]
 8015a3e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015a42:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8015a46:	42ae      	cmp	r6, r5
 8015a48:	db06      	blt.n	8015a58 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8015a4a:	d116      	bne.n	8015a7a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8015a4c:	f9b0 c000 	ldrsh.w	ip, [r0]
 8015a50:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8015a54:	45ac      	cmp	ip, r5
 8015a56:	da10      	bge.n	8015a7a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8015a58:	681d      	ldr	r5, [r3, #0]
 8015a5a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8015a5e:	6005      	str	r5, [r0, #0]
 8015a60:	685d      	ldr	r5, [r3, #4]
 8015a62:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8015a66:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8015a6a:	f8a0 8008 	strh.w	r8, [r0, #8]
 8015a6e:	6045      	str	r5, [r0, #4]
 8015a70:	8146      	strh	r6, [r0, #10]
 8015a72:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8015a76:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015a7a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8015a7e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015a82:	4565      	cmp	r5, ip
 8015a84:	db06      	blt.n	8015a94 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8015a86:	d119      	bne.n	8015abc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015a88:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8015a8c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015a90:	42ae      	cmp	r6, r5
 8015a92:	da13      	bge.n	8015abc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015a94:	460e      	mov	r6, r1
 8015a96:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8015a9a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015a9e:	6005      	str	r5, [r0, #0]
 8015aa0:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8015aa4:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8015aa8:	6875      	ldr	r5, [r6, #4]
 8015aaa:	6045      	str	r5, [r0, #4]
 8015aac:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015ab0:	f821 cc06 	strh.w	ip, [r1, #-6]
 8015ab4:	f821 8c04 	strh.w	r8, [r1, #-4]
 8015ab8:	f821 ec02 	strh.w	lr, [r1, #-2]
 8015abc:	3308      	adds	r3, #8
 8015abe:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8015ac2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015ac6:	45e6      	cmp	lr, ip
 8015ac8:	dbf8      	blt.n	8015abc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015aca:	d105      	bne.n	8015ad8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015acc:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015ad0:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015ad4:	42ae      	cmp	r6, r5
 8015ad6:	dbf1      	blt.n	8015abc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015ad8:	4615      	mov	r5, r2
 8015ada:	3a08      	subs	r2, #8
 8015adc:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8015ae0:	45b4      	cmp	ip, r6
 8015ae2:	dbf9      	blt.n	8015ad8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015ae4:	d105      	bne.n	8015af2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8015ae6:	f9b0 8000 	ldrsh.w	r8, [r0]
 8015aea:	f9b2 6000 	ldrsh.w	r6, [r2]
 8015aee:	45b0      	cmp	r8, r6
 8015af0:	dbf2      	blt.n	8015ad8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015af2:	4293      	cmp	r3, r2
 8015af4:	f1a5 0608 	sub.w	r6, r5, #8
 8015af8:	d816      	bhi.n	8015b28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8015afa:	f8d6 c000 	ldr.w	ip, [r6]
 8015afe:	f9b3 a000 	ldrsh.w	sl, [r3]
 8015b02:	f8c3 c000 	str.w	ip, [r3]
 8015b06:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8015b0a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8015b0e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8015b12:	f8c3 c004 	str.w	ip, [r3, #4]
 8015b16:	f825 ac08 	strh.w	sl, [r5, #-8]
 8015b1a:	f825 ec06 	strh.w	lr, [r5, #-6]
 8015b1e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015b22:	f825 8c02 	strh.w	r8, [r5, #-2]
 8015b26:	e7c9      	b.n	8015abc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015b28:	f8d6 e000 	ldr.w	lr, [r6]
 8015b2c:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015b30:	f8c0 e000 	str.w	lr, [r0]
 8015b34:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8015b38:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8015b3c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015b40:	1a16      	subs	r6, r2, r0
 8015b42:	f8c0 e004 	str.w	lr, [r0, #4]
 8015b46:	f825 ac08 	strh.w	sl, [r5, #-8]
 8015b4a:	f825 cc06 	strh.w	ip, [r5, #-6]
 8015b4e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015b52:	f825 8c02 	strh.w	r8, [r5, #-2]
 8015b56:	1acd      	subs	r5, r1, r3
 8015b58:	10ed      	asrs	r5, r5, #3
 8015b5a:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8015b5e:	bfb5      	itete	lt
 8015b60:	e9c4 0200 	strdlt	r0, r2, [r4]
 8015b64:	e9c4 3100 	strdge	r3, r1, [r4]
 8015b68:	460a      	movlt	r2, r1
 8015b6a:	4603      	movge	r3, r0
 8015b6c:	3408      	adds	r4, #8
 8015b6e:	4618      	mov	r0, r3
 8015b70:	4611      	mov	r1, r2
 8015b72:	e724      	b.n	80159be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015b74:	4299      	cmp	r1, r3
 8015b76:	d928      	bls.n	8015bca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8015b78:	f1a3 0210 	sub.w	r2, r3, #16
 8015b7c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8015b80:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8015b84:	45ac      	cmp	ip, r5
 8015b86:	db06      	blt.n	8015b96 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8015b88:	d11d      	bne.n	8015bc6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8015b8a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8015b8e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8015b92:	42ae      	cmp	r6, r5
 8015b94:	da17      	bge.n	8015bc6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8015b96:	4615      	mov	r5, r2
 8015b98:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8015b9c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8015ba0:	6116      	str	r6, [r2, #16]
 8015ba2:	686e      	ldr	r6, [r5, #4]
 8015ba4:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8015ba8:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8015bac:	42a8      	cmp	r0, r5
 8015bae:	6156      	str	r6, [r2, #20]
 8015bb0:	f8a2 9008 	strh.w	r9, [r2, #8]
 8015bb4:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8015bb8:	f8a2 800c 	strh.w	r8, [r2, #12]
 8015bbc:	f8a2 e00e 	strh.w	lr, [r2, #14]
 8015bc0:	f1a2 0208 	sub.w	r2, r2, #8
 8015bc4:	d1da      	bne.n	8015b7c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8015bc6:	3308      	adds	r3, #8
 8015bc8:	e7d4      	b.n	8015b74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8015bca:	42bc      	cmp	r4, r7
 8015bcc:	d903      	bls.n	8015bd6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 8015bce:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8015bd2:	3c08      	subs	r4, #8
 8015bd4:	e6f3      	b.n	80159be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015bd6:	b050      	add	sp, #320	; 0x140
 8015bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015bdc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8015bdc:	b510      	push	{r4, lr}
 8015bde:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015be0:	4604      	mov	r4, r0
 8015be2:	07da      	lsls	r2, r3, #31
 8015be4:	d507      	bpl.n	8015bf6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8015be6:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8015bea:	f7ff fe8b 	bl	8015904 <_ZN8touchgfx7Outline6lineToEii>
 8015bee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015bf0:	f023 0301 	bic.w	r3, r3, #1
 8015bf4:	6243      	str	r3, [r0, #36]	; 0x24
 8015bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bf8:	079b      	lsls	r3, r3, #30
 8015bfa:	d521      	bpl.n	8015c40 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8015bfc:	6923      	ldr	r3, [r4, #16]
 8015bfe:	88d9      	ldrh	r1, [r3, #6]
 8015c00:	889a      	ldrh	r2, [r3, #4]
 8015c02:	430a      	orrs	r2, r1
 8015c04:	d010      	beq.n	8015c28 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015c06:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015c0a:	2a00      	cmp	r2, #0
 8015c0c:	db0c      	blt.n	8015c28 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015c0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015c10:	428a      	cmp	r2, r1
 8015c12:	da09      	bge.n	8015c28 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015c14:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8015c18:	4291      	cmp	r1, r2
 8015c1a:	bf88      	it	hi
 8015c1c:	3308      	addhi	r3, #8
 8015c1e:	f102 0201 	add.w	r2, r2, #1
 8015c22:	bf88      	it	hi
 8015c24:	6123      	strhi	r3, [r4, #16]
 8015c26:	60a2      	str	r2, [r4, #8]
 8015c28:	68a1      	ldr	r1, [r4, #8]
 8015c2a:	b129      	cbz	r1, 8015c38 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015c2c:	6863      	ldr	r3, [r4, #4]
 8015c2e:	4299      	cmp	r1, r3
 8015c30:	d802      	bhi.n	8015c38 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015c32:	68e0      	ldr	r0, [r4, #12]
 8015c34:	f7ff febc 	bl	80159b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8015c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c3a:	f023 0302 	bic.w	r3, r3, #2
 8015c3e:	6263      	str	r3, [r4, #36]	; 0x24
 8015c40:	68e0      	ldr	r0, [r4, #12]
 8015c42:	bd10      	pop	{r4, pc}

08015c44 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8015c44:	4b02      	ldr	r3, [pc, #8]	; (8015c50 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8015c46:	6018      	str	r0, [r3, #0]
 8015c48:	4b02      	ldr	r3, [pc, #8]	; (8015c54 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8015c4a:	6019      	str	r1, [r3, #0]
 8015c4c:	4770      	bx	lr
 8015c4e:	bf00      	nop
 8015c50:	2004f638 	.word	0x2004f638
 8015c54:	2004f63c 	.word	0x2004f63c

08015c58 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8015c58:	4b01      	ldr	r3, [pc, #4]	; (8015c60 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8015c5a:	6818      	ldr	r0, [r3, #0]
 8015c5c:	4770      	bx	lr
 8015c5e:	bf00      	nop
 8015c60:	2004f638 	.word	0x2004f638

08015c64 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8015c64:	4b01      	ldr	r3, [pc, #4]	; (8015c6c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8015c66:	6818      	ldr	r0, [r3, #0]
 8015c68:	4770      	bx	lr
 8015c6a:	bf00      	nop
 8015c6c:	2004f63c 	.word	0x2004f63c

08015c70 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015c70:	b510      	push	{r4, lr}
 8015c72:	6803      	ldr	r3, [r0, #0]
 8015c74:	460c      	mov	r4, r1
 8015c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c78:	4798      	blx	r3
 8015c7a:	1b03      	subs	r3, r0, r4
 8015c7c:	4258      	negs	r0, r3
 8015c7e:	4158      	adcs	r0, r3
 8015c80:	bd10      	pop	{r4, pc}
	...

08015c84 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015c84:	4b01      	ldr	r3, [pc, #4]	; (8015c8c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8015c86:	6019      	str	r1, [r3, #0]
 8015c88:	4770      	bx	lr
 8015c8a:	bf00      	nop
 8015c8c:	2004f640 	.word	0x2004f640

08015c90 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c94:	4696      	mov	lr, r2
 8015c96:	4614      	mov	r4, r2
 8015c98:	4605      	mov	r5, r0
 8015c9a:	460e      	mov	r6, r1
 8015c9c:	461f      	mov	r7, r3
 8015c9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ca2:	b097      	sub	sp, #92	; 0x5c
 8015ca4:	f10d 0c1c 	add.w	ip, sp, #28
 8015ca8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cac:	f8de 3000 	ldr.w	r3, [lr]
 8015cb0:	f104 0e14 	add.w	lr, r4, #20
 8015cb4:	f8cc 3000 	str.w	r3, [ip]
 8015cb8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015cbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015cc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cc4:	f8de 3000 	ldr.w	r3, [lr]
 8015cc8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015ccc:	f8cc 3000 	str.w	r3, [ip]
 8015cd0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015cd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015cd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cdc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8015ce0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8015ce4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8015ce8:	f8de 3000 	ldr.w	r3, [lr]
 8015cec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015cee:	f8cc 3000 	str.w	r3, [ip]
 8015cf2:	9201      	str	r2, [sp, #4]
 8015cf4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015cf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015cfa:	682b      	ldr	r3, [r5, #0]
 8015cfc:	9200      	str	r2, [sp, #0]
 8015cfe:	f8cd 8008 	str.w	r8, [sp, #8]
 8015d02:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8015d06:	aa07      	add	r2, sp, #28
 8015d08:	463b      	mov	r3, r7
 8015d0a:	4631      	mov	r1, r6
 8015d0c:	4628      	mov	r0, r5
 8015d0e:	47d8      	blx	fp
 8015d10:	46a6      	mov	lr, r4
 8015d12:	f10d 0c1c 	add.w	ip, sp, #28
 8015d16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d1e:	f8de 3000 	ldr.w	r3, [lr]
 8015d22:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015d26:	f8cc 3000 	str.w	r3, [ip]
 8015d2a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015d2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d36:	f8de 3000 	ldr.w	r3, [lr]
 8015d3a:	343c      	adds	r4, #60	; 0x3c
 8015d3c:	f8cc 3000 	str.w	r3, [ip]
 8015d40:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d4a:	6823      	ldr	r3, [r4, #0]
 8015d4c:	4631      	mov	r1, r6
 8015d4e:	f8cc 3000 	str.w	r3, [ip]
 8015d52:	682b      	ldr	r3, [r5, #0]
 8015d54:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015d58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8015d5e:	9201      	str	r2, [sp, #4]
 8015d60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015d62:	4628      	mov	r0, r5
 8015d64:	9200      	str	r2, [sp, #0]
 8015d66:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8015d68:	aa07      	add	r2, sp, #28
 8015d6a:	463b      	mov	r3, r7
 8015d6c:	47a0      	blx	r4
 8015d6e:	b017      	add	sp, #92	; 0x5c
 8015d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d74 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015d74:	2000      	movs	r0, #0
 8015d76:	4770      	bx	lr

08015d78 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d7c:	b08d      	sub	sp, #52	; 0x34
 8015d7e:	4688      	mov	r8, r1
 8015d80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015d82:	f8d3 c000 	ldr.w	ip, [r3]
 8015d86:	680f      	ldr	r7, [r1, #0]
 8015d88:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8015d8c:	eba7 070c 	sub.w	r7, r7, ip
 8015d90:	42bc      	cmp	r4, r7
 8015d92:	bfa8      	it	ge
 8015d94:	463c      	movge	r4, r7
 8015d96:	ee07 4a90 	vmov	s15, r4
 8015d9a:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8015d9e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015da2:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8015da6:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8015daa:	edd3 6a07 	vldr	s13, [r3, #28]
 8015dae:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015db2:	ee65 4a24 	vmul.f32	s9, s10, s9
 8015db6:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015dba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015dbe:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8015dc2:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8015dc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015dca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015dcc:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8015dd0:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015dd4:	f9ba 1000 	ldrsh.w	r1, [sl]
 8015dd8:	eb09 0e0c 	add.w	lr, r9, ip
 8015ddc:	4571      	cmp	r1, lr
 8015dde:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015de2:	ee32 1a05 	vadd.f32	s2, s4, s10
 8015de6:	ee36 0a84 	vadd.f32	s0, s13, s8
 8015dea:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015dee:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015df2:	f340 808c 	ble.w	8015f0e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8015df6:	eba1 060e 	sub.w	r6, r1, lr
 8015dfa:	fb96 f5f4 	sdiv	r5, r6, r4
 8015dfe:	ee07 5a10 	vmov	s14, r5
 8015e02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e06:	2d00      	cmp	r5, #0
 8015e08:	fb04 6615 	mls	r6, r4, r5, r6
 8015e0c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8015e10:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015e14:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015e18:	dd12      	ble.n	8015e40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8015e1a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8015e1e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e26:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8015e2a:	bf14      	ite	ne
 8015e2c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015e30:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015e34:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015e38:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015e3c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015e40:	fb05 f204 	mul.w	r2, r5, r4
 8015e44:	1abf      	subs	r7, r7, r2
 8015e46:	4494      	add	ip, r2
 8015e48:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015e4c:	4411      	add	r1, r2
 8015e4e:	eb09 020c 	add.w	r2, r9, ip
 8015e52:	443a      	add	r2, r7
 8015e54:	b209      	sxth	r1, r1
 8015e56:	428a      	cmp	r2, r1
 8015e58:	bfc4      	itt	gt
 8015e5a:	eba1 0209 	subgt.w	r2, r1, r9
 8015e5e:	eba2 070c 	subgt.w	r7, r2, ip
 8015e62:	2f00      	cmp	r7, #0
 8015e64:	dd50      	ble.n	8015f08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015e66:	fb97 f1f4 	sdiv	r1, r7, r4
 8015e6a:	fb04 7211 	mls	r2, r4, r1, r7
 8015e6e:	b90a      	cbnz	r2, 8015e74 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015e70:	4622      	mov	r2, r4
 8015e72:	3901      	subs	r1, #1
 8015e74:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015e78:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015e7c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015e80:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015e84:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015e88:	ee17 7a90 	vmov	r7, s15
 8015e8c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015e90:	eef0 6a42 	vmov.f32	s13, s4
 8015e94:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015e98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015e9c:	ee17 ca90 	vmov	ip, s15
 8015ea0:	eeb0 7a61 	vmov.f32	s14, s3
 8015ea4:	6840      	ldr	r0, [r0, #4]
 8015ea6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8015eaa:	f8d0 a000 	ldr.w	sl, [r0]
 8015eae:	900b      	str	r0, [sp, #44]	; 0x2c
 8015eb0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015eb2:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015eb6:	9008      	str	r0, [sp, #32]
 8015eb8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015eba:	695b      	ldr	r3, [r3, #20]
 8015ebc:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015ec0:	fb9c fcf4 	sdiv	ip, ip, r4
 8015ec4:	445b      	add	r3, fp
 8015ec6:	9307      	str	r3, [sp, #28]
 8015ec8:	ee16 3a90 	vmov	r3, s13
 8015ecc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015ed0:	fb0c 3306 	mla	r3, ip, r6, r3
 8015ed4:	fb97 f7f4 	sdiv	r7, r7, r4
 8015ed8:	9302      	str	r3, [sp, #8]
 8015eda:	ee17 3a10 	vmov	r3, s14
 8015ede:	2900      	cmp	r1, #0
 8015ee0:	bfcc      	ite	gt
 8015ee2:	46a1      	movgt	r9, r4
 8015ee4:	4691      	movle	r9, r2
 8015ee6:	44b6      	add	lr, r6
 8015ee8:	fb04 e505 	mla	r5, r4, r5, lr
 8015eec:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015ef0:	fb07 3706 	mla	r7, r7, r6, r3
 8015ef4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015ef8:	e9cd 4700 	strd	r4, r7, [sp]
 8015efc:	eba9 0306 	sub.w	r3, r9, r6
 8015f00:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015f04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015f06:	47a0      	blx	r4
 8015f08:	b00d      	add	sp, #52	; 0x34
 8015f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f0e:	2500      	movs	r5, #0
 8015f10:	462e      	mov	r6, r5
 8015f12:	e799      	b.n	8015e48 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f18:	461d      	mov	r5, r3
 8015f1a:	b0db      	sub	sp, #364	; 0x16c
 8015f1c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8015f20:	910f      	str	r1, [sp, #60]	; 0x3c
 8015f22:	930a      	str	r3, [sp, #40]	; 0x28
 8015f24:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8015f28:	9009      	str	r0, [sp, #36]	; 0x24
 8015f2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f2c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8015f30:	4614      	mov	r4, r2
 8015f32:	9310      	str	r3, [sp, #64]	; 0x40
 8015f34:	6803      	ldr	r3, [r0, #0]
 8015f36:	4629      	mov	r1, r5
 8015f38:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8015f3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015f3e:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8015f42:	47b8      	blx	r7
 8015f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f46:	6058      	str	r0, [r3, #4]
 8015f48:	2800      	cmp	r0, #0
 8015f4a:	f000 83a1 	beq.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f4e:	ed94 7a02 	vldr	s14, [r4, #8]
 8015f52:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015f56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f5a:	682b      	ldr	r3, [r5, #0]
 8015f5c:	9314      	str	r3, [sp, #80]	; 0x50
 8015f5e:	686b      	ldr	r3, [r5, #4]
 8015f60:	9315      	str	r3, [sp, #84]	; 0x54
 8015f62:	4bc1      	ldr	r3, [pc, #772]	; (8016268 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015f64:	7819      	ldrb	r1, [r3, #0]
 8015f66:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015f6a:	2900      	cmp	r1, #0
 8015f6c:	bf16      	itet	ne
 8015f6e:	4619      	movne	r1, r3
 8015f70:	4611      	moveq	r1, r2
 8015f72:	4613      	movne	r3, r2
 8015f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f78:	9116      	str	r1, [sp, #88]	; 0x58
 8015f7a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8015f7e:	f240 8387 	bls.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f82:	ed94 7a07 	vldr	s14, [r4, #28]
 8015f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f8e:	f240 837f 	bls.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f92:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8015f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f9e:	f240 8377 	bls.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015fa2:	6822      	ldr	r2, [r4, #0]
 8015fa4:	4bb1      	ldr	r3, [pc, #708]	; (801626c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	f2c0 8372 	blt.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015fac:	49b0      	ldr	r1, [pc, #704]	; (8016270 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015fae:	6963      	ldr	r3, [r4, #20]
 8015fb0:	428a      	cmp	r2, r1
 8015fb2:	f300 836d 	bgt.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015fb6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015fba:	48ae      	ldr	r0, [pc, #696]	; (8016274 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015fbc:	33ff      	adds	r3, #255	; 0xff
 8015fbe:	4283      	cmp	r3, r0
 8015fc0:	f200 8366 	bhi.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015fc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015fc6:	4dac      	ldr	r5, [pc, #688]	; (8016278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015fc8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015fcc:	33ff      	adds	r3, #255	; 0xff
 8015fce:	42ab      	cmp	r3, r5
 8015fd0:	f200 835e 	bhi.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015fd4:	6862      	ldr	r2, [r4, #4]
 8015fd6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8015fda:	33ff      	adds	r3, #255	; 0xff
 8015fdc:	4283      	cmp	r3, r0
 8015fde:	f200 8357 	bhi.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015fe2:	69a1      	ldr	r1, [r4, #24]
 8015fe4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8015fe8:	33ff      	adds	r3, #255	; 0xff
 8015fea:	4283      	cmp	r3, r0
 8015fec:	f200 8350 	bhi.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ff0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015ff2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8015ff6:	30ff      	adds	r0, #255	; 0xff
 8015ff8:	42a8      	cmp	r0, r5
 8015ffa:	f200 8349 	bhi.w	8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ffe:	428a      	cmp	r2, r1
 8016000:	f280 8110 	bge.w	8016224 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016004:	429a      	cmp	r2, r3
 8016006:	f300 8119 	bgt.w	801623c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801600a:	4299      	cmp	r1, r3
 801600c:	f280 811d 	bge.w	801624a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016010:	2502      	movs	r5, #2
 8016012:	2701      	movs	r7, #1
 8016014:	46a9      	mov	r9, r5
 8016016:	46b8      	mov	r8, r7
 8016018:	f04f 0a00 	mov.w	sl, #0
 801601c:	4621      	mov	r1, r4
 801601e:	a849      	add	r0, sp, #292	; 0x124
 8016020:	f003 f862 	bl	80190e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016024:	4622      	mov	r2, r4
 8016026:	4653      	mov	r3, sl
 8016028:	a949      	add	r1, sp, #292	; 0x124
 801602a:	f8cd 9000 	str.w	r9, [sp]
 801602e:	a819      	add	r0, sp, #100	; 0x64
 8016030:	f003 f98c 	bl	801934c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016034:	4622      	mov	r2, r4
 8016036:	4653      	mov	r3, sl
 8016038:	a949      	add	r1, sp, #292	; 0x124
 801603a:	f8cd 8000 	str.w	r8, [sp]
 801603e:	a829      	add	r0, sp, #164	; 0xa4
 8016040:	f003 f984 	bl	801934c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016044:	4643      	mov	r3, r8
 8016046:	4622      	mov	r2, r4
 8016048:	a949      	add	r1, sp, #292	; 0x124
 801604a:	f8cd 9000 	str.w	r9, [sp]
 801604e:	a839      	add	r0, sp, #228	; 0xe4
 8016050:	f003 f97c 	bl	801934c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016054:	42af      	cmp	r7, r5
 8016056:	bfb5      	itete	lt
 8016058:	2300      	movlt	r3, #0
 801605a:	2301      	movge	r3, #1
 801605c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801605e:	930e      	strge	r3, [sp, #56]	; 0x38
 8016060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016062:	af12      	add	r7, sp, #72	; 0x48
 8016064:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016068:	bfb9      	ittee	lt
 801606a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801606c:	ac19      	addlt	r4, sp, #100	; 0x64
 801606e:	ad19      	addge	r5, sp, #100	; 0x64
 8016070:	ac29      	addge	r4, sp, #164	; 0xa4
 8016072:	e887 0003 	stmia.w	r7, {r0, r1}
 8016076:	b928      	cbnz	r0, 8016084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016078:	4b80      	ldr	r3, [pc, #512]	; (801627c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801607a:	6818      	ldr	r0, [r3, #0]
 801607c:	6803      	ldr	r3, [r0, #0]
 801607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016080:	4798      	blx	r3
 8016082:	6038      	str	r0, [r7, #0]
 8016084:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016086:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801608a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801608e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016090:	930c      	str	r3, [sp, #48]	; 0x30
 8016092:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016094:	6963      	ldr	r3, [r4, #20]
 8016096:	440b      	add	r3, r1
 8016098:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801609c:	4408      	add	r0, r1
 801609e:	b200      	sxth	r0, r0
 80160a0:	4283      	cmp	r3, r0
 80160a2:	900d      	str	r0, [sp, #52]	; 0x34
 80160a4:	f280 80dd 	bge.w	8016262 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80160a8:	428b      	cmp	r3, r1
 80160aa:	da08      	bge.n	80160be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80160ac:	2a00      	cmp	r2, #0
 80160ae:	dd06      	ble.n	80160be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80160b0:	1acb      	subs	r3, r1, r3
 80160b2:	429a      	cmp	r2, r3
 80160b4:	f2c0 80e4 	blt.w	8016280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	f300 80e2 	bgt.w	8016282 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80160be:	6967      	ldr	r7, [r4, #20]
 80160c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160c2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80160c6:	443b      	add	r3, r7
 80160c8:	461f      	mov	r7, r3
 80160ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160cc:	1bdf      	subs	r7, r3, r7
 80160ce:	4297      	cmp	r7, r2
 80160d0:	bfa8      	it	ge
 80160d2:	4617      	movge	r7, r2
 80160d4:	2f00      	cmp	r7, #0
 80160d6:	f340 8166 	ble.w	80163a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80160da:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80160dc:	6829      	ldr	r1, [r5, #0]
 80160de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80160e2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80160e6:	4411      	add	r1, r2
 80160e8:	4299      	cmp	r1, r3
 80160ea:	6820      	ldr	r0, [r4, #0]
 80160ec:	dd1a      	ble.n	8016124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80160ee:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80160f2:	4402      	add	r2, r0
 80160f4:	440b      	add	r3, r1
 80160f6:	b21b      	sxth	r3, r3
 80160f8:	429a      	cmp	r2, r3
 80160fa:	dc13      	bgt.n	8016124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80160fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016100:	a912      	add	r1, sp, #72	; 0x48
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	9206      	str	r2, [sp, #24]
 8016106:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016108:	9500      	str	r5, [sp, #0]
 801610a:	9205      	str	r2, [sp, #20]
 801610c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801610e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016110:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016114:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016116:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801611a:	aa49      	add	r2, sp, #292	; 0x124
 801611c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016120:	4623      	mov	r3, r4
 8016122:	47c8      	blx	r9
 8016124:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016128:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801612c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016130:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016138:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801613c:	ed94 6a08 	vldr	s12, [r4, #32]
 8016140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016144:	edd4 6a07 	vldr	s13, [r4, #28]
 8016148:	ee76 6a86 	vadd.f32	s13, s13, s12
 801614c:	441a      	add	r2, r3
 801614e:	6963      	ldr	r3, [r4, #20]
 8016150:	68a1      	ldr	r1, [r4, #8]
 8016152:	3301      	adds	r3, #1
 8016154:	6163      	str	r3, [r4, #20]
 8016156:	69a3      	ldr	r3, [r4, #24]
 8016158:	6022      	str	r2, [r4, #0]
 801615a:	3b01      	subs	r3, #1
 801615c:	61a3      	str	r3, [r4, #24]
 801615e:	6923      	ldr	r3, [r4, #16]
 8016160:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016164:	440b      	add	r3, r1
 8016166:	68e1      	ldr	r1, [r4, #12]
 8016168:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801616c:	428b      	cmp	r3, r1
 801616e:	edc4 6a07 	vstr	s13, [r4, #28]
 8016172:	6123      	str	r3, [r4, #16]
 8016174:	db15      	blt.n	80161a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016176:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801617a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801617e:	edc4 6a07 	vstr	s13, [r4, #28]
 8016182:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016186:	ee36 7a87 	vadd.f32	s14, s13, s14
 801618a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801618e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016196:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801619a:	3201      	adds	r2, #1
 801619c:	1a5b      	subs	r3, r3, r1
 801619e:	6022      	str	r2, [r4, #0]
 80161a0:	6123      	str	r3, [r4, #16]
 80161a2:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80161a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80161aa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80161ae:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80161b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80161b6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80161ba:	ed95 6a08 	vldr	s12, [r5, #32]
 80161be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80161c2:	edd5 6a07 	vldr	s13, [r5, #28]
 80161c6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80161ca:	441a      	add	r2, r3
 80161cc:	696b      	ldr	r3, [r5, #20]
 80161ce:	68a9      	ldr	r1, [r5, #8]
 80161d0:	3301      	adds	r3, #1
 80161d2:	616b      	str	r3, [r5, #20]
 80161d4:	69ab      	ldr	r3, [r5, #24]
 80161d6:	602a      	str	r2, [r5, #0]
 80161d8:	3b01      	subs	r3, #1
 80161da:	61ab      	str	r3, [r5, #24]
 80161dc:	692b      	ldr	r3, [r5, #16]
 80161de:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80161e2:	440b      	add	r3, r1
 80161e4:	68e9      	ldr	r1, [r5, #12]
 80161e6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80161ea:	428b      	cmp	r3, r1
 80161ec:	edc5 6a07 	vstr	s13, [r5, #28]
 80161f0:	612b      	str	r3, [r5, #16]
 80161f2:	db15      	blt.n	8016220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80161f4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80161f8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80161fc:	edc5 6a07 	vstr	s13, [r5, #28]
 8016200:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016204:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016208:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801620c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016214:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016218:	3201      	adds	r2, #1
 801621a:	1a5b      	subs	r3, r3, r1
 801621c:	602a      	str	r2, [r5, #0]
 801621e:	612b      	str	r3, [r5, #16]
 8016220:	3f01      	subs	r7, #1
 8016222:	e757      	b.n	80160d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016224:	4299      	cmp	r1, r3
 8016226:	dc13      	bgt.n	8016250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016228:	429a      	cmp	r2, r3
 801622a:	da14      	bge.n	8016256 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801622c:	2502      	movs	r5, #2
 801622e:	2703      	movs	r7, #3
 8016230:	46a9      	mov	r9, r5
 8016232:	f04f 0800 	mov.w	r8, #0
 8016236:	f04f 0a01 	mov.w	sl, #1
 801623a:	e6ef      	b.n	801601c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801623c:	2501      	movs	r5, #1
 801623e:	2700      	movs	r7, #0
 8016240:	46a9      	mov	r9, r5
 8016242:	46b8      	mov	r8, r7
 8016244:	f04f 0a02 	mov.w	sl, #2
 8016248:	e6e8      	b.n	801601c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801624a:	2501      	movs	r5, #1
 801624c:	2702      	movs	r7, #2
 801624e:	e6e1      	b.n	8016014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016250:	2500      	movs	r5, #0
 8016252:	2701      	movs	r7, #1
 8016254:	e7f4      	b.n	8016240 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016256:	2702      	movs	r7, #2
 8016258:	2503      	movs	r5, #3
 801625a:	f04f 0900 	mov.w	r9, #0
 801625e:	46b8      	mov	r8, r7
 8016260:	e7e9      	b.n	8016236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016262:	4613      	mov	r3, r2
 8016264:	e728      	b.n	80160b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016266:	bf00      	nop
 8016268:	2004f628 	.word	0x2004f628
 801626c:	fffd8f01 	.word	0xfffd8f01
 8016270:	00027100 	.word	0x00027100
 8016274:	0004e1ff 	.word	0x0004e1ff
 8016278:	0004e1fe 	.word	0x0004e1fe
 801627c:	2004f630 	.word	0x2004f630
 8016280:	4613      	mov	r3, r2
 8016282:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016286:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801628a:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801628e:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016292:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016296:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801629a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801629e:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80162a2:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80162a6:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80162aa:	469e      	mov	lr, r3
 80162ac:	469c      	mov	ip, r3
 80162ae:	f04f 0900 	mov.w	r9, #0
 80162b2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80162b4:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80162b6:	9111      	str	r1, [sp, #68]	; 0x44
 80162b8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80162bc:	f1bc 0f00 	cmp.w	ip, #0
 80162c0:	d147      	bne.n	8016352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80162c2:	eb03 0c07 	add.w	ip, r3, r7
 80162c6:	1ad7      	subs	r7, r2, r3
 80162c8:	f1b9 0f00 	cmp.w	r9, #0
 80162cc:	d009      	beq.n	80162e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80162ce:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80162d2:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80162d6:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80162da:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80162de:	9029      	str	r0, [sp, #164]	; 0xa4
 80162e0:	912d      	str	r1, [sp, #180]	; 0xb4
 80162e2:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80162e6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80162ea:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80162ee:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80162f2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80162f6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80162fa:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80162fe:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016302:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016306:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801630a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801630e:	f04f 0800 	mov.w	r8, #0
 8016312:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016314:	9111      	str	r1, [sp, #68]	; 0x44
 8016316:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801631a:	f1be 0f00 	cmp.w	lr, #0
 801631e:	d031      	beq.n	8016384 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016320:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016322:	4450      	add	r0, sl
 8016324:	4431      	add	r1, r6
 8016326:	4549      	cmp	r1, r9
 8016328:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801632c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016330:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016334:	db08      	blt.n	8016348 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016336:	ee77 7a85 	vadd.f32	s15, s15, s10
 801633a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801633e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016342:	3001      	adds	r0, #1
 8016344:	eba1 0109 	sub.w	r1, r1, r9
 8016348:	f10e 3eff 	add.w	lr, lr, #4294967295
 801634c:	f04f 0801 	mov.w	r8, #1
 8016350:	e7e3      	b.n	801631a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016352:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016354:	4450      	add	r0, sl
 8016356:	4431      	add	r1, r6
 8016358:	4541      	cmp	r1, r8
 801635a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801635e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016362:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016366:	db08      	blt.n	801637a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016368:	ee76 6a85 	vadd.f32	s13, s13, s10
 801636c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016370:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016374:	3001      	adds	r0, #1
 8016376:	eba1 0108 	sub.w	r1, r1, r8
 801637a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801637e:	f04f 0901 	mov.w	r9, #1
 8016382:	e79b      	b.n	80162bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016384:	449c      	add	ip, r3
 8016386:	1aff      	subs	r7, r7, r3
 8016388:	f1b8 0f00 	cmp.w	r8, #0
 801638c:	d009      	beq.n	80163a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801638e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016392:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016396:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801639a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801639e:	9019      	str	r0, [sp, #100]	; 0x64
 80163a0:	911d      	str	r1, [sp, #116]	; 0x74
 80163a2:	1ad2      	subs	r2, r2, r3
 80163a4:	e68b      	b.n	80160be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80163a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163a8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	f000 80d1 	beq.w	8016552 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80163b0:	ad19      	add	r5, sp, #100	; 0x64
 80163b2:	ac39      	add	r4, sp, #228	; 0xe4
 80163b4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80163b6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80163ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80163be:	930c      	str	r3, [sp, #48]	; 0x30
 80163c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80163c2:	6963      	ldr	r3, [r4, #20]
 80163c4:	440b      	add	r3, r1
 80163c6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80163ca:	4408      	add	r0, r1
 80163cc:	b200      	sxth	r0, r0
 80163ce:	4283      	cmp	r3, r0
 80163d0:	900d      	str	r0, [sp, #52]	; 0x34
 80163d2:	f280 80c1 	bge.w	8016558 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80163d6:	428b      	cmp	r3, r1
 80163d8:	da08      	bge.n	80163ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80163da:	2a00      	cmp	r2, #0
 80163dc:	dd06      	ble.n	80163ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80163de:	1acb      	subs	r3, r1, r3
 80163e0:	429a      	cmp	r2, r3
 80163e2:	f2c0 80bb 	blt.w	801655c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	f300 80b9 	bgt.w	801655e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80163ec:	6967      	ldr	r7, [r4, #20]
 80163ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163f0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80163f4:	443b      	add	r3, r7
 80163f6:	461f      	mov	r7, r3
 80163f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163fa:	1bdf      	subs	r7, r3, r7
 80163fc:	4297      	cmp	r7, r2
 80163fe:	bfa8      	it	ge
 8016400:	4617      	movge	r7, r2
 8016402:	2f00      	cmp	r7, #0
 8016404:	f340 813c 	ble.w	8016680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016408:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801640a:	6829      	ldr	r1, [r5, #0]
 801640c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016410:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016414:	4411      	add	r1, r2
 8016416:	4299      	cmp	r1, r3
 8016418:	6820      	ldr	r0, [r4, #0]
 801641a:	dd1a      	ble.n	8016452 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801641c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016420:	4402      	add	r2, r0
 8016422:	440b      	add	r3, r1
 8016424:	b21b      	sxth	r3, r3
 8016426:	429a      	cmp	r2, r3
 8016428:	dc13      	bgt.n	8016452 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801642a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801642c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801642e:	a912      	add	r1, sp, #72	; 0x48
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	9206      	str	r2, [sp, #24]
 8016434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016436:	9500      	str	r5, [sp, #0]
 8016438:	9205      	str	r2, [sp, #20]
 801643a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801643c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801643e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016442:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016444:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016448:	aa49      	add	r2, sp, #292	; 0x124
 801644a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801644e:	4623      	mov	r3, r4
 8016450:	47c8      	blx	r9
 8016452:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016456:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801645a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801645e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016466:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801646a:	ed94 6a08 	vldr	s12, [r4, #32]
 801646e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016472:	edd4 6a07 	vldr	s13, [r4, #28]
 8016476:	ee76 6a86 	vadd.f32	s13, s13, s12
 801647a:	441a      	add	r2, r3
 801647c:	6963      	ldr	r3, [r4, #20]
 801647e:	68a1      	ldr	r1, [r4, #8]
 8016480:	3301      	adds	r3, #1
 8016482:	6163      	str	r3, [r4, #20]
 8016484:	69a3      	ldr	r3, [r4, #24]
 8016486:	6022      	str	r2, [r4, #0]
 8016488:	3b01      	subs	r3, #1
 801648a:	61a3      	str	r3, [r4, #24]
 801648c:	6923      	ldr	r3, [r4, #16]
 801648e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016492:	440b      	add	r3, r1
 8016494:	68e1      	ldr	r1, [r4, #12]
 8016496:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801649a:	428b      	cmp	r3, r1
 801649c:	edc4 6a07 	vstr	s13, [r4, #28]
 80164a0:	6123      	str	r3, [r4, #16]
 80164a2:	db15      	blt.n	80164d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80164a4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80164a8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80164ac:	edc4 6a07 	vstr	s13, [r4, #28]
 80164b0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80164b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80164b8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80164bc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80164c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164c4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80164c8:	3201      	adds	r2, #1
 80164ca:	1a5b      	subs	r3, r3, r1
 80164cc:	6022      	str	r2, [r4, #0]
 80164ce:	6123      	str	r3, [r4, #16]
 80164d0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80164d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80164d8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80164dc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80164e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80164e4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80164e8:	ed95 6a08 	vldr	s12, [r5, #32]
 80164ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80164f0:	edd5 6a07 	vldr	s13, [r5, #28]
 80164f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80164f8:	441a      	add	r2, r3
 80164fa:	696b      	ldr	r3, [r5, #20]
 80164fc:	68a9      	ldr	r1, [r5, #8]
 80164fe:	3301      	adds	r3, #1
 8016500:	616b      	str	r3, [r5, #20]
 8016502:	69ab      	ldr	r3, [r5, #24]
 8016504:	602a      	str	r2, [r5, #0]
 8016506:	3b01      	subs	r3, #1
 8016508:	61ab      	str	r3, [r5, #24]
 801650a:	692b      	ldr	r3, [r5, #16]
 801650c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016510:	440b      	add	r3, r1
 8016512:	68e9      	ldr	r1, [r5, #12]
 8016514:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016518:	428b      	cmp	r3, r1
 801651a:	edc5 6a07 	vstr	s13, [r5, #28]
 801651e:	612b      	str	r3, [r5, #16]
 8016520:	db15      	blt.n	801654e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016522:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016526:	ee76 6a26 	vadd.f32	s13, s12, s13
 801652a:	edc5 6a07 	vstr	s13, [r5, #28]
 801652e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016532:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016536:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801653a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801653e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016542:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016546:	3201      	adds	r2, #1
 8016548:	1a5b      	subs	r3, r3, r1
 801654a:	602a      	str	r2, [r5, #0]
 801654c:	612b      	str	r3, [r5, #16]
 801654e:	3f01      	subs	r7, #1
 8016550:	e757      	b.n	8016402 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016552:	ad39      	add	r5, sp, #228	; 0xe4
 8016554:	ac19      	add	r4, sp, #100	; 0x64
 8016556:	e72d      	b.n	80163b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016558:	4613      	mov	r3, r2
 801655a:	e744      	b.n	80163e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801655c:	4613      	mov	r3, r2
 801655e:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016562:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016566:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801656a:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801656e:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016572:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016576:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801657a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801657e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016582:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8016586:	469e      	mov	lr, r3
 8016588:	461f      	mov	r7, r3
 801658a:	f04f 0900 	mov.w	r9, #0
 801658e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016590:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016594:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016596:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801659a:	960e      	str	r6, [sp, #56]	; 0x38
 801659c:	2f00      	cmp	r7, #0
 801659e:	d146      	bne.n	801662e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80165a0:	449c      	add	ip, r3
 80165a2:	1ad7      	subs	r7, r2, r3
 80165a4:	f1b9 0f00 	cmp.w	r9, #0
 80165a8:	d009      	beq.n	80165be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80165aa:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80165ae:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80165b2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80165b6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80165ba:	9039      	str	r0, [sp, #228]	; 0xe4
 80165bc:	913d      	str	r1, [sp, #244]	; 0xf4
 80165be:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80165c2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80165c6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80165ca:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80165ce:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80165d2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80165d6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80165da:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80165de:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80165e2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80165e6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80165ea:	f04f 0800 	mov.w	r8, #0
 80165ee:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80165f0:	910e      	str	r1, [sp, #56]	; 0x38
 80165f2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80165f6:	f1be 0f00 	cmp.w	lr, #0
 80165fa:	d030      	beq.n	801665e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80165fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80165fe:	4450      	add	r0, sl
 8016600:	4431      	add	r1, r6
 8016602:	4549      	cmp	r1, r9
 8016604:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016608:	ee37 7a04 	vadd.f32	s14, s14, s8
 801660c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016610:	db08      	blt.n	8016624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016612:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016616:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801661a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801661e:	3001      	adds	r0, #1
 8016620:	eba1 0109 	sub.w	r1, r1, r9
 8016624:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016628:	f04f 0801 	mov.w	r8, #1
 801662c:	e7e3      	b.n	80165f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801662e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016630:	4450      	add	r0, sl
 8016632:	4431      	add	r1, r6
 8016634:	4541      	cmp	r1, r8
 8016636:	ee37 7a24 	vadd.f32	s14, s14, s9
 801663a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801663e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016642:	db08      	blt.n	8016656 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016644:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016648:	ee37 7a25 	vadd.f32	s14, s14, s11
 801664c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016650:	3001      	adds	r0, #1
 8016652:	eba1 0108 	sub.w	r1, r1, r8
 8016656:	3f01      	subs	r7, #1
 8016658:	f04f 0901 	mov.w	r9, #1
 801665c:	e79e      	b.n	801659c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801665e:	449c      	add	ip, r3
 8016660:	1aff      	subs	r7, r7, r3
 8016662:	f1b8 0f00 	cmp.w	r8, #0
 8016666:	d009      	beq.n	801667c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016668:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801666c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016670:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016674:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016678:	9019      	str	r0, [sp, #100]	; 0x64
 801667a:	911d      	str	r1, [sp, #116]	; 0x74
 801667c:	1ad2      	subs	r2, r2, r3
 801667e:	e6b5      	b.n	80163ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	b923      	cbnz	r3, 8016690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016686:	4b04      	ldr	r3, [pc, #16]	; (8016698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8016688:	6818      	ldr	r0, [r3, #0]
 801668a:	6803      	ldr	r3, [r0, #0]
 801668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801668e:	4798      	blx	r3
 8016690:	b05b      	add	sp, #364	; 0x16c
 8016692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016696:	bf00      	nop
 8016698:	2004f630 	.word	0x2004f630

0801669c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801669c:	2b03      	cmp	r3, #3
 801669e:	d818      	bhi.n	80166d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80166a0:	e8df f003 	tbb	[pc, r3]
 80166a4:	130d0602 	.word	0x130d0602
 80166a8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80166ac:	1850      	adds	r0, r2, r1
 80166ae:	4770      	bx	lr
 80166b0:	8803      	ldrh	r3, [r0, #0]
 80166b2:	8880      	ldrh	r0, [r0, #4]
 80166b4:	4418      	add	r0, r3
 80166b6:	b200      	sxth	r0, r0
 80166b8:	1a80      	subs	r0, r0, r2
 80166ba:	3801      	subs	r0, #1
 80166bc:	4770      	bx	lr
 80166be:	8803      	ldrh	r3, [r0, #0]
 80166c0:	8880      	ldrh	r0, [r0, #4]
 80166c2:	4418      	add	r0, r3
 80166c4:	b200      	sxth	r0, r0
 80166c6:	1a40      	subs	r0, r0, r1
 80166c8:	e7f7      	b.n	80166ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80166ca:	f9b0 0000 	ldrsh.w	r0, [r0]
 80166ce:	4410      	add	r0, r2
 80166d0:	4770      	bx	lr
 80166d2:	2000      	movs	r0, #0
 80166d4:	4770      	bx	lr

080166d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80166d6:	2b03      	cmp	r3, #3
 80166d8:	d817      	bhi.n	801670a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80166da:	e8df f003 	tbb	[pc, r3]
 80166de:	0602      	.short	0x0602
 80166e0:	1009      	.short	0x1009
 80166e2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80166e6:	1850      	adds	r0, r2, r1
 80166e8:	4770      	bx	lr
 80166ea:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80166ee:	e7fa      	b.n	80166e6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80166f0:	8843      	ldrh	r3, [r0, #2]
 80166f2:	88c0      	ldrh	r0, [r0, #6]
 80166f4:	4418      	add	r0, r3
 80166f6:	b200      	sxth	r0, r0
 80166f8:	1a80      	subs	r0, r0, r2
 80166fa:	3801      	subs	r0, #1
 80166fc:	4770      	bx	lr
 80166fe:	8843      	ldrh	r3, [r0, #2]
 8016700:	88c0      	ldrh	r0, [r0, #6]
 8016702:	4418      	add	r0, r3
 8016704:	b200      	sxth	r0, r0
 8016706:	1a40      	subs	r0, r0, r1
 8016708:	e7f7      	b.n	80166fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801670a:	2000      	movs	r0, #0
 801670c:	4770      	bx	lr
	...

08016710 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016710:	2200      	movs	r2, #0
 8016712:	4b01      	ldr	r3, [pc, #4]	; (8016718 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016714:	601a      	str	r2, [r3, #0]
 8016716:	4770      	bx	lr
 8016718:	2004f640 	.word	0x2004f640

0801671c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801671c:	4603      	mov	r3, r0
 801671e:	b1c8      	cbz	r0, 8016754 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016720:	0c02      	lsrs	r2, r0, #16
 8016722:	0412      	lsls	r2, r2, #16
 8016724:	b9a2      	cbnz	r2, 8016750 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016726:	0403      	lsls	r3, r0, #16
 8016728:	2010      	movs	r0, #16
 801672a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801672e:	bf04      	itt	eq
 8016730:	021b      	lsleq	r3, r3, #8
 8016732:	3008      	addeq	r0, #8
 8016734:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016738:	bf04      	itt	eq
 801673a:	011b      	lsleq	r3, r3, #4
 801673c:	3004      	addeq	r0, #4
 801673e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016742:	bf04      	itt	eq
 8016744:	009b      	lsleq	r3, r3, #2
 8016746:	3002      	addeq	r0, #2
 8016748:	2b00      	cmp	r3, #0
 801674a:	db04      	blt.n	8016756 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801674c:	3001      	adds	r0, #1
 801674e:	4770      	bx	lr
 8016750:	2000      	movs	r0, #0
 8016752:	e7ea      	b.n	801672a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016754:	2020      	movs	r0, #32
 8016756:	4770      	bx	lr

08016758 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8016758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801675c:	b087      	sub	sp, #28
 801675e:	4681      	mov	r9, r0
 8016760:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8016764:	4610      	mov	r0, r2
 8016766:	4698      	mov	r8, r3
 8016768:	460d      	mov	r5, r1
 801676a:	b981      	cbnz	r1, 801678e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801676c:	b14b      	cbz	r3, 8016782 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801676e:	460b      	mov	r3, r1
 8016770:	e9cd 4700 	strd	r4, r7, [sp]
 8016774:	464a      	mov	r2, r9
 8016776:	4641      	mov	r1, r8
 8016778:	f7ff ffee 	bl	8016758 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801677c:	b007      	add	sp, #28
 801677e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016782:	f04f 33ff 	mov.w	r3, #4294967295
 8016786:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801678a:	603b      	str	r3, [r7, #0]
 801678c:	e7f6      	b.n	801677c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801678e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8016792:	d107      	bne.n	80167a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8016794:	fb09 f602 	mul.w	r6, r9, r2
 8016798:	fbb6 f0f4 	udiv	r0, r6, r4
 801679c:	fb04 6610 	mls	r6, r4, r0, r6
 80167a0:	603e      	str	r6, [r7, #0]
 80167a2:	e7eb      	b.n	801677c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80167a4:	fa09 fb01 	lsl.w	fp, r9, r1
 80167a8:	fbbb f3f4 	udiv	r3, fp, r4
 80167ac:	2601      	movs	r6, #1
 80167ae:	9302      	str	r3, [sp, #8]
 80167b0:	408e      	lsls	r6, r1
 80167b2:	fb0a f303 	mul.w	r3, sl, r3
 80167b6:	3e01      	subs	r6, #1
 80167b8:	4016      	ands	r6, r2
 80167ba:	4630      	mov	r0, r6
 80167bc:	9303      	str	r3, [sp, #12]
 80167be:	f7ff ffad 	bl	801671c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80167c2:	464a      	mov	r2, r9
 80167c4:	460b      	mov	r3, r1
 80167c6:	e9cd 4700 	strd	r4, r7, [sp]
 80167ca:	4601      	mov	r1, r0
 80167cc:	4630      	mov	r0, r6
 80167ce:	f7ff ffc3 	bl	8016758 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80167d2:	9b02      	ldr	r3, [sp, #8]
 80167d4:	4606      	mov	r6, r0
 80167d6:	fb04 bb13 	mls	fp, r4, r3, fp
 80167da:	4658      	mov	r0, fp
 80167dc:	eb05 0108 	add.w	r1, r5, r8
 80167e0:	f7ff ff9c 	bl	801671c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80167e4:	ab05      	add	r3, sp, #20
 80167e6:	e9cd 4300 	strd	r4, r3, [sp]
 80167ea:	465a      	mov	r2, fp
 80167ec:	4603      	mov	r3, r0
 80167ee:	4650      	mov	r0, sl
 80167f0:	f7ff ffb2 	bl	8016758 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80167f4:	6839      	ldr	r1, [r7, #0]
 80167f6:	9a05      	ldr	r2, [sp, #20]
 80167f8:	9b03      	ldr	r3, [sp, #12]
 80167fa:	4411      	add	r1, r2
 80167fc:	fbb1 f2f4 	udiv	r2, r1, r4
 8016800:	fb04 1412 	mls	r4, r4, r2, r1
 8016804:	18d3      	adds	r3, r2, r3
 8016806:	441e      	add	r6, r3
 8016808:	4430      	add	r0, r6
 801680a:	603c      	str	r4, [r7, #0]
 801680c:	e7b6      	b.n	801677c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801680e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801680e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016812:	b085      	sub	sp, #20
 8016814:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016816:	f1b0 0900 	subs.w	r9, r0, #0
 801681a:	461d      	mov	r5, r3
 801681c:	bfbf      	itttt	lt
 801681e:	6823      	ldrlt	r3, [r4, #0]
 8016820:	f1c9 0900 	rsblt	r9, r9, #0
 8016824:	425b      	neglt	r3, r3
 8016826:	6023      	strlt	r3, [r4, #0]
 8016828:	bfb4      	ite	lt
 801682a:	f04f 36ff 	movlt.w	r6, #4294967295
 801682e:	2601      	movge	r6, #1
 8016830:	2a00      	cmp	r2, #0
 8016832:	4617      	mov	r7, r2
 8016834:	da04      	bge.n	8016840 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016836:	6823      	ldr	r3, [r4, #0]
 8016838:	4257      	negs	r7, r2
 801683a:	425b      	negs	r3, r3
 801683c:	4276      	negs	r6, r6
 801683e:	6023      	str	r3, [r4, #0]
 8016840:	2d00      	cmp	r5, #0
 8016842:	4638      	mov	r0, r7
 8016844:	bfba      	itte	lt
 8016846:	426d      	neglt	r5, r5
 8016848:	f04f 38ff 	movlt.w	r8, #4294967295
 801684c:	f04f 0801 	movge.w	r8, #1
 8016850:	f7ff ff64 	bl	801671c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016854:	ab03      	add	r3, sp, #12
 8016856:	e9cd 5300 	strd	r5, r3, [sp]
 801685a:	463a      	mov	r2, r7
 801685c:	4603      	mov	r3, r0
 801685e:	4648      	mov	r0, r9
 8016860:	f7ff ff7a 	bl	8016758 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016864:	6823      	ldr	r3, [r4, #0]
 8016866:	9a03      	ldr	r2, [sp, #12]
 8016868:	4546      	cmp	r6, r8
 801686a:	441a      	add	r2, r3
 801686c:	fb92 f3f5 	sdiv	r3, r2, r5
 8016870:	4418      	add	r0, r3
 8016872:	fb05 2313 	mls	r3, r5, r3, r2
 8016876:	bf18      	it	ne
 8016878:	4240      	negne	r0, r0
 801687a:	1c72      	adds	r2, r6, #1
 801687c:	6023      	str	r3, [r4, #0]
 801687e:	d105      	bne.n	801688c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016880:	2b00      	cmp	r3, #0
 8016882:	f1c3 0200 	rsb	r2, r3, #0
 8016886:	db0b      	blt.n	80168a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8016888:	6022      	str	r2, [r4, #0]
 801688a:	e006      	b.n	801689a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801688c:	2e01      	cmp	r6, #1
 801688e:	d104      	bne.n	801689a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016890:	2b00      	cmp	r3, #0
 8016892:	da02      	bge.n	801689a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016894:	442b      	add	r3, r5
 8016896:	3801      	subs	r0, #1
 8016898:	6023      	str	r3, [r4, #0]
 801689a:	b005      	add	sp, #20
 801689c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168a0:	3801      	subs	r0, #1
 80168a2:	1b52      	subs	r2, r2, r5
 80168a4:	e7f0      	b.n	8016888 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080168a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80168a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80168ac:	4c1c      	ldr	r4, [pc, #112]	; (8016920 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80168ae:	4605      	mov	r5, r0
 80168b0:	69a3      	ldr	r3, [r4, #24]
 80168b2:	6807      	ldr	r7, [r0, #0]
 80168b4:	b92b      	cbnz	r3, 80168c2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80168b6:	6840      	ldr	r0, [r0, #4]
 80168b8:	e9c5 7000 	strd	r7, r0, [r5]
 80168bc:	b004      	add	sp, #16
 80168be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168c2:	f04f 0802 	mov.w	r8, #2
 80168c6:	fb93 f1f8 	sdiv	r1, r3, r8
 80168ca:	68a2      	ldr	r2, [r4, #8]
 80168cc:	ae04      	add	r6, sp, #16
 80168ce:	440a      	add	r2, r1
 80168d0:	f846 2d04 	str.w	r2, [r6, #-4]!
 80168d4:	69e1      	ldr	r1, [r4, #28]
 80168d6:	463a      	mov	r2, r7
 80168d8:	9600      	str	r6, [sp, #0]
 80168da:	6820      	ldr	r0, [r4, #0]
 80168dc:	f7ff ff97 	bl	801680e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80168e0:	69a3      	ldr	r3, [r4, #24]
 80168e2:	4607      	mov	r7, r0
 80168e4:	686a      	ldr	r2, [r5, #4]
 80168e6:	6a21      	ldr	r1, [r4, #32]
 80168e8:	9600      	str	r6, [sp, #0]
 80168ea:	6860      	ldr	r0, [r4, #4]
 80168ec:	f7ff ff8f 	bl	801680e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80168f0:	69a3      	ldr	r3, [r4, #24]
 80168f2:	6962      	ldr	r2, [r4, #20]
 80168f4:	fb93 f8f8 	sdiv	r8, r3, r8
 80168f8:	4442      	add	r2, r8
 80168fa:	9203      	str	r2, [sp, #12]
 80168fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80168fe:	682a      	ldr	r2, [r5, #0]
 8016900:	4407      	add	r7, r0
 8016902:	9600      	str	r6, [sp, #0]
 8016904:	68e0      	ldr	r0, [r4, #12]
 8016906:	f7ff ff82 	bl	801680e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801690a:	9600      	str	r6, [sp, #0]
 801690c:	4680      	mov	r8, r0
 801690e:	69a3      	ldr	r3, [r4, #24]
 8016910:	686a      	ldr	r2, [r5, #4]
 8016912:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016914:	6920      	ldr	r0, [r4, #16]
 8016916:	f7ff ff7a 	bl	801680e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801691a:	4440      	add	r0, r8
 801691c:	e7cc      	b.n	80168b8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801691e:	bf00      	nop
 8016920:	2004f644 	.word	0x2004f644

08016924 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016924:	4b07      	ldr	r3, [pc, #28]	; (8016944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016926:	781b      	ldrb	r3, [r3, #0]
 8016928:	2b01      	cmp	r3, #1
 801692a:	d109      	bne.n	8016940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801692c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016930:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016934:	8003      	strh	r3, [r0, #0]
 8016936:	4b04      	ldr	r3, [pc, #16]	; (8016948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016938:	881b      	ldrh	r3, [r3, #0]
 801693a:	3b01      	subs	r3, #1
 801693c:	1a9b      	subs	r3, r3, r2
 801693e:	800b      	strh	r3, [r1, #0]
 8016940:	4770      	bx	lr
 8016942:	bf00      	nop
 8016944:	2004f628 	.word	0x2004f628
 8016948:	2004f624 	.word	0x2004f624

0801694c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801694c:	b510      	push	{r4, lr}
 801694e:	4b07      	ldr	r3, [pc, #28]	; (801696c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	2b01      	cmp	r3, #1
 8016954:	d108      	bne.n	8016968 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016956:	4b06      	ldr	r3, [pc, #24]	; (8016970 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016958:	880c      	ldrh	r4, [r1, #0]
 801695a:	881b      	ldrh	r3, [r3, #0]
 801695c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016960:	3b01      	subs	r3, #1
 8016962:	1b1b      	subs	r3, r3, r4
 8016964:	8003      	strh	r3, [r0, #0]
 8016966:	800a      	strh	r2, [r1, #0]
 8016968:	bd10      	pop	{r4, pc}
 801696a:	bf00      	nop
 801696c:	2004f628 	.word	0x2004f628
 8016970:	2004f624 	.word	0x2004f624

08016974 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016974:	b510      	push	{r4, lr}
 8016976:	4b0a      	ldr	r3, [pc, #40]	; (80169a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016978:	781b      	ldrb	r3, [r3, #0]
 801697a:	2b01      	cmp	r3, #1
 801697c:	d10e      	bne.n	801699c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801697e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016982:	8843      	ldrh	r3, [r0, #2]
 8016984:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016988:	18ca      	adds	r2, r1, r3
 801698a:	4b06      	ldr	r3, [pc, #24]	; (80169a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801698c:	8044      	strh	r4, [r0, #2]
 801698e:	881b      	ldrh	r3, [r3, #0]
 8016990:	1a9b      	subs	r3, r3, r2
 8016992:	8003      	strh	r3, [r0, #0]
 8016994:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016998:	8081      	strh	r1, [r0, #4]
 801699a:	80c3      	strh	r3, [r0, #6]
 801699c:	bd10      	pop	{r4, pc}
 801699e:	bf00      	nop
 80169a0:	2004f628 	.word	0x2004f628
 80169a4:	2004f624 	.word	0x2004f624

080169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80169a8:	4b08      	ldr	r3, [pc, #32]	; (80169cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80169aa:	781b      	ldrb	r3, [r3, #0]
 80169ac:	2b01      	cmp	r3, #1
 80169ae:	d10c      	bne.n	80169ca <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80169b0:	8803      	ldrh	r3, [r0, #0]
 80169b2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80169b6:	8842      	ldrh	r2, [r0, #2]
 80169b8:	8002      	strh	r2, [r0, #0]
 80169ba:	185a      	adds	r2, r3, r1
 80169bc:	4b04      	ldr	r3, [pc, #16]	; (80169d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80169be:	881b      	ldrh	r3, [r3, #0]
 80169c0:	1a9b      	subs	r3, r3, r2
 80169c2:	8043      	strh	r3, [r0, #2]
 80169c4:	88c3      	ldrh	r3, [r0, #6]
 80169c6:	80c1      	strh	r1, [r0, #6]
 80169c8:	8083      	strh	r3, [r0, #4]
 80169ca:	4770      	bx	lr
 80169cc:	2004f628 	.word	0x2004f628
 80169d0:	2004f624 	.word	0x2004f624

080169d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80169d4:	b510      	push	{r4, lr}
 80169d6:	4b07      	ldr	r3, [pc, #28]	; (80169f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80169d8:	781b      	ldrb	r3, [r3, #0]
 80169da:	2b01      	cmp	r3, #1
 80169dc:	d108      	bne.n	80169f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80169de:	f9b1 3000 	ldrsh.w	r3, [r1]
 80169e2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80169e6:	8003      	strh	r3, [r0, #0]
 80169e8:	8893      	ldrh	r3, [r2, #4]
 80169ea:	3b01      	subs	r3, #1
 80169ec:	1b1b      	subs	r3, r3, r4
 80169ee:	800b      	strh	r3, [r1, #0]
 80169f0:	bd10      	pop	{r4, pc}
 80169f2:	bf00      	nop
 80169f4:	2004f628 	.word	0x2004f628

080169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80169f8:	b510      	push	{r4, lr}
 80169fa:	4b0a      	ldr	r3, [pc, #40]	; (8016a24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80169fc:	460a      	mov	r2, r1
 80169fe:	781b      	ldrb	r3, [r3, #0]
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	d10d      	bne.n	8016a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016a04:	8881      	ldrh	r1, [r0, #4]
 8016a06:	8803      	ldrh	r3, [r0, #0]
 8016a08:	440b      	add	r3, r1
 8016a0a:	4601      	mov	r1, r0
 8016a0c:	3b01      	subs	r3, #1
 8016a0e:	f821 3b02 	strh.w	r3, [r1], #2
 8016a12:	f7ff ffdf 	bl	80169d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016a16:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016a1a:	88c2      	ldrh	r2, [r0, #6]
 8016a1c:	80c3      	strh	r3, [r0, #6]
 8016a1e:	8082      	strh	r2, [r0, #4]
 8016a20:	bd10      	pop	{r4, pc}
 8016a22:	bf00      	nop
 8016a24:	2004f628 	.word	0x2004f628

08016a28 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016a28:	2300      	movs	r3, #0
 8016a2a:	b570      	push	{r4, r5, r6, lr}
 8016a2c:	4c0a      	ldr	r4, [pc, #40]	; (8016a58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016a2e:	4605      	mov	r5, r0
 8016a30:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8016a34:	6820      	ldr	r0, [r4, #0]
 8016a36:	460e      	mov	r6, r1
 8016a38:	b110      	cbz	r0, 8016a40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8016a3a:	6803      	ldr	r3, [r0, #0]
 8016a3c:	695b      	ldr	r3, [r3, #20]
 8016a3e:	4798      	blx	r3
 8016a40:	6026      	str	r6, [r4, #0]
 8016a42:	6833      	ldr	r3, [r6, #0]
 8016a44:	4630      	mov	r0, r6
 8016a46:	68db      	ldr	r3, [r3, #12]
 8016a48:	4798      	blx	r3
 8016a4a:	682b      	ldr	r3, [r5, #0]
 8016a4c:	4628      	mov	r0, r5
 8016a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a54:	4718      	bx	r3
 8016a56:	bf00      	nop
 8016a58:	2004f674 	.word	0x2004f674

08016a5c <_ZN8touchgfx11Application13requestRedrawEv>:
 8016a5c:	2100      	movs	r1, #0
 8016a5e:	4b06      	ldr	r3, [pc, #24]	; (8016a78 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016a60:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8016a64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016a68:	4b04      	ldr	r3, [pc, #16]	; (8016a7c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016a6a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8016a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a72:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8016a76:	4770      	bx	lr
 8016a78:	2004f624 	.word	0x2004f624
 8016a7c:	2004f626 	.word	0x2004f626

08016a80 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016a80:	4b03      	ldr	r3, [pc, #12]	; (8016a90 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016a82:	6818      	ldr	r0, [r3, #0]
 8016a84:	b110      	cbz	r0, 8016a8c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016a86:	6803      	ldr	r3, [r0, #0]
 8016a88:	699b      	ldr	r3, [r3, #24]
 8016a8a:	4718      	bx	r3
 8016a8c:	4770      	bx	lr
 8016a8e:	bf00      	nop
 8016a90:	2004f674 	.word	0x2004f674

08016a94 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016a94:	4770      	bx	lr
	...

08016a98 <_ZN8touchgfx11Application4drawEv>:
 8016a98:	b507      	push	{r0, r1, r2, lr}
 8016a9a:	2100      	movs	r1, #0
 8016a9c:	4b08      	ldr	r3, [pc, #32]	; (8016ac0 <_ZN8touchgfx11Application4drawEv+0x28>)
 8016a9e:	9100      	str	r1, [sp, #0]
 8016aa0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016aa4:	4b07      	ldr	r3, [pc, #28]	; (8016ac4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016aa6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016aae:	4669      	mov	r1, sp
 8016ab0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016ab4:	6803      	ldr	r3, [r0, #0]
 8016ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ab8:	4798      	blx	r3
 8016aba:	b003      	add	sp, #12
 8016abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ac0:	2004f624 	.word	0x2004f624
 8016ac4:	2004f626 	.word	0x2004f626

08016ac8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016ac8:	4b03      	ldr	r3, [pc, #12]	; (8016ad8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016aca:	6818      	ldr	r0, [r3, #0]
 8016acc:	b110      	cbz	r0, 8016ad4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016ace:	6803      	ldr	r3, [r0, #0]
 8016ad0:	69db      	ldr	r3, [r3, #28]
 8016ad2:	4718      	bx	r3
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop
 8016ad8:	2004f674 	.word	0x2004f674

08016adc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016adc:	4b03      	ldr	r3, [pc, #12]	; (8016aec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016ade:	6818      	ldr	r0, [r3, #0]
 8016ae0:	b110      	cbz	r0, 8016ae8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016ae2:	6803      	ldr	r3, [r0, #0]
 8016ae4:	6a1b      	ldr	r3, [r3, #32]
 8016ae6:	4718      	bx	r3
 8016ae8:	4770      	bx	lr
 8016aea:	bf00      	nop
 8016aec:	2004f674 	.word	0x2004f674

08016af0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016af0:	2300      	movs	r3, #0
 8016af2:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8016af6:	4770      	bx	lr

08016af8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016af8:	4b03      	ldr	r3, [pc, #12]	; (8016b08 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016afa:	6818      	ldr	r0, [r3, #0]
 8016afc:	b110      	cbz	r0, 8016b04 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016afe:	6803      	ldr	r3, [r0, #0]
 8016b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b02:	4718      	bx	r3
 8016b04:	4770      	bx	lr
 8016b06:	bf00      	nop
 8016b08:	2004f674 	.word	0x2004f674

08016b0c <_ZN8touchgfx11Application15handleTickEventEv>:
 8016b0c:	b570      	push	{r4, r5, r6, lr}
 8016b0e:	4d32      	ldr	r5, [pc, #200]	; (8016bd8 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8016b10:	4604      	mov	r4, r0
 8016b12:	6828      	ldr	r0, [r5, #0]
 8016b14:	b140      	cbz	r0, 8016b28 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016b16:	7a03      	ldrb	r3, [r0, #8]
 8016b18:	b933      	cbnz	r3, 8016b28 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016b1a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8016b1e:	6803      	ldr	r3, [r0, #0]
 8016b20:	689b      	ldr	r3, [r3, #8]
 8016b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b26:	4718      	bx	r3
 8016b28:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8016b2c:	b97b      	cbnz	r3, 8016b4e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016b2e:	b170      	cbz	r0, 8016b4e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016b30:	7a03      	ldrb	r3, [r0, #8]
 8016b32:	b163      	cbz	r3, 8016b4e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016b34:	4b29      	ldr	r3, [pc, #164]	; (8016bdc <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8016b36:	6818      	ldr	r0, [r3, #0]
 8016b38:	b110      	cbz	r0, 8016b40 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016b3a:	6803      	ldr	r3, [r0, #0]
 8016b3c:	691b      	ldr	r3, [r3, #16]
 8016b3e:	4798      	blx	r3
 8016b40:	6828      	ldr	r0, [r5, #0]
 8016b42:	6803      	ldr	r3, [r0, #0]
 8016b44:	68db      	ldr	r3, [r3, #12]
 8016b46:	4798      	blx	r3
 8016b48:	2301      	movs	r3, #1
 8016b4a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8016b4e:	2500      	movs	r5, #0
 8016b50:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8016b54:	42a8      	cmp	r0, r5
 8016b56:	dd0c      	ble.n	8016b72 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8016b58:	1963      	adds	r3, r4, r5
 8016b5a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8016b5e:	b132      	cbz	r2, 8016b6e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8016b60:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016b64:	4413      	add	r3, r2
 8016b66:	6858      	ldr	r0, [r3, #4]
 8016b68:	6803      	ldr	r3, [r0, #0]
 8016b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016b6c:	4798      	blx	r3
 8016b6e:	3501      	adds	r5, #1
 8016b70:	e7ee      	b.n	8016b50 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8016b72:	2300      	movs	r3, #0
 8016b74:	461a      	mov	r2, r3
 8016b76:	4298      	cmp	r0, r3
 8016b78:	d015      	beq.n	8016ba6 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8016b7a:	18e1      	adds	r1, r4, r3
 8016b7c:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8016b80:	b16d      	cbz	r5, 8016b9e <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d00a      	beq.n	8016b9c <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8016b86:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8016b8a:	4431      	add	r1, r6
 8016b8c:	684e      	ldr	r6, [r1, #4]
 8016b8e:	b291      	uxth	r1, r2
 8016b90:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8016b94:	604e      	str	r6, [r1, #4]
 8016b96:	18a1      	adds	r1, r4, r2
 8016b98:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8016b9c:	3201      	adds	r2, #1
 8016b9e:	3301      	adds	r3, #1
 8016ba0:	e7e9      	b.n	8016b76 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8016ba2:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8016ba6:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8016baa:	4295      	cmp	r5, r2
 8016bac:	dd0d      	ble.n	8016bca <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8016bae:	1e6b      	subs	r3, r5, #1
 8016bb0:	b29b      	uxth	r3, r3
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8016bb8:	3104      	adds	r1, #4
 8016bba:	4285      	cmp	r5, r0
 8016bbc:	ddf1      	ble.n	8016ba2 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8016bbe:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8016bc2:	3001      	adds	r0, #1
 8016bc4:	f841 6c04 	str.w	r6, [r1, #-4]
 8016bc8:	e7f7      	b.n	8016bba <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8016bca:	4b04      	ldr	r3, [pc, #16]	; (8016bdc <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8016bcc:	6818      	ldr	r0, [r3, #0]
 8016bce:	b110      	cbz	r0, 8016bd6 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8016bd0:	6803      	ldr	r3, [r0, #0]
 8016bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bd4:	e7a5      	b.n	8016b22 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016bd6:	bd70      	pop	{r4, r5, r6, pc}
 8016bd8:	2004f678 	.word	0x2004f678
 8016bdc:	2004f674 	.word	0x2004f674

08016be0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016be0:	b510      	push	{r4, lr}
 8016be2:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016be6:	888a      	ldrh	r2, [r1, #4]
 8016be8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016bec:	4422      	add	r2, r4
 8016bee:	b212      	sxth	r2, r2
 8016bf0:	4293      	cmp	r3, r2
 8016bf2:	da15      	bge.n	8016c20 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016bf4:	8882      	ldrh	r2, [r0, #4]
 8016bf6:	4413      	add	r3, r2
 8016bf8:	b21b      	sxth	r3, r3
 8016bfa:	429c      	cmp	r4, r3
 8016bfc:	da10      	bge.n	8016c20 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016bfe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016c02:	88c9      	ldrh	r1, [r1, #6]
 8016c04:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016c08:	4419      	add	r1, r3
 8016c0a:	b209      	sxth	r1, r1
 8016c0c:	428a      	cmp	r2, r1
 8016c0e:	da07      	bge.n	8016c20 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016c10:	88c0      	ldrh	r0, [r0, #6]
 8016c12:	4410      	add	r0, r2
 8016c14:	b200      	sxth	r0, r0
 8016c16:	4283      	cmp	r3, r0
 8016c18:	bfac      	ite	ge
 8016c1a:	2000      	movge	r0, #0
 8016c1c:	2001      	movlt	r0, #1
 8016c1e:	bd10      	pop	{r4, pc}
 8016c20:	2000      	movs	r0, #0
 8016c22:	e7fc      	b.n	8016c1e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016c24 <_ZN8touchgfx4Rect10restrictToEss>:
 8016c24:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016c28:	b510      	push	{r4, lr}
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	da04      	bge.n	8016c38 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016c2e:	8884      	ldrh	r4, [r0, #4]
 8016c30:	4423      	add	r3, r4
 8016c32:	8083      	strh	r3, [r0, #4]
 8016c34:	2300      	movs	r3, #0
 8016c36:	8003      	strh	r3, [r0, #0]
 8016c38:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016c3c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016c40:	1b09      	subs	r1, r1, r4
 8016c42:	428b      	cmp	r3, r1
 8016c44:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016c48:	bfc8      	it	gt
 8016c4a:	8081      	strhgt	r1, [r0, #4]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	da04      	bge.n	8016c5a <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016c50:	88c1      	ldrh	r1, [r0, #6]
 8016c52:	440b      	add	r3, r1
 8016c54:	80c3      	strh	r3, [r0, #6]
 8016c56:	2300      	movs	r3, #0
 8016c58:	8043      	strh	r3, [r0, #2]
 8016c5a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016c5e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016c62:	1a52      	subs	r2, r2, r1
 8016c64:	4293      	cmp	r3, r2
 8016c66:	bfc8      	it	gt
 8016c68:	80c2      	strhgt	r2, [r0, #6]
 8016c6a:	bd10      	pop	{r4, pc}

08016c6c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016c6c:	b510      	push	{r4, lr}
 8016c6e:	460c      	mov	r4, r1
 8016c70:	4b0f      	ldr	r3, [pc, #60]	; (8016cb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016c72:	4620      	mov	r0, r4
 8016c74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016c78:	4b0e      	ldr	r3, [pc, #56]	; (8016cb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016c7a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016c7e:	f7ff ffd1 	bl	8016c24 <_ZN8touchgfx4Rect10restrictToEss>
 8016c82:	4b0d      	ldr	r3, [pc, #52]	; (8016cb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016c84:	6818      	ldr	r0, [r3, #0]
 8016c86:	b190      	cbz	r0, 8016cae <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016c88:	6803      	ldr	r3, [r0, #0]
 8016c8a:	4621      	mov	r1, r4
 8016c8c:	689b      	ldr	r3, [r3, #8]
 8016c8e:	4798      	blx	r3
 8016c90:	4b0a      	ldr	r3, [pc, #40]	; (8016cbc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016c92:	6818      	ldr	r0, [r3, #0]
 8016c94:	b118      	cbz	r0, 8016c9e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016c96:	6803      	ldr	r3, [r0, #0]
 8016c98:	4621      	mov	r1, r4
 8016c9a:	689b      	ldr	r3, [r3, #8]
 8016c9c:	4798      	blx	r3
 8016c9e:	4b08      	ldr	r3, [pc, #32]	; (8016cc0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016ca0:	4621      	mov	r1, r4
 8016ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ca6:	6818      	ldr	r0, [r3, #0]
 8016ca8:	6803      	ldr	r3, [r0, #0]
 8016caa:	69db      	ldr	r3, [r3, #28]
 8016cac:	4718      	bx	r3
 8016cae:	bd10      	pop	{r4, pc}
 8016cb0:	2004f626 	.word	0x2004f626
 8016cb4:	2004f624 	.word	0x2004f624
 8016cb8:	2004f674 	.word	0x2004f674
 8016cbc:	2004f670 	.word	0x2004f670
 8016cc0:	2004f630 	.word	0x2004f630

08016cc4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cc6:	4606      	mov	r6, r0
 8016cc8:	4608      	mov	r0, r1
 8016cca:	460f      	mov	r7, r1
 8016ccc:	f7fc f963 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016cd0:	b9e8      	cbnz	r0, 8016d0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016cd2:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016cd6:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016cda:	42a5      	cmp	r5, r4
 8016cdc:	db17      	blt.n	8016d0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016cde:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016ce2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016ce6:	429a      	cmp	r2, r3
 8016ce8:	db11      	blt.n	8016d0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016cea:	88b9      	ldrh	r1, [r7, #4]
 8016cec:	440d      	add	r5, r1
 8016cee:	88b1      	ldrh	r1, [r6, #4]
 8016cf0:	b22d      	sxth	r5, r5
 8016cf2:	440c      	add	r4, r1
 8016cf4:	b224      	sxth	r4, r4
 8016cf6:	42a5      	cmp	r5, r4
 8016cf8:	dc09      	bgt.n	8016d0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016cfa:	88f8      	ldrh	r0, [r7, #6]
 8016cfc:	4410      	add	r0, r2
 8016cfe:	88f2      	ldrh	r2, [r6, #6]
 8016d00:	b200      	sxth	r0, r0
 8016d02:	4413      	add	r3, r2
 8016d04:	b21b      	sxth	r3, r3
 8016d06:	4298      	cmp	r0, r3
 8016d08:	bfcc      	ite	gt
 8016d0a:	2000      	movgt	r0, #0
 8016d0c:	2001      	movle	r0, #1
 8016d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016d10 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d12:	4604      	mov	r4, r0
 8016d14:	4608      	mov	r0, r1
 8016d16:	460d      	mov	r5, r1
 8016d18:	f7fc f93d 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d1c:	b978      	cbnz	r0, 8016d3e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016d1e:	4620      	mov	r0, r4
 8016d20:	f7fc f939 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d24:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016d28:	b150      	cbz	r0, 8016d40 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016d2a:	8026      	strh	r6, [r4, #0]
 8016d2c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016d30:	8063      	strh	r3, [r4, #2]
 8016d32:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016d36:	80a3      	strh	r3, [r4, #4]
 8016d38:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016d3c:	80e3      	strh	r3, [r4, #6]
 8016d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d40:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016d44:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016d48:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016d4c:	42b1      	cmp	r1, r6
 8016d4e:	460f      	mov	r7, r1
 8016d50:	bfa8      	it	ge
 8016d52:	4637      	movge	r7, r6
 8016d54:	4293      	cmp	r3, r2
 8016d56:	4618      	mov	r0, r3
 8016d58:	bfa8      	it	ge
 8016d5a:	4610      	movge	r0, r2
 8016d5c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016d60:	88ed      	ldrh	r5, [r5, #6]
 8016d62:	4466      	add	r6, ip
 8016d64:	442a      	add	r2, r5
 8016d66:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016d6a:	88e5      	ldrh	r5, [r4, #6]
 8016d6c:	4461      	add	r1, ip
 8016d6e:	442b      	add	r3, r5
 8016d70:	b236      	sxth	r6, r6
 8016d72:	b209      	sxth	r1, r1
 8016d74:	b212      	sxth	r2, r2
 8016d76:	b21b      	sxth	r3, r3
 8016d78:	428e      	cmp	r6, r1
 8016d7a:	bfac      	ite	ge
 8016d7c:	ebc7 0106 	rsbge	r1, r7, r6
 8016d80:	ebc7 0101 	rsblt	r1, r7, r1
 8016d84:	429a      	cmp	r2, r3
 8016d86:	bfac      	ite	ge
 8016d88:	ebc0 0202 	rsbge	r2, r0, r2
 8016d8c:	ebc0 0203 	rsblt	r2, r0, r3
 8016d90:	8027      	strh	r7, [r4, #0]
 8016d92:	8060      	strh	r0, [r4, #2]
 8016d94:	80a1      	strh	r1, [r4, #4]
 8016d96:	80e2      	strh	r2, [r4, #6]
 8016d98:	e7d1      	b.n	8016d3e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016d9c <_ZN8touchgfx11Application11getInstanceEv>:
 8016d9c:	4b01      	ldr	r3, [pc, #4]	; (8016da4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016d9e:	6818      	ldr	r0, [r3, #0]
 8016da0:	4770      	bx	lr
 8016da2:	bf00      	nop
 8016da4:	2004f684 	.word	0x2004f684

08016da8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8016da8:	2300      	movs	r3, #0
 8016daa:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8016dae:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8016db2:	30a8      	adds	r0, #168	; 0xa8
 8016db4:	f802 3b01 	strb.w	r3, [r2], #1
 8016db8:	4282      	cmp	r2, r0
 8016dba:	d1fb      	bne.n	8016db4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8016dbc:	4770      	bx	lr
	...

08016dc0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8016dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dc2:	4b10      	ldr	r3, [pc, #64]	; (8016e04 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 8016dc4:	4605      	mov	r5, r0
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	b1d3      	cbz	r3, 8016e00 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 8016dca:	4b0f      	ldr	r3, [pc, #60]	; (8016e08 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 8016dcc:	4f0f      	ldr	r7, [pc, #60]	; (8016e0c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 8016dce:	881c      	ldrh	r4, [r3, #0]
 8016dd0:	f100 06ea 	add.w	r6, r0, #234	; 0xea
 8016dd4:	f8b5 312a 	ldrh.w	r3, [r5, #298]	; 0x12a
 8016dd8:	42a3      	cmp	r3, r4
 8016dda:	d90e      	bls.n	8016dfa <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 8016ddc:	683b      	ldr	r3, [r7, #0]
 8016dde:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016de2:	b10a      	cbz	r2, 8016de8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 8016de4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016de6:	b900      	cbnz	r0, 8016dea <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 8016de8:	6898      	ldr	r0, [r3, #8]
 8016dea:	6803      	ldr	r3, [r0, #0]
 8016dec:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8016df0:	69db      	ldr	r3, [r3, #28]
 8016df2:	3401      	adds	r4, #1
 8016df4:	4798      	blx	r3
 8016df6:	b2a4      	uxth	r4, r4
 8016df8:	e7ec      	b.n	8016dd4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	f8a5 312a 	strh.w	r3, [r5, #298]	; 0x12a
 8016e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e02:	bf00      	nop
 8016e04:	2004f62e 	.word	0x2004f62e
 8016e08:	20025820 	.word	0x20025820
 8016e0c:	2004f630 	.word	0x2004f630

08016e10 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016e10:	4603      	mov	r3, r0
 8016e12:	2200      	movs	r2, #0
 8016e14:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016e18:	801a      	strh	r2, [r3, #0]
 8016e1a:	805a      	strh	r2, [r3, #2]
 8016e1c:	809a      	strh	r2, [r3, #4]
 8016e1e:	80da      	strh	r2, [r3, #6]
 8016e20:	3308      	adds	r3, #8
 8016e22:	428b      	cmp	r3, r1
 8016e24:	d1f8      	bne.n	8016e18 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016e26:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016e2a:	4770      	bx	lr

08016e2c <_ZN8touchgfx11ApplicationC1Ev>:
 8016e2c:	b570      	push	{r4, r5, r6, lr}
 8016e2e:	2500      	movs	r5, #0
 8016e30:	4604      	mov	r4, r0
 8016e32:	4b18      	ldr	r3, [pc, #96]	; (8016e94 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8016e34:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8016e38:	6003      	str	r3, [r0, #0]
 8016e3a:	30a8      	adds	r0, #168	; 0xa8
 8016e3c:	f7ff ffe8 	bl	8016e10 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016e40:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8016e44:	f7ff ffe4 	bl	8016e10 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016e48:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8016e4c:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8016e50:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8016e54:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8016e58:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8016e5c:	490e      	ldr	r1, [pc, #56]	; (8016e98 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8016e5e:	480f      	ldr	r0, [pc, #60]	; (8016e9c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8016e60:	f00e f8b4 	bl	8024fcc <CRC_Lock>
 8016e64:	4e0e      	ldr	r6, [pc, #56]	; (8016ea0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8016e66:	4b0f      	ldr	r3, [pc, #60]	; (8016ea4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016e68:	b158      	cbz	r0, 8016e82 <_ZN8touchgfx11ApplicationC1Ev+0x56>
 8016e6a:	801d      	strh	r5, [r3, #0]
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	4a0e      	ldr	r2, [pc, #56]	; (8016ea8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016e70:	4620      	mov	r0, r4
 8016e72:	6013      	str	r3, [r2, #0]
 8016e74:	4a0d      	ldr	r2, [pc, #52]	; (8016eac <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016e76:	6033      	str	r3, [r6, #0]
 8016e78:	6013      	str	r3, [r2, #0]
 8016e7a:	f7ff ff95 	bl	8016da8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8016e7e:	4620      	mov	r0, r4
 8016e80:	bd70      	pop	{r4, r5, r6, pc}
 8016e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016e86:	2002      	movs	r0, #2
 8016e88:	801a      	strh	r2, [r3, #0]
 8016e8a:	6030      	str	r0, [r6, #0]
 8016e8c:	f001 fa9e 	bl	80183cc <_ZN8touchgfx6Screen4drawEv>
 8016e90:	e7ec      	b.n	8016e6c <_ZN8touchgfx11ApplicationC1Ev+0x40>
 8016e92:	bf00      	nop
 8016e94:	08028a98 	.word	0x08028a98
 8016e98:	b5e8b5cd 	.word	0xb5e8b5cd
 8016e9c:	f407a5c2 	.word	0xf407a5c2
 8016ea0:	2004f674 	.word	0x2004f674
 8016ea4:	20025820 	.word	0x20025820
 8016ea8:	2004f684 	.word	0x2004f684
 8016eac:	2004f678 	.word	0x2004f678

08016eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016eb0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016eb4:	b510      	push	{r4, lr}
 8016eb6:	3b01      	subs	r3, #1
 8016eb8:	b29b      	uxth	r3, r3
 8016eba:	428b      	cmp	r3, r1
 8016ebc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8016ec0:	d908      	bls.n	8016ed4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016ec2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016ec6:	681a      	ldr	r2, [r3, #0]
 8016ec8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016ecc:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016ed0:	685a      	ldr	r2, [r3, #4]
 8016ed2:	6062      	str	r2, [r4, #4]
 8016ed4:	bd10      	pop	{r4, pc}
	...

08016ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016edc:	4b94      	ldr	r3, [pc, #592]	; (8017130 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8016ede:	b08f      	sub	sp, #60	; 0x3c
 8016ee0:	ac0a      	add	r4, sp, #40	; 0x28
 8016ee2:	e884 0006 	stmia.w	r4, {r1, r2}
 8016ee6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016eea:	4b92      	ldr	r3, [pc, #584]	; (8017134 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8016eec:	4683      	mov	fp, r0
 8016eee:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	f7ff fe96 	bl	8016c24 <_ZN8touchgfx4Rect10restrictToEss>
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f7fc f84c 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	d16a      	bne.n	8016fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016f02:	9403      	str	r4, [sp, #12]
 8016f04:	2400      	movs	r4, #0
 8016f06:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8016f0a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8016f0e:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8016f12:	9301      	str	r3, [sp, #4]
 8016f14:	36a0      	adds	r6, #160	; 0xa0
 8016f16:	42a5      	cmp	r5, r4
 8016f18:	d00d      	beq.n	8016f36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8016f1a:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8016f1e:	9803      	ldr	r0, [sp, #12]
 8016f20:	f7ff fed0 	bl	8016cc4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016f24:	b128      	cbz	r0, 8016f32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8016f26:	1e69      	subs	r1, r5, #1
 8016f28:	1b09      	subs	r1, r1, r4
 8016f2a:	b289      	uxth	r1, r1
 8016f2c:	9801      	ldr	r0, [sp, #4]
 8016f2e:	f7ff ffbf 	bl	8016eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016f32:	3401      	adds	r4, #1
 8016f34:	e7ef      	b.n	8016f16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8016f36:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8016f3a:	1e7b      	subs	r3, r7, #1
 8016f3c:	9302      	str	r3, [sp, #8]
 8016f3e:	9704      	str	r7, [sp, #16]
 8016f40:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8016f44:	2400      	movs	r4, #0
 8016f46:	4655      	mov	r5, sl
 8016f48:	4626      	mov	r6, r4
 8016f4a:	9705      	str	r7, [sp, #20]
 8016f4c:	9b05      	ldr	r3, [sp, #20]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d078      	beq.n	8017044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8016f52:	9903      	ldr	r1, [sp, #12]
 8016f54:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016f58:	f7ff fe42 	bl	8016be0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016f5c:	b360      	cbz	r0, 8016fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016f5e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8016f62:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8016f66:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8016f6a:	45e6      	cmp	lr, ip
 8016f6c:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8016f70:	db35      	blt.n	8016fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016f72:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016f76:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8016f7a:	4472      	add	r2, lr
 8016f7c:	4463      	add	r3, ip
 8016f7e:	b212      	sxth	r2, r2
 8016f80:	b21b      	sxth	r3, r3
 8016f82:	429a      	cmp	r2, r3
 8016f84:	dc2b      	bgt.n	8016fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016f86:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016f8a:	fa1f f288 	uxth.w	r2, r8
 8016f8e:	4413      	add	r3, r2
 8016f90:	b29b      	uxth	r3, r3
 8016f92:	45c1      	cmp	r9, r8
 8016f94:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016f98:	fa0f fe83 	sxth.w	lr, r3
 8016f9c:	fa1f fc89 	uxth.w	ip, r9
 8016fa0:	db0f      	blt.n	8016fc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8016fa2:	eba3 030c 	sub.w	r3, r3, ip
 8016fa6:	1ac9      	subs	r1, r1, r3
 8016fa8:	b209      	sxth	r1, r1
 8016faa:	2900      	cmp	r1, #0
 8016fac:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016fb0:	dd12      	ble.n	8016fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016fb2:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8016fb6:	4604      	mov	r4, r0
 8016fb8:	9b05      	ldr	r3, [sp, #20]
 8016fba:	3d08      	subs	r5, #8
 8016fbc:	3b01      	subs	r3, #1
 8016fbe:	9305      	str	r3, [sp, #20]
 8016fc0:	e7c4      	b.n	8016f4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8016fc2:	4461      	add	r1, ip
 8016fc4:	b209      	sxth	r1, r1
 8016fc6:	4571      	cmp	r1, lr
 8016fc8:	dc3a      	bgt.n	8017040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016fca:	eba2 020c 	sub.w	r2, r2, ip
 8016fce:	b212      	sxth	r2, r2
 8016fd0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8016fd4:	2a00      	cmp	r2, #0
 8016fd6:	dcee      	bgt.n	8016fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016fd8:	b00f      	add	sp, #60	; 0x3c
 8016fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fde:	45c1      	cmp	r9, r8
 8016fe0:	db2e      	blt.n	8017040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016fe2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8016fe6:	4499      	add	r9, r3
 8016fe8:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016fec:	fa0f f989 	sxth.w	r9, r9
 8016ff0:	4498      	add	r8, r3
 8016ff2:	fa0f f888 	sxth.w	r8, r8
 8016ff6:	45c1      	cmp	r9, r8
 8016ff8:	dc22      	bgt.n	8017040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016ffa:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8016ffe:	fa1f f28c 	uxth.w	r2, ip
 8017002:	4413      	add	r3, r2
 8017004:	b29b      	uxth	r3, r3
 8017006:	45e6      	cmp	lr, ip
 8017008:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801700c:	fa1f f88e 	uxth.w	r8, lr
 8017010:	fa0f f983 	sxth.w	r9, r3
 8017014:	db0a      	blt.n	801702c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8017016:	eba3 0308 	sub.w	r3, r3, r8
 801701a:	1ac9      	subs	r1, r1, r3
 801701c:	b209      	sxth	r1, r1
 801701e:	2900      	cmp	r1, #0
 8017020:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017024:	ddd8      	ble.n	8016fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017026:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801702a:	e7c4      	b.n	8016fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801702c:	4441      	add	r1, r8
 801702e:	b209      	sxth	r1, r1
 8017030:	4549      	cmp	r1, r9
 8017032:	dc05      	bgt.n	8017040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017034:	eba2 0208 	sub.w	r2, r2, r8
 8017038:	b212      	sxth	r2, r2
 801703a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801703e:	e7c9      	b.n	8016fd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8017040:	4606      	mov	r6, r0
 8017042:	e7b9      	b.n	8016fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017044:	2c00      	cmp	r4, #0
 8017046:	f47f af7d 	bne.w	8016f44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801704a:	2e00      	cmp	r6, #0
 801704c:	f000 81e2 	beq.w	8017414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017050:	4655      	mov	r5, sl
 8017052:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8017056:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801705a:	b2b9      	uxth	r1, r7
 801705c:	9105      	str	r1, [sp, #20]
 801705e:	9805      	ldr	r0, [sp, #20]
 8017060:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017064:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017068:	4401      	add	r1, r0
 801706a:	b2b3      	uxth	r3, r6
 801706c:	b289      	uxth	r1, r1
 801706e:	441a      	add	r2, r3
 8017070:	9106      	str	r1, [sp, #24]
 8017072:	b292      	uxth	r2, r2
 8017074:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8017078:	fa0f f882 	sxth.w	r8, r2
 801707c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8017080:	9b04      	ldr	r3, [sp, #16]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d058      	beq.n	8017138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8017086:	9903      	ldr	r1, [sp, #12]
 8017088:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801708c:	f7ff fda8 	bl	8016be0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017090:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017094:	b1d8      	cbz	r0, 80170ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017096:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801709a:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801709e:	4576      	cmp	r6, lr
 80170a0:	dc26      	bgt.n	80170f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80170a2:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80170a6:	44f4      	add	ip, lr
 80170a8:	fa0f fc8c 	sxth.w	ip, ip
 80170ac:	45e0      	cmp	r8, ip
 80170ae:	db1f      	blt.n	80170f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80170b0:	428f      	cmp	r7, r1
 80170b2:	fa1f fc81 	uxth.w	ip, r1
 80170b6:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80170ba:	dc0f      	bgt.n	80170dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 80170bc:	9806      	ldr	r0, [sp, #24]
 80170be:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80170c2:	eba0 0c0c 	sub.w	ip, r0, ip
 80170c6:	eba1 010c 	sub.w	r1, r1, ip
 80170ca:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80170ce:	4620      	mov	r0, r4
 80170d0:	9904      	ldr	r1, [sp, #16]
 80170d2:	3d08      	subs	r5, #8
 80170d4:	3901      	subs	r1, #1
 80170d6:	9104      	str	r1, [sp, #16]
 80170d8:	4604      	mov	r4, r0
 80170da:	e7cf      	b.n	801707c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 80170dc:	4461      	add	r1, ip
 80170de:	b209      	sxth	r1, r1
 80170e0:	4549      	cmp	r1, r9
 80170e2:	dcf5      	bgt.n	80170d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80170e4:	9905      	ldr	r1, [sp, #20]
 80170e6:	eba1 0c0c 	sub.w	ip, r1, ip
 80170ea:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80170ee:	e7ee      	b.n	80170ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80170f0:	428f      	cmp	r7, r1
 80170f2:	dced      	bgt.n	80170d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80170f4:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80170f8:	4461      	add	r1, ip
 80170fa:	b209      	sxth	r1, r1
 80170fc:	4589      	cmp	r9, r1
 80170fe:	dbe7      	blt.n	80170d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017100:	4576      	cmp	r6, lr
 8017102:	fa1f fc8e 	uxth.w	ip, lr
 8017106:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801710a:	dc08      	bgt.n	801711e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801710c:	eba2 0c0c 	sub.w	ip, r2, ip
 8017110:	eba1 010c 	sub.w	r1, r1, ip
 8017114:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8017118:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801711c:	e7d7      	b.n	80170ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801711e:	4461      	add	r1, ip
 8017120:	b209      	sxth	r1, r1
 8017122:	4588      	cmp	r8, r1
 8017124:	dbd4      	blt.n	80170d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017126:	eba3 0c0c 	sub.w	ip, r3, ip
 801712a:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801712e:	e7ce      	b.n	80170ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017130:	2004f626 	.word	0x2004f626
 8017134:	2004f624 	.word	0x2004f624
 8017138:	2c00      	cmp	r4, #0
 801713a:	f000 816b 	beq.w	8017414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801713e:	9b02      	ldr	r3, [sp, #8]
 8017140:	3301      	adds	r3, #1
 8017142:	f000 8167 	beq.w	8017414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017146:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801714a:	4621      	mov	r1, r4
 801714c:	9803      	ldr	r0, [sp, #12]
 801714e:	f7ff fdb9 	bl	8016cc4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017152:	b120      	cbz	r0, 801715e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8017154:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017158:	9801      	ldr	r0, [sp, #4]
 801715a:	f7ff fea9 	bl	8016eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801715e:	9903      	ldr	r1, [sp, #12]
 8017160:	4620      	mov	r0, r4
 8017162:	f7ff fd3d 	bl	8016be0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017166:	2800      	cmp	r0, #0
 8017168:	f000 809b 	beq.w	80172a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801716c:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8017170:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8017174:	b281      	uxth	r1, r0
 8017176:	eb01 0c03 	add.w	ip, r1, r3
 801717a:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801717e:	fa1f f98c 	uxth.w	r9, ip
 8017182:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8017186:	9309      	str	r3, [sp, #36]	; 0x24
 8017188:	b2ab      	uxth	r3, r5
 801718a:	eb03 040c 	add.w	r4, r3, ip
 801718e:	b2a4      	uxth	r4, r4
 8017190:	9405      	str	r4, [sp, #20]
 8017192:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8017196:	4285      	cmp	r5, r0
 8017198:	9404      	str	r4, [sp, #16]
 801719a:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801719e:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 80171a2:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 80171a6:	f340 809a 	ble.w	80172de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 80171aa:	1a5b      	subs	r3, r3, r1
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	4596      	cmp	lr, r2
 80171b0:	fa0f f589 	sxth.w	r5, r9
 80171b4:	b21e      	sxth	r6, r3
 80171b6:	dd2e      	ble.n	8017216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 80171b8:	9f02      	ldr	r7, [sp, #8]
 80171ba:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80171be:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80171c2:	9f04      	ldr	r7, [sp, #16]
 80171c4:	fa1f fe8e 	uxth.w	lr, lr
 80171c8:	1b7f      	subs	r7, r7, r5
 80171ca:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 80171ce:	b292      	uxth	r2, r2
 80171d0:	ebae 0102 	sub.w	r1, lr, r2
 80171d4:	4486      	add	lr, r0
 80171d6:	442a      	add	r2, r5
 80171d8:	b289      	uxth	r1, r1
 80171da:	fa0f fe8e 	sxth.w	lr, lr
 80171de:	b212      	sxth	r2, r2
 80171e0:	b20c      	sxth	r4, r1
 80171e2:	ebae 0202 	sub.w	r2, lr, r2
 80171e6:	4367      	muls	r7, r4
 80171e8:	4372      	muls	r2, r6
 80171ea:	4297      	cmp	r7, r2
 80171ec:	db09      	blt.n	8017202 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 80171ee:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 80171f2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80171f6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80171fa:	449c      	add	ip, r3
 80171fc:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017200:	e680      	b.n	8016f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017202:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8017206:	4401      	add	r1, r0
 8017208:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801720c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017210:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017214:	e676      	b.n	8016f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017216:	9f04      	ldr	r7, [sp, #16]
 8017218:	42bd      	cmp	r5, r7
 801721a:	da27      	bge.n	801726c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801721c:	9902      	ldr	r1, [sp, #8]
 801721e:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017222:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8017226:	eb04 010e 	add.w	r1, r4, lr
 801722a:	fa1f f881 	uxth.w	r8, r1
 801722e:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8017232:	fa0f f988 	sxth.w	r9, r8
 8017236:	4411      	add	r1, r2
 8017238:	eba1 0108 	sub.w	r1, r1, r8
 801723c:	b289      	uxth	r1, r1
 801723e:	fa0f f881 	sxth.w	r8, r1
 8017242:	eba2 020e 	sub.w	r2, r2, lr
 8017246:	1b7f      	subs	r7, r7, r5
 8017248:	4372      	muls	r2, r6
 801724a:	fb08 f707 	mul.w	r7, r8, r7
 801724e:	42ba      	cmp	r2, r7
 8017250:	dc06      	bgt.n	8017260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017252:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8017256:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801725a:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801725e:	e7ca      	b.n	80171f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017260:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8017264:	4421      	add	r1, r4
 8017266:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801726a:	e64b      	b.n	8016f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801726c:	9d05      	ldr	r5, [sp, #20]
 801726e:	2c06      	cmp	r4, #6
 8017270:	eba9 0505 	sub.w	r5, r9, r5
 8017274:	b2ad      	uxth	r5, r5
 8017276:	fa0f fe85 	sxth.w	lr, r5
 801727a:	d818      	bhi.n	80172ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801727c:	9b04      	ldr	r3, [sp, #16]
 801727e:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8017282:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8017286:	1c63      	adds	r3, r4, #1
 8017288:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801728c:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8017290:	9b01      	ldr	r3, [sp, #4]
 8017292:	9d01      	ldr	r5, [sp, #4]
 8017294:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017298:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801729c:	805a      	strh	r2, [r3, #2]
 801729e:	809e      	strh	r6, [r3, #4]
 80172a0:	80d9      	strh	r1, [r3, #6]
 80172a2:	9b02      	ldr	r3, [sp, #8]
 80172a4:	f1aa 0a08 	sub.w	sl, sl, #8
 80172a8:	3b01      	subs	r3, #1
 80172aa:	9302      	str	r3, [sp, #8]
 80172ac:	e747      	b.n	801713e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 80172ae:	9a02      	ldr	r2, [sp, #8]
 80172b0:	45b6      	cmp	lr, r6
 80172b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80172b6:	db0d      	blt.n	80172d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 80172b8:	449c      	add	ip, r3
 80172ba:	fa1f fc8c 	uxth.w	ip, ip
 80172be:	445a      	add	r2, fp
 80172c0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80172c4:	448c      	add	ip, r1
 80172c6:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 80172ca:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 80172ce:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 80172d2:	e617      	b.n	8016f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80172d4:	445a      	add	r2, fp
 80172d6:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 80172da:	44ac      	add	ip, r5
 80172dc:	e78e      	b.n	80171fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80172de:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80172e2:	fa1f f18e 	uxth.w	r1, lr
 80172e6:	eb01 0806 	add.w	r8, r1, r6
 80172ea:	b293      	uxth	r3, r2
 80172ec:	fa1f f888 	uxth.w	r8, r8
 80172f0:	9306      	str	r3, [sp, #24]
 80172f2:	fa0f f388 	sxth.w	r3, r8
 80172f6:	9307      	str	r3, [sp, #28]
 80172f8:	9f06      	ldr	r7, [sp, #24]
 80172fa:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 80172fe:	4596      	cmp	lr, r2
 8017300:	443b      	add	r3, r7
 8017302:	b29b      	uxth	r3, r3
 8017304:	9308      	str	r3, [sp, #32]
 8017306:	da25      	bge.n	8017354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8017308:	9905      	ldr	r1, [sp, #20]
 801730a:	eba3 0308 	sub.w	r3, r3, r8
 801730e:	eba9 0401 	sub.w	r4, r9, r1
 8017312:	b2a4      	uxth	r4, r4
 8017314:	b29b      	uxth	r3, r3
 8017316:	fa0f f984 	sxth.w	r9, r4
 801731a:	b219      	sxth	r1, r3
 801731c:	eba2 020e 	sub.w	r2, r2, lr
 8017320:	1b40      	subs	r0, r0, r5
 8017322:	fb09 f202 	mul.w	r2, r9, r2
 8017326:	4348      	muls	r0, r1
 8017328:	4282      	cmp	r2, r0
 801732a:	9a02      	ldr	r2, [sp, #8]
 801732c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017330:	445a      	add	r2, fp
 8017332:	dc06      	bgt.n	8017342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8017334:	9b07      	ldr	r3, [sp, #28]
 8017336:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801733a:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801733e:	44a4      	add	ip, r4
 8017340:	e75c      	b.n	80171fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017342:	9904      	ldr	r1, [sp, #16]
 8017344:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8017348:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801734c:	4433      	add	r3, r6
 801734e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017352:	e5d7      	b.n	8016f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017354:	9f06      	ldr	r7, [sp, #24]
 8017356:	9b04      	ldr	r3, [sp, #16]
 8017358:	1bc9      	subs	r1, r1, r7
 801735a:	fa0f f789 	sxth.w	r7, r9
 801735e:	b289      	uxth	r1, r1
 8017360:	429f      	cmp	r7, r3
 8017362:	fa0f fe81 	sxth.w	lr, r1
 8017366:	dd23      	ble.n	80173b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8017368:	9a05      	ldr	r2, [sp, #20]
 801736a:	1b40      	subs	r0, r0, r5
 801736c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017370:	eba9 0202 	sub.w	r2, r9, r2
 8017374:	9d07      	ldr	r5, [sp, #28]
 8017376:	b292      	uxth	r2, r2
 8017378:	eba5 0a03 	sub.w	sl, r5, r3
 801737c:	b214      	sxth	r4, r2
 801737e:	fb0e f000 	mul.w	r0, lr, r0
 8017382:	fb04 fa0a 	mul.w	sl, r4, sl
 8017386:	9b02      	ldr	r3, [sp, #8]
 8017388:	4550      	cmp	r0, sl
 801738a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801738e:	445b      	add	r3, fp
 8017390:	db03      	blt.n	801739a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 8017392:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8017396:	4494      	add	ip, r2
 8017398:	e730      	b.n	80171fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801739a:	9a04      	ldr	r2, [sp, #16]
 801739c:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 80173a0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80173a4:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80173a8:	4431      	add	r1, r6
 80173aa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80173ae:	e75a      	b.n	8017266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 80173b0:	9b08      	ldr	r3, [sp, #32]
 80173b2:	2c06      	cmp	r4, #6
 80173b4:	eba3 0308 	sub.w	r3, r3, r8
 80173b8:	b29b      	uxth	r3, r3
 80173ba:	b21d      	sxth	r5, r3
 80173bc:	d813      	bhi.n	80173e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 80173be:	9b07      	ldr	r3, [sp, #28]
 80173c0:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 80173c4:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80173c8:	1c63      	adds	r3, r4, #1
 80173ca:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80173ce:	9b01      	ldr	r3, [sp, #4]
 80173d0:	9901      	ldr	r1, [sp, #4]
 80173d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80173d6:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 80173da:	805a      	strh	r2, [r3, #2]
 80173dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173de:	f8a3 e006 	strh.w	lr, [r3, #6]
 80173e2:	809a      	strh	r2, [r3, #4]
 80173e4:	e75d      	b.n	80172a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 80173e6:	9802      	ldr	r0, [sp, #8]
 80173e8:	4575      	cmp	r5, lr
 80173ea:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80173ee:	db0d      	blt.n	801740c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 80173f0:	4431      	add	r1, r6
 80173f2:	9b06      	ldr	r3, [sp, #24]
 80173f4:	b289      	uxth	r1, r1
 80173f6:	4458      	add	r0, fp
 80173f8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80173fc:	4419      	add	r1, r3
 80173fe:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017402:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8017406:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801740a:	e57b      	b.n	8016f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801740c:	4458      	add	r0, fp
 801740e:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8017412:	e79b      	b.n	801734c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8017414:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8017418:	2e07      	cmp	r6, #7
 801741a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801741e:	d812      	bhi.n	8017446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56e>
 8017420:	1c75      	adds	r5, r6, #1
 8017422:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8017426:	9d01      	ldr	r5, [sp, #4]
 8017428:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801742c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8017430:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8017434:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8017438:	442c      	add	r4, r5
 801743a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801743e:	8061      	strh	r1, [r4, #2]
 8017440:	80a2      	strh	r2, [r4, #4]
 8017442:	80e3      	strh	r3, [r4, #6]
 8017444:	e5c8      	b.n	8016fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017446:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801744a:	f04f 37ff 	mov.w	r7, #4294967295
 801744e:	2500      	movs	r5, #0
 8017450:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017454:	3e01      	subs	r6, #1
 8017456:	445c      	add	r4, fp
 8017458:	9305      	str	r3, [sp, #20]
 801745a:	1e72      	subs	r2, r6, #1
 801745c:	4691      	mov	r9, r2
 801745e:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8017462:	9302      	str	r3, [sp, #8]
 8017464:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8017468:	9304      	str	r3, [sp, #16]
 801746a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801746e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8017472:	bf16      	itet	ne
 8017474:	9905      	ldrne	r1, [sp, #20]
 8017476:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801747a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801747e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017482:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8017486:	6818      	ldr	r0, [r3, #0]
 8017488:	fb18 f801 	smulbb	r8, r8, r1
 801748c:	6859      	ldr	r1, [r3, #4]
 801748e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017492:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017496:	4671      	mov	r1, lr
 8017498:	a80c      	add	r0, sp, #48	; 0x30
 801749a:	9207      	str	r2, [sp, #28]
 801749c:	9306      	str	r3, [sp, #24]
 801749e:	f7ff fc37 	bl	8016d10 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80174a2:	f04f 0c08 	mov.w	ip, #8
 80174a6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80174aa:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80174ae:	9b04      	ldr	r3, [sp, #16]
 80174b0:	9a02      	ldr	r2, [sp, #8]
 80174b2:	fb10 f001 	smulbb	r0, r0, r1
 80174b6:	fb02 8803 	mla	r8, r2, r3, r8
 80174ba:	eba0 0108 	sub.w	r1, r0, r8
 80174be:	fb90 f0fc 	sdiv	r0, r0, ip
 80174c2:	4288      	cmp	r0, r1
 80174c4:	dc20      	bgt.n	8017508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 80174c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80174ca:	4551      	cmp	r1, sl
 80174cc:	da03      	bge.n	80174d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 80174ce:	b1d9      	cbz	r1, 8017508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 80174d0:	468a      	mov	sl, r1
 80174d2:	464f      	mov	r7, r9
 80174d4:	4635      	mov	r5, r6
 80174d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80174da:	f119 0f02 	cmn.w	r9, #2
 80174de:	d1c6      	bne.n	801746e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 80174e0:	4616      	mov	r6, r2
 80174e2:	3201      	adds	r2, #1
 80174e4:	f1a4 0408 	sub.w	r4, r4, #8
 80174e8:	d1b7      	bne.n	801745a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x582>
 80174ea:	9b01      	ldr	r3, [sp, #4]
 80174ec:	b2ac      	uxth	r4, r5
 80174ee:	00ed      	lsls	r5, r5, #3
 80174f0:	1958      	adds	r0, r3, r5
 80174f2:	1c7b      	adds	r3, r7, #1
 80174f4:	d10b      	bne.n	801750e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 80174f6:	4601      	mov	r1, r0
 80174f8:	9803      	ldr	r0, [sp, #12]
 80174fa:	f7ff fc09 	bl	8016d10 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80174fe:	4621      	mov	r1, r4
 8017500:	9801      	ldr	r0, [sp, #4]
 8017502:	f7ff fcd5 	bl	8016eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017506:	e4fd      	b.n	8016f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017508:	464f      	mov	r7, r9
 801750a:	4635      	mov	r5, r6
 801750c:	e7ed      	b.n	80174ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 801750e:	9b01      	ldr	r3, [sp, #4]
 8017510:	00ff      	lsls	r7, r7, #3
 8017512:	19d9      	adds	r1, r3, r7
 8017514:	f7ff fbfc 	bl	8016d10 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017518:	9b03      	ldr	r3, [sp, #12]
 801751a:	445f      	add	r7, fp
 801751c:	cb03      	ldmia	r3!, {r0, r1}
 801751e:	445d      	add	r5, fp
 8017520:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8017524:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8017528:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801752c:	9b03      	ldr	r3, [sp, #12]
 801752e:	6869      	ldr	r1, [r5, #4]
 8017530:	c303      	stmia	r3!, {r0, r1}
 8017532:	e7e4      	b.n	80174fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

08017534 <_ZN8touchgfx11Application10invalidateEv>:
 8017534:	2100      	movs	r1, #0
 8017536:	4b09      	ldr	r3, [pc, #36]	; (801755c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8017538:	b082      	sub	sp, #8
 801753a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801753e:	4b08      	ldr	r3, [pc, #32]	; (8017560 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8017540:	9100      	str	r1, [sp, #0]
 8017542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017546:	f8ad 2004 	strh.w	r2, [sp, #4]
 801754a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801754e:	ab02      	add	r3, sp, #8
 8017550:	e913 0006 	ldmdb	r3, {r1, r2}
 8017554:	b002      	add	sp, #8
 8017556:	f7ff bcbf 	b.w	8016ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801755a:	bf00      	nop
 801755c:	2004f624 	.word	0x2004f624
 8017560:	2004f626 	.word	0x2004f626

08017564 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8017564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017568:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801756c:	b09b      	sub	sp, #108	; 0x6c
 801756e:	4604      	mov	r4, r0
 8017570:	4630      	mov	r0, r6
 8017572:	f7fb fd10 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017576:	4605      	mov	r5, r0
 8017578:	b940      	cbnz	r0, 801758c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801757a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801757e:	4620      	mov	r0, r4
 8017580:	f7ff fcaa 	bl	8016ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017584:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8017588:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801758c:	4bc9      	ldr	r3, [pc, #804]	; (80178b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d03e      	beq.n	8017612 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8017594:	4dc8      	ldr	r5, [pc, #800]	; (80178b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8017596:	4628      	mov	r0, r5
 8017598:	f7fb fcfd 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 801759c:	4606      	mov	r6, r0
 801759e:	2800      	cmp	r0, #0
 80175a0:	d137      	bne.n	8017612 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80175a2:	4628      	mov	r0, r5
 80175a4:	f7ff f9e6 	bl	8016974 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80175a8:	6829      	ldr	r1, [r5, #0]
 80175aa:	686a      	ldr	r2, [r5, #4]
 80175ac:	4620      	mov	r0, r4
 80175ae:	f7ff fc93 	bl	8016ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80175b2:	802e      	strh	r6, [r5, #0]
 80175b4:	806e      	strh	r6, [r5, #2]
 80175b6:	80ae      	strh	r6, [r5, #4]
 80175b8:	80ee      	strh	r6, [r5, #6]
 80175ba:	ae09      	add	r6, sp, #36	; 0x24
 80175bc:	4630      	mov	r0, r6
 80175be:	f7ff fc27 	bl	8016e10 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80175c2:	4abe      	ldr	r2, [pc, #760]	; (80178bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80175c4:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80175c8:	8815      	ldrh	r5, [r2, #0]
 80175ca:	9202      	str	r2, [sp, #8]
 80175cc:	462b      	mov	r3, r5
 80175ce:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80175d2:	429f      	cmp	r7, r3
 80175d4:	d924      	bls.n	8017620 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 80175d6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80175da:	2907      	cmp	r1, #7
 80175dc:	d816      	bhi.n	801760c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 80175de:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80175e2:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 80175e6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80175ea:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80175ee:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 80175f2:	1c4a      	adds	r2, r1, #1
 80175f4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80175f8:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80175fc:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8017600:	f8a2 9002 	strh.w	r9, [r2, #2]
 8017604:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017608:	f8a2 c006 	strh.w	ip, [r2, #6]
 801760c:	3301      	adds	r3, #1
 801760e:	b29b      	uxth	r3, r3
 8017610:	e7df      	b.n	80175d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8017612:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017616:	2b00      	cmp	r3, #0
 8017618:	d1cf      	bne.n	80175ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801761a:	b01b      	add	sp, #108	; 0x6c
 801761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017620:	462f      	mov	r7, r5
 8017622:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8017626:	42bb      	cmp	r3, r7
 8017628:	d90b      	bls.n	8017642 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801762a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801762e:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8017632:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8017636:	4620      	mov	r0, r4
 8017638:	3701      	adds	r7, #1
 801763a:	f7ff fc4d 	bl	8016ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801763e:	b2bf      	uxth	r7, r7
 8017640:	e7ef      	b.n	8017622 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8017642:	4a9f      	ldr	r2, [pc, #636]	; (80178c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8017644:	6813      	ldr	r3, [r2, #0]
 8017646:	4690      	mov	r8, r2
 8017648:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801764c:	2b01      	cmp	r3, #1
 801764e:	f040 80e6 	bne.w	801781e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 8017652:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8017656:	4629      	mov	r1, r5
 8017658:	2500      	movs	r5, #0
 801765a:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801765e:	33aa      	adds	r3, #170	; 0xaa
 8017660:	428f      	cmp	r7, r1
 8017662:	f103 0308 	add.w	r3, r3, #8
 8017666:	dd0a      	ble.n	801767e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8017668:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801766c:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8017670:	3101      	adds	r1, #1
 8017672:	4402      	add	r2, r0
 8017674:	b212      	sxth	r2, r2
 8017676:	4295      	cmp	r5, r2
 8017678:	bfb8      	it	lt
 801767a:	4615      	movlt	r5, r2
 801767c:	e7f0      	b.n	8017660 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801767e:	4b91      	ldr	r3, [pc, #580]	; (80178c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8017680:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80178c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 8017684:	881b      	ldrh	r3, [r3, #0]
 8017686:	46d8      	mov	r8, fp
 8017688:	2b0f      	cmp	r3, #15
 801768a:	bf88      	it	hi
 801768c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8017690:	f04f 0300 	mov.w	r3, #0
 8017694:	bf98      	it	ls
 8017696:	f04f 0a01 	movls.w	sl, #1
 801769a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801769e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80176a2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80176a6:	4438      	add	r0, r7
 80176a8:	b207      	sxth	r7, r0
 80176aa:	f8db 0000 	ldr.w	r0, [fp]
 80176ae:	42bd      	cmp	r5, r7
 80176b0:	6803      	ldr	r3, [r0, #0]
 80176b2:	f340 8084 	ble.w	80177be <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80176b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80176ba:	4798      	blx	r3
 80176bc:	eb07 030a 	add.w	r3, r7, sl
 80176c0:	4298      	cmp	r0, r3
 80176c2:	da07      	bge.n	80176d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 80176c4:	4285      	cmp	r5, r0
 80176c6:	dd05      	ble.n	80176d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 80176c8:	4287      	cmp	r7, r0
 80176ca:	dd6d      	ble.n	80177a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80176cc:	2f00      	cmp	r7, #0
 80176ce:	dd6b      	ble.n	80177a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80176d0:	4628      	mov	r0, r5
 80176d2:	e004      	b.n	80176de <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 80176d4:	4287      	cmp	r7, r0
 80176d6:	dcfb      	bgt.n	80176d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80176d8:	42a8      	cmp	r0, r5
 80176da:	bfa8      	it	ge
 80176dc:	4628      	movge	r0, r5
 80176de:	2200      	movs	r2, #0
 80176e0:	4b79      	ldr	r3, [pc, #484]	; (80178c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 80176e2:	1bc0      	subs	r0, r0, r7
 80176e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176e8:	f8ad 7016 	strh.w	r7, [sp, #22]
 80176ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80176f0:	9b02      	ldr	r3, [sp, #8]
 80176f2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80176f6:	881f      	ldrh	r7, [r3, #0]
 80176f8:	f8ad 001a 	strh.w	r0, [sp, #26]
 80176fc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017700:	42bb      	cmp	r3, r7
 8017702:	d9cc      	bls.n	801769e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8017704:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8017708:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801770c:	ab07      	add	r3, sp, #28
 801770e:	6851      	ldr	r1, [r2, #4]
 8017710:	c303      	stmia	r3!, {r0, r1}
 8017712:	a905      	add	r1, sp, #20
 8017714:	a807      	add	r0, sp, #28
 8017716:	f7ff fa63 	bl	8016be0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801771a:	2800      	cmp	r0, #0
 801771c:	d04c      	beq.n	80177b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801771e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8017722:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8017726:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801772a:	4686      	mov	lr, r0
 801772c:	4290      	cmp	r0, r2
 801772e:	4448      	add	r0, r9
 8017730:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8017734:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8017738:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801773c:	bfb8      	it	lt
 801773e:	4696      	movlt	lr, r2
 8017740:	444a      	add	r2, r9
 8017742:	4299      	cmp	r1, r3
 8017744:	b280      	uxth	r0, r0
 8017746:	b292      	uxth	r2, r2
 8017748:	468c      	mov	ip, r1
 801774a:	9303      	str	r3, [sp, #12]
 801774c:	bfb8      	it	lt
 801774e:	469c      	movlt	ip, r3
 8017750:	fa0f f982 	sxth.w	r9, r2
 8017754:	b203      	sxth	r3, r0
 8017756:	454b      	cmp	r3, r9
 8017758:	bfb8      	it	lt
 801775a:	4602      	movlt	r2, r0
 801775c:	eba2 020e 	sub.w	r2, r2, lr
 8017760:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017764:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8017768:	9b03      	ldr	r3, [sp, #12]
 801776a:	4411      	add	r1, r2
 801776c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017770:	b289      	uxth	r1, r1
 8017772:	4413      	add	r3, r2
 8017774:	b29b      	uxth	r3, r3
 8017776:	b208      	sxth	r0, r1
 8017778:	b21a      	sxth	r2, r3
 801777a:	4290      	cmp	r0, r2
 801777c:	bfb8      	it	lt
 801777e:	460b      	movlt	r3, r1
 8017780:	eba3 030c 	sub.w	r3, r3, ip
 8017784:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017788:	f8ad e01c 	strh.w	lr, [sp, #28]
 801778c:	f8ad c01e 	strh.w	ip, [sp, #30]
 8017790:	a807      	add	r0, sp, #28
 8017792:	f7fb fc00 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017796:	b920      	cbnz	r0, 80177a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8017798:	6823      	ldr	r3, [r4, #0]
 801779a:	a907      	add	r1, sp, #28
 801779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801779e:	4620      	mov	r0, r4
 80177a0:	4798      	blx	r3
 80177a2:	3701      	adds	r7, #1
 80177a4:	b2bf      	uxth	r7, r7
 80177a6:	e7a9      	b.n	80176fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 80177a8:	f8d8 0000 	ldr.w	r0, [r8]
 80177ac:	2101      	movs	r1, #1
 80177ae:	6803      	ldr	r3, [r0, #0]
 80177b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80177b4:	4798      	blx	r3
 80177b6:	e772      	b.n	801769e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80177b8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80177bc:	e7e8      	b.n	8017790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 80177be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177c0:	4798      	blx	r3
 80177c2:	4b42      	ldr	r3, [pc, #264]	; (80178cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 80177c4:	781b      	ldrb	r3, [r3, #0]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	f43f af27 	beq.w	801761a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80177cc:	2300      	movs	r3, #0
 80177ce:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 80177d2:	9b02      	ldr	r3, [sp, #8]
 80177d4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80177d8:	881b      	ldrh	r3, [r3, #0]
 80177da:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80177de:	429d      	cmp	r5, r3
 80177e0:	f67f af1b 	bls.w	801761a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80177e4:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 80177e8:	2907      	cmp	r1, #7
 80177ea:	d815      	bhi.n	8017818 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 80177ec:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80177f0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80177f4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80177f8:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80177fc:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8017800:	1c4a      	adds	r2, r1, #1
 8017802:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8017806:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801780a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801780e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8017812:	f8a2 c004 	strh.w	ip, [r2, #4]
 8017816:	80d7      	strh	r7, [r2, #6]
 8017818:	3301      	adds	r3, #1
 801781a:	b29b      	uxth	r3, r3
 801781c:	e7df      	b.n	80177de <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 801781e:	2b02      	cmp	r3, #2
 8017820:	f040 8136 	bne.w	8017a90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8017824:	4b2a      	ldr	r3, [pc, #168]	; (80178d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 8017826:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	2b01      	cmp	r3, #1
 801782e:	f000 809c 	beq.w	801796a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8017832:	9b02      	ldr	r3, [sp, #8]
 8017834:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8017838:	f8b3 b000 	ldrh.w	fp, [r3]
 801783c:	f10b 0b01 	add.w	fp, fp, #1
 8017840:	fa1f fb8b 	uxth.w	fp, fp
 8017844:	2a00      	cmp	r2, #0
 8017846:	d0bc      	beq.n	80177c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8017848:	4659      	mov	r1, fp
 801784a:	f04f 0800 	mov.w	r8, #0
 801784e:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8017852:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8017856:	441d      	add	r5, r3
 8017858:	b22d      	sxth	r5, r5
 801785a:	b28b      	uxth	r3, r1
 801785c:	429a      	cmp	r2, r3
 801785e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8017862:	f240 80c1 	bls.w	80179e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 8017866:	4427      	add	r7, r4
 8017868:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801786c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8017870:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8017874:	4608      	mov	r0, r1
 8017876:	4563      	cmp	r3, ip
 8017878:	f340 80a3 	ble.w	80179c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801787c:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8017880:	4465      	add	r5, ip
 8017882:	b22d      	sxth	r5, r5
 8017884:	429d      	cmp	r5, r3
 8017886:	bfa8      	it	ge
 8017888:	461d      	movge	r5, r3
 801788a:	3101      	adds	r1, #1
 801788c:	4680      	mov	r8, r0
 801788e:	e7e4      	b.n	801785a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8017890:	d10b      	bne.n	80178aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 8017892:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8017896:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801789a:	458c      	cmp	ip, r1
 801789c:	bfb4      	ite	lt
 801789e:	469c      	movlt	ip, r3
 80178a0:	46bc      	movge	ip, r7
 80178a2:	4572      	cmp	r2, lr
 80178a4:	bfb8      	it	lt
 80178a6:	4672      	movlt	r2, lr
 80178a8:	e088      	b.n	80179bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80178aa:	428a      	cmp	r2, r1
 80178ac:	bfb8      	it	lt
 80178ae:	460a      	movlt	r2, r1
 80178b0:	46bc      	mov	ip, r7
 80178b2:	e083      	b.n	80179bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80178b4:	2004f670 	.word	0x2004f670
 80178b8:	2004f67c 	.word	0x2004f67c
 80178bc:	20025820 	.word	0x20025820
 80178c0:	2004f630 	.word	0x2004f630
 80178c4:	2004f626 	.word	0x2004f626
 80178c8:	2004f624 	.word	0x2004f624
 80178cc:	2004f62e 	.word	0x2004f62e
 80178d0:	2004f628 	.word	0x2004f628
 80178d4:	1961      	adds	r1, r4, r5
 80178d6:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80178da:	ab07      	add	r3, sp, #28
 80178dc:	6849      	ldr	r1, [r1, #4]
 80178de:	c303      	stmia	r3!, {r0, r1}
 80178e0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80178e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80178e8:	2b13      	cmp	r3, #19
 80178ea:	bfd8      	it	le
 80178ec:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80178f0:	440b      	add	r3, r1
 80178f2:	1a9b      	subs	r3, r3, r2
 80178f4:	a807      	add	r0, sp, #28
 80178f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80178fa:	f8ad 201c 	strh.w	r2, [sp, #28]
 80178fe:	f7ff f853 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017902:	a807      	add	r0, sp, #28
 8017904:	f7fb fb47 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017908:	bb78      	cbnz	r0, 801796a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801790a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801790e:	f8d8 0000 	ldr.w	r0, [r8]
 8017912:	f1bc 0f14 	cmp.w	ip, #20
 8017916:	bfa8      	it	ge
 8017918:	f04f 0c14 	movge.w	ip, #20
 801791c:	f8d0 e000 	ldr.w	lr, [r0]
 8017920:	fa1f fc8c 	uxth.w	ip, ip
 8017924:	f8cd c000 	str.w	ip, [sp]
 8017928:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801792c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017930:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017934:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017938:	47d0      	blx	sl
 801793a:	4682      	mov	sl, r0
 801793c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017940:	a807      	add	r0, sp, #28
 8017942:	f7ff f817 	bl	8016974 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017946:	6823      	ldr	r3, [r4, #0]
 8017948:	4620      	mov	r0, r4
 801794a:	4425      	add	r5, r4
 801794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801794e:	a907      	add	r1, sp, #28
 8017950:	4798      	blx	r3
 8017952:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8017956:	eba0 000a 	sub.w	r0, r0, sl
 801795a:	b200      	sxth	r0, r0
 801795c:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8017960:	b918      	cbnz	r0, 801796a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8017962:	b2b9      	uxth	r1, r7
 8017964:	4648      	mov	r0, r9
 8017966:	f7ff faa3 	bl	8016eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801796a:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801796e:	f1bb 0f00 	cmp.w	fp, #0
 8017972:	f43f af26 	beq.w	80177c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8017976:	2700      	movs	r7, #0
 8017978:	9b02      	ldr	r3, [sp, #8]
 801797a:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801797e:	881b      	ldrh	r3, [r3, #0]
 8017980:	3301      	adds	r3, #1
 8017982:	b29b      	uxth	r3, r3
 8017984:	b299      	uxth	r1, r3
 8017986:	458b      	cmp	fp, r1
 8017988:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 801798c:	d9a2      	bls.n	80178d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 801798e:	4425      	add	r5, r4
 8017990:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8017994:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8017998:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801799c:	4408      	add	r0, r1
 801799e:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80179a2:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80179a6:	b200      	sxth	r0, r0
 80179a8:	4471      	add	r1, lr
 80179aa:	b209      	sxth	r1, r1
 80179ac:	4288      	cmp	r0, r1
 80179ae:	469c      	mov	ip, r3
 80179b0:	f6bf af6e 	bge.w	8017890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 80179b4:	4586      	cmp	lr, r0
 80179b6:	4672      	mov	r2, lr
 80179b8:	bfb8      	it	lt
 80179ba:	4602      	movlt	r2, r0
 80179bc:	3301      	adds	r3, #1
 80179be:	4667      	mov	r7, ip
 80179c0:	e7e0      	b.n	8017984 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 80179c2:	d10c      	bne.n	80179de <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 80179c4:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 80179c8:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 80179cc:	4287      	cmp	r7, r0
 80179ce:	bfb4      	ite	lt
 80179d0:	4608      	movlt	r0, r1
 80179d2:	4640      	movge	r0, r8
 80179d4:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 80179d8:	443b      	add	r3, r7
 80179da:	b21b      	sxth	r3, r3
 80179dc:	e752      	b.n	8017884 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80179de:	4565      	cmp	r5, ip
 80179e0:	bfa8      	it	ge
 80179e2:	4665      	movge	r5, ip
 80179e4:	4640      	mov	r0, r8
 80179e6:	e750      	b.n	801788a <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 80179e8:	eb09 0007 	add.w	r0, r9, r7
 80179ec:	4427      	add	r7, r4
 80179ee:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 80179f2:	9203      	str	r2, [sp, #12]
 80179f4:	f1ba 0f13 	cmp.w	sl, #19
 80179f8:	bfde      	ittt	le
 80179fa:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 80179fe:	4455      	addle	r5, sl
 8017a00:	b22d      	sxthle	r5, r5
 8017a02:	f7fb fac8 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a06:	9a03      	ldr	r2, [sp, #12]
 8017a08:	2800      	cmp	r0, #0
 8017a0a:	f47f af1b 	bne.w	8017844 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 8017a0e:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8017a12:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017a16:	1aad      	subs	r5, r5, r2
 8017a18:	2d14      	cmp	r5, #20
 8017a1a:	bfa8      	it	ge
 8017a1c:	2514      	movge	r5, #20
 8017a1e:	4828      	ldr	r0, [pc, #160]	; (8017ac0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8017a20:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8017a24:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8017a28:	6800      	ldr	r0, [r0, #0]
 8017a2a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017a2e:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017a32:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017a36:	f8d0 c000 	ldr.w	ip, [r0]
 8017a3a:	b2ad      	uxth	r5, r5
 8017a3c:	fa1f fa8a 	uxth.w	sl, sl
 8017a40:	4555      	cmp	r5, sl
 8017a42:	bf94      	ite	ls
 8017a44:	9500      	strls	r5, [sp, #0]
 8017a46:	f8cd a000 	strhi.w	sl, [sp]
 8017a4a:	b292      	uxth	r2, r2
 8017a4c:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8017a50:	b29b      	uxth	r3, r3
 8017a52:	b289      	uxth	r1, r1
 8017a54:	47a8      	blx	r5
 8017a56:	6823      	ldr	r3, [r4, #0]
 8017a58:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a5e:	a907      	add	r1, sp, #28
 8017a60:	4620      	mov	r0, r4
 8017a62:	4798      	blx	r3
 8017a64:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017a68:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8017a6c:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8017a70:	1a5b      	subs	r3, r3, r1
 8017a72:	440a      	add	r2, r1
 8017a74:	b21b      	sxth	r3, r3
 8017a76:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8017a7a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	f47f aed7 	bne.w	8017832 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8017a84:	fa1f f188 	uxth.w	r1, r8
 8017a88:	4648      	mov	r0, r9
 8017a8a:	f7ff fa11 	bl	8016eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017a8e:	e6d0      	b.n	8017832 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8017a90:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017a94:	42ab      	cmp	r3, r5
 8017a96:	f67f ae94 	bls.w	80177c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8017a9a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8017a9e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017aa2:	ab07      	add	r3, sp, #28
 8017aa4:	6851      	ldr	r1, [r2, #4]
 8017aa6:	c303      	stmia	r3!, {r0, r1}
 8017aa8:	a807      	add	r0, sp, #28
 8017aaa:	f7fb fa74 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017aae:	b920      	cbnz	r0, 8017aba <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8017ab0:	6823      	ldr	r3, [r4, #0]
 8017ab2:	a907      	add	r1, sp, #28
 8017ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	4798      	blx	r3
 8017aba:	3501      	adds	r5, #1
 8017abc:	b2ad      	uxth	r5, r5
 8017abe:	e7e7      	b.n	8017a90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8017ac0:	2004f630 	.word	0x2004f630

08017ac4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	4b03      	ldr	r3, [pc, #12]	; (8017ad4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017ac8:	801a      	strh	r2, [r3, #0]
 8017aca:	805a      	strh	r2, [r3, #2]
 8017acc:	809a      	strh	r2, [r3, #4]
 8017ace:	80da      	strh	r2, [r3, #6]
 8017ad0:	4770      	bx	lr
 8017ad2:	bf00      	nop
 8017ad4:	2004f67c 	.word	0x2004f67c

08017ad8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017adc:	4606      	mov	r6, r0
 8017ade:	b09d      	sub	sp, #116	; 0x74
 8017ae0:	a803      	add	r0, sp, #12
 8017ae2:	4614      	mov	r4, r2
 8017ae4:	468a      	mov	sl, r1
 8017ae6:	461d      	mov	r5, r3
 8017ae8:	f000 fe1d 	bl	8018726 <_ZN8touchgfx12TextProviderC1Ev>
 8017aec:	6833      	ldr	r3, [r6, #0]
 8017aee:	4630      	mov	r0, r6
 8017af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017af2:	4798      	blx	r3
 8017af4:	6833      	ldr	r3, [r6, #0]
 8017af6:	4607      	mov	r7, r0
 8017af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017afa:	4630      	mov	r0, r6
 8017afc:	4798      	blx	r3
 8017afe:	462a      	mov	r2, r5
 8017b00:	2500      	movs	r5, #0
 8017b02:	9000      	str	r0, [sp, #0]
 8017b04:	4621      	mov	r1, r4
 8017b06:	463b      	mov	r3, r7
 8017b08:	a803      	add	r0, sp, #12
 8017b0a:	f000 fe5f 	bl	80187cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017b0e:	462c      	mov	r4, r5
 8017b10:	46a9      	mov	r9, r5
 8017b12:	46a8      	mov	r8, r5
 8017b14:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017b18:	2300      	movs	r3, #0
 8017b1a:	9302      	str	r3, [sp, #8]
 8017b1c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017b20:	429c      	cmp	r4, r3
 8017b22:	d002      	beq.n	8017b2a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017b24:	455c      	cmp	r4, fp
 8017b26:	bf18      	it	ne
 8017b28:	4625      	movne	r5, r4
 8017b2a:	ab02      	add	r3, sp, #8
 8017b2c:	4632      	mov	r2, r6
 8017b2e:	4651      	mov	r1, sl
 8017b30:	a803      	add	r0, sp, #12
 8017b32:	f001 f93b 	bl	8018dac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017b36:	4604      	mov	r4, r0
 8017b38:	b108      	cbz	r0, 8017b3e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017b3a:	280a      	cmp	r0, #10
 8017b3c:	d10a      	bne.n	8017b54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017b3e:	45c1      	cmp	r9, r8
 8017b40:	bf38      	it	cc
 8017b42:	46c1      	movcc	r9, r8
 8017b44:	f04f 0800 	mov.w	r8, #0
 8017b48:	2c00      	cmp	r4, #0
 8017b4a:	d1e5      	bne.n	8017b18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017b4c:	4648      	mov	r0, r9
 8017b4e:	b01d      	add	sp, #116	; 0x74
 8017b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b54:	9a02      	ldr	r2, [sp, #8]
 8017b56:	2a00      	cmp	r2, #0
 8017b58:	d0de      	beq.n	8017b18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017b5a:	7b57      	ldrb	r7, [r2, #13]
 8017b5c:	6833      	ldr	r3, [r6, #0]
 8017b5e:	007f      	lsls	r7, r7, #1
 8017b60:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017b64:	7a97      	ldrb	r7, [r2, #10]
 8017b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b68:	4307      	orrs	r7, r0
 8017b6a:	4629      	mov	r1, r5
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	8894      	ldrh	r4, [r2, #4]
 8017b70:	4798      	blx	r3
 8017b72:	4438      	add	r0, r7
 8017b74:	4480      	add	r8, r0
 8017b76:	fa1f f888 	uxth.w	r8, r8
 8017b7a:	e7e5      	b.n	8017b48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017b7c <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017b7c:	b508      	push	{r3, lr}
 8017b7e:	6803      	ldr	r3, [r0, #0]
 8017b80:	68db      	ldr	r3, [r3, #12]
 8017b82:	4798      	blx	r3
 8017b84:	b128      	cbz	r0, 8017b92 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017b86:	7b43      	ldrb	r3, [r0, #13]
 8017b88:	7a80      	ldrb	r0, [r0, #10]
 8017b8a:	005b      	lsls	r3, r3, #1
 8017b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b90:	4318      	orrs	r0, r3
 8017b92:	bd08      	pop	{r3, pc}

08017b94 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017b94:	b40e      	push	{r1, r2, r3}
 8017b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b98:	4605      	mov	r5, r0
 8017b9a:	b09e      	sub	sp, #120	; 0x78
 8017b9c:	ab23      	add	r3, sp, #140	; 0x8c
 8017b9e:	f853 4b04 	ldr.w	r4, [r3], #4
 8017ba2:	a805      	add	r0, sp, #20
 8017ba4:	9303      	str	r3, [sp, #12]
 8017ba6:	f000 fdbe 	bl	8018726 <_ZN8touchgfx12TextProviderC1Ev>
 8017baa:	682b      	ldr	r3, [r5, #0]
 8017bac:	4628      	mov	r0, r5
 8017bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bb0:	4798      	blx	r3
 8017bb2:	682b      	ldr	r3, [r5, #0]
 8017bb4:	4606      	mov	r6, r0
 8017bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017bb8:	4628      	mov	r0, r5
 8017bba:	4798      	blx	r3
 8017bbc:	4621      	mov	r1, r4
 8017bbe:	2400      	movs	r4, #0
 8017bc0:	4633      	mov	r3, r6
 8017bc2:	9000      	str	r0, [sp, #0]
 8017bc4:	9a03      	ldr	r2, [sp, #12]
 8017bc6:	ae1e      	add	r6, sp, #120	; 0x78
 8017bc8:	a805      	add	r0, sp, #20
 8017bca:	f000 fdff 	bl	80187cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017bce:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017bd2:	4633      	mov	r3, r6
 8017bd4:	462a      	mov	r2, r5
 8017bd6:	4621      	mov	r1, r4
 8017bd8:	a805      	add	r0, sp, #20
 8017bda:	f001 f8e7 	bl	8018dac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017bde:	b1f0      	cbz	r0, 8017c1e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8017be0:	280a      	cmp	r0, #10
 8017be2:	d018      	beq.n	8017c16 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8017be4:	9f04      	ldr	r7, [sp, #16]
 8017be6:	b1b7      	cbz	r7, 8017c16 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8017be8:	7b78      	ldrb	r0, [r7, #13]
 8017bea:	7a3b      	ldrb	r3, [r7, #8]
 8017bec:	00c1      	lsls	r1, r0, #3
 8017bee:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017bf2:	4319      	orrs	r1, r3
 8017bf4:	0643      	lsls	r3, r0, #25
 8017bf6:	bf44      	itt	mi
 8017bf8:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017bfc:	b219      	sxthmi	r1, r3
 8017bfe:	0100      	lsls	r0, r0, #4
 8017c00:	79fb      	ldrb	r3, [r7, #7]
 8017c02:	88aa      	ldrh	r2, [r5, #4]
 8017c04:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017c08:	4303      	orrs	r3, r0
 8017c0a:	4413      	add	r3, r2
 8017c0c:	1a5b      	subs	r3, r3, r1
 8017c0e:	b29b      	uxth	r3, r3
 8017c10:	42a3      	cmp	r3, r4
 8017c12:	bfc8      	it	gt
 8017c14:	b21c      	sxthgt	r4, r3
 8017c16:	4633      	mov	r3, r6
 8017c18:	462a      	mov	r2, r5
 8017c1a:	2100      	movs	r1, #0
 8017c1c:	e7dc      	b.n	8017bd8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017c1e:	b2a0      	uxth	r0, r4
 8017c20:	b01e      	add	sp, #120	; 0x78
 8017c22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017c26:	b003      	add	sp, #12
 8017c28:	4770      	bx	lr

08017c2a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017c2a:	b40e      	push	{r1, r2, r3}
 8017c2c:	b570      	push	{r4, r5, r6, lr}
 8017c2e:	4604      	mov	r4, r0
 8017c30:	b09d      	sub	sp, #116	; 0x74
 8017c32:	ab21      	add	r3, sp, #132	; 0x84
 8017c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c38:	a803      	add	r0, sp, #12
 8017c3a:	9302      	str	r3, [sp, #8]
 8017c3c:	f000 fd73 	bl	8018726 <_ZN8touchgfx12TextProviderC1Ev>
 8017c40:	6823      	ldr	r3, [r4, #0]
 8017c42:	4620      	mov	r0, r4
 8017c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c46:	4798      	blx	r3
 8017c48:	6823      	ldr	r3, [r4, #0]
 8017c4a:	4606      	mov	r6, r0
 8017c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017c4e:	4620      	mov	r0, r4
 8017c50:	4798      	blx	r3
 8017c52:	4633      	mov	r3, r6
 8017c54:	9000      	str	r0, [sp, #0]
 8017c56:	9a02      	ldr	r2, [sp, #8]
 8017c58:	4629      	mov	r1, r5
 8017c5a:	a803      	add	r0, sp, #12
 8017c5c:	f000 fdb6 	bl	80187cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017c60:	a803      	add	r0, sp, #12
 8017c62:	f001 f925 	bl	8018eb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017c66:	2401      	movs	r4, #1
 8017c68:	b2a3      	uxth	r3, r4
 8017c6a:	b140      	cbz	r0, 8017c7e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8017c6c:	280a      	cmp	r0, #10
 8017c6e:	bf08      	it	eq
 8017c70:	3301      	addeq	r3, #1
 8017c72:	a803      	add	r0, sp, #12
 8017c74:	bf08      	it	eq
 8017c76:	b21c      	sxtheq	r4, r3
 8017c78:	f001 f91a 	bl	8018eb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017c7c:	e7f4      	b.n	8017c68 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8017c7e:	4618      	mov	r0, r3
 8017c80:	b01d      	add	sp, #116	; 0x74
 8017c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c86:	b003      	add	sp, #12
 8017c88:	4770      	bx	lr

08017c8a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017c8a:	b40e      	push	{r1, r2, r3}
 8017c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c8e:	4604      	mov	r4, r0
 8017c90:	b09e      	sub	sp, #120	; 0x78
 8017c92:	ab23      	add	r3, sp, #140	; 0x8c
 8017c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c98:	a805      	add	r0, sp, #20
 8017c9a:	9303      	str	r3, [sp, #12]
 8017c9c:	f000 fd43 	bl	8018726 <_ZN8touchgfx12TextProviderC1Ev>
 8017ca0:	6823      	ldr	r3, [r4, #0]
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ca6:	4798      	blx	r3
 8017ca8:	6823      	ldr	r3, [r4, #0]
 8017caa:	4606      	mov	r6, r0
 8017cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017cae:	4620      	mov	r0, r4
 8017cb0:	4798      	blx	r3
 8017cb2:	4633      	mov	r3, r6
 8017cb4:	4629      	mov	r1, r5
 8017cb6:	9000      	str	r0, [sp, #0]
 8017cb8:	9a03      	ldr	r2, [sp, #12]
 8017cba:	a805      	add	r0, sp, #20
 8017cbc:	f000 fd86 	bl	80187cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017cc0:	2100      	movs	r1, #0
 8017cc2:	ad1e      	add	r5, sp, #120	; 0x78
 8017cc4:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017cc8:	462b      	mov	r3, r5
 8017cca:	4622      	mov	r2, r4
 8017ccc:	a805      	add	r0, sp, #20
 8017cce:	f001 f86d 	bl	8018dac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017cd2:	26ff      	movs	r6, #255	; 0xff
 8017cd4:	b1d8      	cbz	r0, 8017d0e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8017cd6:	280a      	cmp	r0, #10
 8017cd8:	d012      	beq.n	8017d00 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017cda:	9804      	ldr	r0, [sp, #16]
 8017cdc:	b180      	cbz	r0, 8017d00 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017cde:	7b47      	ldrb	r7, [r0, #13]
 8017ce0:	7922      	ldrb	r2, [r4, #4]
 8017ce2:	00fb      	lsls	r3, r7, #3
 8017ce4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017ce8:	7a03      	ldrb	r3, [r0, #8]
 8017cea:	430b      	orrs	r3, r1
 8017cec:	0679      	lsls	r1, r7, #25
 8017cee:	bf44      	itt	mi
 8017cf0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017cf4:	b21b      	sxthmi	r3, r3
 8017cf6:	1ad3      	subs	r3, r2, r3
 8017cf8:	b2db      	uxtb	r3, r3
 8017cfa:	429e      	cmp	r6, r3
 8017cfc:	bf28      	it	cs
 8017cfe:	461e      	movcs	r6, r3
 8017d00:	462b      	mov	r3, r5
 8017d02:	4622      	mov	r2, r4
 8017d04:	2100      	movs	r1, #0
 8017d06:	a805      	add	r0, sp, #20
 8017d08:	f001 f850 	bl	8018dac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017d0c:	e7e2      	b.n	8017cd4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8017d0e:	4630      	mov	r0, r6
 8017d10:	b01e      	add	sp, #120	; 0x78
 8017d12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017d16:	b003      	add	sp, #12
 8017d18:	4770      	bx	lr

08017d1a <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017d1a:	b513      	push	{r0, r1, r4, lr}
 8017d1c:	2400      	movs	r4, #0
 8017d1e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017d22:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017d26:	6803      	ldr	r3, [r0, #0]
 8017d28:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017d2c:	9400      	str	r4, [sp, #0]
 8017d2e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017d32:	691b      	ldr	r3, [r3, #16]
 8017d34:	4669      	mov	r1, sp
 8017d36:	4798      	blx	r3
 8017d38:	b002      	add	sp, #8
 8017d3a:	bd10      	pop	{r4, pc}

08017d3c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017d3c:	b538      	push	{r3, r4, r5, lr}
 8017d3e:	460c      	mov	r4, r1
 8017d40:	4605      	mov	r5, r0
 8017d42:	680b      	ldr	r3, [r1, #0]
 8017d44:	68db      	ldr	r3, [r3, #12]
 8017d46:	4798      	blx	r3
 8017d48:	6823      	ldr	r3, [r4, #0]
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d4e:	4629      	mov	r1, r5
 8017d50:	4798      	blx	r3
 8017d52:	4628      	mov	r0, r5
 8017d54:	bd38      	pop	{r3, r4, r5, pc}

08017d56 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017d56:	b410      	push	{r4}
 8017d58:	880a      	ldrh	r2, [r1, #0]
 8017d5a:	8884      	ldrh	r4, [r0, #4]
 8017d5c:	4422      	add	r2, r4
 8017d5e:	800a      	strh	r2, [r1, #0]
 8017d60:	88c4      	ldrh	r4, [r0, #6]
 8017d62:	884a      	ldrh	r2, [r1, #2]
 8017d64:	4422      	add	r2, r4
 8017d66:	804a      	strh	r2, [r1, #2]
 8017d68:	6940      	ldr	r0, [r0, #20]
 8017d6a:	b120      	cbz	r0, 8017d76 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017d6c:	6803      	ldr	r3, [r0, #0]
 8017d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d74:	4718      	bx	r3
 8017d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d7a:	4770      	bx	lr

08017d7c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017d7c:	b570      	push	{r4, r5, r6, lr}
 8017d7e:	460c      	mov	r4, r1
 8017d80:	8882      	ldrh	r2, [r0, #4]
 8017d82:	880b      	ldrh	r3, [r1, #0]
 8017d84:	4605      	mov	r5, r0
 8017d86:	4413      	add	r3, r2
 8017d88:	800b      	strh	r3, [r1, #0]
 8017d8a:	88c2      	ldrh	r2, [r0, #6]
 8017d8c:	884b      	ldrh	r3, [r1, #2]
 8017d8e:	4413      	add	r3, r2
 8017d90:	804b      	strh	r3, [r1, #2]
 8017d92:	1d01      	adds	r1, r0, #4
 8017d94:	4620      	mov	r0, r4
 8017d96:	f7fb f8bb 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 8017d9a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	dd0b      	ble.n	8017dba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017da2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	dd07      	ble.n	8017dba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017daa:	6968      	ldr	r0, [r5, #20]
 8017dac:	b128      	cbz	r0, 8017dba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017dae:	6803      	ldr	r3, [r0, #0]
 8017db0:	4621      	mov	r1, r4
 8017db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017db8:	4718      	bx	r3
 8017dba:	bd70      	pop	{r4, r5, r6, pc}

08017dbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017dbc:	b570      	push	{r4, r5, r6, lr}
 8017dbe:	460c      	mov	r4, r1
 8017dc0:	8882      	ldrh	r2, [r0, #4]
 8017dc2:	880b      	ldrh	r3, [r1, #0]
 8017dc4:	4605      	mov	r5, r0
 8017dc6:	4413      	add	r3, r2
 8017dc8:	800b      	strh	r3, [r1, #0]
 8017dca:	88c2      	ldrh	r2, [r0, #6]
 8017dcc:	884b      	ldrh	r3, [r1, #2]
 8017dce:	4413      	add	r3, r2
 8017dd0:	804b      	strh	r3, [r1, #2]
 8017dd2:	1d01      	adds	r1, r0, #4
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	f7fb f89b 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 8017dda:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	dd18      	ble.n	8017e14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017de2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	dd14      	ble.n	8017e14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017dea:	6968      	ldr	r0, [r5, #20]
 8017dec:	b128      	cbz	r0, 8017dfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017dee:	6803      	ldr	r3, [r0, #0]
 8017df0:	4621      	mov	r1, r4
 8017df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017df6:	691b      	ldr	r3, [r3, #16]
 8017df8:	4718      	bx	r3
 8017dfa:	4b07      	ldr	r3, [pc, #28]	; (8017e18 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	3304      	adds	r3, #4
 8017e00:	429d      	cmp	r5, r3
 8017e02:	d107      	bne.n	8017e14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017e04:	f7fe ffca 	bl	8016d9c <_ZN8touchgfx11Application11getInstanceEv>
 8017e08:	6821      	ldr	r1, [r4, #0]
 8017e0a:	6862      	ldr	r2, [r4, #4]
 8017e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e10:	f7ff b862 	b.w	8016ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017e14:	bd70      	pop	{r4, r5, r6, pc}
 8017e16:	bf00      	nop
 8017e18:	2004f674 	.word	0x2004f674

08017e1c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017e1c:	b570      	push	{r4, r5, r6, lr}
 8017e1e:	4604      	mov	r4, r0
 8017e20:	4616      	mov	r6, r2
 8017e22:	460d      	mov	r5, r1
 8017e24:	b901      	cbnz	r1, 8017e28 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017e26:	b192      	cbz	r2, 8017e4e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017e28:	6823      	ldr	r3, [r4, #0]
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	699b      	ldr	r3, [r3, #24]
 8017e2e:	4798      	blx	r3
 8017e30:	88e2      	ldrh	r2, [r4, #6]
 8017e32:	88a1      	ldrh	r1, [r4, #4]
 8017e34:	4432      	add	r2, r6
 8017e36:	4429      	add	r1, r5
 8017e38:	4620      	mov	r0, r4
 8017e3a:	b212      	sxth	r2, r2
 8017e3c:	b209      	sxth	r1, r1
 8017e3e:	f7f5 fbf3 	bl	800d628 <_ZN8touchgfx8Drawable5setXYEss>
 8017e42:	6823      	ldr	r3, [r4, #0]
 8017e44:	4620      	mov	r0, r4
 8017e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e4a:	699b      	ldr	r3, [r3, #24]
 8017e4c:	4718      	bx	r3
 8017e4e:	bd70      	pop	{r4, r5, r6, pc}

08017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017e50:	b510      	push	{r4, lr}
 8017e52:	2300      	movs	r3, #0
 8017e54:	4604      	mov	r4, r0
 8017e56:	4608      	mov	r0, r1
 8017e58:	8023      	strh	r3, [r4, #0]
 8017e5a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017e5e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017e62:	8063      	strh	r3, [r4, #2]
 8017e64:	6803      	ldr	r3, [r0, #0]
 8017e66:	80a1      	strh	r1, [r4, #4]
 8017e68:	80e2      	strh	r2, [r4, #6]
 8017e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e6c:	4621      	mov	r1, r4
 8017e6e:	4798      	blx	r3
 8017e70:	4620      	mov	r0, r4
 8017e72:	bd10      	pop	{r4, pc}

08017e74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8017e74:	b530      	push	{r4, r5, lr}
 8017e76:	8083      	strh	r3, [r0, #4]
 8017e78:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017e7c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8017e80:	7183      	strb	r3, [r0, #6]
 8017e82:	79c3      	ldrb	r3, [r0, #7]
 8017e84:	6101      	str	r1, [r0, #16]
 8017e86:	f365 0306 	bfi	r3, r5, #0, #7
 8017e8a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8017e8e:	8282      	strh	r2, [r0, #20]
 8017e90:	f365 13c7 	bfi	r3, r5, #7, #1
 8017e94:	71c3      	strb	r3, [r0, #7]
 8017e96:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8017e9a:	7203      	strb	r3, [r0, #8]
 8017e9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8017ea0:	7243      	strb	r3, [r0, #9]
 8017ea2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017ea6:	8143      	strh	r3, [r0, #10]
 8017ea8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8017eac:	8183      	strh	r3, [r0, #12]
 8017eae:	4b01      	ldr	r3, [pc, #4]	; (8017eb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8017eb0:	6003      	str	r3, [r0, #0]
 8017eb2:	bd30      	pop	{r4, r5, pc}
 8017eb4:	08028b4c 	.word	0x08028b4c

08017eb8 <_ZNK8touchgfx9ConstFont4findEt>:
 8017eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017eba:	6904      	ldr	r4, [r0, #16]
 8017ebc:	b3bc      	cbz	r4, 8017f2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017ebe:	88a3      	ldrh	r3, [r4, #4]
 8017ec0:	8a82      	ldrh	r2, [r0, #20]
 8017ec2:	1acb      	subs	r3, r1, r3
 8017ec4:	f102 32ff 	add.w	r2, r2, #4294967295
 8017ec8:	d431      	bmi.n	8017f2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017eca:	4293      	cmp	r3, r2
 8017ecc:	dd0c      	ble.n	8017ee8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8017ece:	230e      	movs	r3, #14
 8017ed0:	fb03 4302 	mla	r3, r3, r2, r4
 8017ed4:	889b      	ldrh	r3, [r3, #4]
 8017ed6:	1a5b      	subs	r3, r3, r1
 8017ed8:	1ad3      	subs	r3, r2, r3
 8017eda:	429a      	cmp	r2, r3
 8017edc:	db27      	blt.n	8017f2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	bfbc      	itt	lt
 8017ee2:	2302      	movlt	r3, #2
 8017ee4:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017ee8:	2500      	movs	r5, #0
 8017eea:	260e      	movs	r6, #14
 8017eec:	4295      	cmp	r5, r2
 8017eee:	dc1e      	bgt.n	8017f2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017ef0:	fb06 4003 	mla	r0, r6, r3, r4
 8017ef4:	8887      	ldrh	r7, [r0, #4]
 8017ef6:	42b9      	cmp	r1, r7
 8017ef8:	d01a      	beq.n	8017f30 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017efa:	d20d      	bcs.n	8017f18 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017efc:	1e5a      	subs	r2, r3, #1
 8017efe:	4295      	cmp	r5, r2
 8017f00:	dc15      	bgt.n	8017f2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f02:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8017f06:	1a5b      	subs	r3, r3, r1
 8017f08:	1ad3      	subs	r3, r2, r3
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	db0f      	blt.n	8017f2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f0e:	429d      	cmp	r5, r3
 8017f10:	ddec      	ble.n	8017eec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017f12:	1953      	adds	r3, r2, r5
 8017f14:	105b      	asrs	r3, r3, #1
 8017f16:	e7e9      	b.n	8017eec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017f18:	1c5d      	adds	r5, r3, #1
 8017f1a:	42aa      	cmp	r2, r5
 8017f1c:	db07      	blt.n	8017f2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f1e:	8a43      	ldrh	r3, [r0, #18]
 8017f20:	1acb      	subs	r3, r1, r3
 8017f22:	442b      	add	r3, r5
 8017f24:	429d      	cmp	r5, r3
 8017f26:	dc02      	bgt.n	8017f2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	dadf      	bge.n	8017eec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017f2c:	e7f1      	b.n	8017f12 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8017f2e:	2000      	movs	r0, #0
 8017f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8017f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f34:	4604      	mov	r4, r0
 8017f36:	4617      	mov	r7, r2
 8017f38:	461e      	mov	r6, r3
 8017f3a:	b911      	cbnz	r1, 8017f42 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017f3c:	2500      	movs	r5, #0
 8017f3e:	4628      	mov	r0, r5
 8017f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f42:	290a      	cmp	r1, #10
 8017f44:	d0fa      	beq.n	8017f3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017f46:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017f4a:	4291      	cmp	r1, r2
 8017f4c:	d0f6      	beq.n	8017f3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017f4e:	f242 020b 	movw	r2, #8203	; 0x200b
 8017f52:	4291      	cmp	r1, r2
 8017f54:	d0f2      	beq.n	8017f3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017f56:	f7ff ffaf 	bl	8017eb8 <_ZNK8touchgfx9ConstFont4findEt>
 8017f5a:	4605      	mov	r5, r0
 8017f5c:	b950      	cbnz	r0, 8017f74 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8017f5e:	6823      	ldr	r3, [r4, #0]
 8017f60:	4620      	mov	r0, r4
 8017f62:	691b      	ldr	r3, [r3, #16]
 8017f64:	4798      	blx	r3
 8017f66:	4601      	mov	r1, r0
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f7ff ffa5 	bl	8017eb8 <_ZNK8touchgfx9ConstFont4findEt>
 8017f6e:	4605      	mov	r5, r0
 8017f70:	2800      	cmp	r0, #0
 8017f72:	d0e3      	beq.n	8017f3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017f74:	6823      	ldr	r3, [r4, #0]
 8017f76:	4629      	mov	r1, r5
 8017f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f7a:	4620      	mov	r0, r4
 8017f7c:	4798      	blx	r3
 8017f7e:	6038      	str	r0, [r7, #0]
 8017f80:	6823      	ldr	r3, [r4, #0]
 8017f82:	4620      	mov	r0, r4
 8017f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f86:	4798      	blx	r3
 8017f88:	7030      	strb	r0, [r6, #0]
 8017f8a:	e7d8      	b.n	8017f3e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08017f8c <_ZN8touchgfx4clzuEm>:
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	b1c8      	cbz	r0, 8017fc4 <_ZN8touchgfx4clzuEm+0x38>
 8017f90:	0c02      	lsrs	r2, r0, #16
 8017f92:	0412      	lsls	r2, r2, #16
 8017f94:	b9a2      	cbnz	r2, 8017fc0 <_ZN8touchgfx4clzuEm+0x34>
 8017f96:	0403      	lsls	r3, r0, #16
 8017f98:	2010      	movs	r0, #16
 8017f9a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017f9e:	bf04      	itt	eq
 8017fa0:	021b      	lsleq	r3, r3, #8
 8017fa2:	3008      	addeq	r0, #8
 8017fa4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017fa8:	bf04      	itt	eq
 8017faa:	011b      	lsleq	r3, r3, #4
 8017fac:	3004      	addeq	r0, #4
 8017fae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017fb2:	bf04      	itt	eq
 8017fb4:	009b      	lsleq	r3, r3, #2
 8017fb6:	3002      	addeq	r0, #2
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	db04      	blt.n	8017fc6 <_ZN8touchgfx4clzuEm+0x3a>
 8017fbc:	3001      	adds	r0, #1
 8017fbe:	4770      	bx	lr
 8017fc0:	2000      	movs	r0, #0
 8017fc2:	e7ea      	b.n	8017f9a <_ZN8touchgfx4clzuEm+0xe>
 8017fc4:	2020      	movs	r0, #32
 8017fc6:	4770      	bx	lr

08017fc8 <_ZN8touchgfx7muldivuEmmmRm>:
 8017fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	4680      	mov	r8, r0
 8017fce:	460f      	mov	r7, r1
 8017fd0:	4615      	mov	r5, r2
 8017fd2:	461e      	mov	r6, r3
 8017fd4:	f7ff ffda 	bl	8017f8c <_ZN8touchgfx4clzuEm>
 8017fd8:	b998      	cbnz	r0, 8018002 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8017fda:	4608      	mov	r0, r1
 8017fdc:	f7ff ffd6 	bl	8017f8c <_ZN8touchgfx4clzuEm>
 8017fe0:	2800      	cmp	r0, #0
 8017fe2:	dd08      	ble.n	8017ff6 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8017fe4:	4633      	mov	r3, r6
 8017fe6:	462a      	mov	r2, r5
 8017fe8:	4641      	mov	r1, r8
 8017fea:	4638      	mov	r0, r7
 8017fec:	f7ff ffec 	bl	8017fc8 <_ZN8touchgfx7muldivuEmmmRm>
 8017ff0:	b003      	add	sp, #12
 8017ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8017ffa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017ffe:	6033      	str	r3, [r6, #0]
 8018000:	e7f6      	b.n	8017ff0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018002:	fa31 f900 	lsrs.w	r9, r1, r0
 8018006:	fb01 f308 	mul.w	r3, r1, r8
 801800a:	d105      	bne.n	8018018 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801800c:	fbb3 f0f5 	udiv	r0, r3, r5
 8018010:	fb05 3510 	mls	r5, r5, r0, r3
 8018014:	6035      	str	r5, [r6, #0]
 8018016:	e7eb      	b.n	8017ff0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018018:	2301      	movs	r3, #1
 801801a:	fa08 fb00 	lsl.w	fp, r8, r0
 801801e:	fa03 f000 	lsl.w	r0, r3, r0
 8018022:	3801      	subs	r0, #1
 8018024:	462a      	mov	r2, r5
 8018026:	4633      	mov	r3, r6
 8018028:	4641      	mov	r1, r8
 801802a:	4038      	ands	r0, r7
 801802c:	f7ff ffcc 	bl	8017fc8 <_ZN8touchgfx7muldivuEmmmRm>
 8018030:	fbbb faf5 	udiv	sl, fp, r5
 8018034:	462a      	mov	r2, r5
 8018036:	4607      	mov	r7, r0
 8018038:	ab01      	add	r3, sp, #4
 801803a:	fb05 b11a 	mls	r1, r5, sl, fp
 801803e:	4648      	mov	r0, r9
 8018040:	f7ff ffc2 	bl	8017fc8 <_ZN8touchgfx7muldivuEmmmRm>
 8018044:	9b01      	ldr	r3, [sp, #4]
 8018046:	6832      	ldr	r2, [r6, #0]
 8018048:	fb09 f40a 	mul.w	r4, r9, sl
 801804c:	441a      	add	r2, r3
 801804e:	fbb2 f3f5 	udiv	r3, r2, r5
 8018052:	441c      	add	r4, r3
 8018054:	443c      	add	r4, r7
 8018056:	4420      	add	r0, r4
 8018058:	fb05 2513 	mls	r5, r5, r3, r2
 801805c:	e7da      	b.n	8018014 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801805e <_ZN8touchgfx6muldivElllRl>:
 801805e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018060:	2800      	cmp	r0, #0
 8018062:	bfb6      	itet	lt
 8018064:	f04f 34ff 	movlt.w	r4, #4294967295
 8018068:	2401      	movge	r4, #1
 801806a:	4240      	neglt	r0, r0
 801806c:	2900      	cmp	r1, #0
 801806e:	bfbc      	itt	lt
 8018070:	4249      	neglt	r1, r1
 8018072:	4264      	neglt	r4, r4
 8018074:	2a00      	cmp	r2, #0
 8018076:	bfb6      	itet	lt
 8018078:	4265      	neglt	r5, r4
 801807a:	4625      	movge	r5, r4
 801807c:	4252      	neglt	r2, r2
 801807e:	4288      	cmp	r0, r1
 8018080:	461e      	mov	r6, r3
 8018082:	bfc2      	ittt	gt
 8018084:	4603      	movgt	r3, r0
 8018086:	4608      	movgt	r0, r1
 8018088:	4619      	movgt	r1, r3
 801808a:	ab01      	add	r3, sp, #4
 801808c:	f7ff ff9c 	bl	8017fc8 <_ZN8touchgfx7muldivuEmmmRm>
 8018090:	9b01      	ldr	r3, [sp, #4]
 8018092:	4368      	muls	r0, r5
 8018094:	435c      	muls	r4, r3
 8018096:	6034      	str	r4, [r6, #0]
 8018098:	b002      	add	sp, #8
 801809a:	bd70      	pop	{r4, r5, r6, pc}

0801809c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801809c:	2000      	movs	r0, #0
 801809e:	4770      	bx	lr

080180a0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80180a0:	2001      	movs	r0, #1
 80180a2:	4770      	bx	lr

080180a4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80180a4:	2002      	movs	r0, #2
 80180a6:	4770      	bx	lr

080180a8 <_ZN8touchgfx12GestureEventD1Ev>:
 80180a8:	4770      	bx	lr

080180aa <_ZN8touchgfx9DragEventD1Ev>:
 80180aa:	4770      	bx	lr

080180ac <_ZN8touchgfx10ClickEventD1Ev>:
 80180ac:	4770      	bx	lr

080180ae <_ZN8touchgfx10ClickEventD0Ev>:
 80180ae:	b510      	push	{r4, lr}
 80180b0:	4604      	mov	r4, r0
 80180b2:	210c      	movs	r1, #12
 80180b4:	f00d fba2 	bl	80257fc <_ZdlPvj>
 80180b8:	4620      	mov	r0, r4
 80180ba:	bd10      	pop	{r4, pc}

080180bc <_ZN8touchgfx9DragEventD0Ev>:
 80180bc:	b510      	push	{r4, lr}
 80180be:	4604      	mov	r4, r0
 80180c0:	2110      	movs	r1, #16
 80180c2:	f00d fb9b 	bl	80257fc <_ZdlPvj>
 80180c6:	4620      	mov	r0, r4
 80180c8:	bd10      	pop	{r4, pc}

080180ca <_ZN8touchgfx12GestureEventD0Ev>:
 80180ca:	b510      	push	{r4, lr}
 80180cc:	4604      	mov	r4, r0
 80180ce:	210c      	movs	r1, #12
 80180d0:	f00d fb94 	bl	80257fc <_ZdlPvj>
 80180d4:	4620      	mov	r0, r4
 80180d6:	bd10      	pop	{r4, pc}

080180d8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80180d8:	b530      	push	{r4, r5, lr}
 80180da:	460d      	mov	r5, r1
 80180dc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80180de:	b087      	sub	sp, #28
 80180e0:	4604      	mov	r4, r0
 80180e2:	b301      	cbz	r1, 8018126 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80180e4:	a801      	add	r0, sp, #4
 80180e6:	f7ff feb3 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180ea:	892a      	ldrh	r2, [r5, #8]
 80180ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80180f0:	7928      	ldrb	r0, [r5, #4]
 80180f2:	1ad2      	subs	r2, r2, r3
 80180f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80180f6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80180fa:	441a      	add	r2, r3
 80180fc:	896b      	ldrh	r3, [r5, #10]
 80180fe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018102:	f88d 0010 	strb.w	r0, [sp, #16]
 8018106:	1b5b      	subs	r3, r3, r5
 8018108:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801810a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801810c:	442b      	add	r3, r5
 801810e:	4d07      	ldr	r5, [pc, #28]	; (801812c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018110:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018114:	9503      	str	r5, [sp, #12]
 8018116:	f8ad 2014 	strh.w	r2, [sp, #20]
 801811a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801811e:	6803      	ldr	r3, [r0, #0]
 8018120:	a903      	add	r1, sp, #12
 8018122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018124:	4798      	blx	r3
 8018126:	b007      	add	sp, #28
 8018128:	bd30      	pop	{r4, r5, pc}
 801812a:	bf00      	nop
 801812c:	08028bcc 	.word	0x08028bcc

08018130 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018134:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018136:	b08a      	sub	sp, #40	; 0x28
 8018138:	4604      	mov	r4, r0
 801813a:	460d      	mov	r5, r1
 801813c:	b113      	cbz	r3, 8018144 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801813e:	790b      	ldrb	r3, [r1, #4]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d044      	beq.n	80181ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018144:	f104 0804 	add.w	r8, r4, #4
 8018148:	4641      	mov	r1, r8
 801814a:	a803      	add	r0, sp, #12
 801814c:	f7ff fe80 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018150:	792b      	ldrb	r3, [r5, #4]
 8018152:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018156:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801815a:	b983      	cbnz	r3, 801817e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801815c:	892a      	ldrh	r2, [r5, #8]
 801815e:	88e9      	ldrh	r1, [r5, #6]
 8018160:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018164:	1b92      	subs	r2, r2, r6
 8018166:	1bc9      	subs	r1, r1, r7
 8018168:	9301      	str	r3, [sp, #4]
 801816a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801816e:	9300      	str	r3, [sp, #0]
 8018170:	b212      	sxth	r2, r2
 8018172:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018176:	b209      	sxth	r1, r1
 8018178:	4640      	mov	r0, r8
 801817a:	f7fa fde9 	bl	8012d50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801817e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018180:	b329      	cbz	r1, 80181ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018182:	a805      	add	r0, sp, #20
 8018184:	f7ff fe64 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018188:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801818c:	792b      	ldrb	r3, [r5, #4]
 801818e:	1abf      	subs	r7, r7, r2
 8018190:	88ea      	ldrh	r2, [r5, #6]
 8018192:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018194:	4417      	add	r7, r2
 8018196:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018198:	f88d 3020 	strb.w	r3, [sp, #32]
 801819c:	4417      	add	r7, r2
 801819e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80181a2:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80181a6:	1ab6      	subs	r6, r6, r2
 80181a8:	892a      	ldrh	r2, [r5, #8]
 80181aa:	a907      	add	r1, sp, #28
 80181ac:	4416      	add	r6, r2
 80181ae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80181b0:	4416      	add	r6, r2
 80181b2:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80181b6:	2600      	movs	r6, #0
 80181b8:	4a06      	ldr	r2, [pc, #24]	; (80181d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80181ba:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80181be:	9207      	str	r2, [sp, #28]
 80181c0:	6803      	ldr	r3, [r0, #0]
 80181c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181c4:	4798      	blx	r3
 80181c6:	792b      	ldrb	r3, [r5, #4]
 80181c8:	b10b      	cbz	r3, 80181ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80181ca:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80181ce:	b00a      	add	sp, #40	; 0x28
 80181d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181d4:	08028ba4 	.word	0x08028ba4

080181d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80181d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181dc:	460c      	mov	r4, r1
 80181de:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80181e0:	b088      	sub	sp, #32
 80181e2:	4605      	mov	r5, r0
 80181e4:	2900      	cmp	r1, #0
 80181e6:	d06d      	beq.n	80182c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80181e8:	4668      	mov	r0, sp
 80181ea:	f7ff fe31 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181ee:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80181f0:	88e3      	ldrh	r3, [r4, #6]
 80181f2:	f9bd 8000 	ldrsh.w	r8, [sp]
 80181f6:	440b      	add	r3, r1
 80181f8:	b21b      	sxth	r3, r3
 80181fa:	4543      	cmp	r3, r8
 80181fc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018200:	db31      	blt.n	8018266 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018202:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018206:	44c4      	add	ip, r8
 8018208:	fa0f fc8c 	sxth.w	ip, ip
 801820c:	4563      	cmp	r3, ip
 801820e:	da2a      	bge.n	8018266 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018210:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8018212:	8926      	ldrh	r6, [r4, #8]
 8018214:	4416      	add	r6, r2
 8018216:	b236      	sxth	r6, r6
 8018218:	42be      	cmp	r6, r7
 801821a:	db24      	blt.n	8018266 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801821c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018220:	4438      	add	r0, r7
 8018222:	b200      	sxth	r0, r0
 8018224:	4286      	cmp	r6, r0
 8018226:	da1e      	bge.n	8018266 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018228:	8963      	ldrh	r3, [r4, #10]
 801822a:	4419      	add	r1, r3
 801822c:	b209      	sxth	r1, r1
 801822e:	4541      	cmp	r1, r8
 8018230:	db08      	blt.n	8018244 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018232:	4561      	cmp	r1, ip
 8018234:	da06      	bge.n	8018244 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018236:	89a3      	ldrh	r3, [r4, #12]
 8018238:	441a      	add	r2, r3
 801823a:	b212      	sxth	r2, r2
 801823c:	42ba      	cmp	r2, r7
 801823e:	db01      	blt.n	8018244 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018240:	4282      	cmp	r2, r0
 8018242:	db10      	blt.n	8018266 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018244:	4b21      	ldr	r3, [pc, #132]	; (80182cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018246:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018248:	9304      	str	r3, [sp, #16]
 801824a:	2302      	movs	r3, #2
 801824c:	f88d 3014 	strb.w	r3, [sp, #20]
 8018250:	2300      	movs	r3, #0
 8018252:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018256:	f8ad 3018 	strh.w	r3, [sp, #24]
 801825a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801825e:	6803      	ldr	r3, [r0, #0]
 8018260:	a904      	add	r1, sp, #16
 8018262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018264:	4798      	blx	r3
 8018266:	1d29      	adds	r1, r5, #4
 8018268:	a802      	add	r0, sp, #8
 801826a:	f7ff fdf1 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801826e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018272:	88e0      	ldrh	r0, [r4, #6]
 8018274:	eba3 0808 	sub.w	r8, r3, r8
 8018278:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801827c:	7921      	ldrb	r1, [r4, #4]
 801827e:	1bdf      	subs	r7, r3, r7
 8018280:	b2bb      	uxth	r3, r7
 8018282:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018286:	fa1f f888 	uxth.w	r8, r8
 801828a:	8922      	ldrh	r2, [r4, #8]
 801828c:	8967      	ldrh	r7, [r4, #10]
 801828e:	89a4      	ldrh	r4, [r4, #12]
 8018290:	4440      	add	r0, r8
 8018292:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018294:	4460      	add	r0, ip
 8018296:	441a      	add	r2, r3
 8018298:	44b8      	add	r8, r7
 801829a:	4423      	add	r3, r4
 801829c:	4c0c      	ldr	r4, [pc, #48]	; (80182d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801829e:	f8ad 0016 	strh.w	r0, [sp, #22]
 80182a2:	4433      	add	r3, r6
 80182a4:	4432      	add	r2, r6
 80182a6:	44e0      	add	r8, ip
 80182a8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80182aa:	f88d 1014 	strb.w	r1, [sp, #20]
 80182ae:	9404      	str	r4, [sp, #16]
 80182b0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80182b4:	f8ad 801a 	strh.w	r8, [sp, #26]
 80182b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80182bc:	6803      	ldr	r3, [r0, #0]
 80182be:	a904      	add	r1, sp, #16
 80182c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182c2:	4798      	blx	r3
 80182c4:	b008      	add	sp, #32
 80182c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ca:	bf00      	nop
 80182cc:	08028ba4 	.word	0x08028ba4
 80182d0:	08028bb8 	.word	0x08028bb8

080182d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80182d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182d6:	4604      	mov	r4, r0
 80182d8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80182dc:	3201      	adds	r2, #1
 80182de:	d112      	bne.n	8018306 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80182e0:	2500      	movs	r5, #0
 80182e2:	9500      	str	r5, [sp, #0]
 80182e4:	466d      	mov	r5, sp
 80182e6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80182ea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80182ee:	6803      	ldr	r3, [r0, #0]
 80182f0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80182f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80182f8:	4629      	mov	r1, r5
 80182fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182fc:	4798      	blx	r3
 80182fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018302:	e884 0003 	stmia.w	r4, {r0, r1}
 8018306:	4620      	mov	r0, r4
 8018308:	b003      	add	sp, #12
 801830a:	bd30      	pop	{r4, r5, pc}

0801830c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801830c:	b513      	push	{r0, r1, r4, lr}
 801830e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018312:	4604      	mov	r4, r0
 8018314:	3301      	adds	r3, #1
 8018316:	d109      	bne.n	801832c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018318:	4601      	mov	r1, r0
 801831a:	4668      	mov	r0, sp
 801831c:	f7ff fd98 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018320:	f8bd 3000 	ldrh.w	r3, [sp]
 8018324:	8423      	strh	r3, [r4, #32]
 8018326:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801832a:	8463      	strh	r3, [r4, #34]	; 0x22
 801832c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018330:	b002      	add	sp, #8
 8018332:	bd10      	pop	{r4, pc}

08018334 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018334:	b513      	push	{r0, r1, r4, lr}
 8018336:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801833a:	4604      	mov	r4, r0
 801833c:	3301      	adds	r3, #1
 801833e:	d109      	bne.n	8018354 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018340:	4601      	mov	r1, r0
 8018342:	4668      	mov	r0, sp
 8018344:	f7ff fd84 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018348:	f8bd 3000 	ldrh.w	r3, [sp]
 801834c:	8423      	strh	r3, [r4, #32]
 801834e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018352:	8463      	strh	r3, [r4, #34]	; 0x22
 8018354:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018358:	b002      	add	sp, #8
 801835a:	bd10      	pop	{r4, pc}

0801835c <_ZN8touchgfx6ScreenC1Ev>:
 801835c:	b570      	push	{r4, r5, r6, lr}
 801835e:	4605      	mov	r5, r0
 8018360:	4b16      	ldr	r3, [pc, #88]	; (80183bc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018362:	2101      	movs	r1, #1
 8018364:	f845 3b04 	str.w	r3, [r5], #4
 8018368:	2300      	movs	r3, #0
 801836a:	4604      	mov	r4, r0
 801836c:	8103      	strh	r3, [r0, #8]
 801836e:	8143      	strh	r3, [r0, #10]
 8018370:	8183      	strh	r3, [r0, #12]
 8018372:	81c3      	strh	r3, [r0, #14]
 8018374:	8203      	strh	r3, [r0, #16]
 8018376:	8243      	strh	r3, [r0, #18]
 8018378:	8283      	strh	r3, [r0, #20]
 801837a:	82c3      	strh	r3, [r0, #22]
 801837c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018380:	6203      	str	r3, [r0, #32]
 8018382:	8483      	strh	r3, [r0, #36]	; 0x24
 8018384:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018386:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801838a:	4a0d      	ldr	r2, [pc, #52]	; (80183c0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801838c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8018390:	6343      	str	r3, [r0, #52]	; 0x34
 8018392:	4b0c      	ldr	r3, [pc, #48]	; (80183c4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018394:	6042      	str	r2, [r0, #4]
 8018396:	f9b3 6000 	ldrsh.w	r6, [r3]
 801839a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801839c:	4a0a      	ldr	r2, [pc, #40]	; (80183c8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801839e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80183a2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80183a6:	f9b2 1000 	ldrsh.w	r1, [r2]
 80183aa:	4628      	mov	r0, r5
 80183ac:	4798      	blx	r3
 80183ae:	6863      	ldr	r3, [r4, #4]
 80183b0:	4628      	mov	r0, r5
 80183b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80183b4:	4631      	mov	r1, r6
 80183b6:	4798      	blx	r3
 80183b8:	4620      	mov	r0, r4
 80183ba:	bd70      	pop	{r4, r5, r6, pc}
 80183bc:	08028be0 	.word	0x08028be0
 80183c0:	08028480 	.word	0x08028480
 80183c4:	2004f626 	.word	0x2004f626
 80183c8:	2004f624 	.word	0x2004f624

080183cc <_ZN8touchgfx6Screen4drawEv>:
 80183cc:	b507      	push	{r0, r1, r2, lr}
 80183ce:	2100      	movs	r1, #0
 80183d0:	4b08      	ldr	r3, [pc, #32]	; (80183f4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80183d2:	9100      	str	r1, [sp, #0]
 80183d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80183d8:	4b07      	ldr	r3, [pc, #28]	; (80183f8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80183da:	f8ad 2004 	strh.w	r2, [sp, #4]
 80183de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80183e2:	4669      	mov	r1, sp
 80183e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80183e8:	6803      	ldr	r3, [r0, #0]
 80183ea:	689b      	ldr	r3, [r3, #8]
 80183ec:	4798      	blx	r3
 80183ee:	b003      	add	sp, #12
 80183f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80183f4:	2004f624 	.word	0x2004f624
 80183f8:	2004f626 	.word	0x2004f626

080183fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80183fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018400:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018404:	b089      	sub	sp, #36	; 0x24
 8018406:	2b00      	cmp	r3, #0
 8018408:	4680      	mov	r8, r0
 801840a:	460c      	mov	r4, r1
 801840c:	4615      	mov	r5, r2
 801840e:	dd0e      	ble.n	801842e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018410:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018414:	2b00      	cmp	r3, #0
 8018416:	dd0a      	ble.n	801842e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018418:	4628      	mov	r0, r5
 801841a:	f7ff ff5b 	bl	80182d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801841e:	4621      	mov	r1, r4
 8018420:	f7fe fbde 	bl	8016be0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018424:	69eb      	ldr	r3, [r5, #28]
 8018426:	b928      	cbnz	r0, 8018434 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018428:	461d      	mov	r5, r3
 801842a:	2b00      	cmp	r3, #0
 801842c:	d1f4      	bne.n	8018418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801842e:	b009      	add	sp, #36	; 0x24
 8018430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018434:	ae04      	add	r6, sp, #16
 8018436:	2b00      	cmp	r3, #0
 8018438:	f000 80b5 	beq.w	80185a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801843c:	682b      	ldr	r3, [r5, #0]
 801843e:	4629      	mov	r1, r5
 8018440:	68db      	ldr	r3, [r3, #12]
 8018442:	a802      	add	r0, sp, #8
 8018444:	4798      	blx	r3
 8018446:	4628      	mov	r0, r5
 8018448:	f7ff ff60 	bl	801830c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801844c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8018450:	4407      	add	r7, r0
 8018452:	4628      	mov	r0, r5
 8018454:	f7ff ff6e 	bl	8018334 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018458:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801845c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018460:	4418      	add	r0, r3
 8018462:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018466:	4621      	mov	r1, r4
 8018468:	f8ad 0012 	strh.w	r0, [sp, #18]
 801846c:	b23f      	sxth	r7, r7
 801846e:	4630      	mov	r0, r6
 8018470:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018474:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018478:	f8ad 7010 	strh.w	r7, [sp, #16]
 801847c:	f7fa fd48 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 8018480:	4628      	mov	r0, r5
 8018482:	f7ff ff27 	bl	80182d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018486:	4602      	mov	r2, r0
 8018488:	e896 0003 	ldmia.w	r6, {r0, r1}
 801848c:	ab06      	add	r3, sp, #24
 801848e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018492:	4611      	mov	r1, r2
 8018494:	4618      	mov	r0, r3
 8018496:	f7fa fd3b 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 801849a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801849e:	f9b4 1000 	ldrsh.w	r1, [r4]
 80184a2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80184a6:	4299      	cmp	r1, r3
 80184a8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80184ac:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80184b0:	d10b      	bne.n	80184ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80184b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80184b6:	4552      	cmp	r2, sl
 80184b8:	d107      	bne.n	80184ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80184ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80184be:	455a      	cmp	r2, fp
 80184c0:	d103      	bne.n	80184ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80184c2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80184c6:	454a      	cmp	r2, r9
 80184c8:	d06d      	beq.n	80185a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80184ca:	f1bb 0f00 	cmp.w	fp, #0
 80184ce:	dd65      	ble.n	801859c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80184d0:	f1b9 0f00 	cmp.w	r9, #0
 80184d4:	dd62      	ble.n	801859c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80184d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80184da:	fa1f f08a 	uxth.w	r0, sl
 80184de:	4552      	cmp	r2, sl
 80184e0:	9000      	str	r0, [sp, #0]
 80184e2:	da12      	bge.n	801850a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80184e4:	9301      	str	r3, [sp, #4]
 80184e6:	9b00      	ldr	r3, [sp, #0]
 80184e8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80184ec:	f8ad 2012 	strh.w	r2, [sp, #18]
 80184f0:	1a9a      	subs	r2, r3, r2
 80184f2:	f8ad 1010 	strh.w	r1, [sp, #16]
 80184f6:	f8ad 0014 	strh.w	r0, [sp, #20]
 80184fa:	f8ad 2016 	strh.w	r2, [sp, #22]
 80184fe:	69ea      	ldr	r2, [r5, #28]
 8018500:	4631      	mov	r1, r6
 8018502:	4640      	mov	r0, r8
 8018504:	f7ff ff7a 	bl	80183fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018508:	9b01      	ldr	r3, [sp, #4]
 801850a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801850e:	b29f      	uxth	r7, r3
 8018510:	429a      	cmp	r2, r3
 8018512:	da0d      	bge.n	8018530 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018514:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018518:	1aba      	subs	r2, r7, r2
 801851a:	f8ad a012 	strh.w	sl, [sp, #18]
 801851e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018522:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018526:	69ea      	ldr	r2, [r5, #28]
 8018528:	4631      	mov	r1, r6
 801852a:	4640      	mov	r0, r8
 801852c:	f7ff ff66 	bl	80183fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018530:	8822      	ldrh	r2, [r4, #0]
 8018532:	88a3      	ldrh	r3, [r4, #4]
 8018534:	445f      	add	r7, fp
 8018536:	4413      	add	r3, r2
 8018538:	b29b      	uxth	r3, r3
 801853a:	b2bf      	uxth	r7, r7
 801853c:	b23a      	sxth	r2, r7
 801853e:	b219      	sxth	r1, r3
 8018540:	4291      	cmp	r1, r2
 8018542:	dd0d      	ble.n	8018560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018544:	1bdb      	subs	r3, r3, r7
 8018546:	f8ad 2010 	strh.w	r2, [sp, #16]
 801854a:	f8ad a012 	strh.w	sl, [sp, #18]
 801854e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018552:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018556:	69ea      	ldr	r2, [r5, #28]
 8018558:	4631      	mov	r1, r6
 801855a:	4640      	mov	r0, r8
 801855c:	f7ff ff4e 	bl	80183fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018560:	88e2      	ldrh	r2, [r4, #6]
 8018562:	8863      	ldrh	r3, [r4, #2]
 8018564:	4413      	add	r3, r2
 8018566:	9a00      	ldr	r2, [sp, #0]
 8018568:	b29b      	uxth	r3, r3
 801856a:	444a      	add	r2, r9
 801856c:	fa1f f982 	uxth.w	r9, r2
 8018570:	fa0f f289 	sxth.w	r2, r9
 8018574:	b219      	sxth	r1, r3
 8018576:	428a      	cmp	r2, r1
 8018578:	da15      	bge.n	80185a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801857a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801857e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018582:	eba3 0309 	sub.w	r3, r3, r9
 8018586:	f8ad 1014 	strh.w	r1, [sp, #20]
 801858a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801858e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018592:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018596:	69ea      	ldr	r2, [r5, #28]
 8018598:	4631      	mov	r1, r6
 801859a:	e001      	b.n	80185a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801859c:	4621      	mov	r1, r4
 801859e:	69ea      	ldr	r2, [r5, #28]
 80185a0:	4640      	mov	r0, r8
 80185a2:	f7ff ff2b 	bl	80183fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80185a6:	4628      	mov	r0, r5
 80185a8:	f7ff fe94 	bl	80182d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80185ac:	4633      	mov	r3, r6
 80185ae:	4602      	mov	r2, r0
 80185b0:	6861      	ldr	r1, [r4, #4]
 80185b2:	6820      	ldr	r0, [r4, #0]
 80185b4:	c303      	stmia	r3!, {r0, r1}
 80185b6:	4611      	mov	r1, r2
 80185b8:	4630      	mov	r0, r6
 80185ba:	f7fa fca9 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 80185be:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	f77f af33 	ble.w	801842e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80185c8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	f77f af2e 	ble.w	801842e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80185d2:	4628      	mov	r0, r5
 80185d4:	f7ff fe9a 	bl	801830c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80185d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80185dc:	1a18      	subs	r0, r3, r0
 80185de:	f8ad 0010 	strh.w	r0, [sp, #16]
 80185e2:	4628      	mov	r0, r5
 80185e4:	f7ff fea6 	bl	8018334 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80185e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80185ec:	4631      	mov	r1, r6
 80185ee:	1a18      	subs	r0, r3, r0
 80185f0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80185f4:	682b      	ldr	r3, [r5, #0]
 80185f6:	4628      	mov	r0, r5
 80185f8:	689b      	ldr	r3, [r3, #8]
 80185fa:	4798      	blx	r3
 80185fc:	e717      	b.n	801842e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080185fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80185fe:	b570      	push	{r4, r5, r6, lr}
 8018600:	2300      	movs	r3, #0
 8018602:	460c      	mov	r4, r1
 8018604:	b086      	sub	sp, #24
 8018606:	1d06      	adds	r6, r0, #4
 8018608:	4631      	mov	r1, r6
 801860a:	4605      	mov	r5, r0
 801860c:	a802      	add	r0, sp, #8
 801860e:	9301      	str	r3, [sp, #4]
 8018610:	f7ff fc1e 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018614:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018618:	8822      	ldrh	r2, [r4, #0]
 801861a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801861e:	1ad2      	subs	r2, r2, r3
 8018620:	8863      	ldrh	r3, [r4, #2]
 8018622:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018626:	1a5b      	subs	r3, r3, r1
 8018628:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801862c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018630:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018634:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018638:	aa01      	add	r2, sp, #4
 801863a:	a904      	add	r1, sp, #16
 801863c:	4630      	mov	r0, r6
 801863e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018642:	f7fa fd3d 	bl	80130c0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018646:	9a01      	ldr	r2, [sp, #4]
 8018648:	b11a      	cbz	r2, 8018652 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801864a:	4621      	mov	r1, r4
 801864c:	4628      	mov	r0, r5
 801864e:	f7ff fed5 	bl	80183fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018652:	b006      	add	sp, #24
 8018654:	bd70      	pop	{r4, r5, r6, pc}

08018656 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018656:	b530      	push	{r4, r5, lr}
 8018658:	4602      	mov	r2, r0
 801865a:	b085      	sub	sp, #20
 801865c:	460d      	mov	r5, r1
 801865e:	466b      	mov	r3, sp
 8018660:	4604      	mov	r4, r0
 8018662:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018666:	6851      	ldr	r1, [r2, #4]
 8018668:	c303      	stmia	r3!, {r0, r1}
 801866a:	4629      	mov	r1, r5
 801866c:	4668      	mov	r0, sp
 801866e:	f7fa fc4f 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 8018672:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018676:	b12b      	cbz	r3, 8018684 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018678:	4669      	mov	r1, sp
 801867a:	4620      	mov	r0, r4
 801867c:	f7ff ffbf 	bl	80185fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018680:	b005      	add	sp, #20
 8018682:	bd30      	pop	{r4, r5, pc}
 8018684:	3404      	adds	r4, #4
 8018686:	4621      	mov	r1, r4
 8018688:	a802      	add	r0, sp, #8
 801868a:	f7ff fbe1 	bl	8017e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801868e:	f8bd 3000 	ldrh.w	r3, [sp]
 8018692:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018696:	4669      	mov	r1, sp
 8018698:	1a9b      	subs	r3, r3, r2
 801869a:	f8ad 3000 	strh.w	r3, [sp]
 801869e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80186a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80186a6:	4620      	mov	r0, r4
 80186a8:	1a9b      	subs	r3, r3, r2
 80186aa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80186ae:	f7fa fcce 	bl	801304e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80186b2:	e7e5      	b.n	8018680 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080186b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80186b4:	460b      	mov	r3, r1
 80186b6:	680a      	ldr	r2, [r1, #0]
 80186b8:	1d01      	adds	r1, r0, #4
 80186ba:	6992      	ldr	r2, [r2, #24]
 80186bc:	4618      	mov	r0, r3
 80186be:	4710      	bx	r2

080186c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 80186c0:	4298      	cmp	r0, r3
 80186c2:	d200      	bcs.n	80186c6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 80186c4:	b913      	cbnz	r3, 80186cc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 80186c6:	440a      	add	r2, r1
 80186c8:	b210      	sxth	r0, r2
 80186ca:	4770      	bx	lr
 80186cc:	ee07 0a90 	vmov	s15, r0
 80186d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80186d4:	ee07 3a90 	vmov	s15, r3
 80186d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80186e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80186e4:	ee07 2a90 	vmov	s15, r2
 80186e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80186ec:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80186f0:	ee67 5a07 	vmul.f32	s11, s14, s14
 80186f4:	ee07 1a90 	vmov	s15, r1
 80186f8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80186fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018700:	eee6 7a26 	vfma.f32	s15, s12, s13
 8018704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018708:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801870c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018710:	bfcc      	ite	gt
 8018712:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8018716:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801871a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801871e:	ee17 3a90 	vmov	r3, s15
 8018722:	b218      	sxth	r0, r3
 8018724:	4770      	bx	lr

08018726 <_ZN8touchgfx12TextProviderC1Ev>:
 8018726:	b538      	push	{r3, r4, r5, lr}
 8018728:	2500      	movs	r5, #0
 801872a:	2302      	movs	r3, #2
 801872c:	4604      	mov	r4, r0
 801872e:	e9c0 5500 	strd	r5, r5, [r0]
 8018732:	7403      	strb	r3, [r0, #16]
 8018734:	6145      	str	r5, [r0, #20]
 8018736:	7605      	strb	r5, [r0, #24]
 8018738:	83c5      	strh	r5, [r0, #30]
 801873a:	8405      	strh	r5, [r0, #32]
 801873c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801873e:	8705      	strh	r5, [r0, #56]	; 0x38
 8018740:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8018742:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8018746:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801874a:	220e      	movs	r2, #14
 801874c:	4629      	mov	r1, r5
 801874e:	304c      	adds	r0, #76	; 0x4c
 8018750:	f00d f90b 	bl	802596a <memset>
 8018754:	2301      	movs	r3, #1
 8018756:	4620      	mov	r0, r4
 8018758:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801875c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018760:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8018764:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8018768:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801876c:	f7f7 ffde 	bl	801072c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018770:	4620      	mov	r0, r4
 8018772:	bd38      	pop	{r3, r4, r5, pc}

08018774 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018774:	b530      	push	{r4, r5, lr}
 8018776:	2500      	movs	r5, #0
 8018778:	2401      	movs	r4, #1
 801877a:	6843      	ldr	r3, [r0, #4]
 801877c:	b913      	cbnz	r3, 8018784 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801877e:	6803      	ldr	r3, [r0, #0]
 8018780:	b313      	cbz	r3, 80187c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018782:	6043      	str	r3, [r0, #4]
 8018784:	7e03      	ldrb	r3, [r0, #24]
 8018786:	b143      	cbz	r3, 801879a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018788:	6943      	ldr	r3, [r0, #20]
 801878a:	b12b      	cbz	r3, 8018798 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801878c:	881a      	ldrh	r2, [r3, #0]
 801878e:	b11a      	cbz	r2, 8018798 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018790:	1c9a      	adds	r2, r3, #2
 8018792:	6142      	str	r2, [r0, #20]
 8018794:	8818      	ldrh	r0, [r3, #0]
 8018796:	bd30      	pop	{r4, r5, pc}
 8018798:	7605      	strb	r5, [r0, #24]
 801879a:	6843      	ldr	r3, [r0, #4]
 801879c:	8819      	ldrh	r1, [r3, #0]
 801879e:	b199      	cbz	r1, 80187c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80187a0:	1c9a      	adds	r2, r3, #2
 80187a2:	2902      	cmp	r1, #2
 80187a4:	6042      	str	r2, [r0, #4]
 80187a6:	d1f5      	bne.n	8018794 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80187a8:	7c03      	ldrb	r3, [r0, #16]
 80187aa:	2b01      	cmp	r3, #1
 80187ac:	d8e5      	bhi.n	801877a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187ae:	1c5a      	adds	r2, r3, #1
 80187b0:	7402      	strb	r2, [r0, #16]
 80187b2:	3302      	adds	r3, #2
 80187b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80187b8:	6143      	str	r3, [r0, #20]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d0dd      	beq.n	801877a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187be:	881b      	ldrh	r3, [r3, #0]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d0da      	beq.n	801877a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187c4:	7604      	strb	r4, [r0, #24]
 80187c6:	e7d8      	b.n	801877a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187c8:	2000      	movs	r0, #0
 80187ca:	e7e4      	b.n	8018796 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080187cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80187cc:	6001      	str	r1, [r0, #0]
 80187ce:	2100      	movs	r1, #0
 80187d0:	b430      	push	{r4, r5}
 80187d2:	6041      	str	r1, [r0, #4]
 80187d4:	6815      	ldr	r5, [r2, #0]
 80187d6:	6085      	str	r5, [r0, #8]
 80187d8:	6852      	ldr	r2, [r2, #4]
 80187da:	6443      	str	r3, [r0, #68]	; 0x44
 80187dc:	9b02      	ldr	r3, [sp, #8]
 80187de:	60c2      	str	r2, [r0, #12]
 80187e0:	7401      	strb	r1, [r0, #16]
 80187e2:	6141      	str	r1, [r0, #20]
 80187e4:	7601      	strb	r1, [r0, #24]
 80187e6:	8701      	strh	r1, [r0, #56]	; 0x38
 80187e8:	8401      	strh	r1, [r0, #32]
 80187ea:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80187ee:	6483      	str	r3, [r0, #72]	; 0x48
 80187f0:	bc30      	pop	{r4, r5}
 80187f2:	f7f7 bf9b 	b.w	801072c <_ZN8touchgfx12TextProvider18initializeInternalEv>

080187f6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80187f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187f8:	4605      	mov	r5, r0
 80187fa:	4608      	mov	r0, r1
 80187fc:	b1e9      	cbz	r1, 801883a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80187fe:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8018802:	460b      	mov	r3, r1
 8018804:	4622      	mov	r2, r4
 8018806:	f101 0708 	add.w	r7, r1, #8
 801880a:	4626      	mov	r6, r4
 801880c:	6818      	ldr	r0, [r3, #0]
 801880e:	6859      	ldr	r1, [r3, #4]
 8018810:	3308      	adds	r3, #8
 8018812:	c603      	stmia	r6!, {r0, r1}
 8018814:	42bb      	cmp	r3, r7
 8018816:	4634      	mov	r4, r6
 8018818:	d1f7      	bne.n	801880a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801881a:	6818      	ldr	r0, [r3, #0]
 801881c:	6030      	str	r0, [r6, #0]
 801881e:	4610      	mov	r0, r2
 8018820:	889b      	ldrh	r3, [r3, #4]
 8018822:	80b3      	strh	r3, [r6, #4]
 8018824:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8018828:	015b      	lsls	r3, r3, #5
 801882a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801882e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8018832:	430b      	orrs	r3, r1
 8018834:	425b      	negs	r3, r3
 8018836:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801883a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801883c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801883c:	b538      	push	{r3, r4, r5, lr}
 801883e:	460c      	mov	r4, r1
 8018840:	6811      	ldr	r1, [r2, #0]
 8018842:	4610      	mov	r0, r2
 8018844:	68cd      	ldr	r5, [r1, #12]
 8018846:	4619      	mov	r1, r3
 8018848:	47a8      	blx	r5
 801884a:	2800      	cmp	r0, #0
 801884c:	bf08      	it	eq
 801884e:	4620      	moveq	r0, r4
 8018850:	bd38      	pop	{r3, r4, r5, pc}
	...

08018854 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018856:	4604      	mov	r4, r0
 8018858:	4615      	mov	r5, r2
 801885a:	4608      	mov	r0, r1
 801885c:	b93a      	cbnz	r2, 801886e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801885e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018862:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8018866:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801886a:	4628      	mov	r0, r5
 801886c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801886e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8018872:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8018876:	8893      	ldrh	r3, [r2, #4]
 8018878:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801887c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018880:	79ee      	ldrb	r6, [r5, #7]
 8018882:	4316      	orrs	r6, r2
 8018884:	19da      	adds	r2, r3, r7
 8018886:	b291      	uxth	r1, r2
 8018888:	291d      	cmp	r1, #29
 801888a:	b2b7      	uxth	r7, r6
 801888c:	d879      	bhi.n	8018982 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801888e:	2201      	movs	r2, #1
 8018890:	408a      	lsls	r2, r1
 8018892:	4974      	ldr	r1, [pc, #464]	; (8018a64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 8018894:	10f6      	asrs	r6, r6, #3
 8018896:	420a      	tst	r2, r1
 8018898:	d12d      	bne.n	80188f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801889a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801889e:	d070      	beq.n	8018982 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80188a0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80188a4:	462b      	mov	r3, r5
 80188a6:	f105 0e08 	add.w	lr, r5, #8
 80188aa:	4615      	mov	r5, r2
 80188ac:	4694      	mov	ip, r2
 80188ae:	6818      	ldr	r0, [r3, #0]
 80188b0:	6859      	ldr	r1, [r3, #4]
 80188b2:	3308      	adds	r3, #8
 80188b4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80188b8:	4573      	cmp	r3, lr
 80188ba:	4662      	mov	r2, ip
 80188bc:	d1f6      	bne.n	80188ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80188be:	6818      	ldr	r0, [r3, #0]
 80188c0:	f8cc 0000 	str.w	r0, [ip]
 80188c4:	889b      	ldrh	r3, [r3, #4]
 80188c6:	f8ac 3004 	strh.w	r3, [ip, #4]
 80188ca:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80188ce:	b2b3      	uxth	r3, r6
 80188d0:	1aca      	subs	r2, r1, r3
 80188d2:	b292      	uxth	r2, r2
 80188d4:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80188d8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80188dc:	10d2      	asrs	r2, r2, #3
 80188de:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80188e2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80188e6:	4302      	orrs	r2, r0
 80188e8:	1bcf      	subs	r7, r1, r7
 80188ea:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80188ee:	1afb      	subs	r3, r7, r3
 80188f0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80188f4:	e7b9      	b.n	801886a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80188f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80188f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80188fc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80188fe:	f640 6333 	movw	r3, #3635	; 0xe33
 8018902:	4299      	cmp	r1, r3
 8018904:	d110      	bne.n	8018928 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 8018906:	6803      	ldr	r3, [r0, #0]
 8018908:	68db      	ldr	r3, [r3, #12]
 801890a:	4798      	blx	r3
 801890c:	7b41      	ldrb	r1, [r0, #13]
 801890e:	00cb      	lsls	r3, r1, #3
 8018910:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018914:	7a03      	ldrb	r3, [r0, #8]
 8018916:	0648      	lsls	r0, r1, #25
 8018918:	ea43 0302 	orr.w	r3, r3, r2
 801891c:	bf44      	itt	mi
 801891e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018922:	b21b      	sxthmi	r3, r3
 8018924:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018928:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801892c:	462a      	mov	r2, r5
 801892e:	443b      	add	r3, r7
 8018930:	4433      	add	r3, r6
 8018932:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8018936:	f105 0c08 	add.w	ip, r5, #8
 801893a:	4635      	mov	r5, r6
 801893c:	b29b      	uxth	r3, r3
 801893e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018942:	4637      	mov	r7, r6
 8018944:	6810      	ldr	r0, [r2, #0]
 8018946:	6851      	ldr	r1, [r2, #4]
 8018948:	3208      	adds	r2, #8
 801894a:	c703      	stmia	r7!, {r0, r1}
 801894c:	4562      	cmp	r2, ip
 801894e:	463e      	mov	r6, r7
 8018950:	d1f7      	bne.n	8018942 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 8018952:	6810      	ldr	r0, [r2, #0]
 8018954:	6038      	str	r0, [r7, #0]
 8018956:	8892      	ldrh	r2, [r2, #4]
 8018958:	80ba      	strh	r2, [r7, #4]
 801895a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801895e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018962:	10db      	asrs	r3, r3, #3
 8018964:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018968:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801896c:	4313      	orrs	r3, r2
 801896e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018972:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8018976:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801897a:	1a9b      	subs	r3, r3, r2
 801897c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018980:	e773      	b.n	801886a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018982:	f640 611b 	movw	r1, #3611	; 0xe1b
 8018986:	f023 0204 	bic.w	r2, r3, #4
 801898a:	428a      	cmp	r2, r1
 801898c:	d003      	beq.n	8018996 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801898e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018992:	4293      	cmp	r3, r2
 8018994:	d120      	bne.n	80189d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 8018996:	3b01      	subs	r3, #1
 8018998:	4602      	mov	r2, r0
 801899a:	b29b      	uxth	r3, r3
 801899c:	4629      	mov	r1, r5
 801899e:	4620      	mov	r0, r4
 80189a0:	f7ff ff4c 	bl	801883c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80189a4:	7b41      	ldrb	r1, [r0, #13]
 80189a6:	00cb      	lsls	r3, r1, #3
 80189a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80189ac:	7a03      	ldrb	r3, [r0, #8]
 80189ae:	0649      	lsls	r1, r1, #25
 80189b0:	ea43 0302 	orr.w	r3, r3, r2
 80189b4:	bf44      	itt	mi
 80189b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80189ba:	b21b      	sxthmi	r3, r3
 80189bc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80189c0:	7b6b      	ldrb	r3, [r5, #13]
 80189c2:	7aaa      	ldrb	r2, [r5, #10]
 80189c4:	005b      	lsls	r3, r3, #1
 80189c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80189ca:	4313      	orrs	r3, r2
 80189cc:	115a      	asrs	r2, r3, #5
 80189ce:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80189d2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80189d6:	e036      	b.n	8018a46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80189d8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80189dc:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80189e0:	7a2a      	ldrb	r2, [r5, #8]
 80189e2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80189e6:	ea42 0201 	orr.w	r2, r2, r1
 80189ea:	f640 6109 	movw	r1, #3593	; 0xe09
 80189ee:	bf1c      	itt	ne
 80189f0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80189f4:	b212      	sxthne	r2, r2
 80189f6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80189fa:	f023 0210 	bic.w	r2, r3, #16
 80189fe:	428a      	cmp	r2, r1
 8018a00:	d003      	beq.n	8018a0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 8018a02:	f640 6213 	movw	r2, #3603	; 0xe13
 8018a06:	4293      	cmp	r3, r2
 8018a08:	d12a      	bne.n	8018a60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 8018a0a:	7b6e      	ldrb	r6, [r5, #13]
 8018a0c:	4629      	mov	r1, r5
 8018a0e:	0076      	lsls	r6, r6, #1
 8018a10:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018a14:	7aae      	ldrb	r6, [r5, #10]
 8018a16:	4316      	orrs	r6, r2
 8018a18:	f640 6213 	movw	r2, #3603	; 0xe13
 8018a1c:	4293      	cmp	r3, r2
 8018a1e:	bf18      	it	ne
 8018a20:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018a24:	4602      	mov	r2, r0
 8018a26:	bf14      	ite	ne
 8018a28:	b29b      	uxthne	r3, r3
 8018a2a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018a2e:	4620      	mov	r0, r4
 8018a30:	f7ff ff04 	bl	801883c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018a34:	7b43      	ldrb	r3, [r0, #13]
 8018a36:	7a82      	ldrb	r2, [r0, #10]
 8018a38:	005b      	lsls	r3, r3, #1
 8018a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a3e:	4313      	orrs	r3, r2
 8018a40:	1af6      	subs	r6, r6, r3
 8018a42:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8018a46:	7b69      	ldrb	r1, [r5, #13]
 8018a48:	00cb      	lsls	r3, r1, #3
 8018a4a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018a4e:	7a2b      	ldrb	r3, [r5, #8]
 8018a50:	4313      	orrs	r3, r2
 8018a52:	064a      	lsls	r2, r1, #25
 8018a54:	bf44      	itt	mi
 8018a56:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a5a:	b21b      	sxthmi	r3, r3
 8018a5c:	1bdb      	subs	r3, r3, r7
 8018a5e:	e747      	b.n	80188f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 8018a60:	2300      	movs	r3, #0
 8018a62:	e7b6      	b.n	80189d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 8018a64:	3fc00079 	.word	0x3fc00079

08018a68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a6c:	4604      	mov	r4, r0
 8018a6e:	b942      	cbnz	r2, 8018a82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018a74:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018a78:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8018a7c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018a80:	e047      	b.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018a82:	7b51      	ldrb	r1, [r2, #13]
 8018a84:	8893      	ldrh	r3, [r2, #4]
 8018a86:	010d      	lsls	r5, r1, #4
 8018a88:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8018a8c:	79d5      	ldrb	r5, [r2, #7]
 8018a8e:	4305      	orrs	r5, r0
 8018a90:	2d04      	cmp	r5, #4
 8018a92:	bfcc      	ite	gt
 8018a94:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018a98:	f04f 0e01 	movle.w	lr, #1
 8018a9c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018aa0:	f200 80ab 	bhi.w	8018bfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018aa4:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018aa8:	4283      	cmp	r3, r0
 8018aaa:	d216      	bcs.n	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018aac:	f240 605b 	movw	r0, #1627	; 0x65b
 8018ab0:	4283      	cmp	r3, r0
 8018ab2:	d859      	bhi.n	8018b68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018ab4:	f240 6057 	movw	r0, #1623	; 0x657
 8018ab8:	4283      	cmp	r3, r0
 8018aba:	d20e      	bcs.n	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018abc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018ac0:	d24a      	bcs.n	8018b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018ac2:	f240 604e 	movw	r0, #1614	; 0x64e
 8018ac6:	4283      	cmp	r3, r0
 8018ac8:	d207      	bcs.n	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018aca:	f240 601a 	movw	r0, #1562	; 0x61a
 8018ace:	4283      	cmp	r3, r0
 8018ad0:	d02a      	beq.n	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018ad2:	d821      	bhi.n	8018b18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018ad4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018ad8:	d35b      	bcc.n	8018b92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018ada:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8018ade:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018ae2:	f040 80d0 	bne.w	8018c86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018ae6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8018aea:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018aee:	f040 80ca 	bne.w	8018c86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018af2:	00cb      	lsls	r3, r1, #3
 8018af4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018af8:	7a13      	ldrb	r3, [r2, #8]
 8018afa:	0649      	lsls	r1, r1, #25
 8018afc:	ea43 0300 	orr.w	r3, r3, r0
 8018b00:	bf44      	itt	mi
 8018b02:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b06:	b21b      	sxthmi	r3, r3
 8018b08:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018b0c:	1b5d      	subs	r5, r3, r5
 8018b0e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018b12:	4610      	mov	r0, r2
 8018b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b18:	f240 604b 	movw	r0, #1611	; 0x64b
 8018b1c:	4283      	cmp	r3, r0
 8018b1e:	d338      	bcc.n	8018b92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018b20:	f240 604c 	movw	r0, #1612	; 0x64c
 8018b24:	4283      	cmp	r3, r0
 8018b26:	d9d8      	bls.n	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b28:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8018b2c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8018b30:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018b34:	f040 80f2 	bne.w	8018d1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8018b38:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018b3c:	f040 80ee 	bne.w	8018d1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8018b40:	00cb      	lsls	r3, r1, #3
 8018b42:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018b46:	7a13      	ldrb	r3, [r2, #8]
 8018b48:	064e      	lsls	r6, r1, #25
 8018b4a:	ea43 0300 	orr.w	r3, r3, r0
 8018b4e:	bf44      	itt	mi
 8018b50:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b54:	b21b      	sxthmi	r3, r3
 8018b56:	e7d9      	b.n	8018b0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018b58:	f240 6054 	movw	r0, #1620	; 0x654
 8018b5c:	4283      	cmp	r3, r0
 8018b5e:	d8e3      	bhi.n	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b60:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018b64:	d9e0      	bls.n	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b66:	e7b8      	b.n	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b68:	f240 6074 	movw	r0, #1652	; 0x674
 8018b6c:	4283      	cmp	r3, r0
 8018b6e:	d0b4      	beq.n	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b70:	d82d      	bhi.n	8018bce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018b72:	f240 605e 	movw	r0, #1630	; 0x65e
 8018b76:	4283      	cmp	r3, r0
 8018b78:	d804      	bhi.n	8018b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018b7a:	f240 605d 	movw	r0, #1629	; 0x65d
 8018b7e:	4283      	cmp	r3, r0
 8018b80:	d3d2      	bcc.n	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b82:	e7aa      	b.n	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b84:	f240 605f 	movw	r0, #1631	; 0x65f
 8018b88:	4283      	cmp	r3, r0
 8018b8a:	d0cd      	beq.n	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b8c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018b90:	d0a3      	beq.n	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b92:	00cb      	lsls	r3, r1, #3
 8018b94:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018b98:	7a13      	ldrb	r3, [r2, #8]
 8018b9a:	0649      	lsls	r1, r1, #25
 8018b9c:	ea43 0300 	orr.w	r3, r3, r0
 8018ba0:	bf44      	itt	mi
 8018ba2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018ba6:	b21b      	sxthmi	r3, r3
 8018ba8:	1b5d      	subs	r5, r3, r5
 8018baa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018bae:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018bb2:	7b53      	ldrb	r3, [r2, #13]
 8018bb4:	015b      	lsls	r3, r3, #5
 8018bb6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018bba:	7993      	ldrb	r3, [r2, #6]
 8018bbc:	430b      	orrs	r3, r1
 8018bbe:	2105      	movs	r1, #5
 8018bc0:	005b      	lsls	r3, r3, #1
 8018bc2:	fb93 f3f1 	sdiv	r3, r3, r1
 8018bc6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018bca:	440b      	add	r3, r1
 8018bcc:	e756      	b.n	8018a7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018bce:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018bd2:	4283      	cmp	r3, r0
 8018bd4:	d809      	bhi.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018bd6:	f240 60df 	movw	r0, #1759	; 0x6df
 8018bda:	4283      	cmp	r3, r0
 8018bdc:	f4bf af7d 	bcs.w	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018be0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018be4:	2b05      	cmp	r3, #5
 8018be6:	d8d4      	bhi.n	8018b92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018be8:	e777      	b.n	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018bea:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8018bee:	4283      	cmp	r3, r0
 8018bf0:	d09a      	beq.n	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018bf2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018bf6:	4283      	cmp	r3, r0
 8018bf8:	e7ca      	b.n	8018b90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018bfa:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8018bfe:	d22b      	bcs.n	8018c58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8018c00:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018c04:	4283      	cmp	r3, r0
 8018c06:	d28f      	bcs.n	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c08:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018c0c:	4283      	cmp	r3, r0
 8018c0e:	d816      	bhi.n	8018c3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018c10:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018c14:	4283      	cmp	r3, r0
 8018c16:	f4bf af60 	bcs.w	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c1a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018c1e:	4283      	cmp	r3, r0
 8018c20:	d80a      	bhi.n	8018c38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8018c22:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018c26:	4283      	cmp	r3, r0
 8018c28:	f4bf af57 	bcs.w	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c2c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018c30:	4283      	cmp	r3, r0
 8018c32:	f43f af79 	beq.w	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c36:	e7ac      	b.n	8018b92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018c38:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018c3c:	e7f8      	b.n	8018c30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018c3e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018c42:	4283      	cmp	r3, r0
 8018c44:	d802      	bhi.n	8018c4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018c46:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018c4a:	e798      	b.n	8018b7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018c4c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018c50:	4283      	cmp	r3, r0
 8018c52:	f47f af42 	bne.w	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c56:	e767      	b.n	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c58:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018c5c:	4283      	cmp	r3, r0
 8018c5e:	f43f af63 	beq.w	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c62:	d802      	bhi.n	8018c6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018c64:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018c68:	e7f2      	b.n	8018c50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018c6a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018c6e:	4283      	cmp	r3, r0
 8018c70:	d805      	bhi.n	8018c7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018c72:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018c76:	4283      	cmp	r3, r0
 8018c78:	f4ff af2f 	bcc.w	8018ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c7c:	e754      	b.n	8018b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c7e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018c82:	4283      	cmp	r3, r0
 8018c84:	e7af      	b.n	8018be6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018c86:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018c8a:	4617      	mov	r7, r2
 8018c8c:	4666      	mov	r6, ip
 8018c8e:	f102 0808 	add.w	r8, r2, #8
 8018c92:	46e6      	mov	lr, ip
 8018c94:	6838      	ldr	r0, [r7, #0]
 8018c96:	6879      	ldr	r1, [r7, #4]
 8018c98:	3708      	adds	r7, #8
 8018c9a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018c9e:	4547      	cmp	r7, r8
 8018ca0:	46f4      	mov	ip, lr
 8018ca2:	d1f6      	bne.n	8018c92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018ca4:	6838      	ldr	r0, [r7, #0]
 8018ca6:	f8ce 0000 	str.w	r0, [lr]
 8018caa:	88b9      	ldrh	r1, [r7, #4]
 8018cac:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018cb0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018cb4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018cb8:	d009      	beq.n	8018cce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8018cba:	7b51      	ldrb	r1, [r2, #13]
 8018cbc:	7992      	ldrb	r2, [r2, #6]
 8018cbe:	0149      	lsls	r1, r1, #5
 8018cc0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018cc4:	4311      	orrs	r1, r2
 8018cc6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018cca:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018cce:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018cd2:	b2ad      	uxth	r5, r5
 8018cd4:	d00d      	beq.n	8018cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8018cd6:	442b      	add	r3, r5
 8018cd8:	b29b      	uxth	r3, r3
 8018cda:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018cde:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018ce2:	10db      	asrs	r3, r3, #3
 8018ce4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018ce8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018cec:	4313      	orrs	r3, r2
 8018cee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018cf2:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018cf6:	00cb      	lsls	r3, r1, #3
 8018cf8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018cfc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018d00:	064f      	lsls	r7, r1, #25
 8018d02:	ea43 0302 	orr.w	r3, r3, r2
 8018d06:	bf44      	itt	mi
 8018d08:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018d0c:	b21b      	sxthmi	r3, r3
 8018d0e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018d12:	1b5b      	subs	r3, r3, r5
 8018d14:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018d18:	4632      	mov	r2, r6
 8018d1a:	e6fa      	b.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018d1c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018d20:	4617      	mov	r7, r2
 8018d22:	4666      	mov	r6, ip
 8018d24:	f102 0908 	add.w	r9, r2, #8
 8018d28:	46e0      	mov	r8, ip
 8018d2a:	6838      	ldr	r0, [r7, #0]
 8018d2c:	6879      	ldr	r1, [r7, #4]
 8018d2e:	3708      	adds	r7, #8
 8018d30:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018d34:	454f      	cmp	r7, r9
 8018d36:	46c4      	mov	ip, r8
 8018d38:	d1f6      	bne.n	8018d28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8018d3a:	6838      	ldr	r0, [r7, #0]
 8018d3c:	f8c8 0000 	str.w	r0, [r8]
 8018d40:	88b9      	ldrh	r1, [r7, #4]
 8018d42:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018d46:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018d4a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018d4e:	d009      	beq.n	8018d64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8018d50:	7b51      	ldrb	r1, [r2, #13]
 8018d52:	7992      	ldrb	r2, [r2, #6]
 8018d54:	0149      	lsls	r1, r1, #5
 8018d56:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018d5a:	4311      	orrs	r1, r2
 8018d5c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018d60:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018d64:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018d68:	d00e      	beq.n	8018d88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8018d6a:	eba3 030e 	sub.w	r3, r3, lr
 8018d6e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018d72:	b29b      	uxth	r3, r3
 8018d74:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018d78:	10db      	asrs	r3, r3, #3
 8018d7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018d7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018d82:	4313      	orrs	r3, r2
 8018d84:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018d88:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018d8c:	00cb      	lsls	r3, r1, #3
 8018d8e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018d92:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018d96:	0648      	lsls	r0, r1, #25
 8018d98:	ea43 0302 	orr.w	r3, r3, r2
 8018d9c:	bf44      	itt	mi
 8018d9e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018da2:	b21b      	sxthmi	r3, r3
 8018da4:	1b5d      	subs	r5, r3, r5
 8018da6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018daa:	e7b5      	b.n	8018d18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08018dac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018db0:	461e      	mov	r6, r3
 8018db2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018db4:	4604      	mov	r4, r0
 8018db6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018dba:	4617      	mov	r7, r2
 8018dbc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018dc0:	f7f7 fc0e 	bl	80105e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018dc4:	4605      	mov	r5, r0
 8018dc6:	b918      	cbnz	r0, 8018dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018dc8:	6030      	str	r0, [r6, #0]
 8018dca:	4628      	mov	r0, r5
 8018dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd0:	683b      	ldr	r3, [r7, #0]
 8018dd2:	4601      	mov	r1, r0
 8018dd4:	68db      	ldr	r3, [r3, #12]
 8018dd6:	4638      	mov	r0, r7
 8018dd8:	4798      	blx	r3
 8018dda:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018de2:	4602      	mov	r2, r0
 8018de4:	6030      	str	r0, [r6, #0]
 8018de6:	d213      	bcs.n	8018e10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8018de8:	4643      	mov	r3, r8
 8018dea:	4639      	mov	r1, r7
 8018dec:	4620      	mov	r0, r4
 8018dee:	f7ff fe3b 	bl	8018a68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018df2:	6030      	str	r0, [r6, #0]
 8018df4:	6833      	ldr	r3, [r6, #0]
 8018df6:	b143      	cbz	r3, 8018e0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8018df8:	7b5a      	ldrb	r2, [r3, #13]
 8018dfa:	7a9b      	ldrb	r3, [r3, #10]
 8018dfc:	0052      	lsls	r2, r2, #1
 8018dfe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018e02:	4313      	orrs	r3, r2
 8018e04:	bf0c      	ite	eq
 8018e06:	2301      	moveq	r3, #1
 8018e08:	2300      	movne	r3, #0
 8018e0a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8018e0e:	e7dc      	b.n	8018dca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8018e10:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018e14:	b29b      	uxth	r3, r3
 8018e16:	2b7f      	cmp	r3, #127	; 0x7f
 8018e18:	d804      	bhi.n	8018e24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018e1a:	4639      	mov	r1, r7
 8018e1c:	4620      	mov	r0, r4
 8018e1e:	f7ff fd19 	bl	8018854 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018e22:	e7e6      	b.n	8018df2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018e24:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d0e3      	beq.n	8018df4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018e2c:	f640 1302 	movw	r3, #2306	; 0x902
 8018e30:	429d      	cmp	r5, r3
 8018e32:	d1df      	bne.n	8018df4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018e34:	4601      	mov	r1, r0
 8018e36:	4620      	mov	r0, r4
 8018e38:	f7ff fcdd 	bl	80187f6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018e3c:	e7d9      	b.n	8018df2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08018e3e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018e3e:	b510      	push	{r4, lr}
 8018e40:	4604      	mov	r4, r0
 8018e42:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8018e46:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018e48:	b1f1      	cbz	r1, 8018e88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8018e4a:	2b0a      	cmp	r3, #10
 8018e4c:	d02f      	beq.n	8018eae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8018e4e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8018e50:	3901      	subs	r1, #1
 8018e52:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018e56:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8018e58:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8018e5c:	1c51      	adds	r1, r2, #1
 8018e5e:	b289      	uxth	r1, r1
 8018e60:	2901      	cmp	r1, #1
 8018e62:	bf84      	itt	hi
 8018e64:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018e68:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8018e6a:	f103 0201 	add.w	r2, r3, #1
 8018e6e:	8722      	strh	r2, [r4, #56]	; 0x38
 8018e70:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018e72:	bf98      	it	ls
 8018e74:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8018e76:	4413      	add	r3, r2
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	2b09      	cmp	r3, #9
 8018e7c:	bf88      	it	hi
 8018e7e:	3b0a      	subhi	r3, #10
 8018e80:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018e84:	8458      	strh	r0, [r3, #34]	; 0x22
 8018e86:	e7dc      	b.n	8018e42 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018e88:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018e8a:	2b0a      	cmp	r3, #10
 8018e8c:	d00f      	beq.n	8018eae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8018e8e:	4620      	mov	r0, r4
 8018e90:	f7ff fc70 	bl	8018774 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018e94:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018e96:	1c5a      	adds	r2, r3, #1
 8018e98:	8722      	strh	r2, [r4, #56]	; 0x38
 8018e9a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018e9c:	4413      	add	r3, r2
 8018e9e:	b29b      	uxth	r3, r3
 8018ea0:	2b09      	cmp	r3, #9
 8018ea2:	bf88      	it	hi
 8018ea4:	3b0a      	subhi	r3, #10
 8018ea6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018eaa:	8458      	strh	r0, [r3, #34]	; 0x22
 8018eac:	e7ec      	b.n	8018e88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8018eae:	bd10      	pop	{r4, pc}

08018eb0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018eb0:	b538      	push	{r3, r4, r5, lr}
 8018eb2:	4604      	mov	r4, r0
 8018eb4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018eb6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018eba:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8018ebc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8018ebe:	3a01      	subs	r2, #1
 8018ec0:	8702      	strh	r2, [r0, #56]	; 0x38
 8018ec2:	1c5a      	adds	r2, r3, #1
 8018ec4:	b292      	uxth	r2, r2
 8018ec6:	2a09      	cmp	r2, #9
 8018ec8:	bf86      	itte	hi
 8018eca:	3b09      	subhi	r3, #9
 8018ecc:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018ece:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8018ed0:	f7ff ffb5 	bl	8018e3e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018ed4:	8c23      	ldrh	r3, [r4, #32]
 8018ed6:	2b01      	cmp	r3, #1
 8018ed8:	bf9c      	itt	ls
 8018eda:	3301      	addls	r3, #1
 8018edc:	8423      	strhls	r3, [r4, #32]
 8018ede:	8be3      	ldrh	r3, [r4, #30]
 8018ee0:	b90b      	cbnz	r3, 8018ee6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8018ee2:	2302      	movs	r3, #2
 8018ee4:	83e3      	strh	r3, [r4, #30]
 8018ee6:	8be3      	ldrh	r3, [r4, #30]
 8018ee8:	4628      	mov	r0, r5
 8018eea:	3b01      	subs	r3, #1
 8018eec:	b29b      	uxth	r3, r3
 8018eee:	83e3      	strh	r3, [r4, #30]
 8018ef0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018ef4:	8365      	strh	r5, [r4, #26]
 8018ef6:	bd38      	pop	{r3, r4, r5, pc}

08018ef8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018ef8:	428a      	cmp	r2, r1
 8018efa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018efe:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8018f00:	d931      	bls.n	8018f66 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8018f02:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8018f04:	1a54      	subs	r4, r2, r1
 8018f06:	19ee      	adds	r6, r5, r7
 8018f08:	3e01      	subs	r6, #1
 8018f0a:	fa1f fe84 	uxth.w	lr, r4
 8018f0e:	b2b4      	uxth	r4, r6
 8018f10:	eba4 090e 	sub.w	r9, r4, lr
 8018f14:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8018f18:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8018f1c:	fa1f f989 	uxth.w	r9, r9
 8018f20:	2c09      	cmp	r4, #9
 8018f22:	4626      	mov	r6, r4
 8018f24:	bf88      	it	hi
 8018f26:	f1a4 060a 	subhi.w	r6, r4, #10
 8018f2a:	f1bc 0f00 	cmp.w	ip, #0
 8018f2e:	bf08      	it	eq
 8018f30:	f04f 0c02 	moveq.w	ip, #2
 8018f34:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018f38:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018f3c:	3c01      	subs	r4, #1
 8018f3e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8018f42:	fa1f fc8c 	uxth.w	ip, ip
 8018f46:	b2a4      	uxth	r4, r4
 8018f48:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018f4c:	454c      	cmp	r4, r9
 8018f4e:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8018f52:	d1e5      	bne.n	8018f20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8018f54:	eba5 050e 	sub.w	r5, r5, lr
 8018f58:	eb0e 0408 	add.w	r4, lr, r8
 8018f5c:	8705      	strh	r5, [r0, #56]	; 0x38
 8018f5e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8018f62:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8018f66:	250a      	movs	r5, #10
 8018f68:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8018f6a:	1a64      	subs	r4, r4, r1
 8018f6c:	4439      	add	r1, r7
 8018f6e:	b289      	uxth	r1, r1
 8018f70:	2909      	cmp	r1, #9
 8018f72:	bf88      	it	hi
 8018f74:	390a      	subhi	r1, #10
 8018f76:	8704      	strh	r4, [r0, #56]	; 0x38
 8018f78:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018f7a:	b18a      	cbz	r2, 8018fa0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8018f7c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8018f7e:	3a01      	subs	r2, #1
 8018f80:	3101      	adds	r1, #1
 8018f82:	b292      	uxth	r2, r2
 8018f84:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018f88:	8701      	strh	r1, [r0, #56]	; 0x38
 8018f8a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018f8c:	b901      	cbnz	r1, 8018f90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8018f8e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018f90:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018f92:	3901      	subs	r1, #1
 8018f94:	b289      	uxth	r1, r1
 8018f96:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018f98:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018f9c:	844c      	strh	r4, [r1, #34]	; 0x22
 8018f9e:	e7ec      	b.n	8018f7a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8018fa0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fa4:	f7ff bf4b 	b.w	8018e3e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018fa8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018fa8:	b570      	push	{r4, r5, r6, lr}
 8018faa:	2500      	movs	r5, #0
 8018fac:	4295      	cmp	r5, r2
 8018fae:	d011      	beq.n	8018fd4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018fb0:	8bc4      	ldrh	r4, [r0, #30]
 8018fb2:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018fb6:	4414      	add	r4, r2
 8018fb8:	3c01      	subs	r4, #1
 8018fba:	1b64      	subs	r4, r4, r5
 8018fbc:	b2a4      	uxth	r4, r4
 8018fbe:	2c01      	cmp	r4, #1
 8018fc0:	bf88      	it	hi
 8018fc2:	3c02      	subhi	r4, #2
 8018fc4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018fc8:	8b64      	ldrh	r4, [r4, #26]
 8018fca:	42b4      	cmp	r4, r6
 8018fcc:	d117      	bne.n	8018ffe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018fce:	3501      	adds	r5, #1
 8018fd0:	b2ad      	uxth	r5, r5
 8018fd2:	e7eb      	b.n	8018fac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018fd4:	2400      	movs	r4, #0
 8018fd6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018fda:	4413      	add	r3, r2
 8018fdc:	b2a2      	uxth	r2, r4
 8018fde:	429a      	cmp	r2, r3
 8018fe0:	da0f      	bge.n	8019002 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8018fe2:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8018fe4:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8018fe8:	4432      	add	r2, r6
 8018fea:	b292      	uxth	r2, r2
 8018fec:	2a09      	cmp	r2, #9
 8018fee:	bf88      	it	hi
 8018ff0:	3a0a      	subhi	r2, #10
 8018ff2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018ff6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8018ff8:	3401      	adds	r4, #1
 8018ffa:	42aa      	cmp	r2, r5
 8018ffc:	d0ee      	beq.n	8018fdc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018ffe:	2000      	movs	r0, #0
 8019000:	bd70      	pop	{r4, r5, r6, pc}
 8019002:	2001      	movs	r0, #1
 8019004:	e7fc      	b.n	8019000 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019006 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019006:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801900a:	4605      	mov	r5, r0
 801900c:	4616      	mov	r6, r2
 801900e:	1c8c      	adds	r4, r1, #2
 8019010:	8809      	ldrh	r1, [r1, #0]
 8019012:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019016:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801901a:	42b3      	cmp	r3, r6
 801901c:	d124      	bne.n	8019068 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801901e:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019022:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019026:	f001 070f 	and.w	r7, r1, #15
 801902a:	f8cd 8000 	str.w	r8, [sp]
 801902e:	464b      	mov	r3, r9
 8019030:	4652      	mov	r2, sl
 8019032:	4621      	mov	r1, r4
 8019034:	4628      	mov	r0, r5
 8019036:	f7ff ffb7 	bl	8018fa8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801903a:	4683      	mov	fp, r0
 801903c:	b168      	cbz	r0, 801905a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801903e:	eb0a 0109 	add.w	r1, sl, r9
 8019042:	4441      	add	r1, r8
 8019044:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019048:	463a      	mov	r2, r7
 801904a:	4649      	mov	r1, r9
 801904c:	4628      	mov	r0, r5
 801904e:	f7ff ff53 	bl	8018ef8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019052:	4658      	mov	r0, fp
 8019054:	b003      	add	sp, #12
 8019056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801905a:	eb07 010a 	add.w	r1, r7, sl
 801905e:	4449      	add	r1, r9
 8019060:	4441      	add	r1, r8
 8019062:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019066:	e7d2      	b.n	801900e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019068:	f04f 0b00 	mov.w	fp, #0
 801906c:	e7f1      	b.n	8019052 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801906e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801906e:	b570      	push	{r4, r5, r6, lr}
 8019070:	8810      	ldrh	r0, [r2, #0]
 8019072:	4298      	cmp	r0, r3
 8019074:	d817      	bhi.n	80190a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019076:	1e48      	subs	r0, r1, #1
 8019078:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801907c:	4298      	cmp	r0, r3
 801907e:	d312      	bcc.n	80190a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019080:	2400      	movs	r4, #0
 8019082:	428c      	cmp	r4, r1
 8019084:	d20f      	bcs.n	80190a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019086:	1860      	adds	r0, r4, r1
 8019088:	1040      	asrs	r0, r0, #1
 801908a:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801908e:	0085      	lsls	r5, r0, #2
 8019090:	42b3      	cmp	r3, r6
 8019092:	d902      	bls.n	801909a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019094:	3001      	adds	r0, #1
 8019096:	b284      	uxth	r4, r0
 8019098:	e7f3      	b.n	8019082 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801909a:	d201      	bcs.n	80190a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801909c:	b281      	uxth	r1, r0
 801909e:	e7f0      	b.n	8019082 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80190a0:	442a      	add	r2, r5
 80190a2:	8850      	ldrh	r0, [r2, #2]
 80190a4:	bd70      	pop	{r4, r5, r6, pc}
 80190a6:	2000      	movs	r0, #0
 80190a8:	e7fc      	b.n	80190a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080190aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80190aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190ae:	4604      	mov	r4, r0
 80190b0:	260b      	movs	r6, #11
 80190b2:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80190b4:	886f      	ldrh	r7, [r5, #2]
 80190b6:	087f      	lsrs	r7, r7, #1
 80190b8:	3e01      	subs	r6, #1
 80190ba:	d013      	beq.n	80190e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80190bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80190be:	462a      	mov	r2, r5
 80190c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80190c4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80190c8:	4639      	mov	r1, r7
 80190ca:	4643      	mov	r3, r8
 80190cc:	4620      	mov	r0, r4
 80190ce:	f7ff ffce 	bl	801906e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80190d2:	b138      	cbz	r0, 80190e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80190d4:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80190d8:	4642      	mov	r2, r8
 80190da:	4620      	mov	r0, r4
 80190dc:	f7ff ff93 	bl	8019006 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80190e0:	2800      	cmp	r0, #0
 80190e2:	d1e9      	bne.n	80190b8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80190e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080190e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80190e8:	b570      	push	{r4, r5, r6, lr}
 80190ea:	694a      	ldr	r2, [r1, #20]
 80190ec:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80190ee:	684b      	ldr	r3, [r1, #4]
 80190f0:	1b54      	subs	r4, r2, r5
 80190f2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80190f4:	f000 8107 	beq.w	8019306 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 80190f8:	1b9b      	subs	r3, r3, r6
 80190fa:	d003      	beq.n	8019104 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80190fc:	2210      	movs	r2, #16
 80190fe:	4363      	muls	r3, r4
 8019100:	fb93 f3f2 	sdiv	r3, r3, r2
 8019104:	680c      	ldr	r4, [r1, #0]
 8019106:	698a      	ldr	r2, [r1, #24]
 8019108:	1b65      	subs	r5, r4, r5
 801910a:	f000 80fe 	beq.w	801930a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801910e:	1b92      	subs	r2, r2, r6
 8019110:	d003      	beq.n	801911a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019112:	2410      	movs	r4, #16
 8019114:	436a      	muls	r2, r5
 8019116:	fb92 f2f4 	sdiv	r2, r2, r4
 801911a:	1a9b      	subs	r3, r3, r2
 801911c:	ee07 3a90 	vmov	s15, r3
 8019120:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8019348 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8019124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801912c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019130:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019134:	460a      	mov	r2, r1
 8019136:	eeb1 6a43 	vneg.f32	s12, s6
 801913a:	4603      	mov	r3, r0
 801913c:	f100 040c 	add.w	r4, r0, #12
 8019140:	edd2 7a02 	vldr	s15, [r2, #8]
 8019144:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019148:	ece3 6a01 	vstmia	r3!, {s13}
 801914c:	edd2 7a03 	vldr	s15, [r2, #12]
 8019150:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019154:	edc3 7a02 	vstr	s15, [r3, #8]
 8019158:	edd2 7a04 	vldr	s15, [r2, #16]
 801915c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019160:	429c      	cmp	r4, r3
 8019162:	edc3 7a05 	vstr	s15, [r3, #20]
 8019166:	f102 0214 	add.w	r2, r2, #20
 801916a:	d1e9      	bne.n	8019140 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801916c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801916e:	698b      	ldr	r3, [r1, #24]
 8019170:	edd0 4a02 	vldr	s9, [r0, #8]
 8019174:	1a9b      	subs	r3, r3, r2
 8019176:	ee07 3a90 	vmov	s15, r3
 801917a:	684b      	ldr	r3, [r1, #4]
 801917c:	edd0 3a00 	vldr	s7, [r0]
 8019180:	1a9b      	subs	r3, r3, r2
 8019182:	edd0 6a01 	vldr	s13, [r0, #4]
 8019186:	ee07 3a10 	vmov	s14, r3
 801918a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801918e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019192:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019196:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801919a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801919e:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80191a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80191a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80191aa:	ee67 7a83 	vmul.f32	s15, s15, s6
 80191ae:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80191b2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80191b4:	694a      	ldr	r2, [r1, #20]
 80191b6:	ed90 5a05 	vldr	s10, [r0, #20]
 80191ba:	1b13      	subs	r3, r2, r4
 80191bc:	ee07 3a10 	vmov	s14, r3
 80191c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191c4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80191c8:	680b      	ldr	r3, [r1, #0]
 80191ca:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80191ce:	1b1b      	subs	r3, r3, r4
 80191d0:	ee07 3a10 	vmov	s14, r3
 80191d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191d8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80191dc:	eee6 4a87 	vfma.f32	s9, s13, s14
 80191e0:	ee64 4a86 	vmul.f32	s9, s9, s12
 80191e4:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80191e8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80191ea:	698b      	ldr	r3, [r1, #24]
 80191ec:	ed90 2a03 	vldr	s4, [r0, #12]
 80191f0:	1a9b      	subs	r3, r3, r2
 80191f2:	ee06 3a90 	vmov	s13, r3
 80191f6:	684b      	ldr	r3, [r1, #4]
 80191f8:	edd0 5a04 	vldr	s11, [r0, #16]
 80191fc:	1a9b      	subs	r3, r3, r2
 80191fe:	ee07 3a10 	vmov	s14, r3
 8019202:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019206:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801920a:	ee66 6a84 	vmul.f32	s13, s13, s8
 801920e:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019212:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019216:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801921a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801921e:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019222:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019226:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801922a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801922c:	694a      	ldr	r2, [r1, #20]
 801922e:	ed90 1a07 	vldr	s2, [r0, #28]
 8019232:	1b13      	subs	r3, r2, r4
 8019234:	ee07 3a10 	vmov	s14, r3
 8019238:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801923c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019240:	680b      	ldr	r3, [r1, #0]
 8019242:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019246:	1b1b      	subs	r3, r3, r4
 8019248:	ee07 3a10 	vmov	s14, r3
 801924c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019250:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019254:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019258:	ee25 5a06 	vmul.f32	s10, s10, s12
 801925c:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019260:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019262:	698b      	ldr	r3, [r1, #24]
 8019264:	edd0 5a08 	vldr	s11, [r0, #32]
 8019268:	1a9b      	subs	r3, r3, r2
 801926a:	ee07 3a10 	vmov	s14, r3
 801926e:	684b      	ldr	r3, [r1, #4]
 8019270:	edd0 2a06 	vldr	s5, [r0, #24]
 8019274:	1a9b      	subs	r3, r3, r2
 8019276:	ee01 3a90 	vmov	s3, r3
 801927a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801927e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019282:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019286:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801928a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801928e:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019292:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019296:	eea1 7a21 	vfma.f32	s14, s2, s3
 801929a:	ee27 7a03 	vmul.f32	s14, s14, s6
 801929e:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80192a2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80192a4:	694a      	ldr	r2, [r1, #20]
 80192a6:	1b13      	subs	r3, r2, r4
 80192a8:	ee03 3a10 	vmov	s6, r3
 80192ac:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80192b0:	ee23 3a04 	vmul.f32	s6, s6, s8
 80192b4:	680b      	ldr	r3, [r1, #0]
 80192b6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80192ba:	1b1b      	subs	r3, r3, r4
 80192bc:	ee03 3a10 	vmov	s6, r3
 80192c0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80192c4:	ee23 4a04 	vmul.f32	s8, s6, s8
 80192c8:	eee1 5a04 	vfma.f32	s11, s2, s8
 80192cc:	ee25 6a86 	vmul.f32	s12, s11, s12
 80192d0:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80192d4:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80192d8:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80192dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192e0:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80192e4:	dd13      	ble.n	801930e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80192e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80192ea:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80192ee:	eee3 7a87 	vfma.f32	s15, s7, s14
 80192f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80192f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192fa:	63c3      	str	r3, [r0, #60]	; 0x3c
 80192fc:	dd15      	ble.n	801932a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80192fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019302:	6403      	str	r3, [r0, #64]	; 0x40
 8019304:	bd70      	pop	{r4, r5, r6, pc}
 8019306:	4623      	mov	r3, r4
 8019308:	e6fc      	b.n	8019104 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801930a:	462a      	mov	r2, r5
 801930c:	e705      	b.n	801911a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801930e:	d502      	bpl.n	8019316 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8019310:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019314:	e7e9      	b.n	80192ea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8019316:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801931a:	eea3 2a85 	vfma.f32	s4, s7, s10
 801931e:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019326:	dade      	bge.n	80192e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8019328:	e7f2      	b.n	8019310 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801932a:	d502      	bpl.n	8019332 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801932c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019330:	e7e7      	b.n	8019302 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8019332:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019336:	eee3 4a86 	vfma.f32	s9, s7, s12
 801933a:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801933e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019342:	dadc      	bge.n	80192fe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8019344:	e7f2      	b.n	801932c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8019346:	bf00      	nop
 8019348:	3d800000 	.word	0x3d800000

0801934c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801934c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019350:	2714      	movs	r7, #20
 8019352:	435f      	muls	r7, r3
 8019354:	eb02 0c07 	add.w	ip, r2, r7
 8019358:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801935c:	f115 0e0f 	adds.w	lr, r5, #15
 8019360:	f100 80a2 	bmi.w	80194a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019364:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019368:	2614      	movs	r6, #20
 801936a:	9c08      	ldr	r4, [sp, #32]
 801936c:	f8c0 e014 	str.w	lr, [r0, #20]
 8019370:	4366      	muls	r6, r4
 8019372:	eb02 0806 	add.w	r8, r2, r6
 8019376:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801937a:	f115 040f 	adds.w	r4, r5, #15
 801937e:	f100 809f 	bmi.w	80194c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019382:	1124      	asrs	r4, r4, #4
 8019384:	eba4 040e 	sub.w	r4, r4, lr
 8019388:	6184      	str	r4, [r0, #24]
 801938a:	2c00      	cmp	r4, #0
 801938c:	f000 808a 	beq.w	80194a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019390:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019394:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019398:	5995      	ldr	r5, [r2, r6]
 801939a:	eba4 0809 	sub.w	r8, r4, r9
 801939e:	59d4      	ldr	r4, [r2, r7]
 80193a0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80193a4:	eba5 0a04 	sub.w	sl, r5, r4
 80193a8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80193ac:	fb0e fe05 	mul.w	lr, lr, r5
 80193b0:	fb0a ee19 	mls	lr, sl, r9, lr
 80193b4:	fb08 e404 	mla	r4, r8, r4, lr
 80193b8:	3c01      	subs	r4, #1
 80193ba:	19a4      	adds	r4, r4, r6
 80193bc:	f100 808c 	bmi.w	80194d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80193c0:	fb94 fef6 	sdiv	lr, r4, r6
 80193c4:	fb06 441e 	mls	r4, r6, lr, r4
 80193c8:	f8c0 e000 	str.w	lr, [r0]
 80193cc:	6104      	str	r4, [r0, #16]
 80193ce:	2d00      	cmp	r5, #0
 80193d0:	f2c0 8095 	blt.w	80194fe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80193d4:	fb95 f4f6 	sdiv	r4, r5, r6
 80193d8:	fb06 5514 	mls	r5, r6, r4, r5
 80193dc:	6044      	str	r4, [r0, #4]
 80193de:	6085      	str	r5, [r0, #8]
 80193e0:	60c6      	str	r6, [r0, #12]
 80193e2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80193e6:	6945      	ldr	r5, [r0, #20]
 80193e8:	59d2      	ldr	r2, [r2, r7]
 80193ea:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80193ee:	ee07 4a10 	vmov	s14, r4
 80193f2:	6804      	ldr	r4, [r0, #0]
 80193f4:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8019520 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80193f8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80193fc:	ee07 2a90 	vmov	s15, r2
 8019400:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019408:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801940c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019410:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019414:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019418:	edd3 6a00 	vldr	s13, [r3]
 801941c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019420:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8019424:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019428:	edc0 6a07 	vstr	s13, [r0, #28]
 801942c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019430:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8019434:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019438:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801943c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019440:	ed80 6a08 	vstr	s12, [r0, #32]
 8019444:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8019446:	6242      	str	r2, [r0, #36]	; 0x24
 8019448:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801944c:	ed93 6a03 	vldr	s12, [r3, #12]
 8019450:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019454:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019458:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801945c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8019460:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019464:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8019468:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801946c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8019470:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019472:	6302      	str	r2, [r0, #48]	; 0x30
 8019474:	ed93 6a06 	vldr	s12, [r3, #24]
 8019478:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801947c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019480:	eeb0 7a46 	vmov.f32	s14, s12
 8019484:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8019488:	eea6 7a27 	vfma.f32	s14, s12, s15
 801948c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019490:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8019494:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8019498:	eee6 7a87 	vfma.f32	s15, s13, s14
 801949c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80194a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80194a2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80194a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194a8:	2410      	movs	r4, #16
 80194aa:	f1c5 0501 	rsb	r5, r5, #1
 80194ae:	f015 050f 	ands.w	r5, r5, #15
 80194b2:	fb9e fef4 	sdiv	lr, lr, r4
 80194b6:	bf18      	it	ne
 80194b8:	2501      	movne	r5, #1
 80194ba:	ebae 0e05 	sub.w	lr, lr, r5
 80194be:	e753      	b.n	8019368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80194c0:	f04f 0910 	mov.w	r9, #16
 80194c4:	f1c5 0501 	rsb	r5, r5, #1
 80194c8:	f015 050f 	ands.w	r5, r5, #15
 80194cc:	fb94 f4f9 	sdiv	r4, r4, r9
 80194d0:	bf18      	it	ne
 80194d2:	2501      	movne	r5, #1
 80194d4:	1b64      	subs	r4, r4, r5
 80194d6:	e755      	b.n	8019384 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80194d8:	4264      	negs	r4, r4
 80194da:	fb94 fef6 	sdiv	lr, r4, r6
 80194de:	fb06 441e 	mls	r4, r6, lr, r4
 80194e2:	f1ce 0800 	rsb	r8, lr, #0
 80194e6:	f8c0 8000 	str.w	r8, [r0]
 80194ea:	6104      	str	r4, [r0, #16]
 80194ec:	2c00      	cmp	r4, #0
 80194ee:	f43f af6e 	beq.w	80193ce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80194f2:	ea6f 0e0e 	mvn.w	lr, lr
 80194f6:	1b34      	subs	r4, r6, r4
 80194f8:	f8c0 e000 	str.w	lr, [r0]
 80194fc:	e766      	b.n	80193cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80194fe:	426d      	negs	r5, r5
 8019500:	fb95 f4f6 	sdiv	r4, r5, r6
 8019504:	fb06 5514 	mls	r5, r6, r4, r5
 8019508:	f1c4 0e00 	rsb	lr, r4, #0
 801950c:	f8c0 e004 	str.w	lr, [r0, #4]
 8019510:	6085      	str	r5, [r0, #8]
 8019512:	2d00      	cmp	r5, #0
 8019514:	f43f af64 	beq.w	80193e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019518:	43e4      	mvns	r4, r4
 801951a:	1b75      	subs	r5, r6, r5
 801951c:	6044      	str	r4, [r0, #4]
 801951e:	e75e      	b.n	80193de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019520:	3d800000 	.word	0x3d800000

08019524 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019524:	4b01      	ldr	r3, [pc, #4]	; (801952c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019526:	6018      	str	r0, [r3, #0]
 8019528:	4770      	bx	lr
 801952a:	bf00      	nop
 801952c:	2004f698 	.word	0x2004f698

08019530 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019530:	4b06      	ldr	r3, [pc, #24]	; (801954c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019532:	881a      	ldrh	r2, [r3, #0]
 8019534:	4282      	cmp	r2, r0
 8019536:	d807      	bhi.n	8019548 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019538:	4b05      	ldr	r3, [pc, #20]	; (8019550 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801953a:	881b      	ldrh	r3, [r3, #0]
 801953c:	4413      	add	r3, r2
 801953e:	4298      	cmp	r0, r3
 8019540:	bfac      	ite	ge
 8019542:	2000      	movge	r0, #0
 8019544:	2001      	movlt	r0, #1
 8019546:	4770      	bx	lr
 8019548:	2000      	movs	r0, #0
 801954a:	4770      	bx	lr
 801954c:	2004f6b8 	.word	0x2004f6b8
 8019550:	2004f6bc 	.word	0x2004f6bc

08019554 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019554:	b508      	push	{r3, lr}
 8019556:	4601      	mov	r1, r0
 8019558:	f7ff ffea 	bl	8019530 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801955c:	b118      	cbz	r0, 8019566 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801955e:	4b02      	ldr	r3, [pc, #8]	; (8019568 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019566:	bd08      	pop	{r3, pc}
 8019568:	2004f69c 	.word	0x2004f69c

0801956c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801956c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801956e:	4c24      	ldr	r4, [pc, #144]	; (8019600 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019570:	6823      	ldr	r3, [r4, #0]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d042      	beq.n	80195fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019576:	4a23      	ldr	r2, [pc, #140]	; (8019604 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019578:	4d23      	ldr	r5, [pc, #140]	; (8019608 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801957a:	8811      	ldrh	r1, [r2, #0]
 801957c:	f8b5 c000 	ldrh.w	ip, [r5]
 8019580:	4822      	ldr	r0, [pc, #136]	; (801960c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8019582:	4461      	add	r1, ip
 8019584:	1c4a      	adds	r2, r1, #1
 8019586:	f022 0201 	bic.w	r2, r2, #1
 801958a:	008f      	lsls	r7, r1, #2
 801958c:	0412      	lsls	r2, r2, #16
 801958e:	19de      	adds	r6, r3, r7
 8019590:	0c12      	lsrs	r2, r2, #16
 8019592:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019596:	6006      	str	r6, [r0, #0]
 8019598:	4e1d      	ldr	r6, [pc, #116]	; (8019610 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801959a:	19da      	adds	r2, r3, r7
 801959c:	6032      	str	r2, [r6, #0]
 801959e:	220e      	movs	r2, #14
 80195a0:	fb02 f20c 	mul.w	r2, r2, ip
 80195a4:	3203      	adds	r2, #3
 80195a6:	f022 0203 	bic.w	r2, r2, #3
 80195aa:	443a      	add	r2, r7
 80195ac:	4f19      	ldr	r7, [pc, #100]	; (8019614 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80195ae:	4413      	add	r3, r2
 80195b0:	603b      	str	r3, [r7, #0]
 80195b2:	2300      	movs	r3, #0
 80195b4:	4f18      	ldr	r7, [pc, #96]	; (8019618 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80195b6:	469c      	mov	ip, r3
 80195b8:	803b      	strh	r3, [r7, #0]
 80195ba:	4f18      	ldr	r7, [pc, #96]	; (801961c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80195bc:	683f      	ldr	r7, [r7, #0]
 80195be:	1aba      	subs	r2, r7, r2
 80195c0:	4f17      	ldr	r7, [pc, #92]	; (8019620 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80195c2:	603a      	str	r2, [r7, #0]
 80195c4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80195c8:	4a16      	ldr	r2, [pc, #88]	; (8019624 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80195ca:	8013      	strh	r3, [r2, #0]
 80195cc:	428b      	cmp	r3, r1
 80195ce:	d10d      	bne.n	80195ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80195d0:	2300      	movs	r3, #0
 80195d2:	240e      	movs	r4, #14
 80195d4:	882d      	ldrh	r5, [r5, #0]
 80195d6:	6830      	ldr	r0, [r6, #0]
 80195d8:	429d      	cmp	r5, r3
 80195da:	d90f      	bls.n	80195fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80195dc:	fb04 0203 	mla	r2, r4, r3, r0
 80195e0:	7b11      	ldrb	r1, [r2, #12]
 80195e2:	3301      	adds	r3, #1
 80195e4:	f36f 1145 	bfc	r1, #5, #1
 80195e8:	7311      	strb	r1, [r2, #12]
 80195ea:	e7f5      	b.n	80195d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80195ec:	6822      	ldr	r2, [r4, #0]
 80195ee:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80195f2:	6802      	ldr	r2, [r0, #0]
 80195f4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80195f8:	3301      	adds	r3, #1
 80195fa:	e7e7      	b.n	80195cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80195fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195fe:	bf00      	nop
 8019600:	2004f69c 	.word	0x2004f69c
 8019604:	2004f6b8 	.word	0x2004f6b8
 8019608:	2004f6bc 	.word	0x2004f6bc
 801960c:	2004f6b0 	.word	0x2004f6b0
 8019610:	2004f6a0 	.word	0x2004f6a0
 8019614:	2004f6a8 	.word	0x2004f6a8
 8019618:	2004f6ba 	.word	0x2004f6ba
 801961c:	2004f6a4 	.word	0x2004f6a4
 8019620:	2004f6b4 	.word	0x2004f6b4
 8019624:	2004f6ac 	.word	0x2004f6ac

08019628 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019628:	4b06      	ldr	r3, [pc, #24]	; (8019644 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	b943      	cbnz	r3, 8019640 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801962e:	b139      	cbz	r1, 8019640 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019630:	4b05      	ldr	r3, [pc, #20]	; (8019648 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019632:	801a      	strh	r2, [r3, #0]
 8019634:	4b05      	ldr	r3, [pc, #20]	; (801964c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019636:	6019      	str	r1, [r3, #0]
 8019638:	4b05      	ldr	r3, [pc, #20]	; (8019650 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801963a:	6018      	str	r0, [r3, #0]
 801963c:	f7ff bf96 	b.w	801956c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019640:	4770      	bx	lr
 8019642:	bf00      	nop
 8019644:	2004f6a8 	.word	0x2004f6a8
 8019648:	2004f6bc 	.word	0x2004f6bc
 801964c:	2004f6a4 	.word	0x2004f6a4
 8019650:	2004f69c 	.word	0x2004f69c

08019654 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019654:	b470      	push	{r4, r5, r6}
 8019656:	4c07      	ldr	r4, [pc, #28]	; (8019674 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019658:	4605      	mov	r5, r0
 801965a:	6826      	ldr	r6, [r4, #0]
 801965c:	4610      	mov	r0, r2
 801965e:	9a03      	ldr	r2, [sp, #12]
 8019660:	b936      	cbnz	r6, 8019670 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019662:	6025      	str	r5, [r4, #0]
 8019664:	4c04      	ldr	r4, [pc, #16]	; (8019678 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019666:	8021      	strh	r1, [r4, #0]
 8019668:	bc70      	pop	{r4, r5, r6}
 801966a:	4619      	mov	r1, r3
 801966c:	f7ff bfdc 	b.w	8019628 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019670:	bc70      	pop	{r4, r5, r6}
 8019672:	4770      	bx	lr
 8019674:	2004f6c0 	.word	0x2004f6c0
 8019678:	2004f6b8 	.word	0x2004f6b8

0801967c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801967c:	4a12      	ldr	r2, [pc, #72]	; (80196c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801967e:	8803      	ldrh	r3, [r0, #0]
 8019680:	8812      	ldrh	r2, [r2, #0]
 8019682:	4293      	cmp	r3, r2
 8019684:	d207      	bcs.n	8019696 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8019686:	2114      	movs	r1, #20
 8019688:	4a10      	ldr	r2, [pc, #64]	; (80196cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801968a:	6812      	ldr	r2, [r2, #0]
 801968c:	fb01 2303 	mla	r3, r1, r3, r2
 8019690:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019694:	4770      	bx	lr
 8019696:	490e      	ldr	r1, [pc, #56]	; (80196d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019698:	8809      	ldrh	r1, [r1, #0]
 801969a:	4411      	add	r1, r2
 801969c:	428b      	cmp	r3, r1
 801969e:	da04      	bge.n	80196aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80196a0:	1a9b      	subs	r3, r3, r2
 80196a2:	4a0c      	ldr	r2, [pc, #48]	; (80196d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80196a4:	210e      	movs	r1, #14
 80196a6:	6812      	ldr	r2, [r2, #0]
 80196a8:	e7f0      	b.n	801968c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80196aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80196ae:	4293      	cmp	r3, r2
 80196b0:	d108      	bne.n	80196c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80196b2:	4b09      	ldr	r3, [pc, #36]	; (80196d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80196b4:	781b      	ldrb	r3, [r3, #0]
 80196b6:	b91b      	cbnz	r3, 80196c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80196b8:	4b08      	ldr	r3, [pc, #32]	; (80196dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80196ba:	f9b3 0000 	ldrsh.w	r0, [r3]
 80196be:	4770      	bx	lr
 80196c0:	4b07      	ldr	r3, [pc, #28]	; (80196e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80196c2:	e7fa      	b.n	80196ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80196c4:	2000      	movs	r0, #0
 80196c6:	4770      	bx	lr
 80196c8:	2004f6b8 	.word	0x2004f6b8
 80196cc:	2004f6c0 	.word	0x2004f6c0
 80196d0:	2004f6bc 	.word	0x2004f6bc
 80196d4:	2004f6a0 	.word	0x2004f6a0
 80196d8:	2004f628 	.word	0x2004f628
 80196dc:	2004f62a 	.word	0x2004f62a
 80196e0:	2004f62c 	.word	0x2004f62c

080196e4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80196e4:	4a12      	ldr	r2, [pc, #72]	; (8019730 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80196e6:	8803      	ldrh	r3, [r0, #0]
 80196e8:	8812      	ldrh	r2, [r2, #0]
 80196ea:	4293      	cmp	r3, r2
 80196ec:	d207      	bcs.n	80196fe <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80196ee:	2114      	movs	r1, #20
 80196f0:	4a10      	ldr	r2, [pc, #64]	; (8019734 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80196f2:	6812      	ldr	r2, [r2, #0]
 80196f4:	fb01 2303 	mla	r3, r1, r3, r2
 80196f8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80196fc:	4770      	bx	lr
 80196fe:	490e      	ldr	r1, [pc, #56]	; (8019738 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019700:	8809      	ldrh	r1, [r1, #0]
 8019702:	4411      	add	r1, r2
 8019704:	428b      	cmp	r3, r1
 8019706:	da04      	bge.n	8019712 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8019708:	1a9b      	subs	r3, r3, r2
 801970a:	4a0c      	ldr	r2, [pc, #48]	; (801973c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801970c:	210e      	movs	r1, #14
 801970e:	6812      	ldr	r2, [r2, #0]
 8019710:	e7f0      	b.n	80196f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8019712:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019716:	4293      	cmp	r3, r2
 8019718:	d108      	bne.n	801972c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801971a:	4b09      	ldr	r3, [pc, #36]	; (8019740 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801971c:	781b      	ldrb	r3, [r3, #0]
 801971e:	b91b      	cbnz	r3, 8019728 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8019720:	4b08      	ldr	r3, [pc, #32]	; (8019744 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019722:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019726:	4770      	bx	lr
 8019728:	4b07      	ldr	r3, [pc, #28]	; (8019748 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801972a:	e7fa      	b.n	8019722 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801972c:	2000      	movs	r0, #0
 801972e:	4770      	bx	lr
 8019730:	2004f6b8 	.word	0x2004f6b8
 8019734:	2004f6c0 	.word	0x2004f6c0
 8019738:	2004f6bc 	.word	0x2004f6bc
 801973c:	2004f6a0 	.word	0x2004f6a0
 8019740:	2004f628 	.word	0x2004f628
 8019744:	2004f62c 	.word	0x2004f62c
 8019748:	2004f62a 	.word	0x2004f62a

0801974c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801974c:	b510      	push	{r4, lr}
 801974e:	4a1f      	ldr	r2, [pc, #124]	; (80197cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8019750:	880b      	ldrh	r3, [r1, #0]
 8019752:	8812      	ldrh	r2, [r2, #0]
 8019754:	4293      	cmp	r3, r2
 8019756:	d213      	bcs.n	8019780 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8019758:	2114      	movs	r1, #20
 801975a:	4a1d      	ldr	r2, [pc, #116]	; (80197d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801975c:	6812      	ldr	r2, [r2, #0]
 801975e:	fb01 2303 	mla	r3, r1, r3, r2
 8019762:	8a1a      	ldrh	r2, [r3, #16]
 8019764:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019768:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801976c:	8a5b      	ldrh	r3, [r3, #18]
 801976e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019772:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019776:	8004      	strh	r4, [r0, #0]
 8019778:	8041      	strh	r1, [r0, #2]
 801977a:	8082      	strh	r2, [r0, #4]
 801977c:	80c3      	strh	r3, [r0, #6]
 801977e:	e00e      	b.n	801979e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019780:	4914      	ldr	r1, [pc, #80]	; (80197d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8019782:	8809      	ldrh	r1, [r1, #0]
 8019784:	4411      	add	r1, r2
 8019786:	428b      	cmp	r3, r1
 8019788:	da0a      	bge.n	80197a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801978a:	210e      	movs	r1, #14
 801978c:	1a9b      	subs	r3, r3, r2
 801978e:	4a12      	ldr	r2, [pc, #72]	; (80197d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8019790:	6812      	ldr	r2, [r2, #0]
 8019792:	fb01 2303 	mla	r3, r1, r3, r2
 8019796:	681a      	ldr	r2, [r3, #0]
 8019798:	6002      	str	r2, [r0, #0]
 801979a:	685a      	ldr	r2, [r3, #4]
 801979c:	6042      	str	r2, [r0, #4]
 801979e:	bd10      	pop	{r4, pc}
 80197a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80197a4:	4293      	cmp	r3, r2
 80197a6:	d10b      	bne.n	80197c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 80197a8:	4b0c      	ldr	r3, [pc, #48]	; (80197dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80197aa:	f9b3 1000 	ldrsh.w	r1, [r3]
 80197ae:	4b0c      	ldr	r3, [pc, #48]	; (80197e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80197b0:	8081      	strh	r1, [r0, #4]
 80197b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80197b6:	2300      	movs	r3, #0
 80197b8:	80c2      	strh	r2, [r0, #6]
 80197ba:	8003      	strh	r3, [r0, #0]
 80197bc:	8043      	strh	r3, [r0, #2]
 80197be:	e7ee      	b.n	801979e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80197c0:	2300      	movs	r3, #0
 80197c2:	8003      	strh	r3, [r0, #0]
 80197c4:	8043      	strh	r3, [r0, #2]
 80197c6:	8083      	strh	r3, [r0, #4]
 80197c8:	e7d8      	b.n	801977c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80197ca:	bf00      	nop
 80197cc:	2004f6b8 	.word	0x2004f6b8
 80197d0:	2004f6c0 	.word	0x2004f6c0
 80197d4:	2004f6bc 	.word	0x2004f6bc
 80197d8:	2004f6a0 	.word	0x2004f6a0
 80197dc:	2004f624 	.word	0x2004f624
 80197e0:	2004f626 	.word	0x2004f626

080197e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80197e4:	4a17      	ldr	r2, [pc, #92]	; (8019844 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80197e6:	8803      	ldrh	r3, [r0, #0]
 80197e8:	8812      	ldrh	r2, [r2, #0]
 80197ea:	4293      	cmp	r3, r2
 80197ec:	d213      	bcs.n	8019816 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80197ee:	2114      	movs	r1, #20
 80197f0:	4a15      	ldr	r2, [pc, #84]	; (8019848 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80197f2:	6812      	ldr	r2, [r2, #0]
 80197f4:	fb01 2303 	mla	r3, r1, r3, r2
 80197f8:	8a1a      	ldrh	r2, [r3, #16]
 80197fa:	8919      	ldrh	r1, [r3, #8]
 80197fc:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019800:	428a      	cmp	r2, r1
 8019802:	db1d      	blt.n	8019840 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019804:	8a58      	ldrh	r0, [r3, #18]
 8019806:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801980a:	895b      	ldrh	r3, [r3, #10]
 801980c:	4298      	cmp	r0, r3
 801980e:	bfac      	ite	ge
 8019810:	2000      	movge	r0, #0
 8019812:	2001      	movlt	r0, #1
 8019814:	4770      	bx	lr
 8019816:	490d      	ldr	r1, [pc, #52]	; (801984c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019818:	8809      	ldrh	r1, [r1, #0]
 801981a:	4411      	add	r1, r2
 801981c:	428b      	cmp	r3, r1
 801981e:	da0d      	bge.n	801983c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8019820:	210e      	movs	r1, #14
 8019822:	1a9b      	subs	r3, r3, r2
 8019824:	4a0a      	ldr	r2, [pc, #40]	; (8019850 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8019826:	6812      	ldr	r2, [r2, #0]
 8019828:	fb01 2303 	mla	r3, r1, r3, r2
 801982c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8019830:	891a      	ldrh	r2, [r3, #8]
 8019832:	4291      	cmp	r1, r2
 8019834:	db04      	blt.n	8019840 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019836:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801983a:	e7e6      	b.n	801980a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801983c:	2000      	movs	r0, #0
 801983e:	4770      	bx	lr
 8019840:	2001      	movs	r0, #1
 8019842:	4770      	bx	lr
 8019844:	2004f6b8 	.word	0x2004f6b8
 8019848:	2004f6c0 	.word	0x2004f6c0
 801984c:	2004f6bc 	.word	0x2004f6bc
 8019850:	2004f6a0 	.word	0x2004f6a0

08019854 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019854:	4a12      	ldr	r2, [pc, #72]	; (80198a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019856:	8803      	ldrh	r3, [r0, #0]
 8019858:	8811      	ldrh	r1, [r2, #0]
 801985a:	428b      	cmp	r3, r1
 801985c:	d20b      	bcs.n	8019876 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801985e:	4a11      	ldr	r2, [pc, #68]	; (80198a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019860:	6812      	ldr	r2, [r2, #0]
 8019862:	b112      	cbz	r2, 801986a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019864:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019868:	b9c0      	cbnz	r0, 801989c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801986a:	4a0f      	ldr	r2, [pc, #60]	; (80198a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801986c:	6811      	ldr	r1, [r2, #0]
 801986e:	2214      	movs	r2, #20
 8019870:	4353      	muls	r3, r2
 8019872:	58c8      	ldr	r0, [r1, r3]
 8019874:	4770      	bx	lr
 8019876:	4a0d      	ldr	r2, [pc, #52]	; (80198ac <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019878:	8812      	ldrh	r2, [r2, #0]
 801987a:	440a      	add	r2, r1
 801987c:	4293      	cmp	r3, r2
 801987e:	da04      	bge.n	801988a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8019880:	4a08      	ldr	r2, [pc, #32]	; (80198a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019882:	6812      	ldr	r2, [r2, #0]
 8019884:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019888:	4770      	bx	lr
 801988a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801988e:	4293      	cmp	r3, r2
 8019890:	d103      	bne.n	801989a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019892:	4b07      	ldr	r3, [pc, #28]	; (80198b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8019898:	4770      	bx	lr
 801989a:	2000      	movs	r0, #0
 801989c:	4770      	bx	lr
 801989e:	bf00      	nop
 80198a0:	2004f6b8 	.word	0x2004f6b8
 80198a4:	2004f69c 	.word	0x2004f69c
 80198a8:	2004f6c0 	.word	0x2004f6c0
 80198ac:	2004f6bc 	.word	0x2004f6bc
 80198b0:	2004f630 	.word	0x2004f630

080198b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80198b4:	4b24      	ldr	r3, [pc, #144]	; (8019948 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80198b6:	8802      	ldrh	r2, [r0, #0]
 80198b8:	8818      	ldrh	r0, [r3, #0]
 80198ba:	4282      	cmp	r2, r0
 80198bc:	d221      	bcs.n	8019902 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80198be:	4b23      	ldr	r3, [pc, #140]	; (801994c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80198c0:	6819      	ldr	r1, [r3, #0]
 80198c2:	2314      	movs	r3, #20
 80198c4:	fb03 1302 	mla	r3, r3, r2, r1
 80198c8:	6858      	ldr	r0, [r3, #4]
 80198ca:	2800      	cmp	r0, #0
 80198cc:	d03a      	beq.n	8019944 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80198ce:	4920      	ldr	r1, [pc, #128]	; (8019950 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80198d0:	6809      	ldr	r1, [r1, #0]
 80198d2:	2900      	cmp	r1, #0
 80198d4:	d036      	beq.n	8019944 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80198d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80198da:	2900      	cmp	r1, #0
 80198dc:	d032      	beq.n	8019944 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80198de:	891a      	ldrh	r2, [r3, #8]
 80198e0:	8958      	ldrh	r0, [r3, #10]
 80198e2:	4350      	muls	r0, r2
 80198e4:	7c5a      	ldrb	r2, [r3, #17]
 80198e6:	7cdb      	ldrb	r3, [r3, #19]
 80198e8:	0952      	lsrs	r2, r2, #5
 80198ea:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80198ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80198f2:	2b0b      	cmp	r3, #11
 80198f4:	bf18      	it	ne
 80198f6:	0040      	lslne	r0, r0, #1
 80198f8:	3003      	adds	r0, #3
 80198fa:	f020 0003 	bic.w	r0, r0, #3
 80198fe:	4408      	add	r0, r1
 8019900:	4770      	bx	lr
 8019902:	4b14      	ldr	r3, [pc, #80]	; (8019954 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019904:	881b      	ldrh	r3, [r3, #0]
 8019906:	4403      	add	r3, r0
 8019908:	429a      	cmp	r2, r3
 801990a:	da1a      	bge.n	8019942 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801990c:	210e      	movs	r1, #14
 801990e:	4b12      	ldr	r3, [pc, #72]	; (8019958 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019910:	1a10      	subs	r0, r2, r0
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	fb01 3000 	mla	r0, r1, r0, r3
 8019918:	7b03      	ldrb	r3, [r0, #12]
 801991a:	f003 031f 	and.w	r3, r3, #31
 801991e:	2b0b      	cmp	r3, #11
 8019920:	d10b      	bne.n	801993a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8019922:	8903      	ldrh	r3, [r0, #8]
 8019924:	8940      	ldrh	r0, [r0, #10]
 8019926:	4358      	muls	r0, r3
 8019928:	4b09      	ldr	r3, [pc, #36]	; (8019950 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801992a:	3003      	adds	r0, #3
 801992c:	6819      	ldr	r1, [r3, #0]
 801992e:	f020 0303 	bic.w	r3, r0, #3
 8019932:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019936:	4418      	add	r0, r3
 8019938:	4770      	bx	lr
 801993a:	2b0d      	cmp	r3, #13
 801993c:	d101      	bne.n	8019942 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801993e:	300d      	adds	r0, #13
 8019940:	4770      	bx	lr
 8019942:	2000      	movs	r0, #0
 8019944:	4770      	bx	lr
 8019946:	bf00      	nop
 8019948:	2004f6b8 	.word	0x2004f6b8
 801994c:	2004f6c0 	.word	0x2004f6c0
 8019950:	2004f69c 	.word	0x2004f69c
 8019954:	2004f6bc 	.word	0x2004f6bc
 8019958:	2004f6a0 	.word	0x2004f6a0

0801995c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801995c:	b510      	push	{r4, lr}
 801995e:	4a17      	ldr	r2, [pc, #92]	; (80199bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019960:	8803      	ldrh	r3, [r0, #0]
 8019962:	8812      	ldrh	r2, [r2, #0]
 8019964:	4293      	cmp	r3, r2
 8019966:	d20c      	bcs.n	8019982 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019968:	2114      	movs	r1, #20
 801996a:	4a15      	ldr	r2, [pc, #84]	; (80199c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801996c:	6812      	ldr	r2, [r2, #0]
 801996e:	fb01 2303 	mla	r3, r1, r3, r2
 8019972:	7c58      	ldrb	r0, [r3, #17]
 8019974:	0942      	lsrs	r2, r0, #5
 8019976:	7cd8      	ldrb	r0, [r3, #19]
 8019978:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801997c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019980:	bd10      	pop	{r4, pc}
 8019982:	4910      	ldr	r1, [pc, #64]	; (80199c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019984:	8809      	ldrh	r1, [r1, #0]
 8019986:	4411      	add	r1, r2
 8019988:	428b      	cmp	r3, r1
 801998a:	da09      	bge.n	80199a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801998c:	210e      	movs	r1, #14
 801998e:	1a9b      	subs	r3, r3, r2
 8019990:	4a0d      	ldr	r2, [pc, #52]	; (80199c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019992:	6812      	ldr	r2, [r2, #0]
 8019994:	fb01 2303 	mla	r3, r1, r3, r2
 8019998:	7b18      	ldrb	r0, [r3, #12]
 801999a:	f000 001f 	and.w	r0, r0, #31
 801999e:	e7ef      	b.n	8019980 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80199a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80199a4:	4293      	cmp	r3, r2
 80199a6:	d106      	bne.n	80199b6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80199a8:	f7f3 ff40 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 80199ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199b0:	6803      	ldr	r3, [r0, #0]
 80199b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199b4:	4718      	bx	r3
 80199b6:	2000      	movs	r0, #0
 80199b8:	e7e2      	b.n	8019980 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80199ba:	bf00      	nop
 80199bc:	2004f6b8 	.word	0x2004f6b8
 80199c0:	2004f6c0 	.word	0x2004f6c0
 80199c4:	2004f6bc 	.word	0x2004f6bc
 80199c8:	2004f6a0 	.word	0x2004f6a0

080199cc <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80199cc:	2010      	movs	r0, #16
 80199ce:	4770      	bx	lr

080199d0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80199d0:	2000      	movs	r0, #0
 80199d2:	4770      	bx	lr

080199d4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80199d4:	4b02      	ldr	r3, [pc, #8]	; (80199e0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80199d6:	8818      	ldrh	r0, [r3, #0]
 80199d8:	0040      	lsls	r0, r0, #1
 80199da:	b280      	uxth	r0, r0
 80199dc:	4770      	bx	lr
 80199de:	bf00      	nop
 80199e0:	2004f62a 	.word	0x2004f62a

080199e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80199e4:	2bff      	cmp	r3, #255	; 0xff
 80199e6:	d050      	beq.n	8019a8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80199e8:	2a0b      	cmp	r2, #11
 80199ea:	d04a      	beq.n	8019a82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80199ec:	d80e      	bhi.n	8019a0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80199ee:	2a03      	cmp	r2, #3
 80199f0:	d03f      	beq.n	8019a72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80199f2:	d804      	bhi.n	80199fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80199f4:	2a01      	cmp	r2, #1
 80199f6:	d03e      	beq.n	8019a76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80199f8:	d93f      	bls.n	8019a7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80199fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80199fc:	4770      	bx	lr
 80199fe:	2a09      	cmp	r2, #9
 8019a00:	d03f      	beq.n	8019a82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019a02:	d83c      	bhi.n	8019a7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019a04:	2a08      	cmp	r2, #8
 8019a06:	d03a      	beq.n	8019a7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019a08:	2000      	movs	r0, #0
 8019a0a:	4770      	bx	lr
 8019a0c:	2a2f      	cmp	r2, #47	; 0x2f
 8019a0e:	d024      	beq.n	8019a5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019a10:	d80d      	bhi.n	8019a2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8019a12:	2a2d      	cmp	r2, #45	; 0x2d
 8019a14:	d014      	beq.n	8019a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019a16:	d826      	bhi.n	8019a66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019a18:	2a2c      	cmp	r2, #44	; 0x2c
 8019a1a:	d1f5      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a1c:	684b      	ldr	r3, [r1, #4]
 8019a1e:	781b      	ldrb	r3, [r3, #0]
 8019a20:	2b01      	cmp	r3, #1
 8019a22:	d018      	beq.n	8019a56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019a24:	d323      	bcc.n	8019a6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019a26:	2b02      	cmp	r3, #2
 8019a28:	d1ee      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a2a:	6880      	ldr	r0, [r0, #8]
 8019a2c:	4770      	bx	lr
 8019a2e:	2a31      	cmp	r2, #49	; 0x31
 8019a30:	d004      	beq.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8019a32:	d328      	bcc.n	8019a86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019a34:	2a32      	cmp	r2, #50	; 0x32
 8019a36:	d026      	beq.n	8019a86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019a38:	2a33      	cmp	r2, #51	; 0x33
 8019a3a:	d1e5      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a3c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8019a3e:	4770      	bx	lr
 8019a40:	684b      	ldr	r3, [r1, #4]
 8019a42:	781b      	ldrb	r3, [r3, #0]
 8019a44:	2b01      	cmp	r3, #1
 8019a46:	d004      	beq.n	8019a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a48:	d30b      	bcc.n	8019a62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019a4a:	2b02      	cmp	r3, #2
 8019a4c:	d1dc      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a4e:	6900      	ldr	r0, [r0, #16]
 8019a50:	4770      	bx	lr
 8019a52:	6a00      	ldr	r0, [r0, #32]
 8019a54:	4770      	bx	lr
 8019a56:	6980      	ldr	r0, [r0, #24]
 8019a58:	4770      	bx	lr
 8019a5a:	684b      	ldr	r3, [r1, #4]
 8019a5c:	781b      	ldrb	r3, [r3, #0]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d1d2      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a62:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019a64:	4770      	bx	lr
 8019a66:	684b      	ldr	r3, [r1, #4]
 8019a68:	781b      	ldrb	r3, [r3, #0]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d1cc      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019a70:	4770      	bx	lr
 8019a72:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019a74:	4770      	bx	lr
 8019a76:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019a78:	4770      	bx	lr
 8019a7a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019a7c:	4770      	bx	lr
 8019a7e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019a80:	4770      	bx	lr
 8019a82:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019a84:	4770      	bx	lr
 8019a86:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019a88:	4770      	bx	lr
 8019a8a:	2a0b      	cmp	r2, #11
 8019a8c:	d049      	beq.n	8019b22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019a8e:	d80e      	bhi.n	8019aae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019a90:	2a03      	cmp	r2, #3
 8019a92:	d040      	beq.n	8019b16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019a94:	d804      	bhi.n	8019aa0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019a96:	2a01      	cmp	r2, #1
 8019a98:	d03f      	beq.n	8019b1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8019a9a:	d940      	bls.n	8019b1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019a9c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019a9e:	4770      	bx	lr
 8019aa0:	2a09      	cmp	r2, #9
 8019aa2:	d03e      	beq.n	8019b22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019aa4:	d801      	bhi.n	8019aaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019aa6:	2a08      	cmp	r2, #8
 8019aa8:	d1ae      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019aaa:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019aac:	4770      	bx	lr
 8019aae:	2a2f      	cmp	r2, #47	; 0x2f
 8019ab0:	d024      	beq.n	8019afc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019ab2:	d80d      	bhi.n	8019ad0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019ab4:	2a2d      	cmp	r2, #45	; 0x2d
 8019ab6:	d014      	beq.n	8019ae2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019ab8:	d826      	bhi.n	8019b08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8019aba:	2a2c      	cmp	r2, #44	; 0x2c
 8019abc:	d1a4      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019abe:	684b      	ldr	r3, [r1, #4]
 8019ac0:	781b      	ldrb	r3, [r3, #0]
 8019ac2:	2b01      	cmp	r3, #1
 8019ac4:	d018      	beq.n	8019af8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019ac6:	d324      	bcc.n	8019b12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019ac8:	2b02      	cmp	r3, #2
 8019aca:	d19d      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019acc:	68c0      	ldr	r0, [r0, #12]
 8019ace:	4770      	bx	lr
 8019ad0:	2a31      	cmp	r2, #49	; 0x31
 8019ad2:	d004      	beq.n	8019ade <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019ad4:	d327      	bcc.n	8019b26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019ad6:	2a32      	cmp	r2, #50	; 0x32
 8019ad8:	d025      	beq.n	8019b26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019ada:	2a33      	cmp	r2, #51	; 0x33
 8019adc:	d194      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019ade:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019ae0:	4770      	bx	lr
 8019ae2:	684b      	ldr	r3, [r1, #4]
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	2b01      	cmp	r3, #1
 8019ae8:	d004      	beq.n	8019af4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8019aea:	d30b      	bcc.n	8019b04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8019aec:	2b02      	cmp	r3, #2
 8019aee:	d18b      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019af0:	6940      	ldr	r0, [r0, #20]
 8019af2:	4770      	bx	lr
 8019af4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019af6:	4770      	bx	lr
 8019af8:	69c0      	ldr	r0, [r0, #28]
 8019afa:	4770      	bx	lr
 8019afc:	684b      	ldr	r3, [r1, #4]
 8019afe:	781b      	ldrb	r3, [r3, #0]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d181      	bne.n	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b04:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019b06:	4770      	bx	lr
 8019b08:	684b      	ldr	r3, [r1, #4]
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	f47f af7b 	bne.w	8019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019b14:	4770      	bx	lr
 8019b16:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019b18:	4770      	bx	lr
 8019b1a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019b1c:	4770      	bx	lr
 8019b1e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019b20:	4770      	bx	lr
 8019b22:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8019b24:	4770      	bx	lr
 8019b26:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8019b28:	4770      	bx	lr

08019b2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b2e:	b087      	sub	sp, #28
 8019b30:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019b32:	9101      	str	r1, [sp, #4]
 8019b34:	9205      	str	r2, [sp, #20]
 8019b36:	6841      	ldr	r1, [r0, #4]
 8019b38:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019b3c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019b40:	9202      	str	r2, [sp, #8]
 8019b42:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019b46:	fb01 2404 	mla	r4, r1, r4, r2
 8019b4a:	6802      	ldr	r2, [r0, #0]
 8019b4c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019b50:	f8de 2000 	ldr.w	r2, [lr]
 8019b54:	9203      	str	r2, [sp, #12]
 8019b56:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019b5a:	3204      	adds	r2, #4
 8019b5c:	9204      	str	r2, [sp, #16]
 8019b5e:	9a02      	ldr	r2, [sp, #8]
 8019b60:	43d6      	mvns	r6, r2
 8019b62:	b2f6      	uxtb	r6, r6
 8019b64:	9a01      	ldr	r2, [sp, #4]
 8019b66:	2a00      	cmp	r2, #0
 8019b68:	dc03      	bgt.n	8019b72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019b6a:	9a05      	ldr	r2, [sp, #20]
 8019b6c:	2a00      	cmp	r2, #0
 8019b6e:	f340 8129 	ble.w	8019dc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019b72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019b74:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019b78:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019b7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019b7e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019b82:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	dd0e      	ble.n	8019ba8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019b8a:	1408      	asrs	r0, r1, #16
 8019b8c:	d405      	bmi.n	8019b9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019b8e:	4560      	cmp	r0, ip
 8019b90:	da03      	bge.n	8019b9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019b92:	1410      	asrs	r0, r2, #16
 8019b94:	d401      	bmi.n	8019b9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019b96:	42b8      	cmp	r0, r7
 8019b98:	db07      	blt.n	8019baa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019b9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019b9c:	3b01      	subs	r3, #1
 8019b9e:	4401      	add	r1, r0
 8019ba0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019ba2:	3402      	adds	r4, #2
 8019ba4:	4402      	add	r2, r0
 8019ba6:	e7ee      	b.n	8019b86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019ba8:	d071      	beq.n	8019c8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019baa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019bac:	1e58      	subs	r0, r3, #1
 8019bae:	fb05 1500 	mla	r5, r5, r0, r1
 8019bb2:	142d      	asrs	r5, r5, #16
 8019bb4:	d45f      	bmi.n	8019c76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bb6:	4565      	cmp	r5, ip
 8019bb8:	da5d      	bge.n	8019c76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019bbc:	fb05 2000 	mla	r0, r5, r0, r2
 8019bc0:	1400      	asrs	r0, r0, #16
 8019bc2:	d458      	bmi.n	8019c76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bc4:	42b8      	cmp	r0, r7
 8019bc6:	da56      	bge.n	8019c76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bc8:	4699      	mov	r9, r3
 8019bca:	46a2      	mov	sl, r4
 8019bcc:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8019bd0:	f1b9 0f00 	cmp.w	r9, #0
 8019bd4:	dd57      	ble.n	8019c86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019bd6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019bda:	9803      	ldr	r0, [sp, #12]
 8019bdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019be0:	fb07 000c 	mla	r0, r7, ip, r0
 8019be4:	140d      	asrs	r5, r1, #16
 8019be6:	5d40      	ldrb	r0, [r0, r5]
 8019be8:	9d04      	ldr	r5, [sp, #16]
 8019bea:	f109 39ff 	add.w	r9, r9, #4294967295
 8019bee:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019bf2:	f8ba 5000 	ldrh.w	r5, [sl]
 8019bf6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019bfa:	122f      	asrs	r7, r5, #8
 8019bfc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019c00:	fb17 f706 	smulbb	r7, r7, r6
 8019c04:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019c08:	00ed      	lsls	r5, r5, #3
 8019c0a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8019c0e:	b2ed      	uxtb	r5, r5
 8019c10:	fb18 f806 	smulbb	r8, r8, r6
 8019c14:	fb15 f506 	smulbb	r5, r5, r6
 8019c18:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019c1c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019c20:	10c7      	asrs	r7, r0, #3
 8019c22:	00c0      	lsls	r0, r0, #3
 8019c24:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019c28:	b2c0      	uxtb	r0, r0
 8019c2a:	fb07 870b 	mla	r7, r7, fp, r8
 8019c2e:	fb00 500b 	mla	r0, r0, fp, r5
 8019c32:	fa1f fc8c 	uxth.w	ip, ip
 8019c36:	b280      	uxth	r0, r0
 8019c38:	b2bf      	uxth	r7, r7
 8019c3a:	f10c 0501 	add.w	r5, ip, #1
 8019c3e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019c42:	f107 0801 	add.w	r8, r7, #1
 8019c46:	1c45      	adds	r5, r0, #1
 8019c48:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019c4c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019c50:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019c52:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019c56:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019c5a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019c5e:	ea45 0c0c 	orr.w	ip, r5, ip
 8019c62:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019c66:	4401      	add	r1, r0
 8019c68:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019c6a:	ea4c 0c08 	orr.w	ip, ip, r8
 8019c6e:	f82a cb02 	strh.w	ip, [sl], #2
 8019c72:	4402      	add	r2, r0
 8019c74:	e7ac      	b.n	8019bd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019c76:	f04f 0800 	mov.w	r8, #0
 8019c7a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8019c7e:	eb03 0008 	add.w	r0, r3, r8
 8019c82:	2800      	cmp	r0, #0
 8019c84:	dc41      	bgt.n	8019d0a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019c86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019c8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019c8e:	9b01      	ldr	r3, [sp, #4]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	f340 8097 	ble.w	8019dc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019c9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019c9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019ca2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019ca6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019caa:	eef0 6a62 	vmov.f32	s13, s5
 8019cae:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019cb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019cba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019cbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019cc2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019cc6:	eef0 6a43 	vmov.f32	s13, s6
 8019cca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019cce:	ee12 2a90 	vmov	r2, s5
 8019cd2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019cd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019cd8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019cdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ce0:	ee13 2a10 	vmov	r2, s6
 8019ce4:	9313      	str	r3, [sp, #76]	; 0x4c
 8019ce6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ce8:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019cec:	fb92 f3f3 	sdiv	r3, r2, r3
 8019cf0:	9314      	str	r3, [sp, #80]	; 0x50
 8019cf2:	9b01      	ldr	r3, [sp, #4]
 8019cf4:	9a05      	ldr	r2, [sp, #20]
 8019cf6:	3b01      	subs	r3, #1
 8019cf8:	9301      	str	r3, [sp, #4]
 8019cfa:	eeb0 3a67 	vmov.f32	s6, s15
 8019cfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d00:	eef0 2a47 	vmov.f32	s5, s14
 8019d04:	bf08      	it	eq
 8019d06:	4613      	moveq	r3, r2
 8019d08:	e72c      	b.n	8019b64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019d0a:	140f      	asrs	r7, r1, #16
 8019d0c:	d453      	bmi.n	8019db6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d0e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019d12:	42bd      	cmp	r5, r7
 8019d14:	dd4f      	ble.n	8019db6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d16:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019d1a:	d44c      	bmi.n	8019db6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d1c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019d20:	4560      	cmp	r0, ip
 8019d22:	dd48      	ble.n	8019db6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d24:	9803      	ldr	r0, [sp, #12]
 8019d26:	b22d      	sxth	r5, r5
 8019d28:	fb0c 0505 	mla	r5, ip, r5, r0
 8019d2c:	5de8      	ldrb	r0, [r5, r7]
 8019d2e:	9d04      	ldr	r5, [sp, #16]
 8019d30:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019d34:	f06f 0501 	mvn.w	r5, #1
 8019d38:	fb05 fb08 	mul.w	fp, r5, r8
 8019d3c:	f834 500b 	ldrh.w	r5, [r4, fp]
 8019d40:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019d44:	122f      	asrs	r7, r5, #8
 8019d46:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019d4a:	fb17 f706 	smulbb	r7, r7, r6
 8019d4e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019d52:	00ed      	lsls	r5, r5, #3
 8019d54:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019d58:	b2ed      	uxtb	r5, r5
 8019d5a:	fb19 f906 	smulbb	r9, r9, r6
 8019d5e:	fb15 f506 	smulbb	r5, r5, r6
 8019d62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019d66:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019d6a:	10c7      	asrs	r7, r0, #3
 8019d6c:	00c0      	lsls	r0, r0, #3
 8019d6e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019d72:	b2c0      	uxtb	r0, r0
 8019d74:	fb07 970a 	mla	r7, r7, sl, r9
 8019d78:	fb00 500a 	mla	r0, r0, sl, r5
 8019d7c:	fa1f fc8c 	uxth.w	ip, ip
 8019d80:	b2bf      	uxth	r7, r7
 8019d82:	b280      	uxth	r0, r0
 8019d84:	f10c 0501 	add.w	r5, ip, #1
 8019d88:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019d8c:	f107 0901 	add.w	r9, r7, #1
 8019d90:	1c45      	adds	r5, r0, #1
 8019d92:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019d96:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019d9a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019d9e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019da2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019da6:	ea45 0c0c 	orr.w	ip, r5, ip
 8019daa:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019dae:	ea4c 0c09 	orr.w	ip, ip, r9
 8019db2:	f824 c00b 	strh.w	ip, [r4, fp]
 8019db6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019db8:	f108 38ff 	add.w	r8, r8, #4294967295
 8019dbc:	4401      	add	r1, r0
 8019dbe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019dc0:	4402      	add	r2, r0
 8019dc2:	e75c      	b.n	8019c7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019dc4:	b007      	add	sp, #28
 8019dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019dca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019dce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dd2:	b085      	sub	sp, #20
 8019dd4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019dd6:	4693      	mov	fp, r2
 8019dd8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019ddc:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8019de0:	6870      	ldr	r0, [r6, #4]
 8019de2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019de4:	fb00 2404 	mla	r4, r0, r4, r2
 8019de8:	6832      	ldr	r2, [r6, #0]
 8019dea:	9100      	str	r1, [sp, #0]
 8019dec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019df0:	682a      	ldr	r2, [r5, #0]
 8019df2:	9201      	str	r2, [sp, #4]
 8019df4:	686a      	ldr	r2, [r5, #4]
 8019df6:	3204      	adds	r2, #4
 8019df8:	9202      	str	r2, [sp, #8]
 8019dfa:	9a00      	ldr	r2, [sp, #0]
 8019dfc:	2a00      	cmp	r2, #0
 8019dfe:	dc03      	bgt.n	8019e08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019e00:	f1bb 0f00 	cmp.w	fp, #0
 8019e04:	f340 80a0 	ble.w	8019f48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019e08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e0a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019e0e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019e12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019e14:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019e18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	dd0c      	ble.n	8019e3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019e20:	1406      	asrs	r6, r0, #16
 8019e22:	d405      	bmi.n	8019e30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e24:	454e      	cmp	r6, r9
 8019e26:	da03      	bge.n	8019e30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e28:	1416      	asrs	r6, r2, #16
 8019e2a:	d401      	bmi.n	8019e30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e2c:	4546      	cmp	r6, r8
 8019e2e:	db05      	blt.n	8019e3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019e30:	4470      	add	r0, lr
 8019e32:	4462      	add	r2, ip
 8019e34:	3b01      	subs	r3, #1
 8019e36:	3402      	adds	r4, #2
 8019e38:	e7f0      	b.n	8019e1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019e3a:	d00f      	beq.n	8019e5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019e3c:	1e5e      	subs	r6, r3, #1
 8019e3e:	fb0e 0706 	mla	r7, lr, r6, r0
 8019e42:	143f      	asrs	r7, r7, #16
 8019e44:	d541      	bpl.n	8019eca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8019e46:	4698      	mov	r8, r3
 8019e48:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019e4c:	9603      	str	r6, [sp, #12]
 8019e4e:	f1b8 0f00 	cmp.w	r8, #0
 8019e52:	dc59      	bgt.n	8019f08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019e54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e58:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019e5c:	9b00      	ldr	r3, [sp, #0]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	dd72      	ble.n	8019f48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019e62:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e6a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019e6e:	eeb0 6a62 	vmov.f32	s12, s5
 8019e72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e76:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e86:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019e8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e8e:	eeb0 6a43 	vmov.f32	s12, s6
 8019e92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e96:	ee12 2a90 	vmov	r2, s5
 8019e9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ea0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ea4:	fb92 fef3 	sdiv	lr, r2, r3
 8019ea8:	ee13 2a10 	vmov	r2, s6
 8019eac:	fb92 fcf3 	sdiv	ip, r2, r3
 8019eb0:	9b00      	ldr	r3, [sp, #0]
 8019eb2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019eb6:	3b01      	subs	r3, #1
 8019eb8:	9300      	str	r3, [sp, #0]
 8019eba:	eeb0 3a67 	vmov.f32	s6, s15
 8019ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ec0:	eef0 2a47 	vmov.f32	s5, s14
 8019ec4:	bf08      	it	eq
 8019ec6:	465b      	moveq	r3, fp
 8019ec8:	e797      	b.n	8019dfa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019eca:	454f      	cmp	r7, r9
 8019ecc:	dabb      	bge.n	8019e46 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019ece:	fb0c 2606 	mla	r6, ip, r6, r2
 8019ed2:	1436      	asrs	r6, r6, #16
 8019ed4:	d4b7      	bmi.n	8019e46 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019ed6:	4546      	cmp	r6, r8
 8019ed8:	dab5      	bge.n	8019e46 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019eda:	461e      	mov	r6, r3
 8019edc:	46a0      	mov	r8, r4
 8019ede:	2e00      	cmp	r6, #0
 8019ee0:	ddb8      	ble.n	8019e54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019ee2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8019ee6:	9901      	ldr	r1, [sp, #4]
 8019ee8:	1417      	asrs	r7, r2, #16
 8019eea:	fb0a 1707 	mla	r7, sl, r7, r1
 8019eee:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019ef2:	f817 7009 	ldrb.w	r7, [r7, r9]
 8019ef6:	9902      	ldr	r1, [sp, #8]
 8019ef8:	4470      	add	r0, lr
 8019efa:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019efe:	4462      	add	r2, ip
 8019f00:	f828 7b02 	strh.w	r7, [r8], #2
 8019f04:	3e01      	subs	r6, #1
 8019f06:	e7ea      	b.n	8019ede <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019f08:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019f0c:	d417      	bmi.n	8019f3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f0e:	68ae      	ldr	r6, [r5, #8]
 8019f10:	454e      	cmp	r6, r9
 8019f12:	dd14      	ble.n	8019f3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f14:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019f18:	d411      	bmi.n	8019f3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f1a:	68ef      	ldr	r7, [r5, #12]
 8019f1c:	4557      	cmp	r7, sl
 8019f1e:	dd0e      	ble.n	8019f3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f20:	f06f 0101 	mvn.w	r1, #1
 8019f24:	9f01      	ldr	r7, [sp, #4]
 8019f26:	b236      	sxth	r6, r6
 8019f28:	fb0a 7606 	mla	r6, sl, r6, r7
 8019f2c:	9f02      	ldr	r7, [sp, #8]
 8019f2e:	f816 6009 	ldrb.w	r6, [r6, r9]
 8019f32:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8019f36:	fb01 f608 	mul.w	r6, r1, r8
 8019f3a:	9903      	ldr	r1, [sp, #12]
 8019f3c:	538f      	strh	r7, [r1, r6]
 8019f3e:	4470      	add	r0, lr
 8019f40:	4462      	add	r2, ip
 8019f42:	f108 38ff 	add.w	r8, r8, #4294967295
 8019f46:	e782      	b.n	8019e4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019f48:	b005      	add	sp, #20
 8019f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f52:	b087      	sub	sp, #28
 8019f54:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019f56:	9102      	str	r1, [sp, #8]
 8019f58:	9205      	str	r2, [sp, #20]
 8019f5a:	6861      	ldr	r1, [r4, #4]
 8019f5c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019f60:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019f64:	9203      	str	r2, [sp, #12]
 8019f66:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019f6a:	fb01 2000 	mla	r0, r1, r0, r2
 8019f6e:	6822      	ldr	r2, [r4, #0]
 8019f70:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019f74:	9200      	str	r2, [sp, #0]
 8019f76:	f8dc 2000 	ldr.w	r2, [ip]
 8019f7a:	9204      	str	r2, [sp, #16]
 8019f7c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019f80:	3204      	adds	r2, #4
 8019f82:	9201      	str	r2, [sp, #4]
 8019f84:	9a03      	ldr	r2, [sp, #12]
 8019f86:	43d5      	mvns	r5, r2
 8019f88:	b2ed      	uxtb	r5, r5
 8019f8a:	9a02      	ldr	r2, [sp, #8]
 8019f8c:	2a00      	cmp	r2, #0
 8019f8e:	dc03      	bgt.n	8019f98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019f90:	9a05      	ldr	r2, [sp, #20]
 8019f92:	2a00      	cmp	r2, #0
 8019f94:	f340 812c 	ble.w	801a1f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019f98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f9a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019f9e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019fa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019fa4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019fa8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	dd10      	ble.n	8019fd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019fb0:	140c      	asrs	r4, r1, #16
 8019fb2:	d405      	bmi.n	8019fc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fb4:	4574      	cmp	r4, lr
 8019fb6:	da03      	bge.n	8019fc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fb8:	1414      	asrs	r4, r2, #16
 8019fba:	d401      	bmi.n	8019fc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fbc:	42bc      	cmp	r4, r7
 8019fbe:	db09      	blt.n	8019fd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019fc0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019fc2:	9800      	ldr	r0, [sp, #0]
 8019fc4:	4421      	add	r1, r4
 8019fc6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019fc8:	3002      	adds	r0, #2
 8019fca:	4422      	add	r2, r4
 8019fcc:	3b01      	subs	r3, #1
 8019fce:	9000      	str	r0, [sp, #0]
 8019fd0:	e7ec      	b.n	8019fac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019fd2:	d071      	beq.n	801a0b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8019fd4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019fd6:	1e5c      	subs	r4, r3, #1
 8019fd8:	fb06 1604 	mla	r6, r6, r4, r1
 8019fdc:	1436      	asrs	r6, r6, #16
 8019fde:	d45d      	bmi.n	801a09c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019fe0:	4576      	cmp	r6, lr
 8019fe2:	da5b      	bge.n	801a09c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019fe4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019fe6:	fb06 2404 	mla	r4, r6, r4, r2
 8019fea:	1424      	asrs	r4, r4, #16
 8019fec:	d456      	bmi.n	801a09c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019fee:	42bc      	cmp	r4, r7
 8019ff0:	da54      	bge.n	801a09c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019ff2:	4698      	mov	r8, r3
 8019ff4:	f8dd 9000 	ldr.w	r9, [sp]
 8019ff8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8019ffc:	f1b8 0f00 	cmp.w	r8, #0
 801a000:	dd54      	ble.n	801a0ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a002:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a006:	9804      	ldr	r0, [sp, #16]
 801a008:	1414      	asrs	r4, r2, #16
 801a00a:	fb07 0404 	mla	r4, r7, r4, r0
 801a00e:	140e      	asrs	r6, r1, #16
 801a010:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a014:	9801      	ldr	r0, [sp, #4]
 801a016:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a01a:	eb00 0b0e 	add.w	fp, r0, lr
 801a01e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a022:	f8b9 4000 	ldrh.w	r4, [r9]
 801a026:	fb16 f60a 	smulbb	r6, r6, sl
 801a02a:	1227      	asrs	r7, r4, #8
 801a02c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a030:	fb07 6705 	mla	r7, r7, r5, r6
 801a034:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a038:	10e6      	asrs	r6, r4, #3
 801a03a:	00e4      	lsls	r4, r4, #3
 801a03c:	b2e4      	uxtb	r4, r4
 801a03e:	fb1b fb0a 	smulbb	fp, fp, sl
 801a042:	fb14 f405 	smulbb	r4, r4, r5
 801a046:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a04a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a04e:	fb06 b605 	mla	r6, r6, r5, fp
 801a052:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a056:	b2bf      	uxth	r7, r7
 801a058:	b2b6      	uxth	r6, r6
 801a05a:	fa1f fe8e 	uxth.w	lr, lr
 801a05e:	1c7c      	adds	r4, r7, #1
 801a060:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a064:	f106 0b01 	add.w	fp, r6, #1
 801a068:	f10e 0401 	add.w	r4, lr, #1
 801a06c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a06e:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a072:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a076:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a07a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a07e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a082:	4327      	orrs	r7, r4
 801a084:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a088:	4401      	add	r1, r0
 801a08a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a08c:	ea47 070b 	orr.w	r7, r7, fp
 801a090:	f829 7b02 	strh.w	r7, [r9], #2
 801a094:	4402      	add	r2, r0
 801a096:	f108 38ff 	add.w	r8, r8, #4294967295
 801a09a:	e7af      	b.n	8019ffc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a09c:	f04f 0e00 	mov.w	lr, #0
 801a0a0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a0a4:	eb03 040e 	add.w	r4, r3, lr
 801a0a8:	2c00      	cmp	r4, #0
 801a0aa:	dc43      	bgt.n	801a134 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a0ac:	9a00      	ldr	r2, [sp, #0]
 801a0ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a0b2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a0b6:	9300      	str	r3, [sp, #0]
 801a0b8:	9b02      	ldr	r3, [sp, #8]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	f340 8098 	ble.w	801a1f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a0c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a0c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a0c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a0cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a0d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a0d4:	eef0 6a62 	vmov.f32	s13, s5
 801a0d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a0dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a0e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a0e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a0e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a0ec:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a0f0:	eef0 6a43 	vmov.f32	s13, s6
 801a0f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a0f8:	ee12 2a90 	vmov	r2, s5
 801a0fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a100:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a102:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a106:	fb92 f3f3 	sdiv	r3, r2, r3
 801a10a:	ee13 2a10 	vmov	r2, s6
 801a10e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a112:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a116:	fb92 f3f3 	sdiv	r3, r2, r3
 801a11a:	9314      	str	r3, [sp, #80]	; 0x50
 801a11c:	9b02      	ldr	r3, [sp, #8]
 801a11e:	9a05      	ldr	r2, [sp, #20]
 801a120:	3b01      	subs	r3, #1
 801a122:	9302      	str	r3, [sp, #8]
 801a124:	eeb0 3a67 	vmov.f32	s6, s15
 801a128:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a12a:	eef0 2a47 	vmov.f32	s5, s14
 801a12e:	bf08      	it	eq
 801a130:	4613      	moveq	r3, r2
 801a132:	e72a      	b.n	8019f8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a134:	140f      	asrs	r7, r1, #16
 801a136:	d454      	bmi.n	801a1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a138:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a13c:	42be      	cmp	r6, r7
 801a13e:	dd50      	ble.n	801a1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a140:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a144:	d44d      	bmi.n	801a1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a146:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a14a:	4544      	cmp	r4, r8
 801a14c:	dd49      	ble.n	801a1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a14e:	f06f 0001 	mvn.w	r0, #1
 801a152:	9c04      	ldr	r4, [sp, #16]
 801a154:	b236      	sxth	r6, r6
 801a156:	fb08 4606 	mla	r6, r8, r6, r4
 801a15a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a15e:	9c01      	ldr	r4, [sp, #4]
 801a160:	fb00 fa0e 	mul.w	sl, r0, lr
 801a164:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a168:	eb04 0b08 	add.w	fp, r4, r8
 801a16c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a170:	9800      	ldr	r0, [sp, #0]
 801a172:	fb16 f609 	smulbb	r6, r6, r9
 801a176:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a17a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a17e:	1227      	asrs	r7, r4, #8
 801a180:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a184:	fb07 6705 	mla	r7, r7, r5, r6
 801a188:	10e6      	asrs	r6, r4, #3
 801a18a:	00e4      	lsls	r4, r4, #3
 801a18c:	b2e4      	uxtb	r4, r4
 801a18e:	fb1b fb09 	smulbb	fp, fp, r9
 801a192:	9801      	ldr	r0, [sp, #4]
 801a194:	fb14 f405 	smulbb	r4, r4, r5
 801a198:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a19c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a1a0:	fb06 b605 	mla	r6, r6, r5, fp
 801a1a4:	fb08 4809 	mla	r8, r8, r9, r4
 801a1a8:	b2bf      	uxth	r7, r7
 801a1aa:	b2b6      	uxth	r6, r6
 801a1ac:	fa1f f888 	uxth.w	r8, r8
 801a1b0:	1c7c      	adds	r4, r7, #1
 801a1b2:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a1b6:	f106 0b01 	add.w	fp, r6, #1
 801a1ba:	f108 0401 	add.w	r4, r8, #1
 801a1be:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801a1c2:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a1c6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a1ca:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a1ce:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a1d2:	4327      	orrs	r7, r4
 801a1d4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a1d8:	9800      	ldr	r0, [sp, #0]
 801a1da:	ea47 070b 	orr.w	r7, r7, fp
 801a1de:	f820 700a 	strh.w	r7, [r0, sl]
 801a1e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a1e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a1e8:	4401      	add	r1, r0
 801a1ea:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a1ec:	4402      	add	r2, r0
 801a1ee:	e759      	b.n	801a0a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a1f0:	b007      	add	sp, #28
 801a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a1f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a1f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a200:	b085      	sub	sp, #20
 801a202:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a204:	9203      	str	r2, [sp, #12]
 801a206:	6870      	ldr	r0, [r6, #4]
 801a208:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a20c:	fb00 2404 	mla	r4, r0, r4, r2
 801a210:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a212:	6832      	ldr	r2, [r6, #0]
 801a214:	686f      	ldr	r7, [r5, #4]
 801a216:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a21a:	682a      	ldr	r2, [r5, #0]
 801a21c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801a220:	9101      	str	r1, [sp, #4]
 801a222:	9202      	str	r2, [sp, #8]
 801a224:	3704      	adds	r7, #4
 801a226:	9a01      	ldr	r2, [sp, #4]
 801a228:	2a00      	cmp	r2, #0
 801a22a:	dc03      	bgt.n	801a234 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a22c:	9a03      	ldr	r2, [sp, #12]
 801a22e:	2a00      	cmp	r2, #0
 801a230:	f340 80cc 	ble.w	801a3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a234:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a236:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a23a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a23e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a240:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a244:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a248:	2b00      	cmp	r3, #0
 801a24a:	dd0d      	ble.n	801a268 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a24c:	1406      	asrs	r6, r0, #16
 801a24e:	d405      	bmi.n	801a25c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a250:	454e      	cmp	r6, r9
 801a252:	da03      	bge.n	801a25c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a254:	1416      	asrs	r6, r2, #16
 801a256:	d401      	bmi.n	801a25c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a258:	4546      	cmp	r6, r8
 801a25a:	db06      	blt.n	801a26a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a25c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a25e:	4460      	add	r0, ip
 801a260:	4432      	add	r2, r6
 801a262:	3b01      	subs	r3, #1
 801a264:	3402      	adds	r4, #2
 801a266:	e7ef      	b.n	801a248 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a268:	d00f      	beq.n	801a28a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a26a:	1e5e      	subs	r6, r3, #1
 801a26c:	fb0c 0e06 	mla	lr, ip, r6, r0
 801a270:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a274:	d543      	bpl.n	801a2fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801a276:	4698      	mov	r8, r3
 801a278:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801a27c:	f1b8 0f00 	cmp.w	r8, #0
 801a280:	dc71      	bgt.n	801a366 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801a282:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a286:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a28a:	9b01      	ldr	r3, [sp, #4]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	f340 809d 	ble.w	801a3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a292:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a296:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a29a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a29e:	eeb0 6a62 	vmov.f32	s12, s5
 801a2a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a2b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a2b6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a2ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a2be:	eeb0 6a43 	vmov.f32	s12, s6
 801a2c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a2c6:	ee12 2a90 	vmov	r2, s5
 801a2ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2d4:	fb92 fcf3 	sdiv	ip, r2, r3
 801a2d8:	ee13 2a10 	vmov	r2, s6
 801a2dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2e0:	9312      	str	r3, [sp, #72]	; 0x48
 801a2e2:	9b01      	ldr	r3, [sp, #4]
 801a2e4:	9a03      	ldr	r2, [sp, #12]
 801a2e6:	3b01      	subs	r3, #1
 801a2e8:	9301      	str	r3, [sp, #4]
 801a2ea:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2f0:	eeb0 3a67 	vmov.f32	s6, s15
 801a2f4:	bf08      	it	eq
 801a2f6:	4613      	moveq	r3, r2
 801a2f8:	eef0 2a47 	vmov.f32	s5, s14
 801a2fc:	e793      	b.n	801a226 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a2fe:	45ce      	cmp	lr, r9
 801a300:	dab9      	bge.n	801a276 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a302:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a304:	fb01 2606 	mla	r6, r1, r6, r2
 801a308:	1436      	asrs	r6, r6, #16
 801a30a:	d4b4      	bmi.n	801a276 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a30c:	4546      	cmp	r6, r8
 801a30e:	dab2      	bge.n	801a276 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a310:	4698      	mov	r8, r3
 801a312:	46a2      	mov	sl, r4
 801a314:	f1b8 0f00 	cmp.w	r8, #0
 801a318:	ddb3      	ble.n	801a282 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a31a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a31e:	9902      	ldr	r1, [sp, #8]
 801a320:	1416      	asrs	r6, r2, #16
 801a322:	fb09 1606 	mla	r6, r9, r6, r1
 801a326:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801a32a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801a32e:	4929      	ldr	r1, [pc, #164]	; (801a3d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801a330:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a334:	eb07 0b0e 	add.w	fp, r7, lr
 801a338:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801a33c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a340:	00f6      	lsls	r6, r6, #3
 801a342:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a346:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a34a:	ea49 0606 	orr.w	r6, r9, r6
 801a34e:	f817 900e 	ldrb.w	r9, [r7, lr]
 801a352:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a354:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801a358:	f82a 6b02 	strh.w	r6, [sl], #2
 801a35c:	4460      	add	r0, ip
 801a35e:	440a      	add	r2, r1
 801a360:	f108 38ff 	add.w	r8, r8, #4294967295
 801a364:	e7d6      	b.n	801a314 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a366:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a36a:	d429      	bmi.n	801a3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a36c:	68ae      	ldr	r6, [r5, #8]
 801a36e:	454e      	cmp	r6, r9
 801a370:	dd26      	ble.n	801a3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a372:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a376:	d423      	bmi.n	801a3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a378:	68e9      	ldr	r1, [r5, #12]
 801a37a:	4559      	cmp	r1, fp
 801a37c:	dd20      	ble.n	801a3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a37e:	9902      	ldr	r1, [sp, #8]
 801a380:	fa0f fe86 	sxth.w	lr, r6
 801a384:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a388:	f06f 0101 	mvn.w	r1, #1
 801a38c:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a390:	fb01 f908 	mul.w	r9, r1, r8
 801a394:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a398:	eb07 060e 	add.w	r6, r7, lr
 801a39c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a3a0:	7876      	ldrb	r6, [r6, #1]
 801a3a2:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a3a6:	00f6      	lsls	r6, r6, #3
 801a3a8:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a3ac:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a3b0:	ea4b 0606 	orr.w	r6, fp, r6
 801a3b4:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a3b8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a3bc:	f82a 6009 	strh.w	r6, [sl, r9]
 801a3c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a3c2:	4460      	add	r0, ip
 801a3c4:	440a      	add	r2, r1
 801a3c6:	f108 38ff 	add.w	r8, r8, #4294967295
 801a3ca:	e757      	b.n	801a27c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a3cc:	b005      	add	sp, #20
 801a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3d2:	bf00      	nop
 801a3d4:	fffff800 	.word	0xfffff800

0801a3d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a3d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3e0:	b087      	sub	sp, #28
 801a3e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a3e4:	468b      	mov	fp, r1
 801a3e6:	9204      	str	r2, [sp, #16]
 801a3e8:	6841      	ldr	r1, [r0, #4]
 801a3ea:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a3ee:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a3f2:	9205      	str	r2, [sp, #20]
 801a3f4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a3f8:	fb01 2404 	mla	r4, r1, r4, r2
 801a3fc:	6802      	ldr	r2, [r0, #0]
 801a3fe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a402:	f8dc 2000 	ldr.w	r2, [ip]
 801a406:	9201      	str	r2, [sp, #4]
 801a408:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a40c:	3204      	adds	r2, #4
 801a40e:	9202      	str	r2, [sp, #8]
 801a410:	f1bb 0f00 	cmp.w	fp, #0
 801a414:	dc03      	bgt.n	801a41e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a416:	9a04      	ldr	r2, [sp, #16]
 801a418:	2a00      	cmp	r2, #0
 801a41a:	f340 8138 	ble.w	801a68e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a41e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a420:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a424:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a428:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a42a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a42e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a432:	2b00      	cmp	r3, #0
 801a434:	dd0e      	ble.n	801a454 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a436:	1402      	asrs	r2, r0, #16
 801a438:	d405      	bmi.n	801a446 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a43a:	42ba      	cmp	r2, r7
 801a43c:	da03      	bge.n	801a446 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a43e:	140a      	asrs	r2, r1, #16
 801a440:	d401      	bmi.n	801a446 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a442:	42b2      	cmp	r2, r6
 801a444:	db07      	blt.n	801a456 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a446:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a448:	3b01      	subs	r3, #1
 801a44a:	4410      	add	r0, r2
 801a44c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a44e:	3402      	adds	r4, #2
 801a450:	4411      	add	r1, r2
 801a452:	e7ee      	b.n	801a432 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a454:	d019      	beq.n	801a48a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a456:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a458:	1e5a      	subs	r2, r3, #1
 801a45a:	fb05 0502 	mla	r5, r5, r2, r0
 801a45e:	142d      	asrs	r5, r5, #16
 801a460:	d409      	bmi.n	801a476 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a462:	42bd      	cmp	r5, r7
 801a464:	da07      	bge.n	801a476 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a466:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a468:	fb05 1202 	mla	r2, r5, r2, r1
 801a46c:	1412      	asrs	r2, r2, #16
 801a46e:	d402      	bmi.n	801a476 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a470:	42b2      	cmp	r2, r6
 801a472:	f2c0 80ac 	blt.w	801a5ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a476:	f04f 0e00 	mov.w	lr, #0
 801a47a:	eb03 020e 	add.w	r2, r3, lr
 801a47e:	2a00      	cmp	r2, #0
 801a480:	dc3e      	bgt.n	801a500 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a482:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a486:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a48a:	f1bb 0f00 	cmp.w	fp, #0
 801a48e:	f340 80fe 	ble.w	801a68e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a492:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a496:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a49a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a49e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a4a2:	eeb0 6a62 	vmov.f32	s12, s5
 801a4a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a4ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a4b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a4ba:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a4be:	eeb0 6a43 	vmov.f32	s12, s6
 801a4c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a4c6:	ee12 2a90 	vmov	r2, s5
 801a4ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a4ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a4d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a4d8:	ee13 2a10 	vmov	r2, s6
 801a4dc:	9313      	str	r3, [sp, #76]	; 0x4c
 801a4de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a4e0:	f1bb 0b01 	subs.w	fp, fp, #1
 801a4e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a4e8:	9a04      	ldr	r2, [sp, #16]
 801a4ea:	9314      	str	r3, [sp, #80]	; 0x50
 801a4ec:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a4f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a4f2:	eeb0 3a67 	vmov.f32	s6, s15
 801a4f6:	bf08      	it	eq
 801a4f8:	4613      	moveq	r3, r2
 801a4fa:	eef0 2a47 	vmov.f32	s5, s14
 801a4fe:	e787      	b.n	801a410 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a500:	1406      	asrs	r6, r0, #16
 801a502:	d45d      	bmi.n	801a5c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a504:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a508:	42b5      	cmp	r5, r6
 801a50a:	dd59      	ble.n	801a5c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a50c:	140f      	asrs	r7, r1, #16
 801a50e:	d457      	bmi.n	801a5c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a510:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a514:	42ba      	cmp	r2, r7
 801a516:	dd53      	ble.n	801a5c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a518:	9a01      	ldr	r2, [sp, #4]
 801a51a:	b22d      	sxth	r5, r5
 801a51c:	fb07 2505 	mla	r5, r7, r5, r2
 801a520:	5daa      	ldrb	r2, [r5, r6]
 801a522:	9d02      	ldr	r5, [sp, #8]
 801a524:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a528:	0e2e      	lsrs	r6, r5, #24
 801a52a:	d049      	beq.n	801a5c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a52c:	f06f 0201 	mvn.w	r2, #1
 801a530:	fb02 f20e 	mul.w	r2, r2, lr
 801a534:	f834 8002 	ldrh.w	r8, [r4, r2]
 801a538:	9203      	str	r2, [sp, #12]
 801a53a:	9a05      	ldr	r2, [sp, #20]
 801a53c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a540:	4356      	muls	r6, r2
 801a542:	1c72      	adds	r2, r6, #1
 801a544:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a548:	1212      	asrs	r2, r2, #8
 801a54a:	fa1f f982 	uxth.w	r9, r2
 801a54e:	43d2      	mvns	r2, r2
 801a550:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a554:	fb16 f609 	smulbb	r6, r6, r9
 801a558:	b2ed      	uxtb	r5, r5
 801a55a:	ea4f 2728 	mov.w	r7, r8, asr #8
 801a55e:	fb15 f509 	smulbb	r5, r5, r9
 801a562:	b2d2      	uxtb	r2, r2
 801a564:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a568:	fb07 6702 	mla	r7, r7, r2, r6
 801a56c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a570:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a574:	fb1a fa09 	smulbb	sl, sl, r9
 801a578:	fa5f f888 	uxtb.w	r8, r8
 801a57c:	fb08 5502 	mla	r5, r8, r2, r5
 801a580:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a584:	fb06 a602 	mla	r6, r6, r2, sl
 801a588:	b2bf      	uxth	r7, r7
 801a58a:	b2ad      	uxth	r5, r5
 801a58c:	1c7a      	adds	r2, r7, #1
 801a58e:	f105 0a01 	add.w	sl, r5, #1
 801a592:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a596:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a59a:	b2b6      	uxth	r6, r6
 801a59c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a5a0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a5a4:	ea4a 0707 	orr.w	r7, sl, r7
 801a5a8:	f106 0a01 	add.w	sl, r6, #1
 801a5ac:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a5b0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a5b4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a5b8:	9a03      	ldr	r2, [sp, #12]
 801a5ba:	ea47 070a 	orr.w	r7, r7, sl
 801a5be:	52a7      	strh	r7, [r4, r2]
 801a5c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a5c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a5c6:	4410      	add	r0, r2
 801a5c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5ca:	4411      	add	r1, r2
 801a5cc:	e755      	b.n	801a47a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a5ce:	f04f 0800 	mov.w	r8, #0
 801a5d2:	eba3 0208 	sub.w	r2, r3, r8
 801a5d6:	2a00      	cmp	r2, #0
 801a5d8:	f77f af53 	ble.w	801a482 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a5dc:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801a5e0:	9f01      	ldr	r7, [sp, #4]
 801a5e2:	140a      	asrs	r2, r1, #16
 801a5e4:	fb06 7202 	mla	r2, r6, r2, r7
 801a5e8:	1405      	asrs	r5, r0, #16
 801a5ea:	5d52      	ldrb	r2, [r2, r5]
 801a5ec:	9d02      	ldr	r5, [sp, #8]
 801a5ee:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a5f2:	0e2e      	lsrs	r6, r5, #24
 801a5f4:	d044      	beq.n	801a680 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801a5f6:	9a05      	ldr	r2, [sp, #20]
 801a5f8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801a5fc:	4356      	muls	r6, r2
 801a5fe:	1c72      	adds	r2, r6, #1
 801a600:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a604:	1212      	asrs	r2, r2, #8
 801a606:	fa1f f982 	uxth.w	r9, r2
 801a60a:	43d2      	mvns	r2, r2
 801a60c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a610:	fb16 f609 	smulbb	r6, r6, r9
 801a614:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a618:	b2ed      	uxtb	r5, r5
 801a61a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a61e:	fb15 f509 	smulbb	r5, r5, r9
 801a622:	b2d2      	uxtb	r2, r2
 801a624:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a628:	fb07 6702 	mla	r7, r7, r2, r6
 801a62c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a630:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a634:	fb1a fa09 	smulbb	sl, sl, r9
 801a638:	fa5f fe8e 	uxtb.w	lr, lr
 801a63c:	fb0e 5502 	mla	r5, lr, r2, r5
 801a640:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a644:	fb06 a602 	mla	r6, r6, r2, sl
 801a648:	b2bf      	uxth	r7, r7
 801a64a:	b2ad      	uxth	r5, r5
 801a64c:	1c7a      	adds	r2, r7, #1
 801a64e:	f105 0a01 	add.w	sl, r5, #1
 801a652:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a656:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a65a:	b2b6      	uxth	r6, r6
 801a65c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a660:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a664:	ea4a 0707 	orr.w	r7, sl, r7
 801a668:	f106 0a01 	add.w	sl, r6, #1
 801a66c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a670:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a674:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a678:	ea47 070a 	orr.w	r7, r7, sl
 801a67c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a682:	f108 0801 	add.w	r8, r8, #1
 801a686:	4410      	add	r0, r2
 801a688:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a68a:	4411      	add	r1, r2
 801a68c:	e7a1      	b.n	801a5d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801a68e:	b007      	add	sp, #28
 801a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a694 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a69c:	b085      	sub	sp, #20
 801a69e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a6a0:	468b      	mov	fp, r1
 801a6a2:	6841      	ldr	r1, [r0, #4]
 801a6a4:	9203      	str	r2, [sp, #12]
 801a6a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a6aa:	fb01 2404 	mla	r4, r1, r4, r2
 801a6ae:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a6b2:	6802      	ldr	r2, [r0, #0]
 801a6b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a6b8:	f8de 2000 	ldr.w	r2, [lr]
 801a6bc:	9200      	str	r2, [sp, #0]
 801a6be:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a6c2:	3204      	adds	r2, #4
 801a6c4:	9201      	str	r2, [sp, #4]
 801a6c6:	f1bb 0f00 	cmp.w	fp, #0
 801a6ca:	dc03      	bgt.n	801a6d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a6cc:	9a03      	ldr	r2, [sp, #12]
 801a6ce:	2a00      	cmp	r2, #0
 801a6d0:	f340 8153 	ble.w	801a97a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a6d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a6d6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a6da:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a6de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a6e0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a6e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	dd0e      	ble.n	801a70a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a6ec:	1408      	asrs	r0, r1, #16
 801a6ee:	d405      	bmi.n	801a6fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a6f0:	42b8      	cmp	r0, r7
 801a6f2:	da03      	bge.n	801a6fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a6f4:	1410      	asrs	r0, r2, #16
 801a6f6:	d401      	bmi.n	801a6fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a6f8:	42b0      	cmp	r0, r6
 801a6fa:	db07      	blt.n	801a70c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a6fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a6fe:	3b01      	subs	r3, #1
 801a700:	4401      	add	r1, r0
 801a702:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a704:	3402      	adds	r4, #2
 801a706:	4402      	add	r2, r0
 801a708:	e7ee      	b.n	801a6e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a70a:	d017      	beq.n	801a73c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a70c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a70e:	1e58      	subs	r0, r3, #1
 801a710:	fb05 1500 	mla	r5, r5, r0, r1
 801a714:	142d      	asrs	r5, r5, #16
 801a716:	d409      	bmi.n	801a72c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a718:	42bd      	cmp	r5, r7
 801a71a:	da07      	bge.n	801a72c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a71c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a71e:	fb05 2000 	mla	r0, r5, r0, r2
 801a722:	1400      	asrs	r0, r0, #16
 801a724:	d402      	bmi.n	801a72c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a726:	42b0      	cmp	r0, r6
 801a728:	f2c0 80bc 	blt.w	801a8a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801a72c:	2600      	movs	r6, #0
 801a72e:	1998      	adds	r0, r3, r6
 801a730:	2800      	cmp	r0, #0
 801a732:	dc3e      	bgt.n	801a7b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a734:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a738:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a73c:	f1bb 0f00 	cmp.w	fp, #0
 801a740:	f340 811b 	ble.w	801a97a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a744:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a748:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a74c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a750:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a754:	eeb0 6a62 	vmov.f32	s12, s5
 801a758:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a75c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a760:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a764:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a768:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a76c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a770:	eeb0 6a43 	vmov.f32	s12, s6
 801a774:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a778:	ee12 2a90 	vmov	r2, s5
 801a77c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a782:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a786:	fb92 f3f3 	sdiv	r3, r2, r3
 801a78a:	ee13 2a10 	vmov	r2, s6
 801a78e:	9311      	str	r3, [sp, #68]	; 0x44
 801a790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a792:	f1bb 0b01 	subs.w	fp, fp, #1
 801a796:	fb92 f3f3 	sdiv	r3, r2, r3
 801a79a:	9a03      	ldr	r2, [sp, #12]
 801a79c:	9312      	str	r3, [sp, #72]	; 0x48
 801a79e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a7a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7a4:	eeb0 3a67 	vmov.f32	s6, s15
 801a7a8:	bf08      	it	eq
 801a7aa:	4613      	moveq	r3, r2
 801a7ac:	eef0 2a47 	vmov.f32	s5, s14
 801a7b0:	e789      	b.n	801a6c6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a7b2:	140f      	asrs	r7, r1, #16
 801a7b4:	d426      	bmi.n	801a804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7b6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a7ba:	42bd      	cmp	r5, r7
 801a7bc:	dd22      	ble.n	801a804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7be:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a7c2:	d41f      	bmi.n	801a804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7c4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a7c8:	4560      	cmp	r0, ip
 801a7ca:	dd1b      	ble.n	801a804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7cc:	9800      	ldr	r0, [sp, #0]
 801a7ce:	b22d      	sxth	r5, r5
 801a7d0:	fb0c 0505 	mla	r5, ip, r5, r0
 801a7d4:	5de8      	ldrb	r0, [r5, r7]
 801a7d6:	9d01      	ldr	r5, [sp, #4]
 801a7d8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a7dc:	0e07      	lsrs	r7, r0, #24
 801a7de:	2fff      	cmp	r7, #255	; 0xff
 801a7e0:	d116      	bne.n	801a810 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a7e2:	f06f 0501 	mvn.w	r5, #1
 801a7e6:	fb05 f706 	mul.w	r7, r5, r6
 801a7ea:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a7ee:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a7f2:	0945      	lsrs	r5, r0, #5
 801a7f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a7f8:	ea4c 0505 	orr.w	r5, ip, r5
 801a7fc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a800:	4305      	orrs	r5, r0
 801a802:	53e5      	strh	r5, [r4, r7]
 801a804:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a806:	3e01      	subs	r6, #1
 801a808:	4401      	add	r1, r0
 801a80a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a80c:	4402      	add	r2, r0
 801a80e:	e78e      	b.n	801a72e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a810:	b2fd      	uxtb	r5, r7
 801a812:	2f00      	cmp	r7, #0
 801a814:	d0f6      	beq.n	801a804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a816:	f06f 0701 	mvn.w	r7, #1
 801a81a:	fa1f f985 	uxth.w	r9, r5
 801a81e:	43ed      	mvns	r5, r5
 801a820:	4377      	muls	r7, r6
 801a822:	f834 8007 	ldrh.w	r8, [r4, r7]
 801a826:	9702      	str	r7, [sp, #8]
 801a828:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a82c:	fb17 f709 	smulbb	r7, r7, r9
 801a830:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a834:	b2c0      	uxtb	r0, r0
 801a836:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a83a:	fb10 f009 	smulbb	r0, r0, r9
 801a83e:	b2ed      	uxtb	r5, r5
 801a840:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a844:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a848:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a84c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a850:	fb1a fa09 	smulbb	sl, sl, r9
 801a854:	fa5f f888 	uxtb.w	r8, r8
 801a858:	fb08 0005 	mla	r0, r8, r5, r0
 801a85c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a860:	fb07 a705 	mla	r7, r7, r5, sl
 801a864:	b280      	uxth	r0, r0
 801a866:	fa1f fc8c 	uxth.w	ip, ip
 801a86a:	f100 0a01 	add.w	sl, r0, #1
 801a86e:	f10c 0501 	add.w	r5, ip, #1
 801a872:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a876:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a87a:	b2bf      	uxth	r7, r7
 801a87c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a880:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a884:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a888:	f107 0a01 	add.w	sl, r7, #1
 801a88c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a890:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a894:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a898:	9802      	ldr	r0, [sp, #8]
 801a89a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a89e:	f824 c000 	strh.w	ip, [r4, r0]
 801a8a2:	e7af      	b.n	801a804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a8a4:	f04f 0800 	mov.w	r8, #0
 801a8a8:	eba3 0008 	sub.w	r0, r3, r8
 801a8ac:	2800      	cmp	r0, #0
 801a8ae:	f77f af41 	ble.w	801a734 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a8b2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a8b6:	9f00      	ldr	r7, [sp, #0]
 801a8b8:	1410      	asrs	r0, r2, #16
 801a8ba:	fb06 7000 	mla	r0, r6, r0, r7
 801a8be:	140d      	asrs	r5, r1, #16
 801a8c0:	5d40      	ldrb	r0, [r0, r5]
 801a8c2:	9d01      	ldr	r5, [sp, #4]
 801a8c4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801a8c8:	0e2e      	lsrs	r6, r5, #24
 801a8ca:	2eff      	cmp	r6, #255	; 0xff
 801a8cc:	d112      	bne.n	801a8f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801a8ce:	482c      	ldr	r0, [pc, #176]	; (801a980 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801a8d0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801a8d4:	0968      	lsrs	r0, r5, #5
 801a8d6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a8da:	4330      	orrs	r0, r6
 801a8dc:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a8e0:	4328      	orrs	r0, r5
 801a8e2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801a8e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a8e8:	f108 0801 	add.w	r8, r8, #1
 801a8ec:	4401      	add	r1, r0
 801a8ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a8f0:	4402      	add	r2, r0
 801a8f2:	e7d9      	b.n	801a8a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a8f4:	b2f0      	uxtb	r0, r6
 801a8f6:	2e00      	cmp	r6, #0
 801a8f8:	d0f5      	beq.n	801a8e6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a8fa:	fa1f f980 	uxth.w	r9, r0
 801a8fe:	43c0      	mvns	r0, r0
 801a900:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a904:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a908:	fb16 f609 	smulbb	r6, r6, r9
 801a90c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a910:	b2ed      	uxtb	r5, r5
 801a912:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a916:	fb15 f509 	smulbb	r5, r5, r9
 801a91a:	b2c0      	uxtb	r0, r0
 801a91c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a920:	fb07 6700 	mla	r7, r7, r0, r6
 801a924:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a928:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a92c:	fb1a fa09 	smulbb	sl, sl, r9
 801a930:	fa5f fc8c 	uxtb.w	ip, ip
 801a934:	fb0c 5500 	mla	r5, ip, r0, r5
 801a938:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a93c:	fb06 a600 	mla	r6, r6, r0, sl
 801a940:	b2bf      	uxth	r7, r7
 801a942:	b2ad      	uxth	r5, r5
 801a944:	1c78      	adds	r0, r7, #1
 801a946:	f105 0a01 	add.w	sl, r5, #1
 801a94a:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801a94e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a952:	b2b6      	uxth	r6, r6
 801a954:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a958:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a95c:	ea4a 0707 	orr.w	r7, sl, r7
 801a960:	f106 0a01 	add.w	sl, r6, #1
 801a964:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a968:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a96c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a970:	ea47 070a 	orr.w	r7, r7, sl
 801a974:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a978:	e7b5      	b.n	801a8e6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a97a:	b005      	add	sp, #20
 801a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a980:	fffff800 	.word	0xfffff800

0801a984 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a98c:	b087      	sub	sp, #28
 801a98e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a990:	468b      	mov	fp, r1
 801a992:	9204      	str	r2, [sp, #16]
 801a994:	6861      	ldr	r1, [r4, #4]
 801a996:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a99a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a99e:	9205      	str	r2, [sp, #20]
 801a9a0:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a9a4:	fb01 2000 	mla	r0, r1, r0, r2
 801a9a8:	6822      	ldr	r2, [r4, #0]
 801a9aa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a9ae:	f8de 2000 	ldr.w	r2, [lr]
 801a9b2:	9201      	str	r2, [sp, #4]
 801a9b4:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a9b8:	9202      	str	r2, [sp, #8]
 801a9ba:	f1bb 0f00 	cmp.w	fp, #0
 801a9be:	dc03      	bgt.n	801a9c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a9c0:	9a04      	ldr	r2, [sp, #16]
 801a9c2:	2a00      	cmp	r2, #0
 801a9c4:	f340 8142 	ble.w	801ac4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a9c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a9ca:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a9ce:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a9d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a9d4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a9d8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	dd0e      	ble.n	801a9fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a9e0:	140c      	asrs	r4, r1, #16
 801a9e2:	d405      	bmi.n	801a9f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a9e4:	42bc      	cmp	r4, r7
 801a9e6:	da03      	bge.n	801a9f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a9e8:	1414      	asrs	r4, r2, #16
 801a9ea:	d401      	bmi.n	801a9f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a9ec:	42b4      	cmp	r4, r6
 801a9ee:	db07      	blt.n	801aa00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a9f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a9f2:	3b01      	subs	r3, #1
 801a9f4:	4421      	add	r1, r4
 801a9f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a9f8:	3002      	adds	r0, #2
 801a9fa:	4422      	add	r2, r4
 801a9fc:	e7ee      	b.n	801a9dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801a9fe:	d019      	beq.n	801aa34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aa00:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801aa02:	1e5c      	subs	r4, r3, #1
 801aa04:	fb05 1504 	mla	r5, r5, r4, r1
 801aa08:	142d      	asrs	r5, r5, #16
 801aa0a:	d409      	bmi.n	801aa20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa0c:	42bd      	cmp	r5, r7
 801aa0e:	da07      	bge.n	801aa20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa10:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801aa12:	fb05 2404 	mla	r4, r5, r4, r2
 801aa16:	1424      	asrs	r4, r4, #16
 801aa18:	d402      	bmi.n	801aa20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa1a:	42b4      	cmp	r4, r6
 801aa1c:	f2c0 80b1 	blt.w	801ab82 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801aa20:	f04f 0800 	mov.w	r8, #0
 801aa24:	eb03 0408 	add.w	r4, r3, r8
 801aa28:	2c00      	cmp	r4, #0
 801aa2a:	dc3e      	bgt.n	801aaaa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801aa2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aa34:	f1bb 0f00 	cmp.w	fp, #0
 801aa38:	f340 8108 	ble.w	801ac4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801aa3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aa40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aa44:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aa48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa4c:	eeb0 6a62 	vmov.f32	s12, s5
 801aa50:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa58:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa64:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801aa68:	eeb0 6a43 	vmov.f32	s12, s6
 801aa6c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa70:	ee12 2a90 	vmov	r2, s5
 801aa74:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa82:	ee13 2a10 	vmov	r2, s6
 801aa86:	9313      	str	r3, [sp, #76]	; 0x4c
 801aa88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa8a:	f1bb 0b01 	subs.w	fp, fp, #1
 801aa8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa92:	9a04      	ldr	r2, [sp, #16]
 801aa94:	9314      	str	r3, [sp, #80]	; 0x50
 801aa96:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801aa9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa9c:	eeb0 3a67 	vmov.f32	s6, s15
 801aaa0:	bf08      	it	eq
 801aaa2:	4613      	moveq	r3, r2
 801aaa4:	eef0 2a47 	vmov.f32	s5, s14
 801aaa8:	e787      	b.n	801a9ba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801aaaa:	140e      	asrs	r6, r1, #16
 801aaac:	d462      	bmi.n	801ab74 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aaae:	f8de 5008 	ldr.w	r5, [lr, #8]
 801aab2:	42b5      	cmp	r5, r6
 801aab4:	dd5e      	ble.n	801ab74 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aab6:	1417      	asrs	r7, r2, #16
 801aab8:	d45c      	bmi.n	801ab74 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aaba:	f8de 400c 	ldr.w	r4, [lr, #12]
 801aabe:	42bc      	cmp	r4, r7
 801aac0:	dd58      	ble.n	801ab74 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aac2:	b22d      	sxth	r5, r5
 801aac4:	fb07 6505 	mla	r5, r7, r5, r6
 801aac8:	9c02      	ldr	r4, [sp, #8]
 801aaca:	5d66      	ldrb	r6, [r4, r5]
 801aacc:	2e00      	cmp	r6, #0
 801aace:	d051      	beq.n	801ab74 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aad0:	9c01      	ldr	r4, [sp, #4]
 801aad2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801aad6:	f06f 0401 	mvn.w	r4, #1
 801aada:	fb04 f408 	mul.w	r4, r4, r8
 801aade:	5b05      	ldrh	r5, [r0, r4]
 801aae0:	9403      	str	r4, [sp, #12]
 801aae2:	9c05      	ldr	r4, [sp, #20]
 801aae4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801aae8:	4366      	muls	r6, r4
 801aaea:	1c74      	adds	r4, r6, #1
 801aaec:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801aaf0:	1224      	asrs	r4, r4, #8
 801aaf2:	b2a7      	uxth	r7, r4
 801aaf4:	43e4      	mvns	r4, r4
 801aaf6:	122e      	asrs	r6, r5, #8
 801aaf8:	b2e4      	uxtb	r4, r4
 801aafa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801aafe:	fb16 f604 	smulbb	r6, r6, r4
 801ab02:	00ed      	lsls	r5, r5, #3
 801ab04:	b2ed      	uxtb	r5, r5
 801ab06:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801ab0a:	fb15 f504 	smulbb	r5, r5, r4
 801ab0e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ab12:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ab16:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ab1a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801ab1e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ab22:	fb1a fa04 	smulbb	sl, sl, r4
 801ab26:	fa5f f989 	uxtb.w	r9, r9
 801ab2a:	fb09 5507 	mla	r5, r9, r7, r5
 801ab2e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ab32:	fb06 a607 	mla	r6, r6, r7, sl
 801ab36:	fa1f fc8c 	uxth.w	ip, ip
 801ab3a:	b2ad      	uxth	r5, r5
 801ab3c:	f10c 0401 	add.w	r4, ip, #1
 801ab40:	f105 0a01 	add.w	sl, r5, #1
 801ab44:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ab48:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ab4c:	b2b6      	uxth	r6, r6
 801ab4e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ab52:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ab56:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ab5a:	f106 0a01 	add.w	sl, r6, #1
 801ab5e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ab62:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ab66:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ab6a:	9c03      	ldr	r4, [sp, #12]
 801ab6c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ab70:	f820 c004 	strh.w	ip, [r0, r4]
 801ab74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ab76:	f108 38ff 	add.w	r8, r8, #4294967295
 801ab7a:	4421      	add	r1, r4
 801ab7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ab7e:	4422      	add	r2, r4
 801ab80:	e750      	b.n	801aa24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ab82:	f04f 0900 	mov.w	r9, #0
 801ab86:	eba3 0409 	sub.w	r4, r3, r9
 801ab8a:	2c00      	cmp	r4, #0
 801ab8c:	f77f af4e 	ble.w	801aa2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ab90:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ab94:	140d      	asrs	r5, r1, #16
 801ab96:	1414      	asrs	r4, r2, #16
 801ab98:	fb06 5404 	mla	r4, r6, r4, r5
 801ab9c:	9d02      	ldr	r5, [sp, #8]
 801ab9e:	5d2e      	ldrb	r6, [r5, r4]
 801aba0:	2e00      	cmp	r6, #0
 801aba2:	d04c      	beq.n	801ac3e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801aba4:	9d01      	ldr	r5, [sp, #4]
 801aba6:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801abaa:	9c05      	ldr	r4, [sp, #20]
 801abac:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801abb0:	4366      	muls	r6, r4
 801abb2:	1c74      	adds	r4, r6, #1
 801abb4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801abb8:	1224      	asrs	r4, r4, #8
 801abba:	b2a7      	uxth	r7, r4
 801abbc:	43e4      	mvns	r4, r4
 801abbe:	122e      	asrs	r6, r5, #8
 801abc0:	b2e4      	uxtb	r4, r4
 801abc2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801abc6:	fb16 f604 	smulbb	r6, r6, r4
 801abca:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801abce:	00ed      	lsls	r5, r5, #3
 801abd0:	b2ed      	uxtb	r5, r5
 801abd2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801abd6:	fb15 f504 	smulbb	r5, r5, r4
 801abda:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801abde:	fb0c 6c07 	mla	ip, ip, r7, r6
 801abe2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801abe6:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801abea:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801abee:	fb1a fa04 	smulbb	sl, sl, r4
 801abf2:	fa5f f888 	uxtb.w	r8, r8
 801abf6:	fb08 5507 	mla	r5, r8, r7, r5
 801abfa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801abfe:	fb06 a607 	mla	r6, r6, r7, sl
 801ac02:	fa1f fc8c 	uxth.w	ip, ip
 801ac06:	b2ad      	uxth	r5, r5
 801ac08:	f10c 0401 	add.w	r4, ip, #1
 801ac0c:	f105 0a01 	add.w	sl, r5, #1
 801ac10:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ac14:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ac18:	b2b6      	uxth	r6, r6
 801ac1a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ac1e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ac22:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ac26:	f106 0a01 	add.w	sl, r6, #1
 801ac2a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ac2e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ac32:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ac36:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ac3a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801ac3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac40:	f109 0901 	add.w	r9, r9, #1
 801ac44:	4421      	add	r1, r4
 801ac46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac48:	4422      	add	r2, r4
 801ac4a:	e79c      	b.n	801ab86 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ac4c:	b007      	add	sp, #28
 801ac4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ac56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac5a:	b085      	sub	sp, #20
 801ac5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac5e:	468b      	mov	fp, r1
 801ac60:	6861      	ldr	r1, [r4, #4]
 801ac62:	9203      	str	r2, [sp, #12]
 801ac64:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801ac68:	fb01 2000 	mla	r0, r1, r0, r2
 801ac6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801ac70:	6822      	ldr	r2, [r4, #0]
 801ac72:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ac76:	f8d8 2000 	ldr.w	r2, [r8]
 801ac7a:	9200      	str	r2, [sp, #0]
 801ac7c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ac80:	9201      	str	r2, [sp, #4]
 801ac82:	f1bb 0f00 	cmp.w	fp, #0
 801ac86:	dc03      	bgt.n	801ac90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ac88:	9a03      	ldr	r2, [sp, #12]
 801ac8a:	2a00      	cmp	r2, #0
 801ac8c:	f340 8146 	ble.w	801af1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ac90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac92:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ac96:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ac9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ac9c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801aca0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	dd0e      	ble.n	801acc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801aca8:	140c      	asrs	r4, r1, #16
 801acaa:	d405      	bmi.n	801acb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801acac:	42bc      	cmp	r4, r7
 801acae:	da03      	bge.n	801acb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801acb0:	1414      	asrs	r4, r2, #16
 801acb2:	d401      	bmi.n	801acb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801acb4:	42b4      	cmp	r4, r6
 801acb6:	db07      	blt.n	801acc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801acb8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801acba:	3b01      	subs	r3, #1
 801acbc:	4421      	add	r1, r4
 801acbe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801acc0:	3002      	adds	r0, #2
 801acc2:	4422      	add	r2, r4
 801acc4:	e7ee      	b.n	801aca4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801acc6:	d017      	beq.n	801acf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801acc8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801acca:	1e5c      	subs	r4, r3, #1
 801accc:	fb05 1504 	mla	r5, r5, r4, r1
 801acd0:	142d      	asrs	r5, r5, #16
 801acd2:	d409      	bmi.n	801ace8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801acd4:	42bd      	cmp	r5, r7
 801acd6:	da07      	bge.n	801ace8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801acd8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801acda:	fb05 2404 	mla	r4, r5, r4, r2
 801acde:	1424      	asrs	r4, r4, #16
 801ace0:	d402      	bmi.n	801ace8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ace2:	42b4      	cmp	r4, r6
 801ace4:	f2c0 80b3 	blt.w	801ae4e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ace8:	2600      	movs	r6, #0
 801acea:	199c      	adds	r4, r3, r6
 801acec:	2c00      	cmp	r4, #0
 801acee:	dc3e      	bgt.n	801ad6e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801acf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acf4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801acf8:	f1bb 0f00 	cmp.w	fp, #0
 801acfc:	f340 810e 	ble.w	801af1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ad00:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad08:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ad0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad10:	eeb0 6a62 	vmov.f32	s12, s5
 801ad14:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad18:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ad28:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ad2c:	eeb0 6a43 	vmov.f32	s12, s6
 801ad30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ad34:	ee12 2a90 	vmov	r2, s5
 801ad38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ad3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad46:	ee13 2a10 	vmov	r2, s6
 801ad4a:	9311      	str	r3, [sp, #68]	; 0x44
 801ad4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad4e:	f1bb 0b01 	subs.w	fp, fp, #1
 801ad52:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad56:	9a03      	ldr	r2, [sp, #12]
 801ad58:	9312      	str	r3, [sp, #72]	; 0x48
 801ad5a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ad5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad60:	eeb0 3a67 	vmov.f32	s6, s15
 801ad64:	bf08      	it	eq
 801ad66:	4613      	moveq	r3, r2
 801ad68:	eef0 2a47 	vmov.f32	s5, s14
 801ad6c:	e789      	b.n	801ac82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ad6e:	140f      	asrs	r7, r1, #16
 801ad70:	d418      	bmi.n	801ada4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad72:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ad76:	42bd      	cmp	r5, r7
 801ad78:	dd14      	ble.n	801ada4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad7a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ad7e:	d411      	bmi.n	801ada4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad80:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ad84:	4564      	cmp	r4, ip
 801ad86:	dd0d      	ble.n	801ada4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad88:	b22d      	sxth	r5, r5
 801ad8a:	fb0c 7505 	mla	r5, ip, r5, r7
 801ad8e:	9c01      	ldr	r4, [sp, #4]
 801ad90:	5d64      	ldrb	r4, [r4, r5]
 801ad92:	2cff      	cmp	r4, #255	; 0xff
 801ad94:	d10c      	bne.n	801adb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ad96:	9c00      	ldr	r4, [sp, #0]
 801ad98:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801ad9c:	f06f 0401 	mvn.w	r4, #1
 801ada0:	4374      	muls	r4, r6
 801ada2:	5305      	strh	r5, [r0, r4]
 801ada4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ada6:	3e01      	subs	r6, #1
 801ada8:	4421      	add	r1, r4
 801adaa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801adac:	4422      	add	r2, r4
 801adae:	e79c      	b.n	801acea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801adb0:	2c00      	cmp	r4, #0
 801adb2:	d0f7      	beq.n	801ada4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801adb4:	9f00      	ldr	r7, [sp, #0]
 801adb6:	fa1f fc84 	uxth.w	ip, r4
 801adba:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801adbe:	f06f 0501 	mvn.w	r5, #1
 801adc2:	43e4      	mvns	r4, r4
 801adc4:	4375      	muls	r5, r6
 801adc6:	9502      	str	r5, [sp, #8]
 801adc8:	5b45      	ldrh	r5, [r0, r5]
 801adca:	b2e4      	uxtb	r4, r4
 801adcc:	122f      	asrs	r7, r5, #8
 801adce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801add2:	fb17 f704 	smulbb	r7, r7, r4
 801add6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801adda:	00ed      	lsls	r5, r5, #3
 801addc:	b2ed      	uxtb	r5, r5
 801adde:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801ade2:	fb15 f504 	smulbb	r5, r5, r4
 801ade6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801adea:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801adee:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801adf2:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801adf6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801adfa:	fb1a fa04 	smulbb	sl, sl, r4
 801adfe:	fa5f f989 	uxtb.w	r9, r9
 801ae02:	fb09 550c 	mla	r5, r9, ip, r5
 801ae06:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ae0a:	fb07 a70c 	mla	r7, r7, ip, sl
 801ae0e:	fa1f fe8e 	uxth.w	lr, lr
 801ae12:	b2ad      	uxth	r5, r5
 801ae14:	f10e 0401 	add.w	r4, lr, #1
 801ae18:	f105 0a01 	add.w	sl, r5, #1
 801ae1c:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801ae20:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ae24:	b2bf      	uxth	r7, r7
 801ae26:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ae2a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ae2e:	ea4a 0e0e 	orr.w	lr, sl, lr
 801ae32:	f107 0a01 	add.w	sl, r7, #1
 801ae36:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ae3a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ae3e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ae42:	9c02      	ldr	r4, [sp, #8]
 801ae44:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ae48:	f820 e004 	strh.w	lr, [r0, r4]
 801ae4c:	e7aa      	b.n	801ada4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ae4e:	f04f 0900 	mov.w	r9, #0
 801ae52:	eba3 0409 	sub.w	r4, r3, r9
 801ae56:	2c00      	cmp	r4, #0
 801ae58:	f77f af4a 	ble.w	801acf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ae5c:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ae60:	1414      	asrs	r4, r2, #16
 801ae62:	140d      	asrs	r5, r1, #16
 801ae64:	fb06 5504 	mla	r5, r6, r4, r5
 801ae68:	9c01      	ldr	r4, [sp, #4]
 801ae6a:	5d64      	ldrb	r4, [r4, r5]
 801ae6c:	2cff      	cmp	r4, #255	; 0xff
 801ae6e:	d10b      	bne.n	801ae88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ae70:	9c00      	ldr	r4, [sp, #0]
 801ae72:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801ae76:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801ae7a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae7c:	f109 0901 	add.w	r9, r9, #1
 801ae80:	4421      	add	r1, r4
 801ae82:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ae84:	4422      	add	r2, r4
 801ae86:	e7e4      	b.n	801ae52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ae88:	2c00      	cmp	r4, #0
 801ae8a:	d0f6      	beq.n	801ae7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801ae8c:	b2a7      	uxth	r7, r4
 801ae8e:	43e4      	mvns	r4, r4
 801ae90:	9e00      	ldr	r6, [sp, #0]
 801ae92:	b2e4      	uxtb	r4, r4
 801ae94:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801ae98:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ae9c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801aea0:	122e      	asrs	r6, r5, #8
 801aea2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801aea6:	fb16 f604 	smulbb	r6, r6, r4
 801aeaa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801aeae:	00ed      	lsls	r5, r5, #3
 801aeb0:	b2ed      	uxtb	r5, r5
 801aeb2:	fb15 f504 	smulbb	r5, r5, r4
 801aeb6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aeba:	fb0c 6c07 	mla	ip, ip, r7, r6
 801aebe:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801aec2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801aec6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aeca:	fb1a fa04 	smulbb	sl, sl, r4
 801aece:	fa5f fe8e 	uxtb.w	lr, lr
 801aed2:	fb0e 5507 	mla	r5, lr, r7, r5
 801aed6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aeda:	fb06 a607 	mla	r6, r6, r7, sl
 801aede:	fa1f fc8c 	uxth.w	ip, ip
 801aee2:	b2ad      	uxth	r5, r5
 801aee4:	f10c 0401 	add.w	r4, ip, #1
 801aee8:	f105 0a01 	add.w	sl, r5, #1
 801aeec:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801aef0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801aef4:	b2b6      	uxth	r6, r6
 801aef6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aefa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801aefe:	ea4a 0c0c 	orr.w	ip, sl, ip
 801af02:	f106 0a01 	add.w	sl, r6, #1
 801af06:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801af0a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801af0e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801af12:	ea4c 0c0a 	orr.w	ip, ip, sl
 801af16:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801af1a:	e7ae      	b.n	801ae7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801af1c:	b005      	add	sp, #20
 801af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af22 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801af22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af26:	b085      	sub	sp, #20
 801af28:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801af2a:	9100      	str	r1, [sp, #0]
 801af2c:	9203      	str	r2, [sp, #12]
 801af2e:	6841      	ldr	r1, [r0, #4]
 801af30:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801af34:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801af38:	9201      	str	r2, [sp, #4]
 801af3a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801af3e:	fb01 2404 	mla	r4, r1, r4, r2
 801af42:	6802      	ldr	r2, [r0, #0]
 801af44:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801af48:	f8de 2000 	ldr.w	r2, [lr]
 801af4c:	9202      	str	r2, [sp, #8]
 801af4e:	9a01      	ldr	r2, [sp, #4]
 801af50:	43d6      	mvns	r6, r2
 801af52:	b2f6      	uxtb	r6, r6
 801af54:	9a00      	ldr	r2, [sp, #0]
 801af56:	2a00      	cmp	r2, #0
 801af58:	dc03      	bgt.n	801af62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801af5a:	9a03      	ldr	r2, [sp, #12]
 801af5c:	2a00      	cmp	r2, #0
 801af5e:	f340 8124 	ble.w	801b1aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801af62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af64:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801af68:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801af6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801af6e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801af72:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801af76:	2b00      	cmp	r3, #0
 801af78:	dd0e      	ble.n	801af98 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af7a:	1408      	asrs	r0, r1, #16
 801af7c:	d405      	bmi.n	801af8a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801af7e:	4560      	cmp	r0, ip
 801af80:	da03      	bge.n	801af8a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801af82:	1410      	asrs	r0, r2, #16
 801af84:	d401      	bmi.n	801af8a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801af86:	42b8      	cmp	r0, r7
 801af88:	db07      	blt.n	801af9a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801af8a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801af8c:	3b01      	subs	r3, #1
 801af8e:	4401      	add	r1, r0
 801af90:	9812      	ldr	r0, [sp, #72]	; 0x48
 801af92:	3402      	adds	r4, #2
 801af94:	4402      	add	r2, r0
 801af96:	e7ee      	b.n	801af76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801af98:	d06e      	beq.n	801b078 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801af9a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801af9c:	1e58      	subs	r0, r3, #1
 801af9e:	fb05 1500 	mla	r5, r5, r0, r1
 801afa2:	142d      	asrs	r5, r5, #16
 801afa4:	d45c      	bmi.n	801b060 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afa6:	4565      	cmp	r5, ip
 801afa8:	da5a      	bge.n	801b060 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afaa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801afac:	fb05 2000 	mla	r0, r5, r0, r2
 801afb0:	1400      	asrs	r0, r0, #16
 801afb2:	d455      	bmi.n	801b060 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afb4:	42b8      	cmp	r0, r7
 801afb6:	da53      	bge.n	801b060 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afb8:	4699      	mov	r9, r3
 801afba:	46a2      	mov	sl, r4
 801afbc:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801afc0:	f1b9 0f00 	cmp.w	r9, #0
 801afc4:	dd54      	ble.n	801b070 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801afc6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801afca:	140d      	asrs	r5, r1, #16
 801afcc:	1410      	asrs	r0, r2, #16
 801afce:	fb07 5000 	mla	r0, r7, r0, r5
 801afd2:	9d02      	ldr	r5, [sp, #8]
 801afd4:	f109 39ff 	add.w	r9, r9, #4294967295
 801afd8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801afdc:	f8ba 5000 	ldrh.w	r5, [sl]
 801afe0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801afe4:	122f      	asrs	r7, r5, #8
 801afe6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801afea:	fb17 f706 	smulbb	r7, r7, r6
 801afee:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801aff2:	00ed      	lsls	r5, r5, #3
 801aff4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801aff8:	b2ed      	uxtb	r5, r5
 801affa:	fb18 f806 	smulbb	r8, r8, r6
 801affe:	fb15 f506 	smulbb	r5, r5, r6
 801b002:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b006:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b00a:	10c7      	asrs	r7, r0, #3
 801b00c:	00c0      	lsls	r0, r0, #3
 801b00e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b012:	b2c0      	uxtb	r0, r0
 801b014:	fb07 870b 	mla	r7, r7, fp, r8
 801b018:	fb00 500b 	mla	r0, r0, fp, r5
 801b01c:	fa1f fc8c 	uxth.w	ip, ip
 801b020:	b280      	uxth	r0, r0
 801b022:	b2bf      	uxth	r7, r7
 801b024:	f10c 0501 	add.w	r5, ip, #1
 801b028:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b02c:	f107 0801 	add.w	r8, r7, #1
 801b030:	1c45      	adds	r5, r0, #1
 801b032:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b036:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b03a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b03c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b040:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b044:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b048:	ea45 0c0c 	orr.w	ip, r5, ip
 801b04c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b050:	4401      	add	r1, r0
 801b052:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b054:	ea4c 0c08 	orr.w	ip, ip, r8
 801b058:	f82a cb02 	strh.w	ip, [sl], #2
 801b05c:	4402      	add	r2, r0
 801b05e:	e7af      	b.n	801afc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b060:	f04f 0800 	mov.w	r8, #0
 801b064:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b068:	eb03 0008 	add.w	r0, r3, r8
 801b06c:	2800      	cmp	r0, #0
 801b06e:	dc41      	bgt.n	801b0f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b070:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b074:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b078:	9b00      	ldr	r3, [sp, #0]
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	f340 8095 	ble.w	801b1aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b084:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b088:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b08c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b090:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b094:	eef0 6a62 	vmov.f32	s13, s5
 801b098:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b09c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0ac:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b0b0:	eef0 6a43 	vmov.f32	s13, s6
 801b0b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0b8:	ee12 2a90 	vmov	r2, s5
 801b0bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0ca:	ee13 2a10 	vmov	r2, s6
 801b0ce:	9311      	str	r3, [sp, #68]	; 0x44
 801b0d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0d2:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b0d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0da:	9312      	str	r3, [sp, #72]	; 0x48
 801b0dc:	9b00      	ldr	r3, [sp, #0]
 801b0de:	9a03      	ldr	r2, [sp, #12]
 801b0e0:	3b01      	subs	r3, #1
 801b0e2:	9300      	str	r3, [sp, #0]
 801b0e4:	eeb0 3a67 	vmov.f32	s6, s15
 801b0e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0ea:	eef0 2a47 	vmov.f32	s5, s14
 801b0ee:	bf08      	it	eq
 801b0f0:	4613      	moveq	r3, r2
 801b0f2:	e72f      	b.n	801af54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b0f4:	140f      	asrs	r7, r1, #16
 801b0f6:	d451      	bmi.n	801b19c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b0f8:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b0fc:	42bd      	cmp	r5, r7
 801b0fe:	dd4d      	ble.n	801b19c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b100:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b104:	d44a      	bmi.n	801b19c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b106:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b10a:	4560      	cmp	r0, ip
 801b10c:	dd46      	ble.n	801b19c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b10e:	b22d      	sxth	r5, r5
 801b110:	fb0c 7505 	mla	r5, ip, r5, r7
 801b114:	9802      	ldr	r0, [sp, #8]
 801b116:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b11a:	f06f 0501 	mvn.w	r5, #1
 801b11e:	fb05 fb08 	mul.w	fp, r5, r8
 801b122:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b126:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b12a:	122f      	asrs	r7, r5, #8
 801b12c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b130:	fb17 f706 	smulbb	r7, r7, r6
 801b134:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b138:	00ed      	lsls	r5, r5, #3
 801b13a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b13e:	b2ed      	uxtb	r5, r5
 801b140:	fb19 f906 	smulbb	r9, r9, r6
 801b144:	fb15 f506 	smulbb	r5, r5, r6
 801b148:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b14c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b150:	10c7      	asrs	r7, r0, #3
 801b152:	00c0      	lsls	r0, r0, #3
 801b154:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b158:	b2c0      	uxtb	r0, r0
 801b15a:	fb07 970a 	mla	r7, r7, sl, r9
 801b15e:	fb00 500a 	mla	r0, r0, sl, r5
 801b162:	fa1f fc8c 	uxth.w	ip, ip
 801b166:	b2bf      	uxth	r7, r7
 801b168:	b280      	uxth	r0, r0
 801b16a:	f10c 0501 	add.w	r5, ip, #1
 801b16e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b172:	f107 0901 	add.w	r9, r7, #1
 801b176:	1c45      	adds	r5, r0, #1
 801b178:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b17c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b180:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b184:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b188:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b18c:	ea45 0c0c 	orr.w	ip, r5, ip
 801b190:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b194:	ea4c 0c09 	orr.w	ip, ip, r9
 801b198:	f824 c00b 	strh.w	ip, [r4, fp]
 801b19c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b19e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b1a2:	4401      	add	r1, r0
 801b1a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b1a6:	4402      	add	r2, r0
 801b1a8:	e75e      	b.n	801b068 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b1aa:	b005      	add	sp, #20
 801b1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b1b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1b8:	b085      	sub	sp, #20
 801b1ba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b1bc:	4693      	mov	fp, r2
 801b1be:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b1c2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b1c6:	6870      	ldr	r0, [r6, #4]
 801b1c8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b1ca:	fb00 2404 	mla	r4, r0, r4, r2
 801b1ce:	6832      	ldr	r2, [r6, #0]
 801b1d0:	9101      	str	r1, [sp, #4]
 801b1d2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b1d6:	682a      	ldr	r2, [r5, #0]
 801b1d8:	9202      	str	r2, [sp, #8]
 801b1da:	9a01      	ldr	r2, [sp, #4]
 801b1dc:	2a00      	cmp	r2, #0
 801b1de:	dc03      	bgt.n	801b1e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b1e0:	f1bb 0f00 	cmp.w	fp, #0
 801b1e4:	f340 809a 	ble.w	801b31c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b1e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b1ea:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b1ee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b1f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b1f4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b1f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	dd0c      	ble.n	801b21a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b200:	1406      	asrs	r6, r0, #16
 801b202:	d405      	bmi.n	801b210 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b204:	454e      	cmp	r6, r9
 801b206:	da03      	bge.n	801b210 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b208:	1416      	asrs	r6, r2, #16
 801b20a:	d401      	bmi.n	801b210 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b20c:	4546      	cmp	r6, r8
 801b20e:	db05      	blt.n	801b21c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b210:	4470      	add	r0, lr
 801b212:	4462      	add	r2, ip
 801b214:	3b01      	subs	r3, #1
 801b216:	3402      	adds	r4, #2
 801b218:	e7f0      	b.n	801b1fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b21a:	d00f      	beq.n	801b23c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b21c:	1e5e      	subs	r6, r3, #1
 801b21e:	fb0e 0706 	mla	r7, lr, r6, r0
 801b222:	143f      	asrs	r7, r7, #16
 801b224:	d541      	bpl.n	801b2aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b226:	4698      	mov	r8, r3
 801b228:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b22c:	9603      	str	r6, [sp, #12]
 801b22e:	f1b8 0f00 	cmp.w	r8, #0
 801b232:	dc56      	bgt.n	801b2e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801b234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b238:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b23c:	9b01      	ldr	r3, [sp, #4]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	dd6c      	ble.n	801b31c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b242:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b246:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b24a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b24e:	eeb0 6a62 	vmov.f32	s12, s5
 801b252:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b256:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b25a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b25e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b262:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b266:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b26a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b26e:	eeb0 6a43 	vmov.f32	s12, s6
 801b272:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b276:	ee12 2a90 	vmov	r2, s5
 801b27a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b27e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b280:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b284:	fb92 fef3 	sdiv	lr, r2, r3
 801b288:	ee13 2a10 	vmov	r2, s6
 801b28c:	fb92 fcf3 	sdiv	ip, r2, r3
 801b290:	9b01      	ldr	r3, [sp, #4]
 801b292:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b296:	3b01      	subs	r3, #1
 801b298:	9301      	str	r3, [sp, #4]
 801b29a:	eeb0 3a67 	vmov.f32	s6, s15
 801b29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2a0:	eef0 2a47 	vmov.f32	s5, s14
 801b2a4:	bf08      	it	eq
 801b2a6:	465b      	moveq	r3, fp
 801b2a8:	e797      	b.n	801b1da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b2aa:	454f      	cmp	r7, r9
 801b2ac:	dabb      	bge.n	801b226 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2ae:	fb0c 2606 	mla	r6, ip, r6, r2
 801b2b2:	1436      	asrs	r6, r6, #16
 801b2b4:	d4b7      	bmi.n	801b226 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2b6:	4546      	cmp	r6, r8
 801b2b8:	dab5      	bge.n	801b226 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2ba:	461e      	mov	r6, r3
 801b2bc:	46a0      	mov	r8, r4
 801b2be:	2e00      	cmp	r6, #0
 801b2c0:	ddb8      	ble.n	801b234 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b2c2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b2c6:	1417      	asrs	r7, r2, #16
 801b2c8:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b2cc:	fb0a 9707 	mla	r7, sl, r7, r9
 801b2d0:	9902      	ldr	r1, [sp, #8]
 801b2d2:	4470      	add	r0, lr
 801b2d4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b2d8:	4462      	add	r2, ip
 801b2da:	f828 7b02 	strh.w	r7, [r8], #2
 801b2de:	3e01      	subs	r6, #1
 801b2e0:	e7ed      	b.n	801b2be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b2e2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b2e6:	d414      	bmi.n	801b312 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b2e8:	68ae      	ldr	r6, [r5, #8]
 801b2ea:	454e      	cmp	r6, r9
 801b2ec:	dd11      	ble.n	801b312 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b2ee:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b2f2:	d40e      	bmi.n	801b312 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b2f4:	68ef      	ldr	r7, [r5, #12]
 801b2f6:	4557      	cmp	r7, sl
 801b2f8:	dd0b      	ble.n	801b312 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b2fa:	f06f 0101 	mvn.w	r1, #1
 801b2fe:	b236      	sxth	r6, r6
 801b300:	fb0a 9606 	mla	r6, sl, r6, r9
 801b304:	9f02      	ldr	r7, [sp, #8]
 801b306:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b30a:	fb01 f608 	mul.w	r6, r1, r8
 801b30e:	9903      	ldr	r1, [sp, #12]
 801b310:	538f      	strh	r7, [r1, r6]
 801b312:	4470      	add	r0, lr
 801b314:	4462      	add	r2, ip
 801b316:	f108 38ff 	add.w	r8, r8, #4294967295
 801b31a:	e788      	b.n	801b22e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b31c:	b005      	add	sp, #20
 801b31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b32a:	b087      	sub	sp, #28
 801b32c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b32e:	468b      	mov	fp, r1
 801b330:	9203      	str	r2, [sp, #12]
 801b332:	6841      	ldr	r1, [r0, #4]
 801b334:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b338:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b33c:	9204      	str	r2, [sp, #16]
 801b33e:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b342:	fb01 2505 	mla	r5, r1, r5, r2
 801b346:	6802      	ldr	r2, [r0, #0]
 801b348:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b34c:	f8d9 2000 	ldr.w	r2, [r9]
 801b350:	9201      	str	r2, [sp, #4]
 801b352:	f1bb 0f00 	cmp.w	fp, #0
 801b356:	dc03      	bgt.n	801b360 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b358:	9a03      	ldr	r2, [sp, #12]
 801b35a:	2a00      	cmp	r2, #0
 801b35c:	f340 8159 	ble.w	801b612 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b360:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b362:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b366:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b36a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b36c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b370:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b374:	2b00      	cmp	r3, #0
 801b376:	dd0e      	ble.n	801b396 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b378:	1402      	asrs	r2, r0, #16
 801b37a:	d405      	bmi.n	801b388 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b37c:	42ba      	cmp	r2, r7
 801b37e:	da03      	bge.n	801b388 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b380:	140a      	asrs	r2, r1, #16
 801b382:	d401      	bmi.n	801b388 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b384:	42b2      	cmp	r2, r6
 801b386:	db07      	blt.n	801b398 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b388:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b38a:	3b01      	subs	r3, #1
 801b38c:	4410      	add	r0, r2
 801b38e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b390:	3502      	adds	r5, #2
 801b392:	4411      	add	r1, r2
 801b394:	e7ee      	b.n	801b374 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b396:	d017      	beq.n	801b3c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b398:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b39a:	1e5a      	subs	r2, r3, #1
 801b39c:	fb04 0402 	mla	r4, r4, r2, r0
 801b3a0:	1424      	asrs	r4, r4, #16
 801b3a2:	d409      	bmi.n	801b3b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3a4:	42bc      	cmp	r4, r7
 801b3a6:	da07      	bge.n	801b3b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b3aa:	fb04 1202 	mla	r2, r4, r2, r1
 801b3ae:	1412      	asrs	r2, r2, #16
 801b3b0:	d402      	bmi.n	801b3b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3b2:	42b2      	cmp	r2, r6
 801b3b4:	f2c0 80bf 	blt.w	801b536 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b3b8:	2700      	movs	r7, #0
 801b3ba:	19da      	adds	r2, r3, r7
 801b3bc:	2a00      	cmp	r2, #0
 801b3be:	dc3e      	bgt.n	801b43e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b3c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3c4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b3c8:	f1bb 0f00 	cmp.w	fp, #0
 801b3cc:	f340 8121 	ble.w	801b612 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b3d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b3dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b3e0:	eeb0 6a62 	vmov.f32	s12, s5
 801b3e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b3ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b3f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b3f8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b3fc:	eeb0 6a43 	vmov.f32	s12, s6
 801b400:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b404:	ee12 2a90 	vmov	r2, s5
 801b408:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b40c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b40e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b412:	fb92 f3f3 	sdiv	r3, r2, r3
 801b416:	ee13 2a10 	vmov	r2, s6
 801b41a:	9313      	str	r3, [sp, #76]	; 0x4c
 801b41c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b41e:	f1bb 0b01 	subs.w	fp, fp, #1
 801b422:	fb92 f3f3 	sdiv	r3, r2, r3
 801b426:	9a03      	ldr	r2, [sp, #12]
 801b428:	9314      	str	r3, [sp, #80]	; 0x50
 801b42a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b42e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b430:	eeb0 3a67 	vmov.f32	s6, s15
 801b434:	bf08      	it	eq
 801b436:	4613      	moveq	r3, r2
 801b438:	eef0 2a47 	vmov.f32	s5, s14
 801b43c:	e789      	b.n	801b352 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b43e:	1406      	asrs	r6, r0, #16
 801b440:	d42d      	bmi.n	801b49e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b442:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b446:	42b4      	cmp	r4, r6
 801b448:	dd29      	ble.n	801b49e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b44a:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801b44e:	d426      	bmi.n	801b49e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b450:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b454:	4562      	cmp	r2, ip
 801b456:	dd22      	ble.n	801b49e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b458:	b224      	sxth	r4, r4
 801b45a:	fb0c 6404 	mla	r4, ip, r4, r6
 801b45e:	9a01      	ldr	r2, [sp, #4]
 801b460:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801b464:	0e22      	lsrs	r2, r4, #24
 801b466:	d01a      	beq.n	801b49e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b468:	9e04      	ldr	r6, [sp, #16]
 801b46a:	4372      	muls	r2, r6
 801b46c:	1c56      	adds	r6, r2, #1
 801b46e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b472:	1212      	asrs	r2, r2, #8
 801b474:	0a26      	lsrs	r6, r4, #8
 801b476:	2aff      	cmp	r2, #255	; 0xff
 801b478:	9605      	str	r6, [sp, #20]
 801b47a:	d116      	bne.n	801b4aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b47c:	f06f 0201 	mvn.w	r2, #1
 801b480:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b484:	fb02 fc07 	mul.w	ip, r2, r7
 801b488:	0962      	lsrs	r2, r4, #5
 801b48a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b48e:	f026 0607 	bic.w	r6, r6, #7
 801b492:	4316      	orrs	r6, r2
 801b494:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b498:	4326      	orrs	r6, r4
 801b49a:	f825 600c 	strh.w	r6, [r5, ip]
 801b49e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b4a0:	3f01      	subs	r7, #1
 801b4a2:	4410      	add	r0, r2
 801b4a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b4a6:	4411      	add	r1, r2
 801b4a8:	e787      	b.n	801b3ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b4aa:	f06f 0601 	mvn.w	r6, #1
 801b4ae:	fa1f fa82 	uxth.w	sl, r2
 801b4b2:	43d2      	mvns	r2, r2
 801b4b4:	437e      	muls	r6, r7
 801b4b6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801b4ba:	f835 8006 	ldrh.w	r8, [r5, r6]
 801b4be:	fb1c fc0a 	smulbb	ip, ip, sl
 801b4c2:	b2e4      	uxtb	r4, r4
 801b4c4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b4c8:	fb14 f40a 	smulbb	r4, r4, sl
 801b4cc:	b2d2      	uxtb	r2, r2
 801b4ce:	9602      	str	r6, [sp, #8]
 801b4d0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b4d4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b4d8:	fb0e ce02 	mla	lr, lr, r2, ip
 801b4dc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b4e0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b4e4:	fb16 f60a 	smulbb	r6, r6, sl
 801b4e8:	fa5f f888 	uxtb.w	r8, r8
 801b4ec:	fb08 4402 	mla	r4, r8, r2, r4
 801b4f0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b4f4:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b4f8:	fa1f fe8e 	uxth.w	lr, lr
 801b4fc:	b2a4      	uxth	r4, r4
 801b4fe:	f10e 0201 	add.w	r2, lr, #1
 801b502:	1c66      	adds	r6, r4, #1
 801b504:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b508:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b50c:	fa1f fc8c 	uxth.w	ip, ip
 801b510:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b514:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b518:	ea46 0e0e 	orr.w	lr, r6, lr
 801b51c:	f10c 0601 	add.w	r6, ip, #1
 801b520:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b524:	0976      	lsrs	r6, r6, #5
 801b526:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b52a:	9a02      	ldr	r2, [sp, #8]
 801b52c:	ea4e 0e06 	orr.w	lr, lr, r6
 801b530:	f825 e002 	strh.w	lr, [r5, r2]
 801b534:	e7b3      	b.n	801b49e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b536:	f04f 0800 	mov.w	r8, #0
 801b53a:	eba3 0208 	sub.w	r2, r3, r8
 801b53e:	2a00      	cmp	r2, #0
 801b540:	f77f af3e 	ble.w	801b3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b544:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801b548:	1404      	asrs	r4, r0, #16
 801b54a:	140a      	asrs	r2, r1, #16
 801b54c:	fb06 4202 	mla	r2, r6, r2, r4
 801b550:	9c01      	ldr	r4, [sp, #4]
 801b552:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801b556:	0e22      	lsrs	r2, r4, #24
 801b558:	d016      	beq.n	801b588 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b55a:	9e04      	ldr	r6, [sp, #16]
 801b55c:	4372      	muls	r2, r6
 801b55e:	1c56      	adds	r6, r2, #1
 801b560:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b564:	1212      	asrs	r2, r2, #8
 801b566:	2aff      	cmp	r2, #255	; 0xff
 801b568:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801b56c:	d113      	bne.n	801b596 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801b56e:	0962      	lsrs	r2, r4, #5
 801b570:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b574:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b578:	f026 0607 	bic.w	r6, r6, #7
 801b57c:	4316      	orrs	r6, r2
 801b57e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b582:	4326      	orrs	r6, r4
 801b584:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801b588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b58a:	f108 0801 	add.w	r8, r8, #1
 801b58e:	4410      	add	r0, r2
 801b590:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b592:	4411      	add	r1, r2
 801b594:	e7d1      	b.n	801b53a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b596:	fa1f fa82 	uxth.w	sl, r2
 801b59a:	43d2      	mvns	r2, r2
 801b59c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b5a0:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b5a4:	fb17 f70a 	smulbb	r7, r7, sl
 801b5a8:	b2e4      	uxtb	r4, r4
 801b5aa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b5ae:	fb14 f40a 	smulbb	r4, r4, sl
 801b5b2:	b2d2      	uxtb	r2, r2
 801b5b4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b5b8:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b5bc:	b2f6      	uxtb	r6, r6
 801b5be:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b5c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b5c6:	fb16 f60a 	smulbb	r6, r6, sl
 801b5ca:	fa5f fe8e 	uxtb.w	lr, lr
 801b5ce:	fb0e 4402 	mla	r4, lr, r2, r4
 801b5d2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b5d6:	fb07 6702 	mla	r7, r7, r2, r6
 801b5da:	fa1f fc8c 	uxth.w	ip, ip
 801b5de:	b2a4      	uxth	r4, r4
 801b5e0:	f10c 0201 	add.w	r2, ip, #1
 801b5e4:	1c66      	adds	r6, r4, #1
 801b5e6:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b5ea:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b5ee:	b2bf      	uxth	r7, r7
 801b5f0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b5f4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b5f8:	ea46 0c0c 	orr.w	ip, r6, ip
 801b5fc:	1c7e      	adds	r6, r7, #1
 801b5fe:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801b602:	0976      	lsrs	r6, r6, #5
 801b604:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b608:	ea4c 0c06 	orr.w	ip, ip, r6
 801b60c:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801b610:	e7ba      	b.n	801b588 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b612:	b007      	add	sp, #28
 801b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b618 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b620:	b085      	sub	sp, #20
 801b622:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b624:	468b      	mov	fp, r1
 801b626:	6841      	ldr	r1, [r0, #4]
 801b628:	9203      	str	r2, [sp, #12]
 801b62a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b62e:	fb01 2404 	mla	r4, r1, r4, r2
 801b632:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b636:	6802      	ldr	r2, [r0, #0]
 801b638:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b63c:	f8d8 2000 	ldr.w	r2, [r8]
 801b640:	9201      	str	r2, [sp, #4]
 801b642:	f1bb 0f00 	cmp.w	fp, #0
 801b646:	dc03      	bgt.n	801b650 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b648:	9a03      	ldr	r2, [sp, #12]
 801b64a:	2a00      	cmp	r2, #0
 801b64c:	f340 814f 	ble.w	801b8ee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b652:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b656:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b65a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b65c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b660:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b664:	2b00      	cmp	r3, #0
 801b666:	dd0e      	ble.n	801b686 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b668:	1408      	asrs	r0, r1, #16
 801b66a:	d405      	bmi.n	801b678 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b66c:	42b8      	cmp	r0, r7
 801b66e:	da03      	bge.n	801b678 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b670:	1410      	asrs	r0, r2, #16
 801b672:	d401      	bmi.n	801b678 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b674:	42b0      	cmp	r0, r6
 801b676:	db07      	blt.n	801b688 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b678:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b67a:	3b01      	subs	r3, #1
 801b67c:	4401      	add	r1, r0
 801b67e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b680:	3402      	adds	r4, #2
 801b682:	4402      	add	r2, r0
 801b684:	e7ee      	b.n	801b664 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b686:	d017      	beq.n	801b6b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b688:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b68a:	1e58      	subs	r0, r3, #1
 801b68c:	fb05 1500 	mla	r5, r5, r0, r1
 801b690:	142d      	asrs	r5, r5, #16
 801b692:	d409      	bmi.n	801b6a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b694:	42bd      	cmp	r5, r7
 801b696:	da07      	bge.n	801b6a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b698:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b69a:	fb05 2000 	mla	r0, r5, r0, r2
 801b69e:	1400      	asrs	r0, r0, #16
 801b6a0:	d402      	bmi.n	801b6a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6a2:	42b0      	cmp	r0, r6
 801b6a4:	f2c0 80ba 	blt.w	801b81c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b6a8:	2600      	movs	r6, #0
 801b6aa:	1998      	adds	r0, r3, r6
 801b6ac:	2800      	cmp	r0, #0
 801b6ae:	dc3e      	bgt.n	801b72e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b6b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b6b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b6b8:	f1bb 0f00 	cmp.w	fp, #0
 801b6bc:	f340 8117 	ble.w	801b8ee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b6c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b6c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b6c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b6cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b6d0:	eeb0 6a62 	vmov.f32	s12, s5
 801b6d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b6dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b6e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b6e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b6e8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b6ec:	eeb0 6a43 	vmov.f32	s12, s6
 801b6f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b6f4:	ee12 2a90 	vmov	r2, s5
 801b6f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b702:	fb92 f3f3 	sdiv	r3, r2, r3
 801b706:	ee13 2a10 	vmov	r2, s6
 801b70a:	9311      	str	r3, [sp, #68]	; 0x44
 801b70c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b70e:	f1bb 0b01 	subs.w	fp, fp, #1
 801b712:	fb92 f3f3 	sdiv	r3, r2, r3
 801b716:	9a03      	ldr	r2, [sp, #12]
 801b718:	9312      	str	r3, [sp, #72]	; 0x48
 801b71a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b71e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b720:	eeb0 3a67 	vmov.f32	s6, s15
 801b724:	bf08      	it	eq
 801b726:	4613      	moveq	r3, r2
 801b728:	eef0 2a47 	vmov.f32	s5, s14
 801b72c:	e789      	b.n	801b642 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b72e:	140f      	asrs	r7, r1, #16
 801b730:	d424      	bmi.n	801b77c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b732:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b736:	42bd      	cmp	r5, r7
 801b738:	dd20      	ble.n	801b77c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b73a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b73e:	d41d      	bmi.n	801b77c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b740:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b744:	4560      	cmp	r0, ip
 801b746:	dd19      	ble.n	801b77c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b748:	b22d      	sxth	r5, r5
 801b74a:	fb0c 7505 	mla	r5, ip, r5, r7
 801b74e:	9801      	ldr	r0, [sp, #4]
 801b750:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b754:	0e07      	lsrs	r7, r0, #24
 801b756:	2fff      	cmp	r7, #255	; 0xff
 801b758:	d116      	bne.n	801b788 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b75a:	f06f 0501 	mvn.w	r5, #1
 801b75e:	fb05 f706 	mul.w	r7, r5, r6
 801b762:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801b766:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b76a:	0945      	lsrs	r5, r0, #5
 801b76c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b770:	ea4c 0505 	orr.w	r5, ip, r5
 801b774:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b778:	4305      	orrs	r5, r0
 801b77a:	53e5      	strh	r5, [r4, r7]
 801b77c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b77e:	3e01      	subs	r6, #1
 801b780:	4401      	add	r1, r0
 801b782:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b784:	4402      	add	r2, r0
 801b786:	e790      	b.n	801b6aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b788:	b2fd      	uxtb	r5, r7
 801b78a:	2f00      	cmp	r7, #0
 801b78c:	d0f6      	beq.n	801b77c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b78e:	f06f 0701 	mvn.w	r7, #1
 801b792:	fa1f f985 	uxth.w	r9, r5
 801b796:	43ed      	mvns	r5, r5
 801b798:	4377      	muls	r7, r6
 801b79a:	f834 e007 	ldrh.w	lr, [r4, r7]
 801b79e:	9702      	str	r7, [sp, #8]
 801b7a0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b7a4:	fb17 f709 	smulbb	r7, r7, r9
 801b7a8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b7ac:	b2c0      	uxtb	r0, r0
 801b7ae:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b7b2:	fb10 f009 	smulbb	r0, r0, r9
 801b7b6:	b2ed      	uxtb	r5, r5
 801b7b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b7bc:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b7c0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b7c4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b7c8:	fb1a fa09 	smulbb	sl, sl, r9
 801b7cc:	fa5f fe8e 	uxtb.w	lr, lr
 801b7d0:	fb0e 0005 	mla	r0, lr, r5, r0
 801b7d4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b7d8:	fb07 a705 	mla	r7, r7, r5, sl
 801b7dc:	b280      	uxth	r0, r0
 801b7de:	fa1f fc8c 	uxth.w	ip, ip
 801b7e2:	f100 0a01 	add.w	sl, r0, #1
 801b7e6:	f10c 0501 	add.w	r5, ip, #1
 801b7ea:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b7ee:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b7f2:	b2bf      	uxth	r7, r7
 801b7f4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b7f8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b7fc:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b800:	f107 0a01 	add.w	sl, r7, #1
 801b804:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b808:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b80c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b810:	9802      	ldr	r0, [sp, #8]
 801b812:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b816:	f824 c000 	strh.w	ip, [r4, r0]
 801b81a:	e7af      	b.n	801b77c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b81c:	f04f 0e00 	mov.w	lr, #0
 801b820:	eba3 000e 	sub.w	r0, r3, lr
 801b824:	2800      	cmp	r0, #0
 801b826:	f77f af43 	ble.w	801b6b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b82a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b82e:	140d      	asrs	r5, r1, #16
 801b830:	1410      	asrs	r0, r2, #16
 801b832:	fb06 5000 	mla	r0, r6, r0, r5
 801b836:	9d01      	ldr	r5, [sp, #4]
 801b838:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b83c:	0e2e      	lsrs	r6, r5, #24
 801b83e:	2eff      	cmp	r6, #255	; 0xff
 801b840:	d112      	bne.n	801b868 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801b842:	482c      	ldr	r0, [pc, #176]	; (801b8f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b844:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b848:	0968      	lsrs	r0, r5, #5
 801b84a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b84e:	4330      	orrs	r0, r6
 801b850:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b854:	4328      	orrs	r0, r5
 801b856:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801b85a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b85c:	f10e 0e01 	add.w	lr, lr, #1
 801b860:	4401      	add	r1, r0
 801b862:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b864:	4402      	add	r2, r0
 801b866:	e7db      	b.n	801b820 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b868:	b2f0      	uxtb	r0, r6
 801b86a:	2e00      	cmp	r6, #0
 801b86c:	d0f5      	beq.n	801b85a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b86e:	fa1f f980 	uxth.w	r9, r0
 801b872:	43c0      	mvns	r0, r0
 801b874:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b878:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b87c:	fb16 f609 	smulbb	r6, r6, r9
 801b880:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b884:	b2ed      	uxtb	r5, r5
 801b886:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b88a:	fb15 f509 	smulbb	r5, r5, r9
 801b88e:	b2c0      	uxtb	r0, r0
 801b890:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b894:	fb07 6700 	mla	r7, r7, r0, r6
 801b898:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b89c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b8a0:	fb1a fa09 	smulbb	sl, sl, r9
 801b8a4:	fa5f fc8c 	uxtb.w	ip, ip
 801b8a8:	fb0c 5500 	mla	r5, ip, r0, r5
 801b8ac:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b8b0:	fb06 a600 	mla	r6, r6, r0, sl
 801b8b4:	b2bf      	uxth	r7, r7
 801b8b6:	b2ad      	uxth	r5, r5
 801b8b8:	1c78      	adds	r0, r7, #1
 801b8ba:	f105 0a01 	add.w	sl, r5, #1
 801b8be:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b8c2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b8c6:	b2b6      	uxth	r6, r6
 801b8c8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b8cc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b8d0:	ea4a 0707 	orr.w	r7, sl, r7
 801b8d4:	f106 0a01 	add.w	sl, r6, #1
 801b8d8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b8dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b8e0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b8e4:	ea47 070a 	orr.w	r7, r7, sl
 801b8e8:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b8ec:	e7b5      	b.n	801b85a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b8ee:	b005      	add	sp, #20
 801b8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8f4:	fffff800 	.word	0xfffff800

0801b8f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b8f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b900:	b087      	sub	sp, #28
 801b902:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b904:	468b      	mov	fp, r1
 801b906:	9203      	str	r2, [sp, #12]
 801b908:	6841      	ldr	r1, [r0, #4]
 801b90a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b90e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b912:	9204      	str	r2, [sp, #16]
 801b914:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b918:	fb01 2404 	mla	r4, r1, r4, r2
 801b91c:	6802      	ldr	r2, [r0, #0]
 801b91e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b922:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b926:	3201      	adds	r2, #1
 801b928:	f022 0201 	bic.w	r2, r2, #1
 801b92c:	9200      	str	r2, [sp, #0]
 801b92e:	f8d9 2000 	ldr.w	r2, [r9]
 801b932:	9201      	str	r2, [sp, #4]
 801b934:	f1bb 0f00 	cmp.w	fp, #0
 801b938:	dc03      	bgt.n	801b942 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b93a:	9a03      	ldr	r2, [sp, #12]
 801b93c:	2a00      	cmp	r2, #0
 801b93e:	f340 816a 	ble.w	801bc16 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b942:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b944:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b948:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b94c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b94e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b952:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b956:	2b00      	cmp	r3, #0
 801b958:	dd0e      	ble.n	801b978 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b95a:	1402      	asrs	r2, r0, #16
 801b95c:	d405      	bmi.n	801b96a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b95e:	42ba      	cmp	r2, r7
 801b960:	da03      	bge.n	801b96a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b962:	140a      	asrs	r2, r1, #16
 801b964:	d401      	bmi.n	801b96a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b966:	42b2      	cmp	r2, r6
 801b968:	db07      	blt.n	801b97a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b96a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b96c:	3b01      	subs	r3, #1
 801b96e:	4410      	add	r0, r2
 801b970:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b972:	3402      	adds	r4, #2
 801b974:	4411      	add	r1, r2
 801b976:	e7ee      	b.n	801b956 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b978:	d017      	beq.n	801b9aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b97a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b97c:	1e5a      	subs	r2, r3, #1
 801b97e:	fb05 0502 	mla	r5, r5, r2, r0
 801b982:	142d      	asrs	r5, r5, #16
 801b984:	d409      	bmi.n	801b99a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b986:	42bd      	cmp	r5, r7
 801b988:	da07      	bge.n	801b99a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b98a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b98c:	fb05 1202 	mla	r2, r5, r2, r1
 801b990:	1412      	asrs	r2, r2, #16
 801b992:	d402      	bmi.n	801b99a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b994:	42b2      	cmp	r2, r6
 801b996:	f2c0 80c8 	blt.w	801bb2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801b99a:	2700      	movs	r7, #0
 801b99c:	19da      	adds	r2, r3, r7
 801b99e:	2a00      	cmp	r2, #0
 801b9a0:	dc3e      	bgt.n	801ba20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b9a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9a6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b9aa:	f1bb 0f00 	cmp.w	fp, #0
 801b9ae:	f340 8132 	ble.w	801bc16 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b9b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b9be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b9c2:	eeb0 6a62 	vmov.f32	s12, s5
 801b9c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b9ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b9d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b9d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b9da:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b9de:	eeb0 6a43 	vmov.f32	s12, s6
 801b9e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b9e6:	ee12 2a90 	vmov	r2, s5
 801b9ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b9ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b9f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b9f8:	ee13 2a10 	vmov	r2, s6
 801b9fc:	9313      	str	r3, [sp, #76]	; 0x4c
 801b9fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba00:	f1bb 0b01 	subs.w	fp, fp, #1
 801ba04:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba08:	9a03      	ldr	r2, [sp, #12]
 801ba0a:	9314      	str	r3, [sp, #80]	; 0x50
 801ba0c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ba10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba12:	eeb0 3a67 	vmov.f32	s6, s15
 801ba16:	bf08      	it	eq
 801ba18:	4613      	moveq	r3, r2
 801ba1a:	eef0 2a47 	vmov.f32	s5, s14
 801ba1e:	e789      	b.n	801b934 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ba20:	1405      	asrs	r5, r0, #16
 801ba22:	d436      	bmi.n	801ba92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba24:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ba28:	42aa      	cmp	r2, r5
 801ba2a:	dd32      	ble.n	801ba92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba2c:	140e      	asrs	r6, r1, #16
 801ba2e:	d430      	bmi.n	801ba92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba30:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ba34:	42b2      	cmp	r2, r6
 801ba36:	dd2c      	ble.n	801ba92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba38:	9a00      	ldr	r2, [sp, #0]
 801ba3a:	fb06 5502 	mla	r5, r6, r2, r5
 801ba3e:	9e01      	ldr	r6, [sp, #4]
 801ba40:	086a      	lsrs	r2, r5, #1
 801ba42:	5cb2      	ldrb	r2, [r6, r2]
 801ba44:	07ee      	lsls	r6, r5, #31
 801ba46:	bf54      	ite	pl
 801ba48:	f002 020f 	andpl.w	r2, r2, #15
 801ba4c:	1112      	asrmi	r2, r2, #4
 801ba4e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ba52:	b2d2      	uxtb	r2, r2
 801ba54:	b1ea      	cbz	r2, 801ba92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba56:	9d04      	ldr	r5, [sp, #16]
 801ba58:	436a      	muls	r2, r5
 801ba5a:	1c55      	adds	r5, r2, #1
 801ba5c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ba60:	4d6e      	ldr	r5, [pc, #440]	; (801bc1c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ba62:	1212      	asrs	r2, r2, #8
 801ba64:	682d      	ldr	r5, [r5, #0]
 801ba66:	2aff      	cmp	r2, #255	; 0xff
 801ba68:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ba6c:	9605      	str	r6, [sp, #20]
 801ba6e:	d116      	bne.n	801ba9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ba70:	f06f 0201 	mvn.w	r2, #1
 801ba74:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ba78:	fb02 fc07 	mul.w	ip, r2, r7
 801ba7c:	096a      	lsrs	r2, r5, #5
 801ba7e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ba82:	f026 0607 	bic.w	r6, r6, #7
 801ba86:	4316      	orrs	r6, r2
 801ba88:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ba8c:	432e      	orrs	r6, r5
 801ba8e:	f824 600c 	strh.w	r6, [r4, ip]
 801ba92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba94:	3f01      	subs	r7, #1
 801ba96:	4410      	add	r0, r2
 801ba98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba9a:	4411      	add	r1, r2
 801ba9c:	e77e      	b.n	801b99c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ba9e:	f06f 0601 	mvn.w	r6, #1
 801baa2:	fa1f fa82 	uxth.w	sl, r2
 801baa6:	43d2      	mvns	r2, r2
 801baa8:	437e      	muls	r6, r7
 801baaa:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801baae:	f834 8006 	ldrh.w	r8, [r4, r6]
 801bab2:	fb1c fc0a 	smulbb	ip, ip, sl
 801bab6:	b2ed      	uxtb	r5, r5
 801bab8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801babc:	fb15 f50a 	smulbb	r5, r5, sl
 801bac0:	b2d2      	uxtb	r2, r2
 801bac2:	9602      	str	r6, [sp, #8]
 801bac4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801bac8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801bacc:	fb0e ce02 	mla	lr, lr, r2, ip
 801bad0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801bad4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bad8:	fb16 f60a 	smulbb	r6, r6, sl
 801badc:	fa5f f888 	uxtb.w	r8, r8
 801bae0:	fb08 5502 	mla	r5, r8, r2, r5
 801bae4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801bae8:	fb0c 6c02 	mla	ip, ip, r2, r6
 801baec:	fa1f fe8e 	uxth.w	lr, lr
 801baf0:	b2ad      	uxth	r5, r5
 801baf2:	f10e 0201 	add.w	r2, lr, #1
 801baf6:	1c6e      	adds	r6, r5, #1
 801baf8:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bafc:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801bb00:	fa1f fc8c 	uxth.w	ip, ip
 801bb04:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bb08:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801bb0c:	ea46 0e0e 	orr.w	lr, r6, lr
 801bb10:	f10c 0601 	add.w	r6, ip, #1
 801bb14:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801bb18:	0976      	lsrs	r6, r6, #5
 801bb1a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bb1e:	9a02      	ldr	r2, [sp, #8]
 801bb20:	ea4e 0e06 	orr.w	lr, lr, r6
 801bb24:	f824 e002 	strh.w	lr, [r4, r2]
 801bb28:	e7b3      	b.n	801ba92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bb2a:	f04f 0800 	mov.w	r8, #0
 801bb2e:	eba3 0208 	sub.w	r2, r3, r8
 801bb32:	2a00      	cmp	r2, #0
 801bb34:	f77f af35 	ble.w	801b9a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801bb38:	9e00      	ldr	r6, [sp, #0]
 801bb3a:	1402      	asrs	r2, r0, #16
 801bb3c:	140d      	asrs	r5, r1, #16
 801bb3e:	fb06 2505 	mla	r5, r6, r5, r2
 801bb42:	9e01      	ldr	r6, [sp, #4]
 801bb44:	086a      	lsrs	r2, r5, #1
 801bb46:	5cb2      	ldrb	r2, [r6, r2]
 801bb48:	07ed      	lsls	r5, r5, #31
 801bb4a:	bf54      	ite	pl
 801bb4c:	f002 020f 	andpl.w	r2, r2, #15
 801bb50:	1112      	asrmi	r2, r2, #4
 801bb52:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bb56:	b2d2      	uxtb	r2, r2
 801bb58:	b1c2      	cbz	r2, 801bb8c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bb5a:	9d04      	ldr	r5, [sp, #16]
 801bb5c:	436a      	muls	r2, r5
 801bb5e:	1c55      	adds	r5, r2, #1
 801bb60:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bb64:	4d2d      	ldr	r5, [pc, #180]	; (801bc1c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bb66:	1212      	asrs	r2, r2, #8
 801bb68:	682e      	ldr	r6, [r5, #0]
 801bb6a:	2aff      	cmp	r2, #255	; 0xff
 801bb6c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801bb70:	d113      	bne.n	801bb9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bb72:	0972      	lsrs	r2, r6, #5
 801bb74:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801bb78:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bb7c:	f025 0507 	bic.w	r5, r5, #7
 801bb80:	4315      	orrs	r5, r2
 801bb82:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bb86:	4335      	orrs	r5, r6
 801bb88:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801bb8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb8e:	f108 0801 	add.w	r8, r8, #1
 801bb92:	4410      	add	r0, r2
 801bb94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb96:	4411      	add	r1, r2
 801bb98:	e7c9      	b.n	801bb2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801bb9a:	fa1f fa82 	uxth.w	sl, r2
 801bb9e:	43d2      	mvns	r2, r2
 801bba0:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801bba4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801bba8:	fb17 f70a 	smulbb	r7, r7, sl
 801bbac:	b2f6      	uxtb	r6, r6
 801bbae:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bbb2:	fb16 f60a 	smulbb	r6, r6, sl
 801bbb6:	b2d2      	uxtb	r2, r2
 801bbb8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bbbc:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bbc0:	b2ed      	uxtb	r5, r5
 801bbc2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bbc6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bbca:	fb15 f50a 	smulbb	r5, r5, sl
 801bbce:	fa5f fe8e 	uxtb.w	lr, lr
 801bbd2:	fb0e 6602 	mla	r6, lr, r2, r6
 801bbd6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bbda:	fb07 5702 	mla	r7, r7, r2, r5
 801bbde:	fa1f fc8c 	uxth.w	ip, ip
 801bbe2:	b2b6      	uxth	r6, r6
 801bbe4:	f10c 0201 	add.w	r2, ip, #1
 801bbe8:	1c75      	adds	r5, r6, #1
 801bbea:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bbee:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801bbf2:	b2bf      	uxth	r7, r7
 801bbf4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bbf8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bbfc:	ea45 0c0c 	orr.w	ip, r5, ip
 801bc00:	1c7d      	adds	r5, r7, #1
 801bc02:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801bc06:	096d      	lsrs	r5, r5, #5
 801bc08:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bc0c:	ea4c 0c05 	orr.w	ip, ip, r5
 801bc10:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801bc14:	e7ba      	b.n	801bb8c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bc16:	b007      	add	sp, #28
 801bc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc1c:	2004f640 	.word	0x2004f640

0801bc20 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc28:	b087      	sub	sp, #28
 801bc2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bc2c:	9101      	str	r1, [sp, #4]
 801bc2e:	6841      	ldr	r1, [r0, #4]
 801bc30:	9205      	str	r2, [sp, #20]
 801bc32:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bc36:	fb01 2404 	mla	r4, r1, r4, r2
 801bc3a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801bc3e:	6802      	ldr	r2, [r0, #0]
 801bc40:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 801bf34 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801bc44:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bc48:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bc4c:	3201      	adds	r2, #1
 801bc4e:	f022 0201 	bic.w	r2, r2, #1
 801bc52:	9202      	str	r2, [sp, #8]
 801bc54:	f8db 2000 	ldr.w	r2, [fp]
 801bc58:	9203      	str	r2, [sp, #12]
 801bc5a:	9a01      	ldr	r2, [sp, #4]
 801bc5c:	2a00      	cmp	r2, #0
 801bc5e:	dc03      	bgt.n	801bc68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bc60:	9a05      	ldr	r2, [sp, #20]
 801bc62:	2a00      	cmp	r2, #0
 801bc64:	f340 8162 	ble.w	801bf2c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bc68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bc6a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801bc6e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bc72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc74:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801bc78:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	dd0e      	ble.n	801bc9e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bc80:	1402      	asrs	r2, r0, #16
 801bc82:	d405      	bmi.n	801bc90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bc84:	42ba      	cmp	r2, r7
 801bc86:	da03      	bge.n	801bc90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bc88:	140a      	asrs	r2, r1, #16
 801bc8a:	d401      	bmi.n	801bc90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bc8c:	42b2      	cmp	r2, r6
 801bc8e:	db07      	blt.n	801bca0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bc90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc92:	3b01      	subs	r3, #1
 801bc94:	4410      	add	r0, r2
 801bc96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc98:	3402      	adds	r4, #2
 801bc9a:	4411      	add	r1, r2
 801bc9c:	e7ee      	b.n	801bc7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bc9e:	d017      	beq.n	801bcd0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801bca0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bca2:	1e5a      	subs	r2, r3, #1
 801bca4:	fb05 0502 	mla	r5, r5, r2, r0
 801bca8:	142d      	asrs	r5, r5, #16
 801bcaa:	d409      	bmi.n	801bcc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bcac:	42bd      	cmp	r5, r7
 801bcae:	da07      	bge.n	801bcc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bcb0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bcb2:	fb05 1202 	mla	r2, r5, r2, r1
 801bcb6:	1412      	asrs	r2, r2, #16
 801bcb8:	d402      	bmi.n	801bcc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bcba:	42b2      	cmp	r2, r6
 801bcbc:	f2c0 80c3 	blt.w	801be46 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801bcc0:	2500      	movs	r5, #0
 801bcc2:	195a      	adds	r2, r3, r5
 801bcc4:	2a00      	cmp	r2, #0
 801bcc6:	dc3f      	bgt.n	801bd48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bcc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bccc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bcd0:	9b01      	ldr	r3, [sp, #4]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	f340 812a 	ble.w	801bf2c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bcd8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bcdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bce0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bce4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bce8:	eeb0 6a62 	vmov.f32	s12, s5
 801bcec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bcf0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bcf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bcf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcfc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd00:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bd04:	eeb0 6a43 	vmov.f32	s12, s6
 801bd08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd0c:	ee12 2a90 	vmov	r2, s5
 801bd10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd1e:	ee13 2a10 	vmov	r2, s6
 801bd22:	9313      	str	r3, [sp, #76]	; 0x4c
 801bd24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd26:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bd2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd2e:	9314      	str	r3, [sp, #80]	; 0x50
 801bd30:	9b01      	ldr	r3, [sp, #4]
 801bd32:	9a05      	ldr	r2, [sp, #20]
 801bd34:	3b01      	subs	r3, #1
 801bd36:	9301      	str	r3, [sp, #4]
 801bd38:	eeb0 3a67 	vmov.f32	s6, s15
 801bd3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd3e:	eef0 2a47 	vmov.f32	s5, s14
 801bd42:	bf08      	it	eq
 801bd44:	4613      	moveq	r3, r2
 801bd46:	e788      	b.n	801bc5a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bd48:	1406      	asrs	r6, r0, #16
 801bd4a:	d42c      	bmi.n	801bda6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd4c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bd50:	42b2      	cmp	r2, r6
 801bd52:	dd28      	ble.n	801bda6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd54:	140f      	asrs	r7, r1, #16
 801bd56:	d426      	bmi.n	801bda6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd58:	f8db 200c 	ldr.w	r2, [fp, #12]
 801bd5c:	42ba      	cmp	r2, r7
 801bd5e:	dd22      	ble.n	801bda6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd60:	9a02      	ldr	r2, [sp, #8]
 801bd62:	fb07 6602 	mla	r6, r7, r2, r6
 801bd66:	9f03      	ldr	r7, [sp, #12]
 801bd68:	0872      	lsrs	r2, r6, #1
 801bd6a:	5cba      	ldrb	r2, [r7, r2]
 801bd6c:	07f6      	lsls	r6, r6, #31
 801bd6e:	bf54      	ite	pl
 801bd70:	f002 020f 	andpl.w	r2, r2, #15
 801bd74:	1112      	asrmi	r2, r2, #4
 801bd76:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bd7a:	b2d2      	uxtb	r2, r2
 801bd7c:	2aff      	cmp	r2, #255	; 0xff
 801bd7e:	d118      	bne.n	801bdb2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801bd80:	f06f 0601 	mvn.w	r6, #1
 801bd84:	f8d8 2000 	ldr.w	r2, [r8]
 801bd88:	fb06 f705 	mul.w	r7, r6, r5
 801bd8c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801bd90:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801bd94:	0956      	lsrs	r6, r2, #5
 801bd96:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bd9a:	ea4c 0606 	orr.w	r6, ip, r6
 801bd9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801bda2:	4316      	orrs	r6, r2
 801bda4:	53e6      	strh	r6, [r4, r7]
 801bda6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bda8:	3d01      	subs	r5, #1
 801bdaa:	4410      	add	r0, r2
 801bdac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bdae:	4411      	add	r1, r2
 801bdb0:	e787      	b.n	801bcc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bdb2:	2a00      	cmp	r2, #0
 801bdb4:	d0f7      	beq.n	801bda6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bdb6:	f06f 0601 	mvn.w	r6, #1
 801bdba:	fa1f f982 	uxth.w	r9, r2
 801bdbe:	43d2      	mvns	r2, r2
 801bdc0:	436e      	muls	r6, r5
 801bdc2:	f8d8 c000 	ldr.w	ip, [r8]
 801bdc6:	f834 e006 	ldrh.w	lr, [r4, r6]
 801bdca:	9604      	str	r6, [sp, #16]
 801bdcc:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801bdd0:	fb16 f609 	smulbb	r6, r6, r9
 801bdd4:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801bdd8:	fa5f fc8c 	uxtb.w	ip, ip
 801bddc:	ea4f 272e 	mov.w	r7, lr, asr #8
 801bde0:	fb1c fc09 	smulbb	ip, ip, r9
 801bde4:	b2d2      	uxtb	r2, r2
 801bde6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bdea:	fb07 6702 	mla	r7, r7, r2, r6
 801bdee:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801bdf2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bdf6:	fb1a fa09 	smulbb	sl, sl, r9
 801bdfa:	fa5f fe8e 	uxtb.w	lr, lr
 801bdfe:	fb0e cc02 	mla	ip, lr, r2, ip
 801be02:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801be06:	fb06 a602 	mla	r6, r6, r2, sl
 801be0a:	b2bf      	uxth	r7, r7
 801be0c:	fa1f fc8c 	uxth.w	ip, ip
 801be10:	1c7a      	adds	r2, r7, #1
 801be12:	f10c 0a01 	add.w	sl, ip, #1
 801be16:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801be1a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801be1e:	b2b6      	uxth	r6, r6
 801be20:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801be24:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801be28:	ea4a 0707 	orr.w	r7, sl, r7
 801be2c:	f106 0a01 	add.w	sl, r6, #1
 801be30:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801be34:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801be38:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801be3c:	9a04      	ldr	r2, [sp, #16]
 801be3e:	ea47 070a 	orr.w	r7, r7, sl
 801be42:	52a7      	strh	r7, [r4, r2]
 801be44:	e7af      	b.n	801bda6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801be46:	f04f 0e00 	mov.w	lr, #0
 801be4a:	eba3 020e 	sub.w	r2, r3, lr
 801be4e:	2a00      	cmp	r2, #0
 801be50:	f77f af3a 	ble.w	801bcc8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801be54:	9e02      	ldr	r6, [sp, #8]
 801be56:	1402      	asrs	r2, r0, #16
 801be58:	140d      	asrs	r5, r1, #16
 801be5a:	fb06 2505 	mla	r5, r6, r5, r2
 801be5e:	9e03      	ldr	r6, [sp, #12]
 801be60:	086a      	lsrs	r2, r5, #1
 801be62:	5cb2      	ldrb	r2, [r6, r2]
 801be64:	07ed      	lsls	r5, r5, #31
 801be66:	bf54      	ite	pl
 801be68:	f002 020f 	andpl.w	r2, r2, #15
 801be6c:	1112      	asrmi	r2, r2, #4
 801be6e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801be72:	b2d2      	uxtb	r2, r2
 801be74:	2aff      	cmp	r2, #255	; 0xff
 801be76:	d115      	bne.n	801bea4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801be78:	f8d8 5000 	ldr.w	r5, [r8]
 801be7c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801be80:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801be84:	096a      	lsrs	r2, r5, #5
 801be86:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801be8a:	4332      	orrs	r2, r6
 801be8c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801be90:	432a      	orrs	r2, r5
 801be92:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801be96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801be98:	f10e 0e01 	add.w	lr, lr, #1
 801be9c:	4410      	add	r0, r2
 801be9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bea0:	4411      	add	r1, r2
 801bea2:	e7d2      	b.n	801be4a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801bea4:	2a00      	cmp	r2, #0
 801bea6:	d0f6      	beq.n	801be96 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bea8:	fa1f f982 	uxth.w	r9, r2
 801beac:	43d2      	mvns	r2, r2
 801beae:	f8d8 7000 	ldr.w	r7, [r8]
 801beb2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801beb6:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801beba:	fb15 f509 	smulbb	r5, r5, r9
 801bebe:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801bec2:	b2ff      	uxtb	r7, r7
 801bec4:	ea4f 262c 	mov.w	r6, ip, asr #8
 801bec8:	fb17 f709 	smulbb	r7, r7, r9
 801becc:	b2d2      	uxtb	r2, r2
 801bece:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bed2:	fb06 5602 	mla	r6, r6, r2, r5
 801bed6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801beda:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bede:	fb1a fa09 	smulbb	sl, sl, r9
 801bee2:	fa5f fc8c 	uxtb.w	ip, ip
 801bee6:	fb0c 7702 	mla	r7, ip, r2, r7
 801beea:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801beee:	fb05 a502 	mla	r5, r5, r2, sl
 801bef2:	b2b6      	uxth	r6, r6
 801bef4:	b2bf      	uxth	r7, r7
 801bef6:	1c72      	adds	r2, r6, #1
 801bef8:	f107 0a01 	add.w	sl, r7, #1
 801befc:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801bf00:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bf04:	b2ad      	uxth	r5, r5
 801bf06:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bf0a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801bf0e:	ea4a 0606 	orr.w	r6, sl, r6
 801bf12:	f105 0a01 	add.w	sl, r5, #1
 801bf16:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bf1a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bf1e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bf22:	ea46 060a 	orr.w	r6, r6, sl
 801bf26:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801bf2a:	e7b4      	b.n	801be96 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bf2c:	b007      	add	sp, #28
 801bf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf32:	bf00      	nop
 801bf34:	2004f640 	.word	0x2004f640

0801bf38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bf38:	4770      	bx	lr

0801bf3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bf3a:	4770      	bx	lr

0801bf3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bf3c:	4770      	bx	lr

0801bf3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bf3e:	4770      	bx	lr

0801bf40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf40:	4770      	bx	lr

0801bf42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf42:	4770      	bx	lr

0801bf44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf44:	4770      	bx	lr

0801bf46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf46:	4770      	bx	lr

0801bf48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf48:	4770      	bx	lr

0801bf4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf4a:	4770      	bx	lr

0801bf4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf4c:	4770      	bx	lr

0801bf4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf4e:	4770      	bx	lr

0801bf50 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf50:	4770      	bx	lr

0801bf52 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bf52:	4770      	bx	lr

0801bf54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf54:	4770      	bx	lr

0801bf56 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf56:	4770      	bx	lr

0801bf58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf58:	4770      	bx	lr

0801bf5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf5a:	4770      	bx	lr

0801bf5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf5c:	4770      	bx	lr

0801bf5e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf5e:	4770      	bx	lr

0801bf60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf60:	4770      	bx	lr

0801bf62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf62:	4770      	bx	lr

0801bf64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf64:	4770      	bx	lr

0801bf66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bf66:	4770      	bx	lr

0801bf68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf68:	4770      	bx	lr

0801bf6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf6a:	4770      	bx	lr

0801bf6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf6c:	4770      	bx	lr

0801bf6e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bf6e:	4770      	bx	lr

0801bf70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801bf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf74:	b088      	sub	sp, #32
 801bf76:	ac08      	add	r4, sp, #32
 801bf78:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801bf7c:	4606      	mov	r6, r0
 801bf7e:	4620      	mov	r0, r4
 801bf80:	4688      	mov	r8, r1
 801bf82:	4691      	mov	r9, r2
 801bf84:	f7fd fc66 	bl	8019854 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bf88:	6833      	ldr	r3, [r6, #0]
 801bf8a:	4605      	mov	r5, r0
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	699f      	ldr	r7, [r3, #24]
 801bf90:	f7fd fb74 	bl	801967c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bf94:	4682      	mov	sl, r0
 801bf96:	4620      	mov	r0, r4
 801bf98:	f7fd fba4 	bl	80196e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bf9c:	9500      	str	r5, [sp, #0]
 801bf9e:	e9cd a001 	strd	sl, r0, [sp, #4]
 801bfa2:	464b      	mov	r3, r9
 801bfa4:	a806      	add	r0, sp, #24
 801bfa6:	4642      	mov	r2, r8
 801bfa8:	4631      	mov	r1, r6
 801bfaa:	47b8      	blx	r7
 801bfac:	4628      	mov	r0, r5
 801bfae:	b008      	add	sp, #32
 801bfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801bfb4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801bfb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bfb8:	2300      	movs	r3, #0
 801bfba:	9300      	str	r3, [sp, #0]
 801bfbc:	4b3d      	ldr	r3, [pc, #244]	; (801c0b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801bfbe:	781b      	ldrb	r3, [r3, #0]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d137      	bne.n	801c034 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801bfc4:	4a3c      	ldr	r2, [pc, #240]	; (801c0b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801bfc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 801bfca:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d132      	bne.n	801c038 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801bfd2:	4b3a      	ldr	r3, [pc, #232]	; (801c0bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801bfd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bfd8:	6808      	ldr	r0, [r1, #0]
 801bfda:	6849      	ldr	r1, [r1, #4]
 801bfdc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bfe0:	ac02      	add	r4, sp, #8
 801bfe2:	ab02      	add	r3, sp, #8
 801bfe4:	c303      	stmia	r3!, {r0, r1}
 801bfe6:	4669      	mov	r1, sp
 801bfe8:	4620      	mov	r0, r4
 801bfea:	f7fa fd05 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bfee:	4668      	mov	r0, sp
 801bff0:	f7fa fcda 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bff4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bff8:	f8bd 2000 	ldrh.w	r2, [sp]
 801bffc:	4d30      	ldr	r5, [pc, #192]	; (801c0c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801bffe:	4413      	add	r3, r2
 801c000:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c004:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c008:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c00c:	6828      	ldr	r0, [r5, #0]
 801c00e:	4413      	add	r3, r2
 801c010:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c014:	6803      	ldr	r3, [r0, #0]
 801c016:	462f      	mov	r7, r5
 801c018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c01a:	4798      	blx	r3
 801c01c:	f010 0f01 	tst.w	r0, #1
 801c020:	d00c      	beq.n	801c03c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801c022:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c026:	6828      	ldr	r0, [r5, #0]
 801c028:	6803      	ldr	r3, [r0, #0]
 801c02a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c02c:	4798      	blx	r3
 801c02e:	b004      	add	sp, #16
 801c030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c034:	4a21      	ldr	r2, [pc, #132]	; (801c0bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c036:	e7c6      	b.n	801bfc6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c038:	4b1f      	ldr	r3, [pc, #124]	; (801c0b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c03a:	e7cb      	b.n	801bfd4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c03c:	6838      	ldr	r0, [r7, #0]
 801c03e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c042:	6803      	ldr	r3, [r0, #0]
 801c044:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801c048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c04a:	4798      	blx	r3
 801c04c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c050:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c054:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801c058:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c05c:	fb16 3602 	smlabb	r6, r6, r2, r3
 801c060:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c064:	6838      	ldr	r0, [r7, #0]
 801c066:	6803      	ldr	r3, [r0, #0]
 801c068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c06a:	4798      	blx	r3
 801c06c:	4a12      	ldr	r2, [pc, #72]	; (801c0b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c06e:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801c072:	4691      	mov	r9, r2
 801c074:	8813      	ldrh	r3, [r2, #0]
 801c076:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c07a:	435d      	muls	r5, r3
 801c07c:	fb03 1404 	mla	r4, r3, r4, r1
 801c080:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c084:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c088:	6838      	ldr	r0, [r7, #0]
 801c08a:	42ac      	cmp	r4, r5
 801c08c:	6803      	ldr	r3, [r0, #0]
 801c08e:	d20e      	bcs.n	801c0ae <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801c090:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801c094:	4632      	mov	r2, r6
 801c096:	4643      	mov	r3, r8
 801c098:	4621      	mov	r1, r4
 801c09a:	47d0      	blx	sl
 801c09c:	f8b9 3000 	ldrh.w	r3, [r9]
 801c0a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c0a4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c0a8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c0ac:	e7ec      	b.n	801c088 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801c0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0b0:	4798      	blx	r3
 801c0b2:	e7bc      	b.n	801c02e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c0b4:	2004f628 	.word	0x2004f628
 801c0b8:	2004f62a 	.word	0x2004f62a
 801c0bc:	2004f62c 	.word	0x2004f62c
 801c0c0:	2004f630 	.word	0x2004f630

0801c0c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0c8:	b08b      	sub	sp, #44	; 0x2c
 801c0ca:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801c0ce:	460f      	mov	r7, r1
 801c0d0:	4616      	mov	r6, r2
 801c0d2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c0d6:	f1bb 0f00 	cmp.w	fp, #0
 801c0da:	d049      	beq.n	801c170 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c0dc:	6810      	ldr	r0, [r2, #0]
 801c0de:	6851      	ldr	r1, [r2, #4]
 801c0e0:	ad06      	add	r5, sp, #24
 801c0e2:	c503      	stmia	r5!, {r0, r1}
 801c0e4:	6818      	ldr	r0, [r3, #0]
 801c0e6:	6859      	ldr	r1, [r3, #4]
 801c0e8:	ad08      	add	r5, sp, #32
 801c0ea:	c503      	stmia	r5!, {r0, r1}
 801c0ec:	a806      	add	r0, sp, #24
 801c0ee:	f7fa fc5b 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c0f2:	4631      	mov	r1, r6
 801c0f4:	a808      	add	r0, sp, #32
 801c0f6:	f7fa fc7f 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c0fa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c0fe:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c102:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c106:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c10a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c10e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c112:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c116:	4f60      	ldr	r7, [pc, #384]	; (801c298 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c118:	440a      	add	r2, r1
 801c11a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c11e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c122:	6838      	ldr	r0, [r7, #0]
 801c124:	4413      	add	r3, r2
 801c126:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c12a:	6803      	ldr	r3, [r0, #0]
 801c12c:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c132:	4798      	blx	r3
 801c134:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c138:	46b9      	mov	r9, r7
 801c13a:	d01c      	beq.n	801c176 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c13c:	f010 0f04 	tst.w	r0, #4
 801c140:	d01d      	beq.n	801c17e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c142:	2700      	movs	r7, #0
 801c144:	f8d9 0000 	ldr.w	r0, [r9]
 801c148:	b2ad      	uxth	r5, r5
 801c14a:	6801      	ldr	r1, [r0, #0]
 801c14c:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c150:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c154:	f8cd b00c 	str.w	fp, [sp, #12]
 801c158:	9402      	str	r4, [sp, #8]
 801c15a:	fa1f f488 	uxth.w	r4, r8
 801c15e:	9501      	str	r5, [sp, #4]
 801c160:	9400      	str	r4, [sp, #0]
 801c162:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801c164:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c168:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c16c:	4631      	mov	r1, r6
 801c16e:	47a0      	blx	r4
 801c170:	b00b      	add	sp, #44	; 0x2c
 801c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c176:	b914      	cbnz	r4, 801c17e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c178:	f010 0f01 	tst.w	r0, #1
 801c17c:	e7e0      	b.n	801c140 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801c17e:	f8d9 0000 	ldr.w	r0, [r9]
 801c182:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c186:	6803      	ldr	r3, [r0, #0]
 801c188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c18a:	4798      	blx	r3
 801c18c:	4b43      	ldr	r3, [pc, #268]	; (801c29c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c18e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801c192:	881a      	ldrh	r2, [r3, #0]
 801c194:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c198:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c19c:	fb02 1404 	mla	r4, r2, r4, r1
 801c1a0:	469a      	mov	sl, r3
 801c1a2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c1a6:	fb05 f502 	mul.w	r5, r5, r2
 801c1aa:	d059      	beq.n	801c260 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c1ac:	469e      	mov	lr, r3
 801c1ae:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801c1b2:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c1b6:	fa1f f28b 	uxth.w	r2, fp
 801c1ba:	fa1f f989 	uxth.w	r9, r9
 801c1be:	42ac      	cmp	r4, r5
 801c1c0:	d264      	bcs.n	801c28c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c1c2:	eb04 0a07 	add.w	sl, r4, r7
 801c1c6:	4554      	cmp	r4, sl
 801c1c8:	d23d      	bcs.n	801c246 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801c1ca:	8821      	ldrh	r1, [r4, #0]
 801c1cc:	f836 3b02 	ldrh.w	r3, [r6], #2
 801c1d0:	1208      	asrs	r0, r1, #8
 801c1d2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c1d6:	fb10 f009 	smulbb	r0, r0, r9
 801c1da:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801c1de:	00c9      	lsls	r1, r1, #3
 801c1e0:	b2c9      	uxtb	r1, r1
 801c1e2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c1e6:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c1ea:	fb11 f109 	smulbb	r1, r1, r9
 801c1ee:	fb1b fb09 	smulbb	fp, fp, r9
 801c1f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c1f6:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c1fa:	10d8      	asrs	r0, r3, #3
 801c1fc:	00db      	lsls	r3, r3, #3
 801c1fe:	b2db      	uxtb	r3, r3
 801c200:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c204:	fb03 1302 	mla	r3, r3, r2, r1
 801c208:	fb00 b002 	mla	r0, r0, r2, fp
 801c20c:	fa1f fc8c 	uxth.w	ip, ip
 801c210:	f10c 0b01 	add.w	fp, ip, #1
 801c214:	b29b      	uxth	r3, r3
 801c216:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c21a:	b280      	uxth	r0, r0
 801c21c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801c220:	f103 0c01 	add.w	ip, r3, #1
 801c224:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c228:	1c43      	adds	r3, r0, #1
 801c22a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c22e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c232:	0940      	lsrs	r0, r0, #5
 801c234:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c238:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c23c:	ea4c 0c00 	orr.w	ip, ip, r0
 801c240:	f824 cb02 	strh.w	ip, [r4], #2
 801c244:	e7bf      	b.n	801c1c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801c246:	f8be 3000 	ldrh.w	r3, [lr]
 801c24a:	eba3 0308 	sub.w	r3, r3, r8
 801c24e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c252:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c256:	eba3 0308 	sub.w	r3, r3, r8
 801c25a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c25e:	e7ae      	b.n	801c1be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801c260:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c264:	f8d9 0000 	ldr.w	r0, [r9]
 801c268:	42ac      	cmp	r4, r5
 801c26a:	6803      	ldr	r3, [r0, #0]
 801c26c:	d20e      	bcs.n	801c28c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c26e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801c272:	4632      	mov	r2, r6
 801c274:	463b      	mov	r3, r7
 801c276:	4621      	mov	r1, r4
 801c278:	47c0      	blx	r8
 801c27a:	f8ba 3000 	ldrh.w	r3, [sl]
 801c27e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c282:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c286:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c28a:	e7eb      	b.n	801c264 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801c28c:	4b02      	ldr	r3, [pc, #8]	; (801c298 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c28e:	6818      	ldr	r0, [r3, #0]
 801c290:	6803      	ldr	r3, [r0, #0]
 801c292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c294:	4798      	blx	r3
 801c296:	e76b      	b.n	801c170 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c298:	2004f630 	.word	0x2004f630
 801c29c:	2004f62a 	.word	0x2004f62a

0801c2a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c2a0:	b510      	push	{r4, lr}
 801c2a2:	4604      	mov	r4, r0
 801c2a4:	2104      	movs	r1, #4
 801c2a6:	f009 faa9 	bl	80257fc <_ZdlPvj>
 801c2aa:	4620      	mov	r0, r4
 801c2ac:	bd10      	pop	{r4, pc}

0801c2ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c2ae:	b510      	push	{r4, lr}
 801c2b0:	4604      	mov	r4, r0
 801c2b2:	2104      	movs	r1, #4
 801c2b4:	f009 faa2 	bl	80257fc <_ZdlPvj>
 801c2b8:	4620      	mov	r0, r4
 801c2ba:	bd10      	pop	{r4, pc}

0801c2bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c2bc:	b510      	push	{r4, lr}
 801c2be:	4604      	mov	r4, r0
 801c2c0:	2104      	movs	r1, #4
 801c2c2:	f009 fa9b 	bl	80257fc <_ZdlPvj>
 801c2c6:	4620      	mov	r0, r4
 801c2c8:	bd10      	pop	{r4, pc}

0801c2ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c2ca:	b510      	push	{r4, lr}
 801c2cc:	4604      	mov	r4, r0
 801c2ce:	2104      	movs	r1, #4
 801c2d0:	f009 fa94 	bl	80257fc <_ZdlPvj>
 801c2d4:	4620      	mov	r0, r4
 801c2d6:	bd10      	pop	{r4, pc}

0801c2d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c2d8:	b510      	push	{r4, lr}
 801c2da:	4604      	mov	r4, r0
 801c2dc:	2104      	movs	r1, #4
 801c2de:	f009 fa8d 	bl	80257fc <_ZdlPvj>
 801c2e2:	4620      	mov	r0, r4
 801c2e4:	bd10      	pop	{r4, pc}

0801c2e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c2e6:	b510      	push	{r4, lr}
 801c2e8:	4604      	mov	r4, r0
 801c2ea:	2104      	movs	r1, #4
 801c2ec:	f009 fa86 	bl	80257fc <_ZdlPvj>
 801c2f0:	4620      	mov	r0, r4
 801c2f2:	bd10      	pop	{r4, pc}

0801c2f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c2f4:	b510      	push	{r4, lr}
 801c2f6:	4604      	mov	r4, r0
 801c2f8:	2104      	movs	r1, #4
 801c2fa:	f009 fa7f 	bl	80257fc <_ZdlPvj>
 801c2fe:	4620      	mov	r0, r4
 801c300:	bd10      	pop	{r4, pc}

0801c302 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c302:	b510      	push	{r4, lr}
 801c304:	4604      	mov	r4, r0
 801c306:	2104      	movs	r1, #4
 801c308:	f009 fa78 	bl	80257fc <_ZdlPvj>
 801c30c:	4620      	mov	r0, r4
 801c30e:	bd10      	pop	{r4, pc}

0801c310 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c310:	b510      	push	{r4, lr}
 801c312:	4604      	mov	r4, r0
 801c314:	2104      	movs	r1, #4
 801c316:	f009 fa71 	bl	80257fc <_ZdlPvj>
 801c31a:	4620      	mov	r0, r4
 801c31c:	bd10      	pop	{r4, pc}

0801c31e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c31e:	b510      	push	{r4, lr}
 801c320:	4604      	mov	r4, r0
 801c322:	2104      	movs	r1, #4
 801c324:	f009 fa6a 	bl	80257fc <_ZdlPvj>
 801c328:	4620      	mov	r0, r4
 801c32a:	bd10      	pop	{r4, pc}

0801c32c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c32c:	b510      	push	{r4, lr}
 801c32e:	4604      	mov	r4, r0
 801c330:	2104      	movs	r1, #4
 801c332:	f009 fa63 	bl	80257fc <_ZdlPvj>
 801c336:	4620      	mov	r0, r4
 801c338:	bd10      	pop	{r4, pc}

0801c33a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c33a:	b510      	push	{r4, lr}
 801c33c:	4604      	mov	r4, r0
 801c33e:	2104      	movs	r1, #4
 801c340:	f009 fa5c 	bl	80257fc <_ZdlPvj>
 801c344:	4620      	mov	r0, r4
 801c346:	bd10      	pop	{r4, pc}

0801c348 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c348:	b510      	push	{r4, lr}
 801c34a:	4604      	mov	r4, r0
 801c34c:	2104      	movs	r1, #4
 801c34e:	f009 fa55 	bl	80257fc <_ZdlPvj>
 801c352:	4620      	mov	r0, r4
 801c354:	bd10      	pop	{r4, pc}

0801c356 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c356:	b510      	push	{r4, lr}
 801c358:	4604      	mov	r4, r0
 801c35a:	2104      	movs	r1, #4
 801c35c:	f009 fa4e 	bl	80257fc <_ZdlPvj>
 801c360:	4620      	mov	r0, r4
 801c362:	bd10      	pop	{r4, pc}

0801c364 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c364:	b510      	push	{r4, lr}
 801c366:	4604      	mov	r4, r0
 801c368:	2104      	movs	r1, #4
 801c36a:	f009 fa47 	bl	80257fc <_ZdlPvj>
 801c36e:	4620      	mov	r0, r4
 801c370:	bd10      	pop	{r4, pc}

0801c372 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c372:	b510      	push	{r4, lr}
 801c374:	4604      	mov	r4, r0
 801c376:	2104      	movs	r1, #4
 801c378:	f009 fa40 	bl	80257fc <_ZdlPvj>
 801c37c:	4620      	mov	r0, r4
 801c37e:	bd10      	pop	{r4, pc}

0801c380 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c380:	b510      	push	{r4, lr}
 801c382:	4604      	mov	r4, r0
 801c384:	2104      	movs	r1, #4
 801c386:	f009 fa39 	bl	80257fc <_ZdlPvj>
 801c38a:	4620      	mov	r0, r4
 801c38c:	bd10      	pop	{r4, pc}

0801c38e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c38e:	b510      	push	{r4, lr}
 801c390:	4604      	mov	r4, r0
 801c392:	2104      	movs	r1, #4
 801c394:	f009 fa32 	bl	80257fc <_ZdlPvj>
 801c398:	4620      	mov	r0, r4
 801c39a:	bd10      	pop	{r4, pc}

0801c39c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c39c:	b510      	push	{r4, lr}
 801c39e:	4604      	mov	r4, r0
 801c3a0:	2104      	movs	r1, #4
 801c3a2:	f009 fa2b 	bl	80257fc <_ZdlPvj>
 801c3a6:	4620      	mov	r0, r4
 801c3a8:	bd10      	pop	{r4, pc}

0801c3aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c3aa:	b510      	push	{r4, lr}
 801c3ac:	4604      	mov	r4, r0
 801c3ae:	2104      	movs	r1, #4
 801c3b0:	f009 fa24 	bl	80257fc <_ZdlPvj>
 801c3b4:	4620      	mov	r0, r4
 801c3b6:	bd10      	pop	{r4, pc}

0801c3b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c3b8:	b510      	push	{r4, lr}
 801c3ba:	4604      	mov	r4, r0
 801c3bc:	2104      	movs	r1, #4
 801c3be:	f009 fa1d 	bl	80257fc <_ZdlPvj>
 801c3c2:	4620      	mov	r0, r4
 801c3c4:	bd10      	pop	{r4, pc}

0801c3c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c3c6:	b510      	push	{r4, lr}
 801c3c8:	4604      	mov	r4, r0
 801c3ca:	2104      	movs	r1, #4
 801c3cc:	f009 fa16 	bl	80257fc <_ZdlPvj>
 801c3d0:	4620      	mov	r0, r4
 801c3d2:	bd10      	pop	{r4, pc}

0801c3d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c3d4:	b510      	push	{r4, lr}
 801c3d6:	4604      	mov	r4, r0
 801c3d8:	2104      	movs	r1, #4
 801c3da:	f009 fa0f 	bl	80257fc <_ZdlPvj>
 801c3de:	4620      	mov	r0, r4
 801c3e0:	bd10      	pop	{r4, pc}

0801c3e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c3e2:	b510      	push	{r4, lr}
 801c3e4:	4604      	mov	r4, r0
 801c3e6:	2104      	movs	r1, #4
 801c3e8:	f009 fa08 	bl	80257fc <_ZdlPvj>
 801c3ec:	4620      	mov	r0, r4
 801c3ee:	bd10      	pop	{r4, pc}

0801c3f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c3f0:	b510      	push	{r4, lr}
 801c3f2:	4604      	mov	r4, r0
 801c3f4:	2104      	movs	r1, #4
 801c3f6:	f009 fa01 	bl	80257fc <_ZdlPvj>
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	bd10      	pop	{r4, pc}

0801c3fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c3fe:	b510      	push	{r4, lr}
 801c400:	4604      	mov	r4, r0
 801c402:	2104      	movs	r1, #4
 801c404:	f009 f9fa 	bl	80257fc <_ZdlPvj>
 801c408:	4620      	mov	r0, r4
 801c40a:	bd10      	pop	{r4, pc}

0801c40c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c40c:	b510      	push	{r4, lr}
 801c40e:	4604      	mov	r4, r0
 801c410:	2104      	movs	r1, #4
 801c412:	f009 f9f3 	bl	80257fc <_ZdlPvj>
 801c416:	4620      	mov	r0, r4
 801c418:	bd10      	pop	{r4, pc}

0801c41a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c41a:	b510      	push	{r4, lr}
 801c41c:	4604      	mov	r4, r0
 801c41e:	2104      	movs	r1, #4
 801c420:	f009 f9ec 	bl	80257fc <_ZdlPvj>
 801c424:	4620      	mov	r0, r4
 801c426:	bd10      	pop	{r4, pc}

0801c428 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c42c:	469b      	mov	fp, r3
 801c42e:	4616      	mov	r6, r2
 801c430:	b091      	sub	sp, #68	; 0x44
 801c432:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c436:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801c43a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c43e:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801c442:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801c446:	4604      	mov	r4, r0
 801c448:	460d      	mov	r5, r1
 801c44a:	4640      	mov	r0, r8
 801c44c:	4659      	mov	r1, fp
 801c44e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c452:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c456:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801c45a:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801c45e:	f7f6 fd57 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 801c462:	4631      	mov	r1, r6
 801c464:	4640      	mov	r0, r8
 801c466:	f7f6 fd53 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 801c46a:	4b74      	ldr	r3, [pc, #464]	; (801c63c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801c46c:	8818      	ldrh	r0, [r3, #0]
 801c46e:	4b74      	ldr	r3, [pc, #464]	; (801c640 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801c470:	b202      	sxth	r2, r0
 801c472:	8819      	ldrh	r1, [r3, #0]
 801c474:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c478:	b20e      	sxth	r6, r1
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	da07      	bge.n	801c48e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801c47e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801c482:	4463      	add	r3, ip
 801c484:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c488:	2300      	movs	r3, #0
 801c48a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801c48e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c492:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801c496:	1ad2      	subs	r2, r2, r3
 801c498:	4594      	cmp	ip, r2
 801c49a:	bfc4      	itt	gt
 801c49c:	1ac2      	subgt	r2, r0, r3
 801c49e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801c4a2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c4a6:	2a00      	cmp	r2, #0
 801c4a8:	da07      	bge.n	801c4ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801c4aa:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801c4ae:	4462      	add	r2, ip
 801c4b0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801c4b4:	2200      	movs	r2, #0
 801c4b6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c4ba:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801c4be:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c4c2:	eba6 060a 	sub.w	r6, r6, sl
 801c4c6:	42b2      	cmp	r2, r6
 801c4c8:	bfc4      	itt	gt
 801c4ca:	eba1 020a 	subgt.w	r2, r1, sl
 801c4ce:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801c4d2:	4a5c      	ldr	r2, [pc, #368]	; (801c644 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801c4d4:	7812      	ldrb	r2, [r2, #0]
 801c4d6:	b9a2      	cbnz	r2, 801c502 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801c4d8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c4dc:	4286      	cmp	r6, r0
 801c4de:	4640      	mov	r0, r8
 801c4e0:	9303      	str	r3, [sp, #12]
 801c4e2:	bf14      	ite	ne
 801c4e4:	2600      	movne	r6, #0
 801c4e6:	2601      	moveq	r6, #1
 801c4e8:	f7f6 fd55 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c4ec:	9b03      	ldr	r3, [sp, #12]
 801c4ee:	b160      	cbz	r0, 801c50a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	8023      	strh	r3, [r4, #0]
 801c4f4:	8063      	strh	r3, [r4, #2]
 801c4f6:	80a3      	strh	r3, [r4, #4]
 801c4f8:	4620      	mov	r0, r4
 801c4fa:	80e3      	strh	r3, [r4, #6]
 801c4fc:	b011      	add	sp, #68	; 0x44
 801c4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c502:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c506:	428e      	cmp	r6, r1
 801c508:	e7e9      	b.n	801c4de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801c50a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c50e:	a90e      	add	r1, sp, #56	; 0x38
 801c510:	9205      	str	r2, [sp, #20]
 801c512:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c516:	900e      	str	r0, [sp, #56]	; 0x38
 801c518:	9206      	str	r2, [sp, #24]
 801c51a:	f8bb 2000 	ldrh.w	r2, [fp]
 801c51e:	a80c      	add	r0, sp, #48	; 0x30
 801c520:	1a9b      	subs	r3, r3, r2
 801c522:	b21b      	sxth	r3, r3
 801c524:	9303      	str	r3, [sp, #12]
 801c526:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801c52a:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801c52e:	ebaa 0a03 	sub.w	sl, sl, r3
 801c532:	fa0f f38a 	sxth.w	r3, sl
 801c536:	9304      	str	r3, [sp, #16]
 801c538:	9b03      	ldr	r3, [sp, #12]
 801c53a:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801c53e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801c542:	9b04      	ldr	r3, [sp, #16]
 801c544:	f8df b104 	ldr.w	fp, [pc, #260]	; 801c64c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c548:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c54c:	9b05      	ldr	r3, [sp, #20]
 801c54e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801c552:	9b06      	ldr	r3, [sp, #24]
 801c554:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c558:	f7fa fa4e 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c55c:	4640      	mov	r0, r8
 801c55e:	f7fa fa23 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c562:	a80e      	add	r0, sp, #56	; 0x38
 801c564:	f7fa fa20 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c568:	4b37      	ldr	r3, [pc, #220]	; (801c648 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801c56a:	4628      	mov	r0, r5
 801c56c:	881b      	ldrh	r3, [r3, #0]
 801c56e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801c572:	9307      	str	r3, [sp, #28]
 801c574:	682b      	ldr	r3, [r5, #0]
 801c576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c578:	4798      	blx	r3
 801c57a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801c57e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c582:	4681      	mov	r9, r0
 801c584:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801c588:	f8db 0000 	ldr.w	r0, [fp]
 801c58c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801c58e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c592:	6803      	ldr	r3, [r0, #0]
 801c594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c596:	4798      	blx	r3
 801c598:	4607      	mov	r7, r0
 801c59a:	f8db 0000 	ldr.w	r0, [fp]
 801c59e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c5a2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c5a6:	6803      	ldr	r3, [r0, #0]
 801c5a8:	9109      	str	r1, [sp, #36]	; 0x24
 801c5aa:	9208      	str	r2, [sp, #32]
 801c5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5ae:	4798      	blx	r3
 801c5b0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c5b4:	f010 0f01 	tst.w	r0, #1
 801c5b8:	d012      	beq.n	801c5e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801c5ba:	f8db 0000 	ldr.w	r0, [fp]
 801c5be:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c5c2:	6803      	ldr	r3, [r0, #0]
 801c5c4:	9200      	str	r2, [sp, #0]
 801c5c6:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801c5c8:	e898 0006 	ldmia.w	r8, {r1, r2}
 801c5cc:	462b      	mov	r3, r5
 801c5ce:	47b0      	blx	r6
 801c5d0:	9b03      	ldr	r3, [sp, #12]
 801c5d2:	8023      	strh	r3, [r4, #0]
 801c5d4:	9b04      	ldr	r3, [sp, #16]
 801c5d6:	8063      	strh	r3, [r4, #2]
 801c5d8:	9b05      	ldr	r3, [sp, #20]
 801c5da:	80a3      	strh	r3, [r4, #4]
 801c5dc:	9b06      	ldr	r3, [sp, #24]
 801c5de:	e78b      	b.n	801c4f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801c5e0:	fb09 f202 	mul.w	r2, r9, r2
 801c5e4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801c5e8:	440f      	add	r7, r1
 801c5ea:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c5ee:	b166      	cbz	r6, 801c60a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c5f0:	9a07      	ldr	r2, [sp, #28]
 801c5f2:	4592      	cmp	sl, r2
 801c5f4:	d109      	bne.n	801c60a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c5f6:	f8db 0000 	ldr.w	r0, [fp]
 801c5fa:	fb09 f303 	mul.w	r3, r9, r3
 801c5fe:	6802      	ldr	r2, [r0, #0]
 801c600:	4629      	mov	r1, r5
 801c602:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801c604:	463a      	mov	r2, r7
 801c606:	47b0      	blx	r6
 801c608:	e7e2      	b.n	801c5d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c60a:	fb0a f303 	mul.w	r3, sl, r3
 801c60e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801c64c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c612:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801c616:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801c61a:	4545      	cmp	r5, r8
 801c61c:	d2d8      	bcs.n	801c5d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c61e:	f8db 0000 	ldr.w	r0, [fp]
 801c622:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c626:	6802      	ldr	r2, [r0, #0]
 801c628:	4629      	mov	r1, r5
 801c62a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c62e:	005b      	lsls	r3, r3, #1
 801c630:	463a      	mov	r2, r7
 801c632:	47d0      	blx	sl
 801c634:	444f      	add	r7, r9
 801c636:	4435      	add	r5, r6
 801c638:	e7ef      	b.n	801c61a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801c63a:	bf00      	nop
 801c63c:	2004f624 	.word	0x2004f624
 801c640:	2004f626 	.word	0x2004f626
 801c644:	2004f628 	.word	0x2004f628
 801c648:	2004f62a 	.word	0x2004f62a
 801c64c:	2004f630 	.word	0x2004f630

0801c650 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c650:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c652:	4606      	mov	r6, r0
 801c654:	b087      	sub	sp, #28
 801c656:	460c      	mov	r4, r1
 801c658:	4617      	mov	r7, r2
 801c65a:	461d      	mov	r5, r3
 801c65c:	b333      	cbz	r3, 801c6ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c65e:	4608      	mov	r0, r1
 801c660:	f7f6 fc99 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c664:	bb10      	cbnz	r0, 801c6ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c666:	6820      	ldr	r0, [r4, #0]
 801c668:	6861      	ldr	r1, [r4, #4]
 801c66a:	ab04      	add	r3, sp, #16
 801c66c:	4c1b      	ldr	r4, [pc, #108]	; (801c6dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801c66e:	c303      	stmia	r3!, {r0, r1}
 801c670:	a804      	add	r0, sp, #16
 801c672:	f7fa f999 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c676:	6820      	ldr	r0, [r4, #0]
 801c678:	6803      	ldr	r3, [r0, #0]
 801c67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c67c:	4798      	blx	r3
 801c67e:	2dff      	cmp	r5, #255	; 0xff
 801c680:	d016      	beq.n	801c6b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801c682:	f010 0f08 	tst.w	r0, #8
 801c686:	6820      	ldr	r0, [r4, #0]
 801c688:	d015      	beq.n	801c6b6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c68a:	2400      	movs	r4, #0
 801c68c:	6801      	ldr	r1, [r0, #0]
 801c68e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801c692:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c696:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c69a:	9401      	str	r4, [sp, #4]
 801c69c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c6a0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c6a4:	9400      	str	r4, [sp, #0]
 801c6a6:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801c6a8:	4639      	mov	r1, r7
 801c6aa:	47a0      	blx	r4
 801c6ac:	b007      	add	sp, #28
 801c6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6b0:	f010 0f02 	tst.w	r0, #2
 801c6b4:	e7e7      	b.n	801c686 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c6b6:	6803      	ldr	r3, [r0, #0]
 801c6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6ba:	4798      	blx	r3
 801c6bc:	4b08      	ldr	r3, [pc, #32]	; (801c6e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c6be:	4601      	mov	r1, r0
 801c6c0:	881a      	ldrh	r2, [r3, #0]
 801c6c2:	e9cd 7500 	strd	r7, r5, [sp]
 801c6c6:	6833      	ldr	r3, [r6, #0]
 801c6c8:	4630      	mov	r0, r6
 801c6ca:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c6cc:	ab04      	add	r3, sp, #16
 801c6ce:	47a8      	blx	r5
 801c6d0:	6820      	ldr	r0, [r4, #0]
 801c6d2:	6803      	ldr	r3, [r0, #0]
 801c6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6d6:	4798      	blx	r3
 801c6d8:	e7e8      	b.n	801c6ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c6da:	bf00      	nop
 801c6dc:	2004f630 	.word	0x2004f630
 801c6e0:	2004f62a 	.word	0x2004f62a

0801c6e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801c6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6e8:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801c6ec:	4688      	mov	r8, r1
 801c6ee:	4614      	mov	r4, r2
 801c6f0:	461d      	mov	r5, r3
 801c6f2:	9e08      	ldr	r6, [sp, #32]
 801c6f4:	2f00      	cmp	r7, #0
 801c6f6:	f000 80a9 	beq.w	801c84c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	f7f6 fc4b 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c700:	2800      	cmp	r0, #0
 801c702:	f040 80a3 	bne.w	801c84c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c706:	f9b5 1000 	ldrsh.w	r1, [r5]
 801c70a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c70e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801c712:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801c716:	fb04 1303 	mla	r3, r4, r3, r1
 801c71a:	4365      	muls	r5, r4
 801c71c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801c720:	2fff      	cmp	r7, #255	; 0xff
 801c722:	eba4 0200 	sub.w	r2, r4, r0
 801c726:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801c72a:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801c72e:	d04a      	beq.n	801c7c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801c730:	b2bc      	uxth	r4, r7
 801c732:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801c736:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801c73a:	fa5f f788 	uxtb.w	r7, r8
 801c73e:	b2f3      	uxtb	r3, r6
 801c740:	fb0e fe04 	mul.w	lr, lr, r4
 801c744:	4367      	muls	r7, r4
 801c746:	4363      	muls	r3, r4
 801c748:	0040      	lsls	r0, r0, #1
 801c74a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801c74e:	fa1f fc8c 	uxth.w	ip, ip
 801c752:	42a9      	cmp	r1, r5
 801c754:	d27a      	bcs.n	801c84c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c756:	eb01 0900 	add.w	r9, r1, r0
 801c75a:	4549      	cmp	r1, r9
 801c75c:	d231      	bcs.n	801c7c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801c75e:	880a      	ldrh	r2, [r1, #0]
 801c760:	1214      	asrs	r4, r2, #8
 801c762:	10d6      	asrs	r6, r2, #3
 801c764:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801c768:	00d2      	lsls	r2, r2, #3
 801c76a:	b2d2      	uxtb	r2, r2
 801c76c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801c770:	fb14 f40c 	smulbb	r4, r4, ip
 801c774:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c778:	fb12 f20c 	smulbb	r2, r2, ip
 801c77c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c780:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801c784:	4474      	add	r4, lr
 801c786:	fb16 f60c 	smulbb	r6, r6, ip
 801c78a:	b2a4      	uxth	r4, r4
 801c78c:	441a      	add	r2, r3
 801c78e:	b292      	uxth	r2, r2
 801c790:	f104 0a01 	add.w	sl, r4, #1
 801c794:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c798:	f102 0a01 	add.w	sl, r2, #1
 801c79c:	443e      	add	r6, r7
 801c79e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801c7a2:	b2b6      	uxth	r6, r6
 801c7a4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c7a8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c7ac:	4322      	orrs	r2, r4
 801c7ae:	1c74      	adds	r4, r6, #1
 801c7b0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801c7b4:	0976      	lsrs	r6, r6, #5
 801c7b6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c7ba:	4332      	orrs	r2, r6
 801c7bc:	f821 2b02 	strh.w	r2, [r1], #2
 801c7c0:	e7cb      	b.n	801c75a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801c7c2:	4441      	add	r1, r8
 801c7c4:	e7c5      	b.n	801c752 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801c7c6:	4f22      	ldr	r7, [pc, #136]	; (801c850 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801c7c8:	0973      	lsrs	r3, r6, #5
 801c7ca:	ea08 0707 	and.w	r7, r8, r7
 801c7ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c7d2:	433b      	orrs	r3, r7
 801c7d4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c7d8:	4333      	orrs	r3, r6
 801c7da:	07e7      	lsls	r7, r4, #31
 801c7dc:	b29b      	uxth	r3, r3
 801c7de:	d50b      	bpl.n	801c7f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801c7e0:	0040      	lsls	r0, r0, #1
 801c7e2:	0052      	lsls	r2, r2, #1
 801c7e4:	42a9      	cmp	r1, r5
 801c7e6:	d231      	bcs.n	801c84c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c7e8:	180c      	adds	r4, r1, r0
 801c7ea:	42a1      	cmp	r1, r4
 801c7ec:	d202      	bcs.n	801c7f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801c7ee:	f821 3b02 	strh.w	r3, [r1], #2
 801c7f2:	e7fa      	b.n	801c7ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801c7f4:	4411      	add	r1, r2
 801c7f6:	e7f5      	b.n	801c7e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801c7f8:	078e      	lsls	r6, r1, #30
 801c7fa:	d008      	beq.n	801c80e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801c7fc:	460a      	mov	r2, r1
 801c7fe:	0066      	lsls	r6, r4, #1
 801c800:	42aa      	cmp	r2, r5
 801c802:	d202      	bcs.n	801c80a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801c804:	8013      	strh	r3, [r2, #0]
 801c806:	4432      	add	r2, r6
 801c808:	e7fa      	b.n	801c800 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801c80a:	3102      	adds	r1, #2
 801c80c:	3801      	subs	r0, #1
 801c80e:	07c2      	lsls	r2, r0, #31
 801c810:	d50b      	bpl.n	801c82a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801c812:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801c816:	3a01      	subs	r2, #1
 801c818:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801c81c:	0066      	lsls	r6, r4, #1
 801c81e:	42aa      	cmp	r2, r5
 801c820:	d202      	bcs.n	801c828 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801c822:	8013      	strh	r3, [r2, #0]
 801c824:	4432      	add	r2, r6
 801c826:	e7fa      	b.n	801c81e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801c828:	3801      	subs	r0, #1
 801c82a:	b178      	cbz	r0, 801c84c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c82c:	1040      	asrs	r0, r0, #1
 801c82e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801c832:	0080      	lsls	r0, r0, #2
 801c834:	0064      	lsls	r4, r4, #1
 801c836:	42a9      	cmp	r1, r5
 801c838:	d208      	bcs.n	801c84c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c83a:	460a      	mov	r2, r1
 801c83c:	180e      	adds	r6, r1, r0
 801c83e:	42b2      	cmp	r2, r6
 801c840:	d202      	bcs.n	801c848 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801c842:	f842 3b04 	str.w	r3, [r2], #4
 801c846:	e7fa      	b.n	801c83e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801c848:	4421      	add	r1, r4
 801c84a:	e7f4      	b.n	801c836 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c850:	00fff800 	.word	0x00fff800

0801c854 <_ZN8touchgfx8LCD16bppC1Ev>:
 801c854:	2200      	movs	r2, #0
 801c856:	4910      	ldr	r1, [pc, #64]	; (801c898 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801c858:	6042      	str	r2, [r0, #4]
 801c85a:	6001      	str	r1, [r0, #0]
 801c85c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c860:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c864:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c868:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c86c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c870:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c874:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c878:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c87c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c880:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c884:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801c888:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801c88c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801c890:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801c894:	4770      	bx	lr
 801c896:	bf00      	nop
 801c898:	08028e44 	.word	0x08028e44

0801c89c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8a0:	460d      	mov	r5, r1
 801c8a2:	4604      	mov	r4, r0
 801c8a4:	4699      	mov	r9, r3
 801c8a6:	b08d      	sub	sp, #52	; 0x34
 801c8a8:	6808      	ldr	r0, [r1, #0]
 801c8aa:	6849      	ldr	r1, [r1, #4]
 801c8ac:	ab08      	add	r3, sp, #32
 801c8ae:	c303      	stmia	r3!, {r0, r1}
 801c8b0:	6810      	ldr	r0, [r2, #0]
 801c8b2:	6851      	ldr	r1, [r2, #4]
 801c8b4:	ab0a      	add	r3, sp, #40	; 0x28
 801c8b6:	c303      	stmia	r3!, {r0, r1}
 801c8b8:	a808      	add	r0, sp, #32
 801c8ba:	f7fa f875 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c8be:	4629      	mov	r1, r5
 801c8c0:	a80a      	add	r0, sp, #40	; 0x28
 801c8c2:	f7fa f899 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c8c6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c8ca:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c8ce:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c8d2:	4d63      	ldr	r5, [pc, #396]	; (801ca60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801c8d4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c8d8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c8dc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c8e0:	6828      	ldr	r0, [r5, #0]
 801c8e2:	440a      	add	r2, r1
 801c8e4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c8e8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c8ec:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801c8f0:	4413      	add	r3, r2
 801c8f2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c8f6:	6803      	ldr	r3, [r0, #0]
 801c8f8:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8fe:	4798      	blx	r3
 801c900:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c904:	d119      	bne.n	801c93a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801c906:	f010 0f20 	tst.w	r0, #32
 801c90a:	6828      	ldr	r0, [r5, #0]
 801c90c:	d018      	beq.n	801c940 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801c90e:	2500      	movs	r5, #0
 801c910:	6801      	ldr	r1, [r0, #0]
 801c912:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801c916:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801c91a:	b2b6      	uxth	r6, r6
 801c91c:	9502      	str	r5, [sp, #8]
 801c91e:	fa1f f588 	uxth.w	r5, r8
 801c922:	9601      	str	r6, [sp, #4]
 801c924:	9500      	str	r5, [sp, #0]
 801c926:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801c928:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c92c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c930:	4621      	mov	r1, r4
 801c932:	47a8      	blx	r5
 801c934:	b00d      	add	sp, #52	; 0x34
 801c936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c93a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c93e:	e7e4      	b.n	801c90a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801c940:	6803      	ldr	r3, [r0, #0]
 801c942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c944:	4798      	blx	r3
 801c946:	4947      	ldr	r1, [pc, #284]	; (801ca64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801c948:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c94c:	468a      	mov	sl, r1
 801c94e:	880b      	ldrh	r3, [r1, #0]
 801c950:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801c954:	fb03 5202 	mla	r2, r3, r2, r5
 801c958:	4373      	muls	r3, r6
 801c95a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c95e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c962:	9307      	str	r3, [sp, #28]
 801c964:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801c968:	9306      	str	r3, [sp, #24]
 801c96a:	9b07      	ldr	r3, [sp, #28]
 801c96c:	4298      	cmp	r0, r3
 801c96e:	d270      	bcs.n	801ca52 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801c970:	4621      	mov	r1, r4
 801c972:	9b06      	ldr	r3, [sp, #24]
 801c974:	eb00 0b03 	add.w	fp, r0, r3
 801c978:	4558      	cmp	r0, fp
 801c97a:	d25d      	bcs.n	801ca38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801c97c:	f851 4b04 	ldr.w	r4, [r1], #4
 801c980:	0e23      	lsrs	r3, r4, #24
 801c982:	d014      	beq.n	801c9ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801c984:	2bff      	cmp	r3, #255	; 0xff
 801c986:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801c98a:	d112      	bne.n	801c9b2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801c98c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c990:	d10f      	bne.n	801c9b2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801c992:	0963      	lsrs	r3, r4, #5
 801c994:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801c998:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c99c:	f02c 0c07 	bic.w	ip, ip, #7
 801c9a0:	ea43 0c0c 	orr.w	ip, r3, ip
 801c9a4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c9a8:	ea4c 0404 	orr.w	r4, ip, r4
 801c9ac:	8004      	strh	r4, [r0, #0]
 801c9ae:	3002      	adds	r0, #2
 801c9b0:	e7e2      	b.n	801c978 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801c9b2:	fb09 f303 	mul.w	r3, r9, r3
 801c9b6:	1c5a      	adds	r2, r3, #1
 801c9b8:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801c9bc:	1212      	asrs	r2, r2, #8
 801c9be:	b293      	uxth	r3, r2
 801c9c0:	43d2      	mvns	r2, r2
 801c9c2:	8807      	ldrh	r7, [r0, #0]
 801c9c4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801c9c8:	fb1e fe03 	smulbb	lr, lr, r3
 801c9cc:	123e      	asrs	r6, r7, #8
 801c9ce:	fa5f fc8c 	uxtb.w	ip, ip
 801c9d2:	b2e4      	uxtb	r4, r4
 801c9d4:	fb1c fc03 	smulbb	ip, ip, r3
 801c9d8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c9dc:	fb14 f403 	smulbb	r4, r4, r3
 801c9e0:	b2d2      	uxtb	r2, r2
 801c9e2:	10fd      	asrs	r5, r7, #3
 801c9e4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801c9e8:	00ff      	lsls	r7, r7, #3
 801c9ea:	fb06 e602 	mla	r6, r6, r2, lr
 801c9ee:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c9f2:	b2ff      	uxtb	r7, r7
 801c9f4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801c9f8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801c9fc:	fb05 c502 	mla	r5, r5, r2, ip
 801ca00:	fb07 4702 	mla	r7, r7, r2, r4
 801ca04:	b2b6      	uxth	r6, r6
 801ca06:	f106 0e01 	add.w	lr, r6, #1
 801ca0a:	b2ad      	uxth	r5, r5
 801ca0c:	b2bf      	uxth	r7, r7
 801ca0e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ca12:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801ca16:	f105 0c01 	add.w	ip, r5, #1
 801ca1a:	1c7e      	adds	r6, r7, #1
 801ca1c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ca20:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ca24:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ca28:	096d      	lsrs	r5, r5, #5
 801ca2a:	ea46 060e 	orr.w	r6, r6, lr
 801ca2e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ca32:	432e      	orrs	r6, r5
 801ca34:	8006      	strh	r6, [r0, #0]
 801ca36:	e7ba      	b.n	801c9ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ca38:	f8ba 3000 	ldrh.w	r3, [sl]
 801ca3c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801ca40:	eba3 0308 	sub.w	r3, r3, r8
 801ca44:	eba4 0408 	sub.w	r4, r4, r8
 801ca48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ca4c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ca50:	e78b      	b.n	801c96a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801ca52:	4b03      	ldr	r3, [pc, #12]	; (801ca60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801ca54:	6818      	ldr	r0, [r3, #0]
 801ca56:	6803      	ldr	r3, [r0, #0]
 801ca58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca5a:	4798      	blx	r3
 801ca5c:	e76a      	b.n	801c934 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801ca5e:	bf00      	nop
 801ca60:	2004f630 	.word	0x2004f630
 801ca64:	2004f62a 	.word	0x2004f62a

0801ca68 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801ca68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca6c:	b085      	sub	sp, #20
 801ca6e:	466d      	mov	r5, sp
 801ca70:	4616      	mov	r6, r2
 801ca72:	460c      	mov	r4, r1
 801ca74:	6810      	ldr	r0, [r2, #0]
 801ca76:	6851      	ldr	r1, [r2, #4]
 801ca78:	c503      	stmia	r5!, {r0, r1}
 801ca7a:	6818      	ldr	r0, [r3, #0]
 801ca7c:	6859      	ldr	r1, [r3, #4]
 801ca7e:	c503      	stmia	r5!, {r0, r1}
 801ca80:	4668      	mov	r0, sp
 801ca82:	f7f9 ff91 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca86:	4631      	mov	r1, r6
 801ca88:	a802      	add	r0, sp, #8
 801ca8a:	f7f9 ffb5 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca8e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801ca92:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801ca96:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801ca9a:	4d28      	ldr	r5, [pc, #160]	; (801cb3c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801ca9c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801caa0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801caa4:	f8bd 1000 	ldrh.w	r1, [sp]
 801caa8:	6828      	ldr	r0, [r5, #0]
 801caaa:	440a      	add	r2, r1
 801caac:	f8ad 2008 	strh.w	r2, [sp, #8]
 801cab0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cab4:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cab8:	4413      	add	r3, r2
 801caba:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cabe:	6803      	ldr	r3, [r0, #0]
 801cac0:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801cac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cac6:	4798      	blx	r3
 801cac8:	4e1d      	ldr	r6, [pc, #116]	; (801cb40 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801caca:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801cace:	8833      	ldrh	r3, [r6, #0]
 801cad0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801cad4:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801cb44 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801cad8:	fb03 1202 	mla	r2, r3, r2, r1
 801cadc:	fb08 f303 	mul.w	r3, r8, r3
 801cae0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cae4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cae8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801caec:	4298      	cmp	r0, r3
 801caee:	d21d      	bcs.n	801cb2c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801caf0:	eb00 080c 	add.w	r8, r0, ip
 801caf4:	4540      	cmp	r0, r8
 801caf6:	d20f      	bcs.n	801cb18 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801caf8:	f854 1b04 	ldr.w	r1, [r4], #4
 801cafc:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801cb00:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801cb04:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801cb08:	ea42 0209 	orr.w	r2, r2, r9
 801cb0c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801cb10:	430a      	orrs	r2, r1
 801cb12:	f820 2b02 	strh.w	r2, [r0], #2
 801cb16:	e7ed      	b.n	801caf4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801cb18:	8832      	ldrh	r2, [r6, #0]
 801cb1a:	1bd2      	subs	r2, r2, r7
 801cb1c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cb20:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801cb24:	1bd2      	subs	r2, r2, r7
 801cb26:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801cb2a:	e7df      	b.n	801caec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801cb2c:	6828      	ldr	r0, [r5, #0]
 801cb2e:	6803      	ldr	r3, [r0, #0]
 801cb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb32:	4798      	blx	r3
 801cb34:	b005      	add	sp, #20
 801cb36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb3a:	bf00      	nop
 801cb3c:	2004f630 	.word	0x2004f630
 801cb40:	2004f62a 	.word	0x2004f62a
 801cb44:	fffff800 	.word	0xfffff800

0801cb48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801cb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb4c:	460e      	mov	r6, r1
 801cb4e:	4604      	mov	r4, r0
 801cb50:	461d      	mov	r5, r3
 801cb52:	b08e      	sub	sp, #56	; 0x38
 801cb54:	6808      	ldr	r0, [r1, #0]
 801cb56:	6849      	ldr	r1, [r1, #4]
 801cb58:	ab0a      	add	r3, sp, #40	; 0x28
 801cb5a:	c303      	stmia	r3!, {r0, r1}
 801cb5c:	6810      	ldr	r0, [r2, #0]
 801cb5e:	6851      	ldr	r1, [r2, #4]
 801cb60:	ab0c      	add	r3, sp, #48	; 0x30
 801cb62:	c303      	stmia	r3!, {r0, r1}
 801cb64:	a80a      	add	r0, sp, #40	; 0x28
 801cb66:	f7f9 ff1f 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cb6a:	4631      	mov	r1, r6
 801cb6c:	a80c      	add	r0, sp, #48	; 0x30
 801cb6e:	f7f9 ff43 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cb72:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801cb76:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801cb7a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cb7e:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801cd30 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801cb82:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cb86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cb8a:	440c      	add	r4, r1
 801cb8c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801cb90:	f8d8 0000 	ldr.w	r0, [r8]
 801cb94:	440a      	add	r2, r1
 801cb96:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801cb9a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801cb9e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801cba2:	4413      	add	r3, r2
 801cba4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cba8:	6803      	ldr	r3, [r0, #0]
 801cbaa:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801cbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbb0:	4798      	blx	r3
 801cbb2:	2dff      	cmp	r5, #255	; 0xff
 801cbb4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801cd34 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801cbb8:	d124      	bne.n	801cc04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801cbba:	f010 0f01 	tst.w	r0, #1
 801cbbe:	f8d8 0000 	ldr.w	r0, [r8]
 801cbc2:	d022      	beq.n	801cc0a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801cbc4:	2100      	movs	r1, #0
 801cbc6:	f04f 0e01 	mov.w	lr, #1
 801cbca:	f8d0 c000 	ldr.w	ip, [r0]
 801cbce:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801cbd2:	f8cd e018 	str.w	lr, [sp, #24]
 801cbd6:	f8b9 e000 	ldrh.w	lr, [r9]
 801cbda:	b2b6      	uxth	r6, r6
 801cbdc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801cbe0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cbe4:	b2bf      	uxth	r7, r7
 801cbe6:	9102      	str	r1, [sp, #8]
 801cbe8:	9503      	str	r5, [sp, #12]
 801cbea:	9601      	str	r6, [sp, #4]
 801cbec:	9700      	str	r7, [sp, #0]
 801cbee:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801cbf2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801cbf6:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801cbfa:	4621      	mov	r1, r4
 801cbfc:	47a8      	blx	r5
 801cbfe:	b00e      	add	sp, #56	; 0x38
 801cc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc04:	f010 0f04 	tst.w	r0, #4
 801cc08:	e7d9      	b.n	801cbbe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801cc0a:	6803      	ldr	r3, [r0, #0]
 801cc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc0e:	4798      	blx	r3
 801cc10:	f8b9 3000 	ldrh.w	r3, [r9]
 801cc14:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801cc18:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801cc1c:	435e      	muls	r6, r3
 801cc1e:	fb03 1202 	mla	r2, r3, r2, r1
 801cc22:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cc26:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cc2a:	ebac 0c07 	sub.w	ip, ip, r7
 801cc2e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801cc32:	2dff      	cmp	r5, #255	; 0xff
 801cc34:	eba3 0707 	sub.w	r7, r3, r7
 801cc38:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801cc3c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cc40:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801cc44:	d049      	beq.n	801ccda <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801cc46:	43eb      	mvns	r3, r5
 801cc48:	fa1f f985 	uxth.w	r9, r5
 801cc4c:	b2db      	uxtb	r3, r3
 801cc4e:	42b0      	cmp	r0, r6
 801cc50:	d266      	bcs.n	801cd20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801cc52:	eb00 0a0e 	add.w	sl, r0, lr
 801cc56:	4550      	cmp	r0, sl
 801cc58:	4621      	mov	r1, r4
 801cc5a:	f104 0403 	add.w	r4, r4, #3
 801cc5e:	d25b      	bcs.n	801cd18 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801cc60:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801cc64:	8802      	ldrh	r2, [r0, #0]
 801cc66:	fb11 f109 	smulbb	r1, r1, r9
 801cc6a:	ea4f 2822 	mov.w	r8, r2, asr #8
 801cc6e:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801cc72:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801cc76:	fb08 1803 	mla	r8, r8, r3, r1
 801cc7a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801cc7e:	10d5      	asrs	r5, r2, #3
 801cc80:	fb11 f109 	smulbb	r1, r1, r9
 801cc84:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cc88:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801cc8c:	fb05 1503 	mla	r5, r5, r3, r1
 801cc90:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801cc94:	00d2      	lsls	r2, r2, #3
 801cc96:	fb11 f109 	smulbb	r1, r1, r9
 801cc9a:	b2d2      	uxtb	r2, r2
 801cc9c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cca0:	fb02 1203 	mla	r2, r2, r3, r1
 801cca4:	fa1f f888 	uxth.w	r8, r8
 801cca8:	b292      	uxth	r2, r2
 801ccaa:	f108 0101 	add.w	r1, r8, #1
 801ccae:	b2ad      	uxth	r5, r5
 801ccb0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801ccb4:	1c51      	adds	r1, r2, #1
 801ccb6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ccba:	1c69      	adds	r1, r5, #1
 801ccbc:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801ccc0:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801ccc4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ccc8:	096d      	lsrs	r5, r5, #5
 801ccca:	ea42 0208 	orr.w	r2, r2, r8
 801ccce:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ccd2:	432a      	orrs	r2, r5
 801ccd4:	f820 2b02 	strh.w	r2, [r0], #2
 801ccd8:	e7bd      	b.n	801cc56 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801ccda:	4a14      	ldr	r2, [pc, #80]	; (801cd2c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801ccdc:	42b0      	cmp	r0, r6
 801ccde:	d21f      	bcs.n	801cd20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801cce0:	eb00 050e 	add.w	r5, r0, lr
 801cce4:	42a8      	cmp	r0, r5
 801cce6:	4621      	mov	r1, r4
 801cce8:	f104 0403 	add.w	r4, r4, #3
 801ccec:	d210      	bcs.n	801cd10 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801ccee:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801ccf2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ccf6:	00db      	lsls	r3, r3, #3
 801ccf8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801ccfc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cd00:	430b      	orrs	r3, r1
 801cd02:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801cd06:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801cd0a:	f820 3b02 	strh.w	r3, [r0], #2
 801cd0e:	e7e9      	b.n	801cce4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801cd10:	4438      	add	r0, r7
 801cd12:	eb01 040c 	add.w	r4, r1, ip
 801cd16:	e7e1      	b.n	801ccdc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801cd18:	4438      	add	r0, r7
 801cd1a:	eb01 040c 	add.w	r4, r1, ip
 801cd1e:	e796      	b.n	801cc4e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801cd20:	4b03      	ldr	r3, [pc, #12]	; (801cd30 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801cd22:	6818      	ldr	r0, [r3, #0]
 801cd24:	6803      	ldr	r3, [r0, #0]
 801cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd28:	4798      	blx	r3
 801cd2a:	e768      	b.n	801cbfe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801cd2c:	fffff800 	.word	0xfffff800
 801cd30:	2004f630 	.word	0x2004f630
 801cd34:	2004f62a 	.word	0x2004f62a

0801cd38 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801cd38:	b4f0      	push	{r4, r5, r6, r7}
 801cd3a:	4616      	mov	r6, r2
 801cd3c:	2e01      	cmp	r6, #1
 801cd3e:	461c      	mov	r4, r3
 801cd40:	460d      	mov	r5, r1
 801cd42:	9a04      	ldr	r2, [sp, #16]
 801cd44:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801cd48:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801cd4c:	d012      	beq.n	801cd74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801cd4e:	d303      	bcc.n	801cd58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801cd50:	2e02      	cmp	r6, #2
 801cd52:	d00a      	beq.n	801cd6a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801cd54:	bcf0      	pop	{r4, r5, r6, r7}
 801cd56:	4770      	bx	lr
 801cd58:	6805      	ldr	r5, [r0, #0]
 801cd5a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801cd5e:	68ed      	ldr	r5, [r5, #12]
 801cd60:	4613      	mov	r3, r2
 801cd62:	46ac      	mov	ip, r5
 801cd64:	4622      	mov	r2, r4
 801cd66:	bcf0      	pop	{r4, r5, r6, r7}
 801cd68:	4760      	bx	ip
 801cd6a:	4621      	mov	r1, r4
 801cd6c:	4628      	mov	r0, r5
 801cd6e:	bcf0      	pop	{r4, r5, r6, r7}
 801cd70:	f7ff bd94 	b.w	801c89c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cd74:	4621      	mov	r1, r4
 801cd76:	4628      	mov	r0, r5
 801cd78:	bcf0      	pop	{r4, r5, r6, r7}
 801cd7a:	f7ff bee5 	b.w	801cb48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801cd80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd84:	4616      	mov	r6, r2
 801cd86:	4681      	mov	r9, r0
 801cd88:	b093      	sub	sp, #76	; 0x4c
 801cd8a:	6810      	ldr	r0, [r2, #0]
 801cd8c:	4688      	mov	r8, r1
 801cd8e:	6851      	ldr	r1, [r2, #4]
 801cd90:	ac0e      	add	r4, sp, #56	; 0x38
 801cd92:	c403      	stmia	r4!, {r0, r1}
 801cd94:	6818      	ldr	r0, [r3, #0]
 801cd96:	6859      	ldr	r1, [r3, #4]
 801cd98:	ac10      	add	r4, sp, #64	; 0x40
 801cd9a:	c403      	stmia	r4!, {r0, r1}
 801cd9c:	a80e      	add	r0, sp, #56	; 0x38
 801cd9e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801cda2:	f7f9 fe01 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cda6:	4631      	mov	r1, r6
 801cda8:	a810      	add	r0, sp, #64	; 0x40
 801cdaa:	f7f9 fe25 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cdae:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cdb2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801cdb6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801cdba:	4e62      	ldr	r6, [pc, #392]	; (801cf44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801cdbc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cdc0:	4489      	add	r9, r1
 801cdc2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801cdc6:	6830      	ldr	r0, [r6, #0]
 801cdc8:	440a      	add	r2, r1
 801cdca:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801cdce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cdd2:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801cdd6:	4413      	add	r3, r2
 801cdd8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801cddc:	6803      	ldr	r3, [r0, #0]
 801cdde:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801cde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cde4:	4798      	blx	r3
 801cde6:	f010 0f80 	tst.w	r0, #128	; 0x80
 801cdea:	4f57      	ldr	r7, [pc, #348]	; (801cf48 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801cdec:	6830      	ldr	r0, [r6, #0]
 801cdee:	d01d      	beq.n	801ce2c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801cdf0:	2200      	movs	r2, #0
 801cdf2:	6801      	ldr	r1, [r0, #0]
 801cdf4:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801cdf8:	220b      	movs	r2, #11
 801cdfa:	9207      	str	r2, [sp, #28]
 801cdfc:	883a      	ldrh	r2, [r7, #0]
 801cdfe:	b2a4      	uxth	r4, r4
 801ce00:	9206      	str	r2, [sp, #24]
 801ce02:	2201      	movs	r2, #1
 801ce04:	e9cd a204 	strd	sl, r2, [sp, #16]
 801ce08:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801ce0c:	b2ad      	uxth	r5, r5
 801ce0e:	9203      	str	r2, [sp, #12]
 801ce10:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ce14:	9502      	str	r5, [sp, #8]
 801ce16:	9200      	str	r2, [sp, #0]
 801ce18:	9401      	str	r4, [sp, #4]
 801ce1a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801ce1c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ce20:	4642      	mov	r2, r8
 801ce22:	4649      	mov	r1, r9
 801ce24:	47a0      	blx	r4
 801ce26:	b013      	add	sp, #76	; 0x4c
 801ce28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce2c:	6803      	ldr	r3, [r0, #0]
 801ce2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce30:	4798      	blx	r3
 801ce32:	f04f 0e04 	mov.w	lr, #4
 801ce36:	883b      	ldrh	r3, [r7, #0]
 801ce38:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ce3c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801ce40:	435d      	muls	r5, r3
 801ce42:	fb03 1202 	mla	r2, r3, r2, r1
 801ce46:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ce4a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801ce4e:	920c      	str	r2, [sp, #48]	; 0x30
 801ce50:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801ce54:	1b12      	subs	r2, r2, r4
 801ce56:	920d      	str	r2, [sp, #52]	; 0x34
 801ce58:	0062      	lsls	r2, r4, #1
 801ce5a:	1b1c      	subs	r4, r3, r4
 801ce5c:	0063      	lsls	r3, r4, #1
 801ce5e:	920a      	str	r2, [sp, #40]	; 0x28
 801ce60:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce64:	4298      	cmp	r0, r3
 801ce66:	d266      	bcs.n	801cf36 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801ce68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce6a:	eb00 0b03 	add.w	fp, r0, r3
 801ce6e:	4558      	cmp	r0, fp
 801ce70:	d25c      	bcs.n	801cf2c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801ce72:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ce76:	fb1e e303 	smlabb	r3, lr, r3, lr
 801ce7a:	f858 2003 	ldr.w	r2, [r8, r3]
 801ce7e:	0e11      	lsrs	r1, r2, #24
 801ce80:	d012      	beq.n	801cea8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ce82:	29ff      	cmp	r1, #255	; 0xff
 801ce84:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801ce88:	d110      	bne.n	801ceac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ce8a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ce8e:	d10d      	bne.n	801ceac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ce90:	0953      	lsrs	r3, r2, #5
 801ce92:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801ce96:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ce9a:	f027 0707 	bic.w	r7, r7, #7
 801ce9e:	431f      	orrs	r7, r3
 801cea0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801cea4:	433a      	orrs	r2, r7
 801cea6:	8002      	strh	r2, [r0, #0]
 801cea8:	3002      	adds	r0, #2
 801ceaa:	e7e0      	b.n	801ce6e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801ceac:	fb0a f101 	mul.w	r1, sl, r1
 801ceb0:	1c4b      	adds	r3, r1, #1
 801ceb2:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801ceb6:	121b      	asrs	r3, r3, #8
 801ceb8:	b299      	uxth	r1, r3
 801ceba:	43db      	mvns	r3, r3
 801cebc:	8806      	ldrh	r6, [r0, #0]
 801cebe:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801cec2:	b2d2      	uxtb	r2, r2
 801cec4:	fb1c fc01 	smulbb	ip, ip, r1
 801cec8:	fb12 f201 	smulbb	r2, r2, r1
 801cecc:	1235      	asrs	r5, r6, #8
 801cece:	10f4      	asrs	r4, r6, #3
 801ced0:	00f6      	lsls	r6, r6, #3
 801ced2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ced6:	b2f6      	uxtb	r6, r6
 801ced8:	b2ff      	uxtb	r7, r7
 801ceda:	b2db      	uxtb	r3, r3
 801cedc:	fb17 f701 	smulbb	r7, r7, r1
 801cee0:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801cee4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cee8:	fb05 c503 	mla	r5, r5, r3, ip
 801ceec:	fb06 2203 	mla	r2, r6, r3, r2
 801cef0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801cef4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801cef8:	fb04 7403 	mla	r4, r4, r3, r7
 801cefc:	b2ad      	uxth	r5, r5
 801cefe:	b292      	uxth	r2, r2
 801cf00:	f105 0c01 	add.w	ip, r5, #1
 801cf04:	1c57      	adds	r7, r2, #1
 801cf06:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cf0a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801cf0e:	b2a4      	uxth	r4, r4
 801cf10:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cf14:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801cf18:	433d      	orrs	r5, r7
 801cf1a:	1c67      	adds	r7, r4, #1
 801cf1c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801cf20:	0964      	lsrs	r4, r4, #5
 801cf22:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801cf26:	4325      	orrs	r5, r4
 801cf28:	8005      	strh	r5, [r0, #0]
 801cf2a:	e7bd      	b.n	801cea8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801cf2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf2e:	4418      	add	r0, r3
 801cf30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf32:	4499      	add	r9, r3
 801cf34:	e795      	b.n	801ce62 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801cf36:	4b03      	ldr	r3, [pc, #12]	; (801cf44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801cf38:	6818      	ldr	r0, [r3, #0]
 801cf3a:	6803      	ldr	r3, [r0, #0]
 801cf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf3e:	4798      	blx	r3
 801cf40:	e771      	b.n	801ce26 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801cf42:	bf00      	nop
 801cf44:	2004f630 	.word	0x2004f630
 801cf48:	2004f62a 	.word	0x2004f62a

0801cf4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801cf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf50:	b087      	sub	sp, #28
 801cf52:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801cf56:	4680      	mov	r8, r0
 801cf58:	460d      	mov	r5, r1
 801cf5a:	4614      	mov	r4, r2
 801cf5c:	2e00      	cmp	r6, #0
 801cf5e:	f000 80b9 	beq.w	801d0d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801cf62:	6810      	ldr	r0, [r2, #0]
 801cf64:	6851      	ldr	r1, [r2, #4]
 801cf66:	af02      	add	r7, sp, #8
 801cf68:	c703      	stmia	r7!, {r0, r1}
 801cf6a:	6818      	ldr	r0, [r3, #0]
 801cf6c:	6859      	ldr	r1, [r3, #4]
 801cf6e:	af04      	add	r7, sp, #16
 801cf70:	c703      	stmia	r7!, {r0, r1}
 801cf72:	a802      	add	r0, sp, #8
 801cf74:	f7f9 fd18 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf78:	4621      	mov	r1, r4
 801cf7a:	a804      	add	r0, sp, #16
 801cf7c:	f7f9 fd3c 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cf80:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801cf84:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cf88:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801cf8c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801cf90:	fb14 2103 	smlabb	r1, r4, r3, r2
 801cf94:	eb08 0401 	add.w	r4, r8, r1
 801cf98:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801cf9c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801cfa0:	440a      	add	r2, r1
 801cfa2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cfa6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cfaa:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801cfae:	4413      	add	r3, r2
 801cfb0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cfb4:	4b49      	ldr	r3, [pc, #292]	; (801d0dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801cfb6:	6818      	ldr	r0, [r3, #0]
 801cfb8:	6803      	ldr	r3, [r0, #0]
 801cfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfbc:	4798      	blx	r3
 801cfbe:	4b48      	ldr	r3, [pc, #288]	; (801d0e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801cfc0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801cfc4:	881a      	ldrh	r2, [r3, #0]
 801cfc6:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801cfca:	2eff      	cmp	r6, #255	; 0xff
 801cfcc:	fb02 c101 	mla	r1, r2, r1, ip
 801cfd0:	fb02 f207 	mul.w	r2, r2, r7
 801cfd4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801cfd8:	f105 0104 	add.w	r1, r5, #4
 801cfdc:	461d      	mov	r5, r3
 801cfde:	d05a      	beq.n	801d096 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801cfe0:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801cfe4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cfe8:	b2b6      	uxth	r6, r6
 801cfea:	fa1f fe8e 	uxth.w	lr, lr
 801cfee:	9301      	str	r3, [sp, #4]
 801cff0:	4282      	cmp	r2, r0
 801cff2:	d96a      	bls.n	801d0ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801cff4:	eb00 0b0a 	add.w	fp, r0, sl
 801cff8:	4583      	cmp	fp, r0
 801cffa:	d940      	bls.n	801d07e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801cffc:	8805      	ldrh	r5, [r0, #0]
 801cffe:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d002:	122f      	asrs	r7, r5, #8
 801d004:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d008:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d00c:	fb17 f70e 	smulbb	r7, r7, lr
 801d010:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d014:	00ed      	lsls	r5, r5, #3
 801d016:	b2ed      	uxtb	r5, r5
 801d018:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d01c:	fb15 f50e 	smulbb	r5, r5, lr
 801d020:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d024:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d028:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d02c:	10df      	asrs	r7, r3, #3
 801d02e:	00db      	lsls	r3, r3, #3
 801d030:	fb19 f90e 	smulbb	r9, r9, lr
 801d034:	b2db      	uxtb	r3, r3
 801d036:	fb03 5306 	mla	r3, r3, r6, r5
 801d03a:	fa1f fc8c 	uxth.w	ip, ip
 801d03e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d042:	fb07 9706 	mla	r7, r7, r6, r9
 801d046:	f10c 0901 	add.w	r9, ip, #1
 801d04a:	b29b      	uxth	r3, r3
 801d04c:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d050:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d054:	f103 0c01 	add.w	ip, r3, #1
 801d058:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d05c:	b2bf      	uxth	r7, r7
 801d05e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d062:	ea4c 0c09 	orr.w	ip, ip, r9
 801d066:	f107 0901 	add.w	r9, r7, #1
 801d06a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d06e:	097f      	lsrs	r7, r7, #5
 801d070:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d074:	ea4c 0c07 	orr.w	ip, ip, r7
 801d078:	f820 cb02 	strh.w	ip, [r0], #2
 801d07c:	e7bc      	b.n	801cff8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801d07e:	9b01      	ldr	r3, [sp, #4]
 801d080:	881b      	ldrh	r3, [r3, #0]
 801d082:	eba3 0308 	sub.w	r3, r3, r8
 801d086:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d08a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d08e:	eba3 0308 	sub.w	r3, r3, r8
 801d092:	441c      	add	r4, r3
 801d094:	e7ac      	b.n	801cff0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801d096:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d09a:	4282      	cmp	r2, r0
 801d09c:	d915      	bls.n	801d0ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d09e:	eb00 060a 	add.w	r6, r0, sl
 801d0a2:	4286      	cmp	r6, r0
 801d0a4:	d906      	bls.n	801d0b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801d0a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d0aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d0ae:	f820 3b02 	strh.w	r3, [r0], #2
 801d0b2:	e7f6      	b.n	801d0a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801d0b4:	882b      	ldrh	r3, [r5, #0]
 801d0b6:	eba3 0308 	sub.w	r3, r3, r8
 801d0ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d0be:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d0c2:	eba3 0308 	sub.w	r3, r3, r8
 801d0c6:	441c      	add	r4, r3
 801d0c8:	e7e7      	b.n	801d09a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801d0ca:	4b04      	ldr	r3, [pc, #16]	; (801d0dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d0cc:	6818      	ldr	r0, [r3, #0]
 801d0ce:	6803      	ldr	r3, [r0, #0]
 801d0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0d2:	4798      	blx	r3
 801d0d4:	b007      	add	sp, #28
 801d0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0da:	bf00      	nop
 801d0dc:	2004f630 	.word	0x2004f630
 801d0e0:	2004f62a 	.word	0x2004f62a

0801d0e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0e8:	b091      	sub	sp, #68	; 0x44
 801d0ea:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801d0ee:	4680      	mov	r8, r0
 801d0f0:	460f      	mov	r7, r1
 801d0f2:	4614      	mov	r4, r2
 801d0f4:	2d00      	cmp	r5, #0
 801d0f6:	d051      	beq.n	801d19c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d0f8:	6810      	ldr	r0, [r2, #0]
 801d0fa:	6851      	ldr	r1, [r2, #4]
 801d0fc:	ae0c      	add	r6, sp, #48	; 0x30
 801d0fe:	c603      	stmia	r6!, {r0, r1}
 801d100:	6818      	ldr	r0, [r3, #0]
 801d102:	6859      	ldr	r1, [r3, #4]
 801d104:	ae0e      	add	r6, sp, #56	; 0x38
 801d106:	c603      	stmia	r6!, {r0, r1}
 801d108:	a80c      	add	r0, sp, #48	; 0x30
 801d10a:	f7f9 fc4d 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d10e:	4621      	mov	r1, r4
 801d110:	a80e      	add	r0, sp, #56	; 0x38
 801d112:	f7f9 fc71 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d116:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d11a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d11e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d122:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 801d300 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801d126:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d12a:	eb08 0401 	add.w	r4, r8, r1
 801d12e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d132:	f8d9 0000 	ldr.w	r0, [r9]
 801d136:	440a      	add	r2, r1
 801d138:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d13c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d140:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801d144:	4413      	add	r3, r2
 801d146:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d14a:	6803      	ldr	r3, [r0, #0]
 801d14c:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d152:	4798      	blx	r3
 801d154:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d158:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d304 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801d15c:	f8d9 0000 	ldr.w	r0, [r9]
 801d160:	d01f      	beq.n	801d1a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d162:	2200      	movs	r2, #0
 801d164:	6801      	ldr	r1, [r0, #0]
 801d166:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d16a:	220b      	movs	r2, #11
 801d16c:	9207      	str	r2, [sp, #28]
 801d16e:	f8b8 2000 	ldrh.w	r2, [r8]
 801d172:	b2b6      	uxth	r6, r6
 801d174:	9206      	str	r2, [sp, #24]
 801d176:	2201      	movs	r2, #1
 801d178:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801d17c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d180:	9601      	str	r6, [sp, #4]
 801d182:	9203      	str	r2, [sp, #12]
 801d184:	fa1f f28a 	uxth.w	r2, sl
 801d188:	9202      	str	r2, [sp, #8]
 801d18a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d18e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d192:	9200      	str	r2, [sp, #0]
 801d194:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d196:	463a      	mov	r2, r7
 801d198:	4621      	mov	r1, r4
 801d19a:	47a8      	blx	r5
 801d19c:	b011      	add	sp, #68	; 0x44
 801d19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1a2:	6803      	ldr	r3, [r0, #0]
 801d1a4:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801d1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1aa:	4798      	blx	r3
 801d1ac:	f8b8 2000 	ldrh.w	r2, [r8]
 801d1b0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d1b4:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d1b8:	2dff      	cmp	r5, #255	; 0xff
 801d1ba:	fb02 1303 	mla	r3, r2, r3, r1
 801d1be:	fb0a fa02 	mul.w	sl, sl, r2
 801d1c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d1c6:	d062      	beq.n	801d28e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801d1c8:	ea6f 0c05 	mvn.w	ip, r5
 801d1cc:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801d1d0:	930a      	str	r3, [sp, #40]	; 0x28
 801d1d2:	b2ad      	uxth	r5, r5
 801d1d4:	fa5f fc8c 	uxtb.w	ip, ip
 801d1d8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801d1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1de:	4298      	cmp	r0, r3
 801d1e0:	f080 8085 	bcs.w	801d2ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d1e4:	eb00 0b09 	add.w	fp, r0, r9
 801d1e8:	4558      	cmp	r0, fp
 801d1ea:	d246      	bcs.n	801d27a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801d1ec:	2303      	movs	r3, #3
 801d1ee:	2204      	movs	r2, #4
 801d1f0:	f814 eb01 	ldrb.w	lr, [r4], #1
 801d1f4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801d1f8:	eb07 0a0e 	add.w	sl, r7, lr
 801d1fc:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801d200:	8803      	ldrh	r3, [r0, #0]
 801d202:	fb18 f805 	smulbb	r8, r8, r5
 801d206:	1219      	asrs	r1, r3, #8
 801d208:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d20c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801d210:	fb01 810c 	mla	r1, r1, ip, r8
 801d214:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d218:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d21c:	fb1e fe05 	smulbb	lr, lr, r5
 801d220:	fb18 f805 	smulbb	r8, r8, r5
 801d224:	10da      	asrs	r2, r3, #3
 801d226:	00db      	lsls	r3, r3, #3
 801d228:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d22c:	b2db      	uxtb	r3, r3
 801d22e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d232:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d236:	fb02 820c 	mla	r2, r2, ip, r8
 801d23a:	fb03 e30c 	mla	r3, r3, ip, lr
 801d23e:	b289      	uxth	r1, r1
 801d240:	b292      	uxth	r2, r2
 801d242:	b29b      	uxth	r3, r3
 801d244:	f101 0801 	add.w	r8, r1, #1
 801d248:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d24c:	f103 0e01 	add.w	lr, r3, #1
 801d250:	f102 0801 	add.w	r8, r2, #1
 801d254:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801d258:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801d25c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d260:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d264:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d268:	ea4e 0101 	orr.w	r1, lr, r1
 801d26c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d270:	ea41 0108 	orr.w	r1, r1, r8
 801d274:	f820 1b02 	strh.w	r1, [r0], #2
 801d278:	e7b6      	b.n	801d1e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801d27a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d27c:	881b      	ldrh	r3, [r3, #0]
 801d27e:	1b9b      	subs	r3, r3, r6
 801d280:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d284:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d288:	1b9b      	subs	r3, r3, r6
 801d28a:	441c      	add	r4, r3
 801d28c:	e7a6      	b.n	801d1dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d28e:	2203      	movs	r2, #3
 801d290:	2504      	movs	r5, #4
 801d292:	491a      	ldr	r1, [pc, #104]	; (801d2fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801d294:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801d298:	4550      	cmp	r0, sl
 801d29a:	d228      	bcs.n	801d2ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d29c:	eb00 0c09 	add.w	ip, r0, r9
 801d2a0:	4560      	cmp	r0, ip
 801d2a2:	4623      	mov	r3, r4
 801d2a4:	d219      	bcs.n	801d2da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801d2a6:	f893 e000 	ldrb.w	lr, [r3]
 801d2aa:	3401      	adds	r4, #1
 801d2ac:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801d2b0:	eb07 0b0e 	add.w	fp, r7, lr
 801d2b4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d2b8:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d2bc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d2c0:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801d2c4:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801d2c8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d2cc:	ea43 030b 	orr.w	r3, r3, fp
 801d2d0:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801d2d4:	f820 3b02 	strh.w	r3, [r0], #2
 801d2d8:	e7e2      	b.n	801d2a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801d2da:	f8b8 3000 	ldrh.w	r3, [r8]
 801d2de:	1b9b      	subs	r3, r3, r6
 801d2e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d2e4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d2e8:	1b9b      	subs	r3, r3, r6
 801d2ea:	441c      	add	r4, r3
 801d2ec:	e7d4      	b.n	801d298 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d2ee:	4b04      	ldr	r3, [pc, #16]	; (801d300 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801d2f0:	6818      	ldr	r0, [r3, #0]
 801d2f2:	6803      	ldr	r3, [r0, #0]
 801d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2f6:	4798      	blx	r3
 801d2f8:	e750      	b.n	801d19c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d2fa:	bf00      	nop
 801d2fc:	fffff800 	.word	0xfffff800
 801d300:	2004f630 	.word	0x2004f630
 801d304:	2004f62a 	.word	0x2004f62a

0801d308 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d308:	b430      	push	{r4, r5}
 801d30a:	780d      	ldrb	r5, [r1, #0]
 801d30c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d310:	2d01      	cmp	r5, #1
 801d312:	d00a      	beq.n	801d32a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801d314:	d305      	bcc.n	801d322 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d316:	2d02      	cmp	r5, #2
 801d318:	d10b      	bne.n	801d332 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801d31a:	9402      	str	r4, [sp, #8]
 801d31c:	bc30      	pop	{r4, r5}
 801d31e:	f7ff be15 	b.w	801cf4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801d322:	9402      	str	r4, [sp, #8]
 801d324:	bc30      	pop	{r4, r5}
 801d326:	f7ff bd2b 	b.w	801cd80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d32a:	9402      	str	r4, [sp, #8]
 801d32c:	bc30      	pop	{r4, r5}
 801d32e:	f7ff bed9 	b.w	801d0e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d332:	bc30      	pop	{r4, r5}
 801d334:	4770      	bx	lr
	...

0801d338 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801d338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d33c:	4617      	mov	r7, r2
 801d33e:	4604      	mov	r4, r0
 801d340:	460e      	mov	r6, r1
 801d342:	b087      	sub	sp, #28
 801d344:	6810      	ldr	r0, [r2, #0]
 801d346:	6851      	ldr	r1, [r2, #4]
 801d348:	ad02      	add	r5, sp, #8
 801d34a:	c503      	stmia	r5!, {r0, r1}
 801d34c:	6818      	ldr	r0, [r3, #0]
 801d34e:	6859      	ldr	r1, [r3, #4]
 801d350:	ad04      	add	r5, sp, #16
 801d352:	c503      	stmia	r5!, {r0, r1}
 801d354:	a802      	add	r0, sp, #8
 801d356:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801d35a:	f7f9 fb25 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d35e:	4639      	mov	r1, r7
 801d360:	a804      	add	r0, sp, #16
 801d362:	f7f9 fb49 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d366:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d36a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d36e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d372:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d376:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d37a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d37e:	440e      	add	r6, r1
 801d380:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d384:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d388:	440a      	add	r2, r1
 801d38a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d38e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d392:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 801d580 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801d396:	4413      	add	r3, r2
 801d398:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d39c:	4b77      	ldr	r3, [pc, #476]	; (801d57c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d39e:	6818      	ldr	r0, [r3, #0]
 801d3a0:	6803      	ldr	r3, [r0, #0]
 801d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3a4:	4798      	blx	r3
 801d3a6:	f8b9 b000 	ldrh.w	fp, [r9]
 801d3aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d3ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d3b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d3b6:	fb0b 2303 	mla	r3, fp, r3, r2
 801d3ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d3be:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d3c2:	fb05 f50b 	mul.w	r5, r5, fp
 801d3c6:	9300      	str	r3, [sp, #0]
 801d3c8:	d069      	beq.n	801d49e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801d3ca:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801d3ce:	4558      	cmp	r0, fp
 801d3d0:	f080 80cc 	bcs.w	801d56c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d3d4:	4631      	mov	r1, r6
 801d3d6:	9b00      	ldr	r3, [sp, #0]
 801d3d8:	18c3      	adds	r3, r0, r3
 801d3da:	9301      	str	r3, [sp, #4]
 801d3dc:	9b01      	ldr	r3, [sp, #4]
 801d3de:	4298      	cmp	r0, r3
 801d3e0:	d24f      	bcs.n	801d482 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801d3e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d3e6:	2a00      	cmp	r2, #0
 801d3e8:	d048      	beq.n	801d47c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d3ea:	fb0a f202 	mul.w	r2, sl, r2
 801d3ee:	1c53      	adds	r3, r2, #1
 801d3f0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d3f4:	121b      	asrs	r3, r3, #8
 801d3f6:	d041      	beq.n	801d47c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d3f8:	b29e      	uxth	r6, r3
 801d3fa:	43db      	mvns	r3, r3
 801d3fc:	8802      	ldrh	r2, [r0, #0]
 801d3fe:	b2db      	uxtb	r3, r3
 801d400:	1215      	asrs	r5, r2, #8
 801d402:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d406:	f8b4 c000 	ldrh.w	ip, [r4]
 801d40a:	fb15 f503 	smulbb	r5, r5, r3
 801d40e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801d412:	00d2      	lsls	r2, r2, #3
 801d414:	b2d2      	uxtb	r2, r2
 801d416:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d41a:	fb12 f203 	smulbb	r2, r2, r3
 801d41e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d422:	fb07 5706 	mla	r7, r7, r6, r5
 801d426:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d42a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d42e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d432:	fb1e fe03 	smulbb	lr, lr, r3
 801d436:	fa5f fc8c 	uxtb.w	ip, ip
 801d43a:	fb0c 2c06 	mla	ip, ip, r6, r2
 801d43e:	b2bf      	uxth	r7, r7
 801d440:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d444:	fb05 e506 	mla	r5, r5, r6, lr
 801d448:	f107 0e01 	add.w	lr, r7, #1
 801d44c:	fa1f fc8c 	uxth.w	ip, ip
 801d450:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d454:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801d458:	f10c 0701 	add.w	r7, ip, #1
 801d45c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d460:	b2ad      	uxth	r5, r5
 801d462:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d466:	ea47 070e 	orr.w	r7, r7, lr
 801d46a:	f105 0e01 	add.w	lr, r5, #1
 801d46e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801d472:	096d      	lsrs	r5, r5, #5
 801d474:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d478:	432f      	orrs	r7, r5
 801d47a:	8007      	strh	r7, [r0, #0]
 801d47c:	3002      	adds	r0, #2
 801d47e:	3402      	adds	r4, #2
 801d480:	e7ac      	b.n	801d3dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801d482:	f8b9 3000 	ldrh.w	r3, [r9]
 801d486:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d48a:	eba3 0308 	sub.w	r3, r3, r8
 801d48e:	eba6 0608 	sub.w	r6, r6, r8
 801d492:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d496:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d49a:	440e      	add	r6, r1
 801d49c:	e797      	b.n	801d3ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801d49e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801d4a2:	42a8      	cmp	r0, r5
 801d4a4:	d262      	bcs.n	801d56c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d4a6:	4631      	mov	r1, r6
 801d4a8:	9b00      	ldr	r3, [sp, #0]
 801d4aa:	eb00 0b03 	add.w	fp, r0, r3
 801d4ae:	4558      	cmp	r0, fp
 801d4b0:	d24e      	bcs.n	801d550 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801d4b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d4b6:	b12b      	cbz	r3, 801d4c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d4b8:	2bff      	cmp	r3, #255	; 0xff
 801d4ba:	f8b4 e000 	ldrh.w	lr, [r4]
 801d4be:	d104      	bne.n	801d4ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801d4c0:	f8a0 e000 	strh.w	lr, [r0]
 801d4c4:	3002      	adds	r0, #2
 801d4c6:	3402      	adds	r4, #2
 801d4c8:	e7f1      	b.n	801d4ae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801d4ca:	b29f      	uxth	r7, r3
 801d4cc:	43db      	mvns	r3, r3
 801d4ce:	8802      	ldrh	r2, [r0, #0]
 801d4d0:	b2db      	uxtb	r3, r3
 801d4d2:	1216      	asrs	r6, r2, #8
 801d4d4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d4d8:	fb16 f603 	smulbb	r6, r6, r3
 801d4dc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801d4e0:	00d2      	lsls	r2, r2, #3
 801d4e2:	b2d2      	uxtb	r2, r2
 801d4e4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d4e8:	fb1a fa03 	smulbb	sl, sl, r3
 801d4ec:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d4f0:	fb12 f303 	smulbb	r3, r2, r3
 801d4f4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d4f8:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d4fc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d500:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d504:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d508:	fa5f fe8e 	uxtb.w	lr, lr
 801d50c:	fb06 a607 	mla	r6, r6, r7, sl
 801d510:	fb0e 3307 	mla	r3, lr, r7, r3
 801d514:	fa1f fc8c 	uxth.w	ip, ip
 801d518:	f10c 0201 	add.w	r2, ip, #1
 801d51c:	b2b6      	uxth	r6, r6
 801d51e:	b29b      	uxth	r3, r3
 801d520:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d524:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801d528:	f106 0a01 	add.w	sl, r6, #1
 801d52c:	f103 0c01 	add.w	ip, r3, #1
 801d530:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d534:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801d538:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d53c:	0976      	lsrs	r6, r6, #5
 801d53e:	ea4c 0c02 	orr.w	ip, ip, r2
 801d542:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d546:	ea4c 0c06 	orr.w	ip, ip, r6
 801d54a:	f8a0 c000 	strh.w	ip, [r0]
 801d54e:	e7b9      	b.n	801d4c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d550:	f8b9 3000 	ldrh.w	r3, [r9]
 801d554:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d558:	eba3 0308 	sub.w	r3, r3, r8
 801d55c:	eba6 0608 	sub.w	r6, r6, r8
 801d560:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d564:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d568:	440e      	add	r6, r1
 801d56a:	e79a      	b.n	801d4a2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801d56c:	4b03      	ldr	r3, [pc, #12]	; (801d57c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d56e:	6818      	ldr	r0, [r3, #0]
 801d570:	6803      	ldr	r3, [r0, #0]
 801d572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d574:	4798      	blx	r3
 801d576:	b007      	add	sp, #28
 801d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d57c:	2004f630 	.word	0x2004f630
 801d580:	2004f62a 	.word	0x2004f62a

0801d584 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d588:	b089      	sub	sp, #36	; 0x24
 801d58a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801d58e:	4682      	mov	sl, r0
 801d590:	460f      	mov	r7, r1
 801d592:	4691      	mov	r9, r2
 801d594:	4698      	mov	r8, r3
 801d596:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d598:	2e00      	cmp	r6, #0
 801d59a:	d036      	beq.n	801d60a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d59c:	4608      	mov	r0, r1
 801d59e:	f7fc f86d 	bl	801967c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d5a2:	4605      	mov	r5, r0
 801d5a4:	4638      	mov	r0, r7
 801d5a6:	f7fc f89d 	bl	80196e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d5aa:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d5ae:	4638      	mov	r0, r7
 801d5b0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d5b4:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d5b8:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d5bc:	f7fc f94a 	bl	8019854 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d5c0:	4605      	mov	r5, r0
 801d5c2:	4638      	mov	r0, r7
 801d5c4:	f7fc f976 	bl	80198b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d5c8:	4681      	mov	r9, r0
 801d5ca:	4638      	mov	r0, r7
 801d5cc:	f7fc f9c6 	bl	801995c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5d0:	280b      	cmp	r0, #11
 801d5d2:	d81a      	bhi.n	801d60a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d5d4:	e8df f000 	tbb	[pc, r0]
 801d5d8:	1906aebd 	.word	0x1906aebd
 801d5dc:	19191919 	.word	0x19191919
 801d5e0:	b5191919 	.word	0xb5191919
 801d5e4:	4bb0      	ldr	r3, [pc, #704]	; (801d8a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801d5e6:	6818      	ldr	r0, [r3, #0]
 801d5e8:	6803      	ldr	r3, [r0, #0]
 801d5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5ec:	4798      	blx	r3
 801d5ee:	2eff      	cmp	r6, #255	; 0xff
 801d5f0:	d121      	bne.n	801d636 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d5f2:	0683      	lsls	r3, r0, #26
 801d5f4:	d41f      	bmi.n	801d636 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d5f6:	4638      	mov	r0, r7
 801d5f8:	f7fc f8f4 	bl	80197e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d5fc:	b940      	cbnz	r0, 801d610 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801d5fe:	4623      	mov	r3, r4
 801d600:	aa02      	add	r2, sp, #8
 801d602:	4629      	mov	r1, r5
 801d604:	4650      	mov	r0, sl
 801d606:	f7ff fa2f 	bl	801ca68 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d60a:	b009      	add	sp, #36	; 0x24
 801d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d610:	f10d 0818 	add.w	r8, sp, #24
 801d614:	4639      	mov	r1, r7
 801d616:	4640      	mov	r0, r8
 801d618:	af04      	add	r7, sp, #16
 801d61a:	f7fc f897 	bl	801974c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d61e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d622:	e887 0003 	stmia.w	r7, {r0, r1}
 801d626:	4638      	mov	r0, r7
 801d628:	4621      	mov	r1, r4
 801d62a:	f7f5 fc71 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 801d62e:	4638      	mov	r0, r7
 801d630:	f7f5 fcb1 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d634:	b130      	cbz	r0, 801d644 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801d636:	4633      	mov	r3, r6
 801d638:	4622      	mov	r2, r4
 801d63a:	a902      	add	r1, sp, #8
 801d63c:	4628      	mov	r0, r5
 801d63e:	f7ff f92d 	bl	801c89c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d642:	e7e2      	b.n	801d60a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d644:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d648:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d64c:	4293      	cmp	r3, r2
 801d64e:	dd12      	ble.n	801d676 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801d650:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d654:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d658:	1a9b      	subs	r3, r3, r2
 801d65a:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d65e:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d662:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d666:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d66a:	4642      	mov	r2, r8
 801d66c:	4633      	mov	r3, r6
 801d66e:	a902      	add	r1, sp, #8
 801d670:	4628      	mov	r0, r5
 801d672:	f7ff f913 	bl	801c89c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d676:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d67a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d67e:	4293      	cmp	r3, r2
 801d680:	dd12      	ble.n	801d6a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801d682:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d686:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d68a:	1a9b      	subs	r3, r3, r2
 801d68c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d690:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d694:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d698:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d69c:	23ff      	movs	r3, #255	; 0xff
 801d69e:	4642      	mov	r2, r8
 801d6a0:	a902      	add	r1, sp, #8
 801d6a2:	4628      	mov	r0, r5
 801d6a4:	f7ff f8fa 	bl	801c89c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d6a8:	463b      	mov	r3, r7
 801d6aa:	aa02      	add	r2, sp, #8
 801d6ac:	4629      	mov	r1, r5
 801d6ae:	4650      	mov	r0, sl
 801d6b0:	f7ff f9da 	bl	801ca68 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d6b4:	88a2      	ldrh	r2, [r4, #4]
 801d6b6:	8823      	ldrh	r3, [r4, #0]
 801d6b8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d6bc:	4413      	add	r3, r2
 801d6be:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d6c2:	b29b      	uxth	r3, r3
 801d6c4:	440a      	add	r2, r1
 801d6c6:	b292      	uxth	r2, r2
 801d6c8:	b211      	sxth	r1, r2
 801d6ca:	b218      	sxth	r0, r3
 801d6cc:	4288      	cmp	r0, r1
 801d6ce:	dd12      	ble.n	801d6f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801d6d0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d6d4:	1a9b      	subs	r3, r3, r2
 801d6d6:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801d6da:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d6de:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d6e2:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d6e6:	23ff      	movs	r3, #255	; 0xff
 801d6e8:	4642      	mov	r2, r8
 801d6ea:	a902      	add	r1, sp, #8
 801d6ec:	4628      	mov	r0, r5
 801d6ee:	f8ad 601a 	strh.w	r6, [sp, #26]
 801d6f2:	f7ff f8d3 	bl	801c89c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d6f6:	88e2      	ldrh	r2, [r4, #6]
 801d6f8:	8863      	ldrh	r3, [r4, #2]
 801d6fa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d6fe:	4413      	add	r3, r2
 801d700:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d704:	b29b      	uxth	r3, r3
 801d706:	440a      	add	r2, r1
 801d708:	b292      	uxth	r2, r2
 801d70a:	b211      	sxth	r1, r2
 801d70c:	b218      	sxth	r0, r3
 801d70e:	4288      	cmp	r0, r1
 801d710:	f77f af7b 	ble.w	801d60a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d714:	f9b4 6000 	ldrsh.w	r6, [r4]
 801d718:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d71c:	1a9b      	subs	r3, r3, r2
 801d71e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d722:	f8ad 6018 	strh.w	r6, [sp, #24]
 801d726:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d72a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d72e:	23ff      	movs	r3, #255	; 0xff
 801d730:	4642      	mov	r2, r8
 801d732:	e782      	b.n	801d63a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801d734:	4633      	mov	r3, r6
 801d736:	4622      	mov	r2, r4
 801d738:	a902      	add	r1, sp, #8
 801d73a:	4628      	mov	r0, r5
 801d73c:	f7ff fa04 	bl	801cb48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801d740:	e763      	b.n	801d60a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d742:	9600      	str	r6, [sp, #0]
 801d744:	4623      	mov	r3, r4
 801d746:	aa02      	add	r2, sp, #8
 801d748:	4649      	mov	r1, r9
 801d74a:	4628      	mov	r0, r5
 801d74c:	f7ff fddc 	bl	801d308 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d750:	e75b      	b.n	801d60a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d752:	4638      	mov	r0, r7
 801d754:	f7fc f846 	bl	80197e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d758:	b950      	cbnz	r0, 801d770 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801d75a:	e9cd 6000 	strd	r6, r0, [sp]
 801d75e:	f8da 3000 	ldr.w	r3, [sl]
 801d762:	aa02      	add	r2, sp, #8
 801d764:	68de      	ldr	r6, [r3, #12]
 801d766:	4629      	mov	r1, r5
 801d768:	4623      	mov	r3, r4
 801d76a:	4650      	mov	r0, sl
 801d76c:	47b0      	blx	r6
 801d76e:	e74c      	b.n	801d60a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d770:	f10d 0818 	add.w	r8, sp, #24
 801d774:	4639      	mov	r1, r7
 801d776:	4640      	mov	r0, r8
 801d778:	af04      	add	r7, sp, #16
 801d77a:	f7fb ffe7 	bl	801974c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d77e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d782:	e887 0003 	stmia.w	r7, {r0, r1}
 801d786:	4638      	mov	r0, r7
 801d788:	4621      	mov	r1, r4
 801d78a:	f7f5 fbc1 	bl	8012f10 <_ZN8touchgfx4RectaNERKS0_>
 801d78e:	4638      	mov	r0, r7
 801d790:	f7f5 fc01 	bl	8012f96 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d794:	b138      	cbz	r0, 801d7a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801d796:	4623      	mov	r3, r4
 801d798:	9600      	str	r6, [sp, #0]
 801d79a:	aa02      	add	r2, sp, #8
 801d79c:	4649      	mov	r1, r9
 801d79e:	4628      	mov	r0, r5
 801d7a0:	f7ff fdca 	bl	801d338 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d7a4:	e731      	b.n	801d60a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d7a6:	e9cd 6000 	strd	r6, r0, [sp]
 801d7aa:	f8da 3000 	ldr.w	r3, [sl]
 801d7ae:	aa02      	add	r2, sp, #8
 801d7b0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801d7b4:	4629      	mov	r1, r5
 801d7b6:	463b      	mov	r3, r7
 801d7b8:	4650      	mov	r0, sl
 801d7ba:	47d8      	blx	fp
 801d7bc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d7c0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d7c4:	4293      	cmp	r3, r2
 801d7c6:	dd13      	ble.n	801d7f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801d7c8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d7cc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d7d0:	1a9b      	subs	r3, r3, r2
 801d7d2:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d7d6:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d7da:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d7de:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d7e2:	9600      	str	r6, [sp, #0]
 801d7e4:	4643      	mov	r3, r8
 801d7e6:	aa02      	add	r2, sp, #8
 801d7e8:	4649      	mov	r1, r9
 801d7ea:	4628      	mov	r0, r5
 801d7ec:	f7ff fda4 	bl	801d338 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d7f0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d7f4:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d7f8:	4293      	cmp	r3, r2
 801d7fa:	dd13      	ble.n	801d824 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801d7fc:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d800:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d804:	1a9b      	subs	r3, r3, r2
 801d806:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d80a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d80e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d812:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d816:	9600      	str	r6, [sp, #0]
 801d818:	4643      	mov	r3, r8
 801d81a:	aa02      	add	r2, sp, #8
 801d81c:	4649      	mov	r1, r9
 801d81e:	4628      	mov	r0, r5
 801d820:	f7ff fd8a 	bl	801d338 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d824:	88a2      	ldrh	r2, [r4, #4]
 801d826:	8823      	ldrh	r3, [r4, #0]
 801d828:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d82c:	4413      	add	r3, r2
 801d82e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d832:	b29b      	uxth	r3, r3
 801d834:	440a      	add	r2, r1
 801d836:	b292      	uxth	r2, r2
 801d838:	b211      	sxth	r1, r2
 801d83a:	b218      	sxth	r0, r3
 801d83c:	4288      	cmp	r0, r1
 801d83e:	dd13      	ble.n	801d868 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801d840:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d844:	1a9b      	subs	r3, r3, r2
 801d846:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801d84a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d84e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d852:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d856:	9600      	str	r6, [sp, #0]
 801d858:	4643      	mov	r3, r8
 801d85a:	aa02      	add	r2, sp, #8
 801d85c:	4649      	mov	r1, r9
 801d85e:	4628      	mov	r0, r5
 801d860:	f8ad 701a 	strh.w	r7, [sp, #26]
 801d864:	f7ff fd68 	bl	801d338 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d868:	88e2      	ldrh	r2, [r4, #6]
 801d86a:	8863      	ldrh	r3, [r4, #2]
 801d86c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d870:	4413      	add	r3, r2
 801d872:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d876:	b29b      	uxth	r3, r3
 801d878:	440a      	add	r2, r1
 801d87a:	b292      	uxth	r2, r2
 801d87c:	b211      	sxth	r1, r2
 801d87e:	b218      	sxth	r0, r3
 801d880:	4288      	cmp	r0, r1
 801d882:	f77f aec2 	ble.w	801d60a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d886:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d88a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d88e:	1a9b      	subs	r3, r3, r2
 801d890:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d894:	f8ad 7018 	strh.w	r7, [sp, #24]
 801d898:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d89c:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d8a0:	9600      	str	r6, [sp, #0]
 801d8a2:	4643      	mov	r3, r8
 801d8a4:	e779      	b.n	801d79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801d8a6:	bf00      	nop
 801d8a8:	2004f630 	.word	0x2004f630

0801d8ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801d8ac:	b180      	cbz	r0, 801d8d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801d8ae:	2903      	cmp	r1, #3
 801d8b0:	d81c      	bhi.n	801d8ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d8b2:	e8df f001 	tbb	[pc, r1]
 801d8b6:	1d02      	.short	0x1d02
 801d8b8:	1f08      	.short	0x1f08
 801d8ba:	4b10      	ldr	r3, [pc, #64]	; (801d8fc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d8bc:	8818      	ldrh	r0, [r3, #0]
 801d8be:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d8c2:	4240      	negs	r0, r0
 801d8c4:	4770      	bx	lr
 801d8c6:	4b0d      	ldr	r3, [pc, #52]	; (801d8fc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d8c8:	8818      	ldrh	r0, [r3, #0]
 801d8ca:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d8ce:	4770      	bx	lr
 801d8d0:	2903      	cmp	r1, #3
 801d8d2:	d80b      	bhi.n	801d8ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d8d4:	a301      	add	r3, pc, #4	; (adr r3, 801d8dc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801d8d6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d8da:	bf00      	nop
 801d8dc:	0801d8f1 	.word	0x0801d8f1
 801d8e0:	0801d8c7 	.word	0x0801d8c7
 801d8e4:	0801d8f5 	.word	0x0801d8f5
 801d8e8:	0801d8bb 	.word	0x0801d8bb
 801d8ec:	2000      	movs	r0, #0
 801d8ee:	4770      	bx	lr
 801d8f0:	2001      	movs	r0, #1
 801d8f2:	4770      	bx	lr
 801d8f4:	f04f 30ff 	mov.w	r0, #4294967295
 801d8f8:	4770      	bx	lr
 801d8fa:	bf00      	nop
 801d8fc:	2004f62a 	.word	0x2004f62a

0801d900 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801d900:	b180      	cbz	r0, 801d924 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801d902:	2903      	cmp	r1, #3
 801d904:	d81c      	bhi.n	801d940 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801d906:	e8df f001 	tbb	[pc, r1]
 801d90a:	021d      	.short	0x021d
 801d90c:	071f      	.short	0x071f
 801d90e:	4b10      	ldr	r3, [pc, #64]	; (801d950 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d910:	8818      	ldrh	r0, [r3, #0]
 801d912:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d916:	4770      	bx	lr
 801d918:	4b0d      	ldr	r3, [pc, #52]	; (801d950 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d91a:	8818      	ldrh	r0, [r3, #0]
 801d91c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d920:	4240      	negs	r0, r0
 801d922:	4770      	bx	lr
 801d924:	2903      	cmp	r1, #3
 801d926:	d80b      	bhi.n	801d940 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801d928:	a301      	add	r3, pc, #4	; (adr r3, 801d930 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801d92a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d92e:	bf00      	nop
 801d930:	0801d90f 	.word	0x0801d90f
 801d934:	0801d949 	.word	0x0801d949
 801d938:	0801d919 	.word	0x0801d919
 801d93c:	0801d945 	.word	0x0801d945
 801d940:	2000      	movs	r0, #0
 801d942:	4770      	bx	lr
 801d944:	2001      	movs	r0, #1
 801d946:	4770      	bx	lr
 801d948:	f04f 30ff 	mov.w	r0, #4294967295
 801d94c:	4770      	bx	lr
 801d94e:	bf00      	nop
 801d950:	2004f62a 	.word	0x2004f62a

0801d954 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d958:	b099      	sub	sp, #100	; 0x64
 801d95a:	910b      	str	r1, [sp, #44]	; 0x2c
 801d95c:	a914      	add	r1, sp, #80	; 0x50
 801d95e:	e881 000c 	stmia.w	r1, {r2, r3}
 801d962:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801d966:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801d96a:	f891 900d 	ldrb.w	r9, [r1, #13]
 801d96e:	9309      	str	r3, [sp, #36]	; 0x24
 801d970:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801d974:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801d978:	9310      	str	r3, [sp, #64]	; 0x40
 801d97a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801d97e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801d982:	930c      	str	r3, [sp, #48]	; 0x30
 801d984:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801d988:	798f      	ldrb	r7, [r1, #6]
 801d98a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801d98e:	431f      	orrs	r7, r3
 801d990:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801d994:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801d998:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801d99c:	f000 8194 	beq.w	801dcc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801d9a0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801d9a4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801d9a8:	f891 9007 	ldrb.w	r9, [r1, #7]
 801d9ac:	ea59 0903 	orrs.w	r9, r9, r3
 801d9b0:	f000 818a 	beq.w	801dcc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801d9b4:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d9b8:	b29b      	uxth	r3, r3
 801d9ba:	2d00      	cmp	r5, #0
 801d9bc:	f000 812f 	beq.w	801dc1e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801d9c0:	1aed      	subs	r5, r5, r3
 801d9c2:	b2ad      	uxth	r5, r5
 801d9c4:	042b      	lsls	r3, r5, #16
 801d9c6:	d502      	bpl.n	801d9ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801d9c8:	1b64      	subs	r4, r4, r5
 801d9ca:	2500      	movs	r5, #0
 801d9cc:	b224      	sxth	r4, r4
 801d9ce:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d9d2:	a814      	add	r0, sp, #80	; 0x50
 801d9d4:	428c      	cmp	r4, r1
 801d9d6:	b28b      	uxth	r3, r1
 801d9d8:	bfbf      	itttt	lt
 801d9da:	18ed      	addlt	r5, r5, r3
 801d9dc:	1b2c      	sublt	r4, r5, r4
 801d9de:	b2a5      	uxthlt	r5, r4
 801d9e0:	460c      	movlt	r4, r1
 801d9e2:	8891      	ldrh	r1, [r2, #4]
 801d9e4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801d9e8:	440b      	add	r3, r1
 801d9ea:	b21b      	sxth	r3, r3
 801d9ec:	930f      	str	r3, [sp, #60]	; 0x3c
 801d9ee:	88d3      	ldrh	r3, [r2, #6]
 801d9f0:	8852      	ldrh	r2, [r2, #2]
 801d9f2:	4621      	mov	r1, r4
 801d9f4:	4413      	add	r3, r2
 801d9f6:	b21b      	sxth	r3, r3
 801d9f8:	930d      	str	r3, [sp, #52]	; 0x34
 801d9fa:	4bbd      	ldr	r3, [pc, #756]	; (801dcf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801d9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d9fe:	f893 b000 	ldrb.w	fp, [r3]
 801da02:	f10b 3cff 	add.w	ip, fp, #4294967295
 801da06:	f1dc 0300 	rsbs	r3, ip, #0
 801da0a:	eb43 030c 	adc.w	r3, r3, ip
 801da0e:	930e      	str	r3, [sp, #56]	; 0x38
 801da10:	4653      	mov	r3, sl
 801da12:	f7f8 fe43 	bl	801669c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801da16:	4621      	mov	r1, r4
 801da18:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801da1c:	4653      	mov	r3, sl
 801da1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da20:	a814      	add	r0, sp, #80	; 0x50
 801da22:	f7f8 fe58 	bl	80166d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801da26:	a918      	add	r1, sp, #96	; 0x60
 801da28:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801da2c:	a817      	add	r0, sp, #92	; 0x5c
 801da2e:	f7f8 ff79 	bl	8016924 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801da32:	f1ba 0f00 	cmp.w	sl, #0
 801da36:	f040 80f5 	bne.w	801dc24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801da3a:	f1bb 0f01 	cmp.w	fp, #1
 801da3e:	f040 80f9 	bne.w	801dc34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801da42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da44:	2b00      	cmp	r3, #0
 801da46:	f040 8144 	bne.w	801dcd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 801da4a:	b2ba      	uxth	r2, r7
 801da4c:	b905      	cbnz	r5, 801da50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801da4e:	b16e      	cbz	r6, 801da6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801da50:	4631      	mov	r1, r6
 801da52:	fb06 5302 	mla	r3, r6, r2, r5
 801da56:	fb08 f303 	mul.w	r3, r8, r3
 801da5a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801da5c:	f003 0607 	and.w	r6, r3, #7
 801da60:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801da64:	9328      	str	r3, [sp, #160]	; 0xa0
 801da66:	eba9 0301 	sub.w	r3, r9, r1
 801da6a:	930a      	str	r3, [sp, #40]	; 0x28
 801da6c:	4651      	mov	r1, sl
 801da6e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801da70:	f7ff ff1c 	bl	801d8ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801da74:	4681      	mov	r9, r0
 801da76:	980e      	ldr	r0, [sp, #56]	; 0x38
 801da78:	f7ff ff42 	bl	801d900 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801da7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801da80:	4683      	mov	fp, r0
 801da82:	eba3 0a01 	sub.w	sl, r3, r1
 801da86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da88:	459a      	cmp	sl, r3
 801da8a:	bfa8      	it	ge
 801da8c:	469a      	movge	sl, r3
 801da8e:	f1ba 0f00 	cmp.w	sl, #0
 801da92:	f340 8119 	ble.w	801dcc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801da96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801da98:	1b64      	subs	r4, r4, r5
 801da9a:	1b1c      	subs	r4, r3, r4
 801da9c:	42bc      	cmp	r4, r7
 801da9e:	bfd4      	ite	le
 801daa0:	ebc5 0504 	rsble	r5, r5, r4
 801daa4:	ebc5 0507 	rsbgt	r5, r5, r7
 801daa8:	2d00      	cmp	r5, #0
 801daaa:	f340 810d 	ble.w	801dcc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801daae:	1b52      	subs	r2, r2, r5
 801dab0:	fb08 f302 	mul.w	r3, r8, r2
 801dab4:	930f      	str	r3, [sp, #60]	; 0x3c
 801dab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dab8:	2b00      	cmp	r3, #0
 801daba:	f040 8115 	bne.w	801dce8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 801dabe:	4b8d      	ldr	r3, [pc, #564]	; (801dcf4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801dac0:	6818      	ldr	r0, [r3, #0]
 801dac2:	6803      	ldr	r3, [r0, #0]
 801dac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dac6:	4798      	blx	r3
 801dac8:	2301      	movs	r3, #1
 801daca:	fa03 f308 	lsl.w	r3, r3, r8
 801dace:	4a8a      	ldr	r2, [pc, #552]	; (801dcf8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801dad0:	3b01      	subs	r3, #1
 801dad2:	b2db      	uxtb	r3, r3
 801dad4:	8811      	ldrh	r1, [r2, #0]
 801dad6:	930e      	str	r3, [sp, #56]	; 0x38
 801dad8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801dadc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801dae0:	fb01 2303 	mla	r3, r1, r3, r2
 801dae4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dae8:	930a      	str	r3, [sp, #40]	; 0x28
 801daea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801daec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801daf0:	9313      	str	r3, [sp, #76]	; 0x4c
 801daf2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801daf4:	0a19      	lsrs	r1, r3, #8
 801daf6:	b2cb      	uxtb	r3, r1
 801daf8:	9312      	str	r3, [sp, #72]	; 0x48
 801dafa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dafc:	b2db      	uxtb	r3, r3
 801dafe:	9311      	str	r3, [sp, #68]	; 0x44
 801db00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801db02:	095a      	lsrs	r2, r3, #5
 801db04:	4b7d      	ldr	r3, [pc, #500]	; (801dcfc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801db06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801db0a:	400b      	ands	r3, r1
 801db0c:	4313      	orrs	r3, r2
 801db0e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801db10:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801db14:	4313      	orrs	r3, r2
 801db16:	b29b      	uxth	r3, r3
 801db18:	9310      	str	r3, [sp, #64]	; 0x40
 801db1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db1c:	781a      	ldrb	r2, [r3, #0]
 801db1e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801db22:	fb05 b919 	mls	r9, r5, r9, fp
 801db26:	fb03 fb05 	mul.w	fp, r3, r5
 801db2a:	4132      	asrs	r2, r6
 801db2c:	b2d2      	uxtb	r2, r2
 801db2e:	930d      	str	r3, [sp, #52]	; 0x34
 801db30:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801db34:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801db38:	f0c0 80f3 	bcc.w	801dd22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801db3c:	46ae      	mov	lr, r5
 801db3e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801db42:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801db46:	f0c0 80db 	bcc.w	801dd00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801db4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db4c:	4013      	ands	r3, r2
 801db4e:	d055      	beq.n	801dbfc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801db50:	20ff      	movs	r0, #255	; 0xff
 801db52:	990e      	ldr	r1, [sp, #56]	; 0x38
 801db54:	fb90 f1f1 	sdiv	r1, r0, r1
 801db58:	434b      	muls	r3, r1
 801db5a:	2bfe      	cmp	r3, #254	; 0xfe
 801db5c:	dd03      	ble.n	801db66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801db5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801db60:	4281      	cmp	r1, r0
 801db62:	f000 80c3 	beq.w	801dcec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801db66:	990c      	ldr	r1, [sp, #48]	; 0x30
 801db68:	f8bc 4000 	ldrh.w	r4, [ip]
 801db6c:	fb11 f303 	smulbb	r3, r1, r3
 801db70:	b29b      	uxth	r3, r3
 801db72:	1c59      	adds	r1, r3, #1
 801db74:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801db78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801db7c:	b29f      	uxth	r7, r3
 801db7e:	43db      	mvns	r3, r3
 801db80:	b2db      	uxtb	r3, r3
 801db82:	9309      	str	r3, [sp, #36]	; 0x24
 801db84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db86:	1220      	asrs	r0, r4, #8
 801db88:	fb13 f907 	smulbb	r9, r3, r7
 801db8c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801db90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db92:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801db96:	fb00 9003 	mla	r0, r0, r3, r9
 801db9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801db9c:	10e1      	asrs	r1, r4, #3
 801db9e:	fb13 f907 	smulbb	r9, r3, r7
 801dba2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801dba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dba8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801dbac:	fb01 9103 	mla	r1, r1, r3, r9
 801dbb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dbb2:	00e4      	lsls	r4, r4, #3
 801dbb4:	fb13 f707 	smulbb	r7, r3, r7
 801dbb8:	b2e4      	uxtb	r4, r4
 801dbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbbc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801dbc0:	fb04 7403 	mla	r4, r4, r3, r7
 801dbc4:	b280      	uxth	r0, r0
 801dbc6:	b2a4      	uxth	r4, r4
 801dbc8:	1c43      	adds	r3, r0, #1
 801dbca:	f104 0901 	add.w	r9, r4, #1
 801dbce:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dbd2:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801dbd6:	b289      	uxth	r1, r1
 801dbd8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801dbdc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801dbe0:	ea49 0000 	orr.w	r0, r9, r0
 801dbe4:	f101 0901 	add.w	r9, r1, #1
 801dbe8:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801dbec:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801dbf0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801dbf4:	ea40 0009 	orr.w	r0, r0, r9
 801dbf8:	f8ac 0000 	strh.w	r0, [ip]
 801dbfc:	4446      	add	r6, r8
 801dbfe:	b2b6      	uxth	r6, r6
 801dc00:	2e07      	cmp	r6, #7
 801dc02:	bf89      	itett	hi
 801dc04:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801dc06:	fa42 f208 	asrls.w	r2, r2, r8
 801dc0a:	785a      	ldrbhi	r2, [r3, #1]
 801dc0c:	3301      	addhi	r3, #1
 801dc0e:	bf88      	it	hi
 801dc10:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801dc12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc14:	bf94      	ite	ls
 801dc16:	b2d2      	uxtbls	r2, r2
 801dc18:	2600      	movhi	r6, #0
 801dc1a:	449c      	add	ip, r3
 801dc1c:	e791      	b.n	801db42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801dc1e:	441c      	add	r4, r3
 801dc20:	b224      	sxth	r4, r4
 801dc22:	e6d4      	b.n	801d9ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801dc24:	f1ba 0f01 	cmp.w	sl, #1
 801dc28:	f47f af0b 	bne.w	801da42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc2c:	f1bb 0f01 	cmp.w	fp, #1
 801dc30:	f47f af07 	bne.w	801da42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc34:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801dcf4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801dc38:	f8db 0000 	ldr.w	r0, [fp]
 801dc3c:	6803      	ldr	r3, [r0, #0]
 801dc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc40:	4798      	blx	r3
 801dc42:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801dc46:	465a      	mov	r2, fp
 801dc48:	d006      	beq.n	801dc58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801dc4a:	f1b8 0f04 	cmp.w	r8, #4
 801dc4e:	d13e      	bne.n	801dcce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801dc50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc52:	3300      	adds	r3, #0
 801dc54:	bf18      	it	ne
 801dc56:	2301      	movne	r3, #1
 801dc58:	0580      	lsls	r0, r0, #22
 801dc5a:	d56b      	bpl.n	801dd34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801dc5c:	f1b8 0f08 	cmp.w	r8, #8
 801dc60:	d168      	bne.n	801dd34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	bf0c      	ite	eq
 801dc66:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801dc6a:	f44f 7180 	movne.w	r1, #256	; 0x100
 801dc6e:	2d00      	cmp	r5, #0
 801dc70:	f47f aee7 	bne.w	801da42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc74:	2e00      	cmp	r6, #0
 801dc76:	f47f aee4 	bne.w	801da42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc7a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801dc7c:	19e3      	adds	r3, r4, r7
 801dc7e:	4283      	cmp	r3, r0
 801dc80:	f73f aedf 	bgt.w	801da42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc86:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dc88:	444b      	add	r3, r9
 801dc8a:	4283      	cmp	r3, r0
 801dc8c:	f73f aed9 	bgt.w	801da42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc90:	2500      	movs	r5, #0
 801dc92:	6810      	ldr	r0, [r2, #0]
 801dc94:	b2bf      	uxth	r7, r7
 801dc96:	6804      	ldr	r4, [r0, #0]
 801dc98:	f1b8 0f08 	cmp.w	r8, #8
 801dc9c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801dca0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dca2:	bf1c      	itt	ne
 801dca4:	3701      	addne	r7, #1
 801dca6:	f027 0701 	bicne.w	r7, r7, #1
 801dcaa:	9104      	str	r1, [sp, #16]
 801dcac:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801dcae:	bf18      	it	ne
 801dcb0:	b2bf      	uxthne	r7, r7
 801dcb2:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801dcb6:	e9cd 7900 	strd	r7, r9, [sp]
 801dcba:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801dcbe:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801dcc2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801dcc4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801dcc6:	47a0      	blx	r4
 801dcc8:	b019      	add	sp, #100	; 0x64
 801dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcce:	2300      	movs	r3, #0
 801dcd0:	e7c2      	b.n	801dc58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801dcd2:	2208      	movs	r2, #8
 801dcd4:	fb92 f3f8 	sdiv	r3, r2, r8
 801dcd8:	1e5a      	subs	r2, r3, #1
 801dcda:	443a      	add	r2, r7
 801dcdc:	fb92 f2f3 	sdiv	r2, r2, r3
 801dce0:	fb12 f203 	smulbb	r2, r2, r3
 801dce4:	b292      	uxth	r2, r2
 801dce6:	e6b1      	b.n	801da4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801dce8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801dcea:	e6ed      	b.n	801dac8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801dcec:	9810      	ldr	r0, [sp, #64]	; 0x40
 801dcee:	e783      	b.n	801dbf8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801dcf0:	2004f628 	.word	0x2004f628
 801dcf4:	2004f630 	.word	0x2004f630
 801dcf8:	2004f62a 	.word	0x2004f62a
 801dcfc:	00fff800 	.word	0x00fff800
 801dd00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd02:	b153      	cbz	r3, 801dd1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801dd04:	441e      	add	r6, r3
 801dd06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dd08:	b2b6      	uxth	r6, r6
 801dd0a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801dd0e:	781a      	ldrb	r2, [r3, #0]
 801dd10:	f006 0607 	and.w	r6, r6, #7
 801dd14:	4132      	asrs	r2, r6
 801dd16:	9328      	str	r3, [sp, #160]	; 0xa0
 801dd18:	b2d2      	uxtb	r2, r2
 801dd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd1c:	445b      	add	r3, fp
 801dd1e:	930a      	str	r3, [sp, #40]	; 0x28
 801dd20:	e708      	b.n	801db34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801dd22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d1cf      	bne.n	801dcc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801dd28:	4b05      	ldr	r3, [pc, #20]	; (801dd40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 801dd2a:	6818      	ldr	r0, [r3, #0]
 801dd2c:	6803      	ldr	r3, [r0, #0]
 801dd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd30:	4798      	blx	r3
 801dd32:	e7c9      	b.n	801dcc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	f43f ae84 	beq.w	801da42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dd3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801dd3e:	e796      	b.n	801dc6e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 801dd40:	2004f630 	.word	0x2004f630

0801dd44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801dd44:	b538      	push	{r3, r4, r5, lr}
 801dd46:	4605      	mov	r5, r0
 801dd48:	4c13      	ldr	r4, [pc, #76]	; (801dd98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 801dd4a:	e8d4 3f8f 	ldab	r3, [r4]
 801dd4e:	07da      	lsls	r2, r3, #31
 801dd50:	d40b      	bmi.n	801dd6a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801dd52:	4620      	mov	r0, r4
 801dd54:	f007 fd54 	bl	8025800 <__cxa_guard_acquire>
 801dd58:	b138      	cbz	r0, 801dd6a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801dd5a:	4620      	mov	r0, r4
 801dd5c:	f007 fd5c 	bl	8025818 <__cxa_guard_release>
 801dd60:	4a0e      	ldr	r2, [pc, #56]	; (801dd9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801dd62:	490f      	ldr	r1, [pc, #60]	; (801dda0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801dd64:	480f      	ldr	r0, [pc, #60]	; (801dda4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801dd66:	f007 fd44 	bl	80257f2 <__aeabi_atexit>
 801dd6a:	4c0f      	ldr	r4, [pc, #60]	; (801dda8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801dd6c:	e8d4 3f8f 	ldab	r3, [r4]
 801dd70:	07db      	lsls	r3, r3, #31
 801dd72:	d40b      	bmi.n	801dd8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801dd74:	4620      	mov	r0, r4
 801dd76:	f007 fd43 	bl	8025800 <__cxa_guard_acquire>
 801dd7a:	b138      	cbz	r0, 801dd8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801dd7c:	4620      	mov	r0, r4
 801dd7e:	f007 fd4b 	bl	8025818 <__cxa_guard_release>
 801dd82:	4a06      	ldr	r2, [pc, #24]	; (801dd9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801dd84:	4909      	ldr	r1, [pc, #36]	; (801ddac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801dd86:	480a      	ldr	r0, [pc, #40]	; (801ddb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801dd88:	f007 fd33 	bl	80257f2 <__aeabi_atexit>
 801dd8c:	4b05      	ldr	r3, [pc, #20]	; (801dda4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801dd8e:	612b      	str	r3, [r5, #16]
 801dd90:	4b07      	ldr	r3, [pc, #28]	; (801ddb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801dd92:	616b      	str	r3, [r5, #20]
 801dd94:	bd38      	pop	{r3, r4, r5, pc}
 801dd96:	bf00      	nop
 801dd98:	2004f704 	.word	0x2004f704
 801dd9c:	20000000 	.word	0x20000000
 801dda0:	0801bf6b 	.word	0x0801bf6b
 801dda4:	20025864 	.word	0x20025864
 801dda8:	2004f708 	.word	0x2004f708
 801ddac:	0801bf69 	.word	0x0801bf69
 801ddb0:	20025868 	.word	0x20025868

0801ddb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801ddb4:	b538      	push	{r3, r4, r5, lr}
 801ddb6:	4605      	mov	r5, r0
 801ddb8:	4c13      	ldr	r4, [pc, #76]	; (801de08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 801ddba:	e8d4 3f8f 	ldab	r3, [r4]
 801ddbe:	07da      	lsls	r2, r3, #31
 801ddc0:	d40b      	bmi.n	801ddda <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801ddc2:	4620      	mov	r0, r4
 801ddc4:	f007 fd1c 	bl	8025800 <__cxa_guard_acquire>
 801ddc8:	b138      	cbz	r0, 801ddda <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801ddca:	4620      	mov	r0, r4
 801ddcc:	f007 fd24 	bl	8025818 <__cxa_guard_release>
 801ddd0:	4a0e      	ldr	r2, [pc, #56]	; (801de0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801ddd2:	490f      	ldr	r1, [pc, #60]	; (801de10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ddd4:	480f      	ldr	r0, [pc, #60]	; (801de14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801ddd6:	f007 fd0c 	bl	80257f2 <__aeabi_atexit>
 801ddda:	4c0f      	ldr	r4, [pc, #60]	; (801de18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801dddc:	e8d4 3f8f 	ldab	r3, [r4]
 801dde0:	07db      	lsls	r3, r3, #31
 801dde2:	d40b      	bmi.n	801ddfc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801dde4:	4620      	mov	r0, r4
 801dde6:	f007 fd0b 	bl	8025800 <__cxa_guard_acquire>
 801ddea:	b138      	cbz	r0, 801ddfc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801ddec:	4620      	mov	r0, r4
 801ddee:	f007 fd13 	bl	8025818 <__cxa_guard_release>
 801ddf2:	4a06      	ldr	r2, [pc, #24]	; (801de0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801ddf4:	4909      	ldr	r1, [pc, #36]	; (801de1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801ddf6:	480a      	ldr	r0, [pc, #40]	; (801de20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801ddf8:	f007 fcfb 	bl	80257f2 <__aeabi_atexit>
 801ddfc:	4b05      	ldr	r3, [pc, #20]	; (801de14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801ddfe:	60ab      	str	r3, [r5, #8]
 801de00:	4b07      	ldr	r3, [pc, #28]	; (801de20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801de02:	60eb      	str	r3, [r5, #12]
 801de04:	bd38      	pop	{r3, r4, r5, pc}
 801de06:	bf00      	nop
 801de08:	2004f6dc 	.word	0x2004f6dc
 801de0c:	20000000 	.word	0x20000000
 801de10:	0801bf6f 	.word	0x0801bf6f
 801de14:	2002583c 	.word	0x2002583c
 801de18:	2004f6e0 	.word	0x2004f6e0
 801de1c:	0801bf6d 	.word	0x0801bf6d
 801de20:	20025840 	.word	0x20025840

0801de24 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801de24:	b510      	push	{r4, lr}
 801de26:	4604      	mov	r4, r0
 801de28:	f7ff ff8c 	bl	801dd44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801de2c:	4620      	mov	r0, r4
 801de2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de32:	f7ff bfbf 	b.w	801ddb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801de38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801de38:	b538      	push	{r3, r4, r5, lr}
 801de3a:	4605      	mov	r5, r0
 801de3c:	4c13      	ldr	r4, [pc, #76]	; (801de8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 801de3e:	e8d4 3f8f 	ldab	r3, [r4]
 801de42:	07da      	lsls	r2, r3, #31
 801de44:	d40b      	bmi.n	801de5e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801de46:	4620      	mov	r0, r4
 801de48:	f007 fcda 	bl	8025800 <__cxa_guard_acquire>
 801de4c:	b138      	cbz	r0, 801de5e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801de4e:	4620      	mov	r0, r4
 801de50:	f007 fce2 	bl	8025818 <__cxa_guard_release>
 801de54:	4a0e      	ldr	r2, [pc, #56]	; (801de90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801de56:	490f      	ldr	r1, [pc, #60]	; (801de94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801de58:	480f      	ldr	r0, [pc, #60]	; (801de98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801de5a:	f007 fcca 	bl	80257f2 <__aeabi_atexit>
 801de5e:	4c0f      	ldr	r4, [pc, #60]	; (801de9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801de60:	e8d4 3f8f 	ldab	r3, [r4]
 801de64:	07db      	lsls	r3, r3, #31
 801de66:	d40b      	bmi.n	801de80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801de68:	4620      	mov	r0, r4
 801de6a:	f007 fcc9 	bl	8025800 <__cxa_guard_acquire>
 801de6e:	b138      	cbz	r0, 801de80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801de70:	4620      	mov	r0, r4
 801de72:	f007 fcd1 	bl	8025818 <__cxa_guard_release>
 801de76:	4a06      	ldr	r2, [pc, #24]	; (801de90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801de78:	4909      	ldr	r1, [pc, #36]	; (801dea0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801de7a:	480a      	ldr	r0, [pc, #40]	; (801dea4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801de7c:	f007 fcb9 	bl	80257f2 <__aeabi_atexit>
 801de80:	4b05      	ldr	r3, [pc, #20]	; (801de98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801de82:	622b      	str	r3, [r5, #32]
 801de84:	4b07      	ldr	r3, [pc, #28]	; (801dea4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801de86:	626b      	str	r3, [r5, #36]	; 0x24
 801de88:	bd38      	pop	{r3, r4, r5, pc}
 801de8a:	bf00      	nop
 801de8c:	2004f70c 	.word	0x2004f70c
 801de90:	20000000 	.word	0x20000000
 801de94:	0801bf63 	.word	0x0801bf63
 801de98:	2002586c 	.word	0x2002586c
 801de9c:	2004f710 	.word	0x2004f710
 801dea0:	0801bf61 	.word	0x0801bf61
 801dea4:	20025870 	.word	0x20025870

0801dea8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801dea8:	b538      	push	{r3, r4, r5, lr}
 801deaa:	4605      	mov	r5, r0
 801deac:	4c13      	ldr	r4, [pc, #76]	; (801defc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 801deae:	e8d4 3f8f 	ldab	r3, [r4]
 801deb2:	07da      	lsls	r2, r3, #31
 801deb4:	d40b      	bmi.n	801dece <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801deb6:	4620      	mov	r0, r4
 801deb8:	f007 fca2 	bl	8025800 <__cxa_guard_acquire>
 801debc:	b138      	cbz	r0, 801dece <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801debe:	4620      	mov	r0, r4
 801dec0:	f007 fcaa 	bl	8025818 <__cxa_guard_release>
 801dec4:	4a0e      	ldr	r2, [pc, #56]	; (801df00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801dec6:	490f      	ldr	r1, [pc, #60]	; (801df04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801dec8:	480f      	ldr	r0, [pc, #60]	; (801df08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801deca:	f007 fc92 	bl	80257f2 <__aeabi_atexit>
 801dece:	4c0f      	ldr	r4, [pc, #60]	; (801df0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ded0:	e8d4 3f8f 	ldab	r3, [r4]
 801ded4:	07db      	lsls	r3, r3, #31
 801ded6:	d40b      	bmi.n	801def0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801ded8:	4620      	mov	r0, r4
 801deda:	f007 fc91 	bl	8025800 <__cxa_guard_acquire>
 801dede:	b138      	cbz	r0, 801def0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801dee0:	4620      	mov	r0, r4
 801dee2:	f007 fc99 	bl	8025818 <__cxa_guard_release>
 801dee6:	4a06      	ldr	r2, [pc, #24]	; (801df00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801dee8:	4909      	ldr	r1, [pc, #36]	; (801df10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801deea:	480a      	ldr	r0, [pc, #40]	; (801df14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801deec:	f007 fc81 	bl	80257f2 <__aeabi_atexit>
 801def0:	4b05      	ldr	r3, [pc, #20]	; (801df08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801def2:	61ab      	str	r3, [r5, #24]
 801def4:	4b07      	ldr	r3, [pc, #28]	; (801df14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801def6:	61eb      	str	r3, [r5, #28]
 801def8:	bd38      	pop	{r3, r4, r5, pc}
 801defa:	bf00      	nop
 801defc:	2004f6e4 	.word	0x2004f6e4
 801df00:	20000000 	.word	0x20000000
 801df04:	0801bf67 	.word	0x0801bf67
 801df08:	20025844 	.word	0x20025844
 801df0c:	2004f6e8 	.word	0x2004f6e8
 801df10:	0801bf65 	.word	0x0801bf65
 801df14:	20025848 	.word	0x20025848

0801df18 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801df18:	b510      	push	{r4, lr}
 801df1a:	4604      	mov	r4, r0
 801df1c:	f7ff ff8c 	bl	801de38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801df20:	4620      	mov	r0, r4
 801df22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df26:	f7ff bfbf 	b.w	801dea8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801df2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801df2c:	b538      	push	{r3, r4, r5, lr}
 801df2e:	4605      	mov	r5, r0
 801df30:	4c13      	ldr	r4, [pc, #76]	; (801df80 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 801df32:	e8d4 3f8f 	ldab	r3, [r4]
 801df36:	07da      	lsls	r2, r3, #31
 801df38:	d40b      	bmi.n	801df52 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801df3a:	4620      	mov	r0, r4
 801df3c:	f007 fc60 	bl	8025800 <__cxa_guard_acquire>
 801df40:	b138      	cbz	r0, 801df52 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801df42:	4620      	mov	r0, r4
 801df44:	f007 fc68 	bl	8025818 <__cxa_guard_release>
 801df48:	4a0e      	ldr	r2, [pc, #56]	; (801df84 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801df4a:	490f      	ldr	r1, [pc, #60]	; (801df88 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801df4c:	480f      	ldr	r0, [pc, #60]	; (801df8c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801df4e:	f007 fc50 	bl	80257f2 <__aeabi_atexit>
 801df52:	4c0f      	ldr	r4, [pc, #60]	; (801df90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801df54:	e8d4 3f8f 	ldab	r3, [r4]
 801df58:	07db      	lsls	r3, r3, #31
 801df5a:	d40b      	bmi.n	801df74 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801df5c:	4620      	mov	r0, r4
 801df5e:	f007 fc4f 	bl	8025800 <__cxa_guard_acquire>
 801df62:	b138      	cbz	r0, 801df74 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801df64:	4620      	mov	r0, r4
 801df66:	f007 fc57 	bl	8025818 <__cxa_guard_release>
 801df6a:	4a06      	ldr	r2, [pc, #24]	; (801df84 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801df6c:	4909      	ldr	r1, [pc, #36]	; (801df94 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801df6e:	480a      	ldr	r0, [pc, #40]	; (801df98 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801df70:	f007 fc3f 	bl	80257f2 <__aeabi_atexit>
 801df74:	4b05      	ldr	r3, [pc, #20]	; (801df8c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801df76:	632b      	str	r3, [r5, #48]	; 0x30
 801df78:	4b07      	ldr	r3, [pc, #28]	; (801df98 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801df7a:	636b      	str	r3, [r5, #52]	; 0x34
 801df7c:	bd38      	pop	{r3, r4, r5, pc}
 801df7e:	bf00      	nop
 801df80:	2004f71c 	.word	0x2004f71c
 801df84:	20000000 	.word	0x20000000
 801df88:	0801bf5b 	.word	0x0801bf5b
 801df8c:	2002587c 	.word	0x2002587c
 801df90:	2004f720 	.word	0x2004f720
 801df94:	0801bf59 	.word	0x0801bf59
 801df98:	20025880 	.word	0x20025880

0801df9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801df9c:	b538      	push	{r3, r4, r5, lr}
 801df9e:	4605      	mov	r5, r0
 801dfa0:	4c13      	ldr	r4, [pc, #76]	; (801dff0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 801dfa2:	e8d4 3f8f 	ldab	r3, [r4]
 801dfa6:	07da      	lsls	r2, r3, #31
 801dfa8:	d40b      	bmi.n	801dfc2 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801dfaa:	4620      	mov	r0, r4
 801dfac:	f007 fc28 	bl	8025800 <__cxa_guard_acquire>
 801dfb0:	b138      	cbz	r0, 801dfc2 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	f007 fc30 	bl	8025818 <__cxa_guard_release>
 801dfb8:	4a0e      	ldr	r2, [pc, #56]	; (801dff4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801dfba:	490f      	ldr	r1, [pc, #60]	; (801dff8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801dfbc:	480f      	ldr	r0, [pc, #60]	; (801dffc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801dfbe:	f007 fc18 	bl	80257f2 <__aeabi_atexit>
 801dfc2:	4c0f      	ldr	r4, [pc, #60]	; (801e000 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801dfc4:	e8d4 3f8f 	ldab	r3, [r4]
 801dfc8:	07db      	lsls	r3, r3, #31
 801dfca:	d40b      	bmi.n	801dfe4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801dfcc:	4620      	mov	r0, r4
 801dfce:	f007 fc17 	bl	8025800 <__cxa_guard_acquire>
 801dfd2:	b138      	cbz	r0, 801dfe4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801dfd4:	4620      	mov	r0, r4
 801dfd6:	f007 fc1f 	bl	8025818 <__cxa_guard_release>
 801dfda:	4a06      	ldr	r2, [pc, #24]	; (801dff4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801dfdc:	4909      	ldr	r1, [pc, #36]	; (801e004 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801dfde:	480a      	ldr	r0, [pc, #40]	; (801e008 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801dfe0:	f007 fc07 	bl	80257f2 <__aeabi_atexit>
 801dfe4:	4b05      	ldr	r3, [pc, #20]	; (801dffc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801dfe6:	62ab      	str	r3, [r5, #40]	; 0x28
 801dfe8:	4b07      	ldr	r3, [pc, #28]	; (801e008 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801dfea:	62eb      	str	r3, [r5, #44]	; 0x2c
 801dfec:	bd38      	pop	{r3, r4, r5, pc}
 801dfee:	bf00      	nop
 801dff0:	2004f6ec 	.word	0x2004f6ec
 801dff4:	20000000 	.word	0x20000000
 801dff8:	0801bf5f 	.word	0x0801bf5f
 801dffc:	2002584c 	.word	0x2002584c
 801e000:	2004f6f0 	.word	0x2004f6f0
 801e004:	0801bf5d 	.word	0x0801bf5d
 801e008:	20025850 	.word	0x20025850

0801e00c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e00c:	b510      	push	{r4, lr}
 801e00e:	4604      	mov	r4, r0
 801e010:	f7ff ff8c 	bl	801df2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e014:	4620      	mov	r0, r4
 801e016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e01a:	f7ff bfbf 	b.w	801df9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e020 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e020:	b538      	push	{r3, r4, r5, lr}
 801e022:	4605      	mov	r5, r0
 801e024:	4c13      	ldr	r4, [pc, #76]	; (801e074 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 801e026:	e8d4 3f8f 	ldab	r3, [r4]
 801e02a:	07da      	lsls	r2, r3, #31
 801e02c:	d40b      	bmi.n	801e046 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801e02e:	4620      	mov	r0, r4
 801e030:	f007 fbe6 	bl	8025800 <__cxa_guard_acquire>
 801e034:	b138      	cbz	r0, 801e046 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801e036:	4620      	mov	r0, r4
 801e038:	f007 fbee 	bl	8025818 <__cxa_guard_release>
 801e03c:	4a0e      	ldr	r2, [pc, #56]	; (801e078 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e03e:	490f      	ldr	r1, [pc, #60]	; (801e07c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e040:	480f      	ldr	r0, [pc, #60]	; (801e080 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e042:	f007 fbd6 	bl	80257f2 <__aeabi_atexit>
 801e046:	4c0f      	ldr	r4, [pc, #60]	; (801e084 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e048:	e8d4 3f8f 	ldab	r3, [r4]
 801e04c:	07db      	lsls	r3, r3, #31
 801e04e:	d40b      	bmi.n	801e068 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801e050:	4620      	mov	r0, r4
 801e052:	f007 fbd5 	bl	8025800 <__cxa_guard_acquire>
 801e056:	b138      	cbz	r0, 801e068 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801e058:	4620      	mov	r0, r4
 801e05a:	f007 fbdd 	bl	8025818 <__cxa_guard_release>
 801e05e:	4a06      	ldr	r2, [pc, #24]	; (801e078 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e060:	4909      	ldr	r1, [pc, #36]	; (801e088 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e062:	480a      	ldr	r0, [pc, #40]	; (801e08c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e064:	f007 fbc5 	bl	80257f2 <__aeabi_atexit>
 801e068:	4b05      	ldr	r3, [pc, #20]	; (801e080 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e06a:	652b      	str	r3, [r5, #80]	; 0x50
 801e06c:	4b07      	ldr	r3, [pc, #28]	; (801e08c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e06e:	656b      	str	r3, [r5, #84]	; 0x54
 801e070:	bd38      	pop	{r3, r4, r5, pc}
 801e072:	bf00      	nop
 801e074:	2004f724 	.word	0x2004f724
 801e078:	20000000 	.word	0x20000000
 801e07c:	0801bf4b 	.word	0x0801bf4b
 801e080:	20025884 	.word	0x20025884
 801e084:	2004f728 	.word	0x2004f728
 801e088:	0801bf49 	.word	0x0801bf49
 801e08c:	20025888 	.word	0x20025888

0801e090 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e090:	b538      	push	{r3, r4, r5, lr}
 801e092:	4605      	mov	r5, r0
 801e094:	4c13      	ldr	r4, [pc, #76]	; (801e0e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 801e096:	e8d4 3f8f 	ldab	r3, [r4]
 801e09a:	07da      	lsls	r2, r3, #31
 801e09c:	d40b      	bmi.n	801e0b6 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801e09e:	4620      	mov	r0, r4
 801e0a0:	f007 fbae 	bl	8025800 <__cxa_guard_acquire>
 801e0a4:	b138      	cbz	r0, 801e0b6 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801e0a6:	4620      	mov	r0, r4
 801e0a8:	f007 fbb6 	bl	8025818 <__cxa_guard_release>
 801e0ac:	4a0e      	ldr	r2, [pc, #56]	; (801e0e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e0ae:	490f      	ldr	r1, [pc, #60]	; (801e0ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e0b0:	480f      	ldr	r0, [pc, #60]	; (801e0f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e0b2:	f007 fb9e 	bl	80257f2 <__aeabi_atexit>
 801e0b6:	4c0f      	ldr	r4, [pc, #60]	; (801e0f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e0b8:	e8d4 3f8f 	ldab	r3, [r4]
 801e0bc:	07db      	lsls	r3, r3, #31
 801e0be:	d40b      	bmi.n	801e0d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	f007 fb9d 	bl	8025800 <__cxa_guard_acquire>
 801e0c6:	b138      	cbz	r0, 801e0d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f007 fba5 	bl	8025818 <__cxa_guard_release>
 801e0ce:	4a06      	ldr	r2, [pc, #24]	; (801e0e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e0d0:	4909      	ldr	r1, [pc, #36]	; (801e0f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e0d2:	480a      	ldr	r0, [pc, #40]	; (801e0fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e0d4:	f007 fb8d 	bl	80257f2 <__aeabi_atexit>
 801e0d8:	4b05      	ldr	r3, [pc, #20]	; (801e0f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e0da:	64ab      	str	r3, [r5, #72]	; 0x48
 801e0dc:	4b07      	ldr	r3, [pc, #28]	; (801e0fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e0de:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e0e0:	bd38      	pop	{r3, r4, r5, pc}
 801e0e2:	bf00      	nop
 801e0e4:	2004f72c 	.word	0x2004f72c
 801e0e8:	20000000 	.word	0x20000000
 801e0ec:	0801bf4f 	.word	0x0801bf4f
 801e0f0:	2002588c 	.word	0x2002588c
 801e0f4:	2004f730 	.word	0x2004f730
 801e0f8:	0801bf4d 	.word	0x0801bf4d
 801e0fc:	20025890 	.word	0x20025890

0801e100 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801e100:	b538      	push	{r3, r4, r5, lr}
 801e102:	4605      	mov	r5, r0
 801e104:	4c13      	ldr	r4, [pc, #76]	; (801e154 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 801e106:	e8d4 3f8f 	ldab	r3, [r4]
 801e10a:	07da      	lsls	r2, r3, #31
 801e10c:	d40b      	bmi.n	801e126 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801e10e:	4620      	mov	r0, r4
 801e110:	f007 fb76 	bl	8025800 <__cxa_guard_acquire>
 801e114:	b138      	cbz	r0, 801e126 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801e116:	4620      	mov	r0, r4
 801e118:	f007 fb7e 	bl	8025818 <__cxa_guard_release>
 801e11c:	4a0e      	ldr	r2, [pc, #56]	; (801e158 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e11e:	490f      	ldr	r1, [pc, #60]	; (801e15c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e120:	480f      	ldr	r0, [pc, #60]	; (801e160 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e122:	f007 fb66 	bl	80257f2 <__aeabi_atexit>
 801e126:	4c0f      	ldr	r4, [pc, #60]	; (801e164 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e128:	e8d4 3f8f 	ldab	r3, [r4]
 801e12c:	07db      	lsls	r3, r3, #31
 801e12e:	d40b      	bmi.n	801e148 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801e130:	4620      	mov	r0, r4
 801e132:	f007 fb65 	bl	8025800 <__cxa_guard_acquire>
 801e136:	b138      	cbz	r0, 801e148 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801e138:	4620      	mov	r0, r4
 801e13a:	f007 fb6d 	bl	8025818 <__cxa_guard_release>
 801e13e:	4a06      	ldr	r2, [pc, #24]	; (801e158 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e140:	4909      	ldr	r1, [pc, #36]	; (801e168 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801e142:	480a      	ldr	r0, [pc, #40]	; (801e16c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e144:	f007 fb55 	bl	80257f2 <__aeabi_atexit>
 801e148:	4b05      	ldr	r3, [pc, #20]	; (801e160 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e14a:	642b      	str	r3, [r5, #64]	; 0x40
 801e14c:	4b07      	ldr	r3, [pc, #28]	; (801e16c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e14e:	646b      	str	r3, [r5, #68]	; 0x44
 801e150:	bd38      	pop	{r3, r4, r5, pc}
 801e152:	bf00      	nop
 801e154:	2004f6f4 	.word	0x2004f6f4
 801e158:	20000000 	.word	0x20000000
 801e15c:	0801bf53 	.word	0x0801bf53
 801e160:	20025854 	.word	0x20025854
 801e164:	2004f6f8 	.word	0x2004f6f8
 801e168:	0801bf51 	.word	0x0801bf51
 801e16c:	20025858 	.word	0x20025858

0801e170 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801e170:	b538      	push	{r3, r4, r5, lr}
 801e172:	4605      	mov	r5, r0
 801e174:	4c13      	ldr	r4, [pc, #76]	; (801e1c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 801e176:	e8d4 3f8f 	ldab	r3, [r4]
 801e17a:	07da      	lsls	r2, r3, #31
 801e17c:	d40b      	bmi.n	801e196 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801e17e:	4620      	mov	r0, r4
 801e180:	f007 fb3e 	bl	8025800 <__cxa_guard_acquire>
 801e184:	b138      	cbz	r0, 801e196 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801e186:	4620      	mov	r0, r4
 801e188:	f007 fb46 	bl	8025818 <__cxa_guard_release>
 801e18c:	4a0e      	ldr	r2, [pc, #56]	; (801e1c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e18e:	490f      	ldr	r1, [pc, #60]	; (801e1cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e190:	480f      	ldr	r0, [pc, #60]	; (801e1d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e192:	f007 fb2e 	bl	80257f2 <__aeabi_atexit>
 801e196:	4c0f      	ldr	r4, [pc, #60]	; (801e1d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e198:	e8d4 3f8f 	ldab	r3, [r4]
 801e19c:	07db      	lsls	r3, r3, #31
 801e19e:	d40b      	bmi.n	801e1b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801e1a0:	4620      	mov	r0, r4
 801e1a2:	f007 fb2d 	bl	8025800 <__cxa_guard_acquire>
 801e1a6:	b138      	cbz	r0, 801e1b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	f007 fb35 	bl	8025818 <__cxa_guard_release>
 801e1ae:	4a06      	ldr	r2, [pc, #24]	; (801e1c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e1b0:	4909      	ldr	r1, [pc, #36]	; (801e1d8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801e1b2:	480a      	ldr	r0, [pc, #40]	; (801e1dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e1b4:	f007 fb1d 	bl	80257f2 <__aeabi_atexit>
 801e1b8:	4b05      	ldr	r3, [pc, #20]	; (801e1d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e1ba:	63ab      	str	r3, [r5, #56]	; 0x38
 801e1bc:	4b07      	ldr	r3, [pc, #28]	; (801e1dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e1be:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e1c0:	bd38      	pop	{r3, r4, r5, pc}
 801e1c2:	bf00      	nop
 801e1c4:	2004f714 	.word	0x2004f714
 801e1c8:	20000000 	.word	0x20000000
 801e1cc:	0801bf57 	.word	0x0801bf57
 801e1d0:	20025874 	.word	0x20025874
 801e1d4:	2004f718 	.word	0x2004f718
 801e1d8:	0801bf55 	.word	0x0801bf55
 801e1dc:	20025878 	.word	0x20025878

0801e1e0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801e1e0:	b510      	push	{r4, lr}
 801e1e2:	4604      	mov	r4, r0
 801e1e4:	f7ff ff1c 	bl	801e020 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801e1e8:	4620      	mov	r0, r4
 801e1ea:	f7ff ff89 	bl	801e100 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801e1ee:	4620      	mov	r0, r4
 801e1f0:	f7ff ff4e 	bl	801e090 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801e1f4:	4620      	mov	r0, r4
 801e1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1fa:	f7ff bfb9 	b.w	801e170 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801e200 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e200:	b538      	push	{r3, r4, r5, lr}
 801e202:	4605      	mov	r5, r0
 801e204:	4c13      	ldr	r4, [pc, #76]	; (801e254 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 801e206:	e8d4 3f8f 	ldab	r3, [r4]
 801e20a:	07da      	lsls	r2, r3, #31
 801e20c:	d40b      	bmi.n	801e226 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801e20e:	4620      	mov	r0, r4
 801e210:	f007 faf6 	bl	8025800 <__cxa_guard_acquire>
 801e214:	b138      	cbz	r0, 801e226 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801e216:	4620      	mov	r0, r4
 801e218:	f007 fafe 	bl	8025818 <__cxa_guard_release>
 801e21c:	4a0e      	ldr	r2, [pc, #56]	; (801e258 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e21e:	490f      	ldr	r1, [pc, #60]	; (801e25c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e220:	480f      	ldr	r0, [pc, #60]	; (801e260 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e222:	f007 fae6 	bl	80257f2 <__aeabi_atexit>
 801e226:	4c0f      	ldr	r4, [pc, #60]	; (801e264 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e228:	e8d4 3f8f 	ldab	r3, [r4]
 801e22c:	07db      	lsls	r3, r3, #31
 801e22e:	d40b      	bmi.n	801e248 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801e230:	4620      	mov	r0, r4
 801e232:	f007 fae5 	bl	8025800 <__cxa_guard_acquire>
 801e236:	b138      	cbz	r0, 801e248 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801e238:	4620      	mov	r0, r4
 801e23a:	f007 faed 	bl	8025818 <__cxa_guard_release>
 801e23e:	4a06      	ldr	r2, [pc, #24]	; (801e258 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e240:	4909      	ldr	r1, [pc, #36]	; (801e268 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e242:	480a      	ldr	r0, [pc, #40]	; (801e26c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e244:	f007 fad5 	bl	80257f2 <__aeabi_atexit>
 801e248:	4b05      	ldr	r3, [pc, #20]	; (801e260 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e24a:	662b      	str	r3, [r5, #96]	; 0x60
 801e24c:	4b07      	ldr	r3, [pc, #28]	; (801e26c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e24e:	666b      	str	r3, [r5, #100]	; 0x64
 801e250:	bd38      	pop	{r3, r4, r5, pc}
 801e252:	bf00      	nop
 801e254:	2004f6fc 	.word	0x2004f6fc
 801e258:	20000000 	.word	0x20000000
 801e25c:	0801bf43 	.word	0x0801bf43
 801e260:	2002585c 	.word	0x2002585c
 801e264:	2004f700 	.word	0x2004f700
 801e268:	0801bf41 	.word	0x0801bf41
 801e26c:	20025860 	.word	0x20025860

0801e270 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e270:	b538      	push	{r3, r4, r5, lr}
 801e272:	4605      	mov	r5, r0
 801e274:	4c13      	ldr	r4, [pc, #76]	; (801e2c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801e276:	e8d4 3f8f 	ldab	r3, [r4]
 801e27a:	07da      	lsls	r2, r3, #31
 801e27c:	d40b      	bmi.n	801e296 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801e27e:	4620      	mov	r0, r4
 801e280:	f007 fabe 	bl	8025800 <__cxa_guard_acquire>
 801e284:	b138      	cbz	r0, 801e296 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801e286:	4620      	mov	r0, r4
 801e288:	f007 fac6 	bl	8025818 <__cxa_guard_release>
 801e28c:	4a0e      	ldr	r2, [pc, #56]	; (801e2c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e28e:	490f      	ldr	r1, [pc, #60]	; (801e2cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e290:	480f      	ldr	r0, [pc, #60]	; (801e2d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e292:	f007 faae 	bl	80257f2 <__aeabi_atexit>
 801e296:	4c0f      	ldr	r4, [pc, #60]	; (801e2d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e298:	e8d4 3f8f 	ldab	r3, [r4]
 801e29c:	07db      	lsls	r3, r3, #31
 801e29e:	d40b      	bmi.n	801e2b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801e2a0:	4620      	mov	r0, r4
 801e2a2:	f007 faad 	bl	8025800 <__cxa_guard_acquire>
 801e2a6:	b138      	cbz	r0, 801e2b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801e2a8:	4620      	mov	r0, r4
 801e2aa:	f007 fab5 	bl	8025818 <__cxa_guard_release>
 801e2ae:	4a06      	ldr	r2, [pc, #24]	; (801e2c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e2b0:	4909      	ldr	r1, [pc, #36]	; (801e2d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e2b2:	480a      	ldr	r0, [pc, #40]	; (801e2dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e2b4:	f007 fa9d 	bl	80257f2 <__aeabi_atexit>
 801e2b8:	4b05      	ldr	r3, [pc, #20]	; (801e2d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e2ba:	65ab      	str	r3, [r5, #88]	; 0x58
 801e2bc:	4b07      	ldr	r3, [pc, #28]	; (801e2dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e2be:	65eb      	str	r3, [r5, #92]	; 0x5c
 801e2c0:	bd38      	pop	{r3, r4, r5, pc}
 801e2c2:	bf00      	nop
 801e2c4:	2004f6d4 	.word	0x2004f6d4
 801e2c8:	20000000 	.word	0x20000000
 801e2cc:	0801bf47 	.word	0x0801bf47
 801e2d0:	20025834 	.word	0x20025834
 801e2d4:	2004f6d8 	.word	0x2004f6d8
 801e2d8:	0801bf45 	.word	0x0801bf45
 801e2dc:	20025838 	.word	0x20025838

0801e2e0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801e2e0:	b510      	push	{r4, lr}
 801e2e2:	4604      	mov	r4, r0
 801e2e4:	f7ff ff8c 	bl	801e200 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e2e8:	4620      	mov	r0, r4
 801e2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2ee:	f7ff bfbf 	b.w	801e270 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e2f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e2f4:	b538      	push	{r3, r4, r5, lr}
 801e2f6:	4605      	mov	r5, r0
 801e2f8:	4c13      	ldr	r4, [pc, #76]	; (801e348 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801e2fa:	e8d4 3f8f 	ldab	r3, [r4]
 801e2fe:	07da      	lsls	r2, r3, #31
 801e300:	d40b      	bmi.n	801e31a <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801e302:	4620      	mov	r0, r4
 801e304:	f007 fa7c 	bl	8025800 <__cxa_guard_acquire>
 801e308:	b138      	cbz	r0, 801e31a <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801e30a:	4620      	mov	r0, r4
 801e30c:	f007 fa84 	bl	8025818 <__cxa_guard_release>
 801e310:	4a0e      	ldr	r2, [pc, #56]	; (801e34c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e312:	490f      	ldr	r1, [pc, #60]	; (801e350 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e314:	480f      	ldr	r0, [pc, #60]	; (801e354 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e316:	f007 fa6c 	bl	80257f2 <__aeabi_atexit>
 801e31a:	4c0f      	ldr	r4, [pc, #60]	; (801e358 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e31c:	e8d4 3f8f 	ldab	r3, [r4]
 801e320:	07db      	lsls	r3, r3, #31
 801e322:	d40b      	bmi.n	801e33c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801e324:	4620      	mov	r0, r4
 801e326:	f007 fa6b 	bl	8025800 <__cxa_guard_acquire>
 801e32a:	b138      	cbz	r0, 801e33c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801e32c:	4620      	mov	r0, r4
 801e32e:	f007 fa73 	bl	8025818 <__cxa_guard_release>
 801e332:	4a06      	ldr	r2, [pc, #24]	; (801e34c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e334:	4909      	ldr	r1, [pc, #36]	; (801e35c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e336:	480a      	ldr	r0, [pc, #40]	; (801e360 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e338:	f007 fa5b 	bl	80257f2 <__aeabi_atexit>
 801e33c:	4b05      	ldr	r3, [pc, #20]	; (801e354 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e33e:	672b      	str	r3, [r5, #112]	; 0x70
 801e340:	4b07      	ldr	r3, [pc, #28]	; (801e360 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e342:	676b      	str	r3, [r5, #116]	; 0x74
 801e344:	bd38      	pop	{r3, r4, r5, pc}
 801e346:	bf00      	nop
 801e348:	2004f6cc 	.word	0x2004f6cc
 801e34c:	20000000 	.word	0x20000000
 801e350:	0801bf3b 	.word	0x0801bf3b
 801e354:	2002582c 	.word	0x2002582c
 801e358:	2004f6d0 	.word	0x2004f6d0
 801e35c:	0801bf39 	.word	0x0801bf39
 801e360:	20025830 	.word	0x20025830

0801e364 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e364:	b538      	push	{r3, r4, r5, lr}
 801e366:	4605      	mov	r5, r0
 801e368:	4c13      	ldr	r4, [pc, #76]	; (801e3b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801e36a:	e8d4 3f8f 	ldab	r3, [r4]
 801e36e:	07da      	lsls	r2, r3, #31
 801e370:	d40b      	bmi.n	801e38a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801e372:	4620      	mov	r0, r4
 801e374:	f007 fa44 	bl	8025800 <__cxa_guard_acquire>
 801e378:	b138      	cbz	r0, 801e38a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801e37a:	4620      	mov	r0, r4
 801e37c:	f007 fa4c 	bl	8025818 <__cxa_guard_release>
 801e380:	4a0e      	ldr	r2, [pc, #56]	; (801e3bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e382:	490f      	ldr	r1, [pc, #60]	; (801e3c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e384:	480f      	ldr	r0, [pc, #60]	; (801e3c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e386:	f007 fa34 	bl	80257f2 <__aeabi_atexit>
 801e38a:	4c0f      	ldr	r4, [pc, #60]	; (801e3c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e38c:	e8d4 3f8f 	ldab	r3, [r4]
 801e390:	07db      	lsls	r3, r3, #31
 801e392:	d40b      	bmi.n	801e3ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801e394:	4620      	mov	r0, r4
 801e396:	f007 fa33 	bl	8025800 <__cxa_guard_acquire>
 801e39a:	b138      	cbz	r0, 801e3ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801e39c:	4620      	mov	r0, r4
 801e39e:	f007 fa3b 	bl	8025818 <__cxa_guard_release>
 801e3a2:	4a06      	ldr	r2, [pc, #24]	; (801e3bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e3a4:	4909      	ldr	r1, [pc, #36]	; (801e3cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e3a6:	480a      	ldr	r0, [pc, #40]	; (801e3d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e3a8:	f007 fa23 	bl	80257f2 <__aeabi_atexit>
 801e3ac:	4b05      	ldr	r3, [pc, #20]	; (801e3c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e3ae:	66ab      	str	r3, [r5, #104]	; 0x68
 801e3b0:	4b07      	ldr	r3, [pc, #28]	; (801e3d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e3b2:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e3b4:	bd38      	pop	{r3, r4, r5, pc}
 801e3b6:	bf00      	nop
 801e3b8:	2004f6c4 	.word	0x2004f6c4
 801e3bc:	20000000 	.word	0x20000000
 801e3c0:	0801bf3f 	.word	0x0801bf3f
 801e3c4:	20025824 	.word	0x20025824
 801e3c8:	2004f6c8 	.word	0x2004f6c8
 801e3cc:	0801bf3d 	.word	0x0801bf3d
 801e3d0:	20025828 	.word	0x20025828

0801e3d4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801e3d4:	b510      	push	{r4, lr}
 801e3d6:	4604      	mov	r4, r0
 801e3d8:	f7ff ff8c 	bl	801e2f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e3dc:	4620      	mov	r0, r4
 801e3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3e2:	f7ff bfbf 	b.w	801e364 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801e3e6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801e3e6:	b510      	push	{r4, lr}
 801e3e8:	4604      	mov	r4, r0
 801e3ea:	f7ff fff3 	bl	801e3d4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801e3ee:	4620      	mov	r0, r4
 801e3f0:	f7ff ff76 	bl	801e2e0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801e3f4:	4620      	mov	r0, r4
 801e3f6:	f7ff fe09 	bl	801e00c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801e3fa:	4620      	mov	r0, r4
 801e3fc:	f7ff fd12 	bl	801de24 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801e400:	4620      	mov	r0, r4
 801e402:	f7ff fd89 	bl	801df18 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801e406:	4620      	mov	r0, r4
 801e408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e40c:	f7ff bee8 	b.w	801e1e0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801e410 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e414:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801e418:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801e41c:	fb05 4c0e 	mla	ip, r5, lr, r4
 801e420:	2d00      	cmp	r5, #0
 801e422:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801e426:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801e42a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801e42e:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801e432:	eb02 0a0c 	add.w	sl, r2, ip
 801e436:	8808      	ldrh	r0, [r1, #0]
 801e438:	f2c0 80b0 	blt.w	801e59c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e43c:	45ab      	cmp	fp, r5
 801e43e:	f340 80ad 	ble.w	801e59c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e442:	2c00      	cmp	r4, #0
 801e444:	f2c0 80a8 	blt.w	801e598 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e448:	45a6      	cmp	lr, r4
 801e44a:	f340 80a5 	ble.w	801e598 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e44e:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e452:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801e456:	1c62      	adds	r2, r4, #1
 801e458:	f100 80a3 	bmi.w	801e5a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e45c:	4596      	cmp	lr, r2
 801e45e:	f340 80a0 	ble.w	801e5a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e462:	f1b9 0f00 	cmp.w	r9, #0
 801e466:	f000 809c 	beq.w	801e5a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e46a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e46e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801e472:	3501      	adds	r5, #1
 801e474:	f100 8099 	bmi.w	801e5aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e478:	45ab      	cmp	fp, r5
 801e47a:	f340 8096 	ble.w	801e5aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e47e:	2f00      	cmp	r7, #0
 801e480:	f000 8093 	beq.w	801e5aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e484:	2c00      	cmp	r4, #0
 801e486:	f2c0 808e 	blt.w	801e5a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e48a:	45a6      	cmp	lr, r4
 801e48c:	f340 808b 	ble.w	801e5a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e490:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801e494:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801e498:	3401      	adds	r4, #1
 801e49a:	f100 8089 	bmi.w	801e5b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e49e:	45a6      	cmp	lr, r4
 801e4a0:	f340 8086 	ble.w	801e5b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e4a4:	f1b9 0f00 	cmp.w	r9, #0
 801e4a8:	f000 8082 	beq.w	801e5b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e4ac:	44d6      	add	lr, sl
 801e4ae:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e4b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e4b6:	fb19 fe07 	smulbb	lr, r9, r7
 801e4ba:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801e4be:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e4c2:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801e4c6:	ea44 0808 	orr.w	r8, r4, r8
 801e4ca:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801e4ce:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801e4d2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e4d6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e4da:	ea44 0c0c 	orr.w	ip, r4, ip
 801e4de:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801e4e2:	fb04 f40c 	mul.w	r4, r4, ip
 801e4e6:	f1c7 0210 	rsb	r2, r7, #16
 801e4ea:	eba2 0209 	sub.w	r2, r2, r9
 801e4ee:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801e4f2:	fb02 4808 	mla	r8, r2, r8, r4
 801e4f6:	b2b4      	uxth	r4, r6
 801e4f8:	43f6      	mvns	r6, r6
 801e4fa:	041a      	lsls	r2, r3, #16
 801e4fc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e500:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e504:	4313      	orrs	r3, r2
 801e506:	fb0e 8303 	mla	r3, lr, r3, r8
 801e50a:	042a      	lsls	r2, r5, #16
 801e50c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e510:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e514:	432a      	orrs	r2, r5
 801e516:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801e51a:	fb07 3202 	mla	r2, r7, r2, r3
 801e51e:	0d53      	lsrs	r3, r2, #21
 801e520:	0952      	lsrs	r2, r2, #5
 801e522:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e526:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e52a:	431a      	orrs	r2, r3
 801e52c:	b293      	uxth	r3, r2
 801e52e:	1202      	asrs	r2, r0, #8
 801e530:	b2f6      	uxtb	r6, r6
 801e532:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e536:	fb12 f206 	smulbb	r2, r2, r6
 801e53a:	10c7      	asrs	r7, r0, #3
 801e53c:	00c0      	lsls	r0, r0, #3
 801e53e:	b2c0      	uxtb	r0, r0
 801e540:	121d      	asrs	r5, r3, #8
 801e542:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e546:	fb10 f006 	smulbb	r0, r0, r6
 801e54a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e54e:	fb17 f706 	smulbb	r7, r7, r6
 801e552:	fb05 2504 	mla	r5, r5, r4, r2
 801e556:	10da      	asrs	r2, r3, #3
 801e558:	00db      	lsls	r3, r3, #3
 801e55a:	b2db      	uxtb	r3, r3
 801e55c:	fb03 0004 	mla	r0, r3, r4, r0
 801e560:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e564:	fb02 7204 	mla	r2, r2, r4, r7
 801e568:	b2ad      	uxth	r5, r5
 801e56a:	b280      	uxth	r0, r0
 801e56c:	1c6b      	adds	r3, r5, #1
 801e56e:	b292      	uxth	r2, r2
 801e570:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e574:	1c43      	adds	r3, r0, #1
 801e576:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e57a:	1c50      	adds	r0, r2, #1
 801e57c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e580:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e584:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e588:	0952      	lsrs	r2, r2, #5
 801e58a:	432b      	orrs	r3, r5
 801e58c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e590:	4313      	orrs	r3, r2
 801e592:	800b      	strh	r3, [r1, #0]
 801e594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e598:	4680      	mov	r8, r0
 801e59a:	e75c      	b.n	801e456 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801e59c:	4684      	mov	ip, r0
 801e59e:	4680      	mov	r8, r0
 801e5a0:	e767      	b.n	801e472 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e5a2:	4684      	mov	ip, r0
 801e5a4:	e765      	b.n	801e472 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e5a6:	4605      	mov	r5, r0
 801e5a8:	e776      	b.n	801e498 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801e5aa:	4603      	mov	r3, r0
 801e5ac:	4605      	mov	r5, r0
 801e5ae:	e782      	b.n	801e4b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801e5b0:	4603      	mov	r3, r0
 801e5b2:	e780      	b.n	801e4b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801e5b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b8:	b099      	sub	sp, #100	; 0x64
 801e5ba:	9215      	str	r2, [sp, #84]	; 0x54
 801e5bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e5be:	9016      	str	r0, [sp, #88]	; 0x58
 801e5c0:	9309      	str	r3, [sp, #36]	; 0x24
 801e5c2:	6850      	ldr	r0, [r2, #4]
 801e5c4:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801e5c8:	910c      	str	r1, [sp, #48]	; 0x30
 801e5ca:	930d      	str	r3, [sp, #52]	; 0x34
 801e5cc:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801e5d0:	fb00 1303 	mla	r3, r0, r3, r1
 801e5d4:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801e5d8:	6812      	ldr	r2, [r2, #0]
 801e5da:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801e5de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e5e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e5e6:	685e      	ldr	r6, [r3, #4]
 801e5e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5ea:	3604      	adds	r6, #4
 801e5ec:	43db      	mvns	r3, r3
 801e5ee:	b2db      	uxtb	r3, r3
 801e5f0:	930a      	str	r3, [sp, #40]	; 0x28
 801e5f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e5f4:	2b00      	cmp	r3, #0
 801e5f6:	dc03      	bgt.n	801e600 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e5f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	f340 8225 	ble.w	801ea4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e600:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e602:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e606:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e60a:	1e48      	subs	r0, r1, #1
 801e60c:	1e57      	subs	r7, r2, #1
 801e60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e610:	2b00      	cmp	r3, #0
 801e612:	f340 80e3 	ble.w	801e7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e616:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801e61a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e61e:	d406      	bmi.n	801e62e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e620:	4584      	cmp	ip, r0
 801e622:	da04      	bge.n	801e62e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e624:	2b00      	cmp	r3, #0
 801e626:	db02      	blt.n	801e62e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e628:	42bb      	cmp	r3, r7
 801e62a:	f2c0 80d8 	blt.w	801e7de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e62e:	f11c 0c01 	adds.w	ip, ip, #1
 801e632:	f100 80c9 	bmi.w	801e7c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e636:	4561      	cmp	r1, ip
 801e638:	f2c0 80c6 	blt.w	801e7c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e63c:	3301      	adds	r3, #1
 801e63e:	f100 80c3 	bmi.w	801e7c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e642:	429a      	cmp	r2, r3
 801e644:	f2c0 80c0 	blt.w	801e7c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e648:	4647      	mov	r7, r8
 801e64a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e64e:	f1bb 0f00 	cmp.w	fp, #0
 801e652:	f340 80e3 	ble.w	801e81c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e656:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e658:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e65a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e65e:	ea5f 422a 	movs.w	r2, sl, asr #16
 801e662:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e666:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801e66a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e66e:	689b      	ldr	r3, [r3, #8]
 801e670:	f100 8121 	bmi.w	801e8b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e674:	f103 39ff 	add.w	r9, r3, #4294967295
 801e678:	454a      	cmp	r2, r9
 801e67a:	f280 811c 	bge.w	801e8b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e67e:	f1bc 0f00 	cmp.w	ip, #0
 801e682:	f2c0 8118 	blt.w	801e8b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e686:	f10e 39ff 	add.w	r9, lr, #4294967295
 801e68a:	45cc      	cmp	ip, r9
 801e68c:	f280 8113 	bge.w	801e8b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e690:	b21b      	sxth	r3, r3
 801e692:	fb0c 2203 	mla	r2, ip, r3, r2
 801e696:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e698:	eb04 0902 	add.w	r9, r4, r2
 801e69c:	5ca2      	ldrb	r2, [r4, r2]
 801e69e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801e6a2:	2800      	cmp	r0, #0
 801e6a4:	f000 80fe 	beq.w	801e8a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e6a8:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e6ac:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801e6b0:	9211      	str	r2, [sp, #68]	; 0x44
 801e6b2:	b151      	cbz	r1, 801e6ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e6b4:	eb09 0203 	add.w	r2, r9, r3
 801e6b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e6bc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e6c0:	930f      	str	r3, [sp, #60]	; 0x3c
 801e6c2:	7853      	ldrb	r3, [r2, #1]
 801e6c4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e6c8:	9312      	str	r3, [sp, #72]	; 0x48
 801e6ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6cc:	fb10 f201 	smulbb	r2, r0, r1
 801e6d0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e6d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e6d8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e6dc:	ea4c 0c03 	orr.w	ip, ip, r3
 801e6e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e6e2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e6e4:	041b      	lsls	r3, r3, #16
 801e6e6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801e6ea:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e6ee:	10d2      	asrs	r2, r2, #3
 801e6f0:	4323      	orrs	r3, r4
 801e6f2:	4353      	muls	r3, r2
 801e6f4:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801e6f8:	fb09 330c 	mla	r3, r9, ip, r3
 801e6fc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e700:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e704:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e708:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e70c:	f1c1 0c10 	rsb	ip, r1, #16
 801e710:	ebac 0c00 	sub.w	ip, ip, r0
 801e714:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e718:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e71c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e71e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e722:	0418      	lsls	r0, r3, #16
 801e724:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e728:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e72c:	4318      	orrs	r0, r3
 801e72e:	fb02 c200 	mla	r2, r2, r0, ip
 801e732:	8838      	ldrh	r0, [r7, #0]
 801e734:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e736:	0d53      	lsrs	r3, r2, #21
 801e738:	1201      	asrs	r1, r0, #8
 801e73a:	0952      	lsrs	r2, r2, #5
 801e73c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e740:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e744:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e748:	431a      	orrs	r2, r3
 801e74a:	fb11 f104 	smulbb	r1, r1, r4
 801e74e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801e752:	00c0      	lsls	r0, r0, #3
 801e754:	b292      	uxth	r2, r2
 801e756:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e75a:	b2c0      	uxtb	r0, r0
 801e75c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e760:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801e764:	fb1e fe04 	smulbb	lr, lr, r4
 801e768:	fb10 f004 	smulbb	r0, r0, r4
 801e76c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e770:	fb0c 1c03 	mla	ip, ip, r3, r1
 801e774:	10d1      	asrs	r1, r2, #3
 801e776:	00d2      	lsls	r2, r2, #3
 801e778:	b2d2      	uxtb	r2, r2
 801e77a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e77e:	fb01 e103 	mla	r1, r1, r3, lr
 801e782:	fb02 0303 	mla	r3, r2, r3, r0
 801e786:	fa1f fc8c 	uxth.w	ip, ip
 801e78a:	b29a      	uxth	r2, r3
 801e78c:	f10c 0301 	add.w	r3, ip, #1
 801e790:	b289      	uxth	r1, r1
 801e792:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e796:	1c53      	adds	r3, r2, #1
 801e798:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e79c:	1c4a      	adds	r2, r1, #1
 801e79e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e7a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e7a6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e7aa:	0949      	lsrs	r1, r1, #5
 801e7ac:	ea43 030c 	orr.w	r3, r3, ip
 801e7b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e7b4:	430b      	orrs	r3, r1
 801e7b6:	803b      	strh	r3, [r7, #0]
 801e7b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e7ba:	3702      	adds	r7, #2
 801e7bc:	449a      	add	sl, r3
 801e7be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e7c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e7c4:	441d      	add	r5, r3
 801e7c6:	e742      	b.n	801e64e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e7c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e7ca:	f108 0802 	add.w	r8, r8, #2
 801e7ce:	449a      	add	sl, r3
 801e7d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e7d2:	441d      	add	r5, r3
 801e7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7d6:	3b01      	subs	r3, #1
 801e7d8:	9309      	str	r3, [sp, #36]	; 0x24
 801e7da:	e718      	b.n	801e60e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e7dc:	d023      	beq.n	801e826 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801e7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7e0:	9825      	ldr	r0, [sp, #148]	; 0x94
 801e7e2:	3b01      	subs	r3, #1
 801e7e4:	fb00 a003 	mla	r0, r0, r3, sl
 801e7e8:	1400      	asrs	r0, r0, #16
 801e7ea:	f53f af2d 	bmi.w	801e648 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e7ee:	3901      	subs	r1, #1
 801e7f0:	4288      	cmp	r0, r1
 801e7f2:	f6bf af29 	bge.w	801e648 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e7f6:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e7f8:	fb01 5303 	mla	r3, r1, r3, r5
 801e7fc:	141b      	asrs	r3, r3, #16
 801e7fe:	f53f af23 	bmi.w	801e648 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e802:	3a01      	subs	r2, #1
 801e804:	4293      	cmp	r3, r2
 801e806:	f6bf af1f 	bge.w	801e648 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e80a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801e80e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801e812:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801e816:	f1be 0f00 	cmp.w	lr, #0
 801e81a:	dc6c      	bgt.n	801e8f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e81e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e822:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801e826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e828:	2b00      	cmp	r3, #0
 801e82a:	f340 810e 	ble.w	801ea4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e82e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e832:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e836:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e83a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e83e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e842:	eef0 6a62 	vmov.f32	s13, s5
 801e846:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e84a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e84e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e852:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e856:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e85a:	ee16 aa90 	vmov	sl, s13
 801e85e:	eef0 6a43 	vmov.f32	s13, s6
 801e862:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e866:	ee12 2a90 	vmov	r2, s5
 801e86a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e86e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e870:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e874:	fb92 f3f3 	sdiv	r3, r2, r3
 801e878:	ee13 2a10 	vmov	r2, s6
 801e87c:	9325      	str	r3, [sp, #148]	; 0x94
 801e87e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e880:	ee16 5a90 	vmov	r5, s13
 801e884:	fb92 f3f3 	sdiv	r3, r2, r3
 801e888:	9326      	str	r3, [sp, #152]	; 0x98
 801e88a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e88c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e88e:	3b01      	subs	r3, #1
 801e890:	930c      	str	r3, [sp, #48]	; 0x30
 801e892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e894:	bf08      	it	eq
 801e896:	4613      	moveq	r3, r2
 801e898:	eeb0 3a67 	vmov.f32	s6, s15
 801e89c:	9309      	str	r3, [sp, #36]	; 0x24
 801e89e:	eef0 2a47 	vmov.f32	s5, s14
 801e8a2:	e6a6      	b.n	801e5f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e8a4:	2900      	cmp	r1, #0
 801e8a6:	f43f af10 	beq.w	801e6ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e8aa:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e8ae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e8b2:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8b4:	e709      	b.n	801e6ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e8b6:	f112 0901 	adds.w	r9, r2, #1
 801e8ba:	f53f af7d 	bmi.w	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8be:	454b      	cmp	r3, r9
 801e8c0:	f6ff af7a 	blt.w	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8c4:	f11c 0901 	adds.w	r9, ip, #1
 801e8c8:	f53f af76 	bmi.w	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8cc:	45ce      	cmp	lr, r9
 801e8ce:	f6ff af73 	blt.w	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e8d4:	9202      	str	r2, [sp, #8]
 801e8d6:	b21b      	sxth	r3, r3
 801e8d8:	fa0f f28e 	sxth.w	r2, lr
 801e8dc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e8e0:	e9cd c003 	strd	ip, r0, [sp, #12]
 801e8e4:	9201      	str	r2, [sp, #4]
 801e8e6:	9300      	str	r3, [sp, #0]
 801e8e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e8ea:	4633      	mov	r3, r6
 801e8ec:	4639      	mov	r1, r7
 801e8ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e8f0:	f7ff fd8e 	bl	801e410 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801e8f4:	e760      	b.n	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e8f8:	ea4f 422a 	mov.w	r2, sl, asr #16
 801e8fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e900:	1429      	asrs	r1, r5, #16
 801e902:	fb03 2101 	mla	r1, r3, r1, r2
 801e906:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e90a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801e90e:	440a      	add	r2, r1
 801e910:	5c61      	ldrb	r1, [r4, r1]
 801e912:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e916:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801e91a:	f1bc 0f00 	cmp.w	ip, #0
 801e91e:	f000 808c 	beq.w	801ea3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801e922:	7857      	ldrb	r7, [r2, #1]
 801e924:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801e928:	9413      	str	r4, [sp, #76]	; 0x4c
 801e92a:	b140      	cbz	r0, 801e93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e92c:	18d7      	adds	r7, r2, r3
 801e92e:	5cd3      	ldrb	r3, [r2, r3]
 801e930:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e934:	9310      	str	r3, [sp, #64]	; 0x40
 801e936:	787b      	ldrb	r3, [r7, #1]
 801e938:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e93c:	9314      	str	r3, [sp, #80]	; 0x50
 801e93e:	fb1c f200 	smulbb	r2, ip, r0
 801e942:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e944:	10d2      	asrs	r2, r2, #3
 801e946:	041f      	lsls	r7, r3, #16
 801e948:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801e94c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e950:	431f      	orrs	r7, r3
 801e952:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801e956:	9317      	str	r3, [sp, #92]	; 0x5c
 801e958:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e95a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e95c:	041b      	lsls	r3, r3, #16
 801e95e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801e962:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e966:	ea43 030b 	orr.w	r3, r3, fp
 801e96a:	4353      	muls	r3, r2
 801e96c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e96e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e972:	fb04 3707 	mla	r7, r4, r7, r3
 801e976:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e97a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e97e:	ea43 0b01 	orr.w	fp, r3, r1
 801e982:	f1c0 0110 	rsb	r1, r0, #16
 801e986:	eba1 0c0c 	sub.w	ip, r1, ip
 801e98a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e98e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e990:	fb0c 770b 	mla	r7, ip, fp, r7
 801e994:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e998:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801e99c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e9a0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e9a4:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e9a8:	fb02 770c 	mla	r7, r2, ip, r7
 801e9ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e9ae:	0d79      	lsrs	r1, r7, #21
 801e9b0:	8812      	ldrh	r2, [r2, #0]
 801e9b2:	097f      	lsrs	r7, r7, #5
 801e9b4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e9b8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e9bc:	430f      	orrs	r7, r1
 801e9be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e9c0:	1211      	asrs	r1, r2, #8
 801e9c2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e9c6:	b2bb      	uxth	r3, r7
 801e9c8:	fb11 f104 	smulbb	r1, r1, r4
 801e9cc:	10d7      	asrs	r7, r2, #3
 801e9ce:	00d2      	lsls	r2, r2, #3
 801e9d0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e9d4:	b2d2      	uxtb	r2, r2
 801e9d6:	1218      	asrs	r0, r3, #8
 801e9d8:	fb17 f704 	smulbb	r7, r7, r4
 801e9dc:	fb12 f204 	smulbb	r2, r2, r4
 801e9e0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e9e4:	fb00 1009 	mla	r0, r0, r9, r1
 801e9e8:	10d9      	asrs	r1, r3, #3
 801e9ea:	00db      	lsls	r3, r3, #3
 801e9ec:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e9f0:	b2db      	uxtb	r3, r3
 801e9f2:	fb01 7109 	mla	r1, r1, r9, r7
 801e9f6:	fb03 2309 	mla	r3, r3, r9, r2
 801e9fa:	b280      	uxth	r0, r0
 801e9fc:	b29b      	uxth	r3, r3
 801e9fe:	b289      	uxth	r1, r1
 801ea00:	1c42      	adds	r2, r0, #1
 801ea02:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ea06:	1c4f      	adds	r7, r1, #1
 801ea08:	1c5a      	adds	r2, r3, #1
 801ea0a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ea0e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801ea12:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ea16:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ea1a:	0949      	lsrs	r1, r1, #5
 801ea1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea1e:	4310      	orrs	r0, r2
 801ea20:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ea24:	4308      	orrs	r0, r1
 801ea26:	f823 0b02 	strh.w	r0, [r3], #2
 801ea2a:	930e      	str	r3, [sp, #56]	; 0x38
 801ea2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ea2e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ea32:	449a      	add	sl, r3
 801ea34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ea36:	441d      	add	r5, r3
 801ea38:	e6ed      	b.n	801e816 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801ea3a:	2800      	cmp	r0, #0
 801ea3c:	f43f af7f 	beq.w	801e93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ea40:	5cd3      	ldrb	r3, [r2, r3]
 801ea42:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ea46:	9310      	str	r3, [sp, #64]	; 0x40
 801ea48:	e779      	b.n	801e93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ea4a:	b019      	add	sp, #100	; 0x64
 801ea4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ea50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea54:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801ea58:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801ea5c:	fb08 470e 	mla	r7, r8, lr, r4
 801ea60:	f1b8 0f00 	cmp.w	r8, #0
 801ea64:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801ea68:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801ea6c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801ea70:	eb02 0907 	add.w	r9, r2, r7
 801ea74:	8808      	ldrh	r0, [r1, #0]
 801ea76:	db67      	blt.n	801eb48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801ea78:	45c2      	cmp	sl, r8
 801ea7a:	dd65      	ble.n	801eb48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801ea7c:	2c00      	cmp	r4, #0
 801ea7e:	db61      	blt.n	801eb44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801ea80:	45a6      	cmp	lr, r4
 801ea82:	dd5f      	ble.n	801eb44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801ea84:	5dd2      	ldrb	r2, [r2, r7]
 801ea86:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801ea8a:	1c62      	adds	r2, r4, #1
 801ea8c:	d45f      	bmi.n	801eb4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ea8e:	4596      	cmp	lr, r2
 801ea90:	dd5d      	ble.n	801eb4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ea92:	2d00      	cmp	r5, #0
 801ea94:	d05b      	beq.n	801eb4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ea96:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ea9a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801ea9e:	f118 0801 	adds.w	r8, r8, #1
 801eaa2:	d458      	bmi.n	801eb56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801eaa4:	45c2      	cmp	sl, r8
 801eaa6:	dd56      	ble.n	801eb56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801eaa8:	2e00      	cmp	r6, #0
 801eaaa:	d054      	beq.n	801eb56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801eaac:	2c00      	cmp	r4, #0
 801eaae:	db50      	blt.n	801eb52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801eab0:	45a6      	cmp	lr, r4
 801eab2:	dd4e      	ble.n	801eb52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801eab4:	f819 200e 	ldrb.w	r2, [r9, lr]
 801eab8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801eabc:	3401      	adds	r4, #1
 801eabe:	d407      	bmi.n	801ead0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801eac0:	45a6      	cmp	lr, r4
 801eac2:	dd05      	ble.n	801ead0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801eac4:	b125      	cbz	r5, 801ead0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801eac6:	44ce      	add	lr, r9
 801eac8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801eacc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ead0:	fb15 f406 	smulbb	r4, r5, r6
 801ead4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801ead8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801eadc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801eae0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801eae4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801eae8:	ea43 0c0c 	orr.w	ip, r3, ip
 801eaec:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801eaf0:	f1c6 0310 	rsb	r3, r6, #16
 801eaf4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801eaf8:	1b5b      	subs	r3, r3, r5
 801eafa:	ea4e 0707 	orr.w	r7, lr, r7
 801eafe:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801eb02:	437d      	muls	r5, r7
 801eb04:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eb08:	fb03 5c0c 	mla	ip, r3, ip, r5
 801eb0c:	0403      	lsls	r3, r0, #16
 801eb0e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801eb12:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801eb16:	4318      	orrs	r0, r3
 801eb18:	fb04 c000 	mla	r0, r4, r0, ip
 801eb1c:	0413      	lsls	r3, r2, #16
 801eb1e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801eb22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801eb26:	4313      	orrs	r3, r2
 801eb28:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801eb2c:	fb06 0003 	mla	r0, r6, r3, r0
 801eb30:	0d43      	lsrs	r3, r0, #21
 801eb32:	0940      	lsrs	r0, r0, #5
 801eb34:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eb38:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801eb3c:	4318      	orrs	r0, r3
 801eb3e:	8008      	strh	r0, [r1, #0]
 801eb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb44:	4684      	mov	ip, r0
 801eb46:	e7a0      	b.n	801ea8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801eb48:	4607      	mov	r7, r0
 801eb4a:	4684      	mov	ip, r0
 801eb4c:	e7a7      	b.n	801ea9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801eb4e:	4607      	mov	r7, r0
 801eb50:	e7a5      	b.n	801ea9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801eb52:	4602      	mov	r2, r0
 801eb54:	e7b2      	b.n	801eabc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801eb56:	4602      	mov	r2, r0
 801eb58:	e7ba      	b.n	801ead0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801eb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eb5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb62:	b093      	sub	sp, #76	; 0x4c
 801eb64:	920f      	str	r2, [sp, #60]	; 0x3c
 801eb66:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801eb68:	9010      	str	r0, [sp, #64]	; 0x40
 801eb6a:	6850      	ldr	r0, [r2, #4]
 801eb6c:	9108      	str	r1, [sp, #32]
 801eb6e:	9306      	str	r3, [sp, #24]
 801eb70:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801eb74:	fb00 1303 	mla	r3, r0, r3, r1
 801eb78:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801eb7c:	6812      	ldr	r2, [r2, #0]
 801eb7e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801eb82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb84:	681b      	ldr	r3, [r3, #0]
 801eb86:	9307      	str	r3, [sp, #28]
 801eb88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb8a:	685f      	ldr	r7, [r3, #4]
 801eb8c:	3704      	adds	r7, #4
 801eb8e:	9b08      	ldr	r3, [sp, #32]
 801eb90:	2b00      	cmp	r3, #0
 801eb92:	dc03      	bgt.n	801eb9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801eb94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eb96:	2b00      	cmp	r3, #0
 801eb98:	f340 81b2 	ble.w	801ef00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801eb9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb9e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eba2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eba6:	1e48      	subs	r0, r1, #1
 801eba8:	f102 3cff 	add.w	ip, r2, #4294967295
 801ebac:	9b06      	ldr	r3, [sp, #24]
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	f340 80a9 	ble.w	801ed06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ebb4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ebb8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ebbc:	d406      	bmi.n	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebbe:	4586      	cmp	lr, r0
 801ebc0:	da04      	bge.n	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	db02      	blt.n	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebc6:	4563      	cmp	r3, ip
 801ebc8:	f2c0 809e 	blt.w	801ed08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ebcc:	f11e 0e01 	adds.w	lr, lr, #1
 801ebd0:	f100 808f 	bmi.w	801ecf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ebd4:	4571      	cmp	r1, lr
 801ebd6:	f2c0 808c 	blt.w	801ecf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ebda:	3301      	adds	r3, #1
 801ebdc:	f100 8089 	bmi.w	801ecf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ebe0:	429a      	cmp	r2, r3
 801ebe2:	f2c0 8086 	blt.w	801ecf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ebe6:	46c8      	mov	r8, r9
 801ebe8:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ebec:	f1bb 0f00 	cmp.w	fp, #0
 801ebf0:	f340 80a6 	ble.w	801ed40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ebf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ebf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ebf8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ebfc:	1422      	asrs	r2, r4, #16
 801ebfe:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ec02:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801ec06:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ec0a:	689b      	ldr	r3, [r3, #8]
 801ec0c:	f100 80e3 	bmi.w	801edd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec10:	f103 3aff 	add.w	sl, r3, #4294967295
 801ec14:	4552      	cmp	r2, sl
 801ec16:	f280 80de 	bge.w	801edd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec1a:	f1bc 0f00 	cmp.w	ip, #0
 801ec1e:	f2c0 80da 	blt.w	801edd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec22:	f10e 3aff 	add.w	sl, lr, #4294967295
 801ec26:	45d4      	cmp	ip, sl
 801ec28:	f280 80d5 	bge.w	801edd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec2c:	b21b      	sxth	r3, r3
 801ec2e:	fb0c 2203 	mla	r2, ip, r3, r2
 801ec32:	9d07      	ldr	r5, [sp, #28]
 801ec34:	eb05 0a02 	add.w	sl, r5, r2
 801ec38:	5caa      	ldrb	r2, [r5, r2]
 801ec3a:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801ec3e:	2800      	cmp	r0, #0
 801ec40:	f000 80c0 	beq.w	801edc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ec44:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ec48:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801ec4c:	920b      	str	r2, [sp, #44]	; 0x2c
 801ec4e:	b151      	cbz	r1, 801ec66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ec50:	eb0a 0203 	add.w	r2, sl, r3
 801ec54:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ec58:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ec5c:	9309      	str	r3, [sp, #36]	; 0x24
 801ec5e:	7853      	ldrb	r3, [r2, #1]
 801ec60:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ec64:	930c      	str	r3, [sp, #48]	; 0x30
 801ec66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec68:	fb10 f201 	smulbb	r2, r0, r1
 801ec6c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ec70:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ec74:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ec78:	ea4c 0c03 	orr.w	ip, ip, r3
 801ec7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ec80:	041b      	lsls	r3, r3, #16
 801ec82:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ec86:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ec8a:	10d2      	asrs	r2, r2, #3
 801ec8c:	432b      	orrs	r3, r5
 801ec8e:	4353      	muls	r3, r2
 801ec90:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801ec94:	fb0a 330c 	mla	r3, sl, ip, r3
 801ec98:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ec9c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801eca0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801eca4:	ea4c 0e0e 	orr.w	lr, ip, lr
 801eca8:	f1c1 0c10 	rsb	ip, r1, #16
 801ecac:	ebac 0c00 	sub.w	ip, ip, r0
 801ecb0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ecb4:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ecb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecba:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801ecbe:	0418      	lsls	r0, r3, #16
 801ecc0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ecc4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ecc8:	4318      	orrs	r0, r3
 801ecca:	fb02 c200 	mla	r2, r2, r0, ip
 801ecce:	0d53      	lsrs	r3, r2, #21
 801ecd0:	0952      	lsrs	r2, r2, #5
 801ecd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ecd6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ecda:	431a      	orrs	r2, r3
 801ecdc:	f8a8 2000 	strh.w	r2, [r8]
 801ece0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ece2:	f108 0802 	add.w	r8, r8, #2
 801ece6:	441c      	add	r4, r3
 801ece8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ecea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ecee:	441e      	add	r6, r3
 801ecf0:	e77c      	b.n	801ebec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ecf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ecf4:	f109 0902 	add.w	r9, r9, #2
 801ecf8:	441c      	add	r4, r3
 801ecfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ecfc:	441e      	add	r6, r3
 801ecfe:	9b06      	ldr	r3, [sp, #24]
 801ed00:	3b01      	subs	r3, #1
 801ed02:	9306      	str	r3, [sp, #24]
 801ed04:	e752      	b.n	801ebac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ed06:	d020      	beq.n	801ed4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ed08:	9b06      	ldr	r3, [sp, #24]
 801ed0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ed0c:	3b01      	subs	r3, #1
 801ed0e:	fb00 4003 	mla	r0, r0, r3, r4
 801ed12:	1400      	asrs	r0, r0, #16
 801ed14:	f53f af67 	bmi.w	801ebe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ed18:	3901      	subs	r1, #1
 801ed1a:	4288      	cmp	r0, r1
 801ed1c:	f6bf af63 	bge.w	801ebe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ed20:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ed22:	fb01 6303 	mla	r3, r1, r3, r6
 801ed26:	141b      	asrs	r3, r3, #16
 801ed28:	f53f af5d 	bmi.w	801ebe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ed2c:	3a01      	subs	r2, #1
 801ed2e:	4293      	cmp	r3, r2
 801ed30:	f6bf af59 	bge.w	801ebe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ed34:	46ca      	mov	sl, r9
 801ed36:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ed3a:	f1b8 0f00 	cmp.w	r8, #0
 801ed3e:	dc67      	bgt.n	801ee10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ed40:	9b06      	ldr	r3, [sp, #24]
 801ed42:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ed46:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ed4a:	9b08      	ldr	r3, [sp, #32]
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	f340 80d7 	ble.w	801ef00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ed52:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed62:	eeb0 6a62 	vmov.f32	s12, s5
 801ed66:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed7a:	ee16 4a10 	vmov	r4, s12
 801ed7e:	eeb0 6a43 	vmov.f32	s12, s6
 801ed82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed86:	ee12 2a90 	vmov	r2, s5
 801ed8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ed90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed94:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed98:	ee13 2a10 	vmov	r2, s6
 801ed9c:	931f      	str	r3, [sp, #124]	; 0x7c
 801ed9e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eda0:	ee16 6a10 	vmov	r6, s12
 801eda4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eda8:	9320      	str	r3, [sp, #128]	; 0x80
 801edaa:	9b08      	ldr	r3, [sp, #32]
 801edac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801edae:	3b01      	subs	r3, #1
 801edb0:	9308      	str	r3, [sp, #32]
 801edb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801edb4:	bf08      	it	eq
 801edb6:	4613      	moveq	r3, r2
 801edb8:	eeb0 3a67 	vmov.f32	s6, s15
 801edbc:	9306      	str	r3, [sp, #24]
 801edbe:	eef0 2a47 	vmov.f32	s5, s14
 801edc2:	e6e4      	b.n	801eb8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801edc4:	2900      	cmp	r1, #0
 801edc6:	f43f af4e 	beq.w	801ec66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801edca:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801edce:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801edd2:	9309      	str	r3, [sp, #36]	; 0x24
 801edd4:	e747      	b.n	801ec66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801edd6:	f112 0a01 	adds.w	sl, r2, #1
 801edda:	d481      	bmi.n	801ece0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801eddc:	4553      	cmp	r3, sl
 801edde:	f6ff af7f 	blt.w	801ece0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ede2:	f11c 0a01 	adds.w	sl, ip, #1
 801ede6:	f53f af7b 	bmi.w	801ece0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801edea:	45d6      	cmp	lr, sl
 801edec:	f6ff af78 	blt.w	801ece0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801edf0:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801edf4:	b21b      	sxth	r3, r3
 801edf6:	fa0f f28e 	sxth.w	r2, lr
 801edfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801edfe:	9201      	str	r2, [sp, #4]
 801ee00:	9300      	str	r3, [sp, #0]
 801ee02:	9a07      	ldr	r2, [sp, #28]
 801ee04:	463b      	mov	r3, r7
 801ee06:	4641      	mov	r1, r8
 801ee08:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ee0a:	f7ff fe21 	bl	801ea50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801ee0e:	e767      	b.n	801ece0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ee12:	1422      	asrs	r2, r4, #16
 801ee14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ee18:	1431      	asrs	r1, r6, #16
 801ee1a:	fb03 2101 	mla	r1, r3, r1, r2
 801ee1e:	9d07      	ldr	r5, [sp, #28]
 801ee20:	9a07      	ldr	r2, [sp, #28]
 801ee22:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801ee26:	440a      	add	r2, r1
 801ee28:	5c69      	ldrb	r1, [r5, r1]
 801ee2a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ee2e:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801ee32:	f1be 0f00 	cmp.w	lr, #0
 801ee36:	d05c      	beq.n	801eef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801ee38:	f892 c001 	ldrb.w	ip, [r2, #1]
 801ee3c:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801ee40:	950d      	str	r5, [sp, #52]	; 0x34
 801ee42:	b150      	cbz	r0, 801ee5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ee44:	eb02 0c03 	add.w	ip, r2, r3
 801ee48:	5cd3      	ldrb	r3, [r2, r3]
 801ee4a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ee4e:	930a      	str	r3, [sp, #40]	; 0x28
 801ee50:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ee54:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ee58:	930e      	str	r3, [sp, #56]	; 0x38
 801ee5a:	fb1e f200 	smulbb	r2, lr, r0
 801ee5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee60:	10d2      	asrs	r2, r2, #3
 801ee62:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ee66:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ee6a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ee6e:	ea4c 0c03 	orr.w	ip, ip, r3
 801ee72:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801ee76:	9311      	str	r3, [sp, #68]	; 0x44
 801ee78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee7a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ee7c:	041b      	lsls	r3, r3, #16
 801ee7e:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801ee82:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ee86:	ea43 030b 	orr.w	r3, r3, fp
 801ee8a:	4353      	muls	r3, r2
 801ee8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ee8e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ee92:	fb05 3c0c 	mla	ip, r5, ip, r3
 801ee96:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ee9a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801ee9e:	ea43 0b01 	orr.w	fp, r3, r1
 801eea2:	f1c0 0110 	rsb	r1, r0, #16
 801eea6:	eba1 0e0e 	sub.w	lr, r1, lr
 801eeaa:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801eeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eeb0:	fb0e cc0b 	mla	ip, lr, fp, ip
 801eeb4:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801eeb8:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801eebc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801eec0:	ea4b 0e0e 	orr.w	lr, fp, lr
 801eec4:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801eec8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801eecc:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801eed0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801eed4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eed8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801eedc:	ea43 0c0c 	orr.w	ip, r3, ip
 801eee0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eee2:	f82a cb02 	strh.w	ip, [sl], #2
 801eee6:	441c      	add	r4, r3
 801eee8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801eeea:	f108 38ff 	add.w	r8, r8, #4294967295
 801eeee:	441e      	add	r6, r3
 801eef0:	e723      	b.n	801ed3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801eef2:	2800      	cmp	r0, #0
 801eef4:	d0b1      	beq.n	801ee5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801eef6:	5cd3      	ldrb	r3, [r2, r3]
 801eef8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801eefc:	930a      	str	r3, [sp, #40]	; 0x28
 801eefe:	e7ac      	b.n	801ee5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ef00:	b013      	add	sp, #76	; 0x4c
 801ef02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801ef06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef0a:	880d      	ldrh	r5, [r1, #0]
 801ef0c:	b087      	sub	sp, #28
 801ef0e:	10ef      	asrs	r7, r5, #3
 801ef10:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801ef14:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ef18:	00ed      	lsls	r5, r5, #3
 801ef1a:	9701      	str	r7, [sp, #4]
 801ef1c:	b2ed      	uxtb	r5, r5
 801ef1e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801ef22:	9502      	str	r5, [sp, #8]
 801ef24:	9d01      	ldr	r5, [sp, #4]
 801ef26:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801ef2a:	fb06 0709 	mla	r7, r6, r9, r0
 801ef2e:	9103      	str	r1, [sp, #12]
 801ef30:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801ef34:	022d      	lsls	r5, r5, #8
 801ef36:	9902      	ldr	r1, [sp, #8]
 801ef38:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801ef3c:	430d      	orrs	r5, r1
 801ef3e:	2e00      	cmp	r6, #0
 801ef40:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801ef44:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801ef48:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801ef4c:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801ef50:	eb02 0c07 	add.w	ip, r2, r7
 801ef54:	9505      	str	r5, [sp, #20]
 801ef56:	f2c0 80b6 	blt.w	801f0c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ef5a:	45b3      	cmp	fp, r6
 801ef5c:	f340 80b3 	ble.w	801f0c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ef60:	2800      	cmp	r0, #0
 801ef62:	f2c0 80ae 	blt.w	801f0c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ef66:	4581      	cmp	r9, r0
 801ef68:	f340 80ab 	ble.w	801f0c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ef6c:	5dd7      	ldrb	r7, [r2, r7]
 801ef6e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ef72:	441f      	add	r7, r3
 801ef74:	1c42      	adds	r2, r0, #1
 801ef76:	f100 80a9 	bmi.w	801f0cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ef7a:	4591      	cmp	r9, r2
 801ef7c:	f340 80a6 	ble.w	801f0cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ef80:	2c00      	cmp	r4, #0
 801ef82:	f000 80a3 	beq.w	801f0cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ef86:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ef8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef8e:	441d      	add	r5, r3
 801ef90:	3601      	adds	r6, #1
 801ef92:	f100 809f 	bmi.w	801f0d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ef96:	45b3      	cmp	fp, r6
 801ef98:	f340 809c 	ble.w	801f0d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ef9c:	f1be 0f00 	cmp.w	lr, #0
 801efa0:	f000 8098 	beq.w	801f0d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801efa4:	2800      	cmp	r0, #0
 801efa6:	f2c0 8093 	blt.w	801f0d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801efaa:	4581      	cmp	r9, r0
 801efac:	f340 8090 	ble.w	801f0d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801efb0:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801efb4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801efb8:	441e      	add	r6, r3
 801efba:	3001      	adds	r0, #1
 801efbc:	f100 808d 	bmi.w	801f0da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801efc0:	4581      	cmp	r9, r0
 801efc2:	f340 808a 	ble.w	801f0da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801efc6:	2c00      	cmp	r4, #0
 801efc8:	f000 8087 	beq.w	801f0da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801efcc:	44e1      	add	r9, ip
 801efce:	f899 2001 	ldrb.w	r2, [r9, #1]
 801efd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801efd6:	4413      	add	r3, r2
 801efd8:	b2a4      	uxth	r4, r4
 801efda:	fa1f fe8e 	uxth.w	lr, lr
 801efde:	fb04 fb0e 	mul.w	fp, r4, lr
 801efe2:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801efe6:	fa1f f08e 	uxth.w	r0, lr
 801efea:	fa1f fe88 	uxth.w	lr, r8
 801efee:	ea6f 0808 	mvn.w	r8, r8
 801eff2:	0124      	lsls	r4, r4, #4
 801eff4:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801eff8:	eba4 040b 	sub.w	r4, r4, fp
 801effc:	b2a2      	uxth	r2, r4
 801effe:	78ac      	ldrb	r4, [r5, #2]
 801f000:	f897 c002 	ldrb.w	ip, [r7, #2]
 801f004:	4354      	muls	r4, r2
 801f006:	eba9 0900 	sub.w	r9, r9, r0
 801f00a:	fa1f f989 	uxth.w	r9, r9
 801f00e:	fb09 440c 	mla	r4, r9, ip, r4
 801f012:	f896 c002 	ldrb.w	ip, [r6, #2]
 801f016:	fa5f f888 	uxtb.w	r8, r8
 801f01a:	fb00 440c 	mla	r4, r0, ip, r4
 801f01e:	f893 c002 	ldrb.w	ip, [r3, #2]
 801f022:	fb1a fa08 	smulbb	sl, sl, r8
 801f026:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f02a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f02e:	fb0c ac0e 	mla	ip, ip, lr, sl
 801f032:	f895 a001 	ldrb.w	sl, [r5, #1]
 801f036:	782d      	ldrb	r5, [r5, #0]
 801f038:	fb02 fa0a 	mul.w	sl, r2, sl
 801f03c:	436a      	muls	r2, r5
 801f03e:	787c      	ldrb	r4, [r7, #1]
 801f040:	783f      	ldrb	r7, [r7, #0]
 801f042:	fb09 aa04 	mla	sl, r9, r4, sl
 801f046:	fb09 2207 	mla	r2, r9, r7, r2
 801f04a:	7874      	ldrb	r4, [r6, #1]
 801f04c:	7835      	ldrb	r5, [r6, #0]
 801f04e:	fb00 aa04 	mla	sl, r0, r4, sl
 801f052:	fb00 2005 	mla	r0, r0, r5, r2
 801f056:	785c      	ldrb	r4, [r3, #1]
 801f058:	781b      	ldrb	r3, [r3, #0]
 801f05a:	fb0b a404 	mla	r4, fp, r4, sl
 801f05e:	9901      	ldr	r1, [sp, #4]
 801f060:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f064:	9b02      	ldr	r3, [sp, #8]
 801f066:	fb11 fa08 	smulbb	sl, r1, r8
 801f06a:	fb13 f808 	smulbb	r8, r3, r8
 801f06e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f072:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f076:	fb04 a40e 	mla	r4, r4, lr, sl
 801f07a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801f07e:	fa1f fc8c 	uxth.w	ip, ip
 801f082:	f10c 0301 	add.w	r3, ip, #1
 801f086:	fa1f fe8e 	uxth.w	lr, lr
 801f08a:	b2a4      	uxth	r4, r4
 801f08c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f090:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801f094:	f104 0a01 	add.w	sl, r4, #1
 801f098:	f10e 0c01 	add.w	ip, lr, #1
 801f09c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f0a0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f0a4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f0a8:	0964      	lsrs	r4, r4, #5
 801f0aa:	ea4c 0c03 	orr.w	ip, ip, r3
 801f0ae:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f0b2:	9b03      	ldr	r3, [sp, #12]
 801f0b4:	ea4c 0c04 	orr.w	ip, ip, r4
 801f0b8:	f8a3 c000 	strh.w	ip, [r3]
 801f0bc:	b007      	add	sp, #28
 801f0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0c2:	af05      	add	r7, sp, #20
 801f0c4:	e756      	b.n	801ef74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801f0c6:	ad05      	add	r5, sp, #20
 801f0c8:	462f      	mov	r7, r5
 801f0ca:	e761      	b.n	801ef90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f0cc:	ad05      	add	r5, sp, #20
 801f0ce:	e75f      	b.n	801ef90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f0d0:	ae05      	add	r6, sp, #20
 801f0d2:	e772      	b.n	801efba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f0d4:	ab05      	add	r3, sp, #20
 801f0d6:	461e      	mov	r6, r3
 801f0d8:	e77e      	b.n	801efd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801f0da:	ab05      	add	r3, sp, #20
 801f0dc:	e77c      	b.n	801efd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801f0de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0e2:	b095      	sub	sp, #84	; 0x54
 801f0e4:	9212      	str	r2, [sp, #72]	; 0x48
 801f0e6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f0e8:	9013      	str	r0, [sp, #76]	; 0x4c
 801f0ea:	9309      	str	r3, [sp, #36]	; 0x24
 801f0ec:	6850      	ldr	r0, [r2, #4]
 801f0ee:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801f0f2:	910e      	str	r1, [sp, #56]	; 0x38
 801f0f4:	930f      	str	r3, [sp, #60]	; 0x3c
 801f0f6:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801f0fa:	fb00 1303 	mla	r3, r0, r3, r1
 801f0fe:	6812      	ldr	r2, [r2, #0]
 801f100:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f104:	930a      	str	r3, [sp, #40]	; 0x28
 801f106:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	930d      	str	r3, [sp, #52]	; 0x34
 801f10c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f10e:	685c      	ldr	r4, [r3, #4]
 801f110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f112:	3404      	adds	r4, #4
 801f114:	43db      	mvns	r3, r3
 801f116:	b2db      	uxtb	r3, r3
 801f118:	930b      	str	r3, [sp, #44]	; 0x2c
 801f11a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	dc03      	bgt.n	801f128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f120:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f122:	2b00      	cmp	r3, #0
 801f124:	f340 8255 	ble.w	801f5d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f128:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f12a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f12e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f132:	1e48      	subs	r0, r1, #1
 801f134:	1e55      	subs	r5, r2, #1
 801f136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f138:	2b00      	cmp	r3, #0
 801f13a:	f340 80f9 	ble.w	801f330 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f13e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801f140:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f142:	1436      	asrs	r6, r6, #16
 801f144:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f148:	d406      	bmi.n	801f158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f14a:	4286      	cmp	r6, r0
 801f14c:	da04      	bge.n	801f158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f14e:	2b00      	cmp	r3, #0
 801f150:	db02      	blt.n	801f158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f152:	42ab      	cmp	r3, r5
 801f154:	f2c0 80ed 	blt.w	801f332 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f158:	3601      	adds	r6, #1
 801f15a:	f100 80da 	bmi.w	801f312 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f15e:	42b1      	cmp	r1, r6
 801f160:	f2c0 80d7 	blt.w	801f312 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f164:	3301      	adds	r3, #1
 801f166:	f100 80d4 	bmi.w	801f312 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f16a:	429a      	cmp	r2, r3
 801f16c:	f2c0 80d1 	blt.w	801f312 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f172:	9311      	str	r3, [sp, #68]	; 0x44
 801f174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f176:	930c      	str	r3, [sp, #48]	; 0x30
 801f178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f17a:	2b00      	cmp	r3, #0
 801f17c:	f340 80fa 	ble.w	801f374 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f180:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f182:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f184:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f186:	68c6      	ldr	r6, [r0, #12]
 801f188:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f18a:	141d      	asrs	r5, r3, #16
 801f18c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f190:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f192:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f194:	1400      	asrs	r0, r0, #16
 801f196:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f19a:	6892      	ldr	r2, [r2, #8]
 801f19c:	f100 813e 	bmi.w	801f41c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f1a0:	1e57      	subs	r7, r2, #1
 801f1a2:	42b8      	cmp	r0, r7
 801f1a4:	f280 813a 	bge.w	801f41c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f1a8:	2d00      	cmp	r5, #0
 801f1aa:	f2c0 8137 	blt.w	801f41c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f1ae:	1e77      	subs	r7, r6, #1
 801f1b0:	42bd      	cmp	r5, r7
 801f1b2:	f280 8133 	bge.w	801f41c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f1b6:	b212      	sxth	r2, r2
 801f1b8:	fb05 0002 	mla	r0, r5, r2, r0
 801f1bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f1be:	f815 a000 	ldrb.w	sl, [r5, r0]
 801f1c2:	182e      	adds	r6, r5, r0
 801f1c4:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801f1c8:	eb04 050a 	add.w	r5, r4, sl
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	f000 8117 	beq.w	801f400 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f1d2:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f1d6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f1da:	44a4      	add	ip, r4
 801f1dc:	2900      	cmp	r1, #0
 801f1de:	f000 8117 	beq.w	801f410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f1e2:	18b0      	adds	r0, r6, r2
 801f1e4:	7840      	ldrb	r0, [r0, #1]
 801f1e6:	5cb2      	ldrb	r2, [r6, r2]
 801f1e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f1ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f1f0:	4422      	add	r2, r4
 801f1f2:	4420      	add	r0, r4
 801f1f4:	b29b      	uxth	r3, r3
 801f1f6:	b289      	uxth	r1, r1
 801f1f8:	fb03 f901 	mul.w	r9, r3, r1
 801f1fc:	011b      	lsls	r3, r3, #4
 801f1fe:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801f202:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f206:	eba3 0309 	sub.w	r3, r3, r9
 801f20a:	b29b      	uxth	r3, r3
 801f20c:	435f      	muls	r7, r3
 801f20e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f212:	b289      	uxth	r1, r1
 801f214:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f218:	eba8 0801 	sub.w	r8, r8, r1
 801f21c:	fa1f f888 	uxth.w	r8, r8
 801f220:	fb08 770b 	mla	r7, r8, fp, r7
 801f224:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f228:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f22a:	fb01 770b 	mla	r7, r1, fp, r7
 801f22e:	f8b6 e000 	ldrh.w	lr, [r6]
 801f232:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f236:	9310      	str	r3, [sp, #64]	; 0x40
 801f238:	fb09 770b 	mla	r7, r9, fp, r7
 801f23c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f23e:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801f242:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f246:	fb1b fb03 	smulbb	fp, fp, r3
 801f24a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801f24e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f252:	fb07 b706 	mla	r7, r7, r6, fp
 801f256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f258:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f25c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f260:	f89c c000 	ldrb.w	ip, [ip]
 801f264:	435d      	muls	r5, r3
 801f266:	fb08 550b 	mla	r5, r8, fp, r5
 801f26a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f26e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f270:	fb01 550b 	mla	r5, r1, fp, r5
 801f274:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f278:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801f27c:	fb09 550b 	mla	r5, r9, fp, r5
 801f280:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801f284:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f288:	fb1b fb03 	smulbb	fp, fp, r3
 801f28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f28e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f292:	fb03 f30c 	mul.w	r3, r3, ip
 801f296:	fb08 330a 	mla	r3, r8, sl, r3
 801f29a:	f892 c000 	ldrb.w	ip, [r2]
 801f29e:	fa5f fe8e 	uxtb.w	lr, lr
 801f2a2:	fb01 330c 	mla	r3, r1, ip, r3
 801f2a6:	f890 c000 	ldrb.w	ip, [r0]
 801f2aa:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f2ae:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2b4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f2b8:	fb1e fe03 	smulbb	lr, lr, r3
 801f2bc:	fb05 b506 	mla	r5, r5, r6, fp
 801f2c0:	fb0c e606 	mla	r6, ip, r6, lr
 801f2c4:	b2bf      	uxth	r7, r7
 801f2c6:	1c7b      	adds	r3, r7, #1
 801f2c8:	b2ad      	uxth	r5, r5
 801f2ca:	b2b6      	uxth	r6, r6
 801f2cc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f2d0:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801f2d4:	f105 0b01 	add.w	fp, r5, #1
 801f2d8:	1c77      	adds	r7, r6, #1
 801f2da:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f2de:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f2e2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f2e6:	096d      	lsrs	r5, r5, #5
 801f2e8:	431f      	orrs	r7, r3
 801f2ea:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f2ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2f0:	433d      	orrs	r5, r7
 801f2f2:	801d      	strh	r5, [r3, #0]
 801f2f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f2f8:	3302      	adds	r3, #2
 801f2fa:	930c      	str	r3, [sp, #48]	; 0x30
 801f2fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f2fe:	4413      	add	r3, r2
 801f300:	931f      	str	r3, [sp, #124]	; 0x7c
 801f302:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f304:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f306:	4413      	add	r3, r2
 801f308:	9320      	str	r3, [sp, #128]	; 0x80
 801f30a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f30c:	3b01      	subs	r3, #1
 801f30e:	9311      	str	r3, [sp, #68]	; 0x44
 801f310:	e732      	b.n	801f178 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f312:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f314:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801f316:	4433      	add	r3, r6
 801f318:	931f      	str	r3, [sp, #124]	; 0x7c
 801f31a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801f31c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f31e:	4433      	add	r3, r6
 801f320:	9320      	str	r3, [sp, #128]	; 0x80
 801f322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f324:	3b01      	subs	r3, #1
 801f326:	9309      	str	r3, [sp, #36]	; 0x24
 801f328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f32a:	3302      	adds	r3, #2
 801f32c:	930a      	str	r3, [sp, #40]	; 0x28
 801f32e:	e702      	b.n	801f136 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f330:	d027      	beq.n	801f382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f334:	9821      	ldr	r0, [sp, #132]	; 0x84
 801f336:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f338:	3b01      	subs	r3, #1
 801f33a:	fb00 5003 	mla	r0, r0, r3, r5
 801f33e:	1400      	asrs	r0, r0, #16
 801f340:	f53f af16 	bmi.w	801f170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f344:	3901      	subs	r1, #1
 801f346:	4288      	cmp	r0, r1
 801f348:	f6bf af12 	bge.w	801f170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f34c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f34e:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f350:	fb01 0303 	mla	r3, r1, r3, r0
 801f354:	141b      	asrs	r3, r3, #16
 801f356:	f53f af0b 	bmi.w	801f170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f35a:	3a01      	subs	r2, #1
 801f35c:	4293      	cmp	r3, r2
 801f35e:	f6bf af07 	bge.w	801f170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f364:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801f368:	9311      	str	r3, [sp, #68]	; 0x44
 801f36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f36c:	930c      	str	r3, [sp, #48]	; 0x30
 801f36e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f370:	2b00      	cmp	r3, #0
 801f372:	dc70      	bgt.n	801f456 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801f374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f378:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f37c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f380:	930a      	str	r3, [sp, #40]	; 0x28
 801f382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f384:	2b00      	cmp	r3, #0
 801f386:	f340 8124 	ble.w	801f5d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f38a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f38e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f392:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f396:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f39a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f39e:	eef0 6a62 	vmov.f32	s13, s5
 801f3a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3b6:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801f3ba:	eef0 6a43 	vmov.f32	s13, s6
 801f3be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3c2:	ee12 2a90 	vmov	r2, s5
 801f3c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f3cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3d4:	ee13 2a10 	vmov	r2, s6
 801f3d8:	9321      	str	r3, [sp, #132]	; 0x84
 801f3da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f3dc:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801f3e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3e4:	9322      	str	r3, [sp, #136]	; 0x88
 801f3e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f3ea:	3b01      	subs	r3, #1
 801f3ec:	930e      	str	r3, [sp, #56]	; 0x38
 801f3ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f3f0:	bf08      	it	eq
 801f3f2:	4613      	moveq	r3, r2
 801f3f4:	eeb0 3a67 	vmov.f32	s6, s15
 801f3f8:	9309      	str	r3, [sp, #36]	; 0x24
 801f3fa:	eef0 2a47 	vmov.f32	s5, s14
 801f3fe:	e68c      	b.n	801f11a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f400:	b149      	cbz	r1, 801f416 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801f402:	4628      	mov	r0, r5
 801f404:	5cb2      	ldrb	r2, [r6, r2]
 801f406:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f40a:	4422      	add	r2, r4
 801f40c:	46ac      	mov	ip, r5
 801f40e:	e6f1      	b.n	801f1f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f410:	4628      	mov	r0, r5
 801f412:	462a      	mov	r2, r5
 801f414:	e6ee      	b.n	801f1f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f416:	4628      	mov	r0, r5
 801f418:	462a      	mov	r2, r5
 801f41a:	e7f7      	b.n	801f40c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801f41c:	1c47      	adds	r7, r0, #1
 801f41e:	f53f af69 	bmi.w	801f2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f422:	42ba      	cmp	r2, r7
 801f424:	f6ff af66 	blt.w	801f2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f428:	1c6f      	adds	r7, r5, #1
 801f42a:	f53f af63 	bmi.w	801f2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f42e:	42be      	cmp	r6, r7
 801f430:	f6ff af60 	blt.w	801f2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f434:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f436:	b236      	sxth	r6, r6
 801f438:	b212      	sxth	r2, r2
 801f43a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801f43e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801f442:	9002      	str	r0, [sp, #8]
 801f444:	9200      	str	r2, [sp, #0]
 801f446:	9601      	str	r6, [sp, #4]
 801f448:	4623      	mov	r3, r4
 801f44a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f44e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f450:	f7ff fd59 	bl	801ef06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801f454:	e74e      	b.n	801f2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f456:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f458:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f45a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f45e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f460:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f462:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f466:	142d      	asrs	r5, r5, #16
 801f468:	1400      	asrs	r0, r0, #16
 801f46a:	fb02 5000 	mla	r0, r2, r0, r5
 801f46e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f470:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f472:	f815 9000 	ldrb.w	r9, [r5, r0]
 801f476:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f47a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f47e:	182e      	adds	r6, r5, r0
 801f480:	eb04 0509 	add.w	r5, r4, r9
 801f484:	2b00      	cmp	r3, #0
 801f486:	f000 8096 	beq.w	801f5b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801f48a:	7877      	ldrb	r7, [r6, #1]
 801f48c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f490:	4427      	add	r7, r4
 801f492:	2900      	cmp	r1, #0
 801f494:	f000 8097 	beq.w	801f5c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801f498:	18b0      	adds	r0, r6, r2
 801f49a:	7840      	ldrb	r0, [r0, #1]
 801f49c:	5cb2      	ldrb	r2, [r6, r2]
 801f49e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f4a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f4a6:	4422      	add	r2, r4
 801f4a8:	4420      	add	r0, r4
 801f4aa:	b29b      	uxth	r3, r3
 801f4ac:	b289      	uxth	r1, r1
 801f4ae:	fb03 f801 	mul.w	r8, r3, r1
 801f4b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f4b4:	011b      	lsls	r3, r3, #4
 801f4b6:	f8b6 c000 	ldrh.w	ip, [r6]
 801f4ba:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f4be:	78be      	ldrb	r6, [r7, #2]
 801f4c0:	eba3 0308 	sub.w	r3, r3, r8
 801f4c4:	b29b      	uxth	r3, r3
 801f4c6:	435e      	muls	r6, r3
 801f4c8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f4cc:	b289      	uxth	r1, r1
 801f4ce:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f4d2:	ebae 0e01 	sub.w	lr, lr, r1
 801f4d6:	fa1f fe8e 	uxth.w	lr, lr
 801f4da:	fb0e 660b 	mla	r6, lr, fp, r6
 801f4de:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f4e2:	9310      	str	r3, [sp, #64]	; 0x40
 801f4e4:	fb01 660b 	mla	r6, r1, fp, r6
 801f4e8:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4ee:	fb08 660b 	mla	r6, r8, fp, r6
 801f4f2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801f4f6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f4fa:	fb1b fb03 	smulbb	fp, fp, r3
 801f4fe:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f502:	fb06 b60a 	mla	r6, r6, sl, fp
 801f506:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f508:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f50c:	787d      	ldrb	r5, [r7, #1]
 801f50e:	783f      	ldrb	r7, [r7, #0]
 801f510:	435d      	muls	r5, r3
 801f512:	fb0e 550b 	mla	r5, lr, fp, r5
 801f516:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f51c:	fb01 550b 	mla	r5, r1, fp, r5
 801f520:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f524:	f814 9009 	ldrb.w	r9, [r4, r9]
 801f528:	fb08 550b 	mla	r5, r8, fp, r5
 801f52c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801f530:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f534:	fb1b fb03 	smulbb	fp, fp, r3
 801f538:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f53a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f53e:	437b      	muls	r3, r7
 801f540:	fb0e 3309 	mla	r3, lr, r9, r3
 801f544:	7817      	ldrb	r7, [r2, #0]
 801f546:	fa5f fc8c 	uxtb.w	ip, ip
 801f54a:	fb01 3307 	mla	r3, r1, r7, r3
 801f54e:	7807      	ldrb	r7, [r0, #0]
 801f550:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f554:	fb08 3707 	mla	r7, r8, r7, r3
 801f558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f55a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f55e:	fb1c fc03 	smulbb	ip, ip, r3
 801f562:	fb05 b50a 	mla	r5, r5, sl, fp
 801f566:	fb07 c70a 	mla	r7, r7, sl, ip
 801f56a:	b2b6      	uxth	r6, r6
 801f56c:	b2ad      	uxth	r5, r5
 801f56e:	b2bf      	uxth	r7, r7
 801f570:	1c73      	adds	r3, r6, #1
 801f572:	1c7a      	adds	r2, r7, #1
 801f574:	f105 0b01 	add.w	fp, r5, #1
 801f578:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f57c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801f580:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f584:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f588:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f58c:	096d      	lsrs	r5, r5, #5
 801f58e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f590:	4316      	orrs	r6, r2
 801f592:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f596:	432e      	orrs	r6, r5
 801f598:	f823 6b02 	strh.w	r6, [r3], #2
 801f59c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f59e:	930c      	str	r3, [sp, #48]	; 0x30
 801f5a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f5a2:	4413      	add	r3, r2
 801f5a4:	931f      	str	r3, [sp, #124]	; 0x7c
 801f5a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f5a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f5aa:	4413      	add	r3, r2
 801f5ac:	9320      	str	r3, [sp, #128]	; 0x80
 801f5ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f5b0:	3b01      	subs	r3, #1
 801f5b2:	9311      	str	r3, [sp, #68]	; 0x44
 801f5b4:	e6db      	b.n	801f36e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801f5b6:	b149      	cbz	r1, 801f5cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801f5b8:	4628      	mov	r0, r5
 801f5ba:	5cb2      	ldrb	r2, [r6, r2]
 801f5bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f5c0:	4422      	add	r2, r4
 801f5c2:	462f      	mov	r7, r5
 801f5c4:	e771      	b.n	801f4aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f5c6:	4628      	mov	r0, r5
 801f5c8:	462a      	mov	r2, r5
 801f5ca:	e76e      	b.n	801f4aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f5cc:	4628      	mov	r0, r5
 801f5ce:	462a      	mov	r2, r5
 801f5d0:	e7f7      	b.n	801f5c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801f5d2:	b015      	add	sp, #84	; 0x54
 801f5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801f5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5dc:	880f      	ldrh	r7, [r1, #0]
 801f5de:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f5e2:	023c      	lsls	r4, r7, #8
 801f5e4:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801f5e8:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801f5ec:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f5f0:	017c      	lsls	r4, r7, #5
 801f5f2:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801f5f6:	00ff      	lsls	r7, r7, #3
 801f5f8:	ea4b 0404 	orr.w	r4, fp, r4
 801f5fc:	b2ff      	uxtb	r7, r7
 801f5fe:	4327      	orrs	r7, r4
 801f600:	2d00      	cmp	r5, #0
 801f602:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f606:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801f60a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801f60e:	eb02 080a 	add.w	r8, r2, sl
 801f612:	9701      	str	r7, [sp, #4]
 801f614:	db7e      	blt.n	801f714 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f616:	45a9      	cmp	r9, r5
 801f618:	dd7c      	ble.n	801f714 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f61a:	f1bc 0f00 	cmp.w	ip, #0
 801f61e:	db77      	blt.n	801f710 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f620:	45e6      	cmp	lr, ip
 801f622:	dd75      	ble.n	801f710 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f624:	f812 700a 	ldrb.w	r7, [r2, sl]
 801f628:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f62c:	441f      	add	r7, r3
 801f62e:	f11c 0201 	adds.w	r2, ip, #1
 801f632:	d472      	bmi.n	801f71a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f634:	4596      	cmp	lr, r2
 801f636:	dd70      	ble.n	801f71a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f638:	2800      	cmp	r0, #0
 801f63a:	d06e      	beq.n	801f71a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f63c:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f640:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f644:	441c      	add	r4, r3
 801f646:	3501      	adds	r5, #1
 801f648:	d46b      	bmi.n	801f722 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f64a:	45a9      	cmp	r9, r5
 801f64c:	dd69      	ble.n	801f722 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f64e:	2e00      	cmp	r6, #0
 801f650:	d067      	beq.n	801f722 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f652:	f1bc 0f00 	cmp.w	ip, #0
 801f656:	db62      	blt.n	801f71e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f658:	45e6      	cmp	lr, ip
 801f65a:	dd60      	ble.n	801f71e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f65c:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f664:	441d      	add	r5, r3
 801f666:	f11c 0201 	adds.w	r2, ip, #1
 801f66a:	d45d      	bmi.n	801f728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f66c:	4596      	cmp	lr, r2
 801f66e:	dd5b      	ble.n	801f728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f670:	2800      	cmp	r0, #0
 801f672:	d059      	beq.n	801f728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f674:	44c6      	add	lr, r8
 801f676:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f67a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f67e:	4413      	add	r3, r2
 801f680:	b280      	uxth	r0, r0
 801f682:	b2b2      	uxth	r2, r6
 801f684:	fb00 f602 	mul.w	r6, r0, r2
 801f688:	0100      	lsls	r0, r0, #4
 801f68a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801f68e:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801f692:	1b80      	subs	r0, r0, r6
 801f694:	fa1f fc82 	uxth.w	ip, r2
 801f698:	b282      	uxth	r2, r0
 801f69a:	78a0      	ldrb	r0, [r4, #2]
 801f69c:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f6a0:	4350      	muls	r0, r2
 801f6a2:	eba8 080c 	sub.w	r8, r8, ip
 801f6a6:	fa1f f888 	uxth.w	r8, r8
 801f6aa:	fb08 0e0e 	mla	lr, r8, lr, r0
 801f6ae:	78a8      	ldrb	r0, [r5, #2]
 801f6b0:	f897 9000 	ldrb.w	r9, [r7]
 801f6b4:	fb0c e000 	mla	r0, ip, r0, lr
 801f6b8:	f893 e002 	ldrb.w	lr, [r3, #2]
 801f6bc:	787f      	ldrb	r7, [r7, #1]
 801f6be:	fb06 0e0e 	mla	lr, r6, lr, r0
 801f6c2:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801f6c6:	f894 e000 	ldrb.w	lr, [r4]
 801f6ca:	fb02 fe0e 	mul.w	lr, r2, lr
 801f6ce:	fb08 e909 	mla	r9, r8, r9, lr
 801f6d2:	f895 e000 	ldrb.w	lr, [r5]
 801f6d6:	fb0c 990e 	mla	r9, ip, lr, r9
 801f6da:	f893 e000 	ldrb.w	lr, [r3]
 801f6de:	785b      	ldrb	r3, [r3, #1]
 801f6e0:	fb06 9e0e 	mla	lr, r6, lr, r9
 801f6e4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f6e8:	ea4e 0e00 	orr.w	lr, lr, r0
 801f6ec:	7860      	ldrb	r0, [r4, #1]
 801f6ee:	4350      	muls	r0, r2
 801f6f0:	fb08 0007 	mla	r0, r8, r7, r0
 801f6f4:	786a      	ldrb	r2, [r5, #1]
 801f6f6:	fb0c 0202 	mla	r2, ip, r2, r0
 801f6fa:	fb06 2303 	mla	r3, r6, r3, r2
 801f6fe:	095b      	lsrs	r3, r3, #5
 801f700:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f704:	ea4e 0303 	orr.w	r3, lr, r3
 801f708:	800b      	strh	r3, [r1, #0]
 801f70a:	b003      	add	sp, #12
 801f70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f710:	af01      	add	r7, sp, #4
 801f712:	e78c      	b.n	801f62e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801f714:	ac01      	add	r4, sp, #4
 801f716:	4627      	mov	r7, r4
 801f718:	e795      	b.n	801f646 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f71a:	ac01      	add	r4, sp, #4
 801f71c:	e793      	b.n	801f646 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f71e:	ad01      	add	r5, sp, #4
 801f720:	e7a1      	b.n	801f666 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801f722:	ab01      	add	r3, sp, #4
 801f724:	461d      	mov	r5, r3
 801f726:	e7ab      	b.n	801f680 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801f728:	ab01      	add	r3, sp, #4
 801f72a:	e7a9      	b.n	801f680 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801f72c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f730:	b08f      	sub	sp, #60	; 0x3c
 801f732:	920c      	str	r2, [sp, #48]	; 0x30
 801f734:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f736:	900d      	str	r0, [sp, #52]	; 0x34
 801f738:	6850      	ldr	r0, [r2, #4]
 801f73a:	910a      	str	r1, [sp, #40]	; 0x28
 801f73c:	9306      	str	r3, [sp, #24]
 801f73e:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801f742:	fb00 1303 	mla	r3, r0, r3, r1
 801f746:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801f74a:	6812      	ldr	r2, [r2, #0]
 801f74c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f750:	9307      	str	r3, [sp, #28]
 801f752:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f754:	681b      	ldr	r3, [r3, #0]
 801f756:	9308      	str	r3, [sp, #32]
 801f758:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f75a:	685c      	ldr	r4, [r3, #4]
 801f75c:	3404      	adds	r4, #4
 801f75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f760:	2b00      	cmp	r3, #0
 801f762:	dc03      	bgt.n	801f76c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f766:	2b00      	cmp	r3, #0
 801f768:	f340 81d6 	ble.w	801fb18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801f76c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f76e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f772:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f776:	1e48      	subs	r0, r1, #1
 801f778:	1e56      	subs	r6, r2, #1
 801f77a:	9b06      	ldr	r3, [sp, #24]
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	f340 80b7 	ble.w	801f8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f782:	ea5f 472b 	movs.w	r7, fp, asr #16
 801f786:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f78a:	d406      	bmi.n	801f79a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f78c:	4287      	cmp	r7, r0
 801f78e:	da04      	bge.n	801f79a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f790:	2b00      	cmp	r3, #0
 801f792:	db02      	blt.n	801f79a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f794:	42b3      	cmp	r3, r6
 801f796:	f2c0 80ac 	blt.w	801f8f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801f79a:	3701      	adds	r7, #1
 801f79c:	f100 809d 	bmi.w	801f8da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f7a0:	42b9      	cmp	r1, r7
 801f7a2:	f2c0 809a 	blt.w	801f8da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f7a6:	3301      	adds	r3, #1
 801f7a8:	f100 8097 	bmi.w	801f8da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f7ac:	429a      	cmp	r2, r3
 801f7ae:	f2c0 8094 	blt.w	801f8da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f7b2:	9b06      	ldr	r3, [sp, #24]
 801f7b4:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7b6:	9b07      	ldr	r3, [sp, #28]
 801f7b8:	9309      	str	r3, [sp, #36]	; 0x24
 801f7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	f340 80b5 	ble.w	801f92c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f7c2:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f7c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f7c6:	68c7      	ldr	r7, [r0, #12]
 801f7c8:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f7cc:	ea4f 4625 	mov.w	r6, r5, asr #16
 801f7d0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f7d4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f7d8:	6892      	ldr	r2, [r2, #8]
 801f7da:	f100 80fb 	bmi.w	801f9d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f7de:	f102 3cff 	add.w	ip, r2, #4294967295
 801f7e2:	4560      	cmp	r0, ip
 801f7e4:	f280 80f6 	bge.w	801f9d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f7e8:	2e00      	cmp	r6, #0
 801f7ea:	f2c0 80f3 	blt.w	801f9d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f7ee:	f107 3cff 	add.w	ip, r7, #4294967295
 801f7f2:	4566      	cmp	r6, ip
 801f7f4:	f280 80ee 	bge.w	801f9d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f7f8:	b212      	sxth	r2, r2
 801f7fa:	fb06 0002 	mla	r0, r6, r2, r0
 801f7fe:	9e08      	ldr	r6, [sp, #32]
 801f800:	1837      	adds	r7, r6, r0
 801f802:	5c30      	ldrb	r0, [r6, r0]
 801f804:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801f808:	eb04 0c08 	add.w	ip, r4, r8
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	f000 80d3 	beq.w	801f9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f812:	787e      	ldrb	r6, [r7, #1]
 801f814:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f818:	4426      	add	r6, r4
 801f81a:	2900      	cmp	r1, #0
 801f81c:	f000 80d4 	beq.w	801f9c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801f820:	18b8      	adds	r0, r7, r2
 801f822:	7840      	ldrb	r0, [r0, #1]
 801f824:	5cba      	ldrb	r2, [r7, r2]
 801f826:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f82a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f82e:	4422      	add	r2, r4
 801f830:	4420      	add	r0, r4
 801f832:	b29b      	uxth	r3, r3
 801f834:	b289      	uxth	r1, r1
 801f836:	fb03 f901 	mul.w	r9, r3, r1
 801f83a:	011b      	lsls	r3, r3, #4
 801f83c:	78b7      	ldrb	r7, [r6, #2]
 801f83e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f842:	eba3 0309 	sub.w	r3, r3, r9
 801f846:	b29b      	uxth	r3, r3
 801f848:	435f      	muls	r7, r3
 801f84a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f84e:	b289      	uxth	r1, r1
 801f850:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f854:	ebae 0e01 	sub.w	lr, lr, r1
 801f858:	fa1f fe8e 	uxth.w	lr, lr
 801f85c:	fb0e 770a 	mla	r7, lr, sl, r7
 801f860:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f864:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f868:	fb01 770a 	mla	r7, r1, sl, r7
 801f86c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f870:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f874:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f878:	f896 8000 	ldrb.w	r8, [r6]
 801f87c:	7876      	ldrb	r6, [r6, #1]
 801f87e:	fb03 f808 	mul.w	r8, r3, r8
 801f882:	fb0e 8807 	mla	r8, lr, r7, r8
 801f886:	7817      	ldrb	r7, [r2, #0]
 801f888:	4373      	muls	r3, r6
 801f88a:	fb01 8807 	mla	r8, r1, r7, r8
 801f88e:	7807      	ldrb	r7, [r0, #0]
 801f890:	fb0e 330c 	mla	r3, lr, ip, r3
 801f894:	fb09 8707 	mla	r7, r9, r7, r8
 801f898:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f89c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f8a0:	ea47 070a 	orr.w	r7, r7, sl
 801f8a4:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f8a8:	fb01 310a 	mla	r1, r1, sl, r3
 801f8ac:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8b2:	fb09 1a0a 	mla	sl, r9, sl, r1
 801f8b6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f8ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f8be:	ea47 070a 	orr.w	r7, r7, sl
 801f8c2:	801f      	strh	r7, [r3, #0]
 801f8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8c6:	3302      	adds	r3, #2
 801f8c8:	9309      	str	r3, [sp, #36]	; 0x24
 801f8ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f8cc:	449b      	add	fp, r3
 801f8ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f8d0:	441d      	add	r5, r3
 801f8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8d4:	3b01      	subs	r3, #1
 801f8d6:	930b      	str	r3, [sp, #44]	; 0x2c
 801f8d8:	e76f      	b.n	801f7ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f8da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f8dc:	449b      	add	fp, r3
 801f8de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f8e0:	441d      	add	r5, r3
 801f8e2:	9b06      	ldr	r3, [sp, #24]
 801f8e4:	3b01      	subs	r3, #1
 801f8e6:	9306      	str	r3, [sp, #24]
 801f8e8:	9b07      	ldr	r3, [sp, #28]
 801f8ea:	3302      	adds	r3, #2
 801f8ec:	9307      	str	r3, [sp, #28]
 801f8ee:	e744      	b.n	801f77a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f8f0:	d023      	beq.n	801f93a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801f8f2:	9b06      	ldr	r3, [sp, #24]
 801f8f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f8f6:	3b01      	subs	r3, #1
 801f8f8:	fb00 b003 	mla	r0, r0, r3, fp
 801f8fc:	1400      	asrs	r0, r0, #16
 801f8fe:	f53f af58 	bmi.w	801f7b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f902:	3901      	subs	r1, #1
 801f904:	4288      	cmp	r0, r1
 801f906:	f6bf af54 	bge.w	801f7b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f90a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f90c:	fb01 5303 	mla	r3, r1, r3, r5
 801f910:	141b      	asrs	r3, r3, #16
 801f912:	f53f af4e 	bmi.w	801f7b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f916:	3a01      	subs	r2, #1
 801f918:	4293      	cmp	r3, r2
 801f91a:	f6bf af4a 	bge.w	801f7b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f91e:	9b06      	ldr	r3, [sp, #24]
 801f920:	9309      	str	r3, [sp, #36]	; 0x24
 801f922:	9b07      	ldr	r3, [sp, #28]
 801f924:	930b      	str	r3, [sp, #44]	; 0x2c
 801f926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f928:	2b00      	cmp	r3, #0
 801f92a:	dc70      	bgt.n	801fa0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801f92c:	9b06      	ldr	r3, [sp, #24]
 801f92e:	9a07      	ldr	r2, [sp, #28]
 801f930:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f934:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f938:	9307      	str	r3, [sp, #28]
 801f93a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f93c:	2b00      	cmp	r3, #0
 801f93e:	f340 80eb 	ble.w	801fb18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801f942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f946:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f94a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f94e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f952:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f956:	eef0 6a62 	vmov.f32	s13, s5
 801f95a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f95e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f962:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f966:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f96a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f96e:	ee16 ba90 	vmov	fp, s13
 801f972:	eef0 6a43 	vmov.f32	s13, s6
 801f976:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f97a:	ee12 2a90 	vmov	r2, s5
 801f97e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f982:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f984:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f988:	fb92 f3f3 	sdiv	r3, r2, r3
 801f98c:	ee13 2a10 	vmov	r2, s6
 801f990:	931b      	str	r3, [sp, #108]	; 0x6c
 801f992:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f994:	ee16 5a90 	vmov	r5, s13
 801f998:	fb92 f3f3 	sdiv	r3, r2, r3
 801f99c:	931c      	str	r3, [sp, #112]	; 0x70
 801f99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f9a2:	3b01      	subs	r3, #1
 801f9a4:	930a      	str	r3, [sp, #40]	; 0x28
 801f9a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f9a8:	bf08      	it	eq
 801f9aa:	4613      	moveq	r3, r2
 801f9ac:	eeb0 3a67 	vmov.f32	s6, s15
 801f9b0:	9306      	str	r3, [sp, #24]
 801f9b2:	eef0 2a47 	vmov.f32	s5, s14
 801f9b6:	e6d2      	b.n	801f75e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f9b8:	b149      	cbz	r1, 801f9ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f9ba:	4660      	mov	r0, ip
 801f9bc:	5cba      	ldrb	r2, [r7, r2]
 801f9be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f9c2:	4422      	add	r2, r4
 801f9c4:	4666      	mov	r6, ip
 801f9c6:	e734      	b.n	801f832 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f9c8:	4660      	mov	r0, ip
 801f9ca:	4662      	mov	r2, ip
 801f9cc:	e731      	b.n	801f832 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f9ce:	4660      	mov	r0, ip
 801f9d0:	4662      	mov	r2, ip
 801f9d2:	e7f7      	b.n	801f9c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801f9d4:	f110 0c01 	adds.w	ip, r0, #1
 801f9d8:	f53f af74 	bmi.w	801f8c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f9dc:	4562      	cmp	r2, ip
 801f9de:	f6ff af71 	blt.w	801f8c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f9e2:	f116 0c01 	adds.w	ip, r6, #1
 801f9e6:	f53f af6d 	bmi.w	801f8c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f9ea:	4567      	cmp	r7, ip
 801f9ec:	f6ff af6a 	blt.w	801f8c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f9f0:	b23f      	sxth	r7, r7
 801f9f2:	b212      	sxth	r2, r2
 801f9f4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f9f8:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801f9fc:	9200      	str	r2, [sp, #0]
 801f9fe:	9701      	str	r7, [sp, #4]
 801fa00:	4623      	mov	r3, r4
 801fa02:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801fa06:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fa08:	f7ff fde6 	bl	801f5d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801fa0c:	e75a      	b.n	801f8c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fa0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fa10:	ea4f 462b 	mov.w	r6, fp, asr #16
 801fa14:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fa18:	1428      	asrs	r0, r5, #16
 801fa1a:	fb02 6000 	mla	r0, r2, r0, r6
 801fa1e:	9e08      	ldr	r6, [sp, #32]
 801fa20:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801fa24:	f816 8000 	ldrb.w	r8, [r6, r0]
 801fa28:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fa2c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fa30:	1837      	adds	r7, r6, r0
 801fa32:	eb04 0c08 	add.w	ip, r4, r8
 801fa36:	2b00      	cmp	r3, #0
 801fa38:	d060      	beq.n	801fafc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 801fa3a:	787e      	ldrb	r6, [r7, #1]
 801fa3c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fa40:	4426      	add	r6, r4
 801fa42:	2900      	cmp	r1, #0
 801fa44:	d062      	beq.n	801fb0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 801fa46:	18b8      	adds	r0, r7, r2
 801fa48:	7840      	ldrb	r0, [r0, #1]
 801fa4a:	5cba      	ldrb	r2, [r7, r2]
 801fa4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fa50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa54:	4422      	add	r2, r4
 801fa56:	4420      	add	r0, r4
 801fa58:	b29b      	uxth	r3, r3
 801fa5a:	b289      	uxth	r1, r1
 801fa5c:	fb03 f901 	mul.w	r9, r3, r1
 801fa60:	011b      	lsls	r3, r3, #4
 801fa62:	78b7      	ldrb	r7, [r6, #2]
 801fa64:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fa68:	eba3 0309 	sub.w	r3, r3, r9
 801fa6c:	b29b      	uxth	r3, r3
 801fa6e:	435f      	muls	r7, r3
 801fa70:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fa74:	b289      	uxth	r1, r1
 801fa76:	f89c a002 	ldrb.w	sl, [ip, #2]
 801fa7a:	ebae 0e01 	sub.w	lr, lr, r1
 801fa7e:	fa1f fe8e 	uxth.w	lr, lr
 801fa82:	fb0e 770a 	mla	r7, lr, sl, r7
 801fa86:	f892 a002 	ldrb.w	sl, [r2, #2]
 801fa8a:	f89c c001 	ldrb.w	ip, [ip, #1]
 801fa8e:	fb01 770a 	mla	r7, r1, sl, r7
 801fa92:	f890 a002 	ldrb.w	sl, [r0, #2]
 801fa96:	fb09 7a0a 	mla	sl, r9, sl, r7
 801fa9a:	f814 7008 	ldrb.w	r7, [r4, r8]
 801fa9e:	f896 8000 	ldrb.w	r8, [r6]
 801faa2:	7876      	ldrb	r6, [r6, #1]
 801faa4:	fb03 f808 	mul.w	r8, r3, r8
 801faa8:	fb0e 8807 	mla	r8, lr, r7, r8
 801faac:	7817      	ldrb	r7, [r2, #0]
 801faae:	4373      	muls	r3, r6
 801fab0:	fb01 8807 	mla	r8, r1, r7, r8
 801fab4:	7807      	ldrb	r7, [r0, #0]
 801fab6:	fb0e 330c 	mla	r3, lr, ip, r3
 801faba:	fb09 8707 	mla	r7, r9, r7, r8
 801fabe:	7856      	ldrb	r6, [r2, #1]
 801fac0:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801fac4:	fb01 3306 	mla	r3, r1, r6, r3
 801fac8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801facc:	ea47 070a 	orr.w	r7, r7, sl
 801fad0:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fad4:	fb09 3a0a 	mla	sl, r9, sl, r3
 801fad8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fadc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fade:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fae2:	ea47 070a 	orr.w	r7, r7, sl
 801fae6:	f823 7b02 	strh.w	r7, [r3], #2
 801faea:	930b      	str	r3, [sp, #44]	; 0x2c
 801faec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801faee:	449b      	add	fp, r3
 801faf0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801faf2:	441d      	add	r5, r3
 801faf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801faf6:	3b01      	subs	r3, #1
 801faf8:	9309      	str	r3, [sp, #36]	; 0x24
 801fafa:	e714      	b.n	801f926 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fafc:	b149      	cbz	r1, 801fb12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801fafe:	4660      	mov	r0, ip
 801fb00:	5cba      	ldrb	r2, [r7, r2]
 801fb02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb06:	4422      	add	r2, r4
 801fb08:	4666      	mov	r6, ip
 801fb0a:	e7a5      	b.n	801fa58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801fb0c:	4660      	mov	r0, ip
 801fb0e:	4662      	mov	r2, ip
 801fb10:	e7a2      	b.n	801fa58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801fb12:	4660      	mov	r0, ip
 801fb14:	4662      	mov	r2, ip
 801fb16:	e7f7      	b.n	801fb08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 801fb18:	b00f      	add	sp, #60	; 0x3c
 801fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801fb1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb22:	b085      	sub	sp, #20
 801fb24:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fb28:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801fb2c:	9102      	str	r1, [sp, #8]
 801fb2e:	fb04 710c 	mla	r1, r4, ip, r7
 801fb32:	2c00      	cmp	r4, #0
 801fb34:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801fb38:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801fb3c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801fb40:	eb02 0e01 	add.w	lr, r2, r1
 801fb44:	f2c0 8122 	blt.w	801fd8c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fb48:	45a0      	cmp	r8, r4
 801fb4a:	f340 811f 	ble.w	801fd8c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fb4e:	2f00      	cmp	r7, #0
 801fb50:	f2c0 811a 	blt.w	801fd88 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fb54:	45bc      	cmp	ip, r7
 801fb56:	f340 8117 	ble.w	801fd88 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fb5a:	5c52      	ldrb	r2, [r2, r1]
 801fb5c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fb60:	1c7a      	adds	r2, r7, #1
 801fb62:	f100 8116 	bmi.w	801fd92 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fb66:	4594      	cmp	ip, r2
 801fb68:	f340 8113 	ble.w	801fd92 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fb6c:	2e00      	cmp	r6, #0
 801fb6e:	f000 8112 	beq.w	801fd96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801fb72:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fb76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fb7a:	3401      	adds	r4, #1
 801fb7c:	f100 810f 	bmi.w	801fd9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fb80:	45a0      	cmp	r8, r4
 801fb82:	f340 810c 	ble.w	801fd9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fb86:	2800      	cmp	r0, #0
 801fb88:	f000 810c 	beq.w	801fda4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801fb8c:	2f00      	cmp	r7, #0
 801fb8e:	f2c0 8104 	blt.w	801fd9a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fb92:	45bc      	cmp	ip, r7
 801fb94:	f340 8101 	ble.w	801fd9a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fb98:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801fb9c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fba0:	3701      	adds	r7, #1
 801fba2:	f100 8102 	bmi.w	801fdaa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fba6:	45bc      	cmp	ip, r7
 801fba8:	f340 80ff 	ble.w	801fdaa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fbac:	2e00      	cmp	r6, #0
 801fbae:	f000 80fe 	beq.w	801fdae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801fbb2:	44f4      	add	ip, lr
 801fbb4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fbb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fbbc:	b2b6      	uxth	r6, r6
 801fbbe:	b280      	uxth	r0, r0
 801fbc0:	fb00 fe06 	mul.w	lr, r0, r6
 801fbc4:	0136      	lsls	r6, r6, #4
 801fbc6:	eba6 070e 	sub.w	r7, r6, lr
 801fbca:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801fbce:	b2bf      	uxth	r7, r7
 801fbd0:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801fbd4:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801fbd8:	fb0a f607 	mul.w	r6, sl, r7
 801fbdc:	b280      	uxth	r0, r0
 801fbde:	1a1b      	subs	r3, r3, r0
 801fbe0:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801fbe4:	b29b      	uxth	r3, r3
 801fbe6:	fb0b 6603 	mla	r6, fp, r3, r6
 801fbea:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fbee:	fb00 6609 	mla	r6, r0, r9, r6
 801fbf2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fbf6:	fb0e 6608 	mla	r6, lr, r8, r6
 801fbfa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fbfe:	9600      	str	r6, [sp, #0]
 801fc00:	2e00      	cmp	r6, #0
 801fc02:	f000 80be 	beq.w	801fd82 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801fc06:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801fc0a:	fb0b fc0c 	mul.w	ip, fp, ip
 801fc0e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fc12:	fb0b f505 	mul.w	r5, fp, r5
 801fc16:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fc1a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fc1e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fc22:	44dc      	add	ip, fp
 801fc24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc28:	9501      	str	r5, [sp, #4]
 801fc2a:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801fc2e:	9503      	str	r5, [sp, #12]
 801fc30:	9d01      	ldr	r5, [sp, #4]
 801fc32:	9e02      	ldr	r6, [sp, #8]
 801fc34:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801fc38:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fc3c:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801fc40:	fb0a fc0c 	mul.w	ip, sl, ip
 801fc44:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801fc48:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801fc4c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fc50:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fc54:	4465      	add	r5, ip
 801fc56:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fc5a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fc5e:	fb09 fc0c 	mul.w	ip, r9, ip
 801fc62:	fb09 f904 	mul.w	r9, r9, r4
 801fc66:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801fc6a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fc6e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801fc72:	fb08 f404 	mul.w	r4, r8, r4
 801fc76:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fc7a:	fb08 f802 	mul.w	r8, r8, r2
 801fc7e:	0a2d      	lsrs	r5, r5, #8
 801fc80:	0a22      	lsrs	r2, r4, #8
 801fc82:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fc86:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fc8a:	437d      	muls	r5, r7
 801fc8c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801fc90:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801fc94:	4414      	add	r4, r2
 801fc96:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801fc9a:	fb0a fa01 	mul.w	sl, sl, r1
 801fc9e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fca2:	9a03      	ldr	r2, [sp, #12]
 801fca4:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801fca8:	fb02 5503 	mla	r5, r2, r3, r5
 801fcac:	0a24      	lsrs	r4, r4, #8
 801fcae:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801fcb2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fcb6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801fcba:	fb04 540e 	mla	r4, r4, lr, r5
 801fcbe:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801fcc2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fcc6:	4461      	add	r1, ip
 801fcc8:	0a09      	lsrs	r1, r1, #8
 801fcca:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801fcce:	fb01 4100 	mla	r1, r1, r0, r4
 801fcd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fcd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fcda:	fb07 f70a 	mul.w	r7, r7, sl
 801fcde:	0a09      	lsrs	r1, r1, #8
 801fce0:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801fce4:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801fce8:	fb03 7101 	mla	r1, r3, r1, r7
 801fcec:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fcf0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fcf4:	fb0e 1e08 	mla	lr, lr, r8, r1
 801fcf8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fcfc:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801fd00:	fb00 e101 	mla	r1, r0, r1, lr
 801fd04:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801fd08:	9a00      	ldr	r2, [sp, #0]
 801fd0a:	b287      	uxth	r7, r0
 801fd0c:	437a      	muls	r2, r7
 801fd0e:	1c53      	adds	r3, r2, #1
 801fd10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fd14:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801fd18:	0a09      	lsrs	r1, r1, #8
 801fd1a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801fd1e:	4321      	orrs	r1, r4
 801fd20:	0c0a      	lsrs	r2, r1, #16
 801fd22:	8836      	ldrh	r6, [r6, #0]
 801fd24:	fb12 f207 	smulbb	r2, r2, r7
 801fd28:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801fd2c:	b2c8      	uxtb	r0, r1
 801fd2e:	1235      	asrs	r5, r6, #8
 801fd30:	fb14 f407 	smulbb	r4, r4, r7
 801fd34:	fb10 f007 	smulbb	r0, r0, r7
 801fd38:	b2db      	uxtb	r3, r3
 801fd3a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fd3e:	fb05 2503 	mla	r5, r5, r3, r2
 801fd42:	10f2      	asrs	r2, r6, #3
 801fd44:	00f6      	lsls	r6, r6, #3
 801fd46:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fd4a:	b2f6      	uxtb	r6, r6
 801fd4c:	fb02 4203 	mla	r2, r2, r3, r4
 801fd50:	fb06 0303 	mla	r3, r6, r3, r0
 801fd54:	b2ad      	uxth	r5, r5
 801fd56:	b299      	uxth	r1, r3
 801fd58:	b294      	uxth	r4, r2
 801fd5a:	1c6b      	adds	r3, r5, #1
 801fd5c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fd60:	1c62      	adds	r2, r4, #1
 801fd62:	1c4b      	adds	r3, r1, #1
 801fd64:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fd68:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fd6c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fd70:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fd74:	0952      	lsrs	r2, r2, #5
 801fd76:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fd7a:	432b      	orrs	r3, r5
 801fd7c:	4313      	orrs	r3, r2
 801fd7e:	9a02      	ldr	r2, [sp, #8]
 801fd80:	8013      	strh	r3, [r2, #0]
 801fd82:	b005      	add	sp, #20
 801fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd88:	2500      	movs	r5, #0
 801fd8a:	e6e9      	b.n	801fb60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801fd8c:	2100      	movs	r1, #0
 801fd8e:	460d      	mov	r5, r1
 801fd90:	e6f3      	b.n	801fb7a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fd92:	2100      	movs	r1, #0
 801fd94:	e6f1      	b.n	801fb7a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fd96:	4631      	mov	r1, r6
 801fd98:	e6ef      	b.n	801fb7a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fd9a:	2400      	movs	r4, #0
 801fd9c:	e700      	b.n	801fba0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801fd9e:	2200      	movs	r2, #0
 801fda0:	4614      	mov	r4, r2
 801fda2:	e70b      	b.n	801fbbc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fda4:	4602      	mov	r2, r0
 801fda6:	4604      	mov	r4, r0
 801fda8:	e708      	b.n	801fbbc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fdaa:	2200      	movs	r2, #0
 801fdac:	e706      	b.n	801fbbc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fdae:	4632      	mov	r2, r6
 801fdb0:	e704      	b.n	801fbbc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801fdb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdb6:	b09f      	sub	sp, #124	; 0x7c
 801fdb8:	921b      	str	r2, [sp, #108]	; 0x6c
 801fdba:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fdbc:	901d      	str	r0, [sp, #116]	; 0x74
 801fdbe:	9309      	str	r3, [sp, #36]	; 0x24
 801fdc0:	6850      	ldr	r0, [r2, #4]
 801fdc2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801fdc6:	9119      	str	r1, [sp, #100]	; 0x64
 801fdc8:	931c      	str	r3, [sp, #112]	; 0x70
 801fdca:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801fdce:	fb00 1303 	mla	r3, r0, r3, r1
 801fdd2:	6812      	ldr	r2, [r2, #0]
 801fdd4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801fdd6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fdda:	930c      	str	r3, [sp, #48]	; 0x30
 801fddc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fdde:	681b      	ldr	r3, [r3, #0]
 801fde0:	9312      	str	r3, [sp, #72]	; 0x48
 801fde2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fde4:	685e      	ldr	r6, [r3, #4]
 801fde6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801fdea:	3604      	adds	r6, #4
 801fdec:	930d      	str	r3, [sp, #52]	; 0x34
 801fdee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	dc03      	bgt.n	801fdfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fdf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	f340 8387 	ble.w	802050a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801fdfc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fdfe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe02:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe06:	1e48      	subs	r0, r1, #1
 801fe08:	1e57      	subs	r7, r2, #1
 801fe0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	f340 8194 	ble.w	802013a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801fe12:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801fe14:	142b      	asrs	r3, r5, #16
 801fe16:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801fe1a:	d406      	bmi.n	801fe2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fe1c:	4584      	cmp	ip, r0
 801fe1e:	da04      	bge.n	801fe2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	db02      	blt.n	801fe2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fe24:	42bb      	cmp	r3, r7
 801fe26:	f2c0 8189 	blt.w	802013c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fe2a:	f11c 0c01 	adds.w	ip, ip, #1
 801fe2e:	f100 8177 	bmi.w	8020120 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fe32:	4561      	cmp	r1, ip
 801fe34:	f2c0 8174 	blt.w	8020120 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fe38:	3301      	adds	r3, #1
 801fe3a:	f100 8171 	bmi.w	8020120 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fe3e:	429a      	cmp	r2, r3
 801fe40:	f2c0 816e 	blt.w	8020120 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fe44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fe48:	931a      	str	r3, [sp, #104]	; 0x68
 801fe4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	f340 8193 	ble.w	8020178 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801fe52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fe54:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fe58:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fe5c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fe5e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fe62:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801fe66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fe68:	141b      	asrs	r3, r3, #16
 801fe6a:	f100 81d6 	bmi.w	802021a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fe6e:	f100 38ff 	add.w	r8, r0, #4294967295
 801fe72:	4543      	cmp	r3, r8
 801fe74:	f280 81d1 	bge.w	802021a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fe78:	f1bc 0f00 	cmp.w	ip, #0
 801fe7c:	f2c0 81cd 	blt.w	802021a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fe80:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fe84:	45c4      	cmp	ip, r8
 801fe86:	f280 81c8 	bge.w	802021a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fe8a:	b200      	sxth	r0, r0
 801fe8c:	fb0c 3300 	mla	r3, ip, r0, r3
 801fe90:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fe92:	eb04 0803 	add.w	r8, r4, r3
 801fe96:	5ce3      	ldrb	r3, [r4, r3]
 801fe98:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fe9c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fea0:	2a00      	cmp	r2, #0
 801fea2:	f000 81af 	beq.w	8020204 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fea6:	f898 c001 	ldrb.w	ip, [r8, #1]
 801feaa:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801feae:	940e      	str	r4, [sp, #56]	; 0x38
 801feb0:	0e24      	lsrs	r4, r4, #24
 801feb2:	9415      	str	r4, [sp, #84]	; 0x54
 801feb4:	b179      	cbz	r1, 801fed6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801feb6:	eb08 0c00 	add.w	ip, r8, r0
 801feba:	f818 0000 	ldrb.w	r0, [r8, r0]
 801febe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fec2:	900a      	str	r0, [sp, #40]	; 0x28
 801fec4:	0e00      	lsrs	r0, r0, #24
 801fec6:	9013      	str	r0, [sp, #76]	; 0x4c
 801fec8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fecc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fed0:	900f      	str	r0, [sp, #60]	; 0x3c
 801fed2:	0e00      	lsrs	r0, r0, #24
 801fed4:	9016      	str	r0, [sp, #88]	; 0x58
 801fed6:	b292      	uxth	r2, r2
 801fed8:	b289      	uxth	r1, r1
 801feda:	fb02 f901 	mul.w	r9, r2, r1
 801fede:	0112      	lsls	r2, r2, #4
 801fee0:	eba2 0809 	sub.w	r8, r2, r9
 801fee4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fee6:	fa1f f888 	uxth.w	r8, r8
 801feea:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801feee:	fb08 f000 	mul.w	r0, r8, r0
 801fef2:	b289      	uxth	r1, r1
 801fef4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fef8:	1a52      	subs	r2, r2, r1
 801fefa:	b292      	uxth	r2, r2
 801fefc:	fb02 000e 	mla	r0, r2, lr, r0
 801ff00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ff02:	fb01 0004 	mla	r0, r1, r4, r0
 801ff06:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ff08:	fb09 0004 	mla	r0, r9, r4, r0
 801ff0c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ff10:	2800      	cmp	r0, #0
 801ff12:	f000 80fa 	beq.w	802010a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801ff16:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ff1a:	d01b      	beq.n	801ff54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801ff1c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ff20:	fb0e fa0a 	mul.w	sl, lr, sl
 801ff24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff28:	fb0e fe03 	mul.w	lr, lr, r3
 801ff2c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ff30:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff34:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ff38:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ff3c:	4453      	add	r3, sl
 801ff3e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ff42:	0a1b      	lsrs	r3, r3, #8
 801ff44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff48:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff4c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ff50:	ea43 030c 	orr.w	r3, r3, ip
 801ff54:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff56:	2cff      	cmp	r4, #255	; 0xff
 801ff58:	d021      	beq.n	801ff9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801ff5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ff5c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ff60:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff62:	fb04 fb0b 	mul.w	fp, r4, fp
 801ff66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ff68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ff6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ff70:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ff76:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff7a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ff7e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ff82:	44de      	add	lr, fp
 801ff84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ff88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ff94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ff98:	ea4e 040a 	orr.w	r4, lr, sl
 801ff9c:	940e      	str	r4, [sp, #56]	; 0x38
 801ff9e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ffa0:	2cff      	cmp	r4, #255	; 0xff
 801ffa2:	d021      	beq.n	801ffe8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ffa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ffa6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ffaa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ffac:	fb04 fb0b 	mul.w	fp, r4, fp
 801ffb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ffb2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ffb6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ffba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ffbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ffc0:	fb04 fa0a 	mul.w	sl, r4, sl
 801ffc4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ffc8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ffcc:	44de      	add	lr, fp
 801ffce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ffd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ffd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ffde:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ffe2:	ea4e 040a 	orr.w	r4, lr, sl
 801ffe6:	940a      	str	r4, [sp, #40]	; 0x28
 801ffe8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ffea:	2cff      	cmp	r4, #255	; 0xff
 801ffec:	d021      	beq.n	8020032 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801ffee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fff0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fff4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fff6:	fb04 fb0b 	mul.w	fp, r4, fp
 801fffa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fffc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020000:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020004:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020006:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802000a:	fb04 fa0a 	mul.w	sl, r4, sl
 802000e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020012:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020016:	44de      	add	lr, fp
 8020018:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802001c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020020:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020024:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020028:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802002c:	ea4e 040a 	orr.w	r4, lr, sl
 8020030:	940f      	str	r4, [sp, #60]	; 0x3c
 8020032:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020034:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020038:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802003c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020040:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020044:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020046:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802004a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802004e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020052:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020054:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020058:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802005a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802005e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020062:	fb08 f80e 	mul.w	r8, r8, lr
 8020066:	fb02 8303 	mla	r3, r2, r3, r8
 802006a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802006c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020070:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020074:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020076:	fb01 330a 	mla	r3, r1, sl, r3
 802007a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802007e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020080:	fb09 3901 	mla	r9, r9, r1, r3
 8020084:	4342      	muls	r2, r0
 8020086:	1c50      	adds	r0, r2, #1
 8020088:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802008c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020090:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020094:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020098:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802009c:	ea4c 0c09 	orr.w	ip, ip, r9
 80200a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80200a2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80200a6:	883b      	ldrh	r3, [r7, #0]
 80200a8:	fb12 f204 	smulbb	r2, r2, r4
 80200ac:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80200b0:	fa5f fc8c 	uxtb.w	ip, ip
 80200b4:	1219      	asrs	r1, r3, #8
 80200b6:	fb1c fc04 	smulbb	ip, ip, r4
 80200ba:	b2c0      	uxtb	r0, r0
 80200bc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80200c0:	fb01 2100 	mla	r1, r1, r0, r2
 80200c4:	10da      	asrs	r2, r3, #3
 80200c6:	00db      	lsls	r3, r3, #3
 80200c8:	fb1e fe04 	smulbb	lr, lr, r4
 80200cc:	b2db      	uxtb	r3, r3
 80200ce:	fb03 c300 	mla	r3, r3, r0, ip
 80200d2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80200d6:	b289      	uxth	r1, r1
 80200d8:	fb02 e200 	mla	r2, r2, r0, lr
 80200dc:	fa1f fc83 	uxth.w	ip, r3
 80200e0:	1c4b      	adds	r3, r1, #1
 80200e2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80200e6:	f10c 0301 	add.w	r3, ip, #1
 80200ea:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80200ee:	b292      	uxth	r2, r2
 80200f0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80200f4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80200f8:	430b      	orrs	r3, r1
 80200fa:	1c51      	adds	r1, r2, #1
 80200fc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020100:	0952      	lsrs	r2, r2, #5
 8020102:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020106:	4313      	orrs	r3, r2
 8020108:	803b      	strh	r3, [r7, #0]
 802010a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802010c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802010e:	3702      	adds	r7, #2
 8020110:	441a      	add	r2, r3
 8020112:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020114:	9229      	str	r2, [sp, #164]	; 0xa4
 8020116:	441d      	add	r5, r3
 8020118:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802011a:	3b01      	subs	r3, #1
 802011c:	931a      	str	r3, [sp, #104]	; 0x68
 802011e:	e694      	b.n	801fe4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020120:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020122:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020124:	441c      	add	r4, r3
 8020126:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020128:	9429      	str	r4, [sp, #164]	; 0xa4
 802012a:	441d      	add	r5, r3
 802012c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802012e:	3b01      	subs	r3, #1
 8020130:	9309      	str	r3, [sp, #36]	; 0x24
 8020132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020134:	3302      	adds	r3, #2
 8020136:	930c      	str	r3, [sp, #48]	; 0x30
 8020138:	e667      	b.n	801fe0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802013a:	d024      	beq.n	8020186 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 802013c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802013e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020140:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020142:	3b01      	subs	r3, #1
 8020144:	fb00 4003 	mla	r0, r0, r3, r4
 8020148:	1400      	asrs	r0, r0, #16
 802014a:	f53f ae7b 	bmi.w	801fe44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802014e:	3901      	subs	r1, #1
 8020150:	4288      	cmp	r0, r1
 8020152:	f6bf ae77 	bge.w	801fe44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020156:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020158:	fb01 5303 	mla	r3, r1, r3, r5
 802015c:	141b      	asrs	r3, r3, #16
 802015e:	f53f ae71 	bmi.w	801fe44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020162:	3a01      	subs	r2, #1
 8020164:	4293      	cmp	r3, r2
 8020166:	f6bf ae6d 	bge.w	801fe44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802016a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802016e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020172:	f1bb 0f00 	cmp.w	fp, #0
 8020176:	dc70      	bgt.n	802025a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8020178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802017a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802017e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020180:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020184:	930c      	str	r3, [sp, #48]	; 0x30
 8020186:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020188:	2b00      	cmp	r3, #0
 802018a:	f340 81be 	ble.w	802050a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 802018e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020192:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020196:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802019a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802019e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201a2:	eef0 6a62 	vmov.f32	s13, s5
 80201a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201ba:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80201be:	eef0 6a43 	vmov.f32	s13, s6
 80201c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201c6:	ee12 2a90 	vmov	r2, s5
 80201ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80201d8:	ee13 2a10 	vmov	r2, s6
 80201dc:	932b      	str	r3, [sp, #172]	; 0xac
 80201de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201e0:	ee16 5a90 	vmov	r5, s13
 80201e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80201e8:	932c      	str	r3, [sp, #176]	; 0xb0
 80201ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80201ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80201ee:	3b01      	subs	r3, #1
 80201f0:	9319      	str	r3, [sp, #100]	; 0x64
 80201f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201f4:	bf08      	it	eq
 80201f6:	4613      	moveq	r3, r2
 80201f8:	eeb0 3a67 	vmov.f32	s6, s15
 80201fc:	9309      	str	r3, [sp, #36]	; 0x24
 80201fe:	eef0 2a47 	vmov.f32	s5, s14
 8020202:	e5f4      	b.n	801fdee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020204:	2900      	cmp	r1, #0
 8020206:	f43f ae66 	beq.w	801fed6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802020a:	f818 0000 	ldrb.w	r0, [r8, r0]
 802020e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020212:	900a      	str	r0, [sp, #40]	; 0x28
 8020214:	0e00      	lsrs	r0, r0, #24
 8020216:	9013      	str	r0, [sp, #76]	; 0x4c
 8020218:	e65d      	b.n	801fed6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802021a:	f113 0801 	adds.w	r8, r3, #1
 802021e:	f53f af74 	bmi.w	802010a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020222:	4540      	cmp	r0, r8
 8020224:	f6ff af71 	blt.w	802010a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020228:	f11c 0801 	adds.w	r8, ip, #1
 802022c:	f53f af6d 	bmi.w	802010a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020230:	45c6      	cmp	lr, r8
 8020232:	f6ff af6a 	blt.w	802010a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020236:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020238:	9302      	str	r3, [sp, #8]
 802023a:	b200      	sxth	r0, r0
 802023c:	fa0f f38e 	sxth.w	r3, lr
 8020240:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020244:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020248:	9301      	str	r3, [sp, #4]
 802024a:	9000      	str	r0, [sp, #0]
 802024c:	4633      	mov	r3, r6
 802024e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020250:	4639      	mov	r1, r7
 8020252:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020254:	f7ff fc63 	bl	801fb1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8020258:	e757      	b.n	802010a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802025a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802025c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802025e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020262:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020264:	1427      	asrs	r7, r4, #16
 8020266:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802026a:	142b      	asrs	r3, r5, #16
 802026c:	fb01 7303 	mla	r3, r1, r3, r7
 8020270:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020272:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020276:	18e7      	adds	r7, r4, r3
 8020278:	5ce3      	ldrb	r3, [r4, r3]
 802027a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802027e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020282:	2a00      	cmp	r2, #0
 8020284:	f000 8137 	beq.w	80204f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8020288:	f897 e001 	ldrb.w	lr, [r7, #1]
 802028c:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020290:	9410      	str	r4, [sp, #64]	; 0x40
 8020292:	0e24      	lsrs	r4, r4, #24
 8020294:	9417      	str	r4, [sp, #92]	; 0x5c
 8020296:	b170      	cbz	r0, 80202b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020298:	eb07 0e01 	add.w	lr, r7, r1
 802029c:	5c79      	ldrb	r1, [r7, r1]
 802029e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80202a4:	0e09      	lsrs	r1, r1, #24
 80202a6:	9114      	str	r1, [sp, #80]	; 0x50
 80202a8:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80202ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202b0:	9111      	str	r1, [sp, #68]	; 0x44
 80202b2:	0e09      	lsrs	r1, r1, #24
 80202b4:	9118      	str	r1, [sp, #96]	; 0x60
 80202b6:	b292      	uxth	r2, r2
 80202b8:	b280      	uxth	r0, r0
 80202ba:	fb02 f800 	mul.w	r8, r2, r0
 80202be:	0112      	lsls	r2, r2, #4
 80202c0:	eba2 0e08 	sub.w	lr, r2, r8
 80202c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80202c6:	fa1f fe8e 	uxth.w	lr, lr
 80202ca:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80202ce:	fb0e f101 	mul.w	r1, lr, r1
 80202d2:	b280      	uxth	r0, r0
 80202d4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80202d8:	1a12      	subs	r2, r2, r0
 80202da:	b292      	uxth	r2, r2
 80202dc:	fb02 110c 	mla	r1, r2, ip, r1
 80202e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80202e2:	fb00 1104 	mla	r1, r0, r4, r1
 80202e6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80202e8:	fb08 1104 	mla	r1, r8, r4, r1
 80202ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80202f0:	2900      	cmp	r1, #0
 80202f2:	f000 80f5 	beq.w	80204e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80202f6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80202fa:	d019      	beq.n	8020330 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80202fc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020300:	fb0c fa0a 	mul.w	sl, ip, sl
 8020304:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020308:	fb0c fc03 	mul.w	ip, ip, r3
 802030c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020310:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020314:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020318:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802031c:	4453      	add	r3, sl
 802031e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020322:	0a1b      	lsrs	r3, r3, #8
 8020324:	0a3f      	lsrs	r7, r7, #8
 8020326:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802032a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802032e:	433b      	orrs	r3, r7
 8020330:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020332:	2cff      	cmp	r4, #255	; 0xff
 8020334:	d020      	beq.n	8020378 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8020336:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020338:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802033c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802033e:	4367      	muls	r7, r4
 8020340:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020342:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020346:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802034a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802034c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020350:	fb04 fa0a 	mul.w	sl, r4, sl
 8020354:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020358:	44bc      	add	ip, r7
 802035a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802035e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020362:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020366:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802036a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802036e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020372:	ea4c 040a 	orr.w	r4, ip, sl
 8020376:	9410      	str	r4, [sp, #64]	; 0x40
 8020378:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802037a:	2cff      	cmp	r4, #255	; 0xff
 802037c:	d020      	beq.n	80203c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 802037e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020380:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020384:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020386:	4367      	muls	r7, r4
 8020388:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802038a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802038e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020392:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020394:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020398:	fb04 fa0a 	mul.w	sl, r4, sl
 802039c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203a0:	44bc      	add	ip, r7
 80203a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80203a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80203aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80203ba:	ea4c 040a 	orr.w	r4, ip, sl
 80203be:	940b      	str	r4, [sp, #44]	; 0x2c
 80203c0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80203c2:	2cff      	cmp	r4, #255	; 0xff
 80203c4:	d020      	beq.n	8020408 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80203c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80203cc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80203ce:	4367      	muls	r7, r4
 80203d0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80203d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80203da:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80203dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80203e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80203e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203e8:	44bc      	add	ip, r7
 80203ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80203ee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80203f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020402:	ea4c 040a 	orr.w	r4, ip, sl
 8020406:	9411      	str	r4, [sp, #68]	; 0x44
 8020408:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802040a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802040e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020412:	fb0e f707 	mul.w	r7, lr, r7
 8020416:	fb02 770c 	mla	r7, r2, ip, r7
 802041a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802041c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020420:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020424:	fb00 770c 	mla	r7, r0, ip, r7
 8020428:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802042a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802042e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020430:	fb08 770c 	mla	r7, r8, ip, r7
 8020434:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020438:	fb0e fe0c 	mul.w	lr, lr, ip
 802043c:	fb02 e303 	mla	r3, r2, r3, lr
 8020440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020442:	0a3f      	lsrs	r7, r7, #8
 8020444:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020448:	fb00 330a 	mla	r3, r0, sl, r3
 802044c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802044e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020452:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020456:	fb08 3c0c 	mla	ip, r8, ip, r3
 802045a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802045c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020460:	434b      	muls	r3, r1
 8020462:	1c59      	adds	r1, r3, #1
 8020464:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020468:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802046c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020470:	ea47 070c 	orr.w	r7, r7, ip
 8020474:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020476:	0c3b      	lsrs	r3, r7, #16
 8020478:	f8b9 0000 	ldrh.w	r0, [r9]
 802047c:	fb13 f304 	smulbb	r3, r3, r4
 8020480:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020484:	b2ff      	uxtb	r7, r7
 8020486:	1202      	asrs	r2, r0, #8
 8020488:	fb17 f704 	smulbb	r7, r7, r4
 802048c:	b2c9      	uxtb	r1, r1
 802048e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020492:	fb02 3201 	mla	r2, r2, r1, r3
 8020496:	10c3      	asrs	r3, r0, #3
 8020498:	00c0      	lsls	r0, r0, #3
 802049a:	fb1c fc04 	smulbb	ip, ip, r4
 802049e:	b2c0      	uxtb	r0, r0
 80204a0:	fb00 7001 	mla	r0, r0, r1, r7
 80204a4:	b292      	uxth	r2, r2
 80204a6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80204aa:	fb03 c301 	mla	r3, r3, r1, ip
 80204ae:	f102 0c01 	add.w	ip, r2, #1
 80204b2:	b280      	uxth	r0, r0
 80204b4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80204b8:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80204bc:	1c42      	adds	r2, r0, #1
 80204be:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80204c2:	b29b      	uxth	r3, r3
 80204c4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80204c8:	ea42 020c 	orr.w	r2, r2, ip
 80204cc:	f103 0c01 	add.w	ip, r3, #1
 80204d0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80204d4:	095b      	lsrs	r3, r3, #5
 80204d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80204da:	431a      	orrs	r2, r3
 80204dc:	f8a9 2000 	strh.w	r2, [r9]
 80204e0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80204e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80204e4:	f109 0902 	add.w	r9, r9, #2
 80204e8:	441a      	add	r2, r3
 80204ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80204ec:	9229      	str	r2, [sp, #164]	; 0xa4
 80204ee:	441d      	add	r5, r3
 80204f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80204f4:	e63d      	b.n	8020172 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80204f6:	2800      	cmp	r0, #0
 80204f8:	f43f aedd 	beq.w	80202b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80204fc:	5c79      	ldrb	r1, [r7, r1]
 80204fe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020502:	910b      	str	r1, [sp, #44]	; 0x2c
 8020504:	0e09      	lsrs	r1, r1, #24
 8020506:	9114      	str	r1, [sp, #80]	; 0x50
 8020508:	e6d5      	b.n	80202b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802050a:	b01f      	add	sp, #124	; 0x7c
 802050c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020510 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8020510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020514:	b089      	sub	sp, #36	; 0x24
 8020516:	9101      	str	r1, [sp, #4]
 8020518:	9801      	ldr	r0, [sp, #4]
 802051a:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 802051e:	8800      	ldrh	r0, [r0, #0]
 8020520:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8020524:	1206      	asrs	r6, r0, #8
 8020526:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802052a:	9602      	str	r6, [sp, #8]
 802052c:	10c6      	asrs	r6, r0, #3
 802052e:	00c0      	lsls	r0, r0, #3
 8020530:	b2c0      	uxtb	r0, r0
 8020532:	9004      	str	r0, [sp, #16]
 8020534:	fb07 100c 	mla	r0, r7, ip, r1
 8020538:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802053c:	2f00      	cmp	r7, #0
 802053e:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8020542:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8020546:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 802054a:	9603      	str	r6, [sp, #12]
 802054c:	eb02 0e00 	add.w	lr, r2, r0
 8020550:	f2c0 810a 	blt.w	8020768 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020554:	45b8      	cmp	r8, r7
 8020556:	f340 8107 	ble.w	8020768 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802055a:	2900      	cmp	r1, #0
 802055c:	f2c0 8102 	blt.w	8020764 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020560:	458c      	cmp	ip, r1
 8020562:	f340 80ff 	ble.w	8020764 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020566:	5c12      	ldrb	r2, [r2, r0]
 8020568:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802056c:	1c4a      	adds	r2, r1, #1
 802056e:	f100 80fe 	bmi.w	802076e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020572:	4594      	cmp	ip, r2
 8020574:	f340 80fb 	ble.w	802076e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020578:	2d00      	cmp	r5, #0
 802057a:	f000 80fa 	beq.w	8020772 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 802057e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020582:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020586:	3701      	adds	r7, #1
 8020588:	f100 80f7 	bmi.w	802077a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 802058c:	45b8      	cmp	r8, r7
 802058e:	f340 80f4 	ble.w	802077a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020592:	2c00      	cmp	r4, #0
 8020594:	f000 80f4 	beq.w	8020780 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8020598:	2900      	cmp	r1, #0
 802059a:	eb0e 020c 	add.w	r2, lr, ip
 802059e:	f2c0 80ea 	blt.w	8020776 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80205a2:	458c      	cmp	ip, r1
 80205a4:	f340 80e7 	ble.w	8020776 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80205a8:	f81e 700c 	ldrb.w	r7, [lr, ip]
 80205ac:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80205b0:	3101      	adds	r1, #1
 80205b2:	f100 80e8 	bmi.w	8020786 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80205b6:	458c      	cmp	ip, r1
 80205b8:	f340 80e5 	ble.w	8020786 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80205bc:	2d00      	cmp	r5, #0
 80205be:	f000 80e4 	beq.w	802078a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 80205c2:	7852      	ldrb	r2, [r2, #1]
 80205c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80205c8:	0e0b      	lsrs	r3, r1, #24
 80205ca:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80205ce:	9300      	str	r3, [sp, #0]
 80205d0:	b2a4      	uxth	r4, r4
 80205d2:	b2ab      	uxth	r3, r5
 80205d4:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80205d8:	fb03 f904 	mul.w	r9, r3, r4
 80205dc:	fb0a f505 	mul.w	r5, sl, r5
 80205e0:	011b      	lsls	r3, r3, #4
 80205e2:	eba3 0e09 	sub.w	lr, r3, r9
 80205e6:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80205ea:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80205ee:	0a28      	lsrs	r0, r5, #8
 80205f0:	fb0a f303 	mul.w	r3, sl, r3
 80205f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80205f8:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80205fc:	4405      	add	r5, r0
 80205fe:	0a2d      	lsrs	r5, r5, #8
 8020600:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8020604:	9005      	str	r0, [sp, #20]
 8020606:	f503 7080 	add.w	r0, r3, #256	; 0x100
 802060a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802060e:	0a1b      	lsrs	r3, r3, #8
 8020610:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020614:	9306      	str	r3, [sp, #24]
 8020616:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802061a:	fb0b f303 	mul.w	r3, fp, r3
 802061e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020622:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8020626:	fb0b f606 	mul.w	r6, fp, r6
 802062a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802062e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020632:	fb08 f707 	mul.w	r7, r8, r7
 8020636:	0a1d      	lsrs	r5, r3, #8
 8020638:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802063c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020640:	441d      	add	r5, r3
 8020642:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8020646:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802064a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802064e:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020652:	fb08 fc0c 	mul.w	ip, r8, ip
 8020656:	0a1b      	lsrs	r3, r3, #8
 8020658:	9307      	str	r3, [sp, #28]
 802065a:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 802065e:	0e0b      	lsrs	r3, r1, #24
 8020660:	0a2d      	lsrs	r5, r5, #8
 8020662:	fa1f fe8e 	uxth.w	lr, lr
 8020666:	435f      	muls	r7, r3
 8020668:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802066c:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8020670:	fb05 f50e 	mul.w	r5, r5, lr
 8020674:	b2a4      	uxth	r4, r4
 8020676:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802067a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802067e:	4359      	muls	r1, r3
 8020680:	1b12      	subs	r2, r2, r4
 8020682:	9b05      	ldr	r3, [sp, #20]
 8020684:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020688:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802068c:	b292      	uxth	r2, r2
 802068e:	4460      	add	r0, ip
 8020690:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020694:	fb03 5502 	mla	r5, r3, r2, r5
 8020698:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802069c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206a0:	44bc      	add	ip, r7
 80206a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206aa:	0a36      	lsrs	r6, r6, #8
 80206ac:	fb0c 5509 	mla	r5, ip, r9, r5
 80206b0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80206b4:	fb0e f606 	mul.w	r6, lr, r6
 80206b8:	9b06      	ldr	r3, [sp, #24]
 80206ba:	0a00      	lsrs	r0, r0, #8
 80206bc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80206c0:	fb00 5504 	mla	r5, r0, r4, r5
 80206c4:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80206c8:	fb02 6000 	mla	r0, r2, r0, r6
 80206cc:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80206d0:	fb0e fe0b 	mul.w	lr, lr, fp
 80206d4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80206d8:	0a09      	lsrs	r1, r1, #8
 80206da:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80206de:	fb09 0001 	mla	r0, r9, r1, r0
 80206e2:	fb02 e20a 	mla	r2, r2, sl, lr
 80206e6:	9b07      	ldr	r3, [sp, #28]
 80206e8:	0a2d      	lsrs	r5, r5, #8
 80206ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206ee:	fb04 0003 	mla	r0, r4, r3, r0
 80206f2:	fb04 2408 	mla	r4, r4, r8, r2
 80206f6:	9b00      	ldr	r3, [sp, #0]
 80206f8:	9a04      	ldr	r2, [sp, #16]
 80206fa:	fb09 4903 	mla	r9, r9, r3, r4
 80206fe:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8020702:	9b02      	ldr	r3, [sp, #8]
 8020704:	fa5f f989 	uxtb.w	r9, r9
 8020708:	fb03 f109 	mul.w	r1, r3, r9
 802070c:	9b03      	ldr	r3, [sp, #12]
 802070e:	0a00      	lsrs	r0, r0, #8
 8020710:	fb03 f309 	mul.w	r3, r3, r9
 8020714:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020718:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802071c:	4305      	orrs	r5, r0
 802071e:	fb02 f909 	mul.w	r9, r2, r9
 8020722:	1c58      	adds	r0, r3, #1
 8020724:	1c4a      	adds	r2, r1, #1
 8020726:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802072a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802072e:	0a2b      	lsrs	r3, r5, #8
 8020730:	0c2a      	lsrs	r2, r5, #16
 8020732:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020736:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802073a:	00db      	lsls	r3, r3, #3
 802073c:	0212      	lsls	r2, r2, #8
 802073e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020742:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020746:	4313      	orrs	r3, r2
 8020748:	f109 0201 	add.w	r2, r9, #1
 802074c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8020750:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8020754:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020758:	431d      	orrs	r5, r3
 802075a:	9b01      	ldr	r3, [sp, #4]
 802075c:	801d      	strh	r5, [r3, #0]
 802075e:	b009      	add	sp, #36	; 0x24
 8020760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020764:	2000      	movs	r0, #0
 8020766:	e701      	b.n	802056c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8020768:	2600      	movs	r6, #0
 802076a:	4630      	mov	r0, r6
 802076c:	e70b      	b.n	8020586 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802076e:	2600      	movs	r6, #0
 8020770:	e709      	b.n	8020586 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020772:	462e      	mov	r6, r5
 8020774:	e707      	b.n	8020586 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020776:	2700      	movs	r7, #0
 8020778:	e71a      	b.n	80205b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 802077a:	2100      	movs	r1, #0
 802077c:	460f      	mov	r7, r1
 802077e:	e723      	b.n	80205c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020780:	4621      	mov	r1, r4
 8020782:	4627      	mov	r7, r4
 8020784:	e720      	b.n	80205c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020786:	2100      	movs	r1, #0
 8020788:	e71e      	b.n	80205c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802078a:	4629      	mov	r1, r5
 802078c:	e71c      	b.n	80205c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08020790 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020794:	b09b      	sub	sp, #108	; 0x6c
 8020796:	9218      	str	r2, [sp, #96]	; 0x60
 8020798:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802079a:	9019      	str	r0, [sp, #100]	; 0x64
 802079c:	6850      	ldr	r0, [r2, #4]
 802079e:	9116      	str	r1, [sp, #88]	; 0x58
 80207a0:	9307      	str	r3, [sp, #28]
 80207a2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80207a6:	fb00 1303 	mla	r3, r0, r3, r1
 80207aa:	6812      	ldr	r2, [r2, #0]
 80207ac:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80207ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80207b2:	930a      	str	r3, [sp, #40]	; 0x28
 80207b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80207ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207bc:	685e      	ldr	r6, [r3, #4]
 80207be:	3604      	adds	r6, #4
 80207c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	dc03      	bgt.n	80207ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80207c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	f340 8373 	ble.w	8020eb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80207ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80207d8:	1e48      	subs	r0, r1, #1
 80207da:	1e57      	subs	r7, r2, #1
 80207dc:	9b07      	ldr	r3, [sp, #28]
 80207de:	2b00      	cmp	r3, #0
 80207e0:	f340 818f 	ble.w	8020b02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80207e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80207e6:	142b      	asrs	r3, r5, #16
 80207e8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80207ec:	d406      	bmi.n	80207fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80207ee:	4584      	cmp	ip, r0
 80207f0:	da04      	bge.n	80207fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	db02      	blt.n	80207fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80207f6:	42bb      	cmp	r3, r7
 80207f8:	f2c0 8184 	blt.w	8020b04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80207fc:	f11c 0c01 	adds.w	ip, ip, #1
 8020800:	f100 8172 	bmi.w	8020ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020804:	4561      	cmp	r1, ip
 8020806:	f2c0 816f 	blt.w	8020ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802080a:	3301      	adds	r3, #1
 802080c:	f100 816c 	bmi.w	8020ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020810:	429a      	cmp	r2, r3
 8020812:	f2c0 8169 	blt.w	8020ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020816:	9b07      	ldr	r3, [sp, #28]
 8020818:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802081a:	9317      	str	r3, [sp, #92]	; 0x5c
 802081c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802081e:	2b00      	cmp	r3, #0
 8020820:	f340 818e 	ble.w	8020b40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8020824:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020826:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802082a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802082e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020830:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020834:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020838:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802083a:	141b      	asrs	r3, r3, #16
 802083c:	f100 81d1 	bmi.w	8020be2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020840:	f101 38ff 	add.w	r8, r1, #4294967295
 8020844:	4543      	cmp	r3, r8
 8020846:	f280 81cc 	bge.w	8020be2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802084a:	f1bc 0f00 	cmp.w	ip, #0
 802084e:	f2c0 81c8 	blt.w	8020be2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020852:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020856:	45c4      	cmp	ip, r8
 8020858:	f280 81c3 	bge.w	8020be2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802085c:	b209      	sxth	r1, r1
 802085e:	fb0c 3301 	mla	r3, ip, r1, r3
 8020862:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020864:	eb04 0803 	add.w	r8, r4, r3
 8020868:	5ce3      	ldrb	r3, [r4, r3]
 802086a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802086e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020872:	2a00      	cmp	r2, #0
 8020874:	f000 81aa 	beq.w	8020bcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8020878:	f898 c001 	ldrb.w	ip, [r8, #1]
 802087c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020880:	940b      	str	r4, [sp, #44]	; 0x2c
 8020882:	0e24      	lsrs	r4, r4, #24
 8020884:	9412      	str	r4, [sp, #72]	; 0x48
 8020886:	b178      	cbz	r0, 80208a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020888:	eb08 0c01 	add.w	ip, r8, r1
 802088c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020890:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020894:	9108      	str	r1, [sp, #32]
 8020896:	0e09      	lsrs	r1, r1, #24
 8020898:	9110      	str	r1, [sp, #64]	; 0x40
 802089a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802089e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80208a2:	910c      	str	r1, [sp, #48]	; 0x30
 80208a4:	0e09      	lsrs	r1, r1, #24
 80208a6:	9113      	str	r1, [sp, #76]	; 0x4c
 80208a8:	b292      	uxth	r2, r2
 80208aa:	b280      	uxth	r0, r0
 80208ac:	fb02 f900 	mul.w	r9, r2, r0
 80208b0:	0112      	lsls	r2, r2, #4
 80208b2:	eba2 0809 	sub.w	r8, r2, r9
 80208b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80208b8:	fa1f f888 	uxth.w	r8, r8
 80208bc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80208c0:	fb08 f101 	mul.w	r1, r8, r1
 80208c4:	b280      	uxth	r0, r0
 80208c6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80208ca:	1a12      	subs	r2, r2, r0
 80208cc:	b292      	uxth	r2, r2
 80208ce:	fb02 110e 	mla	r1, r2, lr, r1
 80208d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80208d4:	fb00 1104 	mla	r1, r0, r4, r1
 80208d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80208da:	fb09 1104 	mla	r1, r9, r4, r1
 80208de:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80208e2:	2900      	cmp	r1, #0
 80208e4:	f000 80f5 	beq.w	8020ad2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80208e8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80208ec:	d01b      	beq.n	8020926 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80208ee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80208f2:	fb0e fa0a 	mul.w	sl, lr, sl
 80208f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208fa:	fb0e fe03 	mul.w	lr, lr, r3
 80208fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020902:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020906:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802090a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802090e:	4453      	add	r3, sl
 8020910:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020914:	0a1b      	lsrs	r3, r3, #8
 8020916:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802091a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802091e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020922:	ea43 030c 	orr.w	r3, r3, ip
 8020926:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020928:	2cff      	cmp	r4, #255	; 0xff
 802092a:	d021      	beq.n	8020970 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802092c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802092e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020932:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020934:	fb04 fb0b 	mul.w	fp, r4, fp
 8020938:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802093a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802093e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020942:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020944:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020948:	fb04 fa0a 	mul.w	sl, r4, sl
 802094c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020950:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020954:	44de      	add	lr, fp
 8020956:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802095a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802095e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020962:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020966:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802096a:	ea4e 040a 	orr.w	r4, lr, sl
 802096e:	940b      	str	r4, [sp, #44]	; 0x2c
 8020970:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020972:	2cff      	cmp	r4, #255	; 0xff
 8020974:	d021      	beq.n	80209ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020976:	9c08      	ldr	r4, [sp, #32]
 8020978:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802097c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802097e:	fb04 fb0b 	mul.w	fp, r4, fp
 8020982:	9c08      	ldr	r4, [sp, #32]
 8020984:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020988:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802098c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802098e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020992:	fb04 fa0a 	mul.w	sl, r4, sl
 8020996:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802099a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802099e:	44de      	add	lr, fp
 80209a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209b4:	ea4e 040a 	orr.w	r4, lr, sl
 80209b8:	9408      	str	r4, [sp, #32]
 80209ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209bc:	2cff      	cmp	r4, #255	; 0xff
 80209be:	d021      	beq.n	8020a04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80209c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80209c2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80209c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80209cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80209ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80209e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80209e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80209e8:	44de      	add	lr, fp
 80209ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209fe:	ea4e 040a 	orr.w	r4, lr, sl
 8020a02:	940c      	str	r4, [sp, #48]	; 0x30
 8020a04:	43c9      	mvns	r1, r1
 8020a06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a08:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020a0c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020a10:	fb08 fc0c 	mul.w	ip, r8, ip
 8020a14:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020a18:	9c08      	ldr	r4, [sp, #32]
 8020a1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a1e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a22:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020a26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020a28:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a2e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020a32:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020a36:	fb08 f80e 	mul.w	r8, r8, lr
 8020a3a:	fb02 8303 	mla	r3, r2, r3, r8
 8020a3e:	9a08      	ldr	r2, [sp, #32]
 8020a40:	f8b7 8000 	ldrh.w	r8, [r7]
 8020a44:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020a48:	fb00 330a 	mla	r3, r0, sl, r3
 8020a4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020a4e:	fa5f fe81 	uxtb.w	lr, r1
 8020a52:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020a56:	fb09 3900 	mla	r9, r9, r0, r3
 8020a5a:	ea4f 2228 	mov.w	r2, r8, asr #8
 8020a5e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020a62:	fb02 f20e 	mul.w	r2, r2, lr
 8020a66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a6a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020a6e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8020a72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a76:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020a7a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020a7e:	ea4c 0c09 	orr.w	ip, ip, r9
 8020a82:	fb00 f00e 	mul.w	r0, r0, lr
 8020a86:	1c53      	adds	r3, r2, #1
 8020a88:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020a8c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8020a90:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020a94:	4a62      	ldr	r2, [pc, #392]	; (8020c20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8020a96:	b2db      	uxtb	r3, r3
 8020a98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8020a9c:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8020aa0:	b2c9      	uxtb	r1, r1
 8020aa2:	1c43      	adds	r3, r0, #1
 8020aa4:	fb01 f10e 	mul.w	r1, r1, lr
 8020aa8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020aac:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020ab0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020ab4:	00db      	lsls	r3, r3, #3
 8020ab6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020aba:	4313      	orrs	r3, r2
 8020abc:	1c4a      	adds	r2, r1, #1
 8020abe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020ac2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020ac6:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8020aca:	ea4c 0c03 	orr.w	ip, ip, r3
 8020ace:	f8a7 c000 	strh.w	ip, [r7]
 8020ad2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020ad4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020ad6:	3702      	adds	r7, #2
 8020ad8:	441a      	add	r2, r3
 8020ada:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020adc:	9225      	str	r2, [sp, #148]	; 0x94
 8020ade:	441d      	add	r5, r3
 8020ae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020ae2:	3b01      	subs	r3, #1
 8020ae4:	9317      	str	r3, [sp, #92]	; 0x5c
 8020ae6:	e699      	b.n	802081c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020ae8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020aea:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020aec:	441c      	add	r4, r3
 8020aee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020af0:	9425      	str	r4, [sp, #148]	; 0x94
 8020af2:	441d      	add	r5, r3
 8020af4:	9b07      	ldr	r3, [sp, #28]
 8020af6:	3b01      	subs	r3, #1
 8020af8:	9307      	str	r3, [sp, #28]
 8020afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020afc:	3302      	adds	r3, #2
 8020afe:	930a      	str	r3, [sp, #40]	; 0x28
 8020b00:	e66c      	b.n	80207dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020b02:	d024      	beq.n	8020b4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8020b04:	9b07      	ldr	r3, [sp, #28]
 8020b06:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020b08:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020b0a:	3b01      	subs	r3, #1
 8020b0c:	fb00 4003 	mla	r0, r0, r3, r4
 8020b10:	1400      	asrs	r0, r0, #16
 8020b12:	f53f ae80 	bmi.w	8020816 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b16:	3901      	subs	r1, #1
 8020b18:	4288      	cmp	r0, r1
 8020b1a:	f6bf ae7c 	bge.w	8020816 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b1e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020b20:	fb01 5303 	mla	r3, r1, r3, r5
 8020b24:	141b      	asrs	r3, r3, #16
 8020b26:	f53f ae76 	bmi.w	8020816 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b2a:	3a01      	subs	r2, #1
 8020b2c:	4293      	cmp	r3, r2
 8020b2e:	f6bf ae72 	bge.w	8020816 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b32:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020b36:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8020b3a:	f1bb 0f00 	cmp.w	fp, #0
 8020b3e:	dc71      	bgt.n	8020c24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8020b40:	9b07      	ldr	r3, [sp, #28]
 8020b42:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b48:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020b4c:	930a      	str	r3, [sp, #40]	; 0x28
 8020b4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	f340 81af 	ble.w	8020eb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8020b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020b5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020b66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b6a:	eef0 6a62 	vmov.f32	s13, s5
 8020b6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b72:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b76:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b82:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8020b86:	eef0 6a43 	vmov.f32	s13, s6
 8020b8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b8e:	ee12 2a90 	vmov	r2, s5
 8020b92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020b98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ba0:	ee13 2a10 	vmov	r2, s6
 8020ba4:	9327      	str	r3, [sp, #156]	; 0x9c
 8020ba6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020ba8:	ee16 5a90 	vmov	r5, s13
 8020bac:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bb0:	9328      	str	r3, [sp, #160]	; 0xa0
 8020bb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020bb4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020bb6:	3b01      	subs	r3, #1
 8020bb8:	9316      	str	r3, [sp, #88]	; 0x58
 8020bba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020bbc:	bf08      	it	eq
 8020bbe:	4613      	moveq	r3, r2
 8020bc0:	eeb0 3a67 	vmov.f32	s6, s15
 8020bc4:	9307      	str	r3, [sp, #28]
 8020bc6:	eef0 2a47 	vmov.f32	s5, s14
 8020bca:	e5f9      	b.n	80207c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020bcc:	2800      	cmp	r0, #0
 8020bce:	f43f ae6b 	beq.w	80208a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020bd2:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020bd6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020bda:	9108      	str	r1, [sp, #32]
 8020bdc:	0e09      	lsrs	r1, r1, #24
 8020bde:	9110      	str	r1, [sp, #64]	; 0x40
 8020be0:	e662      	b.n	80208a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020be2:	f113 0801 	adds.w	r8, r3, #1
 8020be6:	f53f af74 	bmi.w	8020ad2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020bea:	4541      	cmp	r1, r8
 8020bec:	f6ff af71 	blt.w	8020ad2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020bf0:	f11c 0801 	adds.w	r8, ip, #1
 8020bf4:	f53f af6d 	bmi.w	8020ad2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020bf8:	45c6      	cmp	lr, r8
 8020bfa:	f6ff af6a 	blt.w	8020ad2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020bfe:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020c02:	b209      	sxth	r1, r1
 8020c04:	fa0f f38e 	sxth.w	r3, lr
 8020c08:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020c0c:	9301      	str	r3, [sp, #4]
 8020c0e:	9100      	str	r1, [sp, #0]
 8020c10:	4633      	mov	r3, r6
 8020c12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c14:	4639      	mov	r1, r7
 8020c16:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020c18:	f7ff fc7a 	bl	8020510 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8020c1c:	e759      	b.n	8020ad2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c1e:	bf00      	nop
 8020c20:	fffff800 	.word	0xfffff800
 8020c24:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020c26:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020c28:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020c2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c2e:	1427      	asrs	r7, r4, #16
 8020c30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c34:	142b      	asrs	r3, r5, #16
 8020c36:	fb01 7303 	mla	r3, r1, r3, r7
 8020c3a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c3c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020c40:	18e7      	adds	r7, r4, r3
 8020c42:	5ce3      	ldrb	r3, [r4, r3]
 8020c44:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020c48:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020c4c:	2a00      	cmp	r2, #0
 8020c4e:	f000 8127 	beq.w	8020ea0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8020c52:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020c56:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020c5a:	940d      	str	r4, [sp, #52]	; 0x34
 8020c5c:	0e24      	lsrs	r4, r4, #24
 8020c5e:	9414      	str	r4, [sp, #80]	; 0x50
 8020c60:	b170      	cbz	r0, 8020c80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020c62:	eb07 0e01 	add.w	lr, r7, r1
 8020c66:	5c79      	ldrb	r1, [r7, r1]
 8020c68:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020c6c:	9109      	str	r1, [sp, #36]	; 0x24
 8020c6e:	0e09      	lsrs	r1, r1, #24
 8020c70:	9111      	str	r1, [sp, #68]	; 0x44
 8020c72:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020c76:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020c7a:	910e      	str	r1, [sp, #56]	; 0x38
 8020c7c:	0e09      	lsrs	r1, r1, #24
 8020c7e:	9115      	str	r1, [sp, #84]	; 0x54
 8020c80:	b292      	uxth	r2, r2
 8020c82:	b280      	uxth	r0, r0
 8020c84:	fb02 f800 	mul.w	r8, r2, r0
 8020c88:	0112      	lsls	r2, r2, #4
 8020c8a:	eba2 0e08 	sub.w	lr, r2, r8
 8020c8e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020c92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c94:	fa1f fe8e 	uxth.w	lr, lr
 8020c98:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020c9c:	fb0e f202 	mul.w	r2, lr, r2
 8020ca0:	b280      	uxth	r0, r0
 8020ca2:	1a09      	subs	r1, r1, r0
 8020ca4:	b289      	uxth	r1, r1
 8020ca6:	fb01 220c 	mla	r2, r1, ip, r2
 8020caa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020cac:	fb00 2204 	mla	r2, r0, r4, r2
 8020cb0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020cb2:	fb08 2204 	mla	r2, r8, r4, r2
 8020cb6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020cba:	2a00      	cmp	r2, #0
 8020cbc:	f000 80e5 	beq.w	8020e8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8020cc0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020cc4:	d019      	beq.n	8020cfa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8020cc6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020cca:	fb0c fa0a 	mul.w	sl, ip, sl
 8020cce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020cd2:	fb0c fc03 	mul.w	ip, ip, r3
 8020cd6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020cda:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020cde:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020ce2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020ce6:	4453      	add	r3, sl
 8020ce8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020cec:	0a1b      	lsrs	r3, r3, #8
 8020cee:	0a3f      	lsrs	r7, r7, #8
 8020cf0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020cf4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020cf8:	433b      	orrs	r3, r7
 8020cfa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020cfc:	2cff      	cmp	r4, #255	; 0xff
 8020cfe:	d020      	beq.n	8020d42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8020d00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020d02:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d08:	4367      	muls	r7, r4
 8020d0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020d0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d10:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020d14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d16:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d1a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d22:	44bc      	add	ip, r7
 8020d24:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020d28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d3c:	ea4c 040a 	orr.w	r4, ip, sl
 8020d40:	940d      	str	r4, [sp, #52]	; 0x34
 8020d42:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020d44:	2cff      	cmp	r4, #255	; 0xff
 8020d46:	d020      	beq.n	8020d8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8020d48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020d4a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020d50:	4367      	muls	r7, r4
 8020d52:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020d54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020d5c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020d5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d62:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d6a:	44bc      	add	ip, r7
 8020d6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020d70:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d84:	ea4c 040a 	orr.w	r4, ip, sl
 8020d88:	9409      	str	r4, [sp, #36]	; 0x24
 8020d8a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020d8c:	2cff      	cmp	r4, #255	; 0xff
 8020d8e:	d020      	beq.n	8020dd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8020d90:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020d92:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d96:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020d98:	4367      	muls	r7, r4
 8020d9a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020d9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020da0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020da4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020da6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020daa:	fb04 fa0a 	mul.w	sl, r4, sl
 8020dae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020db2:	44bc      	add	ip, r7
 8020db4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020db8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020dbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020dc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dc8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020dcc:	ea4c 040a 	orr.w	r4, ip, sl
 8020dd0:	940e      	str	r4, [sp, #56]	; 0x38
 8020dd2:	43d2      	mvns	r2, r2
 8020dd4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020dd6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020dda:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020dde:	fb0e f707 	mul.w	r7, lr, r7
 8020de2:	fb01 770c 	mla	r7, r1, ip, r7
 8020de6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020de8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020dec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020df0:	fb00 770c 	mla	r7, r0, ip, r7
 8020df4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020df6:	b2d2      	uxtb	r2, r2
 8020df8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020dfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020dfe:	fb08 770c 	mla	r7, r8, ip, r7
 8020e02:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020e06:	fb0e fe0c 	mul.w	lr, lr, ip
 8020e0a:	fb01 e303 	mla	r3, r1, r3, lr
 8020e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020e10:	0a3f      	lsrs	r7, r7, #8
 8020e12:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020e16:	fb00 330a 	mla	r3, r0, sl, r3
 8020e1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020e1c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020e20:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020e24:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020e28:	f8b9 3000 	ldrh.w	r3, [r9]
 8020e2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e30:	1218      	asrs	r0, r3, #8
 8020e32:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020e36:	4350      	muls	r0, r2
 8020e38:	10d9      	asrs	r1, r3, #3
 8020e3a:	00db      	lsls	r3, r3, #3
 8020e3c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020e40:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020e44:	b2db      	uxtb	r3, r3
 8020e46:	ea47 070c 	orr.w	r7, r7, ip
 8020e4a:	4351      	muls	r1, r2
 8020e4c:	4353      	muls	r3, r2
 8020e4e:	1c42      	adds	r2, r0, #1
 8020e50:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020e54:	0c3a      	lsrs	r2, r7, #16
 8020e56:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020e5a:	4a18      	ldr	r2, [pc, #96]	; (8020ebc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8020e5c:	b2c0      	uxtb	r0, r0
 8020e5e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8020e62:	1c4a      	adds	r2, r1, #1
 8020e64:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020e68:	0a3a      	lsrs	r2, r7, #8
 8020e6a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020e6e:	00c9      	lsls	r1, r1, #3
 8020e70:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020e74:	4301      	orrs	r1, r0
 8020e76:	1c58      	adds	r0, r3, #1
 8020e78:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020e7c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8020e80:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8020e84:	4308      	orrs	r0, r1
 8020e86:	f8a9 0000 	strh.w	r0, [r9]
 8020e8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020e8c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020e8e:	f109 0902 	add.w	r9, r9, #2
 8020e92:	441a      	add	r2, r3
 8020e94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e96:	9225      	str	r2, [sp, #148]	; 0x94
 8020e98:	441d      	add	r5, r3
 8020e9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020e9e:	e64c      	b.n	8020b3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020ea0:	2800      	cmp	r0, #0
 8020ea2:	f43f aeed 	beq.w	8020c80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020ea6:	5c79      	ldrb	r1, [r7, r1]
 8020ea8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020eac:	9109      	str	r1, [sp, #36]	; 0x24
 8020eae:	0e09      	lsrs	r1, r1, #24
 8020eb0:	9111      	str	r1, [sp, #68]	; 0x44
 8020eb2:	e6e5      	b.n	8020c80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020eb4:	b01b      	add	sp, #108	; 0x6c
 8020eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020eba:	bf00      	nop
 8020ebc:	fffff800 	.word	0xfffff800

08020ec0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8020ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ec4:	b085      	sub	sp, #20
 8020ec6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8020eca:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8020ece:	fb00 7406 	mla	r4, r0, r6, r7
 8020ed2:	2800      	cmp	r0, #0
 8020ed4:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8020ed8:	9103      	str	r1, [sp, #12]
 8020eda:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8020ede:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8020ee2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8020ee6:	9501      	str	r5, [sp, #4]
 8020ee8:	eb03 0904 	add.w	r9, r3, r4
 8020eec:	f2c0 8150 	blt.w	8021190 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8020ef0:	4583      	cmp	fp, r0
 8020ef2:	f340 814d 	ble.w	8021190 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8020ef6:	2f00      	cmp	r7, #0
 8020ef8:	f2c0 8146 	blt.w	8021188 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8020efc:	42be      	cmp	r6, r7
 8020efe:	f340 8143 	ble.w	8021188 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8020f02:	f813 c004 	ldrb.w	ip, [r3, r4]
 8020f06:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8020f0a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8020f0e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020f12:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8020f16:	4355      	muls	r5, r2
 8020f18:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020f1c:	fb0c f203 	mul.w	r2, ip, r3
 8020f20:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8020f24:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8020f28:	441d      	add	r5, r3
 8020f2a:	f102 0320 	add.w	r3, r2, #32
 8020f2e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020f32:	0a1b      	lsrs	r3, r3, #8
 8020f34:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8020f38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020f3c:	431c      	orrs	r4, r3
 8020f3e:	1c7b      	adds	r3, r7, #1
 8020f40:	f100 812b 	bmi.w	802119a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020f44:	429e      	cmp	r6, r3
 8020f46:	f340 8128 	ble.w	802119a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020f4a:	2900      	cmp	r1, #0
 8020f4c:	f000 8128 	beq.w	80211a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8020f50:	9a01      	ldr	r2, [sp, #4]
 8020f52:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020f56:	8855      	ldrh	r5, [r2, #2]
 8020f58:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8020f5c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8020f60:	fb08 f802 	mul.w	r8, r8, r2
 8020f64:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8020f68:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020f6c:	435d      	muls	r5, r3
 8020f6e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8020f72:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020f76:	44d0      	add	r8, sl
 8020f78:	f105 0a20 	add.w	sl, r5, #32
 8020f7c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020f80:	0a2d      	lsrs	r5, r5, #8
 8020f82:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8020f86:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020f8a:	432a      	orrs	r2, r5
 8020f8c:	3001      	adds	r0, #1
 8020f8e:	f100 810d 	bmi.w	80211ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8020f92:	4583      	cmp	fp, r0
 8020f94:	f340 810a 	ble.w	80211ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8020f98:	f1be 0f00 	cmp.w	lr, #0
 8020f9c:	f000 810b 	beq.w	80211b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8020fa0:	2f00      	cmp	r7, #0
 8020fa2:	f2c0 8100 	blt.w	80211a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8020fa6:	42be      	cmp	r6, r7
 8020fa8:	f340 80fd 	ble.w	80211a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8020fac:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8020fb0:	9801      	ldr	r0, [sp, #4]
 8020fb2:	f819 5006 	ldrb.w	r5, [r9, r6]
 8020fb6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8020fba:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020fbe:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8020fc2:	fb0a fa00 	mul.w	sl, sl, r0
 8020fc6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020fca:	fb05 f808 	mul.w	r8, r5, r8
 8020fce:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8020fd2:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020fd6:	4482      	add	sl, r0
 8020fd8:	f108 0020 	add.w	r0, r8, #32
 8020fdc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020fe0:	0a00      	lsrs	r0, r0, #8
 8020fe2:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8020fe6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020fea:	ea4b 0b00 	orr.w	fp, fp, r0
 8020fee:	3701      	adds	r7, #1
 8020ff0:	f100 80e6 	bmi.w	80211c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8020ff4:	42be      	cmp	r6, r7
 8020ff6:	f340 80e3 	ble.w	80211c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8020ffa:	2900      	cmp	r1, #0
 8020ffc:	f000 80e3 	beq.w	80211c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8021000:	9801      	ldr	r0, [sp, #4]
 8021002:	3601      	adds	r6, #1
 8021004:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021008:	f819 7006 	ldrb.w	r7, [r9, r6]
 802100c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021010:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021014:	fb07 f800 	mul.w	r8, r7, r0
 8021018:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802101c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021020:	fb09 f906 	mul.w	r9, r9, r6
 8021024:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021028:	f609 0901 	addw	r9, r9, #2049	; 0x801
 802102c:	44d1      	add	r9, sl
 802102e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021032:	f108 0020 	add.w	r0, r8, #32
 8021036:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802103a:	0a00      	lsrs	r0, r0, #8
 802103c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021040:	4330      	orrs	r0, r6
 8021042:	b28e      	uxth	r6, r1
 8021044:	fa1f f98e 	uxth.w	r9, lr
 8021048:	fb06 f809 	mul.w	r8, r6, r9
 802104c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021050:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021054:	0136      	lsls	r6, r6, #4
 8021056:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802105a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802105e:	9601      	str	r6, [sp, #4]
 8021060:	ea4a 0404 	orr.w	r4, sl, r4
 8021064:	fa1f f689 	uxth.w	r6, r9
 8021068:	9602      	str	r6, [sp, #8]
 802106a:	4626      	mov	r6, r4
 802106c:	fb11 f90e 	smulbb	r9, r1, lr
 8021070:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021074:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021078:	f1ce 0410 	rsb	r4, lr, #16
 802107c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021080:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021084:	1a64      	subs	r4, r4, r1
 8021086:	ea4a 0202 	orr.w	r2, sl, r2
 802108a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802108e:	434a      	muls	r2, r1
 8021090:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021094:	fb04 2406 	mla	r4, r4, r6, r2
 8021098:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802109c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80210a0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80210a4:	ea4a 0000 	orr.w	r0, sl, r0
 80210a8:	fb09 4200 	mla	r2, r9, r0, r4
 80210ac:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80210b0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80210b4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80210b8:	ea44 0b0b 	orr.w	fp, r4, fp
 80210bc:	9c01      	ldr	r4, [sp, #4]
 80210be:	9e02      	ldr	r6, [sp, #8]
 80210c0:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 80210c4:	1ba4      	subs	r4, r4, r6
 80210c6:	9e01      	ldr	r6, [sp, #4]
 80210c8:	b2a4      	uxth	r4, r4
 80210ca:	eba6 0608 	sub.w	r6, r6, r8
 80210ce:	b2b6      	uxth	r6, r6
 80210d0:	4373      	muls	r3, r6
 80210d2:	fb0c 3304 	mla	r3, ip, r4, r3
 80210d6:	9c02      	ldr	r4, [sp, #8]
 80210d8:	9903      	ldr	r1, [sp, #12]
 80210da:	fb04 3505 	mla	r5, r4, r5, r3
 80210de:	fb08 5707 	mla	r7, r8, r7, r5
 80210e2:	8808      	ldrh	r0, [r1, #0]
 80210e4:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80210e8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80210ec:	b289      	uxth	r1, r1
 80210ee:	434f      	muls	r7, r1
 80210f0:	1c7b      	adds	r3, r7, #1
 80210f2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80210f6:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80210fa:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80210fe:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021102:	1203      	asrs	r3, r0, #8
 8021104:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021108:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802110c:	b2ff      	uxtb	r7, r7
 802110e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021112:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021116:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802111a:	fb13 f307 	smulbb	r3, r3, r7
 802111e:	ea42 0e0e 	orr.w	lr, r2, lr
 8021122:	fa1f f28e 	uxth.w	r2, lr
 8021126:	1215      	asrs	r5, r2, #8
 8021128:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802112c:	fb05 3501 	mla	r5, r5, r1, r3
 8021130:	10c3      	asrs	r3, r0, #3
 8021132:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021136:	fb13 f307 	smulbb	r3, r3, r7
 802113a:	10d4      	asrs	r4, r2, #3
 802113c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021140:	fb04 3401 	mla	r4, r4, r1, r3
 8021144:	00c3      	lsls	r3, r0, #3
 8021146:	b2db      	uxtb	r3, r3
 8021148:	fb13 f307 	smulbb	r3, r3, r7
 802114c:	00d2      	lsls	r2, r2, #3
 802114e:	b2d2      	uxtb	r2, r2
 8021150:	fb02 3101 	mla	r1, r2, r1, r3
 8021154:	b2ad      	uxth	r5, r5
 8021156:	b289      	uxth	r1, r1
 8021158:	b2a4      	uxth	r4, r4
 802115a:	1c6b      	adds	r3, r5, #1
 802115c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021160:	1c62      	adds	r2, r4, #1
 8021162:	1c4b      	adds	r3, r1, #1
 8021164:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021168:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802116c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021170:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021174:	0964      	lsrs	r4, r4, #5
 8021176:	432b      	orrs	r3, r5
 8021178:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802117c:	9a03      	ldr	r2, [sp, #12]
 802117e:	4323      	orrs	r3, r4
 8021180:	8013      	strh	r3, [r2, #0]
 8021182:	b005      	add	sp, #20
 8021184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021188:	f04f 0c00 	mov.w	ip, #0
 802118c:	4664      	mov	r4, ip
 802118e:	e6d6      	b.n	8020f3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8021190:	2300      	movs	r3, #0
 8021192:	469c      	mov	ip, r3
 8021194:	461a      	mov	r2, r3
 8021196:	461c      	mov	r4, r3
 8021198:	e6f8      	b.n	8020f8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802119a:	2300      	movs	r3, #0
 802119c:	461a      	mov	r2, r3
 802119e:	e6f5      	b.n	8020f8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80211a0:	460b      	mov	r3, r1
 80211a2:	460a      	mov	r2, r1
 80211a4:	e6f2      	b.n	8020f8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80211a6:	2500      	movs	r5, #0
 80211a8:	46ab      	mov	fp, r5
 80211aa:	e720      	b.n	8020fee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80211ac:	2700      	movs	r7, #0
 80211ae:	463d      	mov	r5, r7
 80211b0:	4638      	mov	r0, r7
 80211b2:	46bb      	mov	fp, r7
 80211b4:	e745      	b.n	8021042 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80211b6:	4677      	mov	r7, lr
 80211b8:	4675      	mov	r5, lr
 80211ba:	4670      	mov	r0, lr
 80211bc:	46f3      	mov	fp, lr
 80211be:	e740      	b.n	8021042 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80211c0:	2700      	movs	r7, #0
 80211c2:	4638      	mov	r0, r7
 80211c4:	e73d      	b.n	8021042 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80211c6:	460f      	mov	r7, r1
 80211c8:	4608      	mov	r0, r1
 80211ca:	e73a      	b.n	8021042 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080211cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211d0:	b097      	sub	sp, #92	; 0x5c
 80211d2:	9214      	str	r2, [sp, #80]	; 0x50
 80211d4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80211d6:	9015      	str	r0, [sp, #84]	; 0x54
 80211d8:	9308      	str	r3, [sp, #32]
 80211da:	6850      	ldr	r0, [r2, #4]
 80211dc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80211e0:	9111      	str	r1, [sp, #68]	; 0x44
 80211e2:	9312      	str	r3, [sp, #72]	; 0x48
 80211e4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80211e8:	fb00 1303 	mla	r3, r0, r3, r1
 80211ec:	6812      	ldr	r2, [r2, #0]
 80211ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80211f2:	9309      	str	r3, [sp, #36]	; 0x24
 80211f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211f6:	681b      	ldr	r3, [r3, #0]
 80211f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80211fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211fc:	685b      	ldr	r3, [r3, #4]
 80211fe:	930c      	str	r3, [sp, #48]	; 0x30
 8021200:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021204:	930a      	str	r3, [sp, #40]	; 0x28
 8021206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021208:	2b00      	cmp	r3, #0
 802120a:	dc03      	bgt.n	8021214 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802120c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802120e:	2b00      	cmp	r3, #0
 8021210:	f340 83cb 	ble.w	80219aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021214:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021216:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802121a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802121e:	1e48      	subs	r0, r1, #1
 8021220:	1e55      	subs	r5, r2, #1
 8021222:	9b08      	ldr	r3, [sp, #32]
 8021224:	2b00      	cmp	r3, #0
 8021226:	f340 81a3 	ble.w	8021570 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 802122a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 802122c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802122e:	1436      	asrs	r6, r6, #16
 8021230:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021234:	d406      	bmi.n	8021244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021236:	4286      	cmp	r6, r0
 8021238:	da04      	bge.n	8021244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802123a:	2b00      	cmp	r3, #0
 802123c:	db02      	blt.n	8021244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802123e:	42ab      	cmp	r3, r5
 8021240:	f2c0 8197 	blt.w	8021572 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021244:	3601      	adds	r6, #1
 8021246:	f100 8184 	bmi.w	8021552 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802124a:	42b1      	cmp	r1, r6
 802124c:	f2c0 8181 	blt.w	8021552 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021250:	3301      	adds	r3, #1
 8021252:	f100 817e 	bmi.w	8021552 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021256:	429a      	cmp	r2, r3
 8021258:	f2c0 817b 	blt.w	8021552 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802125c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021260:	9b08      	ldr	r3, [sp, #32]
 8021262:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021264:	9313      	str	r3, [sp, #76]	; 0x4c
 8021266:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021268:	2b00      	cmp	r3, #0
 802126a:	f340 81a4 	ble.w	80215b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802126e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021270:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021272:	1418      	asrs	r0, r3, #16
 8021274:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021276:	142d      	asrs	r5, r5, #16
 8021278:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802127c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802127e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021282:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021284:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021288:	f100 81f8 	bmi.w	802167c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802128c:	f102 3eff 	add.w	lr, r2, #4294967295
 8021290:	4575      	cmp	r5, lr
 8021292:	f280 81f3 	bge.w	802167c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021296:	2800      	cmp	r0, #0
 8021298:	f2c0 81f0 	blt.w	802167c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802129c:	f103 3eff 	add.w	lr, r3, #4294967295
 80212a0:	4570      	cmp	r0, lr
 80212a2:	f280 81eb 	bge.w	802167c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80212a6:	b212      	sxth	r2, r2
 80212a8:	fb00 5002 	mla	r0, r0, r2, r5
 80212ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212ae:	fa1f fe81 	uxth.w	lr, r1
 80212b2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80212b6:	eb03 0a00 	add.w	sl, r3, r0
 80212ba:	f813 9000 	ldrb.w	r9, [r3, r0]
 80212be:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80212c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80212c6:	b29b      	uxth	r3, r3
 80212c8:	f1bc 0f00 	cmp.w	ip, #0
 80212cc:	f000 81b9 	beq.w	8021642 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80212d0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80212d4:	eb0a 0b02 	add.w	fp, sl, r2
 80212d8:	fa1f fa8c 	uxth.w	sl, ip
 80212dc:	fb0a fe0e 	mul.w	lr, sl, lr
 80212e0:	eba5 050e 	sub.w	r5, r5, lr
 80212e4:	b2ad      	uxth	r5, r5
 80212e6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80212ea:	fb08 f505 	mul.w	r5, r8, r5
 80212ee:	fa1f fa8a 	uxth.w	sl, sl
 80212f2:	eba3 030a 	sub.w	r3, r3, sl
 80212f6:	b29b      	uxth	r3, r3
 80212f8:	940d      	str	r4, [sp, #52]	; 0x34
 80212fa:	fb09 5303 	mla	r3, r9, r3, r5
 80212fe:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021302:	940e      	str	r4, [sp, #56]	; 0x38
 8021304:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021306:	fb0a 3304 	mla	r3, sl, r4, r3
 802130a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802130c:	fb0e 3304 	mla	r3, lr, r4, r3
 8021310:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021314:	2b00      	cmp	r3, #0
 8021316:	f000 810f 	beq.w	8021538 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802131a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802131c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021320:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021324:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021328:	f000 8190 	beq.w	802164c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802132c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021330:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021334:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021338:	fb09 f000 	mul.w	r0, r9, r0
 802133c:	fb0a fe0e 	mul.w	lr, sl, lr
 8021340:	f100 0b20 	add.w	fp, r0, #32
 8021344:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021348:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802134c:	44ce      	add	lr, r9
 802134e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021352:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021356:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802135a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802135e:	ea4e 0909 	orr.w	r9, lr, r9
 8021362:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021366:	8868      	ldrh	r0, [r5, #2]
 8021368:	d019      	beq.n	802139e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802136a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802136e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021372:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021376:	fb08 f800 	mul.w	r8, r8, r0
 802137a:	fb0a fe0e 	mul.w	lr, sl, lr
 802137e:	f108 0b20 	add.w	fp, r8, #32
 8021382:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021386:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802138a:	4486      	add	lr, r0
 802138c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021390:	0a00      	lsrs	r0, r0, #8
 8021392:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021396:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802139a:	ea4e 0000 	orr.w	r0, lr, r0
 802139e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80213a2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80213a6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80213aa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80213ae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80213b2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80213b6:	ea4e 0909 	orr.w	r9, lr, r9
 80213ba:	ea4a 0000 	orr.w	r0, sl, r0
 80213be:	f1bc 0f00 	cmp.w	ip, #0
 80213c2:	f000 8145 	beq.w	8021650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80213c6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80213ca:	3a01      	subs	r2, #1
 80213cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80213ce:	0052      	lsls	r2, r2, #1
 80213d0:	3202      	adds	r2, #2
 80213d2:	2cff      	cmp	r4, #255	; 0xff
 80213d4:	eb05 0e02 	add.w	lr, r5, r2
 80213d8:	5aaa      	ldrh	r2, [r5, r2]
 80213da:	d018      	beq.n	802140e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80213dc:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80213e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80213e4:	fb04 fa02 	mul.w	sl, r4, r2
 80213e8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80213ec:	fb08 f805 	mul.w	r8, r8, r5
 80213f0:	f10a 0520 	add.w	r5, sl, #32
 80213f4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80213f8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80213fc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021400:	4442      	add	r2, r8
 8021402:	0a2d      	lsrs	r5, r5, #8
 8021404:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021408:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802140c:	432a      	orrs	r2, r5
 802140e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021410:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021414:	2cff      	cmp	r4, #255	; 0xff
 8021416:	d01a      	beq.n	802144e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8021418:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802141c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021420:	fb04 fa05 	mul.w	sl, r4, r5
 8021424:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021428:	fb08 f80e 	mul.w	r8, r8, lr
 802142c:	f10a 0e20 	add.w	lr, sl, #32
 8021430:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021434:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021438:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802143c:	4445      	add	r5, r8
 802143e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021442:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021446:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802144a:	ea45 050e 	orr.w	r5, r5, lr
 802144e:	fb1c fe01 	smulbb	lr, ip, r1
 8021452:	f1cc 0810 	rsb	r8, ip, #16
 8021456:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802145a:	eba8 0801 	sub.w	r8, r8, r1
 802145e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021462:	4341      	muls	r1, r0
 8021464:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021468:	fb09 1108 	mla	r1, r9, r8, r1
 802146c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021470:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021474:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021478:	ea4a 0202 	orr.w	r2, sl, r2
 802147c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021480:	fb0c 1102 	mla	r1, ip, r2, r1
 8021484:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021488:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802148c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021490:	ea4b 0505 	orr.w	r5, fp, r5
 8021494:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021498:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802149c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80214a0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80214a4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80214a8:	ea42 0e0e 	orr.w	lr, r2, lr
 80214ac:	fa1f f28e 	uxth.w	r2, lr
 80214b0:	2bff      	cmp	r3, #255	; 0xff
 80214b2:	d103      	bne.n	80214bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80214b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80214b6:	29ff      	cmp	r1, #255	; 0xff
 80214b8:	f000 80de 	beq.w	8021678 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80214bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80214be:	8838      	ldrh	r0, [r7, #0]
 80214c0:	434b      	muls	r3, r1
 80214c2:	f103 0c01 	add.w	ip, r3, #1
 80214c6:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80214ca:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80214ce:	fa5f fc83 	uxtb.w	ip, r3
 80214d2:	1203      	asrs	r3, r0, #8
 80214d4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80214d8:	fb13 f30c 	smulbb	r3, r3, ip
 80214dc:	1215      	asrs	r5, r2, #8
 80214de:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80214e2:	fb05 3501 	mla	r5, r5, r1, r3
 80214e6:	10c3      	asrs	r3, r0, #3
 80214e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80214ec:	fb13 f30c 	smulbb	r3, r3, ip
 80214f0:	10d1      	asrs	r1, r2, #3
 80214f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80214f4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80214f8:	fb01 3104 	mla	r1, r1, r4, r3
 80214fc:	00c3      	lsls	r3, r0, #3
 80214fe:	b2db      	uxtb	r3, r3
 8021500:	fb13 f30c 	smulbb	r3, r3, ip
 8021504:	00d2      	lsls	r2, r2, #3
 8021506:	b2d2      	uxtb	r2, r2
 8021508:	fb02 3304 	mla	r3, r2, r4, r3
 802150c:	b2ad      	uxth	r5, r5
 802150e:	b29a      	uxth	r2, r3
 8021510:	1c6b      	adds	r3, r5, #1
 8021512:	b289      	uxth	r1, r1
 8021514:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021518:	1c53      	adds	r3, r2, #1
 802151a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802151e:	1c4a      	adds	r2, r1, #1
 8021520:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021524:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021528:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802152c:	0949      	lsrs	r1, r1, #5
 802152e:	432b      	orrs	r3, r5
 8021530:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021534:	430b      	orrs	r3, r1
 8021536:	803b      	strh	r3, [r7, #0]
 8021538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802153a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802153c:	3702      	adds	r7, #2
 802153e:	4413      	add	r3, r2
 8021540:	9321      	str	r3, [sp, #132]	; 0x84
 8021542:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021544:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021546:	441a      	add	r2, r3
 8021548:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802154a:	9222      	str	r2, [sp, #136]	; 0x88
 802154c:	3b01      	subs	r3, #1
 802154e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021550:	e689      	b.n	8021266 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021554:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021556:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8021558:	4433      	add	r3, r6
 802155a:	9321      	str	r3, [sp, #132]	; 0x84
 802155c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802155e:	441c      	add	r4, r3
 8021560:	9b08      	ldr	r3, [sp, #32]
 8021562:	9422      	str	r4, [sp, #136]	; 0x88
 8021564:	3b01      	subs	r3, #1
 8021566:	9308      	str	r3, [sp, #32]
 8021568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802156a:	3302      	adds	r3, #2
 802156c:	9309      	str	r3, [sp, #36]	; 0x24
 802156e:	e658      	b.n	8021222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021570:	d028      	beq.n	80215c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021572:	9b08      	ldr	r3, [sp, #32]
 8021574:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021576:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021578:	3b01      	subs	r3, #1
 802157a:	fb00 5003 	mla	r0, r0, r3, r5
 802157e:	1400      	asrs	r0, r0, #16
 8021580:	f53f ae6c 	bmi.w	802125c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021584:	3901      	subs	r1, #1
 8021586:	4288      	cmp	r0, r1
 8021588:	f6bf ae68 	bge.w	802125c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802158c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802158e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021590:	fb01 0303 	mla	r3, r1, r3, r0
 8021594:	141b      	asrs	r3, r3, #16
 8021596:	f53f ae61 	bmi.w	802125c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802159a:	3a01      	subs	r2, #1
 802159c:	4293      	cmp	r3, r2
 802159e:	f6bf ae5d 	bge.w	802125c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80215a2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80215a6:	9b08      	ldr	r3, [sp, #32]
 80215a8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80215ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80215ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	f300 8082 	bgt.w	80216ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 80215b6:	9b08      	ldr	r3, [sp, #32]
 80215b8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80215bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215be:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80215c2:	9309      	str	r3, [sp, #36]	; 0x24
 80215c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	f340 81ef 	ble.w	80219aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80215cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80215d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80215d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80215d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80215dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80215e0:	eef0 6a62 	vmov.f32	s13, s5
 80215e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80215e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80215ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 80215f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215f8:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80215fc:	eef0 6a43 	vmov.f32	s13, s6
 8021600:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021604:	ee12 2a90 	vmov	r2, s5
 8021608:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802160c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802160e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021612:	fb92 f3f3 	sdiv	r3, r2, r3
 8021616:	ee13 2a10 	vmov	r2, s6
 802161a:	9323      	str	r3, [sp, #140]	; 0x8c
 802161c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802161e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8021622:	fb92 f3f3 	sdiv	r3, r2, r3
 8021626:	9324      	str	r3, [sp, #144]	; 0x90
 8021628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802162a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802162c:	3b01      	subs	r3, #1
 802162e:	9311      	str	r3, [sp, #68]	; 0x44
 8021630:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021632:	bf08      	it	eq
 8021634:	4613      	moveq	r3, r2
 8021636:	eeb0 3a67 	vmov.f32	s6, s15
 802163a:	9308      	str	r3, [sp, #32]
 802163c:	eef0 2a47 	vmov.f32	s5, s14
 8021640:	e5e1      	b.n	8021206 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021642:	fb08 f505 	mul.w	r5, r8, r5
 8021646:	fb09 5303 	mla	r3, r9, r3, r5
 802164a:	e661      	b.n	8021310 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802164c:	4681      	mov	r9, r0
 802164e:	e688      	b.n	8021362 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8021650:	f1c1 0210 	rsb	r2, r1, #16
 8021654:	4341      	muls	r1, r0
 8021656:	fb09 1902 	mla	r9, r9, r2, r1
 802165a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802165e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021662:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021666:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802166a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802166e:	ea42 0909 	orr.w	r9, r2, r9
 8021672:	fa1f f289 	uxth.w	r2, r9
 8021676:	e71b      	b.n	80214b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021678:	803a      	strh	r2, [r7, #0]
 802167a:	e75d      	b.n	8021538 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802167c:	f115 0e01 	adds.w	lr, r5, #1
 8021680:	f53f af5a 	bmi.w	8021538 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021684:	4572      	cmp	r2, lr
 8021686:	f6ff af57 	blt.w	8021538 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802168a:	f110 0e01 	adds.w	lr, r0, #1
 802168e:	f53f af53 	bmi.w	8021538 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021692:	4573      	cmp	r3, lr
 8021694:	f6ff af50 	blt.w	8021538 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021698:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802169a:	b21b      	sxth	r3, r3
 802169c:	b212      	sxth	r2, r2
 802169e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80216a2:	9301      	str	r3, [sp, #4]
 80216a4:	9200      	str	r2, [sp, #0]
 80216a6:	e9cd c405 	strd	ip, r4, [sp, #20]
 80216aa:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80216ae:	9502      	str	r5, [sp, #8]
 80216b0:	4639      	mov	r1, r7
 80216b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80216b4:	f7ff fc04 	bl	8020ec0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80216b8:	e73e      	b.n	8021538 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80216ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80216bc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80216c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80216c2:	fa1f fc82 	uxth.w	ip, r2
 80216c6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80216ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80216cc:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80216d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80216d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80216d6:	141f      	asrs	r7, r3, #16
 80216d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80216da:	141b      	asrs	r3, r3, #16
 80216dc:	fb01 3707 	mla	r7, r1, r7, r3
 80216e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80216e2:	eb03 0a07 	add.w	sl, r3, r7
 80216e6:	f813 9007 	ldrb.w	r9, [r3, r7]
 80216ea:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80216ee:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80216f2:	b29b      	uxth	r3, r3
 80216f4:	2d00      	cmp	r5, #0
 80216f6:	f000 813d 	beq.w	8021974 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80216fa:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80216fe:	eb0a 0b01 	add.w	fp, sl, r1
 8021702:	fa1f fa85 	uxth.w	sl, r5
 8021706:	fb0a fc0c 	mul.w	ip, sl, ip
 802170a:	eba0 000c 	sub.w	r0, r0, ip
 802170e:	b280      	uxth	r0, r0
 8021710:	fb08 f000 	mul.w	r0, r8, r0
 8021714:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021718:	fa1f fa8a 	uxth.w	sl, sl
 802171c:	eba3 030a 	sub.w	r3, r3, sl
 8021720:	b29b      	uxth	r3, r3
 8021722:	fb09 0303 	mla	r3, r9, r3, r0
 8021726:	940f      	str	r4, [sp, #60]	; 0x3c
 8021728:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802172a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802172e:	fb0a 3300 	mla	r3, sl, r0, r3
 8021732:	fb0c 3304 	mla	r3, ip, r4, r3
 8021736:	9410      	str	r4, [sp, #64]	; 0x40
 8021738:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802173c:	2b00      	cmp	r3, #0
 802173e:	f000 810b 	beq.w	8021958 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8021742:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021744:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021746:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802174a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802174e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021752:	f000 8114 	beq.w	802197e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8021756:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802175a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802175e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021762:	fb09 f707 	mul.w	r7, r9, r7
 8021766:	fb0a fc0c 	mul.w	ip, sl, ip
 802176a:	f107 0b20 	add.w	fp, r7, #32
 802176e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021772:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021776:	44cc      	add	ip, r9
 8021778:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802177c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021780:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021784:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021788:	ea4c 0909 	orr.w	r9, ip, r9
 802178c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021790:	8847      	ldrh	r7, [r0, #2]
 8021792:	d019      	beq.n	80217c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8021794:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021798:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802179c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80217a0:	fb08 f807 	mul.w	r8, r8, r7
 80217a4:	fb0a fc0c 	mul.w	ip, sl, ip
 80217a8:	f108 0b20 	add.w	fp, r8, #32
 80217ac:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80217b0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80217b4:	44bc      	add	ip, r7
 80217b6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80217ba:	0a3f      	lsrs	r7, r7, #8
 80217bc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80217c0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80217c4:	ea4c 0707 	orr.w	r7, ip, r7
 80217c8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80217cc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80217d0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80217d4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80217d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80217dc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80217e0:	ea4c 0909 	orr.w	r9, ip, r9
 80217e4:	ea4a 0707 	orr.w	r7, sl, r7
 80217e8:	2d00      	cmp	r5, #0
 80217ea:	f000 80ca 	beq.w	8021982 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 80217ee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80217f2:	3901      	subs	r1, #1
 80217f4:	0049      	lsls	r1, r1, #1
 80217f6:	3102      	adds	r1, #2
 80217f8:	eb00 0c01 	add.w	ip, r0, r1
 80217fc:	5a41      	ldrh	r1, [r0, r1]
 80217fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021800:	28ff      	cmp	r0, #255	; 0xff
 8021802:	d019      	beq.n	8021838 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8021804:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021806:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802180a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802180e:	fb04 fa01 	mul.w	sl, r4, r1
 8021812:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021816:	fb08 f800 	mul.w	r8, r8, r0
 802181a:	f10a 0020 	add.w	r0, sl, #32
 802181e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8021822:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021826:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802182a:	4441      	add	r1, r8
 802182c:	0a00      	lsrs	r0, r0, #8
 802182e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021832:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021836:	4301      	orrs	r1, r0
 8021838:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802183a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802183e:	2cff      	cmp	r4, #255	; 0xff
 8021840:	d01a      	beq.n	8021878 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8021842:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8021846:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802184a:	fb04 fa00 	mul.w	sl, r4, r0
 802184e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021852:	fb08 f80c 	mul.w	r8, r8, ip
 8021856:	f10a 0c20 	add.w	ip, sl, #32
 802185a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802185e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021862:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021866:	4440      	add	r0, r8
 8021868:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802186c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021870:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021874:	ea40 000c 	orr.w	r0, r0, ip
 8021878:	fb15 fc02 	smulbb	ip, r5, r2
 802187c:	f1c5 0810 	rsb	r8, r5, #16
 8021880:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021884:	eba8 0802 	sub.w	r8, r8, r2
 8021888:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802188c:	437a      	muls	r2, r7
 802188e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8021892:	fb09 2208 	mla	r2, r9, r8, r2
 8021896:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802189a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802189e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80218a2:	ea4a 0101 	orr.w	r1, sl, r1
 80218a6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80218aa:	fb05 2201 	mla	r2, r5, r1, r2
 80218ae:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80218b2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80218b6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80218ba:	ea4b 0000 	orr.w	r0, fp, r0
 80218be:	fb0c 2200 	mla	r2, ip, r0, r2
 80218c2:	0d57      	lsrs	r7, r2, #21
 80218c4:	0952      	lsrs	r2, r2, #5
 80218c6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80218ca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80218ce:	433a      	orrs	r2, r7
 80218d0:	2bff      	cmp	r3, #255	; 0xff
 80218d2:	b292      	uxth	r2, r2
 80218d4:	d102      	bne.n	80218dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80218d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80218d8:	29ff      	cmp	r1, #255	; 0xff
 80218da:	d063      	beq.n	80219a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 80218dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80218de:	f8be 1000 	ldrh.w	r1, [lr]
 80218e2:	4343      	muls	r3, r0
 80218e4:	1c58      	adds	r0, r3, #1
 80218e6:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80218ea:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80218ee:	1208      	asrs	r0, r1, #8
 80218f0:	b2db      	uxtb	r3, r3
 80218f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80218f6:	fb10 f003 	smulbb	r0, r0, r3
 80218fa:	10cf      	asrs	r7, r1, #3
 80218fc:	00c9      	lsls	r1, r1, #3
 80218fe:	b2c9      	uxtb	r1, r1
 8021900:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021902:	1215      	asrs	r5, r2, #8
 8021904:	fb11 f103 	smulbb	r1, r1, r3
 8021908:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802190c:	fb05 0504 	mla	r5, r5, r4, r0
 8021910:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021914:	10d0      	asrs	r0, r2, #3
 8021916:	00d2      	lsls	r2, r2, #3
 8021918:	fb17 f703 	smulbb	r7, r7, r3
 802191c:	b2d2      	uxtb	r2, r2
 802191e:	fb02 1204 	mla	r2, r2, r4, r1
 8021922:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021926:	fb00 7004 	mla	r0, r0, r4, r7
 802192a:	b2ad      	uxth	r5, r5
 802192c:	b292      	uxth	r2, r2
 802192e:	1c6b      	adds	r3, r5, #1
 8021930:	1c57      	adds	r7, r2, #1
 8021932:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021936:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802193a:	b280      	uxth	r0, r0
 802193c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021940:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021944:	433d      	orrs	r5, r7
 8021946:	1c47      	adds	r7, r0, #1
 8021948:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802194c:	097f      	lsrs	r7, r7, #5
 802194e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021952:	433d      	orrs	r5, r7
 8021954:	f8ae 5000 	strh.w	r5, [lr]
 8021958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802195a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802195c:	f10e 0e02 	add.w	lr, lr, #2
 8021960:	4413      	add	r3, r2
 8021962:	9321      	str	r3, [sp, #132]	; 0x84
 8021964:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021966:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021968:	441a      	add	r2, r3
 802196a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802196c:	9222      	str	r2, [sp, #136]	; 0x88
 802196e:	3b01      	subs	r3, #1
 8021970:	9313      	str	r3, [sp, #76]	; 0x4c
 8021972:	e61c      	b.n	80215ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8021974:	fb08 f000 	mul.w	r0, r8, r0
 8021978:	fb09 0303 	mla	r3, r9, r3, r0
 802197c:	e6dc      	b.n	8021738 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 802197e:	46b9      	mov	r9, r7
 8021980:	e704      	b.n	802178c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8021982:	f1c2 0110 	rsb	r1, r2, #16
 8021986:	437a      	muls	r2, r7
 8021988:	fb09 2901 	mla	r9, r9, r1, r2
 802198c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021990:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021994:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021998:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802199c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80219a0:	4302      	orrs	r2, r0
 80219a2:	e795      	b.n	80218d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80219a4:	f8ae 2000 	strh.w	r2, [lr]
 80219a8:	e7d6      	b.n	8021958 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80219aa:	b017      	add	sp, #92	; 0x5c
 80219ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080219b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80219b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219b4:	b085      	sub	sp, #20
 80219b6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80219ba:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80219be:	fb00 7406 	mla	r4, r0, r6, r7
 80219c2:	2800      	cmp	r0, #0
 80219c4:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80219c8:	9103      	str	r1, [sp, #12]
 80219ca:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80219ce:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80219d2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80219d6:	9501      	str	r5, [sp, #4]
 80219d8:	eb02 0904 	add.w	r9, r2, r4
 80219dc:	f2c0 8141 	blt.w	8021c62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80219e0:	4583      	cmp	fp, r0
 80219e2:	f340 813e 	ble.w	8021c62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80219e6:	2f00      	cmp	r7, #0
 80219e8:	f2c0 8137 	blt.w	8021c5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80219ec:	42be      	cmp	r6, r7
 80219ee:	f340 8134 	ble.w	8021c5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80219f2:	f812 c004 	ldrb.w	ip, [r2, r4]
 80219f6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80219fa:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80219fe:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021a02:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8021a06:	4355      	muls	r5, r2
 8021a08:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a0c:	fb0c f203 	mul.w	r2, ip, r3
 8021a10:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021a14:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021a18:	441d      	add	r5, r3
 8021a1a:	f102 0320 	add.w	r3, r2, #32
 8021a1e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021a22:	0a1b      	lsrs	r3, r3, #8
 8021a24:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021a28:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a2c:	431c      	orrs	r4, r3
 8021a2e:	1c7b      	adds	r3, r7, #1
 8021a30:	f100 811c 	bmi.w	8021c6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021a34:	429e      	cmp	r6, r3
 8021a36:	f340 8119 	ble.w	8021c6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021a3a:	2900      	cmp	r1, #0
 8021a3c:	f000 8119 	beq.w	8021c72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8021a40:	9a01      	ldr	r2, [sp, #4]
 8021a42:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021a46:	8855      	ldrh	r5, [r2, #2]
 8021a48:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021a4c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021a50:	fb08 f802 	mul.w	r8, r8, r2
 8021a54:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021a58:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021a5c:	435d      	muls	r5, r3
 8021a5e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8021a62:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021a66:	44d0      	add	r8, sl
 8021a68:	f105 0a20 	add.w	sl, r5, #32
 8021a6c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021a70:	0a2d      	lsrs	r5, r5, #8
 8021a72:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021a76:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021a7a:	432a      	orrs	r2, r5
 8021a7c:	3001      	adds	r0, #1
 8021a7e:	f100 80fe 	bmi.w	8021c7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021a82:	4583      	cmp	fp, r0
 8021a84:	f340 80fb 	ble.w	8021c7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021a88:	f1be 0f00 	cmp.w	lr, #0
 8021a8c:	f000 80fc 	beq.w	8021c88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8021a90:	2f00      	cmp	r7, #0
 8021a92:	f2c0 80f1 	blt.w	8021c78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021a96:	42be      	cmp	r6, r7
 8021a98:	f340 80ee 	ble.w	8021c78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021a9c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021aa0:	9801      	ldr	r0, [sp, #4]
 8021aa2:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021aa6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021aaa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021aae:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8021ab2:	fb0a fa00 	mul.w	sl, sl, r0
 8021ab6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021aba:	fb05 f808 	mul.w	r8, r5, r8
 8021abe:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021ac2:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021ac6:	4482      	add	sl, r0
 8021ac8:	f108 0020 	add.w	r0, r8, #32
 8021acc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021ad0:	0a00      	lsrs	r0, r0, #8
 8021ad2:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021ad6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021ada:	ea4b 0b00 	orr.w	fp, fp, r0
 8021ade:	3701      	adds	r7, #1
 8021ae0:	f100 80d7 	bmi.w	8021c92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021ae4:	42be      	cmp	r6, r7
 8021ae6:	f340 80d4 	ble.w	8021c92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021aea:	2900      	cmp	r1, #0
 8021aec:	f000 80d4 	beq.w	8021c98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8021af0:	9801      	ldr	r0, [sp, #4]
 8021af2:	3601      	adds	r6, #1
 8021af4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021af8:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021afc:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021b00:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b04:	fb07 f800 	mul.w	r8, r7, r0
 8021b08:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021b0c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021b10:	fb09 f906 	mul.w	r9, r9, r6
 8021b14:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021b18:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021b1c:	44d1      	add	r9, sl
 8021b1e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021b22:	f108 0020 	add.w	r0, r8, #32
 8021b26:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021b2a:	0a00      	lsrs	r0, r0, #8
 8021b2c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b30:	4330      	orrs	r0, r6
 8021b32:	b28e      	uxth	r6, r1
 8021b34:	fa1f f98e 	uxth.w	r9, lr
 8021b38:	fb06 f809 	mul.w	r8, r6, r9
 8021b3c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021b40:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021b44:	0136      	lsls	r6, r6, #4
 8021b46:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021b4a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021b4e:	9601      	str	r6, [sp, #4]
 8021b50:	ea4a 0404 	orr.w	r4, sl, r4
 8021b54:	fa1f f689 	uxth.w	r6, r9
 8021b58:	9602      	str	r6, [sp, #8]
 8021b5a:	4626      	mov	r6, r4
 8021b5c:	fb11 f90e 	smulbb	r9, r1, lr
 8021b60:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021b64:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021b68:	f1ce 0410 	rsb	r4, lr, #16
 8021b6c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021b70:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021b74:	1a64      	subs	r4, r4, r1
 8021b76:	ea4a 0202 	orr.w	r2, sl, r2
 8021b7a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021b7e:	434a      	muls	r2, r1
 8021b80:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021b84:	fb04 2406 	mla	r4, r4, r6, r2
 8021b88:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021b8c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021b90:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021b94:	ea4a 0000 	orr.w	r0, sl, r0
 8021b98:	fb09 4200 	mla	r2, r9, r0, r4
 8021b9c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021ba0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021ba4:	9801      	ldr	r0, [sp, #4]
 8021ba6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021baa:	ea44 0b0b 	orr.w	fp, r4, fp
 8021bae:	9c02      	ldr	r4, [sp, #8]
 8021bb0:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021bb4:	1b00      	subs	r0, r0, r4
 8021bb6:	9c01      	ldr	r4, [sp, #4]
 8021bb8:	b280      	uxth	r0, r0
 8021bba:	eba4 0608 	sub.w	r6, r4, r8
 8021bbe:	b2b6      	uxth	r6, r6
 8021bc0:	4373      	muls	r3, r6
 8021bc2:	fb0c 3300 	mla	r3, ip, r0, r3
 8021bc6:	9802      	ldr	r0, [sp, #8]
 8021bc8:	9903      	ldr	r1, [sp, #12]
 8021bca:	fb00 3505 	mla	r5, r0, r5, r3
 8021bce:	fb08 5707 	mla	r7, r8, r7, r5
 8021bd2:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8021bd6:	8809      	ldrh	r1, [r1, #0]
 8021bd8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021bdc:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021be0:	120b      	asrs	r3, r1, #8
 8021be2:	b2ff      	uxtb	r7, r7
 8021be4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021be8:	437b      	muls	r3, r7
 8021bea:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021bee:	10c8      	asrs	r0, r1, #3
 8021bf0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021bf4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021bf8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021bfc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021c00:	00c9      	lsls	r1, r1, #3
 8021c02:	4378      	muls	r0, r7
 8021c04:	ea42 0e0e 	orr.w	lr, r2, lr
 8021c08:	b2c9      	uxtb	r1, r1
 8021c0a:	fa1f f28e 	uxth.w	r2, lr
 8021c0e:	434f      	muls	r7, r1
 8021c10:	1c59      	adds	r1, r3, #1
 8021c12:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021c16:	1213      	asrs	r3, r2, #8
 8021c18:	f023 0307 	bic.w	r3, r3, #7
 8021c1c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021c20:	1c41      	adds	r1, r0, #1
 8021c22:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8021c26:	10d1      	asrs	r1, r2, #3
 8021c28:	f021 0103 	bic.w	r1, r1, #3
 8021c2c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021c30:	021b      	lsls	r3, r3, #8
 8021c32:	00c9      	lsls	r1, r1, #3
 8021c34:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021c38:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021c3c:	430b      	orrs	r3, r1
 8021c3e:	1c79      	adds	r1, r7, #1
 8021c40:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021c44:	00d2      	lsls	r2, r2, #3
 8021c46:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8021c4a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021c4e:	431a      	orrs	r2, r3
 8021c50:	9b03      	ldr	r3, [sp, #12]
 8021c52:	801a      	strh	r2, [r3, #0]
 8021c54:	b005      	add	sp, #20
 8021c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c5a:	f04f 0c00 	mov.w	ip, #0
 8021c5e:	4664      	mov	r4, ip
 8021c60:	e6e5      	b.n	8021a2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8021c62:	2300      	movs	r3, #0
 8021c64:	469c      	mov	ip, r3
 8021c66:	461a      	mov	r2, r3
 8021c68:	461c      	mov	r4, r3
 8021c6a:	e707      	b.n	8021a7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021c6c:	2300      	movs	r3, #0
 8021c6e:	461a      	mov	r2, r3
 8021c70:	e704      	b.n	8021a7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021c72:	460b      	mov	r3, r1
 8021c74:	460a      	mov	r2, r1
 8021c76:	e701      	b.n	8021a7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021c78:	2500      	movs	r5, #0
 8021c7a:	46ab      	mov	fp, r5
 8021c7c:	e72f      	b.n	8021ade <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8021c7e:	2700      	movs	r7, #0
 8021c80:	463d      	mov	r5, r7
 8021c82:	4638      	mov	r0, r7
 8021c84:	46bb      	mov	fp, r7
 8021c86:	e754      	b.n	8021b32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021c88:	4677      	mov	r7, lr
 8021c8a:	4675      	mov	r5, lr
 8021c8c:	4670      	mov	r0, lr
 8021c8e:	46f3      	mov	fp, lr
 8021c90:	e74f      	b.n	8021b32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021c92:	2700      	movs	r7, #0
 8021c94:	4638      	mov	r0, r7
 8021c96:	e74c      	b.n	8021b32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021c98:	460f      	mov	r7, r1
 8021c9a:	4608      	mov	r0, r1
 8021c9c:	e749      	b.n	8021b32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08021ca0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ca4:	b093      	sub	sp, #76	; 0x4c
 8021ca6:	9210      	str	r2, [sp, #64]	; 0x40
 8021ca8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021caa:	9011      	str	r0, [sp, #68]	; 0x44
 8021cac:	6850      	ldr	r0, [r2, #4]
 8021cae:	910e      	str	r1, [sp, #56]	; 0x38
 8021cb0:	9306      	str	r3, [sp, #24]
 8021cb2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021cb6:	fb00 1303 	mla	r3, r0, r3, r1
 8021cba:	6812      	ldr	r2, [r2, #0]
 8021cbc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021cc0:	9307      	str	r3, [sp, #28]
 8021cc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021cc4:	681b      	ldr	r3, [r3, #0]
 8021cc6:	9308      	str	r3, [sp, #32]
 8021cc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021cca:	685b      	ldr	r3, [r3, #4]
 8021ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8021cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	dc03      	bgt.n	8021cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	f340 83b4 	ble.w	8022444 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8021cdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021cde:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021ce2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021ce6:	1e48      	subs	r0, r1, #1
 8021ce8:	1e55      	subs	r5, r2, #1
 8021cea:	9b06      	ldr	r3, [sp, #24]
 8021cec:	2b00      	cmp	r3, #0
 8021cee:	f340 8163 	ble.w	8021fb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021cf2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021cf4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021cf6:	1436      	asrs	r6, r6, #16
 8021cf8:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021cfc:	d406      	bmi.n	8021d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021cfe:	4286      	cmp	r6, r0
 8021d00:	da04      	bge.n	8021d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	db02      	blt.n	8021d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d06:	42ab      	cmp	r3, r5
 8021d08:	f2c0 8157 	blt.w	8021fba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021d0c:	3601      	adds	r6, #1
 8021d0e:	f100 8144 	bmi.w	8021f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8021d12:	42b1      	cmp	r1, r6
 8021d14:	f2c0 8141 	blt.w	8021f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8021d18:	3301      	adds	r3, #1
 8021d1a:	f100 813e 	bmi.w	8021f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8021d1e:	429a      	cmp	r2, r3
 8021d20:	f2c0 813b 	blt.w	8021f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8021d24:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021d28:	9b06      	ldr	r3, [sp, #24]
 8021d2a:	9f07      	ldr	r7, [sp, #28]
 8021d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8021d2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	f340 8164 	ble.w	8021ffe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8021d36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021d38:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021d3a:	1418      	asrs	r0, r3, #16
 8021d3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021d3e:	142d      	asrs	r5, r5, #16
 8021d40:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021d44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021d46:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021d4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021d50:	f100 81ee 	bmi.w	8022130 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021d54:	f102 3eff 	add.w	lr, r2, #4294967295
 8021d58:	4575      	cmp	r5, lr
 8021d5a:	f280 81e9 	bge.w	8022130 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021d5e:	2800      	cmp	r0, #0
 8021d60:	f2c0 81e6 	blt.w	8022130 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021d64:	f103 3eff 	add.w	lr, r3, #4294967295
 8021d68:	4570      	cmp	r0, lr
 8021d6a:	f280 81e1 	bge.w	8022130 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021d6e:	b212      	sxth	r2, r2
 8021d70:	fb00 5002 	mla	r0, r0, r2, r5
 8021d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d76:	fa1f fe81 	uxth.w	lr, r1
 8021d7a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021d7e:	eb03 0a00 	add.w	sl, r3, r0
 8021d82:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021d86:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021d8a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021d8e:	b29b      	uxth	r3, r3
 8021d90:	f1bc 0f00 	cmp.w	ip, #0
 8021d94:	f000 8179 	beq.w	802208a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021d98:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021d9c:	eb0a 0b02 	add.w	fp, sl, r2
 8021da0:	fa1f fa8c 	uxth.w	sl, ip
 8021da4:	fb0a fe0e 	mul.w	lr, sl, lr
 8021da8:	eba5 050e 	sub.w	r5, r5, lr
 8021dac:	b2ad      	uxth	r5, r5
 8021dae:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021db2:	fb08 f505 	mul.w	r5, r8, r5
 8021db6:	fa1f fa8a 	uxth.w	sl, sl
 8021dba:	eba3 030a 	sub.w	r3, r3, sl
 8021dbe:	b29b      	uxth	r3, r3
 8021dc0:	940a      	str	r4, [sp, #40]	; 0x28
 8021dc2:	fb09 5303 	mla	r3, r9, r3, r5
 8021dc6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021dca:	940b      	str	r4, [sp, #44]	; 0x2c
 8021dcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021dce:	fb0a 3304 	mla	r3, sl, r4, r3
 8021dd2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021dd4:	fb0e 3304 	mla	r3, lr, r4, r3
 8021dd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021ddc:	2b00      	cmp	r3, #0
 8021dde:	f000 80cf 	beq.w	8021f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8021de2:	9c08      	ldr	r4, [sp, #32]
 8021de4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021de8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021dec:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021df0:	f000 8150 	beq.w	8022094 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8021df4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021df8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021dfc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021e00:	fb09 f000 	mul.w	r0, r9, r0
 8021e04:	fb0a fe0e 	mul.w	lr, sl, lr
 8021e08:	f100 0b20 	add.w	fp, r0, #32
 8021e0c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021e10:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021e14:	44ce      	add	lr, r9
 8021e16:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021e1a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021e1e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021e22:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021e26:	ea4e 0909 	orr.w	r9, lr, r9
 8021e2a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021e2e:	8868      	ldrh	r0, [r5, #2]
 8021e30:	d019      	beq.n	8021e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021e32:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021e36:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021e3a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021e3e:	fb08 f800 	mul.w	r8, r8, r0
 8021e42:	fb0a fe0e 	mul.w	lr, sl, lr
 8021e46:	f108 0b20 	add.w	fp, r8, #32
 8021e4a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021e4e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021e52:	4486      	add	lr, r0
 8021e54:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021e58:	0a00      	lsrs	r0, r0, #8
 8021e5a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021e5e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021e62:	ea4e 0000 	orr.w	r0, lr, r0
 8021e66:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021e6a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021e6e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021e72:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021e76:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021e7a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021e7e:	ea4e 0909 	orr.w	r9, lr, r9
 8021e82:	ea4a 0000 	orr.w	r0, sl, r0
 8021e86:	f1bc 0f00 	cmp.w	ip, #0
 8021e8a:	f000 8105 	beq.w	8022098 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021e8e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021e92:	3a01      	subs	r2, #1
 8021e94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021e96:	0052      	lsls	r2, r2, #1
 8021e98:	3202      	adds	r2, #2
 8021e9a:	2cff      	cmp	r4, #255	; 0xff
 8021e9c:	eb05 0e02 	add.w	lr, r5, r2
 8021ea0:	5aaa      	ldrh	r2, [r5, r2]
 8021ea2:	d018      	beq.n	8021ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8021ea4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021ea8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021eac:	fb04 fa02 	mul.w	sl, r4, r2
 8021eb0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021eb4:	fb08 f805 	mul.w	r8, r8, r5
 8021eb8:	f10a 0520 	add.w	r5, sl, #32
 8021ebc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021ec0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021ec4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021ec8:	4442      	add	r2, r8
 8021eca:	0a2d      	lsrs	r5, r5, #8
 8021ecc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021ed0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021ed4:	432a      	orrs	r2, r5
 8021ed6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ed8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021edc:	2cff      	cmp	r4, #255	; 0xff
 8021ede:	d01a      	beq.n	8021f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021ee0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021ee4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021ee8:	fb04 fa05 	mul.w	sl, r4, r5
 8021eec:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021ef0:	fb08 f80e 	mul.w	r8, r8, lr
 8021ef4:	f10a 0e20 	add.w	lr, sl, #32
 8021ef8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021efc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021f00:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021f04:	4445      	add	r5, r8
 8021f06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f0a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021f0e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021f12:	ea45 050e 	orr.w	r5, r5, lr
 8021f16:	fb1c fe01 	smulbb	lr, ip, r1
 8021f1a:	f1cc 0810 	rsb	r8, ip, #16
 8021f1e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021f22:	eba8 0801 	sub.w	r8, r8, r1
 8021f26:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021f2a:	4341      	muls	r1, r0
 8021f2c:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021f30:	fb09 1108 	mla	r1, r9, r8, r1
 8021f34:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021f38:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021f3c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021f40:	ea4a 0202 	orr.w	r2, sl, r2
 8021f44:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021f48:	fb0c 1102 	mla	r1, ip, r2, r1
 8021f4c:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021f50:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021f54:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021f58:	ea4b 0505 	orr.w	r5, fp, r5
 8021f5c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021f60:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021f64:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021f68:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021f6c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021f70:	ea42 0e0e 	orr.w	lr, r2, lr
 8021f74:	fa1f f28e 	uxth.w	r2, lr
 8021f78:	2bff      	cmp	r3, #255	; 0xff
 8021f7a:	f040 80a1 	bne.w	80220c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8021f7e:	803a      	strh	r2, [r7, #0]
 8021f80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021f82:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021f84:	3702      	adds	r7, #2
 8021f86:	4413      	add	r3, r2
 8021f88:	931d      	str	r3, [sp, #116]	; 0x74
 8021f8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021f8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f8e:	441a      	add	r2, r3
 8021f90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021f92:	921e      	str	r2, [sp, #120]	; 0x78
 8021f94:	3b01      	subs	r3, #1
 8021f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f98:	e6c9      	b.n	8021d2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021f9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021f9c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8021f9e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8021fa0:	4433      	add	r3, r6
 8021fa2:	931d      	str	r3, [sp, #116]	; 0x74
 8021fa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021fa6:	441c      	add	r4, r3
 8021fa8:	9b06      	ldr	r3, [sp, #24]
 8021faa:	941e      	str	r4, [sp, #120]	; 0x78
 8021fac:	3b01      	subs	r3, #1
 8021fae:	9306      	str	r3, [sp, #24]
 8021fb0:	9b07      	ldr	r3, [sp, #28]
 8021fb2:	3302      	adds	r3, #2
 8021fb4:	9307      	str	r3, [sp, #28]
 8021fb6:	e698      	b.n	8021cea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021fb8:	d028      	beq.n	802200c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021fba:	9b06      	ldr	r3, [sp, #24]
 8021fbc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021fbe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021fc0:	3b01      	subs	r3, #1
 8021fc2:	fb00 5003 	mla	r0, r0, r3, r5
 8021fc6:	1400      	asrs	r0, r0, #16
 8021fc8:	f53f aeac 	bmi.w	8021d24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021fcc:	3901      	subs	r1, #1
 8021fce:	4288      	cmp	r0, r1
 8021fd0:	f6bf aea8 	bge.w	8021d24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021fd4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021fd6:	981e      	ldr	r0, [sp, #120]	; 0x78
 8021fd8:	fb01 0303 	mla	r3, r1, r3, r0
 8021fdc:	141b      	asrs	r3, r3, #16
 8021fde:	f53f aea1 	bmi.w	8021d24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021fe2:	3a01      	subs	r2, #1
 8021fe4:	4293      	cmp	r3, r2
 8021fe6:	f6bf ae9d 	bge.w	8021d24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021fea:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021fee:	9b06      	ldr	r3, [sp, #24]
 8021ff0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8021ff4:	930f      	str	r3, [sp, #60]	; 0x3c
 8021ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021ff8:	2b00      	cmp	r3, #0
 8021ffa:	f300 80b6 	bgt.w	802216a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8021ffe:	9b06      	ldr	r3, [sp, #24]
 8022000:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022004:	9b07      	ldr	r3, [sp, #28]
 8022006:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802200a:	9307      	str	r3, [sp, #28]
 802200c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802200e:	2b00      	cmp	r3, #0
 8022010:	f340 8218 	ble.w	8022444 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022018:	ee30 0a04 	vadd.f32	s0, s0, s8
 802201c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022020:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022024:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022028:	eef0 6a62 	vmov.f32	s13, s5
 802202c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022030:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022034:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022038:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802203c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022040:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022044:	eef0 6a43 	vmov.f32	s13, s6
 8022048:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802204c:	ee12 2a90 	vmov	r2, s5
 8022050:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022054:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022056:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802205a:	fb92 f3f3 	sdiv	r3, r2, r3
 802205e:	ee13 2a10 	vmov	r2, s6
 8022062:	931f      	str	r3, [sp, #124]	; 0x7c
 8022064:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022066:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802206a:	fb92 f3f3 	sdiv	r3, r2, r3
 802206e:	9320      	str	r3, [sp, #128]	; 0x80
 8022070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022072:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022074:	3b01      	subs	r3, #1
 8022076:	930e      	str	r3, [sp, #56]	; 0x38
 8022078:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802207a:	bf08      	it	eq
 802207c:	4613      	moveq	r3, r2
 802207e:	eeb0 3a67 	vmov.f32	s6, s15
 8022082:	9306      	str	r3, [sp, #24]
 8022084:	eef0 2a47 	vmov.f32	s5, s14
 8022088:	e621      	b.n	8021cce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802208a:	fb08 f505 	mul.w	r5, r8, r5
 802208e:	fb09 5303 	mla	r3, r9, r3, r5
 8022092:	e6a1      	b.n	8021dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022094:	4681      	mov	r9, r0
 8022096:	e6c8      	b.n	8021e2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022098:	f1c1 0210 	rsb	r2, r1, #16
 802209c:	4341      	muls	r1, r0
 802209e:	fb09 1902 	mla	r9, r9, r2, r1
 80220a2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80220a6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80220aa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80220ae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220b2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80220b6:	ea42 0909 	orr.w	r9, r2, r9
 80220ba:	fa1f f289 	uxth.w	r2, r9
 80220be:	e75b      	b.n	8021f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80220c0:	43db      	mvns	r3, r3
 80220c2:	f8b7 c000 	ldrh.w	ip, [r7]
 80220c6:	fa5f fe83 	uxtb.w	lr, r3
 80220ca:	ea4f 202c 	mov.w	r0, ip, asr #8
 80220ce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80220d2:	fb00 f00e 	mul.w	r0, r0, lr
 80220d6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80220da:	1c41      	adds	r1, r0, #1
 80220dc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80220e0:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80220e4:	fb05 f50e 	mul.w	r5, r5, lr
 80220e8:	1211      	asrs	r1, r2, #8
 80220ea:	f021 0107 	bic.w	r1, r1, #7
 80220ee:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80220f2:	48d6      	ldr	r0, [pc, #856]	; (802244c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 80220f4:	b2c9      	uxtb	r1, r1
 80220f6:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80220fa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80220fe:	1c69      	adds	r1, r5, #1
 8022100:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022104:	b2db      	uxtb	r3, r3
 8022106:	10d1      	asrs	r1, r2, #3
 8022108:	fb03 f30e 	mul.w	r3, r3, lr
 802210c:	f021 0103 	bic.w	r1, r1, #3
 8022110:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022114:	00c9      	lsls	r1, r1, #3
 8022116:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802211a:	4301      	orrs	r1, r0
 802211c:	1c58      	adds	r0, r3, #1
 802211e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022122:	00d2      	lsls	r2, r2, #3
 8022124:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022128:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802212c:	430a      	orrs	r2, r1
 802212e:	e726      	b.n	8021f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8022130:	f115 0e01 	adds.w	lr, r5, #1
 8022134:	f53f af24 	bmi.w	8021f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022138:	4572      	cmp	r2, lr
 802213a:	f6ff af21 	blt.w	8021f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802213e:	f110 0e01 	adds.w	lr, r0, #1
 8022142:	f53f af1d 	bmi.w	8021f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022146:	4573      	cmp	r3, lr
 8022148:	f6ff af1a 	blt.w	8021f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802214c:	b21b      	sxth	r3, r3
 802214e:	b212      	sxth	r2, r2
 8022150:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022154:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8022158:	9301      	str	r3, [sp, #4]
 802215a:	9200      	str	r2, [sp, #0]
 802215c:	4639      	mov	r1, r7
 802215e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8022162:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022164:	f7ff fc24 	bl	80219b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022168:	e70a      	b.n	8021f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802216a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802216c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022170:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022172:	fa1f fc82 	uxth.w	ip, r2
 8022176:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802217a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802217c:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022180:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022184:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022186:	141f      	asrs	r7, r3, #16
 8022188:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802218a:	141b      	asrs	r3, r3, #16
 802218c:	fb01 3707 	mla	r7, r1, r7, r3
 8022190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022192:	eb03 0a07 	add.w	sl, r3, r7
 8022196:	f813 9007 	ldrb.w	r9, [r3, r7]
 802219a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802219e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80221a2:	b29b      	uxth	r3, r3
 80221a4:	2d00      	cmp	r5, #0
 80221a6:	f000 80fe 	beq.w	80223a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80221aa:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80221ae:	eb0a 0b01 	add.w	fp, sl, r1
 80221b2:	fa1f fa85 	uxth.w	sl, r5
 80221b6:	fb0a fc0c 	mul.w	ip, sl, ip
 80221ba:	eba0 000c 	sub.w	r0, r0, ip
 80221be:	b280      	uxth	r0, r0
 80221c0:	fb08 f000 	mul.w	r0, r8, r0
 80221c4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80221c8:	fa1f fa8a 	uxth.w	sl, sl
 80221cc:	eba3 030a 	sub.w	r3, r3, sl
 80221d0:	b29b      	uxth	r3, r3
 80221d2:	fb09 0303 	mla	r3, r9, r3, r0
 80221d6:	940c      	str	r4, [sp, #48]	; 0x30
 80221d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80221da:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80221de:	fb0a 3300 	mla	r3, sl, r0, r3
 80221e2:	fb0c 3304 	mla	r3, ip, r4, r3
 80221e6:	940d      	str	r4, [sp, #52]	; 0x34
 80221e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	f000 80cc 	beq.w	802238a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 80221f2:	9808      	ldr	r0, [sp, #32]
 80221f4:	9c08      	ldr	r4, [sp, #32]
 80221f6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80221fa:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80221fe:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022202:	f000 80d5 	beq.w	80223b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022206:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802220a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802220e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022212:	fb09 f707 	mul.w	r7, r9, r7
 8022216:	fb0a fc0c 	mul.w	ip, sl, ip
 802221a:	f107 0b20 	add.w	fp, r7, #32
 802221e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022222:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022226:	44cc      	add	ip, r9
 8022228:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802222c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022230:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022234:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022238:	ea4c 0909 	orr.w	r9, ip, r9
 802223c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022240:	8847      	ldrh	r7, [r0, #2]
 8022242:	d019      	beq.n	8022278 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8022244:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022248:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802224c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022250:	fb08 f807 	mul.w	r8, r8, r7
 8022254:	fb0a fc0c 	mul.w	ip, sl, ip
 8022258:	f108 0b20 	add.w	fp, r8, #32
 802225c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022260:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022264:	44bc      	add	ip, r7
 8022266:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802226a:	0a3f      	lsrs	r7, r7, #8
 802226c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022270:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022274:	ea4c 0707 	orr.w	r7, ip, r7
 8022278:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802227c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022280:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022284:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022288:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802228c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022290:	ea4c 0909 	orr.w	r9, ip, r9
 8022294:	ea4a 0707 	orr.w	r7, sl, r7
 8022298:	2d00      	cmp	r5, #0
 802229a:	f000 808b 	beq.w	80223b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802229e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80222a2:	3901      	subs	r1, #1
 80222a4:	0049      	lsls	r1, r1, #1
 80222a6:	3102      	adds	r1, #2
 80222a8:	eb00 0c01 	add.w	ip, r0, r1
 80222ac:	5a41      	ldrh	r1, [r0, r1]
 80222ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80222b0:	28ff      	cmp	r0, #255	; 0xff
 80222b2:	d019      	beq.n	80222e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 80222b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80222b6:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80222ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80222be:	fb04 fa01 	mul.w	sl, r4, r1
 80222c2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80222c6:	fb08 f800 	mul.w	r8, r8, r0
 80222ca:	f10a 0020 	add.w	r0, sl, #32
 80222ce:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80222d2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80222d6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80222da:	4441      	add	r1, r8
 80222dc:	0a00      	lsrs	r0, r0, #8
 80222de:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80222e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80222e6:	4301      	orrs	r1, r0
 80222e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222ea:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80222ee:	2cff      	cmp	r4, #255	; 0xff
 80222f0:	d01a      	beq.n	8022328 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 80222f2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80222f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80222fa:	fb04 fa00 	mul.w	sl, r4, r0
 80222fe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022302:	fb08 f80c 	mul.w	r8, r8, ip
 8022306:	f10a 0c20 	add.w	ip, sl, #32
 802230a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802230e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022312:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022316:	4440      	add	r0, r8
 8022318:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802231c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022320:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022324:	ea40 000c 	orr.w	r0, r0, ip
 8022328:	fb15 fc02 	smulbb	ip, r5, r2
 802232c:	f1c5 0810 	rsb	r8, r5, #16
 8022330:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022334:	eba8 0802 	sub.w	r8, r8, r2
 8022338:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802233c:	437a      	muls	r2, r7
 802233e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022342:	fb09 2208 	mla	r2, r9, r8, r2
 8022346:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802234a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802234e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022352:	ea4a 0101 	orr.w	r1, sl, r1
 8022356:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802235a:	fb05 2201 	mla	r2, r5, r1, r2
 802235e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022362:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022366:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802236a:	ea4b 0000 	orr.w	r0, fp, r0
 802236e:	fb0c 2200 	mla	r2, ip, r0, r2
 8022372:	0d57      	lsrs	r7, r2, #21
 8022374:	0952      	lsrs	r2, r2, #5
 8022376:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802237a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802237e:	433a      	orrs	r2, r7
 8022380:	2bff      	cmp	r3, #255	; 0xff
 8022382:	b292      	uxth	r2, r2
 8022384:	d127      	bne.n	80223d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8022386:	f8ae 2000 	strh.w	r2, [lr]
 802238a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802238c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802238e:	f10e 0e02 	add.w	lr, lr, #2
 8022392:	4413      	add	r3, r2
 8022394:	931d      	str	r3, [sp, #116]	; 0x74
 8022396:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022398:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802239a:	441a      	add	r2, r3
 802239c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802239e:	921e      	str	r2, [sp, #120]	; 0x78
 80223a0:	3b01      	subs	r3, #1
 80223a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80223a4:	e627      	b.n	8021ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80223a6:	fb08 f000 	mul.w	r0, r8, r0
 80223aa:	fb09 0303 	mla	r3, r9, r3, r0
 80223ae:	e71b      	b.n	80221e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 80223b0:	46b9      	mov	r9, r7
 80223b2:	e743      	b.n	802223c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 80223b4:	f1c2 0110 	rsb	r1, r2, #16
 80223b8:	437a      	muls	r2, r7
 80223ba:	fb09 2901 	mla	r9, r9, r1, r2
 80223be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80223c2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80223c6:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80223ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80223ce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80223d2:	4302      	orrs	r2, r0
 80223d4:	e7d4      	b.n	8022380 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80223d6:	43db      	mvns	r3, r3
 80223d8:	f8be 7000 	ldrh.w	r7, [lr]
 80223dc:	fa5f fc83 	uxtb.w	ip, r3
 80223e0:	1238      	asrs	r0, r7, #8
 80223e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80223e6:	fb00 f00c 	mul.w	r0, r0, ip
 80223ea:	10fd      	asrs	r5, r7, #3
 80223ec:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80223f0:	fb05 f10c 	mul.w	r1, r5, ip
 80223f4:	1c45      	adds	r5, r0, #1
 80223f6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80223fa:	1215      	asrs	r5, r2, #8
 80223fc:	f025 0507 	bic.w	r5, r5, #7
 8022400:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022404:	00fb      	lsls	r3, r7, #3
 8022406:	1c4d      	adds	r5, r1, #1
 8022408:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802240c:	b2db      	uxtb	r3, r3
 802240e:	10d1      	asrs	r1, r2, #3
 8022410:	fb03 f30c 	mul.w	r3, r3, ip
 8022414:	f021 0103 	bic.w	r1, r1, #3
 8022418:	4c0c      	ldr	r4, [pc, #48]	; (802244c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802241a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802241e:	b2c0      	uxtb	r0, r0
 8022420:	00c9      	lsls	r1, r1, #3
 8022422:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022426:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802242a:	4308      	orrs	r0, r1
 802242c:	1c59      	adds	r1, r3, #1
 802242e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022432:	00d2      	lsls	r2, r2, #3
 8022434:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022438:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802243c:	4318      	orrs	r0, r3
 802243e:	f8ae 0000 	strh.w	r0, [lr]
 8022442:	e7a2      	b.n	802238a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022444:	b013      	add	sp, #76	; 0x4c
 8022446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802244a:	bf00      	nop
 802244c:	fffff800 	.word	0xfffff800

08022450 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022454:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8022458:	fb05 4c03 	mla	ip, r5, r3, r4
 802245c:	2d00      	cmp	r5, #0
 802245e:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8022462:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8022466:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802246a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 802246e:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022472:	8808      	ldrh	r0, [r1, #0]
 8022474:	f2c0 80a7 	blt.w	80225c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022478:	45aa      	cmp	sl, r5
 802247a:	f340 80a4 	ble.w	80225c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802247e:	2c00      	cmp	r4, #0
 8022480:	f2c0 809f 	blt.w	80225c2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022484:	42a3      	cmp	r3, r4
 8022486:	f340 809c 	ble.w	80225c2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802248a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802248e:	1c62      	adds	r2, r4, #1
 8022490:	f100 809c 	bmi.w	80225cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022494:	4293      	cmp	r3, r2
 8022496:	f340 8099 	ble.w	80225cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802249a:	f1b9 0f00 	cmp.w	r9, #0
 802249e:	f000 8095 	beq.w	80225cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80224a2:	f8be c002 	ldrh.w	ip, [lr, #2]
 80224a6:	3501      	adds	r5, #1
 80224a8:	f100 8094 	bmi.w	80225d4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80224ac:	45aa      	cmp	sl, r5
 80224ae:	f340 8091 	ble.w	80225d4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80224b2:	2f00      	cmp	r7, #0
 80224b4:	f000 808e 	beq.w	80225d4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80224b8:	2c00      	cmp	r4, #0
 80224ba:	f2c0 8089 	blt.w	80225d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80224be:	42a3      	cmp	r3, r4
 80224c0:	f340 8086 	ble.w	80225d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80224c4:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80224c8:	3401      	adds	r4, #1
 80224ca:	f100 8086 	bmi.w	80225da <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80224ce:	42a3      	cmp	r3, r4
 80224d0:	f340 8083 	ble.w	80225da <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80224d4:	f1b9 0f00 	cmp.w	r9, #0
 80224d8:	d07f      	beq.n	80225da <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80224da:	3301      	adds	r3, #1
 80224dc:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 80224e0:	fb19 fe07 	smulbb	lr, r9, r7
 80224e4:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80224e8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80224ec:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80224f0:	ea44 0808 	orr.w	r8, r4, r8
 80224f4:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80224f8:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80224fc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022500:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022504:	ea44 0c0c 	orr.w	ip, r4, ip
 8022508:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 802250c:	fb04 f40c 	mul.w	r4, r4, ip
 8022510:	f1c7 0210 	rsb	r2, r7, #16
 8022514:	eba2 0209 	sub.w	r2, r2, r9
 8022518:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802251c:	fb02 4808 	mla	r8, r2, r8, r4
 8022520:	b2b4      	uxth	r4, r6
 8022522:	43f6      	mvns	r6, r6
 8022524:	041a      	lsls	r2, r3, #16
 8022526:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802252a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802252e:	4313      	orrs	r3, r2
 8022530:	fb0e 8303 	mla	r3, lr, r3, r8
 8022534:	042a      	lsls	r2, r5, #16
 8022536:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802253a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802253e:	432a      	orrs	r2, r5
 8022540:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022544:	fb07 3202 	mla	r2, r7, r2, r3
 8022548:	0d53      	lsrs	r3, r2, #21
 802254a:	0952      	lsrs	r2, r2, #5
 802254c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022550:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022554:	431a      	orrs	r2, r3
 8022556:	b293      	uxth	r3, r2
 8022558:	1202      	asrs	r2, r0, #8
 802255a:	b2f6      	uxtb	r6, r6
 802255c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022560:	fb12 f206 	smulbb	r2, r2, r6
 8022564:	10c7      	asrs	r7, r0, #3
 8022566:	00c0      	lsls	r0, r0, #3
 8022568:	b2c0      	uxtb	r0, r0
 802256a:	121d      	asrs	r5, r3, #8
 802256c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022570:	fb10 f006 	smulbb	r0, r0, r6
 8022574:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022578:	fb17 f706 	smulbb	r7, r7, r6
 802257c:	fb05 2504 	mla	r5, r5, r4, r2
 8022580:	10da      	asrs	r2, r3, #3
 8022582:	00db      	lsls	r3, r3, #3
 8022584:	b2db      	uxtb	r3, r3
 8022586:	fb03 0004 	mla	r0, r3, r4, r0
 802258a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802258e:	fb02 7204 	mla	r2, r2, r4, r7
 8022592:	b2ad      	uxth	r5, r5
 8022594:	b280      	uxth	r0, r0
 8022596:	1c6b      	adds	r3, r5, #1
 8022598:	b292      	uxth	r2, r2
 802259a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802259e:	1c43      	adds	r3, r0, #1
 80225a0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80225a4:	1c50      	adds	r0, r2, #1
 80225a6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80225aa:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80225ae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80225b2:	0952      	lsrs	r2, r2, #5
 80225b4:	432b      	orrs	r3, r5
 80225b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80225ba:	4313      	orrs	r3, r2
 80225bc:	800b      	strh	r3, [r1, #0]
 80225be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80225c2:	4680      	mov	r8, r0
 80225c4:	e763      	b.n	802248e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 80225c6:	4684      	mov	ip, r0
 80225c8:	4680      	mov	r8, r0
 80225ca:	e76c      	b.n	80224a6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80225cc:	4684      	mov	ip, r0
 80225ce:	e76a      	b.n	80224a6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80225d0:	4605      	mov	r5, r0
 80225d2:	e779      	b.n	80224c8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80225d4:	4603      	mov	r3, r0
 80225d6:	4605      	mov	r5, r0
 80225d8:	e782      	b.n	80224e0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80225da:	4603      	mov	r3, r0
 80225dc:	e780      	b.n	80224e0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

080225de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80225de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225e2:	b093      	sub	sp, #76	; 0x4c
 80225e4:	461d      	mov	r5, r3
 80225e6:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80225ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80225ec:	910a      	str	r1, [sp, #40]	; 0x28
 80225ee:	9210      	str	r2, [sp, #64]	; 0x40
 80225f0:	6859      	ldr	r1, [r3, #4]
 80225f2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80225f6:	681b      	ldr	r3, [r3, #0]
 80225f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80225fa:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80225fe:	fb01 2707 	mla	r7, r1, r7, r2
 8022602:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8022606:	9307      	str	r3, [sp, #28]
 8022608:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802260a:	9011      	str	r0, [sp, #68]	; 0x44
 802260c:	681b      	ldr	r3, [r3, #0]
 802260e:	9309      	str	r3, [sp, #36]	; 0x24
 8022610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022612:	43db      	mvns	r3, r3
 8022614:	b2db      	uxtb	r3, r3
 8022616:	9308      	str	r3, [sp, #32]
 8022618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802261a:	2b00      	cmp	r3, #0
 802261c:	dc03      	bgt.n	8022626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802261e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022620:	2b00      	cmp	r3, #0
 8022622:	f340 8203 	ble.w	8022a2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022626:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022628:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802262c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022630:	1e48      	subs	r0, r1, #1
 8022632:	f102 3cff 	add.w	ip, r2, #4294967295
 8022636:	2d00      	cmp	r5, #0
 8022638:	f340 80da 	ble.w	80227f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802263c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022640:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022644:	d406      	bmi.n	8022654 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022646:	4586      	cmp	lr, r0
 8022648:	da04      	bge.n	8022654 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802264a:	2b00      	cmp	r3, #0
 802264c:	db02      	blt.n	8022654 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802264e:	4563      	cmp	r3, ip
 8022650:	f2c0 80cf 	blt.w	80227f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022654:	f11e 0e01 	adds.w	lr, lr, #1
 8022658:	f100 80c1 	bmi.w	80227de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802265c:	4571      	cmp	r1, lr
 802265e:	f2c0 80be 	blt.w	80227de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022662:	3301      	adds	r3, #1
 8022664:	f100 80bb 	bmi.w	80227de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022668:	429a      	cmp	r2, r3
 802266a:	f2c0 80b8 	blt.w	80227de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802266e:	46a9      	mov	r9, r5
 8022670:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022674:	f1b9 0f00 	cmp.w	r9, #0
 8022678:	f340 80d8 	ble.w	802282c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802267c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802267e:	1421      	asrs	r1, r4, #16
 8022680:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022684:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022688:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802268c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022690:	f100 8111 	bmi.w	80228b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022694:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022698:	4551      	cmp	r1, sl
 802269a:	f280 810c 	bge.w	80228b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802269e:	2800      	cmp	r0, #0
 80226a0:	f2c0 8109 	blt.w	80228b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80226a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80226a8:	4550      	cmp	r0, sl
 80226aa:	f280 8104 	bge.w	80228b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80226ae:	fa0f f38e 	sxth.w	r3, lr
 80226b2:	fb00 1103 	mla	r1, r0, r3, r1
 80226b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80226b8:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80226bc:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80226c0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80226c4:	f1bc 0f00 	cmp.w	ip, #0
 80226c8:	d007      	beq.n	80226da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80226ca:	005b      	lsls	r3, r3, #1
 80226cc:	eb0a 0003 	add.w	r0, sl, r3
 80226d0:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80226d4:	930c      	str	r3, [sp, #48]	; 0x30
 80226d6:	8843      	ldrh	r3, [r0, #2]
 80226d8:	930d      	str	r3, [sp, #52]	; 0x34
 80226da:	fb12 f30c 	smulbb	r3, r2, ip
 80226de:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80226e2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80226e6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80226ea:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80226ee:	10db      	asrs	r3, r3, #3
 80226f0:	ea40 000e 	orr.w	r0, r0, lr
 80226f4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80226f8:	f1cc 0e10 	rsb	lr, ip, #16
 80226fc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022700:	ebae 0e02 	sub.w	lr, lr, r2
 8022704:	ea4a 0101 	orr.w	r1, sl, r1
 8022708:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802270c:	4351      	muls	r1, r2
 802270e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022714:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022718:	0410      	lsls	r0, r2, #16
 802271a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802271e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022722:	4310      	orrs	r0, r2
 8022724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022726:	fb03 e000 	mla	r0, r3, r0, lr
 802272a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802272c:	0412      	lsls	r2, r2, #16
 802272e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022732:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022736:	ea42 020e 	orr.w	r2, r2, lr
 802273a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802273e:	fb03 0302 	mla	r3, r3, r2, r0
 8022742:	f8b8 0000 	ldrh.w	r0, [r8]
 8022746:	9f08      	ldr	r7, [sp, #32]
 8022748:	0d5a      	lsrs	r2, r3, #21
 802274a:	1201      	asrs	r1, r0, #8
 802274c:	095b      	lsrs	r3, r3, #5
 802274e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022752:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022756:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802275a:	4313      	orrs	r3, r2
 802275c:	fb11 f107 	smulbb	r1, r1, r7
 8022760:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022764:	00c0      	lsls	r0, r0, #3
 8022766:	b29b      	uxth	r3, r3
 8022768:	b2c0      	uxtb	r0, r0
 802276a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802276e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022772:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022776:	fb10 f007 	smulbb	r0, r0, r7
 802277a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802277e:	fb1e fe07 	smulbb	lr, lr, r7
 8022782:	fb0c 1c02 	mla	ip, ip, r2, r1
 8022786:	10d9      	asrs	r1, r3, #3
 8022788:	00db      	lsls	r3, r3, #3
 802278a:	b2db      	uxtb	r3, r3
 802278c:	fb03 0302 	mla	r3, r3, r2, r0
 8022790:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022794:	fb01 e102 	mla	r1, r1, r2, lr
 8022798:	fa1f fc8c 	uxth.w	ip, ip
 802279c:	b29a      	uxth	r2, r3
 802279e:	f10c 0301 	add.w	r3, ip, #1
 80227a2:	b289      	uxth	r1, r1
 80227a4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80227a8:	1c53      	adds	r3, r2, #1
 80227aa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80227ae:	1c4a      	adds	r2, r1, #1
 80227b0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80227b4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80227b8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80227bc:	0949      	lsrs	r1, r1, #5
 80227be:	ea43 030c 	orr.w	r3, r3, ip
 80227c2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80227c6:	430b      	orrs	r3, r1
 80227c8:	f8a8 3000 	strh.w	r3, [r8]
 80227cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80227ce:	f108 0802 	add.w	r8, r8, #2
 80227d2:	441c      	add	r4, r3
 80227d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80227d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80227da:	441e      	add	r6, r3
 80227dc:	e74a      	b.n	8022674 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80227e0:	3d01      	subs	r5, #1
 80227e2:	441c      	add	r4, r3
 80227e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80227e6:	441e      	add	r6, r3
 80227e8:	9b07      	ldr	r3, [sp, #28]
 80227ea:	3302      	adds	r3, #2
 80227ec:	9307      	str	r3, [sp, #28]
 80227ee:	e722      	b.n	8022636 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80227f0:	d022      	beq.n	8022838 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80227f2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80227f4:	1e6b      	subs	r3, r5, #1
 80227f6:	fb00 4003 	mla	r0, r0, r3, r4
 80227fa:	1400      	asrs	r0, r0, #16
 80227fc:	f53f af37 	bmi.w	802266e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022800:	3901      	subs	r1, #1
 8022802:	4288      	cmp	r0, r1
 8022804:	f6bf af33 	bge.w	802266e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022808:	9920      	ldr	r1, [sp, #128]	; 0x80
 802280a:	fb01 6303 	mla	r3, r1, r3, r6
 802280e:	141b      	asrs	r3, r3, #16
 8022810:	f53f af2d 	bmi.w	802266e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022814:	3a01      	subs	r2, #1
 8022816:	4293      	cmp	r3, r2
 8022818:	f6bf af29 	bge.w	802266e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802281c:	46a8      	mov	r8, r5
 802281e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8022822:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8022826:	f1b8 0f00 	cmp.w	r8, #0
 802282a:	dc5e      	bgt.n	80228ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802282c:	9b07      	ldr	r3, [sp, #28]
 802282e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022832:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022836:	9307      	str	r3, [sp, #28]
 8022838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802283a:	2b00      	cmp	r3, #0
 802283c:	f340 80f6 	ble.w	8022a2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022844:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022848:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802284c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022850:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022854:	eef0 6a62 	vmov.f32	s13, s5
 8022858:	ee31 1a05 	vadd.f32	s2, s2, s10
 802285c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022860:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022864:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022868:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802286c:	ee16 4a90 	vmov	r4, s13
 8022870:	eef0 6a43 	vmov.f32	s13, s6
 8022874:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022878:	ee12 2a90 	vmov	r2, s5
 802287c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022880:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022886:	fb92 f3f3 	sdiv	r3, r2, r3
 802288a:	ee13 2a10 	vmov	r2, s6
 802288e:	931f      	str	r3, [sp, #124]	; 0x7c
 8022890:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022892:	ee16 6a90 	vmov	r6, s13
 8022896:	fb92 f3f3 	sdiv	r3, r2, r3
 802289a:	9320      	str	r3, [sp, #128]	; 0x80
 802289c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802289e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80228a0:	3b01      	subs	r3, #1
 80228a2:	930a      	str	r3, [sp, #40]	; 0x28
 80228a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80228a6:	bf0c      	ite	eq
 80228a8:	4615      	moveq	r5, r2
 80228aa:	461d      	movne	r5, r3
 80228ac:	eeb0 3a67 	vmov.f32	s6, s15
 80228b0:	eef0 2a47 	vmov.f32	s5, s14
 80228b4:	e6b0      	b.n	8022618 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80228b6:	f111 0a01 	adds.w	sl, r1, #1
 80228ba:	d487      	bmi.n	80227cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80228bc:	45d6      	cmp	lr, sl
 80228be:	db85      	blt.n	80227cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80228c0:	f110 0a01 	adds.w	sl, r0, #1
 80228c4:	d482      	bmi.n	80227cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80228c6:	4553      	cmp	r3, sl
 80228c8:	db80      	blt.n	80227cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80228ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80228cc:	b21b      	sxth	r3, r3
 80228ce:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80228d2:	9101      	str	r1, [sp, #4]
 80228d4:	9300      	str	r3, [sp, #0]
 80228d6:	e9cd c704 	strd	ip, r7, [sp, #16]
 80228da:	fa0f f38e 	sxth.w	r3, lr
 80228de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228e0:	4641      	mov	r1, r8
 80228e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80228e4:	f7ff fdb4 	bl	8022450 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80228e8:	e770      	b.n	80227cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80228ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228ec:	1430      	asrs	r0, r6, #16
 80228ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80228f2:	1423      	asrs	r3, r4, #16
 80228f4:	fb01 3000 	mla	r0, r1, r0, r3
 80228f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80228fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8022900:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022904:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8022908:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802290c:	8858      	ldrh	r0, [r3, #2]
 802290e:	f1be 0f00 	cmp.w	lr, #0
 8022912:	d00b      	beq.n	802292c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022914:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022918:	3901      	subs	r1, #1
 802291a:	0049      	lsls	r1, r1, #1
 802291c:	3102      	adds	r1, #2
 802291e:	eb03 0b01 	add.w	fp, r3, r1
 8022922:	5a5b      	ldrh	r3, [r3, r1]
 8022924:	930e      	str	r3, [sp, #56]	; 0x38
 8022926:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802292a:	930f      	str	r3, [sp, #60]	; 0x3c
 802292c:	fb12 f30e 	smulbb	r3, r2, lr
 8022930:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8022934:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022938:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802293c:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8022940:	10db      	asrs	r3, r3, #3
 8022942:	ea41 010c 	orr.w	r1, r1, ip
 8022946:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802294a:	f1ce 0c10 	rsb	ip, lr, #16
 802294e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022952:	ebac 0c02 	sub.w	ip, ip, r2
 8022956:	ea4b 0000 	orr.w	r0, fp, r0
 802295a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802295e:	4350      	muls	r0, r2
 8022960:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022964:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022966:	fb0c 0c01 	mla	ip, ip, r1, r0
 802296a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802296e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022972:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8022976:	ea4b 0101 	orr.w	r1, fp, r1
 802297a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802297c:	fb03 c101 	mla	r1, r3, r1, ip
 8022980:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022982:	0412      	lsls	r2, r2, #16
 8022984:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022988:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802298c:	4302      	orrs	r2, r0
 802298e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022992:	fb03 1202 	mla	r2, r3, r2, r1
 8022996:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802299a:	0952      	lsrs	r2, r2, #5
 802299c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80229a0:	f8b9 2000 	ldrh.w	r2, [r9]
 80229a4:	9f08      	ldr	r7, [sp, #32]
 80229a6:	1211      	asrs	r1, r2, #8
 80229a8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80229ac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80229b0:	fb11 f107 	smulbb	r1, r1, r7
 80229b4:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80229b8:	ea4b 0303 	orr.w	r3, fp, r3
 80229bc:	00d2      	lsls	r2, r2, #3
 80229be:	b29b      	uxth	r3, r3
 80229c0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80229c4:	b2d2      	uxtb	r2, r2
 80229c6:	1218      	asrs	r0, r3, #8
 80229c8:	fb1c fc07 	smulbb	ip, ip, r7
 80229cc:	fb12 f207 	smulbb	r2, r2, r7
 80229d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80229d4:	fb00 100a 	mla	r0, r0, sl, r1
 80229d8:	10d9      	asrs	r1, r3, #3
 80229da:	00db      	lsls	r3, r3, #3
 80229dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80229e0:	b2db      	uxtb	r3, r3
 80229e2:	fb01 c10a 	mla	r1, r1, sl, ip
 80229e6:	fb03 230a 	mla	r3, r3, sl, r2
 80229ea:	b280      	uxth	r0, r0
 80229ec:	b29b      	uxth	r3, r3
 80229ee:	b289      	uxth	r1, r1
 80229f0:	1c42      	adds	r2, r0, #1
 80229f2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80229f6:	f101 0c01 	add.w	ip, r1, #1
 80229fa:	1c5a      	adds	r2, r3, #1
 80229fc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022a00:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022a04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022a06:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022a0a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022a0e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022a12:	4310      	orrs	r0, r2
 8022a14:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022a18:	441c      	add	r4, r3
 8022a1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a1c:	ea40 000c 	orr.w	r0, r0, ip
 8022a20:	f829 0b02 	strh.w	r0, [r9], #2
 8022a24:	441e      	add	r6, r3
 8022a26:	f108 38ff 	add.w	r8, r8, #4294967295
 8022a2a:	e6fc      	b.n	8022826 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022a2c:	b013      	add	sp, #76	; 0x4c
 8022a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a32 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8022a32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022a36:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8022a3a:	fb0e 4703 	mla	r7, lr, r3, r4
 8022a3e:	f1be 0f00 	cmp.w	lr, #0
 8022a42:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8022a46:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8022a4a:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8022a4e:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8022a52:	8808      	ldrh	r0, [r1, #0]
 8022a54:	db60      	blt.n	8022b18 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022a56:	45f1      	cmp	r9, lr
 8022a58:	dd5e      	ble.n	8022b18 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022a5a:	2c00      	cmp	r4, #0
 8022a5c:	db5a      	blt.n	8022b14 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022a5e:	42a3      	cmp	r3, r4
 8022a60:	dd58      	ble.n	8022b14 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022a62:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8022a66:	1c62      	adds	r2, r4, #1
 8022a68:	d459      	bmi.n	8022b1e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022a6a:	4293      	cmp	r3, r2
 8022a6c:	dd57      	ble.n	8022b1e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022a6e:	2d00      	cmp	r5, #0
 8022a70:	d055      	beq.n	8022b1e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022a72:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8022a76:	f11e 0e01 	adds.w	lr, lr, #1
 8022a7a:	d454      	bmi.n	8022b26 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022a7c:	45f1      	cmp	r9, lr
 8022a7e:	dd52      	ble.n	8022b26 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022a80:	2e00      	cmp	r6, #0
 8022a82:	d050      	beq.n	8022b26 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022a84:	2c00      	cmp	r4, #0
 8022a86:	db4c      	blt.n	8022b22 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022a88:	42a3      	cmp	r3, r4
 8022a8a:	dd4a      	ble.n	8022b22 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022a8c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8022a90:	3401      	adds	r4, #1
 8022a92:	d405      	bmi.n	8022aa0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022a94:	42a3      	cmp	r3, r4
 8022a96:	dd03      	ble.n	8022aa0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022a98:	b115      	cbz	r5, 8022aa0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022a9a:	3301      	adds	r3, #1
 8022a9c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8022aa0:	fb15 f406 	smulbb	r4, r5, r6
 8022aa4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022aa8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022aac:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022ab0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022ab4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8022ab8:	ea43 0c0c 	orr.w	ip, r3, ip
 8022abc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022ac0:	f1c6 0310 	rsb	r3, r6, #16
 8022ac4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022ac8:	1b5b      	subs	r3, r3, r5
 8022aca:	ea4e 0707 	orr.w	r7, lr, r7
 8022ace:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8022ad2:	437d      	muls	r5, r7
 8022ad4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8022ad8:	fb03 5c0c 	mla	ip, r3, ip, r5
 8022adc:	0403      	lsls	r3, r0, #16
 8022ade:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022ae2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022ae6:	4318      	orrs	r0, r3
 8022ae8:	fb04 c000 	mla	r0, r4, r0, ip
 8022aec:	0413      	lsls	r3, r2, #16
 8022aee:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022af2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022af6:	4313      	orrs	r3, r2
 8022af8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8022afc:	fb06 0003 	mla	r0, r6, r3, r0
 8022b00:	0d43      	lsrs	r3, r0, #21
 8022b02:	0940      	lsrs	r0, r0, #5
 8022b04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022b08:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022b0c:	4318      	orrs	r0, r3
 8022b0e:	8008      	strh	r0, [r1, #0]
 8022b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022b14:	4684      	mov	ip, r0
 8022b16:	e7a6      	b.n	8022a66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8022b18:	4607      	mov	r7, r0
 8022b1a:	4684      	mov	ip, r0
 8022b1c:	e7ab      	b.n	8022a76 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022b1e:	4607      	mov	r7, r0
 8022b20:	e7a9      	b.n	8022a76 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022b22:	4602      	mov	r2, r0
 8022b24:	e7b4      	b.n	8022a90 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8022b26:	4602      	mov	r2, r0
 8022b28:	e7ba      	b.n	8022aa0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08022b2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b2e:	b08f      	sub	sp, #60	; 0x3c
 8022b30:	461d      	mov	r5, r3
 8022b32:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8022b36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022b38:	9107      	str	r1, [sp, #28]
 8022b3a:	6859      	ldr	r1, [r3, #4]
 8022b3c:	920c      	str	r2, [sp, #48]	; 0x30
 8022b3e:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8022b42:	fb01 2707 	mla	r7, r1, r7, r2
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	900d      	str	r0, [sp, #52]	; 0x34
 8022b4a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8022b4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b50:	f8d3 8000 	ldr.w	r8, [r3]
 8022b54:	9b07      	ldr	r3, [sp, #28]
 8022b56:	2b00      	cmp	r3, #0
 8022b58:	dc03      	bgt.n	8022b62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	f340 8181 	ble.w	8022e64 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022b62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022b6c:	1e48      	subs	r0, r1, #1
 8022b6e:	f102 3cff 	add.w	ip, r2, #4294967295
 8022b72:	2d00      	cmp	r5, #0
 8022b74:	f340 809b 	ble.w	8022cae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8022b78:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022b7c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022b80:	d406      	bmi.n	8022b90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022b82:	4586      	cmp	lr, r0
 8022b84:	da04      	bge.n	8022b90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022b86:	2b00      	cmp	r3, #0
 8022b88:	db02      	blt.n	8022b90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022b8a:	4563      	cmp	r3, ip
 8022b8c:	f2c0 8090 	blt.w	8022cb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022b90:	f11e 0e01 	adds.w	lr, lr, #1
 8022b94:	f100 8084 	bmi.w	8022ca0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022b98:	4571      	cmp	r1, lr
 8022b9a:	f2c0 8081 	blt.w	8022ca0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022b9e:	3301      	adds	r3, #1
 8022ba0:	d47e      	bmi.n	8022ca0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022ba2:	429a      	cmp	r2, r3
 8022ba4:	db7c      	blt.n	8022ca0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022ba6:	46aa      	mov	sl, r5
 8022ba8:	46b9      	mov	r9, r7
 8022baa:	f1ba 0f00 	cmp.w	sl, #0
 8022bae:	f340 8099 	ble.w	8022ce4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022bb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022bb4:	1421      	asrs	r1, r4, #16
 8022bb6:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022bba:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022bbe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022bc2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022bc6:	f100 80d0 	bmi.w	8022d6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022bca:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022bce:	4559      	cmp	r1, fp
 8022bd0:	f280 80cb 	bge.w	8022d6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022bd4:	2800      	cmp	r0, #0
 8022bd6:	f2c0 80c8 	blt.w	8022d6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022bda:	f103 3bff 	add.w	fp, r3, #4294967295
 8022bde:	4558      	cmp	r0, fp
 8022be0:	f280 80c3 	bge.w	8022d6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022be4:	fa0f fe8e 	sxth.w	lr, lr
 8022be8:	fb00 110e 	mla	r1, r0, lr, r1
 8022bec:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022bf0:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8022bf4:	8841      	ldrh	r1, [r0, #2]
 8022bf6:	f1bc 0f00 	cmp.w	ip, #0
 8022bfa:	d00b      	beq.n	8022c14 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8022bfc:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8022c00:	3b01      	subs	r3, #1
 8022c02:	005b      	lsls	r3, r3, #1
 8022c04:	3302      	adds	r3, #2
 8022c06:	eb00 0e03 	add.w	lr, r0, r3
 8022c0a:	5ac3      	ldrh	r3, [r0, r3]
 8022c0c:	9308      	str	r3, [sp, #32]
 8022c0e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8022c12:	9309      	str	r3, [sp, #36]	; 0x24
 8022c14:	fb12 f30c 	smulbb	r3, r2, ip
 8022c18:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8022c1c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022c20:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022c24:	ea40 000b 	orr.w	r0, r0, fp
 8022c28:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022c2c:	10db      	asrs	r3, r3, #3
 8022c2e:	f1cc 0e10 	rsb	lr, ip, #16
 8022c32:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022c36:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022c3a:	ebae 0e02 	sub.w	lr, lr, r2
 8022c3e:	ea4b 0101 	orr.w	r1, fp, r1
 8022c42:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022c46:	4351      	muls	r1, r2
 8022c48:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c4e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022c52:	0410      	lsls	r0, r2, #16
 8022c54:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022c58:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022c5c:	4310      	orrs	r0, r2
 8022c5e:	9a08      	ldr	r2, [sp, #32]
 8022c60:	fb03 e000 	mla	r0, r3, r0, lr
 8022c64:	9908      	ldr	r1, [sp, #32]
 8022c66:	0412      	lsls	r2, r2, #16
 8022c68:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022c6c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022c70:	ea42 020e 	orr.w	r2, r2, lr
 8022c74:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022c78:	fb03 0302 	mla	r3, r3, r2, r0
 8022c7c:	0d5a      	lsrs	r2, r3, #21
 8022c7e:	095b      	lsrs	r3, r3, #5
 8022c80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c84:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022c88:	4313      	orrs	r3, r2
 8022c8a:	f8a9 3000 	strh.w	r3, [r9]
 8022c8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022c90:	f109 0902 	add.w	r9, r9, #2
 8022c94:	441c      	add	r4, r3
 8022c96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022c98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022c9c:	441e      	add	r6, r3
 8022c9e:	e784      	b.n	8022baa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022ca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022ca2:	3d01      	subs	r5, #1
 8022ca4:	441c      	add	r4, r3
 8022ca6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022ca8:	3702      	adds	r7, #2
 8022caa:	441e      	add	r6, r3
 8022cac:	e761      	b.n	8022b72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022cae:	d01d      	beq.n	8022cec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022cb0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022cb2:	1e6b      	subs	r3, r5, #1
 8022cb4:	fb00 4003 	mla	r0, r0, r3, r4
 8022cb8:	1400      	asrs	r0, r0, #16
 8022cba:	f53f af74 	bmi.w	8022ba6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022cbe:	3901      	subs	r1, #1
 8022cc0:	4288      	cmp	r0, r1
 8022cc2:	f6bf af70 	bge.w	8022ba6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022cc6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022cc8:	fb01 6303 	mla	r3, r1, r3, r6
 8022ccc:	141b      	asrs	r3, r3, #16
 8022cce:	f53f af6a 	bmi.w	8022ba6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022cd2:	3a01      	subs	r2, #1
 8022cd4:	4293      	cmp	r3, r2
 8022cd6:	f6bf af66 	bge.w	8022ba6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022cda:	46a9      	mov	r9, r5
 8022cdc:	46ba      	mov	sl, r7
 8022cde:	f1b9 0f00 	cmp.w	r9, #0
 8022ce2:	dc5a      	bgt.n	8022d9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8022ce4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022ce8:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8022cec:	9b07      	ldr	r3, [sp, #28]
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	f340 80b8 	ble.w	8022e64 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022cf8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022cfc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022d04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d08:	eef0 6a62 	vmov.f32	s13, s5
 8022d0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d10:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d14:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d20:	ee16 4a90 	vmov	r4, s13
 8022d24:	eef0 6a43 	vmov.f32	s13, s6
 8022d28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d2c:	ee12 2a90 	vmov	r2, s5
 8022d30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d3e:	ee13 2a10 	vmov	r2, s6
 8022d42:	931b      	str	r3, [sp, #108]	; 0x6c
 8022d44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d46:	ee16 6a90 	vmov	r6, s13
 8022d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d4e:	931c      	str	r3, [sp, #112]	; 0x70
 8022d50:	9b07      	ldr	r3, [sp, #28]
 8022d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d54:	3b01      	subs	r3, #1
 8022d56:	9307      	str	r3, [sp, #28]
 8022d58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d5a:	bf0c      	ite	eq
 8022d5c:	4615      	moveq	r5, r2
 8022d5e:	461d      	movne	r5, r3
 8022d60:	eeb0 3a67 	vmov.f32	s6, s15
 8022d64:	eef0 2a47 	vmov.f32	s5, s14
 8022d68:	e6f4      	b.n	8022b54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022d6a:	f111 0b01 	adds.w	fp, r1, #1
 8022d6e:	d48e      	bmi.n	8022c8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022d70:	45de      	cmp	lr, fp
 8022d72:	db8c      	blt.n	8022c8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022d74:	f110 0b01 	adds.w	fp, r0, #1
 8022d78:	d489      	bmi.n	8022c8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022d7a:	455b      	cmp	r3, fp
 8022d7c:	db87      	blt.n	8022c8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022d7e:	b21b      	sxth	r3, r3
 8022d80:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8022d84:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8022d88:	9300      	str	r3, [sp, #0]
 8022d8a:	4642      	mov	r2, r8
 8022d8c:	fa0f f38e 	sxth.w	r3, lr
 8022d90:	4649      	mov	r1, r9
 8022d92:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022d94:	f7ff fe4d 	bl	8022a32 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8022d98:	e779      	b.n	8022c8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022d9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d9c:	1420      	asrs	r0, r4, #16
 8022d9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022da2:	1431      	asrs	r1, r6, #16
 8022da4:	fb03 0101 	mla	r1, r3, r1, r0
 8022da8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022dac:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022db0:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8022db4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022db8:	8841      	ldrh	r1, [r0, #2]
 8022dba:	f1be 0f00 	cmp.w	lr, #0
 8022dbe:	d00b      	beq.n	8022dd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8022dc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022dc4:	3b01      	subs	r3, #1
 8022dc6:	005b      	lsls	r3, r3, #1
 8022dc8:	3302      	adds	r3, #2
 8022dca:	eb00 0b03 	add.w	fp, r0, r3
 8022dce:	5ac3      	ldrh	r3, [r0, r3]
 8022dd0:	930a      	str	r3, [sp, #40]	; 0x28
 8022dd2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022dd8:	fb12 f30e 	smulbb	r3, r2, lr
 8022ddc:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8022de0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022de4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022de8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022dec:	10db      	asrs	r3, r3, #3
 8022dee:	ea40 000c 	orr.w	r0, r0, ip
 8022df2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022df6:	f1ce 0c10 	rsb	ip, lr, #16
 8022dfa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022dfe:	ebac 0c02 	sub.w	ip, ip, r2
 8022e02:	ea4b 0101 	orr.w	r1, fp, r1
 8022e06:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022e0a:	4351      	muls	r1, r2
 8022e0c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022e12:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022e16:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022e1a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022e1e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8022e22:	ea4b 0000 	orr.w	r0, fp, r0
 8022e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e28:	fb03 c000 	mla	r0, r3, r0, ip
 8022e2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022e2e:	0412      	lsls	r2, r2, #16
 8022e30:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022e34:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8022e38:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022e3c:	ea42 0b0b 	orr.w	fp, r2, fp
 8022e40:	fb03 000b 	mla	r0, r3, fp, r0
 8022e44:	0d43      	lsrs	r3, r0, #21
 8022e46:	0940      	lsrs	r0, r0, #5
 8022e48:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e4c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022e50:	4318      	orrs	r0, r3
 8022e52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022e54:	f82a 0b02 	strh.w	r0, [sl], #2
 8022e58:	441c      	add	r4, r3
 8022e5a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e5c:	f109 39ff 	add.w	r9, r9, #4294967295
 8022e60:	441e      	add	r6, r3
 8022e62:	e73c      	b.n	8022cde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022e64:	b00f      	add	sp, #60	; 0x3c
 8022e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8022e6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e6e:	b085      	sub	sp, #20
 8022e70:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8022e74:	9102      	str	r1, [sp, #8]
 8022e76:	fb04 7103 	mla	r1, r4, r3, r7
 8022e7a:	2c00      	cmp	r4, #0
 8022e7c:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8022e80:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8022e84:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022e88:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8022e8c:	f2c0 811b 	blt.w	80230c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022e90:	45a6      	cmp	lr, r4
 8022e92:	f340 8118 	ble.w	80230c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022e96:	2f00      	cmp	r7, #0
 8022e98:	f2c0 8113 	blt.w	80230c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022e9c:	42bb      	cmp	r3, r7
 8022e9e:	f340 8110 	ble.w	80230c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022ea2:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8022ea6:	1c7a      	adds	r2, r7, #1
 8022ea8:	f100 8110 	bmi.w	80230cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022eac:	4293      	cmp	r3, r2
 8022eae:	f340 810d 	ble.w	80230cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022eb2:	2e00      	cmp	r6, #0
 8022eb4:	f000 810c 	beq.w	80230d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8022eb8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022ebc:	3401      	adds	r4, #1
 8022ebe:	f100 810b 	bmi.w	80230d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022ec2:	45a6      	cmp	lr, r4
 8022ec4:	f340 8108 	ble.w	80230d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022ec8:	2800      	cmp	r0, #0
 8022eca:	f000 8108 	beq.w	80230de <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8022ece:	2f00      	cmp	r7, #0
 8022ed0:	f2c0 8100 	blt.w	80230d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8022ed4:	42bb      	cmp	r3, r7
 8022ed6:	f340 80fd 	ble.w	80230d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8022eda:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022ede:	3701      	adds	r7, #1
 8022ee0:	f100 8100 	bmi.w	80230e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8022ee4:	42bb      	cmp	r3, r7
 8022ee6:	f340 80fd 	ble.w	80230e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8022eea:	2e00      	cmp	r6, #0
 8022eec:	f000 80fc 	beq.w	80230e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8022ef0:	3301      	adds	r3, #1
 8022ef2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022ef6:	b2b6      	uxth	r6, r6
 8022ef8:	b280      	uxth	r0, r0
 8022efa:	fb00 fe06 	mul.w	lr, r0, r6
 8022efe:	0136      	lsls	r6, r6, #4
 8022f00:	eba6 070e 	sub.w	r7, r6, lr
 8022f04:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022f08:	b2bf      	uxth	r7, r7
 8022f0a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8022f0e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8022f12:	fb0a f607 	mul.w	r6, sl, r7
 8022f16:	b280      	uxth	r0, r0
 8022f18:	1a1b      	subs	r3, r3, r0
 8022f1a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022f1e:	b29b      	uxth	r3, r3
 8022f20:	fb0b 6603 	mla	r6, fp, r3, r6
 8022f24:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022f28:	fb00 6609 	mla	r6, r0, r9, r6
 8022f2c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022f30:	fb0e 6608 	mla	r6, lr, r8, r6
 8022f34:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022f38:	9600      	str	r6, [sp, #0]
 8022f3a:	2e00      	cmp	r6, #0
 8022f3c:	f000 80be 	beq.w	80230bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8022f40:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022f44:	fb0b fc0c 	mul.w	ip, fp, ip
 8022f48:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022f4c:	fb0b f505 	mul.w	r5, fp, r5
 8022f50:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022f54:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022f58:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022f5c:	44dc      	add	ip, fp
 8022f5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f62:	9501      	str	r5, [sp, #4]
 8022f64:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022f68:	9503      	str	r5, [sp, #12]
 8022f6a:	9d01      	ldr	r5, [sp, #4]
 8022f6c:	9e02      	ldr	r6, [sp, #8]
 8022f6e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022f72:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022f76:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8022f7a:	fb0a fc0c 	mul.w	ip, sl, ip
 8022f7e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8022f82:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8022f86:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022f8a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022f8e:	4465      	add	r5, ip
 8022f90:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022f94:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022f98:	fb09 fc0c 	mul.w	ip, r9, ip
 8022f9c:	fb09 f904 	mul.w	r9, r9, r4
 8022fa0:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022fa4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022fa8:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8022fac:	fb08 f404 	mul.w	r4, r8, r4
 8022fb0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022fb4:	fb08 f802 	mul.w	r8, r8, r2
 8022fb8:	0a2d      	lsrs	r5, r5, #8
 8022fba:	0a22      	lsrs	r2, r4, #8
 8022fbc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022fc0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022fc4:	437d      	muls	r5, r7
 8022fc6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022fca:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022fce:	4414      	add	r4, r2
 8022fd0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8022fd4:	fb0a fa01 	mul.w	sl, sl, r1
 8022fd8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022fdc:	9a03      	ldr	r2, [sp, #12]
 8022fde:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8022fe2:	fb02 5503 	mla	r5, r2, r3, r5
 8022fe6:	0a24      	lsrs	r4, r4, #8
 8022fe8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8022fec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022ff0:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8022ff4:	fb04 540e 	mla	r4, r4, lr, r5
 8022ff8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8022ffc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023000:	4461      	add	r1, ip
 8023002:	0a09      	lsrs	r1, r1, #8
 8023004:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023008:	fb01 4100 	mla	r1, r1, r0, r4
 802300c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023010:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023014:	fb07 f70a 	mul.w	r7, r7, sl
 8023018:	0a09      	lsrs	r1, r1, #8
 802301a:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802301e:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8023022:	fb03 7101 	mla	r1, r3, r1, r7
 8023026:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802302a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802302e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023032:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023036:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802303a:	fb00 e101 	mla	r1, r0, r1, lr
 802303e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023042:	9a00      	ldr	r2, [sp, #0]
 8023044:	b287      	uxth	r7, r0
 8023046:	437a      	muls	r2, r7
 8023048:	1c53      	adds	r3, r2, #1
 802304a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802304e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023052:	0a09      	lsrs	r1, r1, #8
 8023054:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023058:	4321      	orrs	r1, r4
 802305a:	0c0a      	lsrs	r2, r1, #16
 802305c:	8836      	ldrh	r6, [r6, #0]
 802305e:	fb12 f207 	smulbb	r2, r2, r7
 8023062:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8023066:	b2c8      	uxtb	r0, r1
 8023068:	1235      	asrs	r5, r6, #8
 802306a:	fb14 f407 	smulbb	r4, r4, r7
 802306e:	fb10 f007 	smulbb	r0, r0, r7
 8023072:	b2db      	uxtb	r3, r3
 8023074:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023078:	fb05 2503 	mla	r5, r5, r3, r2
 802307c:	10f2      	asrs	r2, r6, #3
 802307e:	00f6      	lsls	r6, r6, #3
 8023080:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023084:	b2f6      	uxtb	r6, r6
 8023086:	fb02 4203 	mla	r2, r2, r3, r4
 802308a:	fb06 0303 	mla	r3, r6, r3, r0
 802308e:	b2ad      	uxth	r5, r5
 8023090:	b299      	uxth	r1, r3
 8023092:	b294      	uxth	r4, r2
 8023094:	1c6b      	adds	r3, r5, #1
 8023096:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802309a:	1c62      	adds	r2, r4, #1
 802309c:	1c4b      	adds	r3, r1, #1
 802309e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80230a2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80230a6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80230aa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80230ae:	0952      	lsrs	r2, r2, #5
 80230b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80230b4:	432b      	orrs	r3, r5
 80230b6:	4313      	orrs	r3, r2
 80230b8:	9a02      	ldr	r2, [sp, #8]
 80230ba:	8013      	strh	r3, [r2, #0]
 80230bc:	b005      	add	sp, #20
 80230be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230c2:	2500      	movs	r5, #0
 80230c4:	e6ef      	b.n	8022ea6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80230c6:	2100      	movs	r1, #0
 80230c8:	460d      	mov	r5, r1
 80230ca:	e6f7      	b.n	8022ebc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80230cc:	2100      	movs	r1, #0
 80230ce:	e6f5      	b.n	8022ebc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80230d0:	4631      	mov	r1, r6
 80230d2:	e6f3      	b.n	8022ebc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80230d4:	2400      	movs	r4, #0
 80230d6:	e702      	b.n	8022ede <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80230d8:	2200      	movs	r2, #0
 80230da:	4614      	mov	r4, r2
 80230dc:	e70b      	b.n	8022ef6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80230de:	4602      	mov	r2, r0
 80230e0:	4604      	mov	r4, r0
 80230e2:	e708      	b.n	8022ef6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80230e4:	2200      	movs	r2, #0
 80230e6:	e706      	b.n	8022ef6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80230e8:	4632      	mov	r2, r6
 80230ea:	e704      	b.n	8022ef6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080230ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80230ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230f0:	b09d      	sub	sp, #116	; 0x74
 80230f2:	9219      	str	r2, [sp, #100]	; 0x64
 80230f4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80230f6:	901b      	str	r0, [sp, #108]	; 0x6c
 80230f8:	9307      	str	r3, [sp, #28]
 80230fa:	6850      	ldr	r0, [r2, #4]
 80230fc:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023100:	9117      	str	r1, [sp, #92]	; 0x5c
 8023102:	931a      	str	r3, [sp, #104]	; 0x68
 8023104:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023108:	fb00 1303 	mla	r3, r0, r3, r1
 802310c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023110:	6812      	ldr	r2, [r2, #0]
 8023112:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023116:	930a      	str	r3, [sp, #40]	; 0x28
 8023118:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802311a:	681b      	ldr	r3, [r3, #0]
 802311c:	9310      	str	r3, [sp, #64]	; 0x40
 802311e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023122:	930b      	str	r3, [sp, #44]	; 0x2c
 8023124:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023126:	2b00      	cmp	r3, #0
 8023128:	dc03      	bgt.n	8023132 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802312a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802312c:	2b00      	cmp	r3, #0
 802312e:	f340 8375 	ble.w	802381c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023132:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023134:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023138:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802313c:	1e48      	subs	r0, r1, #1
 802313e:	1e57      	subs	r7, r2, #1
 8023140:	9b07      	ldr	r3, [sp, #28]
 8023142:	2b00      	cmp	r3, #0
 8023144:	f340 818e 	ble.w	8023464 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023148:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802314c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023150:	d406      	bmi.n	8023160 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023152:	4584      	cmp	ip, r0
 8023154:	da04      	bge.n	8023160 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023156:	2b00      	cmp	r3, #0
 8023158:	db02      	blt.n	8023160 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802315a:	42bb      	cmp	r3, r7
 802315c:	f2c0 8183 	blt.w	8023466 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023160:	f11c 0c01 	adds.w	ip, ip, #1
 8023164:	f100 8173 	bmi.w	802344e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023168:	4561      	cmp	r1, ip
 802316a:	f2c0 8170 	blt.w	802344e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802316e:	3301      	adds	r3, #1
 8023170:	f100 816d 	bmi.w	802344e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023174:	429a      	cmp	r2, r3
 8023176:	f2c0 816a 	blt.w	802344e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802317a:	9b07      	ldr	r3, [sp, #28]
 802317c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802317e:	9318      	str	r3, [sp, #96]	; 0x60
 8023180:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023182:	2b00      	cmp	r3, #0
 8023184:	f340 818c 	ble.w	80234a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8023188:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802318a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802318c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023190:	1422      	asrs	r2, r4, #16
 8023192:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023196:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802319a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802319e:	689b      	ldr	r3, [r3, #8]
 80231a0:	f100 81cd 	bmi.w	802353e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80231a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80231a8:	4542      	cmp	r2, r8
 80231aa:	f280 81c8 	bge.w	802353e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80231ae:	f1bc 0f00 	cmp.w	ip, #0
 80231b2:	f2c0 81c4 	blt.w	802353e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80231b6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80231ba:	45c4      	cmp	ip, r8
 80231bc:	f280 81bf 	bge.w	802353e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80231c0:	b21b      	sxth	r3, r3
 80231c2:	fb0c 2203 	mla	r2, ip, r3, r2
 80231c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80231c8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80231cc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80231d0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80231d4:	2800      	cmp	r0, #0
 80231d6:	f000 81a9 	beq.w	802352c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80231da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80231de:	950c      	str	r5, [sp, #48]	; 0x30
 80231e0:	0e2d      	lsrs	r5, r5, #24
 80231e2:	9513      	str	r5, [sp, #76]	; 0x4c
 80231e4:	b181      	cbz	r1, 8023208 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80231e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80231ea:	3b01      	subs	r3, #1
 80231ec:	009b      	lsls	r3, r3, #2
 80231ee:	3304      	adds	r3, #4
 80231f0:	eb08 0c03 	add.w	ip, r8, r3
 80231f4:	f858 3003 	ldr.w	r3, [r8, r3]
 80231f8:	9308      	str	r3, [sp, #32]
 80231fa:	0e1b      	lsrs	r3, r3, #24
 80231fc:	9311      	str	r3, [sp, #68]	; 0x44
 80231fe:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023202:	930d      	str	r3, [sp, #52]	; 0x34
 8023204:	0e1b      	lsrs	r3, r3, #24
 8023206:	9314      	str	r3, [sp, #80]	; 0x50
 8023208:	b280      	uxth	r0, r0
 802320a:	b289      	uxth	r1, r1
 802320c:	fb00 f901 	mul.w	r9, r0, r1
 8023210:	0100      	lsls	r0, r0, #4
 8023212:	eba0 0809 	sub.w	r8, r0, r9
 8023216:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802321a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802321c:	fa1f f888 	uxth.w	r8, r8
 8023220:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023224:	fb08 f000 	mul.w	r0, r8, r0
 8023228:	b289      	uxth	r1, r1
 802322a:	1a5b      	subs	r3, r3, r1
 802322c:	b29b      	uxth	r3, r3
 802322e:	fb03 000e 	mla	r0, r3, lr, r0
 8023232:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023234:	fb01 0005 	mla	r0, r1, r5, r0
 8023238:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802323a:	fb09 0005 	mla	r0, r9, r5, r0
 802323e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023242:	2800      	cmp	r0, #0
 8023244:	f000 80fa 	beq.w	802343c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023248:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802324c:	d01b      	beq.n	8023286 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802324e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023252:	fb0e fa0a 	mul.w	sl, lr, sl
 8023256:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802325a:	fb0e fe02 	mul.w	lr, lr, r2
 802325e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023262:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023266:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802326a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802326e:	4452      	add	r2, sl
 8023270:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023274:	0a12      	lsrs	r2, r2, #8
 8023276:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802327a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802327e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023282:	ea42 020c 	orr.w	r2, r2, ip
 8023286:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023288:	2dff      	cmp	r5, #255	; 0xff
 802328a:	d021      	beq.n	80232d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802328c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802328e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023292:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023294:	fb05 fb0b 	mul.w	fp, r5, fp
 8023298:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802329a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802329e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80232a2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80232a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80232a8:	fb05 fa0a 	mul.w	sl, r5, sl
 80232ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80232b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80232b4:	44de      	add	lr, fp
 80232b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80232ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80232be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80232c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80232c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80232ca:	ea4e 050a 	orr.w	r5, lr, sl
 80232ce:	950c      	str	r5, [sp, #48]	; 0x30
 80232d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80232d2:	2dff      	cmp	r5, #255	; 0xff
 80232d4:	d021      	beq.n	802331a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80232d6:	9d08      	ldr	r5, [sp, #32]
 80232d8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80232dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80232de:	fb05 fb0b 	mul.w	fp, r5, fp
 80232e2:	9d08      	ldr	r5, [sp, #32]
 80232e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80232e8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80232ec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80232ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80232f2:	fb05 fa0a 	mul.w	sl, r5, sl
 80232f6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80232fa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80232fe:	44de      	add	lr, fp
 8023300:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023304:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023308:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802330c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023310:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023314:	ea4e 050a 	orr.w	r5, lr, sl
 8023318:	9508      	str	r5, [sp, #32]
 802331a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802331c:	2dff      	cmp	r5, #255	; 0xff
 802331e:	d021      	beq.n	8023364 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023320:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023322:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023326:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023328:	fb05 fb0b 	mul.w	fp, r5, fp
 802332c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802332e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023332:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023336:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023338:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802333c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023340:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023344:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023348:	44de      	add	lr, fp
 802334a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802334e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023352:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023356:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802335a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802335e:	ea4e 050a 	orr.w	r5, lr, sl
 8023362:	950d      	str	r5, [sp, #52]	; 0x34
 8023364:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023366:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802336a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802336e:	fb08 fc0c 	mul.w	ip, r8, ip
 8023372:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023376:	9d08      	ldr	r5, [sp, #32]
 8023378:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802337c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023380:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023384:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023386:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802338a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802338c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023390:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023394:	fb08 f80e 	mul.w	r8, r8, lr
 8023398:	fb03 8202 	mla	r2, r3, r2, r8
 802339c:	9b08      	ldr	r3, [sp, #32]
 802339e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80233a2:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80233a6:	fb01 220a 	mla	r2, r1, sl, r2
 80233aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80233ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80233b0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80233b4:	fb09 2901 	mla	r9, r9, r1, r2
 80233b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80233ba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80233be:	4342      	muls	r2, r0
 80233c0:	1c50      	adds	r0, r2, #1
 80233c2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80233c6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80233ca:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80233ce:	ea4c 0c09 	orr.w	ip, ip, r9
 80233d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80233d4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80233d8:	883b      	ldrh	r3, [r7, #0]
 80233da:	fb12 f205 	smulbb	r2, r2, r5
 80233de:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80233e2:	fa5f fc8c 	uxtb.w	ip, ip
 80233e6:	1219      	asrs	r1, r3, #8
 80233e8:	fb1c fc05 	smulbb	ip, ip, r5
 80233ec:	b2c0      	uxtb	r0, r0
 80233ee:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80233f2:	fb01 2100 	mla	r1, r1, r0, r2
 80233f6:	10da      	asrs	r2, r3, #3
 80233f8:	00db      	lsls	r3, r3, #3
 80233fa:	fb1e fe05 	smulbb	lr, lr, r5
 80233fe:	b2db      	uxtb	r3, r3
 8023400:	fb03 c300 	mla	r3, r3, r0, ip
 8023404:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023408:	b289      	uxth	r1, r1
 802340a:	fb02 e200 	mla	r2, r2, r0, lr
 802340e:	fa1f fc83 	uxth.w	ip, r3
 8023412:	1c4b      	adds	r3, r1, #1
 8023414:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023418:	f10c 0301 	add.w	r3, ip, #1
 802341c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023420:	b292      	uxth	r2, r2
 8023422:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023426:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802342a:	430b      	orrs	r3, r1
 802342c:	1c51      	adds	r1, r2, #1
 802342e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023432:	0952      	lsrs	r2, r2, #5
 8023434:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023438:	4313      	orrs	r3, r2
 802343a:	803b      	strh	r3, [r7, #0]
 802343c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802343e:	3702      	adds	r7, #2
 8023440:	441c      	add	r4, r3
 8023442:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023444:	441e      	add	r6, r3
 8023446:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023448:	3b01      	subs	r3, #1
 802344a:	9318      	str	r3, [sp, #96]	; 0x60
 802344c:	e698      	b.n	8023180 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802344e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023450:	441c      	add	r4, r3
 8023452:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023454:	441e      	add	r6, r3
 8023456:	9b07      	ldr	r3, [sp, #28]
 8023458:	3b01      	subs	r3, #1
 802345a:	9307      	str	r3, [sp, #28]
 802345c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802345e:	3302      	adds	r3, #2
 8023460:	930a      	str	r3, [sp, #40]	; 0x28
 8023462:	e66d      	b.n	8023140 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8023464:	d023      	beq.n	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023466:	9b07      	ldr	r3, [sp, #28]
 8023468:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802346a:	3b01      	subs	r3, #1
 802346c:	fb00 4003 	mla	r0, r0, r3, r4
 8023470:	1400      	asrs	r0, r0, #16
 8023472:	f53f ae82 	bmi.w	802317a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023476:	3901      	subs	r1, #1
 8023478:	4288      	cmp	r0, r1
 802347a:	f6bf ae7e 	bge.w	802317a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802347e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023480:	fb01 6303 	mla	r3, r1, r3, r6
 8023484:	141b      	asrs	r3, r3, #16
 8023486:	f53f ae78 	bmi.w	802317a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802348a:	3a01      	subs	r2, #1
 802348c:	4293      	cmp	r3, r2
 802348e:	f6bf ae74 	bge.w	802317a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023492:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023496:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802349a:	f1bb 0f00 	cmp.w	fp, #0
 802349e:	dc6c      	bgt.n	802357a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80234a0:	9b07      	ldr	r3, [sp, #28]
 80234a2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80234a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234a8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80234ac:	930a      	str	r3, [sp, #40]	; 0x28
 80234ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80234b0:	2b00      	cmp	r3, #0
 80234b2:	f340 81b3 	ble.w	802381c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80234b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80234ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80234be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80234c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80234c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80234ca:	eef0 6a62 	vmov.f32	s13, s5
 80234ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80234d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80234d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80234da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80234e2:	ee16 4a90 	vmov	r4, s13
 80234e6:	eef0 6a43 	vmov.f32	s13, s6
 80234ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80234ee:	ee12 2a90 	vmov	r2, s5
 80234f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80234f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80234f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8023500:	ee13 2a10 	vmov	r2, s6
 8023504:	9329      	str	r3, [sp, #164]	; 0xa4
 8023506:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023508:	ee16 6a90 	vmov	r6, s13
 802350c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023510:	932a      	str	r3, [sp, #168]	; 0xa8
 8023512:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023514:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023516:	3b01      	subs	r3, #1
 8023518:	9317      	str	r3, [sp, #92]	; 0x5c
 802351a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802351c:	bf08      	it	eq
 802351e:	4613      	moveq	r3, r2
 8023520:	eeb0 3a67 	vmov.f32	s6, s15
 8023524:	9307      	str	r3, [sp, #28]
 8023526:	eef0 2a47 	vmov.f32	s5, s14
 802352a:	e5fb      	b.n	8023124 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802352c:	2900      	cmp	r1, #0
 802352e:	f43f ae6b 	beq.w	8023208 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023532:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023536:	9308      	str	r3, [sp, #32]
 8023538:	0e1b      	lsrs	r3, r3, #24
 802353a:	9311      	str	r3, [sp, #68]	; 0x44
 802353c:	e664      	b.n	8023208 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802353e:	f112 0801 	adds.w	r8, r2, #1
 8023542:	f53f af7b 	bmi.w	802343c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023546:	4543      	cmp	r3, r8
 8023548:	f6ff af78 	blt.w	802343c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802354c:	f11c 0801 	adds.w	r8, ip, #1
 8023550:	f53f af74 	bmi.w	802343c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023554:	45c6      	cmp	lr, r8
 8023556:	f6ff af71 	blt.w	802343c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802355a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802355c:	9201      	str	r2, [sp, #4]
 802355e:	fa0f f28e 	sxth.w	r2, lr
 8023562:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023566:	e9cd c002 	strd	ip, r0, [sp, #8]
 802356a:	9200      	str	r2, [sp, #0]
 802356c:	b21b      	sxth	r3, r3
 802356e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023570:	4639      	mov	r1, r7
 8023572:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023574:	f7ff fc79 	bl	8022e6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023578:	e760      	b.n	802343c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802357a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802357c:	1427      	asrs	r7, r4, #16
 802357e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023582:	1433      	asrs	r3, r6, #16
 8023584:	fb01 7303 	mla	r3, r1, r3, r7
 8023588:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802358a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802358e:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8023592:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023596:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802359a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802359e:	2a00      	cmp	r2, #0
 80235a0:	f000 8133 	beq.w	802380a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80235a4:	687d      	ldr	r5, [r7, #4]
 80235a6:	950e      	str	r5, [sp, #56]	; 0x38
 80235a8:	0e2d      	lsrs	r5, r5, #24
 80235aa:	9515      	str	r5, [sp, #84]	; 0x54
 80235ac:	b178      	cbz	r0, 80235ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80235ae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80235b2:	3901      	subs	r1, #1
 80235b4:	0089      	lsls	r1, r1, #2
 80235b6:	3104      	adds	r1, #4
 80235b8:	eb07 0e01 	add.w	lr, r7, r1
 80235bc:	5879      	ldr	r1, [r7, r1]
 80235be:	9109      	str	r1, [sp, #36]	; 0x24
 80235c0:	0e09      	lsrs	r1, r1, #24
 80235c2:	9112      	str	r1, [sp, #72]	; 0x48
 80235c4:	f8de 1004 	ldr.w	r1, [lr, #4]
 80235c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80235ca:	0e09      	lsrs	r1, r1, #24
 80235cc:	9116      	str	r1, [sp, #88]	; 0x58
 80235ce:	b292      	uxth	r2, r2
 80235d0:	b280      	uxth	r0, r0
 80235d2:	fb02 f800 	mul.w	r8, r2, r0
 80235d6:	0112      	lsls	r2, r2, #4
 80235d8:	eba2 0e08 	sub.w	lr, r2, r8
 80235dc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80235de:	fa1f fe8e 	uxth.w	lr, lr
 80235e2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80235e6:	fb0e f101 	mul.w	r1, lr, r1
 80235ea:	b280      	uxth	r0, r0
 80235ec:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80235f0:	1a12      	subs	r2, r2, r0
 80235f2:	b292      	uxth	r2, r2
 80235f4:	fb02 110c 	mla	r1, r2, ip, r1
 80235f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80235fa:	fb00 1105 	mla	r1, r0, r5, r1
 80235fe:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023600:	fb08 1105 	mla	r1, r8, r5, r1
 8023604:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023608:	2900      	cmp	r1, #0
 802360a:	f000 80f5 	beq.w	80237f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802360e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023612:	d019      	beq.n	8023648 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8023614:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023618:	fb0c fa0a 	mul.w	sl, ip, sl
 802361c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023620:	fb0c fc03 	mul.w	ip, ip, r3
 8023624:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023628:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802362c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023630:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023634:	4453      	add	r3, sl
 8023636:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802363a:	0a1b      	lsrs	r3, r3, #8
 802363c:	0a3f      	lsrs	r7, r7, #8
 802363e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023642:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023646:	433b      	orrs	r3, r7
 8023648:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802364a:	2dff      	cmp	r5, #255	; 0xff
 802364c:	d020      	beq.n	8023690 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802364e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023650:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023654:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023656:	436f      	muls	r7, r5
 8023658:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802365a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802365e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023662:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023664:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023668:	fb05 fa0a 	mul.w	sl, r5, sl
 802366c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023670:	44bc      	add	ip, r7
 8023672:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023676:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802367a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802367e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023682:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023686:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802368a:	ea4c 050a 	orr.w	r5, ip, sl
 802368e:	950e      	str	r5, [sp, #56]	; 0x38
 8023690:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023692:	2dff      	cmp	r5, #255	; 0xff
 8023694:	d020      	beq.n	80236d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8023696:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023698:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802369c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802369e:	436f      	muls	r7, r5
 80236a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80236a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80236a6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80236aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80236ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80236b0:	fb05 fa0a 	mul.w	sl, r5, sl
 80236b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80236b8:	44bc      	add	ip, r7
 80236ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80236be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80236c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80236c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80236ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80236ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80236d2:	ea4c 050a 	orr.w	r5, ip, sl
 80236d6:	9509      	str	r5, [sp, #36]	; 0x24
 80236d8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80236da:	2dff      	cmp	r5, #255	; 0xff
 80236dc:	d020      	beq.n	8023720 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80236de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80236e0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80236e4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80236e6:	436f      	muls	r7, r5
 80236e8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80236ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80236ee:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80236f2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80236f4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80236f8:	fb05 fa0a 	mul.w	sl, r5, sl
 80236fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023700:	44bc      	add	ip, r7
 8023702:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023706:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802370a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802370e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023712:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023716:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802371a:	ea4c 050a 	orr.w	r5, ip, sl
 802371e:	950f      	str	r5, [sp, #60]	; 0x3c
 8023720:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023722:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023726:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802372a:	fb0e f707 	mul.w	r7, lr, r7
 802372e:	fb02 770c 	mla	r7, r2, ip, r7
 8023732:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023738:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802373c:	fb00 770c 	mla	r7, r0, ip, r7
 8023740:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023742:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023746:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023748:	fb08 770c 	mla	r7, r8, ip, r7
 802374c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023750:	fb0e fe0c 	mul.w	lr, lr, ip
 8023754:	fb02 e303 	mla	r3, r2, r3, lr
 8023758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802375a:	0a3f      	lsrs	r7, r7, #8
 802375c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023760:	fb00 330a 	mla	r3, r0, sl, r3
 8023764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023766:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802376a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802376e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023774:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023778:	4359      	muls	r1, r3
 802377a:	1c4b      	adds	r3, r1, #1
 802377c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023780:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023784:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023788:	ea47 070c 	orr.w	r7, r7, ip
 802378c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802378e:	0c3b      	lsrs	r3, r7, #16
 8023790:	f8b9 0000 	ldrh.w	r0, [r9]
 8023794:	fb13 f305 	smulbb	r3, r3, r5
 8023798:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802379c:	b2ff      	uxtb	r7, r7
 802379e:	1202      	asrs	r2, r0, #8
 80237a0:	fb17 f705 	smulbb	r7, r7, r5
 80237a4:	b2c9      	uxtb	r1, r1
 80237a6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80237aa:	fb02 3201 	mla	r2, r2, r1, r3
 80237ae:	10c3      	asrs	r3, r0, #3
 80237b0:	00c0      	lsls	r0, r0, #3
 80237b2:	fb1c fc05 	smulbb	ip, ip, r5
 80237b6:	b2c0      	uxtb	r0, r0
 80237b8:	fb00 7001 	mla	r0, r0, r1, r7
 80237bc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80237c0:	fb03 c301 	mla	r3, r3, r1, ip
 80237c4:	b292      	uxth	r2, r2
 80237c6:	b280      	uxth	r0, r0
 80237c8:	1c51      	adds	r1, r2, #1
 80237ca:	f100 0c01 	add.w	ip, r0, #1
 80237ce:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80237d2:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80237d6:	b29b      	uxth	r3, r3
 80237d8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80237dc:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80237e0:	ea4c 0202 	orr.w	r2, ip, r2
 80237e4:	f103 0c01 	add.w	ip, r3, #1
 80237e8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80237ec:	095b      	lsrs	r3, r3, #5
 80237ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80237f2:	431a      	orrs	r2, r3
 80237f4:	f8a9 2000 	strh.w	r2, [r9]
 80237f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80237fa:	f109 0902 	add.w	r9, r9, #2
 80237fe:	441c      	add	r4, r3
 8023800:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023802:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023806:	441e      	add	r6, r3
 8023808:	e647      	b.n	802349a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802380a:	2800      	cmp	r0, #0
 802380c:	f43f aedf 	beq.w	80235ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023810:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8023814:	9109      	str	r1, [sp, #36]	; 0x24
 8023816:	0e09      	lsrs	r1, r1, #24
 8023818:	9112      	str	r1, [sp, #72]	; 0x48
 802381a:	e6d8      	b.n	80235ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802381c:	b01d      	add	sp, #116	; 0x74
 802381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023822 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8023822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023826:	b085      	sub	sp, #20
 8023828:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802382c:	9102      	str	r1, [sp, #8]
 802382e:	fb04 7103 	mla	r1, r4, r3, r7
 8023832:	2c00      	cmp	r4, #0
 8023834:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023838:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802383c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023840:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8023844:	f2c0 810c 	blt.w	8023a60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8023848:	45a6      	cmp	lr, r4
 802384a:	f340 8109 	ble.w	8023a60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802384e:	2f00      	cmp	r7, #0
 8023850:	f2c0 8104 	blt.w	8023a5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8023854:	42bb      	cmp	r3, r7
 8023856:	f340 8101 	ble.w	8023a5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802385a:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802385e:	1c7a      	adds	r2, r7, #1
 8023860:	f100 8101 	bmi.w	8023a66 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8023864:	4293      	cmp	r3, r2
 8023866:	f340 80fe 	ble.w	8023a66 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802386a:	2e00      	cmp	r6, #0
 802386c:	f000 80fd 	beq.w	8023a6a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8023870:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023874:	3401      	adds	r4, #1
 8023876:	f100 80fc 	bmi.w	8023a72 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802387a:	45a6      	cmp	lr, r4
 802387c:	f340 80f9 	ble.w	8023a72 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8023880:	2800      	cmp	r0, #0
 8023882:	f000 80f9 	beq.w	8023a78 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8023886:	2f00      	cmp	r7, #0
 8023888:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802388c:	f2c0 80ef 	blt.w	8023a6e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8023890:	42bb      	cmp	r3, r7
 8023892:	f340 80ec 	ble.w	8023a6e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8023896:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802389a:	3701      	adds	r7, #1
 802389c:	f100 80ef 	bmi.w	8023a7e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80238a0:	42bb      	cmp	r3, r7
 80238a2:	f340 80ec 	ble.w	8023a7e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80238a6:	2e00      	cmp	r6, #0
 80238a8:	f000 80eb 	beq.w	8023a82 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80238ac:	6852      	ldr	r2, [r2, #4]
 80238ae:	b2b6      	uxth	r6, r6
 80238b0:	b280      	uxth	r0, r0
 80238b2:	fb00 fe06 	mul.w	lr, r0, r6
 80238b6:	0136      	lsls	r6, r6, #4
 80238b8:	eba6 070e 	sub.w	r7, r6, lr
 80238bc:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80238c0:	b2bf      	uxth	r7, r7
 80238c2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80238c6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80238ca:	fb07 f60a 	mul.w	r6, r7, sl
 80238ce:	b280      	uxth	r0, r0
 80238d0:	1a1b      	subs	r3, r3, r0
 80238d2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80238d6:	b29b      	uxth	r3, r3
 80238d8:	fb0b 6603 	mla	r6, fp, r3, r6
 80238dc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80238e0:	fb00 6609 	mla	r6, r0, r9, r6
 80238e4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80238e8:	fb0e 6608 	mla	r6, lr, r8, r6
 80238ec:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80238f0:	9600      	str	r6, [sp, #0]
 80238f2:	2e00      	cmp	r6, #0
 80238f4:	f000 80af 	beq.w	8023a56 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80238f8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80238fc:	fb0b fc0c 	mul.w	ip, fp, ip
 8023900:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023904:	fb0b f505 	mul.w	r5, fp, r5
 8023908:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802390c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023910:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023914:	44dc      	add	ip, fp
 8023916:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802391a:	9501      	str	r5, [sp, #4]
 802391c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023920:	9503      	str	r5, [sp, #12]
 8023922:	9d01      	ldr	r5, [sp, #4]
 8023924:	9e02      	ldr	r6, [sp, #8]
 8023926:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802392a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802392e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023932:	fb0a fc0c 	mul.w	ip, sl, ip
 8023936:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802393a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802393e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023942:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023946:	4465      	add	r5, ip
 8023948:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802394c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023950:	fb09 fc0c 	mul.w	ip, r9, ip
 8023954:	fb09 f904 	mul.w	r9, r9, r4
 8023958:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802395c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023960:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023964:	fb08 f404 	mul.w	r4, r8, r4
 8023968:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802396c:	fb08 f802 	mul.w	r8, r8, r2
 8023970:	0a2d      	lsrs	r5, r5, #8
 8023972:	0a22      	lsrs	r2, r4, #8
 8023974:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023978:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802397c:	437d      	muls	r5, r7
 802397e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8023982:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023986:	4414      	add	r4, r2
 8023988:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802398c:	fb0a fa01 	mul.w	sl, sl, r1
 8023990:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023994:	9a03      	ldr	r2, [sp, #12]
 8023996:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802399a:	fb02 5503 	mla	r5, r2, r3, r5
 802399e:	0a24      	lsrs	r4, r4, #8
 80239a0:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80239a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80239a8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80239ac:	fb04 540e 	mla	r4, r4, lr, r5
 80239b0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80239b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80239b8:	4461      	add	r1, ip
 80239ba:	0a09      	lsrs	r1, r1, #8
 80239bc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80239c0:	fb01 4100 	mla	r1, r1, r0, r4
 80239c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80239cc:	fb07 f70a 	mul.w	r7, r7, sl
 80239d0:	0a09      	lsrs	r1, r1, #8
 80239d2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80239d6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80239da:	fb03 7101 	mla	r1, r3, r1, r7
 80239de:	9b00      	ldr	r3, [sp, #0]
 80239e0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80239e4:	43da      	mvns	r2, r3
 80239e6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80239ea:	fb0e 1e08 	mla	lr, lr, r8, r1
 80239ee:	8836      	ldrh	r6, [r6, #0]
 80239f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80239f4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80239f8:	fb00 e101 	mla	r1, r0, r1, lr
 80239fc:	1233      	asrs	r3, r6, #8
 80239fe:	b2d2      	uxtb	r2, r2
 8023a00:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023a04:	4353      	muls	r3, r2
 8023a06:	10f0      	asrs	r0, r6, #3
 8023a08:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023a0c:	4350      	muls	r0, r2
 8023a0e:	0a09      	lsrs	r1, r1, #8
 8023a10:	00f6      	lsls	r6, r6, #3
 8023a12:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023a16:	b2f6      	uxtb	r6, r6
 8023a18:	4321      	orrs	r1, r4
 8023a1a:	4356      	muls	r6, r2
 8023a1c:	1c5a      	adds	r2, r3, #1
 8023a1e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023a22:	0c0b      	lsrs	r3, r1, #16
 8023a24:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023a28:	1c42      	adds	r2, r0, #1
 8023a2a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023a2e:	0a0a      	lsrs	r2, r1, #8
 8023a30:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023a34:	021b      	lsls	r3, r3, #8
 8023a36:	00d2      	lsls	r2, r2, #3
 8023a38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a3c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023a40:	4313      	orrs	r3, r2
 8023a42:	1c72      	adds	r2, r6, #1
 8023a44:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8023a48:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8023a4c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023a50:	4319      	orrs	r1, r3
 8023a52:	9b02      	ldr	r3, [sp, #8]
 8023a54:	8019      	strh	r1, [r3, #0]
 8023a56:	b005      	add	sp, #20
 8023a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a5c:	2500      	movs	r5, #0
 8023a5e:	e6fe      	b.n	802385e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8023a60:	2100      	movs	r1, #0
 8023a62:	460d      	mov	r5, r1
 8023a64:	e706      	b.n	8023874 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023a66:	2100      	movs	r1, #0
 8023a68:	e704      	b.n	8023874 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023a6a:	4631      	mov	r1, r6
 8023a6c:	e702      	b.n	8023874 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023a6e:	2400      	movs	r4, #0
 8023a70:	e713      	b.n	802389a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8023a72:	2200      	movs	r2, #0
 8023a74:	4614      	mov	r4, r2
 8023a76:	e71a      	b.n	80238ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023a78:	4602      	mov	r2, r0
 8023a7a:	4604      	mov	r4, r0
 8023a7c:	e717      	b.n	80238ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023a7e:	2200      	movs	r2, #0
 8023a80:	e715      	b.n	80238ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023a82:	4632      	mov	r2, r6
 8023a84:	e713      	b.n	80238ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08023a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a8c:	b09b      	sub	sp, #108	; 0x6c
 8023a8e:	9218      	str	r2, [sp, #96]	; 0x60
 8023a90:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023a92:	9019      	str	r0, [sp, #100]	; 0x64
 8023a94:	6850      	ldr	r0, [r2, #4]
 8023a96:	9116      	str	r1, [sp, #88]	; 0x58
 8023a98:	9307      	str	r3, [sp, #28]
 8023a9a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023a9e:	fb00 1303 	mla	r3, r0, r3, r1
 8023aa2:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8023aa6:	6812      	ldr	r2, [r2, #0]
 8023aa8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023aac:	930a      	str	r3, [sp, #40]	; 0x28
 8023aae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	930f      	str	r3, [sp, #60]	; 0x3c
 8023ab4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023ab6:	2b00      	cmp	r3, #0
 8023ab8:	dc03      	bgt.n	8023ac2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023aba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023abc:	2b00      	cmp	r3, #0
 8023abe:	f340 8387 	ble.w	80241d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023ac2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ac4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ac8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023acc:	1e48      	subs	r0, r1, #1
 8023ace:	1e57      	subs	r7, r2, #1
 8023ad0:	9b07      	ldr	r3, [sp, #28]
 8023ad2:	2b00      	cmp	r3, #0
 8023ad4:	f340 8166 	ble.w	8023da4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023ad8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023adc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023ae0:	d406      	bmi.n	8023af0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023ae2:	4584      	cmp	ip, r0
 8023ae4:	da04      	bge.n	8023af0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	db02      	blt.n	8023af0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023aea:	42bb      	cmp	r3, r7
 8023aec:	f2c0 815b 	blt.w	8023da6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023af0:	f11c 0c01 	adds.w	ip, ip, #1
 8023af4:	f100 814b 	bmi.w	8023d8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023af8:	4561      	cmp	r1, ip
 8023afa:	f2c0 8148 	blt.w	8023d8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023afe:	3301      	adds	r3, #1
 8023b00:	f100 8145 	bmi.w	8023d8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b04:	429a      	cmp	r2, r3
 8023b06:	f2c0 8142 	blt.w	8023d8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b0a:	9b07      	ldr	r3, [sp, #28]
 8023b0c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023b0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8023b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023b12:	2b00      	cmp	r3, #0
 8023b14:	f340 8165 	ble.w	8023de2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8023b18:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023b1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023b1c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023b20:	1422      	asrs	r2, r4, #16
 8023b22:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023b26:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023b2a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023b2e:	689b      	ldr	r3, [r3, #8]
 8023b30:	f100 81d5 	bmi.w	8023ede <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023b34:	f103 38ff 	add.w	r8, r3, #4294967295
 8023b38:	4542      	cmp	r2, r8
 8023b3a:	f280 81d0 	bge.w	8023ede <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023b3e:	f1bc 0f00 	cmp.w	ip, #0
 8023b42:	f2c0 81cc 	blt.w	8023ede <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023b46:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023b4a:	45c4      	cmp	ip, r8
 8023b4c:	f280 81c7 	bge.w	8023ede <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023b50:	b21b      	sxth	r3, r3
 8023b52:	fb0c 2203 	mla	r2, ip, r3, r2
 8023b56:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023b58:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023b5c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023b60:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023b64:	2900      	cmp	r1, #0
 8023b66:	f000 8182 	beq.w	8023e6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023b6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023b6e:	950b      	str	r5, [sp, #44]	; 0x2c
 8023b70:	0e2d      	lsrs	r5, r5, #24
 8023b72:	9512      	str	r5, [sp, #72]	; 0x48
 8023b74:	b180      	cbz	r0, 8023b98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023b76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023b7a:	3b01      	subs	r3, #1
 8023b7c:	009b      	lsls	r3, r3, #2
 8023b7e:	3304      	adds	r3, #4
 8023b80:	eb08 0c03 	add.w	ip, r8, r3
 8023b84:	f858 3003 	ldr.w	r3, [r8, r3]
 8023b88:	9308      	str	r3, [sp, #32]
 8023b8a:	0e1b      	lsrs	r3, r3, #24
 8023b8c:	9310      	str	r3, [sp, #64]	; 0x40
 8023b8e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023b92:	930c      	str	r3, [sp, #48]	; 0x30
 8023b94:	0e1b      	lsrs	r3, r3, #24
 8023b96:	9313      	str	r3, [sp, #76]	; 0x4c
 8023b98:	b289      	uxth	r1, r1
 8023b9a:	b280      	uxth	r0, r0
 8023b9c:	fb01 f900 	mul.w	r9, r1, r0
 8023ba0:	0109      	lsls	r1, r1, #4
 8023ba2:	eba1 0809 	sub.w	r8, r1, r9
 8023ba6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023ba8:	fa1f f888 	uxth.w	r8, r8
 8023bac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023bb0:	fb08 f303 	mul.w	r3, r8, r3
 8023bb4:	b280      	uxth	r0, r0
 8023bb6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8023bba:	1a09      	subs	r1, r1, r0
 8023bbc:	b289      	uxth	r1, r1
 8023bbe:	fb01 330e 	mla	r3, r1, lr, r3
 8023bc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023bc4:	fb00 3305 	mla	r3, r0, r5, r3
 8023bc8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023bca:	fb09 3305 	mla	r3, r9, r5, r3
 8023bce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023bd2:	2b00      	cmp	r3, #0
 8023bd4:	f000 80d2 	beq.w	8023d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023bd8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023bdc:	d01b      	beq.n	8023c16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8023bde:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023be2:	fb0e fa0a 	mul.w	sl, lr, sl
 8023be6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023bea:	fb0e fe02 	mul.w	lr, lr, r2
 8023bee:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023bf2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023bf6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023bfa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023bfe:	4452      	add	r2, sl
 8023c00:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023c04:	0a12      	lsrs	r2, r2, #8
 8023c06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c0a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023c0e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c12:	ea42 020c 	orr.w	r2, r2, ip
 8023c16:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023c18:	2dff      	cmp	r5, #255	; 0xff
 8023c1a:	d021      	beq.n	8023c60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8023c1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023c1e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023c22:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023c24:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023c2a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c2e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023c32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023c34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c38:	fb05 fa0a 	mul.w	sl, r5, sl
 8023c3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c44:	44de      	add	lr, fp
 8023c46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c5a:	ea4e 050a 	orr.w	r5, lr, sl
 8023c5e:	950b      	str	r5, [sp, #44]	; 0x2c
 8023c60:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023c62:	2dff      	cmp	r5, #255	; 0xff
 8023c64:	d021      	beq.n	8023caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8023c66:	9d08      	ldr	r5, [sp, #32]
 8023c68:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023c6c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023c6e:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c72:	9d08      	ldr	r5, [sp, #32]
 8023c74:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023c78:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023c7a:	fb05 fa0e 	mul.w	sl, r5, lr
 8023c7e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c82:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c86:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c8a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c8e:	44de      	add	lr, fp
 8023c90:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ca0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ca4:	ea4e 050a 	orr.w	r5, lr, sl
 8023ca8:	9508      	str	r5, [sp, #32]
 8023caa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cac:	2dff      	cmp	r5, #255	; 0xff
 8023cae:	d021      	beq.n	8023cf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8023cb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023cb2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023cb6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cb8:	fb05 fb0b 	mul.w	fp, r5, fp
 8023cbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023cbe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023cc2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023cc6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ccc:	fb05 fa0a 	mul.w	sl, r5, sl
 8023cd0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023cd4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023cd8:	44de      	add	lr, fp
 8023cda:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cde:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ce2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ce6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023cee:	ea4e 050a 	orr.w	r5, lr, sl
 8023cf2:	950c      	str	r5, [sp, #48]	; 0x30
 8023cf4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023cf6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023cfa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023cfe:	fb08 fc0c 	mul.w	ip, r8, ip
 8023d02:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023d06:	9d08      	ldr	r5, [sp, #32]
 8023d08:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023d0c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023d10:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023d14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023d16:	2bff      	cmp	r3, #255	; 0xff
 8023d18:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023d1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023d1e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023d22:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023d26:	fb08 f80e 	mul.w	r8, r8, lr
 8023d2a:	fb01 8202 	mla	r2, r1, r2, r8
 8023d2e:	9908      	ldr	r1, [sp, #32]
 8023d30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d34:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023d38:	fb00 220a 	mla	r2, r0, sl, r2
 8023d3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023d3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d42:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023d46:	fb09 2900 	mla	r9, r9, r0, r2
 8023d4a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d4e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023d52:	ea4c 0c09 	orr.w	ip, ip, r9
 8023d56:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8023d5a:	f040 8091 	bne.w	8023e80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8023d5e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8023d62:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8023d66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023d6a:	f022 0207 	bic.w	r2, r2, #7
 8023d6e:	431a      	orrs	r2, r3
 8023d70:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023d74:	ea4c 0c02 	orr.w	ip, ip, r2
 8023d78:	f8a7 c000 	strh.w	ip, [r7]
 8023d7c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023d7e:	3702      	adds	r7, #2
 8023d80:	441c      	add	r4, r3
 8023d82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d84:	441e      	add	r6, r3
 8023d86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023d88:	3b01      	subs	r3, #1
 8023d8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8023d8c:	e6c0      	b.n	8023b10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8023d8e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023d90:	441c      	add	r4, r3
 8023d92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d94:	441e      	add	r6, r3
 8023d96:	9b07      	ldr	r3, [sp, #28]
 8023d98:	3b01      	subs	r3, #1
 8023d9a:	9307      	str	r3, [sp, #28]
 8023d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d9e:	3302      	adds	r3, #2
 8023da0:	930a      	str	r3, [sp, #40]	; 0x28
 8023da2:	e695      	b.n	8023ad0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023da4:	d024      	beq.n	8023df0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023da6:	9b07      	ldr	r3, [sp, #28]
 8023da8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023daa:	3b01      	subs	r3, #1
 8023dac:	fb00 4003 	mla	r0, r0, r3, r4
 8023db0:	1400      	asrs	r0, r0, #16
 8023db2:	f53f aeaa 	bmi.w	8023b0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023db6:	3901      	subs	r1, #1
 8023db8:	4288      	cmp	r0, r1
 8023dba:	f6bf aea6 	bge.w	8023b0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023dbe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023dc0:	fb01 6303 	mla	r3, r1, r3, r6
 8023dc4:	141b      	asrs	r3, r3, #16
 8023dc6:	f53f aea0 	bmi.w	8023b0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023dca:	3a01      	subs	r2, #1
 8023dcc:	4293      	cmp	r3, r2
 8023dce:	f6bf ae9c 	bge.w	8023b0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023dd2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023dd6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8023dda:	f1bb 0f00 	cmp.w	fp, #0
 8023dde:	f300 809a 	bgt.w	8023f16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023de2:	9b07      	ldr	r3, [sp, #28]
 8023de4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023dee:	930a      	str	r3, [sp, #40]	; 0x28
 8023df0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023df2:	2b00      	cmp	r3, #0
 8023df4:	f340 81ec 	ble.w	80241d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023dfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023e00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023e04:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023e08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023e0c:	eef0 6a62 	vmov.f32	s13, s5
 8023e10:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023e14:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023e18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023e1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e20:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023e24:	ee16 4a90 	vmov	r4, s13
 8023e28:	eef0 6a43 	vmov.f32	s13, s6
 8023e2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e30:	ee12 2a90 	vmov	r2, s5
 8023e34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023e38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e42:	ee13 2a10 	vmov	r2, s6
 8023e46:	9327      	str	r3, [sp, #156]	; 0x9c
 8023e48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e4a:	ee16 6a90 	vmov	r6, s13
 8023e4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e52:	9328      	str	r3, [sp, #160]	; 0xa0
 8023e54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023e56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023e58:	3b01      	subs	r3, #1
 8023e5a:	9316      	str	r3, [sp, #88]	; 0x58
 8023e5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e5e:	bf08      	it	eq
 8023e60:	4613      	moveq	r3, r2
 8023e62:	eeb0 3a67 	vmov.f32	s6, s15
 8023e66:	9307      	str	r3, [sp, #28]
 8023e68:	eef0 2a47 	vmov.f32	s5, s14
 8023e6c:	e622      	b.n	8023ab4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8023e6e:	2800      	cmp	r0, #0
 8023e70:	f43f ae92 	beq.w	8023b98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023e74:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023e78:	9308      	str	r3, [sp, #32]
 8023e7a:	0e1b      	lsrs	r3, r3, #24
 8023e7c:	9310      	str	r3, [sp, #64]	; 0x40
 8023e7e:	e68b      	b.n	8023b98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023e80:	43db      	mvns	r3, r3
 8023e82:	8839      	ldrh	r1, [r7, #0]
 8023e84:	fa5f f883 	uxtb.w	r8, r3
 8023e88:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8023e8c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023e90:	fb0e fe08 	mul.w	lr, lr, r8
 8023e94:	10c8      	asrs	r0, r1, #3
 8023e96:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023e9a:	fb00 f008 	mul.w	r0, r0, r8
 8023e9e:	00cb      	lsls	r3, r1, #3
 8023ea0:	f10e 0101 	add.w	r1, lr, #1
 8023ea4:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8023ea8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023eac:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8023eb0:	b2db      	uxtb	r3, r3
 8023eb2:	f100 0e01 	add.w	lr, r0, #1
 8023eb6:	fb03 f308 	mul.w	r3, r3, r8
 8023eba:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8023ebe:	4dc6      	ldr	r5, [pc, #792]	; (80241d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8023ec0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023ec4:	b2c9      	uxtb	r1, r1
 8023ec6:	00d2      	lsls	r2, r2, #3
 8023ec8:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8023ecc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ed0:	430a      	orrs	r2, r1
 8023ed2:	1c59      	adds	r1, r3, #1
 8023ed4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023ed8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023edc:	e748      	b.n	8023d70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8023ede:	f112 0801 	adds.w	r8, r2, #1
 8023ee2:	f53f af4b 	bmi.w	8023d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023ee6:	4543      	cmp	r3, r8
 8023ee8:	f6ff af48 	blt.w	8023d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023eec:	f11c 0801 	adds.w	r8, ip, #1
 8023ef0:	f53f af44 	bmi.w	8023d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023ef4:	45c6      	cmp	lr, r8
 8023ef6:	f6ff af41 	blt.w	8023d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023efa:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023efe:	fa0f f28e 	sxth.w	r2, lr
 8023f02:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023f06:	9200      	str	r2, [sp, #0]
 8023f08:	b21b      	sxth	r3, r3
 8023f0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023f0c:	4639      	mov	r1, r7
 8023f0e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023f10:	f7ff fc87 	bl	8023822 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8023f14:	e732      	b.n	8023d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023f18:	1421      	asrs	r1, r4, #16
 8023f1a:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8023f1e:	1433      	asrs	r3, r6, #16
 8023f20:	fb07 1303 	mla	r3, r7, r3, r1
 8023f24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023f26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023f28:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023f2c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023f30:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023f34:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023f38:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023f3c:	2a00      	cmp	r2, #0
 8023f3e:	f000 8108 	beq.w	8024152 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8023f42:	684d      	ldr	r5, [r1, #4]
 8023f44:	950d      	str	r5, [sp, #52]	; 0x34
 8023f46:	0e2d      	lsrs	r5, r5, #24
 8023f48:	9514      	str	r5, [sp, #80]	; 0x50
 8023f4a:	b178      	cbz	r0, 8023f6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023f4c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8023f50:	3f01      	subs	r7, #1
 8023f52:	00bf      	lsls	r7, r7, #2
 8023f54:	3704      	adds	r7, #4
 8023f56:	eb01 0e07 	add.w	lr, r1, r7
 8023f5a:	59c9      	ldr	r1, [r1, r7]
 8023f5c:	9109      	str	r1, [sp, #36]	; 0x24
 8023f5e:	0e09      	lsrs	r1, r1, #24
 8023f60:	9111      	str	r1, [sp, #68]	; 0x44
 8023f62:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023f66:	910e      	str	r1, [sp, #56]	; 0x38
 8023f68:	0e09      	lsrs	r1, r1, #24
 8023f6a:	9115      	str	r1, [sp, #84]	; 0x54
 8023f6c:	b292      	uxth	r2, r2
 8023f6e:	b280      	uxth	r0, r0
 8023f70:	fb02 f900 	mul.w	r9, r2, r0
 8023f74:	0112      	lsls	r2, r2, #4
 8023f76:	eba2 0e09 	sub.w	lr, r2, r9
 8023f7a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023f7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023f80:	fa1f fe8e 	uxth.w	lr, lr
 8023f84:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023f88:	fb0e f202 	mul.w	r2, lr, r2
 8023f8c:	b280      	uxth	r0, r0
 8023f8e:	1a09      	subs	r1, r1, r0
 8023f90:	b289      	uxth	r1, r1
 8023f92:	fb01 220c 	mla	r2, r1, ip, r2
 8023f96:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023f98:	fb00 2205 	mla	r2, r0, r5, r2
 8023f9c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023f9e:	fb09 2205 	mla	r2, r9, r5, r2
 8023fa2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023fa6:	2a00      	cmp	r2, #0
 8023fa8:	f000 80ca 	beq.w	8024140 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8023fac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023fb0:	d019      	beq.n	8023fe6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8023fb2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023fb6:	fb0c fa0a 	mul.w	sl, ip, sl
 8023fba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023fbe:	fb0c fc03 	mul.w	ip, ip, r3
 8023fc2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023fc6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023fca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023fce:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023fd2:	4453      	add	r3, sl
 8023fd4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023fd8:	0a1b      	lsrs	r3, r3, #8
 8023fda:	0a3f      	lsrs	r7, r7, #8
 8023fdc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023fe0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023fe4:	433b      	orrs	r3, r7
 8023fe6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023fe8:	2dff      	cmp	r5, #255	; 0xff
 8023fea:	d020      	beq.n	802402e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8023fec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023fee:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023ff2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023ff4:	436f      	muls	r7, r5
 8023ff6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023ff8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ffc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024000:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024002:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024006:	fb05 fa0a 	mul.w	sl, r5, sl
 802400a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802400e:	44bc      	add	ip, r7
 8024010:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024014:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024018:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802401c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024020:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024024:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024028:	ea4c 050a 	orr.w	r5, ip, sl
 802402c:	950d      	str	r5, [sp, #52]	; 0x34
 802402e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024030:	2dff      	cmp	r5, #255	; 0xff
 8024032:	d020      	beq.n	8024076 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8024034:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024036:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802403a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802403c:	436f      	muls	r7, r5
 802403e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024040:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024044:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024046:	fb05 fa0c 	mul.w	sl, r5, ip
 802404a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802404e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024052:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024056:	44bc      	add	ip, r7
 8024058:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802405c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024060:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024064:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024068:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802406c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024070:	ea4c 050a 	orr.w	r5, ip, sl
 8024074:	9509      	str	r5, [sp, #36]	; 0x24
 8024076:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024078:	2dff      	cmp	r5, #255	; 0xff
 802407a:	d020      	beq.n	80240be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802407c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802407e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024082:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024084:	436f      	muls	r7, r5
 8024086:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024088:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802408c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024090:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024092:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024096:	fb05 fa0a 	mul.w	sl, r5, sl
 802409a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802409e:	44bc      	add	ip, r7
 80240a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80240a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80240a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240b8:	ea4c 050a 	orr.w	r5, ip, sl
 80240bc:	950e      	str	r5, [sp, #56]	; 0x38
 80240be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80240c0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80240c4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80240c8:	fb0e f707 	mul.w	r7, lr, r7
 80240cc:	fb01 770c 	mla	r7, r1, ip, r7
 80240d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80240d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80240d6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80240da:	fb00 770c 	mla	r7, r0, ip, r7
 80240de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80240e0:	2aff      	cmp	r2, #255	; 0xff
 80240e2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80240e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80240e8:	fb09 770c 	mla	r7, r9, ip, r7
 80240ec:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80240f0:	fb0e fe0c 	mul.w	lr, lr, ip
 80240f4:	fb01 e303 	mla	r3, r1, r3, lr
 80240f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80240fa:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80240fe:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024102:	fb00 330a 	mla	r3, r0, sl, r3
 8024106:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024108:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802410c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024110:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024114:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024118:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802411c:	ea47 070c 	orr.w	r7, r7, ip
 8024120:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024124:	d11e      	bne.n	8024164 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8024126:	097a      	lsrs	r2, r7, #5
 8024128:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802412c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024130:	f023 0307 	bic.w	r3, r3, #7
 8024134:	4313      	orrs	r3, r2
 8024136:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802413a:	431f      	orrs	r7, r3
 802413c:	f8a8 7000 	strh.w	r7, [r8]
 8024140:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024142:	f108 0802 	add.w	r8, r8, #2
 8024146:	441c      	add	r4, r3
 8024148:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802414a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802414e:	441e      	add	r6, r3
 8024150:	e643      	b.n	8023dda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024152:	2800      	cmp	r0, #0
 8024154:	f43f af0a 	beq.w	8023f6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024158:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802415c:	9109      	str	r1, [sp, #36]	; 0x24
 802415e:	0e09      	lsrs	r1, r1, #24
 8024160:	9111      	str	r1, [sp, #68]	; 0x44
 8024162:	e703      	b.n	8023f6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024164:	43d2      	mvns	r2, r2
 8024166:	f8b8 1000 	ldrh.w	r1, [r8]
 802416a:	fa5f fe82 	uxtb.w	lr, r2
 802416e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024172:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024176:	fb0c fc0e 	mul.w	ip, ip, lr
 802417a:	10c8      	asrs	r0, r1, #3
 802417c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024180:	fb00 f00e 	mul.w	r0, r0, lr
 8024184:	00ca      	lsls	r2, r1, #3
 8024186:	f10c 0101 	add.w	r1, ip, #1
 802418a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802418e:	b2d2      	uxtb	r2, r2
 8024190:	0c39      	lsrs	r1, r7, #16
 8024192:	fb02 f20e 	mul.w	r2, r2, lr
 8024196:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802419a:	490f      	ldr	r1, [pc, #60]	; (80241d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802419c:	fa5f fc8c 	uxtb.w	ip, ip
 80241a0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80241a4:	1c41      	adds	r1, r0, #1
 80241a6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80241aa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80241ae:	1c51      	adds	r1, r2, #1
 80241b0:	00c0      	lsls	r0, r0, #3
 80241b2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80241b6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80241ba:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80241be:	ea4c 0c00 	orr.w	ip, ip, r0
 80241c2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80241c6:	ea47 0c0c 	orr.w	ip, r7, ip
 80241ca:	f8a8 c000 	strh.w	ip, [r8]
 80241ce:	e7b7      	b.n	8024140 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80241d0:	b01b      	add	sp, #108	; 0x6c
 80241d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241d6:	bf00      	nop
 80241d8:	fffff800 	.word	0xfffff800

080241dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80241dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241e0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80241e4:	2d00      	cmp	r5, #0
 80241e6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80241ea:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80241ee:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80241f2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80241f6:	fb05 0e03 	mla	lr, r5, r3, r0
 80241fa:	f2c0 808c 	blt.w	8024316 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80241fe:	45a9      	cmp	r9, r5
 8024200:	f340 8089 	ble.w	8024316 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024204:	2800      	cmp	r0, #0
 8024206:	f2c0 8084 	blt.w	8024312 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802420a:	4580      	cmp	r8, r0
 802420c:	f340 8081 	ble.w	8024312 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024210:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024214:	5d16      	ldrb	r6, [r2, r4]
 8024216:	f01e 0f01 	tst.w	lr, #1
 802421a:	bf0c      	ite	eq
 802421c:	f006 060f 	andeq.w	r6, r6, #15
 8024220:	1136      	asrne	r6, r6, #4
 8024222:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024226:	b2f6      	uxtb	r6, r6
 8024228:	1c44      	adds	r4, r0, #1
 802422a:	d477      	bmi.n	802431c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802422c:	45a0      	cmp	r8, r4
 802422e:	dd75      	ble.n	802431c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024230:	2f00      	cmp	r7, #0
 8024232:	d075      	beq.n	8024320 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8024234:	f10e 0a01 	add.w	sl, lr, #1
 8024238:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802423c:	5d14      	ldrb	r4, [r2, r4]
 802423e:	f01a 0f01 	tst.w	sl, #1
 8024242:	bf0c      	ite	eq
 8024244:	f004 040f 	andeq.w	r4, r4, #15
 8024248:	1124      	asrne	r4, r4, #4
 802424a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802424e:	b2e4      	uxtb	r4, r4
 8024250:	3501      	adds	r5, #1
 8024252:	d469      	bmi.n	8024328 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024254:	45a9      	cmp	r9, r5
 8024256:	dd67      	ble.n	8024328 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024258:	f1bc 0f00 	cmp.w	ip, #0
 802425c:	d067      	beq.n	802432e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802425e:	2800      	cmp	r0, #0
 8024260:	db60      	blt.n	8024324 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024262:	4580      	cmp	r8, r0
 8024264:	dd5e      	ble.n	8024324 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024266:	eb03 090e 	add.w	r9, r3, lr
 802426a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802426e:	5d55      	ldrb	r5, [r2, r5]
 8024270:	f019 0f01 	tst.w	r9, #1
 8024274:	bf0c      	ite	eq
 8024276:	f005 050f 	andeq.w	r5, r5, #15
 802427a:	112d      	asrne	r5, r5, #4
 802427c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024280:	b2ed      	uxtb	r5, r5
 8024282:	3001      	adds	r0, #1
 8024284:	d456      	bmi.n	8024334 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024286:	4580      	cmp	r8, r0
 8024288:	dd54      	ble.n	8024334 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802428a:	2f00      	cmp	r7, #0
 802428c:	d054      	beq.n	8024338 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802428e:	3301      	adds	r3, #1
 8024290:	449e      	add	lr, r3
 8024292:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024296:	5cd0      	ldrb	r0, [r2, r3]
 8024298:	f01e 0f01 	tst.w	lr, #1
 802429c:	bf0c      	ite	eq
 802429e:	f000 000f 	andeq.w	r0, r0, #15
 80242a2:	1100      	asrne	r0, r0, #4
 80242a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80242a8:	b2c3      	uxtb	r3, r0
 80242aa:	b2ba      	uxth	r2, r7
 80242ac:	fa1f fc8c 	uxth.w	ip, ip
 80242b0:	fb02 f00c 	mul.w	r0, r2, ip
 80242b4:	0112      	lsls	r2, r2, #4
 80242b6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80242ba:	1a12      	subs	r2, r2, r0
 80242bc:	b292      	uxth	r2, r2
 80242be:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80242c2:	4362      	muls	r2, r4
 80242c4:	fa1f fc8c 	uxth.w	ip, ip
 80242c8:	eba7 070c 	sub.w	r7, r7, ip
 80242cc:	b2bf      	uxth	r7, r7
 80242ce:	fb06 2207 	mla	r2, r6, r7, r2
 80242d2:	fb0c 2505 	mla	r5, ip, r5, r2
 80242d6:	fb00 5303 	mla	r3, r0, r3, r5
 80242da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80242de:	b1b3      	cbz	r3, 802430e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80242e0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80242e4:	435a      	muls	r2, r3
 80242e6:	1c53      	adds	r3, r2, #1
 80242e8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80242ec:	4a2d      	ldr	r2, [pc, #180]	; (80243a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80242ee:	121b      	asrs	r3, r3, #8
 80242f0:	6812      	ldr	r2, [r2, #0]
 80242f2:	2bff      	cmp	r3, #255	; 0xff
 80242f4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80242f8:	d120      	bne.n	802433c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80242fa:	4b2b      	ldr	r3, [pc, #172]	; (80243a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80242fc:	0950      	lsrs	r0, r2, #5
 80242fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024302:	4033      	ands	r3, r6
 8024304:	4318      	orrs	r0, r3
 8024306:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802430a:	4302      	orrs	r2, r0
 802430c:	800a      	strh	r2, [r1, #0]
 802430e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024312:	2600      	movs	r6, #0
 8024314:	e788      	b.n	8024228 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8024316:	2400      	movs	r4, #0
 8024318:	4626      	mov	r6, r4
 802431a:	e799      	b.n	8024250 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802431c:	2400      	movs	r4, #0
 802431e:	e797      	b.n	8024250 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024320:	463c      	mov	r4, r7
 8024322:	e795      	b.n	8024250 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024324:	2500      	movs	r5, #0
 8024326:	e7ac      	b.n	8024282 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8024328:	2300      	movs	r3, #0
 802432a:	461d      	mov	r5, r3
 802432c:	e7bd      	b.n	80242aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802432e:	4663      	mov	r3, ip
 8024330:	4665      	mov	r5, ip
 8024332:	e7ba      	b.n	80242aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024334:	2300      	movs	r3, #0
 8024336:	e7b8      	b.n	80242aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024338:	463b      	mov	r3, r7
 802433a:	e7b6      	b.n	80242aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802433c:	b29f      	uxth	r7, r3
 802433e:	43db      	mvns	r3, r3
 8024340:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024344:	880d      	ldrh	r5, [r1, #0]
 8024346:	fb10 f007 	smulbb	r0, r0, r7
 802434a:	b2f6      	uxtb	r6, r6
 802434c:	b2d2      	uxtb	r2, r2
 802434e:	122c      	asrs	r4, r5, #8
 8024350:	fb12 f207 	smulbb	r2, r2, r7
 8024354:	fb16 f607 	smulbb	r6, r6, r7
 8024358:	b2db      	uxtb	r3, r3
 802435a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802435e:	fb04 0403 	mla	r4, r4, r3, r0
 8024362:	10e8      	asrs	r0, r5, #3
 8024364:	00ed      	lsls	r5, r5, #3
 8024366:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802436a:	b2ed      	uxtb	r5, r5
 802436c:	fb00 6603 	mla	r6, r0, r3, r6
 8024370:	fb05 2303 	mla	r3, r5, r3, r2
 8024374:	b2a4      	uxth	r4, r4
 8024376:	b29a      	uxth	r2, r3
 8024378:	1c63      	adds	r3, r4, #1
 802437a:	b2b0      	uxth	r0, r6
 802437c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024380:	1c53      	adds	r3, r2, #1
 8024382:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024386:	1c42      	adds	r2, r0, #1
 8024388:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802438c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024390:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024394:	0940      	lsrs	r0, r0, #5
 8024396:	4323      	orrs	r3, r4
 8024398:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802439c:	4303      	orrs	r3, r0
 802439e:	800b      	strh	r3, [r1, #0]
 80243a0:	e7b5      	b.n	802430e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80243a2:	bf00      	nop
 80243a4:	2004f640 	.word	0x2004f640
 80243a8:	00fff800 	.word	0x00fff800

080243ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243b0:	b097      	sub	sp, #92	; 0x5c
 80243b2:	9214      	str	r2, [sp, #80]	; 0x50
 80243b4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80243b6:	9015      	str	r0, [sp, #84]	; 0x54
 80243b8:	9309      	str	r3, [sp, #36]	; 0x24
 80243ba:	6850      	ldr	r0, [r2, #4]
 80243bc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80243c0:	910d      	str	r1, [sp, #52]	; 0x34
 80243c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80243c4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80243c8:	fb00 1303 	mla	r3, r0, r3, r1
 80243cc:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80243d0:	6812      	ldr	r2, [r2, #0]
 80243d2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80243d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243d8:	689b      	ldr	r3, [r3, #8]
 80243da:	3301      	adds	r3, #1
 80243dc:	f023 0301 	bic.w	r3, r3, #1
 80243e0:	930a      	str	r3, [sp, #40]	; 0x28
 80243e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243e4:	681f      	ldr	r7, [r3, #0]
 80243e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80243e8:	2b00      	cmp	r3, #0
 80243ea:	dc03      	bgt.n	80243f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80243ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80243ee:	2b00      	cmp	r3, #0
 80243f0:	f340 8287 	ble.w	8024902 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80243f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243fe:	1e48      	subs	r0, r1, #1
 8024400:	f102 3cff 	add.w	ip, r2, #4294967295
 8024404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024406:	2b00      	cmp	r3, #0
 8024408:	f340 80c3 	ble.w	8024592 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802440c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024410:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024414:	d406      	bmi.n	8024424 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024416:	4586      	cmp	lr, r0
 8024418:	da04      	bge.n	8024424 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802441a:	2b00      	cmp	r3, #0
 802441c:	db02      	blt.n	8024424 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802441e:	4563      	cmp	r3, ip
 8024420:	f2c0 80b8 	blt.w	8024594 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024424:	f11e 0e01 	adds.w	lr, lr, #1
 8024428:	f100 80a9 	bmi.w	802457e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802442c:	4571      	cmp	r1, lr
 802442e:	f2c0 80a6 	blt.w	802457e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024432:	3301      	adds	r3, #1
 8024434:	f100 80a3 	bmi.w	802457e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024438:	429a      	cmp	r2, r3
 802443a:	f2c0 80a0 	blt.w	802457e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802443e:	46c8      	mov	r8, r9
 8024440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024442:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8024446:	930e      	str	r3, [sp, #56]	; 0x38
 8024448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802444a:	2b00      	cmp	r3, #0
 802444c:	f340 80c2 	ble.w	80245d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024450:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024452:	1430      	asrs	r0, r6, #16
 8024454:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024458:	1423      	asrs	r3, r4, #16
 802445a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802445e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024462:	f100 814d 	bmi.w	8024700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8024466:	f10c 3bff 	add.w	fp, ip, #4294967295
 802446a:	455b      	cmp	r3, fp
 802446c:	f280 8148 	bge.w	8024700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8024470:	2800      	cmp	r0, #0
 8024472:	f2c0 8145 	blt.w	8024700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8024476:	f10e 3bff 	add.w	fp, lr, #4294967295
 802447a:	4558      	cmp	r0, fp
 802447c:	f280 8140 	bge.w	8024700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8024480:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024482:	fb00 3305 	mla	r3, r0, r5, r3
 8024486:	0858      	lsrs	r0, r3, #1
 8024488:	f817 c000 	ldrb.w	ip, [r7, r0]
 802448c:	07dd      	lsls	r5, r3, #31
 802448e:	bf54      	ite	pl
 8024490:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024494:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024498:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802449c:	fa5f fc8c 	uxtb.w	ip, ip
 80244a0:	2a00      	cmp	r2, #0
 80244a2:	f000 80db 	beq.w	802465c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80244a6:	1c58      	adds	r0, r3, #1
 80244a8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80244ac:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80244b0:	07c0      	lsls	r0, r0, #31
 80244b2:	bf54      	ite	pl
 80244b4:	f00e 0e0f 	andpl.w	lr, lr, #15
 80244b8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80244bc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80244c0:	fa5f f08e 	uxtb.w	r0, lr
 80244c4:	9010      	str	r0, [sp, #64]	; 0x40
 80244c6:	b1c9      	cbz	r1, 80244fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80244c8:	4453      	add	r3, sl
 80244ca:	0858      	lsrs	r0, r3, #1
 80244cc:	5c38      	ldrb	r0, [r7, r0]
 80244ce:	07dd      	lsls	r5, r3, #31
 80244d0:	bf54      	ite	pl
 80244d2:	f000 000f 	andpl.w	r0, r0, #15
 80244d6:	1100      	asrmi	r0, r0, #4
 80244d8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80244dc:	3301      	adds	r3, #1
 80244de:	b2c0      	uxtb	r0, r0
 80244e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80244e2:	0858      	lsrs	r0, r3, #1
 80244e4:	f817 e000 	ldrb.w	lr, [r7, r0]
 80244e8:	07dd      	lsls	r5, r3, #31
 80244ea:	bf54      	ite	pl
 80244ec:	f00e 030f 	andpl.w	r3, lr, #15
 80244f0:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80244f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80244f8:	b2db      	uxtb	r3, r3
 80244fa:	9311      	str	r3, [sp, #68]	; 0x44
 80244fc:	b292      	uxth	r2, r2
 80244fe:	b289      	uxth	r1, r1
 8024500:	fb02 f301 	mul.w	r3, r2, r1
 8024504:	0112      	lsls	r2, r2, #4
 8024506:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802450a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802450c:	1ad2      	subs	r2, r2, r3
 802450e:	b292      	uxth	r2, r2
 8024510:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024514:	436a      	muls	r2, r5
 8024516:	b289      	uxth	r1, r1
 8024518:	1a40      	subs	r0, r0, r1
 802451a:	b280      	uxth	r0, r0
 802451c:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024522:	fb01 c102 	mla	r1, r1, r2, ip
 8024526:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024528:	fb03 1302 	mla	r3, r3, r2, r1
 802452c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024530:	b1db      	cbz	r3, 802456a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024532:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024534:	4353      	muls	r3, r2
 8024536:	1c5a      	adds	r2, r3, #1
 8024538:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802453c:	4ac6      	ldr	r2, [pc, #792]	; (8024858 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802453e:	121b      	asrs	r3, r3, #8
 8024540:	6812      	ldr	r2, [r2, #0]
 8024542:	2bff      	cmp	r3, #255	; 0xff
 8024544:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024548:	f040 8099 	bne.w	802467e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802454c:	0953      	lsrs	r3, r2, #5
 802454e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024552:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024556:	f02c 0c07 	bic.w	ip, ip, #7
 802455a:	ea43 0c0c 	orr.w	ip, r3, ip
 802455e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024562:	ea4c 0202 	orr.w	r2, ip, r2
 8024566:	f8a8 2000 	strh.w	r2, [r8]
 802456a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802456c:	f108 0802 	add.w	r8, r8, #2
 8024570:	441c      	add	r4, r3
 8024572:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024574:	441e      	add	r6, r3
 8024576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024578:	3b01      	subs	r3, #1
 802457a:	930e      	str	r3, [sp, #56]	; 0x38
 802457c:	e764      	b.n	8024448 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802457e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024580:	f109 0902 	add.w	r9, r9, #2
 8024584:	441c      	add	r4, r3
 8024586:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024588:	441e      	add	r6, r3
 802458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802458c:	3b01      	subs	r3, #1
 802458e:	9309      	str	r3, [sp, #36]	; 0x24
 8024590:	e738      	b.n	8024404 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024592:	d024      	beq.n	80245de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8024594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024596:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024598:	3b01      	subs	r3, #1
 802459a:	fb00 4003 	mla	r0, r0, r3, r4
 802459e:	1400      	asrs	r0, r0, #16
 80245a0:	f53f af4d 	bmi.w	802443e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80245a4:	3901      	subs	r1, #1
 80245a6:	4288      	cmp	r0, r1
 80245a8:	f6bf af49 	bge.w	802443e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80245ac:	9924      	ldr	r1, [sp, #144]	; 0x90
 80245ae:	fb01 6303 	mla	r3, r1, r3, r6
 80245b2:	141b      	asrs	r3, r3, #16
 80245b4:	f53f af43 	bmi.w	802443e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80245b8:	3a01      	subs	r2, #1
 80245ba:	4293      	cmp	r3, r2
 80245bc:	f6bf af3f 	bge.w	802443e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80245c0:	46c8      	mov	r8, r9
 80245c2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80245c6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80245ca:	930e      	str	r3, [sp, #56]	; 0x38
 80245cc:	f1bb 0f00 	cmp.w	fp, #0
 80245d0:	f300 80b7 	bgt.w	8024742 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80245d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245d6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80245da:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80245de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80245e0:	2b00      	cmp	r3, #0
 80245e2:	f340 818e 	ble.w	8024902 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80245e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80245ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80245ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80245f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80245f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80245fa:	eef0 6a62 	vmov.f32	s13, s5
 80245fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024602:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024606:	ee61 7a27 	vmul.f32	s15, s2, s15
 802460a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802460e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024612:	ee16 4a90 	vmov	r4, s13
 8024616:	eef0 6a43 	vmov.f32	s13, s6
 802461a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802461e:	ee12 2a90 	vmov	r2, s5
 8024622:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024626:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024628:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802462c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024630:	ee13 2a10 	vmov	r2, s6
 8024634:	9323      	str	r3, [sp, #140]	; 0x8c
 8024636:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024638:	ee16 6a90 	vmov	r6, s13
 802463c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024640:	9324      	str	r3, [sp, #144]	; 0x90
 8024642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024644:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024646:	3b01      	subs	r3, #1
 8024648:	930d      	str	r3, [sp, #52]	; 0x34
 802464a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802464c:	bf08      	it	eq
 802464e:	4613      	moveq	r3, r2
 8024650:	eeb0 3a67 	vmov.f32	s6, s15
 8024654:	9309      	str	r3, [sp, #36]	; 0x24
 8024656:	eef0 2a47 	vmov.f32	s5, s14
 802465a:	e6c4      	b.n	80243e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802465c:	2900      	cmp	r1, #0
 802465e:	f43f af4d 	beq.w	80244fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8024662:	eb0a 0003 	add.w	r0, sl, r3
 8024666:	0843      	lsrs	r3, r0, #1
 8024668:	5cfb      	ldrb	r3, [r7, r3]
 802466a:	07c0      	lsls	r0, r0, #31
 802466c:	bf54      	ite	pl
 802466e:	f003 030f 	andpl.w	r3, r3, #15
 8024672:	111b      	asrmi	r3, r3, #4
 8024674:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024678:	b2db      	uxtb	r3, r3
 802467a:	930b      	str	r3, [sp, #44]	; 0x2c
 802467c:	e73e      	b.n	80244fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802467e:	fa1f fb83 	uxth.w	fp, r3
 8024682:	43db      	mvns	r3, r3
 8024684:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8024688:	f8b8 e000 	ldrh.w	lr, [r8]
 802468c:	fb11 f10b 	smulbb	r1, r1, fp
 8024690:	fa5f fc8c 	uxtb.w	ip, ip
 8024694:	b2d2      	uxtb	r2, r2
 8024696:	ea4f 202e 	mov.w	r0, lr, asr #8
 802469a:	fb1c fc0b 	smulbb	ip, ip, fp
 802469e:	fb12 fb0b 	smulbb	fp, r2, fp
 80246a2:	b2db      	uxtb	r3, r3
 80246a4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80246a8:	fb00 1003 	mla	r0, r0, r3, r1
 80246ac:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80246b0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80246b4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80246b8:	fa5f fe8e 	uxtb.w	lr, lr
 80246bc:	fb01 cc03 	mla	ip, r1, r3, ip
 80246c0:	fb0e bb03 	mla	fp, lr, r3, fp
 80246c4:	b280      	uxth	r0, r0
 80246c6:	1c43      	adds	r3, r0, #1
 80246c8:	fa1f fc8c 	uxth.w	ip, ip
 80246cc:	fa1f fb8b 	uxth.w	fp, fp
 80246d0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80246d4:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80246d8:	f10c 0101 	add.w	r1, ip, #1
 80246dc:	f10b 0001 	add.w	r0, fp, #1
 80246e0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80246e4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80246e8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80246ec:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80246f0:	4318      	orrs	r0, r3
 80246f2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80246f6:	ea40 000c 	orr.w	r0, r0, ip
 80246fa:	f8a8 0000 	strh.w	r0, [r8]
 80246fe:	e734      	b.n	802456a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024700:	f113 0b01 	adds.w	fp, r3, #1
 8024704:	f53f af31 	bmi.w	802456a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024708:	45dc      	cmp	ip, fp
 802470a:	f6ff af2e 	blt.w	802456a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802470e:	f110 0b01 	adds.w	fp, r0, #1
 8024712:	f53f af2a 	bmi.w	802456a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024716:	45de      	cmp	lr, fp
 8024718:	f6ff af27 	blt.w	802456a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802471c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802471e:	9302      	str	r3, [sp, #8]
 8024720:	fa0f f38e 	sxth.w	r3, lr
 8024724:	9301      	str	r3, [sp, #4]
 8024726:	fa0f f38c 	sxth.w	r3, ip
 802472a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802472e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8024732:	9300      	str	r3, [sp, #0]
 8024734:	463a      	mov	r2, r7
 8024736:	4653      	mov	r3, sl
 8024738:	4641      	mov	r1, r8
 802473a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802473c:	f7ff fd4e 	bl	80241dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8024740:	e713      	b.n	802456a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024742:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024744:	1422      	asrs	r2, r4, #16
 8024746:	1433      	asrs	r3, r6, #16
 8024748:	fb05 2303 	mla	r3, r5, r3, r2
 802474c:	085a      	lsrs	r2, r3, #1
 802474e:	5cba      	ldrb	r2, [r7, r2]
 8024750:	07dd      	lsls	r5, r3, #31
 8024752:	bf54      	ite	pl
 8024754:	f002 020f 	andpl.w	r2, r2, #15
 8024758:	1112      	asrmi	r2, r2, #4
 802475a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802475e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024762:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024766:	b2d2      	uxtb	r2, r2
 8024768:	2900      	cmp	r1, #0
 802476a:	d077      	beq.n	802485c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802476c:	f103 0e01 	add.w	lr, r3, #1
 8024770:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024774:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024778:	f01e 0f01 	tst.w	lr, #1
 802477c:	bf0c      	ite	eq
 802477e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024782:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024786:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802478a:	fa5f f58c 	uxtb.w	r5, ip
 802478e:	9512      	str	r5, [sp, #72]	; 0x48
 8024790:	b300      	cbz	r0, 80247d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8024792:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024794:	442b      	add	r3, r5
 8024796:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802479a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802479e:	07dd      	lsls	r5, r3, #31
 80247a0:	bf54      	ite	pl
 80247a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80247a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80247aa:	3301      	adds	r3, #1
 80247ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80247b0:	fa5f f58c 	uxtb.w	r5, ip
 80247b4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80247b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80247bc:	950c      	str	r5, [sp, #48]	; 0x30
 80247be:	07dd      	lsls	r5, r3, #31
 80247c0:	bf54      	ite	pl
 80247c2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80247c6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80247ca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80247ce:	fa5f f38c 	uxtb.w	r3, ip
 80247d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80247d4:	b289      	uxth	r1, r1
 80247d6:	b280      	uxth	r0, r0
 80247d8:	fb01 f300 	mul.w	r3, r1, r0
 80247dc:	0109      	lsls	r1, r1, #4
 80247de:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80247e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80247e4:	1ac9      	subs	r1, r1, r3
 80247e6:	b289      	uxth	r1, r1
 80247e8:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80247ec:	4369      	muls	r1, r5
 80247ee:	b280      	uxth	r0, r0
 80247f0:	ebac 0c00 	sub.w	ip, ip, r0
 80247f4:	fa1f fc8c 	uxth.w	ip, ip
 80247f8:	fb02 120c 	mla	r2, r2, ip, r1
 80247fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80247fe:	fb00 2001 	mla	r0, r0, r1, r2
 8024802:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024804:	fb03 0302 	mla	r3, r3, r2, r0
 8024808:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802480c:	b1d3      	cbz	r3, 8024844 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802480e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024810:	4353      	muls	r3, r2
 8024812:	1c5a      	adds	r2, r3, #1
 8024814:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024818:	4a0f      	ldr	r2, [pc, #60]	; (8024858 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802481a:	121b      	asrs	r3, r3, #8
 802481c:	6812      	ldr	r2, [r2, #0]
 802481e:	2bff      	cmp	r3, #255	; 0xff
 8024820:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024824:	d12e      	bne.n	8024884 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024826:	0953      	lsrs	r3, r2, #5
 8024828:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802482c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024830:	f02c 0c07 	bic.w	ip, ip, #7
 8024834:	ea43 0c0c 	orr.w	ip, r3, ip
 8024838:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802483c:	ea4c 0202 	orr.w	r2, ip, r2
 8024840:	f8a8 2000 	strh.w	r2, [r8]
 8024844:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024846:	f108 0802 	add.w	r8, r8, #2
 802484a:	441c      	add	r4, r3
 802484c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802484e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024852:	441e      	add	r6, r3
 8024854:	e6ba      	b.n	80245cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024856:	bf00      	nop
 8024858:	2004f640 	.word	0x2004f640
 802485c:	2800      	cmp	r0, #0
 802485e:	d0b9      	beq.n	80247d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8024860:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024862:	442b      	add	r3, r5
 8024864:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024868:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802486c:	07db      	lsls	r3, r3, #31
 802486e:	bf54      	ite	pl
 8024870:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024874:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024878:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802487c:	fa5f f38c 	uxtb.w	r3, ip
 8024880:	930c      	str	r3, [sp, #48]	; 0x30
 8024882:	e7a7      	b.n	80247d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8024884:	fa1f fa83 	uxth.w	sl, r3
 8024888:	43db      	mvns	r3, r3
 802488a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802488e:	f8b8 e000 	ldrh.w	lr, [r8]
 8024892:	fb11 f10a 	smulbb	r1, r1, sl
 8024896:	b2d2      	uxtb	r2, r2
 8024898:	ea4f 202e 	mov.w	r0, lr, asr #8
 802489c:	fb12 f20a 	smulbb	r2, r2, sl
 80248a0:	b2db      	uxtb	r3, r3
 80248a2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80248a6:	fb00 1003 	mla	r0, r0, r3, r1
 80248aa:	fa5f fc8c 	uxtb.w	ip, ip
 80248ae:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80248b2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80248b6:	fb1c fc0a 	smulbb	ip, ip, sl
 80248ba:	fa5f fe8e 	uxtb.w	lr, lr
 80248be:	fb0e 2203 	mla	r2, lr, r3, r2
 80248c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80248c6:	fb01 cc03 	mla	ip, r1, r3, ip
 80248ca:	b280      	uxth	r0, r0
 80248cc:	b292      	uxth	r2, r2
 80248ce:	1c43      	adds	r3, r0, #1
 80248d0:	1c51      	adds	r1, r2, #1
 80248d2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80248d6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80248da:	fa1f fc8c 	uxth.w	ip, ip
 80248de:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80248e2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80248e6:	4308      	orrs	r0, r1
 80248e8:	f10c 0101 	add.w	r1, ip, #1
 80248ec:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80248f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80248f4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80248f8:	ea40 000c 	orr.w	r0, r0, ip
 80248fc:	f8a8 0000 	strh.w	r0, [r8]
 8024900:	e7a0      	b.n	8024844 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8024902:	b017      	add	sp, #92	; 0x5c
 8024904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024908 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8024908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802490c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024910:	2d00      	cmp	r5, #0
 8024912:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024916:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802491a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802491e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024922:	fb05 0e03 	mla	lr, r5, r3, r0
 8024926:	f2c0 80b0 	blt.w	8024a8a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802492a:	45a9      	cmp	r9, r5
 802492c:	f340 80ad 	ble.w	8024a8a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8024930:	2800      	cmp	r0, #0
 8024932:	f2c0 80a8 	blt.w	8024a86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024936:	4580      	cmp	r8, r0
 8024938:	f340 80a5 	ble.w	8024a86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802493c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024940:	5d16      	ldrb	r6, [r2, r4]
 8024942:	f01e 0f01 	tst.w	lr, #1
 8024946:	bf0c      	ite	eq
 8024948:	f006 060f 	andeq.w	r6, r6, #15
 802494c:	1136      	asrne	r6, r6, #4
 802494e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024952:	b2f6      	uxtb	r6, r6
 8024954:	1c44      	adds	r4, r0, #1
 8024956:	f100 809b 	bmi.w	8024a90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802495a:	45a0      	cmp	r8, r4
 802495c:	f340 8098 	ble.w	8024a90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8024960:	2f00      	cmp	r7, #0
 8024962:	f000 8097 	beq.w	8024a94 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8024966:	f10e 0a01 	add.w	sl, lr, #1
 802496a:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802496e:	5d14      	ldrb	r4, [r2, r4]
 8024970:	f01a 0f01 	tst.w	sl, #1
 8024974:	bf0c      	ite	eq
 8024976:	f004 040f 	andeq.w	r4, r4, #15
 802497a:	1124      	asrne	r4, r4, #4
 802497c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024980:	b2e4      	uxtb	r4, r4
 8024982:	3501      	adds	r5, #1
 8024984:	f100 808a 	bmi.w	8024a9c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8024988:	45a9      	cmp	r9, r5
 802498a:	f340 8087 	ble.w	8024a9c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802498e:	f1bc 0f00 	cmp.w	ip, #0
 8024992:	f000 8086 	beq.w	8024aa2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8024996:	2800      	cmp	r0, #0
 8024998:	db7e      	blt.n	8024a98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802499a:	4580      	cmp	r8, r0
 802499c:	dd7c      	ble.n	8024a98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802499e:	eb03 090e 	add.w	r9, r3, lr
 80249a2:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80249a6:	5d55      	ldrb	r5, [r2, r5]
 80249a8:	f019 0f01 	tst.w	r9, #1
 80249ac:	bf0c      	ite	eq
 80249ae:	f005 050f 	andeq.w	r5, r5, #15
 80249b2:	112d      	asrne	r5, r5, #4
 80249b4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80249b8:	b2ed      	uxtb	r5, r5
 80249ba:	3001      	adds	r0, #1
 80249bc:	d474      	bmi.n	8024aa8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80249be:	4580      	cmp	r8, r0
 80249c0:	dd72      	ble.n	8024aa8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80249c2:	2f00      	cmp	r7, #0
 80249c4:	d072      	beq.n	8024aac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80249c6:	3301      	adds	r3, #1
 80249c8:	449e      	add	lr, r3
 80249ca:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80249ce:	5cd0      	ldrb	r0, [r2, r3]
 80249d0:	f01e 0f01 	tst.w	lr, #1
 80249d4:	bf0c      	ite	eq
 80249d6:	f000 000f 	andeq.w	r0, r0, #15
 80249da:	1100      	asrne	r0, r0, #4
 80249dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80249e0:	b2c3      	uxtb	r3, r0
 80249e2:	b2ba      	uxth	r2, r7
 80249e4:	fa1f fc8c 	uxth.w	ip, ip
 80249e8:	fb02 f00c 	mul.w	r0, r2, ip
 80249ec:	0112      	lsls	r2, r2, #4
 80249ee:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80249f2:	1a12      	subs	r2, r2, r0
 80249f4:	b292      	uxth	r2, r2
 80249f6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80249fa:	4362      	muls	r2, r4
 80249fc:	fa1f fc8c 	uxth.w	ip, ip
 8024a00:	eba7 070c 	sub.w	r7, r7, ip
 8024a04:	b2bf      	uxth	r7, r7
 8024a06:	fb06 2207 	mla	r2, r6, r7, r2
 8024a0a:	fb0c 2505 	mla	r5, ip, r5, r2
 8024a0e:	fb00 5303 	mla	r3, r0, r3, r5
 8024a12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024a16:	b3a3      	cbz	r3, 8024a82 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8024a18:	4a25      	ldr	r2, [pc, #148]	; (8024ab0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8024a1a:	880e      	ldrh	r6, [r1, #0]
 8024a1c:	6815      	ldr	r5, [r2, #0]
 8024a1e:	b29a      	uxth	r2, r3
 8024a20:	43db      	mvns	r3, r3
 8024a22:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8024a26:	fb10 f002 	smulbb	r0, r0, r2
 8024a2a:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8024a2e:	b2ed      	uxtb	r5, r5
 8024a30:	1234      	asrs	r4, r6, #8
 8024a32:	fb17 f702 	smulbb	r7, r7, r2
 8024a36:	fb15 f202 	smulbb	r2, r5, r2
 8024a3a:	b2db      	uxtb	r3, r3
 8024a3c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024a40:	fb04 0403 	mla	r4, r4, r3, r0
 8024a44:	10f0      	asrs	r0, r6, #3
 8024a46:	00f6      	lsls	r6, r6, #3
 8024a48:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024a4c:	b2f6      	uxtb	r6, r6
 8024a4e:	fb00 7003 	mla	r0, r0, r3, r7
 8024a52:	fb06 2303 	mla	r3, r6, r3, r2
 8024a56:	b2a4      	uxth	r4, r4
 8024a58:	b29a      	uxth	r2, r3
 8024a5a:	1c63      	adds	r3, r4, #1
 8024a5c:	b280      	uxth	r0, r0
 8024a5e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024a62:	1c53      	adds	r3, r2, #1
 8024a64:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024a68:	1c42      	adds	r2, r0, #1
 8024a6a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024a6e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024a72:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024a76:	0940      	lsrs	r0, r0, #5
 8024a78:	4323      	orrs	r3, r4
 8024a7a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a7e:	4303      	orrs	r3, r0
 8024a80:	800b      	strh	r3, [r1, #0]
 8024a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a86:	2600      	movs	r6, #0
 8024a88:	e764      	b.n	8024954 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8024a8a:	2400      	movs	r4, #0
 8024a8c:	4626      	mov	r6, r4
 8024a8e:	e778      	b.n	8024982 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024a90:	2400      	movs	r4, #0
 8024a92:	e776      	b.n	8024982 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024a94:	463c      	mov	r4, r7
 8024a96:	e774      	b.n	8024982 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024a98:	2500      	movs	r5, #0
 8024a9a:	e78e      	b.n	80249ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8024a9c:	2300      	movs	r3, #0
 8024a9e:	461d      	mov	r5, r3
 8024aa0:	e79f      	b.n	80249e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024aa2:	4663      	mov	r3, ip
 8024aa4:	4665      	mov	r5, ip
 8024aa6:	e79c      	b.n	80249e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024aa8:	2300      	movs	r3, #0
 8024aaa:	e79a      	b.n	80249e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024aac:	463b      	mov	r3, r7
 8024aae:	e798      	b.n	80249e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024ab0:	2004f640 	.word	0x2004f640

08024ab4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ab8:	b093      	sub	sp, #76	; 0x4c
 8024aba:	920c      	str	r2, [sp, #48]	; 0x30
 8024abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024abe:	9011      	str	r0, [sp, #68]	; 0x44
 8024ac0:	6850      	ldr	r0, [r2, #4]
 8024ac2:	9107      	str	r1, [sp, #28]
 8024ac4:	461d      	mov	r5, r3
 8024ac6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8024aca:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8024ace:	fb00 1303 	mla	r3, r0, r3, r1
 8024ad2:	6812      	ldr	r2, [r2, #0]
 8024ad4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024ad8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024ada:	689b      	ldr	r3, [r3, #8]
 8024adc:	3301      	adds	r3, #1
 8024ade:	f023 0301 	bic.w	r3, r3, #1
 8024ae2:	9306      	str	r3, [sp, #24]
 8024ae4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024ae6:	681f      	ldr	r7, [r3, #0]
 8024ae8:	9b07      	ldr	r3, [sp, #28]
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	dc03      	bgt.n	8024af6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024af0:	2b00      	cmp	r3, #0
 8024af2:	f340 8265 	ble.w	8024fc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8024af6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024af8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024afc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024b00:	1e48      	subs	r0, r1, #1
 8024b02:	f102 3cff 	add.w	ip, r2, #4294967295
 8024b06:	2d00      	cmp	r5, #0
 8024b08:	f340 80b7 	ble.w	8024c7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024b0c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024b10:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024b14:	d406      	bmi.n	8024b24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024b16:	4586      	cmp	lr, r0
 8024b18:	da04      	bge.n	8024b24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024b1a:	2b00      	cmp	r3, #0
 8024b1c:	db02      	blt.n	8024b24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024b1e:	4563      	cmp	r3, ip
 8024b20:	f2c0 80ac 	blt.w	8024c7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8024b24:	f11e 0e01 	adds.w	lr, lr, #1
 8024b28:	f100 809f 	bmi.w	8024c6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024b2c:	4571      	cmp	r1, lr
 8024b2e:	f2c0 809c 	blt.w	8024c6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024b32:	3301      	adds	r3, #1
 8024b34:	f100 8099 	bmi.w	8024c6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024b38:	429a      	cmp	r2, r3
 8024b3a:	f2c0 8096 	blt.w	8024c6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024b3e:	46c8      	mov	r8, r9
 8024b40:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8024b44:	9509      	str	r5, [sp, #36]	; 0x24
 8024b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b48:	2b00      	cmp	r3, #0
 8024b4a:	f340 80b5 	ble.w	8024cb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024b4e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8024b52:	9308      	str	r3, [sp, #32]
 8024b54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b56:	1430      	asrs	r0, r6, #16
 8024b58:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024b5c:	1423      	asrs	r3, r4, #16
 8024b5e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024b62:	f100 813e 	bmi.w	8024de2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024b66:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024b6a:	455b      	cmp	r3, fp
 8024b6c:	f280 8139 	bge.w	8024de2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024b70:	2800      	cmp	r0, #0
 8024b72:	f2c0 8136 	blt.w	8024de2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024b76:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024b7a:	4558      	cmp	r0, fp
 8024b7c:	f280 8131 	bge.w	8024de2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024b80:	9a06      	ldr	r2, [sp, #24]
 8024b82:	fb00 3302 	mla	r3, r0, r2, r3
 8024b86:	0858      	lsrs	r0, r3, #1
 8024b88:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024b8c:	07da      	lsls	r2, r3, #31
 8024b8e:	bf54      	ite	pl
 8024b90:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024b94:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024b98:	9a08      	ldr	r2, [sp, #32]
 8024b9a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024b9e:	fa5f fc8c 	uxtb.w	ip, ip
 8024ba2:	2a00      	cmp	r2, #0
 8024ba4:	f000 80cb 	beq.w	8024d3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8024ba8:	1c58      	adds	r0, r3, #1
 8024baa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024bae:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024bb2:	07c0      	lsls	r0, r0, #31
 8024bb4:	bf54      	ite	pl
 8024bb6:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024bba:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024bbe:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024bc2:	fa5f fe8e 	uxtb.w	lr, lr
 8024bc6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8024bca:	b1b9      	cbz	r1, 8024bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024bcc:	4453      	add	r3, sl
 8024bce:	0858      	lsrs	r0, r3, #1
 8024bd0:	5c38      	ldrb	r0, [r7, r0]
 8024bd2:	07da      	lsls	r2, r3, #31
 8024bd4:	bf54      	ite	pl
 8024bd6:	f000 000f 	andpl.w	r0, r0, #15
 8024bda:	1100      	asrmi	r0, r0, #4
 8024bdc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024be0:	b2c0      	uxtb	r0, r0
 8024be2:	900a      	str	r0, [sp, #40]	; 0x28
 8024be4:	1c58      	adds	r0, r3, #1
 8024be6:	0843      	lsrs	r3, r0, #1
 8024be8:	5cfb      	ldrb	r3, [r7, r3]
 8024bea:	07c2      	lsls	r2, r0, #31
 8024bec:	bf54      	ite	pl
 8024bee:	f003 030f 	andpl.w	r3, r3, #15
 8024bf2:	111b      	asrmi	r3, r3, #4
 8024bf4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024bf8:	b2db      	uxtb	r3, r3
 8024bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8024bfc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024c00:	b289      	uxth	r1, r1
 8024c02:	fb02 f301 	mul.w	r3, r2, r1
 8024c06:	0112      	lsls	r2, r2, #4
 8024c08:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024c0c:	b289      	uxth	r1, r1
 8024c0e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024c12:	1a40      	subs	r0, r0, r1
 8024c14:	fa1f fe80 	uxth.w	lr, r0
 8024c18:	1ad2      	subs	r2, r2, r3
 8024c1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024c1c:	b292      	uxth	r2, r2
 8024c1e:	4342      	muls	r2, r0
 8024c20:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024c26:	fb01 c102 	mla	r1, r1, r2, ip
 8024c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024c2c:	fb03 1302 	mla	r3, r3, r2, r1
 8024c30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c34:	2bff      	cmp	r3, #255	; 0xff
 8024c36:	f040 8093 	bne.w	8024d60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8024c3a:	4bbe      	ldr	r3, [pc, #760]	; (8024f34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8024c3c:	681a      	ldr	r2, [r3, #0]
 8024c3e:	4bbe      	ldr	r3, [pc, #760]	; (8024f38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024c40:	0951      	lsrs	r1, r2, #5
 8024c42:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024c46:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024c4a:	430b      	orrs	r3, r1
 8024c4c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024c50:	4313      	orrs	r3, r2
 8024c52:	f8a8 3000 	strh.w	r3, [r8]
 8024c56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024c58:	f108 0802 	add.w	r8, r8, #2
 8024c5c:	441c      	add	r4, r3
 8024c5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c60:	441e      	add	r6, r3
 8024c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c64:	3b01      	subs	r3, #1
 8024c66:	9309      	str	r3, [sp, #36]	; 0x24
 8024c68:	e76d      	b.n	8024b46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024c6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024c6c:	3d01      	subs	r5, #1
 8024c6e:	441c      	add	r4, r3
 8024c70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c72:	f109 0902 	add.w	r9, r9, #2
 8024c76:	441e      	add	r6, r3
 8024c78:	e745      	b.n	8024b06 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024c7a:	d021      	beq.n	8024cc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024c7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024c7e:	1e6b      	subs	r3, r5, #1
 8024c80:	fb00 4003 	mla	r0, r0, r3, r4
 8024c84:	1400      	asrs	r0, r0, #16
 8024c86:	f53f af5a 	bmi.w	8024b3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024c8a:	3901      	subs	r1, #1
 8024c8c:	4288      	cmp	r0, r1
 8024c8e:	f6bf af56 	bge.w	8024b3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024c92:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024c94:	fb01 6303 	mla	r3, r1, r3, r6
 8024c98:	141b      	asrs	r3, r3, #16
 8024c9a:	f53f af50 	bmi.w	8024b3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024c9e:	3a01      	subs	r2, #1
 8024ca0:	4293      	cmp	r3, r2
 8024ca2:	f6bf af4c 	bge.w	8024b3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024ca6:	46a8      	mov	r8, r5
 8024ca8:	46ce      	mov	lr, r9
 8024caa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024cae:	9308      	str	r3, [sp, #32]
 8024cb0:	f1b8 0f00 	cmp.w	r8, #0
 8024cb4:	f300 80b5 	bgt.w	8024e22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024cb8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024cbc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024cc0:	9b07      	ldr	r3, [sp, #28]
 8024cc2:	2b00      	cmp	r3, #0
 8024cc4:	f340 817c 	ble.w	8024fc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8024cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024ccc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024cd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024cd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024cd8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024cdc:	eef0 6a62 	vmov.f32	s13, s5
 8024ce0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024ce4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024ce8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024cec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cf0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024cf4:	ee16 4a90 	vmov	r4, s13
 8024cf8:	eef0 6a43 	vmov.f32	s13, s6
 8024cfc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024d00:	ee12 2a90 	vmov	r2, s5
 8024d04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024d08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024d0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d12:	ee13 2a10 	vmov	r2, s6
 8024d16:	931f      	str	r3, [sp, #124]	; 0x7c
 8024d18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024d1a:	ee16 6a90 	vmov	r6, s13
 8024d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d22:	9320      	str	r3, [sp, #128]	; 0x80
 8024d24:	9b07      	ldr	r3, [sp, #28]
 8024d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024d28:	3b01      	subs	r3, #1
 8024d2a:	9307      	str	r3, [sp, #28]
 8024d2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024d2e:	bf0c      	ite	eq
 8024d30:	4615      	moveq	r5, r2
 8024d32:	461d      	movne	r5, r3
 8024d34:	eeb0 3a67 	vmov.f32	s6, s15
 8024d38:	eef0 2a47 	vmov.f32	s5, s14
 8024d3c:	e6d4      	b.n	8024ae8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024d3e:	2900      	cmp	r1, #0
 8024d40:	f43f af5c 	beq.w	8024bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024d44:	eb0a 0003 	add.w	r0, sl, r3
 8024d48:	0843      	lsrs	r3, r0, #1
 8024d4a:	5cfb      	ldrb	r3, [r7, r3]
 8024d4c:	07c0      	lsls	r0, r0, #31
 8024d4e:	bf54      	ite	pl
 8024d50:	f003 030f 	andpl.w	r3, r3, #15
 8024d54:	111b      	asrmi	r3, r3, #4
 8024d56:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024d5a:	b2db      	uxtb	r3, r3
 8024d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8024d5e:	e74d      	b.n	8024bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024d60:	2b00      	cmp	r3, #0
 8024d62:	f43f af78 	beq.w	8024c56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024d66:	fa1f fe83 	uxth.w	lr, r3
 8024d6a:	43db      	mvns	r3, r3
 8024d6c:	4a71      	ldr	r2, [pc, #452]	; (8024f34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8024d6e:	f8b8 c000 	ldrh.w	ip, [r8]
 8024d72:	6810      	ldr	r0, [r2, #0]
 8024d74:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024d78:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024d7c:	fb12 f20e 	smulbb	r2, r2, lr
 8024d80:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024d84:	b2c0      	uxtb	r0, r0
 8024d86:	fb1b fb0e 	smulbb	fp, fp, lr
 8024d8a:	fb10 fe0e 	smulbb	lr, r0, lr
 8024d8e:	b2db      	uxtb	r3, r3
 8024d90:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024d94:	fb01 2103 	mla	r1, r1, r3, r2
 8024d98:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024d9c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024da0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024da4:	fa5f fc8c 	uxtb.w	ip, ip
 8024da8:	fb02 b203 	mla	r2, r2, r3, fp
 8024dac:	fb0c e303 	mla	r3, ip, r3, lr
 8024db0:	b289      	uxth	r1, r1
 8024db2:	1c48      	adds	r0, r1, #1
 8024db4:	b292      	uxth	r2, r2
 8024db6:	b29b      	uxth	r3, r3
 8024db8:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024dbc:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8024dc0:	f102 0b01 	add.w	fp, r2, #1
 8024dc4:	1c59      	adds	r1, r3, #1
 8024dc6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024dca:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024dce:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024dd2:	0952      	lsrs	r2, r2, #5
 8024dd4:	4301      	orrs	r1, r0
 8024dd6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024dda:	4311      	orrs	r1, r2
 8024ddc:	f8a8 1000 	strh.w	r1, [r8]
 8024de0:	e739      	b.n	8024c56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024de2:	f113 0b01 	adds.w	fp, r3, #1
 8024de6:	f53f af36 	bmi.w	8024c56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024dea:	45dc      	cmp	ip, fp
 8024dec:	f6ff af33 	blt.w	8024c56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024df0:	f110 0b01 	adds.w	fp, r0, #1
 8024df4:	f53f af2f 	bmi.w	8024c56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024df8:	45de      	cmp	lr, fp
 8024dfa:	f6ff af2c 	blt.w	8024c56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024dfe:	9a08      	ldr	r2, [sp, #32]
 8024e00:	9302      	str	r3, [sp, #8]
 8024e02:	fa0f f38e 	sxth.w	r3, lr
 8024e06:	9301      	str	r3, [sp, #4]
 8024e08:	fa0f f38c 	sxth.w	r3, ip
 8024e0c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024e10:	9105      	str	r1, [sp, #20]
 8024e12:	9300      	str	r3, [sp, #0]
 8024e14:	463a      	mov	r2, r7
 8024e16:	4653      	mov	r3, sl
 8024e18:	4641      	mov	r1, r8
 8024e1a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024e1c:	f7ff fd74 	bl	8024908 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8024e20:	e719      	b.n	8024c56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e22:	9906      	ldr	r1, [sp, #24]
 8024e24:	1422      	asrs	r2, r4, #16
 8024e26:	1433      	asrs	r3, r6, #16
 8024e28:	fb01 2303 	mla	r3, r1, r3, r2
 8024e2c:	085a      	lsrs	r2, r3, #1
 8024e2e:	5cba      	ldrb	r2, [r7, r2]
 8024e30:	07d9      	lsls	r1, r3, #31
 8024e32:	bf54      	ite	pl
 8024e34:	f002 020f 	andpl.w	r2, r2, #15
 8024e38:	1112      	asrmi	r2, r2, #4
 8024e3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024e3e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024e42:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024e46:	b2d2      	uxtb	r2, r2
 8024e48:	2800      	cmp	r0, #0
 8024e4a:	d062      	beq.n	8024f12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024e4c:	f103 0a01 	add.w	sl, r3, #1
 8024e50:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024e54:	5c79      	ldrb	r1, [r7, r1]
 8024e56:	f01a 0f01 	tst.w	sl, #1
 8024e5a:	bf0c      	ite	eq
 8024e5c:	f001 010f 	andeq.w	r1, r1, #15
 8024e60:	1109      	asrne	r1, r1, #4
 8024e62:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024e66:	b2c9      	uxtb	r1, r1
 8024e68:	910f      	str	r1, [sp, #60]	; 0x3c
 8024e6a:	f1bc 0f00 	cmp.w	ip, #0
 8024e6e:	d019      	beq.n	8024ea4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024e70:	9908      	ldr	r1, [sp, #32]
 8024e72:	440b      	add	r3, r1
 8024e74:	0859      	lsrs	r1, r3, #1
 8024e76:	5c79      	ldrb	r1, [r7, r1]
 8024e78:	f013 0f01 	tst.w	r3, #1
 8024e7c:	bf0c      	ite	eq
 8024e7e:	f001 010f 	andeq.w	r1, r1, #15
 8024e82:	1109      	asrne	r1, r1, #4
 8024e84:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024e88:	b2c9      	uxtb	r1, r1
 8024e8a:	3301      	adds	r3, #1
 8024e8c:	910b      	str	r1, [sp, #44]	; 0x2c
 8024e8e:	0859      	lsrs	r1, r3, #1
 8024e90:	5c79      	ldrb	r1, [r7, r1]
 8024e92:	07db      	lsls	r3, r3, #31
 8024e94:	bf54      	ite	pl
 8024e96:	f001 010f 	andpl.w	r1, r1, #15
 8024e9a:	1109      	asrmi	r1, r1, #4
 8024e9c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024ea0:	b2c9      	uxtb	r1, r1
 8024ea2:	9110      	str	r1, [sp, #64]	; 0x40
 8024ea4:	b280      	uxth	r0, r0
 8024ea6:	fa1f fc8c 	uxth.w	ip, ip
 8024eaa:	fb00 f30c 	mul.w	r3, r0, ip
 8024eae:	0100      	lsls	r0, r0, #4
 8024eb0:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024eb4:	fa1f fc8c 	uxth.w	ip, ip
 8024eb8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024ebc:	eba1 010c 	sub.w	r1, r1, ip
 8024ec0:	fa1f fa81 	uxth.w	sl, r1
 8024ec4:	1ac0      	subs	r0, r0, r3
 8024ec6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024ec8:	b280      	uxth	r0, r0
 8024eca:	4348      	muls	r0, r1
 8024ecc:	fb02 020a 	mla	r2, r2, sl, r0
 8024ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024ed2:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024ed6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024ed8:	fb03 c302 	mla	r3, r3, r2, ip
 8024edc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024ee0:	2bff      	cmp	r3, #255	; 0xff
 8024ee2:	d12b      	bne.n	8024f3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024ee4:	4b13      	ldr	r3, [pc, #76]	; (8024f34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8024ee6:	681a      	ldr	r2, [r3, #0]
 8024ee8:	4b13      	ldr	r3, [pc, #76]	; (8024f38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024eea:	0951      	lsrs	r1, r2, #5
 8024eec:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024ef0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024ef4:	430b      	orrs	r3, r1
 8024ef6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024efa:	4313      	orrs	r3, r2
 8024efc:	f8ae 3000 	strh.w	r3, [lr]
 8024f00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024f02:	f10e 0e02 	add.w	lr, lr, #2
 8024f06:	441c      	add	r4, r3
 8024f08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024f0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8024f0e:	441e      	add	r6, r3
 8024f10:	e6ce      	b.n	8024cb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8024f12:	f1bc 0f00 	cmp.w	ip, #0
 8024f16:	d0c5      	beq.n	8024ea4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024f18:	9908      	ldr	r1, [sp, #32]
 8024f1a:	440b      	add	r3, r1
 8024f1c:	0859      	lsrs	r1, r3, #1
 8024f1e:	5c79      	ldrb	r1, [r7, r1]
 8024f20:	07db      	lsls	r3, r3, #31
 8024f22:	bf54      	ite	pl
 8024f24:	f001 010f 	andpl.w	r1, r1, #15
 8024f28:	1109      	asrmi	r1, r1, #4
 8024f2a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024f2e:	b2c9      	uxtb	r1, r1
 8024f30:	910b      	str	r1, [sp, #44]	; 0x2c
 8024f32:	e7b7      	b.n	8024ea4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024f34:	2004f640 	.word	0x2004f640
 8024f38:	fffff800 	.word	0xfffff800
 8024f3c:	2b00      	cmp	r3, #0
 8024f3e:	d0df      	beq.n	8024f00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024f40:	fa1f fa83 	uxth.w	sl, r3
 8024f44:	43db      	mvns	r3, r3
 8024f46:	4a20      	ldr	r2, [pc, #128]	; (8024fc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 8024f48:	f8be c000 	ldrh.w	ip, [lr]
 8024f4c:	6810      	ldr	r0, [r2, #0]
 8024f4e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024f52:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024f56:	fb12 f20a 	smulbb	r2, r2, sl
 8024f5a:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024f5e:	b2c0      	uxtb	r0, r0
 8024f60:	fb10 f00a 	smulbb	r0, r0, sl
 8024f64:	b2db      	uxtb	r3, r3
 8024f66:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024f6a:	fb01 2103 	mla	r1, r1, r3, r2
 8024f6e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024f72:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024f76:	fb1b fb0a 	smulbb	fp, fp, sl
 8024f7a:	fa5f fc8c 	uxtb.w	ip, ip
 8024f7e:	fb0c 0003 	mla	r0, ip, r3, r0
 8024f82:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024f86:	fb02 b203 	mla	r2, r2, r3, fp
 8024f8a:	b289      	uxth	r1, r1
 8024f8c:	b280      	uxth	r0, r0
 8024f8e:	1c4b      	adds	r3, r1, #1
 8024f90:	f100 0b01 	add.w	fp, r0, #1
 8024f94:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024f98:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8024f9c:	b292      	uxth	r2, r2
 8024f9e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8024fa2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8024fa6:	ea4b 0101 	orr.w	r1, fp, r1
 8024faa:	f102 0b01 	add.w	fp, r2, #1
 8024fae:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024fb2:	0952      	lsrs	r2, r2, #5
 8024fb4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024fb8:	4311      	orrs	r1, r2
 8024fba:	f8ae 1000 	strh.w	r1, [lr]
 8024fbe:	e79f      	b.n	8024f00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024fc0:	b013      	add	sp, #76	; 0x4c
 8024fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fc6:	bf00      	nop
 8024fc8:	2004f640 	.word	0x2004f640

08024fcc <CRC_Lock>:
 8024fcc:	b530      	push	{r4, r5, lr}
 8024fce:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024fd2:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024fd6:	4a1e      	ldr	r2, [pc, #120]	; (8025050 <CRC_Lock+0x84>)
 8024fd8:	6813      	ldr	r3, [r2, #0]
 8024fda:	f023 0301 	bic.w	r3, r3, #1
 8024fde:	6013      	str	r3, [r2, #0]
 8024fe0:	4b1c      	ldr	r3, [pc, #112]	; (8025054 <CRC_Lock+0x88>)
 8024fe2:	681a      	ldr	r2, [r3, #0]
 8024fe4:	4022      	ands	r2, r4
 8024fe6:	42aa      	cmp	r2, r5
 8024fe8:	d005      	beq.n	8024ff6 <CRC_Lock+0x2a>
 8024fea:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024fee:	681b      	ldr	r3, [r3, #0]
 8024ff0:	4023      	ands	r3, r4
 8024ff2:	4293      	cmp	r3, r2
 8024ff4:	d124      	bne.n	8025040 <CRC_Lock+0x74>
 8024ff6:	4b18      	ldr	r3, [pc, #96]	; (8025058 <CRC_Lock+0x8c>)
 8024ff8:	681b      	ldr	r3, [r3, #0]
 8024ffa:	bb0b      	cbnz	r3, 8025040 <CRC_Lock+0x74>
 8024ffc:	4b17      	ldr	r3, [pc, #92]	; (802505c <CRC_Lock+0x90>)
 8024ffe:	681a      	ldr	r2, [r3, #0]
 8025000:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025004:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8025008:	d00d      	beq.n	8025026 <CRC_Lock+0x5a>
 802500a:	f240 4483 	movw	r4, #1155	; 0x483
 802500e:	681a      	ldr	r2, [r3, #0]
 8025010:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025014:	42a2      	cmp	r2, r4
 8025016:	d006      	beq.n	8025026 <CRC_Lock+0x5a>
 8025018:	f240 4285 	movw	r2, #1157	; 0x485
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025022:	4293      	cmp	r3, r2
 8025024:	d10c      	bne.n	8025040 <CRC_Lock+0x74>
 8025026:	2201      	movs	r2, #1
 8025028:	4b0d      	ldr	r3, [pc, #52]	; (8025060 <CRC_Lock+0x94>)
 802502a:	601a      	str	r2, [r3, #0]
 802502c:	681a      	ldr	r2, [r3, #0]
 802502e:	2a00      	cmp	r2, #0
 8025030:	d1fc      	bne.n	802502c <CRC_Lock+0x60>
 8025032:	4b0c      	ldr	r3, [pc, #48]	; (8025064 <CRC_Lock+0x98>)
 8025034:	6018      	str	r0, [r3, #0]
 8025036:	6818      	ldr	r0, [r3, #0]
 8025038:	1a43      	subs	r3, r0, r1
 802503a:	4258      	negs	r0, r3
 802503c:	4158      	adcs	r0, r3
 802503e:	bd30      	pop	{r4, r5, pc}
 8025040:	2201      	movs	r2, #1
 8025042:	4b09      	ldr	r3, [pc, #36]	; (8025068 <CRC_Lock+0x9c>)
 8025044:	601a      	str	r2, [r3, #0]
 8025046:	681a      	ldr	r2, [r3, #0]
 8025048:	2a00      	cmp	r2, #0
 802504a:	d1fc      	bne.n	8025046 <CRC_Lock+0x7a>
 802504c:	4b07      	ldr	r3, [pc, #28]	; (802506c <CRC_Lock+0xa0>)
 802504e:	e7f1      	b.n	8025034 <CRC_Lock+0x68>
 8025050:	e0002000 	.word	0xe0002000
 8025054:	e000ed00 	.word	0xe000ed00
 8025058:	e0042000 	.word	0xe0042000
 802505c:	5c001000 	.word	0x5c001000
 8025060:	58024c08 	.word	0x58024c08
 8025064:	58024c00 	.word	0x58024c00
 8025068:	40023008 	.word	0x40023008
 802506c:	40023000 	.word	0x40023000

08025070 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8025070:	6101      	str	r1, [r0, #16]
 8025072:	4770      	bx	lr

08025074 <_ZN8touchgfx8Gestures4tickEv>:
 8025074:	7b83      	ldrb	r3, [r0, #14]
 8025076:	b14b      	cbz	r3, 802508c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025078:	8903      	ldrh	r3, [r0, #8]
 802507a:	3301      	adds	r3, #1
 802507c:	b29b      	uxth	r3, r3
 802507e:	2b07      	cmp	r3, #7
 8025080:	8103      	strh	r3, [r0, #8]
 8025082:	bf81      	itttt	hi
 8025084:	2300      	movhi	r3, #0
 8025086:	8143      	strhhi	r3, [r0, #10]
 8025088:	8183      	strhhi	r3, [r0, #12]
 802508a:	7383      	strbhi	r3, [r0, #14]
 802508c:	4770      	bx	lr
	...

08025090 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025090:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025094:	4698      	mov	r8, r3
 8025096:	4604      	mov	r4, r0
 8025098:	8883      	ldrh	r3, [r0, #4]
 802509a:	460e      	mov	r6, r1
 802509c:	88c1      	ldrh	r1, [r0, #6]
 802509e:	2000      	movs	r0, #0
 80250a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80250a4:	eba8 0303 	sub.w	r3, r8, r3
 80250a8:	b21b      	sxth	r3, r3
 80250aa:	4617      	mov	r7, r2
 80250ac:	4a17      	ldr	r2, [pc, #92]	; (802510c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80250ae:	2b00      	cmp	r3, #0
 80250b0:	bfb8      	it	lt
 80250b2:	425b      	neglt	r3, r3
 80250b4:	9200      	str	r2, [sp, #0]
 80250b6:	8aa2      	ldrh	r2, [r4, #20]
 80250b8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80250bc:	b21b      	sxth	r3, r3
 80250be:	4293      	cmp	r3, r2
 80250c0:	f88d 0004 	strb.w	r0, [sp, #4]
 80250c4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80250c8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80250cc:	f8ad 500c 	strh.w	r5, [sp, #12]
 80250d0:	dc07      	bgt.n	80250e2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80250d2:	1a69      	subs	r1, r5, r1
 80250d4:	b209      	sxth	r1, r1
 80250d6:	2900      	cmp	r1, #0
 80250d8:	bfb8      	it	lt
 80250da:	4249      	neglt	r1, r1
 80250dc:	b209      	sxth	r1, r1
 80250de:	428a      	cmp	r2, r1
 80250e0:	da10      	bge.n	8025104 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80250e2:	6920      	ldr	r0, [r4, #16]
 80250e4:	4669      	mov	r1, sp
 80250e6:	6803      	ldr	r3, [r0, #0]
 80250e8:	eba8 0606 	sub.w	r6, r8, r6
 80250ec:	685b      	ldr	r3, [r3, #4]
 80250ee:	4798      	blx	r3
 80250f0:	2300      	movs	r3, #0
 80250f2:	2001      	movs	r0, #1
 80250f4:	1bef      	subs	r7, r5, r7
 80250f6:	8123      	strh	r3, [r4, #8]
 80250f8:	8166      	strh	r6, [r4, #10]
 80250fa:	81a7      	strh	r7, [r4, #12]
 80250fc:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025100:	80e5      	strh	r5, [r4, #6]
 8025102:	73a0      	strb	r0, [r4, #14]
 8025104:	b004      	add	sp, #16
 8025106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802510a:	bf00      	nop
 802510c:	08028bb8 	.word	0x08028bb8

08025110 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025112:	461e      	mov	r6, r3
 8025114:	1e4b      	subs	r3, r1, #1
 8025116:	2b01      	cmp	r3, #1
 8025118:	b085      	sub	sp, #20
 802511a:	4604      	mov	r4, r0
 802511c:	460d      	mov	r5, r1
 802511e:	4617      	mov	r7, r2
 8025120:	d84b      	bhi.n	80251ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025122:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025126:	1cd3      	adds	r3, r2, #3
 8025128:	b29b      	uxth	r3, r3
 802512a:	2b06      	cmp	r3, #6
 802512c:	d916      	bls.n	802515c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802512e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80251d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025132:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025136:	f8cd c004 	str.w	ip, [sp, #4]
 802513a:	f04f 0c00 	mov.w	ip, #0
 802513e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025142:	6900      	ldr	r0, [r0, #16]
 8025144:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025148:	f88d c008 	strb.w	ip, [sp, #8]
 802514c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025150:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025154:	6803      	ldr	r3, [r0, #0]
 8025156:	a901      	add	r1, sp, #4
 8025158:	689b      	ldr	r3, [r3, #8]
 802515a:	4798      	blx	r3
 802515c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025160:	1cd3      	adds	r3, r2, #3
 8025162:	b29b      	uxth	r3, r3
 8025164:	2b06      	cmp	r3, #6
 8025166:	d916      	bls.n	8025196 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025168:	f8df c064 	ldr.w	ip, [pc, #100]	; 80251d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802516c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025170:	f8cd c004 	str.w	ip, [sp, #4]
 8025174:	f04f 0c01 	mov.w	ip, #1
 8025178:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802517c:	6920      	ldr	r0, [r4, #16]
 802517e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025182:	f88d c008 	strb.w	ip, [sp, #8]
 8025186:	f8ad 200a 	strh.w	r2, [sp, #10]
 802518a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802518e:	6803      	ldr	r3, [r0, #0]
 8025190:	a901      	add	r1, sp, #4
 8025192:	689b      	ldr	r3, [r3, #8]
 8025194:	4798      	blx	r3
 8025196:	4b0d      	ldr	r3, [pc, #52]	; (80251cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025198:	6920      	ldr	r0, [r4, #16]
 802519a:	9301      	str	r3, [sp, #4]
 802519c:	2300      	movs	r3, #0
 802519e:	f88d 5008 	strb.w	r5, [sp, #8]
 80251a2:	f8ad 700a 	strh.w	r7, [sp, #10]
 80251a6:	f8ad 600c 	strh.w	r6, [sp, #12]
 80251aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80251ae:	6803      	ldr	r3, [r0, #0]
 80251b0:	a901      	add	r1, sp, #4
 80251b2:	681b      	ldr	r3, [r3, #0]
 80251b4:	4798      	blx	r3
 80251b6:	b005      	add	sp, #20
 80251b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80251ba:	2900      	cmp	r1, #0
 80251bc:	d1eb      	bne.n	8025196 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80251be:	80a2      	strh	r2, [r4, #4]
 80251c0:	80c6      	strh	r6, [r0, #6]
 80251c2:	60a1      	str	r1, [r4, #8]
 80251c4:	81a1      	strh	r1, [r4, #12]
 80251c6:	73a1      	strb	r1, [r4, #14]
 80251c8:	e7e5      	b.n	8025196 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80251ca:	bf00      	nop
 80251cc:	08028ba4 	.word	0x08028ba4
 80251d0:	08028bcc 	.word	0x08028bcc

080251d4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 80251d4:	10c9      	asrs	r1, r1, #3
 80251d6:	2900      	cmp	r1, #0
 80251d8:	bfb8      	it	lt
 80251da:	4249      	neglt	r1, r1
 80251dc:	2801      	cmp	r0, #1
 80251de:	d108      	bne.n	80251f2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80251e0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80251e4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80251e8:	4601      	mov	r1, r0
 80251ea:	dd02      	ble.n	80251f2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80251ec:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80251f0:	4770      	bx	lr
 80251f2:	29ff      	cmp	r1, #255	; 0xff
 80251f4:	bfa8      	it	ge
 80251f6:	21ff      	movge	r1, #255	; 0xff
 80251f8:	4608      	mov	r0, r1
 80251fa:	4770      	bx	lr

080251fc <_ZN8touchgfx10Rasterizer6lineToEii>:
 80251fc:	b410      	push	{r4}
 80251fe:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8025202:	429c      	cmp	r4, r3
 8025204:	d803      	bhi.n	802520e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8025206:	f85d 4b04 	ldr.w	r4, [sp], #4
 802520a:	f7f0 bb7b 	b.w	8015904 <_ZN8touchgfx7Outline6lineToEii>
 802520e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025212:	4770      	bx	lr

08025214 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8025214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025218:	b08b      	sub	sp, #44	; 0x2c
 802521a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802521e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8025222:	4606      	mov	r6, r0
 8025224:	9308      	str	r3, [sp, #32]
 8025226:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802522a:	468a      	mov	sl, r1
 802522c:	9309      	str	r3, [sp, #36]	; 0x24
 802522e:	f7f0 fcd5 	bl	8015bdc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8025232:	68b5      	ldr	r5, [r6, #8]
 8025234:	4604      	mov	r4, r0
 8025236:	2d00      	cmp	r5, #0
 8025238:	d044      	beq.n	80252c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802523a:	6873      	ldr	r3, [r6, #4]
 802523c:	42ab      	cmp	r3, r5
 802523e:	d33d      	bcc.n	80252bc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8025240:	f04f 0800 	mov.w	r8, #0
 8025244:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8025248:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802524c:	eb02 0b03 	add.w	fp, r2, r3
 8025250:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025254:	fb02 1203 	mla	r2, r2, r3, r1
 8025258:	9205      	str	r2, [sp, #20]
 802525a:	1e6a      	subs	r2, r5, #1
 802525c:	9204      	str	r2, [sp, #16]
 802525e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8025262:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025266:	454b      	cmp	r3, r9
 8025268:	463a      	mov	r2, r7
 802526a:	d008      	beq.n	802527e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802526c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8025270:	eb03 0b09 	add.w	fp, r3, r9
 8025274:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8025278:	fb03 1309 	mla	r3, r3, r9, r1
 802527c:	9305      	str	r3, [sp, #20]
 802527e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8025282:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8025286:	4498      	add	r8, r3
 8025288:	9b04      	ldr	r3, [sp, #16]
 802528a:	3b01      	subs	r3, #1
 802528c:	9304      	str	r3, [sp, #16]
 802528e:	9b04      	ldr	r3, [sp, #16]
 8025290:	3301      	adds	r3, #1
 8025292:	d015      	beq.n	80252c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8025294:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8025298:	42bb      	cmp	r3, r7
 802529a:	d117      	bne.n	80252cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802529c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80252a0:	9b04      	ldr	r3, [sp, #16]
 80252a2:	4548      	cmp	r0, r9
 80252a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80252a8:	d17d      	bne.n	80253a6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80252aa:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80252ae:	4401      	add	r1, r0
 80252b0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80252b4:	4480      	add	r8, r0
 80252b6:	e7e9      	b.n	802528c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80252b8:	461f      	mov	r7, r3
 80252ba:	e042      	b.n	8025342 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80252bc:	2000      	movs	r0, #0
 80252be:	e002      	b.n	80252c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80252c0:	2900      	cmp	r1, #0
 80252c2:	d16d      	bne.n	80253a0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80252c4:	2001      	movs	r0, #1
 80252c6:	b00b      	add	sp, #44	; 0x2c
 80252c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252cc:	b379      	cbz	r1, 802532e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80252ce:	2f00      	cmp	r7, #0
 80252d0:	db29      	blt.n	8025326 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80252d2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80252d6:	42bb      	cmp	r3, r7
 80252d8:	dd25      	ble.n	8025326 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80252da:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80252de:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80252e2:	f7ff ff77 	bl	80251d4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80252e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252e8:	fb10 f003 	smulbb	r0, r0, r3
 80252ec:	b280      	uxth	r0, r0
 80252ee:	1c41      	adds	r1, r0, #1
 80252f0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80252f4:	1209      	asrs	r1, r1, #8
 80252f6:	f011 0fff 	tst.w	r1, #255	; 0xff
 80252fa:	d014      	beq.n	8025326 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80252fc:	b2c9      	uxtb	r1, r1
 80252fe:	9102      	str	r1, [sp, #8]
 8025300:	2101      	movs	r1, #1
 8025302:	9808      	ldr	r0, [sp, #32]
 8025304:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025306:	b2ba      	uxth	r2, r7
 8025308:	4413      	add	r3, r2
 802530a:	9101      	str	r1, [sp, #4]
 802530c:	4402      	add	r2, r0
 802530e:	fa0f f18b 	sxth.w	r1, fp
 8025312:	f8da 0000 	ldr.w	r0, [sl]
 8025316:	9100      	str	r1, [sp, #0]
 8025318:	6941      	ldr	r1, [r0, #20]
 802531a:	b21b      	sxth	r3, r3
 802531c:	460d      	mov	r5, r1
 802531e:	b212      	sxth	r2, r2
 8025320:	9905      	ldr	r1, [sp, #20]
 8025322:	4650      	mov	r0, sl
 8025324:	47a8      	blx	r5
 8025326:	9b04      	ldr	r3, [sp, #16]
 8025328:	1c7a      	adds	r2, r7, #1
 802532a:	3301      	adds	r3, #1
 802532c:	d0ca      	beq.n	80252c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802532e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025332:	1abb      	subs	r3, r7, r2
 8025334:	2b00      	cmp	r3, #0
 8025336:	dd31      	ble.n	802539c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025338:	2a00      	cmp	r2, #0
 802533a:	dabd      	bge.n	80252b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802533c:	2f00      	cmp	r7, #0
 802533e:	dd2d      	ble.n	802539c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025340:	2200      	movs	r2, #0
 8025342:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8025346:	19d1      	adds	r1, r2, r7
 8025348:	4299      	cmp	r1, r3
 802534a:	db02      	blt.n	8025352 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802534c:	1a9f      	subs	r7, r3, r2
 802534e:	2f00      	cmp	r7, #0
 8025350:	dd24      	ble.n	802539c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025352:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8025356:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802535a:	f7ff ff3b 	bl	80251d4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025360:	fb10 f003 	smulbb	r0, r0, r3
 8025364:	b280      	uxth	r0, r0
 8025366:	1c41      	adds	r1, r0, #1
 8025368:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802536c:	1209      	asrs	r1, r1, #8
 802536e:	f011 0fff 	tst.w	r1, #255	; 0xff
 8025372:	d013      	beq.n	802539c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025374:	9808      	ldr	r0, [sp, #32]
 8025376:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025378:	b292      	uxth	r2, r2
 802537a:	b2c9      	uxtb	r1, r1
 802537c:	4413      	add	r3, r2
 802537e:	9102      	str	r1, [sp, #8]
 8025380:	4402      	add	r2, r0
 8025382:	b23f      	sxth	r7, r7
 8025384:	f8da 0000 	ldr.w	r0, [sl]
 8025388:	fa0f f18b 	sxth.w	r1, fp
 802538c:	9100      	str	r1, [sp, #0]
 802538e:	9701      	str	r7, [sp, #4]
 8025390:	6947      	ldr	r7, [r0, #20]
 8025392:	b21b      	sxth	r3, r3
 8025394:	b212      	sxth	r2, r2
 8025396:	9905      	ldr	r1, [sp, #20]
 8025398:	4650      	mov	r0, sl
 802539a:	47b8      	blx	r7
 802539c:	464b      	mov	r3, r9
 802539e:	e75e      	b.n	802525e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80253a0:	2f00      	cmp	r7, #0
 80253a2:	da96      	bge.n	80252d2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80253a4:	e78e      	b.n	80252c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80253a6:	2900      	cmp	r1, #0
 80253a8:	d0f8      	beq.n	802539c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80253aa:	e790      	b.n	80252ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080253ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80253ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80253b0:	2500      	movs	r5, #0
 80253b2:	4b4b      	ldr	r3, [pc, #300]	; (80254e0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 80253b4:	4604      	mov	r4, r0
 80253b6:	f100 0620 	add.w	r6, r0, #32
 80253ba:	e9c0 3100 	strd	r3, r1, [r0]
 80253be:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80253c2:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80253c6:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80253ca:	f100 0718 	add.w	r7, r0, #24
 80253ce:	4630      	mov	r0, r6
 80253d0:	4690      	mov	r8, r2
 80253d2:	f7ef fdcf 	bl	8014f74 <_ZN8touchgfx7OutlineC1Ev>
 80253d6:	2301      	movs	r3, #1
 80253d8:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80253dc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80253e0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80253e4:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80253e8:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80253ec:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80253f0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80253f4:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80253f8:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80253fc:	f9b8 2000 	ldrsh.w	r2, [r8]
 8025400:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8025404:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025408:	4410      	add	r0, r2
 802540a:	b280      	uxth	r0, r0
 802540c:	fa0f fa80 	sxth.w	sl, r0
 8025410:	45aa      	cmp	sl, r5
 8025412:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8025416:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802541a:	9500      	str	r5, [sp, #0]
 802541c:	dd5c      	ble.n	80254d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802541e:	4591      	cmp	r9, r2
 8025420:	dd5a      	ble.n	80254d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025422:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025426:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802542a:	440b      	add	r3, r1
 802542c:	b29b      	uxth	r3, r3
 802542e:	b21d      	sxth	r5, r3
 8025430:	2d00      	cmp	r5, #0
 8025432:	dd51      	ble.n	80254d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025434:	458e      	cmp	lr, r1
 8025436:	dd4f      	ble.n	80254d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025438:	45d1      	cmp	r9, sl
 802543a:	bfb8      	it	lt
 802543c:	fa1f f089 	uxthlt.w	r0, r9
 8025440:	45ae      	cmp	lr, r5
 8025442:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8025446:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802544a:	bfb8      	it	lt
 802544c:	fa1f f38e 	uxthlt.w	r3, lr
 8025450:	1a80      	subs	r0, r0, r2
 8025452:	1a5b      	subs	r3, r3, r1
 8025454:	f8ad 0004 	strh.w	r0, [sp, #4]
 8025458:	f8ad 3006 	strh.w	r3, [sp, #6]
 802545c:	f8ad 2000 	strh.w	r2, [sp]
 8025460:	f8ad 1002 	strh.w	r1, [sp, #2]
 8025464:	466d      	mov	r5, sp
 8025466:	e895 0003 	ldmia.w	r5, {r0, r1}
 802546a:	e887 0003 	stmia.w	r7, {r0, r1}
 802546e:	f8dc 3000 	ldr.w	r3, [ip]
 8025472:	4660      	mov	r0, ip
 8025474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025476:	4639      	mov	r1, r7
 8025478:	4798      	blx	r3
 802547a:	6861      	ldr	r1, [r4, #4]
 802547c:	4628      	mov	r0, r5
 802547e:	3104      	adds	r1, #4
 8025480:	f7f1 faba 	bl	80169f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025484:	4638      	mov	r0, r7
 8025486:	f7f1 fa8f 	bl	80169a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802548a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802548e:	f8bd 2000 	ldrh.w	r2, [sp]
 8025492:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8025496:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802549a:	4630      	mov	r0, r6
 802549c:	f7ef fd4e 	bl	8014f3c <_ZN8touchgfx7Outline5resetEv>
 80254a0:	4620      	mov	r0, r4
 80254a2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80254a6:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 80254aa:	015b      	lsls	r3, r3, #5
 80254ac:	60a3      	str	r3, [r4, #8]
 80254ae:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80254b2:	015b      	lsls	r3, r3, #5
 80254b4:	60e3      	str	r3, [r4, #12]
 80254b6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80254ba:	015b      	lsls	r3, r3, #5
 80254bc:	6123      	str	r3, [r4, #16]
 80254be:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80254c2:	015b      	lsls	r3, r3, #5
 80254c4:	6163      	str	r3, [r4, #20]
 80254c6:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80254ca:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80254ce:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 80254d2:	b002      	add	sp, #8
 80254d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80254d8:	2300      	movs	r3, #0
 80254da:	9301      	str	r3, [sp, #4]
 80254dc:	e7c2      	b.n	8025464 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 80254de:	bf00      	nop
 80254e0:	080286a0 	.word	0x080286a0

080254e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80254e4:	b510      	push	{r4, lr}
 80254e6:	4b07      	ldr	r3, [pc, #28]	; (8025504 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80254e8:	781b      	ldrb	r3, [r3, #0]
 80254ea:	2b01      	cmp	r3, #1
 80254ec:	d108      	bne.n	8025500 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80254ee:	6843      	ldr	r3, [r0, #4]
 80254f0:	6814      	ldr	r4, [r2, #0]
 80254f2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80254f6:	680b      	ldr	r3, [r1, #0]
 80254f8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80254fc:	6013      	str	r3, [r2, #0]
 80254fe:	600c      	str	r4, [r1, #0]
 8025500:	bd10      	pop	{r4, pc}
 8025502:	bf00      	nop
 8025504:	2004f628 	.word	0x2004f628

08025508 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025508:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802550a:	4604      	mov	r4, r0
 802550c:	ab02      	add	r3, sp, #8
 802550e:	f843 2d08 	str.w	r2, [r3, #-8]!
 8025512:	461a      	mov	r2, r3
 8025514:	9101      	str	r1, [sp, #4]
 8025516:	a901      	add	r1, sp, #4
 8025518:	f7ff ffe4 	bl	80254e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802551c:	68a3      	ldr	r3, [r4, #8]
 802551e:	9901      	ldr	r1, [sp, #4]
 8025520:	9a00      	ldr	r2, [sp, #0]
 8025522:	1ac9      	subs	r1, r1, r3
 8025524:	68e3      	ldr	r3, [r4, #12]
 8025526:	9101      	str	r1, [sp, #4]
 8025528:	1ad2      	subs	r2, r2, r3
 802552a:	2a00      	cmp	r2, #0
 802552c:	9200      	str	r2, [sp, #0]
 802552e:	db1c      	blt.n	802556a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8025530:	6963      	ldr	r3, [r4, #20]
 8025532:	429a      	cmp	r2, r3
 8025534:	bfac      	ite	ge
 8025536:	2002      	movge	r0, #2
 8025538:	2000      	movlt	r0, #0
 802553a:	2900      	cmp	r1, #0
 802553c:	db17      	blt.n	802556e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802553e:	6923      	ldr	r3, [r4, #16]
 8025540:	4299      	cmp	r1, r3
 8025542:	bfac      	ite	ge
 8025544:	2308      	movge	r3, #8
 8025546:	2300      	movlt	r3, #0
 8025548:	4303      	orrs	r3, r0
 802554a:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802554e:	b2dd      	uxtb	r5, r3
 8025550:	b978      	cbnz	r0, 8025572 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8025552:	f104 0020 	add.w	r0, r4, #32
 8025556:	f7ff fe51 	bl	80251fc <_ZN8touchgfx10Rasterizer6lineToEii>
 802555a:	9b01      	ldr	r3, [sp, #4]
 802555c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8025560:	65e3      	str	r3, [r4, #92]	; 0x5c
 8025562:	9b00      	ldr	r3, [sp, #0]
 8025564:	6623      	str	r3, [r4, #96]	; 0x60
 8025566:	b002      	add	sp, #8
 8025568:	bd70      	pop	{r4, r5, r6, pc}
 802556a:	2001      	movs	r0, #1
 802556c:	e7e5      	b.n	802553a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802556e:	2304      	movs	r3, #4
 8025570:	e7ea      	b.n	8025548 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8025572:	b113      	cbz	r3, 802557a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8025574:	ea10 0305 	ands.w	r3, r0, r5
 8025578:	d11d      	bne.n	80255b6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 802557a:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 802557e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8025582:	f104 0620 	add.w	r6, r4, #32
 8025586:	b193      	cbz	r3, 80255ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8025588:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802558c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8025590:	4298      	cmp	r0, r3
 8025592:	d802      	bhi.n	802559a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8025594:	4630      	mov	r0, r6
 8025596:	f7f0 f9cf 	bl	8015938 <_ZN8touchgfx7Outline6moveToEii>
 802559a:	2300      	movs	r3, #0
 802559c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80255a0:	2301      	movs	r3, #1
 80255a2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80255a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80255aa:	4630      	mov	r0, r6
 80255ac:	e7d3      	b.n	8025556 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80255ae:	4630      	mov	r0, r6
 80255b0:	f7ff fe24 	bl	80251fc <_ZN8touchgfx10Rasterizer6lineToEii>
 80255b4:	e7f7      	b.n	80255a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80255b6:	461d      	mov	r5, r3
 80255b8:	e7cf      	b.n	802555a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

080255ba <_ZN8touchgfx6Canvas5closeEv>:
 80255ba:	b538      	push	{r3, r4, r5, lr}
 80255bc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80255c0:	4604      	mov	r4, r0
 80255c2:	b993      	cbnz	r3, 80255ea <_ZN8touchgfx6Canvas5closeEv+0x30>
 80255c4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80255c8:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 80255cc:	4213      	tst	r3, r2
 80255ce:	d10c      	bne.n	80255ea <_ZN8touchgfx6Canvas5closeEv+0x30>
 80255d0:	f100 0520 	add.w	r5, r0, #32
 80255d4:	b123      	cbz	r3, 80255e0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80255d6:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 80255da:	4628      	mov	r0, r5
 80255dc:	f7ff fe0e 	bl	80251fc <_ZN8touchgfx10Rasterizer6lineToEii>
 80255e0:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 80255e4:	4628      	mov	r0, r5
 80255e6:	f7ff fe09 	bl	80251fc <_ZN8touchgfx10Rasterizer6lineToEii>
 80255ea:	2300      	movs	r3, #0
 80255ec:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80255f0:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 80255f4:	4298      	cmp	r0, r3
 80255f6:	bf34      	ite	cc
 80255f8:	2000      	movcc	r0, #0
 80255fa:	2001      	movcs	r0, #1
 80255fc:	bd38      	pop	{r3, r4, r5, pc}
	...

08025600 <_ZN8touchgfx6Canvas6renderEh>:
 8025600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025604:	4604      	mov	r4, r0
 8025606:	6840      	ldr	r0, [r0, #4]
 8025608:	460d      	mov	r5, r1
 802560a:	6803      	ldr	r3, [r0, #0]
 802560c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802560e:	4798      	blx	r3
 8025610:	fb10 f105 	smulbb	r1, r0, r5
 8025614:	b289      	uxth	r1, r1
 8025616:	1c4d      	adds	r5, r1, #1
 8025618:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802561c:	122d      	asrs	r5, r5, #8
 802561e:	f000 8097 	beq.w	8025750 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8025622:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8025626:	2b00      	cmp	r3, #0
 8025628:	f000 8092 	beq.w	8025750 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802562c:	4620      	mov	r0, r4
 802562e:	f7ff ffc4 	bl	80255ba <_ZN8touchgfx6Canvas5closeEv>
 8025632:	4607      	mov	r7, r0
 8025634:	2800      	cmp	r0, #0
 8025636:	d043      	beq.n	80256c0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025638:	6863      	ldr	r3, [r4, #4]
 802563a:	4e46      	ldr	r6, [pc, #280]	; (8025754 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 802563c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802563e:	6837      	ldr	r7, [r6, #0]
 8025640:	6803      	ldr	r3, [r0, #0]
 8025642:	689b      	ldr	r3, [r3, #8]
 8025644:	4798      	blx	r3
 8025646:	4601      	mov	r1, r0
 8025648:	4638      	mov	r0, r7
 802564a:	f7ee fb43 	bl	8013cd4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802564e:	4607      	mov	r7, r0
 8025650:	f7e8 f8ec 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8025654:	6803      	ldr	r3, [r0, #0]
 8025656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025658:	4798      	blx	r3
 802565a:	4680      	mov	r8, r0
 802565c:	f7e8 f8e6 	bl	800d82c <_ZN8touchgfx3HAL3lcdEv>
 8025660:	6803      	ldr	r3, [r0, #0]
 8025662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025664:	4798      	blx	r3
 8025666:	280b      	cmp	r0, #11
 8025668:	d857      	bhi.n	802571a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802566a:	e8df f000 	tbb	[pc, r0]
 802566e:	584d      	.short	0x584d
 8025670:	2d560668 	.word	0x2d560668
 8025674:	6161613d 	.word	0x6161613d
 8025678:	6161      	.short	0x6161
 802567a:	2208      	movs	r2, #8
 802567c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8025680:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025684:	fb91 f2f2 	sdiv	r2, r1, r2
 8025688:	fb08 2303 	mla	r3, r8, r3, r2
 802568c:	441f      	add	r7, r3
 802568e:	424b      	negs	r3, r1
 8025690:	f003 0307 	and.w	r3, r3, #7
 8025694:	f001 0107 	and.w	r1, r1, #7
 8025698:	bf58      	it	pl
 802569a:	4259      	negpl	r1, r3
 802569c:	b2c9      	uxtb	r1, r1
 802569e:	b2ed      	uxtb	r5, r5
 80256a0:	e9cd 1500 	strd	r1, r5, [sp]
 80256a4:	6860      	ldr	r0, [r4, #4]
 80256a6:	fa0f f388 	sxth.w	r3, r8
 80256aa:	463a      	mov	r2, r7
 80256ac:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80256ae:	f104 0020 	add.w	r0, r4, #32
 80256b2:	f7ff fdaf 	bl	8025214 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80256b6:	4607      	mov	r7, r0
 80256b8:	6830      	ldr	r0, [r6, #0]
 80256ba:	6803      	ldr	r3, [r0, #0]
 80256bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80256be:	4798      	blx	r3
 80256c0:	4638      	mov	r0, r7
 80256c2:	b002      	add	sp, #8
 80256c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80256c8:	2204      	movs	r2, #4
 80256ca:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80256ce:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256d2:	fb91 f2f2 	sdiv	r2, r1, r2
 80256d6:	fb08 2303 	mla	r3, r8, r3, r2
 80256da:	441f      	add	r7, r3
 80256dc:	424b      	negs	r3, r1
 80256de:	f003 0303 	and.w	r3, r3, #3
 80256e2:	f001 0103 	and.w	r1, r1, #3
 80256e6:	e7d7      	b.n	8025698 <_ZN8touchgfx6Canvas6renderEh+0x98>
 80256e8:	2202      	movs	r2, #2
 80256ea:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80256ee:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256f2:	fb91 f2f2 	sdiv	r2, r1, r2
 80256f6:	fb08 2303 	mla	r3, r8, r3, r2
 80256fa:	2900      	cmp	r1, #0
 80256fc:	f001 0101 	and.w	r1, r1, #1
 8025700:	441f      	add	r7, r3
 8025702:	bfb8      	it	lt
 8025704:	4249      	neglt	r1, r1
 8025706:	e7c9      	b.n	802569c <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8025708:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802570c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025710:	fb08 f303 	mul.w	r3, r8, r3
 8025714:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8025718:	441f      	add	r7, r3
 802571a:	2100      	movs	r1, #0
 802571c:	e7bf      	b.n	802569e <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802571e:	2103      	movs	r1, #3
 8025720:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025724:	fb08 f203 	mul.w	r2, r8, r3
 8025728:	8b23      	ldrh	r3, [r4, #24]
 802572a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802572e:	e7f3      	b.n	8025718 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8025730:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025734:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025738:	fb08 2303 	mla	r3, r8, r3, r2
 802573c:	e7ec      	b.n	8025718 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802573e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025742:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025746:	fb08 f303 	mul.w	r3, r8, r3
 802574a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802574e:	e7e3      	b.n	8025718 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8025750:	2701      	movs	r7, #1
 8025752:	e7b5      	b.n	80256c0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025754:	2004f630 	.word	0x2004f630

08025758 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8025758:	b513      	push	{r0, r1, r4, lr}
 802575a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802575e:	4604      	mov	r4, r0
 8025760:	e9cd 2100 	strd	r2, r1, [sp]
 8025764:	b1a3      	cbz	r3, 8025790 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8025766:	466a      	mov	r2, sp
 8025768:	a901      	add	r1, sp, #4
 802576a:	4620      	mov	r0, r4
 802576c:	f7ff feba 	bl	80254e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025770:	68a3      	ldr	r3, [r4, #8]
 8025772:	9901      	ldr	r1, [sp, #4]
 8025774:	9a00      	ldr	r2, [sp, #0]
 8025776:	1ac9      	subs	r1, r1, r3
 8025778:	68e3      	ldr	r3, [r4, #12]
 802577a:	9101      	str	r1, [sp, #4]
 802577c:	1ad2      	subs	r2, r2, r3
 802577e:	2a00      	cmp	r2, #0
 8025780:	9200      	str	r2, [sp, #0]
 8025782:	da0b      	bge.n	802579c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8025784:	2301      	movs	r3, #1
 8025786:	2900      	cmp	r1, #0
 8025788:	da0e      	bge.n	80257a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802578a:	f043 0304 	orr.w	r3, r3, #4
 802578e:	e013      	b.n	80257b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8025790:	f7ff ff13 	bl	80255ba <_ZN8touchgfx6Canvas5closeEv>
 8025794:	2800      	cmp	r0, #0
 8025796:	d1e6      	bne.n	8025766 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8025798:	b002      	add	sp, #8
 802579a:	bd10      	pop	{r4, pc}
 802579c:	6963      	ldr	r3, [r4, #20]
 802579e:	429a      	cmp	r2, r3
 80257a0:	bfac      	ite	ge
 80257a2:	2302      	movge	r3, #2
 80257a4:	2300      	movlt	r3, #0
 80257a6:	e7ee      	b.n	8025786 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80257a8:	6920      	ldr	r0, [r4, #16]
 80257aa:	4281      	cmp	r1, r0
 80257ac:	bfac      	ite	ge
 80257ae:	2008      	movge	r0, #8
 80257b0:	2000      	movlt	r0, #0
 80257b2:	4318      	orrs	r0, r3
 80257b4:	b2c3      	uxtb	r3, r0
 80257b6:	b158      	cbz	r0, 80257d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80257b8:	2201      	movs	r2, #1
 80257ba:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80257be:	9901      	ldr	r1, [sp, #4]
 80257c0:	9a00      	ldr	r2, [sp, #0]
 80257c2:	66a1      	str	r1, [r4, #104]	; 0x68
 80257c4:	66e2      	str	r2, [r4, #108]	; 0x6c
 80257c6:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80257ca:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80257ce:	e7e3      	b.n	8025798 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80257d0:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80257d4:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80257d8:	4298      	cmp	r0, r3
 80257da:	d803      	bhi.n	80257e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80257dc:	f104 0020 	add.w	r0, r4, #32
 80257e0:	f7f0 f8aa 	bl	8015938 <_ZN8touchgfx7Outline6moveToEii>
 80257e4:	2300      	movs	r3, #0
 80257e6:	2201      	movs	r2, #1
 80257e8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80257ec:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80257f0:	e7e5      	b.n	80257be <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

080257f2 <__aeabi_atexit>:
 80257f2:	460b      	mov	r3, r1
 80257f4:	4601      	mov	r1, r0
 80257f6:	4618      	mov	r0, r3
 80257f8:	f000 b850 	b.w	802589c <__cxa_atexit>

080257fc <_ZdlPvj>:
 80257fc:	f000 b812 	b.w	8025824 <_ZdlPv>

08025800 <__cxa_guard_acquire>:
 8025800:	6803      	ldr	r3, [r0, #0]
 8025802:	07db      	lsls	r3, r3, #31
 8025804:	d406      	bmi.n	8025814 <__cxa_guard_acquire+0x14>
 8025806:	7843      	ldrb	r3, [r0, #1]
 8025808:	b103      	cbz	r3, 802580c <__cxa_guard_acquire+0xc>
 802580a:	deff      	udf	#255	; 0xff
 802580c:	2301      	movs	r3, #1
 802580e:	7043      	strb	r3, [r0, #1]
 8025810:	4618      	mov	r0, r3
 8025812:	4770      	bx	lr
 8025814:	2000      	movs	r0, #0
 8025816:	4770      	bx	lr

08025818 <__cxa_guard_release>:
 8025818:	2301      	movs	r3, #1
 802581a:	6003      	str	r3, [r0, #0]
 802581c:	4770      	bx	lr

0802581e <__cxa_pure_virtual>:
 802581e:	b508      	push	{r3, lr}
 8025820:	f000 f80c 	bl	802583c <_ZSt9terminatev>

08025824 <_ZdlPv>:
 8025824:	f000 b88c 	b.w	8025940 <free>

08025828 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025828:	b508      	push	{r3, lr}
 802582a:	4780      	blx	r0
 802582c:	f000 f80b 	bl	8025846 <abort>

08025830 <_ZSt13get_terminatev>:
 8025830:	4b01      	ldr	r3, [pc, #4]	; (8025838 <_ZSt13get_terminatev+0x8>)
 8025832:	e8d3 0faf 	lda	r0, [r3]
 8025836:	4770      	bx	lr
 8025838:	20025894 	.word	0x20025894

0802583c <_ZSt9terminatev>:
 802583c:	b508      	push	{r3, lr}
 802583e:	f7ff fff7 	bl	8025830 <_ZSt13get_terminatev>
 8025842:	f7ff fff1 	bl	8025828 <_ZN10__cxxabiv111__terminateEPFvvE>

08025846 <abort>:
 8025846:	2006      	movs	r0, #6
 8025848:	b508      	push	{r3, lr}
 802584a:	f000 fc9f 	bl	802618c <raise>
 802584e:	2001      	movs	r0, #1
 8025850:	f7dc fad8 	bl	8001e04 <_exit>

08025854 <__assert_func>:
 8025854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025856:	4614      	mov	r4, r2
 8025858:	461a      	mov	r2, r3
 802585a:	4b09      	ldr	r3, [pc, #36]	; (8025880 <__assert_func+0x2c>)
 802585c:	4605      	mov	r5, r0
 802585e:	681b      	ldr	r3, [r3, #0]
 8025860:	68d8      	ldr	r0, [r3, #12]
 8025862:	b14c      	cbz	r4, 8025878 <__assert_func+0x24>
 8025864:	4b07      	ldr	r3, [pc, #28]	; (8025884 <__assert_func+0x30>)
 8025866:	9100      	str	r1, [sp, #0]
 8025868:	4907      	ldr	r1, [pc, #28]	; (8025888 <__assert_func+0x34>)
 802586a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802586e:	462b      	mov	r3, r5
 8025870:	f000 f828 	bl	80258c4 <fiprintf>
 8025874:	f7ff ffe7 	bl	8025846 <abort>
 8025878:	4b04      	ldr	r3, [pc, #16]	; (802588c <__assert_func+0x38>)
 802587a:	461c      	mov	r4, r3
 802587c:	e7f3      	b.n	8025866 <__assert_func+0x12>
 802587e:	bf00      	nop
 8025880:	20025898 	.word	0x20025898
 8025884:	08028e94 	.word	0x08028e94
 8025888:	08028ea1 	.word	0x08028ea1
 802588c:	08028ecf 	.word	0x08028ecf

08025890 <atexit>:
 8025890:	2300      	movs	r3, #0
 8025892:	4601      	mov	r1, r0
 8025894:	461a      	mov	r2, r3
 8025896:	4618      	mov	r0, r3
 8025898:	f000 bd54 	b.w	8026344 <__register_exitproc>

0802589c <__cxa_atexit>:
 802589c:	b510      	push	{r4, lr}
 802589e:	4c05      	ldr	r4, [pc, #20]	; (80258b4 <__cxa_atexit+0x18>)
 80258a0:	4613      	mov	r3, r2
 80258a2:	b12c      	cbz	r4, 80258b0 <__cxa_atexit+0x14>
 80258a4:	460a      	mov	r2, r1
 80258a6:	4601      	mov	r1, r0
 80258a8:	2002      	movs	r0, #2
 80258aa:	f000 fd4b 	bl	8026344 <__register_exitproc>
 80258ae:	bd10      	pop	{r4, pc}
 80258b0:	4620      	mov	r0, r4
 80258b2:	e7fc      	b.n	80258ae <__cxa_atexit+0x12>
 80258b4:	08026345 	.word	0x08026345

080258b8 <__errno>:
 80258b8:	4b01      	ldr	r3, [pc, #4]	; (80258c0 <__errno+0x8>)
 80258ba:	6818      	ldr	r0, [r3, #0]
 80258bc:	4770      	bx	lr
 80258be:	bf00      	nop
 80258c0:	20025898 	.word	0x20025898

080258c4 <fiprintf>:
 80258c4:	b40e      	push	{r1, r2, r3}
 80258c6:	b503      	push	{r0, r1, lr}
 80258c8:	ab03      	add	r3, sp, #12
 80258ca:	4601      	mov	r1, r0
 80258cc:	4805      	ldr	r0, [pc, #20]	; (80258e4 <fiprintf+0x20>)
 80258ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80258d2:	6800      	ldr	r0, [r0, #0]
 80258d4:	9301      	str	r3, [sp, #4]
 80258d6:	f000 f95b 	bl	8025b90 <_vfiprintf_r>
 80258da:	b002      	add	sp, #8
 80258dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80258e0:	b003      	add	sp, #12
 80258e2:	4770      	bx	lr
 80258e4:	20025898 	.word	0x20025898

080258e8 <__libc_init_array>:
 80258e8:	b570      	push	{r4, r5, r6, lr}
 80258ea:	4d0d      	ldr	r5, [pc, #52]	; (8025920 <__libc_init_array+0x38>)
 80258ec:	2600      	movs	r6, #0
 80258ee:	4c0d      	ldr	r4, [pc, #52]	; (8025924 <__libc_init_array+0x3c>)
 80258f0:	1b64      	subs	r4, r4, r5
 80258f2:	10a4      	asrs	r4, r4, #2
 80258f4:	42a6      	cmp	r6, r4
 80258f6:	d109      	bne.n	802590c <__libc_init_array+0x24>
 80258f8:	4d0b      	ldr	r5, [pc, #44]	; (8025928 <__libc_init_array+0x40>)
 80258fa:	2600      	movs	r6, #0
 80258fc:	4c0b      	ldr	r4, [pc, #44]	; (802592c <__libc_init_array+0x44>)
 80258fe:	f001 f869 	bl	80269d4 <_init>
 8025902:	1b64      	subs	r4, r4, r5
 8025904:	10a4      	asrs	r4, r4, #2
 8025906:	42a6      	cmp	r6, r4
 8025908:	d105      	bne.n	8025916 <__libc_init_array+0x2e>
 802590a:	bd70      	pop	{r4, r5, r6, pc}
 802590c:	f855 3b04 	ldr.w	r3, [r5], #4
 8025910:	3601      	adds	r6, #1
 8025912:	4798      	blx	r3
 8025914:	e7ee      	b.n	80258f4 <__libc_init_array+0xc>
 8025916:	f855 3b04 	ldr.w	r3, [r5], #4
 802591a:	3601      	adds	r6, #1
 802591c:	4798      	blx	r3
 802591e:	e7f2      	b.n	8025906 <__libc_init_array+0x1e>
 8025920:	0804e944 	.word	0x0804e944
 8025924:	0804e944 	.word	0x0804e944
 8025928:	0804e944 	.word	0x0804e944
 802592c:	0804e958 	.word	0x0804e958

08025930 <malloc>:
 8025930:	4b02      	ldr	r3, [pc, #8]	; (802593c <malloc+0xc>)
 8025932:	4601      	mov	r1, r0
 8025934:	6818      	ldr	r0, [r3, #0]
 8025936:	f000 b88d 	b.w	8025a54 <_malloc_r>
 802593a:	bf00      	nop
 802593c:	20025898 	.word	0x20025898

08025940 <free>:
 8025940:	4b02      	ldr	r3, [pc, #8]	; (802594c <free+0xc>)
 8025942:	4601      	mov	r1, r0
 8025944:	6818      	ldr	r0, [r3, #0]
 8025946:	f000 b819 	b.w	802597c <_free_r>
 802594a:	bf00      	nop
 802594c:	20025898 	.word	0x20025898

08025950 <memcpy>:
 8025950:	440a      	add	r2, r1
 8025952:	1e43      	subs	r3, r0, #1
 8025954:	4291      	cmp	r1, r2
 8025956:	d100      	bne.n	802595a <memcpy+0xa>
 8025958:	4770      	bx	lr
 802595a:	b510      	push	{r4, lr}
 802595c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025960:	4291      	cmp	r1, r2
 8025962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025966:	d1f9      	bne.n	802595c <memcpy+0xc>
 8025968:	bd10      	pop	{r4, pc}

0802596a <memset>:
 802596a:	4402      	add	r2, r0
 802596c:	4603      	mov	r3, r0
 802596e:	4293      	cmp	r3, r2
 8025970:	d100      	bne.n	8025974 <memset+0xa>
 8025972:	4770      	bx	lr
 8025974:	f803 1b01 	strb.w	r1, [r3], #1
 8025978:	e7f9      	b.n	802596e <memset+0x4>
	...

0802597c <_free_r>:
 802597c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802597e:	2900      	cmp	r1, #0
 8025980:	d043      	beq.n	8025a0a <_free_r+0x8e>
 8025982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025986:	1f0c      	subs	r4, r1, #4
 8025988:	9001      	str	r0, [sp, #4]
 802598a:	2b00      	cmp	r3, #0
 802598c:	bfb8      	it	lt
 802598e:	18e4      	addlt	r4, r4, r3
 8025990:	f000 ff68 	bl	8026864 <__malloc_lock>
 8025994:	4a1e      	ldr	r2, [pc, #120]	; (8025a10 <_free_r+0x94>)
 8025996:	9801      	ldr	r0, [sp, #4]
 8025998:	6813      	ldr	r3, [r2, #0]
 802599a:	b933      	cbnz	r3, 80259aa <_free_r+0x2e>
 802599c:	6063      	str	r3, [r4, #4]
 802599e:	6014      	str	r4, [r2, #0]
 80259a0:	b003      	add	sp, #12
 80259a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80259a6:	f000 bf63 	b.w	8026870 <__malloc_unlock>
 80259aa:	42a3      	cmp	r3, r4
 80259ac:	d908      	bls.n	80259c0 <_free_r+0x44>
 80259ae:	6825      	ldr	r5, [r4, #0]
 80259b0:	1961      	adds	r1, r4, r5
 80259b2:	428b      	cmp	r3, r1
 80259b4:	bf01      	itttt	eq
 80259b6:	6819      	ldreq	r1, [r3, #0]
 80259b8:	685b      	ldreq	r3, [r3, #4]
 80259ba:	1949      	addeq	r1, r1, r5
 80259bc:	6021      	streq	r1, [r4, #0]
 80259be:	e7ed      	b.n	802599c <_free_r+0x20>
 80259c0:	461a      	mov	r2, r3
 80259c2:	685b      	ldr	r3, [r3, #4]
 80259c4:	b10b      	cbz	r3, 80259ca <_free_r+0x4e>
 80259c6:	42a3      	cmp	r3, r4
 80259c8:	d9fa      	bls.n	80259c0 <_free_r+0x44>
 80259ca:	6811      	ldr	r1, [r2, #0]
 80259cc:	1855      	adds	r5, r2, r1
 80259ce:	42a5      	cmp	r5, r4
 80259d0:	d10b      	bne.n	80259ea <_free_r+0x6e>
 80259d2:	6824      	ldr	r4, [r4, #0]
 80259d4:	4421      	add	r1, r4
 80259d6:	1854      	adds	r4, r2, r1
 80259d8:	6011      	str	r1, [r2, #0]
 80259da:	42a3      	cmp	r3, r4
 80259dc:	d1e0      	bne.n	80259a0 <_free_r+0x24>
 80259de:	681c      	ldr	r4, [r3, #0]
 80259e0:	685b      	ldr	r3, [r3, #4]
 80259e2:	4421      	add	r1, r4
 80259e4:	6053      	str	r3, [r2, #4]
 80259e6:	6011      	str	r1, [r2, #0]
 80259e8:	e7da      	b.n	80259a0 <_free_r+0x24>
 80259ea:	d902      	bls.n	80259f2 <_free_r+0x76>
 80259ec:	230c      	movs	r3, #12
 80259ee:	6003      	str	r3, [r0, #0]
 80259f0:	e7d6      	b.n	80259a0 <_free_r+0x24>
 80259f2:	6825      	ldr	r5, [r4, #0]
 80259f4:	1961      	adds	r1, r4, r5
 80259f6:	428b      	cmp	r3, r1
 80259f8:	bf02      	ittt	eq
 80259fa:	6819      	ldreq	r1, [r3, #0]
 80259fc:	685b      	ldreq	r3, [r3, #4]
 80259fe:	1949      	addeq	r1, r1, r5
 8025a00:	6063      	str	r3, [r4, #4]
 8025a02:	bf08      	it	eq
 8025a04:	6021      	streq	r1, [r4, #0]
 8025a06:	6054      	str	r4, [r2, #4]
 8025a08:	e7ca      	b.n	80259a0 <_free_r+0x24>
 8025a0a:	b003      	add	sp, #12
 8025a0c:	bd30      	pop	{r4, r5, pc}
 8025a0e:	bf00      	nop
 8025a10:	2004f734 	.word	0x2004f734

08025a14 <sbrk_aligned>:
 8025a14:	b570      	push	{r4, r5, r6, lr}
 8025a16:	4e0e      	ldr	r6, [pc, #56]	; (8025a50 <sbrk_aligned+0x3c>)
 8025a18:	460c      	mov	r4, r1
 8025a1a:	4605      	mov	r5, r0
 8025a1c:	6831      	ldr	r1, [r6, #0]
 8025a1e:	b911      	cbnz	r1, 8025a26 <sbrk_aligned+0x12>
 8025a20:	f000 fb7c 	bl	802611c <_sbrk_r>
 8025a24:	6030      	str	r0, [r6, #0]
 8025a26:	4621      	mov	r1, r4
 8025a28:	4628      	mov	r0, r5
 8025a2a:	f000 fb77 	bl	802611c <_sbrk_r>
 8025a2e:	1c43      	adds	r3, r0, #1
 8025a30:	d00a      	beq.n	8025a48 <sbrk_aligned+0x34>
 8025a32:	1cc4      	adds	r4, r0, #3
 8025a34:	f024 0403 	bic.w	r4, r4, #3
 8025a38:	42a0      	cmp	r0, r4
 8025a3a:	d007      	beq.n	8025a4c <sbrk_aligned+0x38>
 8025a3c:	1a21      	subs	r1, r4, r0
 8025a3e:	4628      	mov	r0, r5
 8025a40:	f000 fb6c 	bl	802611c <_sbrk_r>
 8025a44:	3001      	adds	r0, #1
 8025a46:	d101      	bne.n	8025a4c <sbrk_aligned+0x38>
 8025a48:	f04f 34ff 	mov.w	r4, #4294967295
 8025a4c:	4620      	mov	r0, r4
 8025a4e:	bd70      	pop	{r4, r5, r6, pc}
 8025a50:	2004f738 	.word	0x2004f738

08025a54 <_malloc_r>:
 8025a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a58:	1ccd      	adds	r5, r1, #3
 8025a5a:	4607      	mov	r7, r0
 8025a5c:	f025 0503 	bic.w	r5, r5, #3
 8025a60:	3508      	adds	r5, #8
 8025a62:	2d0c      	cmp	r5, #12
 8025a64:	bf38      	it	cc
 8025a66:	250c      	movcc	r5, #12
 8025a68:	2d00      	cmp	r5, #0
 8025a6a:	db01      	blt.n	8025a70 <_malloc_r+0x1c>
 8025a6c:	42a9      	cmp	r1, r5
 8025a6e:	d905      	bls.n	8025a7c <_malloc_r+0x28>
 8025a70:	230c      	movs	r3, #12
 8025a72:	2600      	movs	r6, #0
 8025a74:	603b      	str	r3, [r7, #0]
 8025a76:	4630      	mov	r0, r6
 8025a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a7c:	4e2e      	ldr	r6, [pc, #184]	; (8025b38 <_malloc_r+0xe4>)
 8025a7e:	f000 fef1 	bl	8026864 <__malloc_lock>
 8025a82:	6833      	ldr	r3, [r6, #0]
 8025a84:	461c      	mov	r4, r3
 8025a86:	bb34      	cbnz	r4, 8025ad6 <_malloc_r+0x82>
 8025a88:	4629      	mov	r1, r5
 8025a8a:	4638      	mov	r0, r7
 8025a8c:	f7ff ffc2 	bl	8025a14 <sbrk_aligned>
 8025a90:	1c43      	adds	r3, r0, #1
 8025a92:	4604      	mov	r4, r0
 8025a94:	d14d      	bne.n	8025b32 <_malloc_r+0xde>
 8025a96:	6834      	ldr	r4, [r6, #0]
 8025a98:	4626      	mov	r6, r4
 8025a9a:	2e00      	cmp	r6, #0
 8025a9c:	d140      	bne.n	8025b20 <_malloc_r+0xcc>
 8025a9e:	6823      	ldr	r3, [r4, #0]
 8025aa0:	4631      	mov	r1, r6
 8025aa2:	4638      	mov	r0, r7
 8025aa4:	eb04 0803 	add.w	r8, r4, r3
 8025aa8:	f000 fb38 	bl	802611c <_sbrk_r>
 8025aac:	4580      	cmp	r8, r0
 8025aae:	d13a      	bne.n	8025b26 <_malloc_r+0xd2>
 8025ab0:	6821      	ldr	r1, [r4, #0]
 8025ab2:	3503      	adds	r5, #3
 8025ab4:	4638      	mov	r0, r7
 8025ab6:	1a6d      	subs	r5, r5, r1
 8025ab8:	f025 0503 	bic.w	r5, r5, #3
 8025abc:	3508      	adds	r5, #8
 8025abe:	2d0c      	cmp	r5, #12
 8025ac0:	bf38      	it	cc
 8025ac2:	250c      	movcc	r5, #12
 8025ac4:	4629      	mov	r1, r5
 8025ac6:	f7ff ffa5 	bl	8025a14 <sbrk_aligned>
 8025aca:	3001      	adds	r0, #1
 8025acc:	d02b      	beq.n	8025b26 <_malloc_r+0xd2>
 8025ace:	6823      	ldr	r3, [r4, #0]
 8025ad0:	442b      	add	r3, r5
 8025ad2:	6023      	str	r3, [r4, #0]
 8025ad4:	e00e      	b.n	8025af4 <_malloc_r+0xa0>
 8025ad6:	6822      	ldr	r2, [r4, #0]
 8025ad8:	1b52      	subs	r2, r2, r5
 8025ada:	d41e      	bmi.n	8025b1a <_malloc_r+0xc6>
 8025adc:	2a0b      	cmp	r2, #11
 8025ade:	d916      	bls.n	8025b0e <_malloc_r+0xba>
 8025ae0:	1961      	adds	r1, r4, r5
 8025ae2:	42a3      	cmp	r3, r4
 8025ae4:	6025      	str	r5, [r4, #0]
 8025ae6:	bf18      	it	ne
 8025ae8:	6059      	strne	r1, [r3, #4]
 8025aea:	6863      	ldr	r3, [r4, #4]
 8025aec:	bf08      	it	eq
 8025aee:	6031      	streq	r1, [r6, #0]
 8025af0:	5162      	str	r2, [r4, r5]
 8025af2:	604b      	str	r3, [r1, #4]
 8025af4:	f104 060b 	add.w	r6, r4, #11
 8025af8:	4638      	mov	r0, r7
 8025afa:	f000 feb9 	bl	8026870 <__malloc_unlock>
 8025afe:	1d23      	adds	r3, r4, #4
 8025b00:	f026 0607 	bic.w	r6, r6, #7
 8025b04:	1af2      	subs	r2, r6, r3
 8025b06:	d0b6      	beq.n	8025a76 <_malloc_r+0x22>
 8025b08:	1b9b      	subs	r3, r3, r6
 8025b0a:	50a3      	str	r3, [r4, r2]
 8025b0c:	e7b3      	b.n	8025a76 <_malloc_r+0x22>
 8025b0e:	6862      	ldr	r2, [r4, #4]
 8025b10:	42a3      	cmp	r3, r4
 8025b12:	bf0c      	ite	eq
 8025b14:	6032      	streq	r2, [r6, #0]
 8025b16:	605a      	strne	r2, [r3, #4]
 8025b18:	e7ec      	b.n	8025af4 <_malloc_r+0xa0>
 8025b1a:	4623      	mov	r3, r4
 8025b1c:	6864      	ldr	r4, [r4, #4]
 8025b1e:	e7b2      	b.n	8025a86 <_malloc_r+0x32>
 8025b20:	4634      	mov	r4, r6
 8025b22:	6876      	ldr	r6, [r6, #4]
 8025b24:	e7b9      	b.n	8025a9a <_malloc_r+0x46>
 8025b26:	230c      	movs	r3, #12
 8025b28:	4638      	mov	r0, r7
 8025b2a:	603b      	str	r3, [r7, #0]
 8025b2c:	f000 fea0 	bl	8026870 <__malloc_unlock>
 8025b30:	e7a1      	b.n	8025a76 <_malloc_r+0x22>
 8025b32:	6025      	str	r5, [r4, #0]
 8025b34:	e7de      	b.n	8025af4 <_malloc_r+0xa0>
 8025b36:	bf00      	nop
 8025b38:	2004f734 	.word	0x2004f734

08025b3c <__sfputc_r>:
 8025b3c:	6893      	ldr	r3, [r2, #8]
 8025b3e:	3b01      	subs	r3, #1
 8025b40:	2b00      	cmp	r3, #0
 8025b42:	6093      	str	r3, [r2, #8]
 8025b44:	b410      	push	{r4}
 8025b46:	da08      	bge.n	8025b5a <__sfputc_r+0x1e>
 8025b48:	6994      	ldr	r4, [r2, #24]
 8025b4a:	42a3      	cmp	r3, r4
 8025b4c:	db01      	blt.n	8025b52 <__sfputc_r+0x16>
 8025b4e:	290a      	cmp	r1, #10
 8025b50:	d103      	bne.n	8025b5a <__sfputc_r+0x1e>
 8025b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025b56:	f000 bb35 	b.w	80261c4 <__swbuf_r>
 8025b5a:	6813      	ldr	r3, [r2, #0]
 8025b5c:	1c58      	adds	r0, r3, #1
 8025b5e:	6010      	str	r0, [r2, #0]
 8025b60:	4608      	mov	r0, r1
 8025b62:	7019      	strb	r1, [r3, #0]
 8025b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025b68:	4770      	bx	lr

08025b6a <__sfputs_r>:
 8025b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b6c:	4606      	mov	r6, r0
 8025b6e:	460f      	mov	r7, r1
 8025b70:	4614      	mov	r4, r2
 8025b72:	18d5      	adds	r5, r2, r3
 8025b74:	42ac      	cmp	r4, r5
 8025b76:	d101      	bne.n	8025b7c <__sfputs_r+0x12>
 8025b78:	2000      	movs	r0, #0
 8025b7a:	e007      	b.n	8025b8c <__sfputs_r+0x22>
 8025b7c:	463a      	mov	r2, r7
 8025b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025b82:	4630      	mov	r0, r6
 8025b84:	f7ff ffda 	bl	8025b3c <__sfputc_r>
 8025b88:	1c43      	adds	r3, r0, #1
 8025b8a:	d1f3      	bne.n	8025b74 <__sfputs_r+0xa>
 8025b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025b90 <_vfiprintf_r>:
 8025b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b94:	460d      	mov	r5, r1
 8025b96:	b09d      	sub	sp, #116	; 0x74
 8025b98:	4614      	mov	r4, r2
 8025b9a:	4698      	mov	r8, r3
 8025b9c:	4606      	mov	r6, r0
 8025b9e:	b118      	cbz	r0, 8025ba8 <_vfiprintf_r+0x18>
 8025ba0:	6983      	ldr	r3, [r0, #24]
 8025ba2:	b90b      	cbnz	r3, 8025ba8 <_vfiprintf_r+0x18>
 8025ba4:	f000 fd4a 	bl	802663c <__sinit>
 8025ba8:	4b89      	ldr	r3, [pc, #548]	; (8025dd0 <_vfiprintf_r+0x240>)
 8025baa:	429d      	cmp	r5, r3
 8025bac:	d11b      	bne.n	8025be6 <_vfiprintf_r+0x56>
 8025bae:	6875      	ldr	r5, [r6, #4]
 8025bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025bb2:	07d9      	lsls	r1, r3, #31
 8025bb4:	d405      	bmi.n	8025bc2 <_vfiprintf_r+0x32>
 8025bb6:	89ab      	ldrh	r3, [r5, #12]
 8025bb8:	059a      	lsls	r2, r3, #22
 8025bba:	d402      	bmi.n	8025bc2 <_vfiprintf_r+0x32>
 8025bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025bbe:	f000 fddb 	bl	8026778 <__retarget_lock_acquire_recursive>
 8025bc2:	89ab      	ldrh	r3, [r5, #12]
 8025bc4:	071b      	lsls	r3, r3, #28
 8025bc6:	d501      	bpl.n	8025bcc <_vfiprintf_r+0x3c>
 8025bc8:	692b      	ldr	r3, [r5, #16]
 8025bca:	b9eb      	cbnz	r3, 8025c08 <_vfiprintf_r+0x78>
 8025bcc:	4629      	mov	r1, r5
 8025bce:	4630      	mov	r0, r6
 8025bd0:	f000 fb4a 	bl	8026268 <__swsetup_r>
 8025bd4:	b1c0      	cbz	r0, 8025c08 <_vfiprintf_r+0x78>
 8025bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025bd8:	07dc      	lsls	r4, r3, #31
 8025bda:	d50e      	bpl.n	8025bfa <_vfiprintf_r+0x6a>
 8025bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8025be0:	b01d      	add	sp, #116	; 0x74
 8025be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025be6:	4b7b      	ldr	r3, [pc, #492]	; (8025dd4 <_vfiprintf_r+0x244>)
 8025be8:	429d      	cmp	r5, r3
 8025bea:	d101      	bne.n	8025bf0 <_vfiprintf_r+0x60>
 8025bec:	68b5      	ldr	r5, [r6, #8]
 8025bee:	e7df      	b.n	8025bb0 <_vfiprintf_r+0x20>
 8025bf0:	4b79      	ldr	r3, [pc, #484]	; (8025dd8 <_vfiprintf_r+0x248>)
 8025bf2:	429d      	cmp	r5, r3
 8025bf4:	bf08      	it	eq
 8025bf6:	68f5      	ldreq	r5, [r6, #12]
 8025bf8:	e7da      	b.n	8025bb0 <_vfiprintf_r+0x20>
 8025bfa:	89ab      	ldrh	r3, [r5, #12]
 8025bfc:	0598      	lsls	r0, r3, #22
 8025bfe:	d4ed      	bmi.n	8025bdc <_vfiprintf_r+0x4c>
 8025c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025c02:	f000 fdbb 	bl	802677c <__retarget_lock_release_recursive>
 8025c06:	e7e9      	b.n	8025bdc <_vfiprintf_r+0x4c>
 8025c08:	2300      	movs	r3, #0
 8025c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8025c0e:	f04f 0901 	mov.w	r9, #1
 8025c12:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8025ddc <_vfiprintf_r+0x24c>
 8025c16:	9309      	str	r3, [sp, #36]	; 0x24
 8025c18:	2320      	movs	r3, #32
 8025c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025c1e:	2330      	movs	r3, #48	; 0x30
 8025c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025c24:	4623      	mov	r3, r4
 8025c26:	469a      	mov	sl, r3
 8025c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025c2c:	b10a      	cbz	r2, 8025c32 <_vfiprintf_r+0xa2>
 8025c2e:	2a25      	cmp	r2, #37	; 0x25
 8025c30:	d1f9      	bne.n	8025c26 <_vfiprintf_r+0x96>
 8025c32:	ebba 0b04 	subs.w	fp, sl, r4
 8025c36:	d00b      	beq.n	8025c50 <_vfiprintf_r+0xc0>
 8025c38:	465b      	mov	r3, fp
 8025c3a:	4622      	mov	r2, r4
 8025c3c:	4629      	mov	r1, r5
 8025c3e:	4630      	mov	r0, r6
 8025c40:	f7ff ff93 	bl	8025b6a <__sfputs_r>
 8025c44:	3001      	adds	r0, #1
 8025c46:	f000 80aa 	beq.w	8025d9e <_vfiprintf_r+0x20e>
 8025c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025c4c:	445a      	add	r2, fp
 8025c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8025c50:	f89a 3000 	ldrb.w	r3, [sl]
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	f000 80a2 	beq.w	8025d9e <_vfiprintf_r+0x20e>
 8025c5a:	2300      	movs	r3, #0
 8025c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8025c60:	f10a 0a01 	add.w	sl, sl, #1
 8025c64:	9304      	str	r3, [sp, #16]
 8025c66:	9307      	str	r3, [sp, #28]
 8025c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8025c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025c72:	4654      	mov	r4, sl
 8025c74:	2205      	movs	r2, #5
 8025c76:	4859      	ldr	r0, [pc, #356]	; (8025ddc <_vfiprintf_r+0x24c>)
 8025c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025c7c:	f000 fde4 	bl	8026848 <memchr>
 8025c80:	9a04      	ldr	r2, [sp, #16]
 8025c82:	b9d8      	cbnz	r0, 8025cbc <_vfiprintf_r+0x12c>
 8025c84:	06d1      	lsls	r1, r2, #27
 8025c86:	bf44      	itt	mi
 8025c88:	2320      	movmi	r3, #32
 8025c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025c8e:	0713      	lsls	r3, r2, #28
 8025c90:	bf44      	itt	mi
 8025c92:	232b      	movmi	r3, #43	; 0x2b
 8025c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025c98:	f89a 3000 	ldrb.w	r3, [sl]
 8025c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8025c9e:	d015      	beq.n	8025ccc <_vfiprintf_r+0x13c>
 8025ca0:	9a07      	ldr	r2, [sp, #28]
 8025ca2:	4654      	mov	r4, sl
 8025ca4:	2000      	movs	r0, #0
 8025ca6:	f04f 0c0a 	mov.w	ip, #10
 8025caa:	4621      	mov	r1, r4
 8025cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025cb0:	3b30      	subs	r3, #48	; 0x30
 8025cb2:	2b09      	cmp	r3, #9
 8025cb4:	d94e      	bls.n	8025d54 <_vfiprintf_r+0x1c4>
 8025cb6:	b1b0      	cbz	r0, 8025ce6 <_vfiprintf_r+0x156>
 8025cb8:	9207      	str	r2, [sp, #28]
 8025cba:	e014      	b.n	8025ce6 <_vfiprintf_r+0x156>
 8025cbc:	eba0 0308 	sub.w	r3, r0, r8
 8025cc0:	46a2      	mov	sl, r4
 8025cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8025cc6:	4313      	orrs	r3, r2
 8025cc8:	9304      	str	r3, [sp, #16]
 8025cca:	e7d2      	b.n	8025c72 <_vfiprintf_r+0xe2>
 8025ccc:	9b03      	ldr	r3, [sp, #12]
 8025cce:	1d19      	adds	r1, r3, #4
 8025cd0:	681b      	ldr	r3, [r3, #0]
 8025cd2:	2b00      	cmp	r3, #0
 8025cd4:	9103      	str	r1, [sp, #12]
 8025cd6:	bfbb      	ittet	lt
 8025cd8:	425b      	neglt	r3, r3
 8025cda:	f042 0202 	orrlt.w	r2, r2, #2
 8025cde:	9307      	strge	r3, [sp, #28]
 8025ce0:	9307      	strlt	r3, [sp, #28]
 8025ce2:	bfb8      	it	lt
 8025ce4:	9204      	strlt	r2, [sp, #16]
 8025ce6:	7823      	ldrb	r3, [r4, #0]
 8025ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8025cea:	d10c      	bne.n	8025d06 <_vfiprintf_r+0x176>
 8025cec:	7863      	ldrb	r3, [r4, #1]
 8025cee:	2b2a      	cmp	r3, #42	; 0x2a
 8025cf0:	d135      	bne.n	8025d5e <_vfiprintf_r+0x1ce>
 8025cf2:	9b03      	ldr	r3, [sp, #12]
 8025cf4:	3402      	adds	r4, #2
 8025cf6:	1d1a      	adds	r2, r3, #4
 8025cf8:	681b      	ldr	r3, [r3, #0]
 8025cfa:	2b00      	cmp	r3, #0
 8025cfc:	9203      	str	r2, [sp, #12]
 8025cfe:	bfb8      	it	lt
 8025d00:	f04f 33ff 	movlt.w	r3, #4294967295
 8025d04:	9305      	str	r3, [sp, #20]
 8025d06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8025dec <_vfiprintf_r+0x25c>
 8025d0a:	2203      	movs	r2, #3
 8025d0c:	7821      	ldrb	r1, [r4, #0]
 8025d0e:	4650      	mov	r0, sl
 8025d10:	f000 fd9a 	bl	8026848 <memchr>
 8025d14:	b140      	cbz	r0, 8025d28 <_vfiprintf_r+0x198>
 8025d16:	2340      	movs	r3, #64	; 0x40
 8025d18:	eba0 000a 	sub.w	r0, r0, sl
 8025d1c:	3401      	adds	r4, #1
 8025d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8025d22:	9b04      	ldr	r3, [sp, #16]
 8025d24:	4303      	orrs	r3, r0
 8025d26:	9304      	str	r3, [sp, #16]
 8025d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025d2c:	2206      	movs	r2, #6
 8025d2e:	482c      	ldr	r0, [pc, #176]	; (8025de0 <_vfiprintf_r+0x250>)
 8025d30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025d34:	f000 fd88 	bl	8026848 <memchr>
 8025d38:	2800      	cmp	r0, #0
 8025d3a:	d03f      	beq.n	8025dbc <_vfiprintf_r+0x22c>
 8025d3c:	4b29      	ldr	r3, [pc, #164]	; (8025de4 <_vfiprintf_r+0x254>)
 8025d3e:	bb1b      	cbnz	r3, 8025d88 <_vfiprintf_r+0x1f8>
 8025d40:	9b03      	ldr	r3, [sp, #12]
 8025d42:	3307      	adds	r3, #7
 8025d44:	f023 0307 	bic.w	r3, r3, #7
 8025d48:	3308      	adds	r3, #8
 8025d4a:	9303      	str	r3, [sp, #12]
 8025d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d4e:	443b      	add	r3, r7
 8025d50:	9309      	str	r3, [sp, #36]	; 0x24
 8025d52:	e767      	b.n	8025c24 <_vfiprintf_r+0x94>
 8025d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8025d58:	460c      	mov	r4, r1
 8025d5a:	2001      	movs	r0, #1
 8025d5c:	e7a5      	b.n	8025caa <_vfiprintf_r+0x11a>
 8025d5e:	2300      	movs	r3, #0
 8025d60:	3401      	adds	r4, #1
 8025d62:	f04f 0c0a 	mov.w	ip, #10
 8025d66:	4619      	mov	r1, r3
 8025d68:	9305      	str	r3, [sp, #20]
 8025d6a:	4620      	mov	r0, r4
 8025d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025d70:	3a30      	subs	r2, #48	; 0x30
 8025d72:	2a09      	cmp	r2, #9
 8025d74:	d903      	bls.n	8025d7e <_vfiprintf_r+0x1ee>
 8025d76:	2b00      	cmp	r3, #0
 8025d78:	d0c5      	beq.n	8025d06 <_vfiprintf_r+0x176>
 8025d7a:	9105      	str	r1, [sp, #20]
 8025d7c:	e7c3      	b.n	8025d06 <_vfiprintf_r+0x176>
 8025d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8025d82:	4604      	mov	r4, r0
 8025d84:	2301      	movs	r3, #1
 8025d86:	e7f0      	b.n	8025d6a <_vfiprintf_r+0x1da>
 8025d88:	ab03      	add	r3, sp, #12
 8025d8a:	462a      	mov	r2, r5
 8025d8c:	a904      	add	r1, sp, #16
 8025d8e:	4630      	mov	r0, r6
 8025d90:	9300      	str	r3, [sp, #0]
 8025d92:	4b15      	ldr	r3, [pc, #84]	; (8025de8 <_vfiprintf_r+0x258>)
 8025d94:	e000      	b.n	8025d98 <_vfiprintf_r+0x208>
 8025d96:	bf00      	nop
 8025d98:	4607      	mov	r7, r0
 8025d9a:	1c78      	adds	r0, r7, #1
 8025d9c:	d1d6      	bne.n	8025d4c <_vfiprintf_r+0x1bc>
 8025d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025da0:	07d9      	lsls	r1, r3, #31
 8025da2:	d405      	bmi.n	8025db0 <_vfiprintf_r+0x220>
 8025da4:	89ab      	ldrh	r3, [r5, #12]
 8025da6:	059a      	lsls	r2, r3, #22
 8025da8:	d402      	bmi.n	8025db0 <_vfiprintf_r+0x220>
 8025daa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025dac:	f000 fce6 	bl	802677c <__retarget_lock_release_recursive>
 8025db0:	89ab      	ldrh	r3, [r5, #12]
 8025db2:	065b      	lsls	r3, r3, #25
 8025db4:	f53f af12 	bmi.w	8025bdc <_vfiprintf_r+0x4c>
 8025db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025dba:	e711      	b.n	8025be0 <_vfiprintf_r+0x50>
 8025dbc:	ab03      	add	r3, sp, #12
 8025dbe:	462a      	mov	r2, r5
 8025dc0:	a904      	add	r1, sp, #16
 8025dc2:	4630      	mov	r0, r6
 8025dc4:	9300      	str	r3, [sp, #0]
 8025dc6:	4b08      	ldr	r3, [pc, #32]	; (8025de8 <_vfiprintf_r+0x258>)
 8025dc8:	f000 f882 	bl	8025ed0 <_printf_i>
 8025dcc:	e7e4      	b.n	8025d98 <_vfiprintf_r+0x208>
 8025dce:	bf00      	nop
 8025dd0:	08028f2c 	.word	0x08028f2c
 8025dd4:	08028f4c 	.word	0x08028f4c
 8025dd8:	08028f0c 	.word	0x08028f0c
 8025ddc:	08028ed4 	.word	0x08028ed4
 8025de0:	08028ede 	.word	0x08028ede
 8025de4:	00000000 	.word	0x00000000
 8025de8:	08025b6b 	.word	0x08025b6b
 8025dec:	08028eda 	.word	0x08028eda

08025df0 <_printf_common>:
 8025df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025df4:	4616      	mov	r6, r2
 8025df6:	4699      	mov	r9, r3
 8025df8:	688a      	ldr	r2, [r1, #8]
 8025dfa:	4607      	mov	r7, r0
 8025dfc:	690b      	ldr	r3, [r1, #16]
 8025dfe:	460c      	mov	r4, r1
 8025e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025e04:	4293      	cmp	r3, r2
 8025e06:	bfb8      	it	lt
 8025e08:	4613      	movlt	r3, r2
 8025e0a:	6033      	str	r3, [r6, #0]
 8025e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025e10:	b10a      	cbz	r2, 8025e16 <_printf_common+0x26>
 8025e12:	3301      	adds	r3, #1
 8025e14:	6033      	str	r3, [r6, #0]
 8025e16:	6823      	ldr	r3, [r4, #0]
 8025e18:	0699      	lsls	r1, r3, #26
 8025e1a:	bf42      	ittt	mi
 8025e1c:	6833      	ldrmi	r3, [r6, #0]
 8025e1e:	3302      	addmi	r3, #2
 8025e20:	6033      	strmi	r3, [r6, #0]
 8025e22:	6825      	ldr	r5, [r4, #0]
 8025e24:	f015 0506 	ands.w	r5, r5, #6
 8025e28:	d106      	bne.n	8025e38 <_printf_common+0x48>
 8025e2a:	f104 0a19 	add.w	sl, r4, #25
 8025e2e:	68e3      	ldr	r3, [r4, #12]
 8025e30:	6832      	ldr	r2, [r6, #0]
 8025e32:	1a9b      	subs	r3, r3, r2
 8025e34:	42ab      	cmp	r3, r5
 8025e36:	dc29      	bgt.n	8025e8c <_printf_common+0x9c>
 8025e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025e3c:	1e13      	subs	r3, r2, #0
 8025e3e:	6822      	ldr	r2, [r4, #0]
 8025e40:	bf18      	it	ne
 8025e42:	2301      	movne	r3, #1
 8025e44:	0692      	lsls	r2, r2, #26
 8025e46:	d42e      	bmi.n	8025ea6 <_printf_common+0xb6>
 8025e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025e4c:	4649      	mov	r1, r9
 8025e4e:	4638      	mov	r0, r7
 8025e50:	47c0      	blx	r8
 8025e52:	3001      	adds	r0, #1
 8025e54:	d021      	beq.n	8025e9a <_printf_common+0xaa>
 8025e56:	6823      	ldr	r3, [r4, #0]
 8025e58:	341a      	adds	r4, #26
 8025e5a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8025e5e:	f003 0306 	and.w	r3, r3, #6
 8025e62:	6832      	ldr	r2, [r6, #0]
 8025e64:	2600      	movs	r6, #0
 8025e66:	2b04      	cmp	r3, #4
 8025e68:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8025e6c:	bf08      	it	eq
 8025e6e:	1aad      	subeq	r5, r5, r2
 8025e70:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8025e74:	bf14      	ite	ne
 8025e76:	2500      	movne	r5, #0
 8025e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025e7c:	4293      	cmp	r3, r2
 8025e7e:	bfc4      	itt	gt
 8025e80:	1a9b      	subgt	r3, r3, r2
 8025e82:	18ed      	addgt	r5, r5, r3
 8025e84:	42b5      	cmp	r5, r6
 8025e86:	d11a      	bne.n	8025ebe <_printf_common+0xce>
 8025e88:	2000      	movs	r0, #0
 8025e8a:	e008      	b.n	8025e9e <_printf_common+0xae>
 8025e8c:	2301      	movs	r3, #1
 8025e8e:	4652      	mov	r2, sl
 8025e90:	4649      	mov	r1, r9
 8025e92:	4638      	mov	r0, r7
 8025e94:	47c0      	blx	r8
 8025e96:	3001      	adds	r0, #1
 8025e98:	d103      	bne.n	8025ea2 <_printf_common+0xb2>
 8025e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8025e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ea2:	3501      	adds	r5, #1
 8025ea4:	e7c3      	b.n	8025e2e <_printf_common+0x3e>
 8025ea6:	18e1      	adds	r1, r4, r3
 8025ea8:	1c5a      	adds	r2, r3, #1
 8025eaa:	2030      	movs	r0, #48	; 0x30
 8025eac:	3302      	adds	r3, #2
 8025eae:	4422      	add	r2, r4
 8025eb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025ebc:	e7c4      	b.n	8025e48 <_printf_common+0x58>
 8025ebe:	2301      	movs	r3, #1
 8025ec0:	4622      	mov	r2, r4
 8025ec2:	4649      	mov	r1, r9
 8025ec4:	4638      	mov	r0, r7
 8025ec6:	47c0      	blx	r8
 8025ec8:	3001      	adds	r0, #1
 8025eca:	d0e6      	beq.n	8025e9a <_printf_common+0xaa>
 8025ecc:	3601      	adds	r6, #1
 8025ece:	e7d9      	b.n	8025e84 <_printf_common+0x94>

08025ed0 <_printf_i>:
 8025ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025ed4:	7e0f      	ldrb	r7, [r1, #24]
 8025ed6:	4691      	mov	r9, r2
 8025ed8:	4680      	mov	r8, r0
 8025eda:	460c      	mov	r4, r1
 8025edc:	2f78      	cmp	r7, #120	; 0x78
 8025ede:	469a      	mov	sl, r3
 8025ee0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025ee6:	d807      	bhi.n	8025ef8 <_printf_i+0x28>
 8025ee8:	2f62      	cmp	r7, #98	; 0x62
 8025eea:	d80a      	bhi.n	8025f02 <_printf_i+0x32>
 8025eec:	2f00      	cmp	r7, #0
 8025eee:	f000 80d8 	beq.w	80260a2 <_printf_i+0x1d2>
 8025ef2:	2f58      	cmp	r7, #88	; 0x58
 8025ef4:	f000 80a3 	beq.w	802603e <_printf_i+0x16e>
 8025ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025f00:	e03a      	b.n	8025f78 <_printf_i+0xa8>
 8025f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025f06:	2b15      	cmp	r3, #21
 8025f08:	d8f6      	bhi.n	8025ef8 <_printf_i+0x28>
 8025f0a:	a101      	add	r1, pc, #4	; (adr r1, 8025f10 <_printf_i+0x40>)
 8025f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025f10:	08025f69 	.word	0x08025f69
 8025f14:	08025f7d 	.word	0x08025f7d
 8025f18:	08025ef9 	.word	0x08025ef9
 8025f1c:	08025ef9 	.word	0x08025ef9
 8025f20:	08025ef9 	.word	0x08025ef9
 8025f24:	08025ef9 	.word	0x08025ef9
 8025f28:	08025f7d 	.word	0x08025f7d
 8025f2c:	08025ef9 	.word	0x08025ef9
 8025f30:	08025ef9 	.word	0x08025ef9
 8025f34:	08025ef9 	.word	0x08025ef9
 8025f38:	08025ef9 	.word	0x08025ef9
 8025f3c:	08026089 	.word	0x08026089
 8025f40:	08025fad 	.word	0x08025fad
 8025f44:	0802606b 	.word	0x0802606b
 8025f48:	08025ef9 	.word	0x08025ef9
 8025f4c:	08025ef9 	.word	0x08025ef9
 8025f50:	080260ab 	.word	0x080260ab
 8025f54:	08025ef9 	.word	0x08025ef9
 8025f58:	08025fad 	.word	0x08025fad
 8025f5c:	08025ef9 	.word	0x08025ef9
 8025f60:	08025ef9 	.word	0x08025ef9
 8025f64:	08026073 	.word	0x08026073
 8025f68:	682b      	ldr	r3, [r5, #0]
 8025f6a:	1d1a      	adds	r2, r3, #4
 8025f6c:	681b      	ldr	r3, [r3, #0]
 8025f6e:	602a      	str	r2, [r5, #0]
 8025f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025f78:	2301      	movs	r3, #1
 8025f7a:	e0a3      	b.n	80260c4 <_printf_i+0x1f4>
 8025f7c:	6820      	ldr	r0, [r4, #0]
 8025f7e:	6829      	ldr	r1, [r5, #0]
 8025f80:	0606      	lsls	r6, r0, #24
 8025f82:	f101 0304 	add.w	r3, r1, #4
 8025f86:	d50a      	bpl.n	8025f9e <_printf_i+0xce>
 8025f88:	680e      	ldr	r6, [r1, #0]
 8025f8a:	602b      	str	r3, [r5, #0]
 8025f8c:	2e00      	cmp	r6, #0
 8025f8e:	da03      	bge.n	8025f98 <_printf_i+0xc8>
 8025f90:	232d      	movs	r3, #45	; 0x2d
 8025f92:	4276      	negs	r6, r6
 8025f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025f98:	485e      	ldr	r0, [pc, #376]	; (8026114 <_printf_i+0x244>)
 8025f9a:	230a      	movs	r3, #10
 8025f9c:	e019      	b.n	8025fd2 <_printf_i+0x102>
 8025f9e:	680e      	ldr	r6, [r1, #0]
 8025fa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025fa4:	602b      	str	r3, [r5, #0]
 8025fa6:	bf18      	it	ne
 8025fa8:	b236      	sxthne	r6, r6
 8025faa:	e7ef      	b.n	8025f8c <_printf_i+0xbc>
 8025fac:	682b      	ldr	r3, [r5, #0]
 8025fae:	6820      	ldr	r0, [r4, #0]
 8025fb0:	1d19      	adds	r1, r3, #4
 8025fb2:	6029      	str	r1, [r5, #0]
 8025fb4:	0601      	lsls	r1, r0, #24
 8025fb6:	d501      	bpl.n	8025fbc <_printf_i+0xec>
 8025fb8:	681e      	ldr	r6, [r3, #0]
 8025fba:	e002      	b.n	8025fc2 <_printf_i+0xf2>
 8025fbc:	0646      	lsls	r6, r0, #25
 8025fbe:	d5fb      	bpl.n	8025fb8 <_printf_i+0xe8>
 8025fc0:	881e      	ldrh	r6, [r3, #0]
 8025fc2:	2f6f      	cmp	r7, #111	; 0x6f
 8025fc4:	4853      	ldr	r0, [pc, #332]	; (8026114 <_printf_i+0x244>)
 8025fc6:	bf0c      	ite	eq
 8025fc8:	2308      	moveq	r3, #8
 8025fca:	230a      	movne	r3, #10
 8025fcc:	2100      	movs	r1, #0
 8025fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025fd2:	6865      	ldr	r5, [r4, #4]
 8025fd4:	2d00      	cmp	r5, #0
 8025fd6:	60a5      	str	r5, [r4, #8]
 8025fd8:	bfa2      	ittt	ge
 8025fda:	6821      	ldrge	r1, [r4, #0]
 8025fdc:	f021 0104 	bicge.w	r1, r1, #4
 8025fe0:	6021      	strge	r1, [r4, #0]
 8025fe2:	b90e      	cbnz	r6, 8025fe8 <_printf_i+0x118>
 8025fe4:	2d00      	cmp	r5, #0
 8025fe6:	d04d      	beq.n	8026084 <_printf_i+0x1b4>
 8025fe8:	4615      	mov	r5, r2
 8025fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8025fee:	fb03 6711 	mls	r7, r3, r1, r6
 8025ff2:	5dc7      	ldrb	r7, [r0, r7]
 8025ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025ff8:	4637      	mov	r7, r6
 8025ffa:	460e      	mov	r6, r1
 8025ffc:	42bb      	cmp	r3, r7
 8025ffe:	d9f4      	bls.n	8025fea <_printf_i+0x11a>
 8026000:	2b08      	cmp	r3, #8
 8026002:	d10b      	bne.n	802601c <_printf_i+0x14c>
 8026004:	6823      	ldr	r3, [r4, #0]
 8026006:	07de      	lsls	r6, r3, #31
 8026008:	d508      	bpl.n	802601c <_printf_i+0x14c>
 802600a:	6923      	ldr	r3, [r4, #16]
 802600c:	6861      	ldr	r1, [r4, #4]
 802600e:	4299      	cmp	r1, r3
 8026010:	bfde      	ittt	le
 8026012:	2330      	movle	r3, #48	; 0x30
 8026014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026018:	f105 35ff 	addle.w	r5, r5, #4294967295
 802601c:	1b52      	subs	r2, r2, r5
 802601e:	6122      	str	r2, [r4, #16]
 8026020:	464b      	mov	r3, r9
 8026022:	aa03      	add	r2, sp, #12
 8026024:	4621      	mov	r1, r4
 8026026:	4640      	mov	r0, r8
 8026028:	f8cd a000 	str.w	sl, [sp]
 802602c:	f7ff fee0 	bl	8025df0 <_printf_common>
 8026030:	3001      	adds	r0, #1
 8026032:	d14c      	bne.n	80260ce <_printf_i+0x1fe>
 8026034:	f04f 30ff 	mov.w	r0, #4294967295
 8026038:	b004      	add	sp, #16
 802603a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802603e:	4835      	ldr	r0, [pc, #212]	; (8026114 <_printf_i+0x244>)
 8026040:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026044:	6829      	ldr	r1, [r5, #0]
 8026046:	6823      	ldr	r3, [r4, #0]
 8026048:	f851 6b04 	ldr.w	r6, [r1], #4
 802604c:	6029      	str	r1, [r5, #0]
 802604e:	061d      	lsls	r5, r3, #24
 8026050:	d514      	bpl.n	802607c <_printf_i+0x1ac>
 8026052:	07df      	lsls	r7, r3, #31
 8026054:	bf44      	itt	mi
 8026056:	f043 0320 	orrmi.w	r3, r3, #32
 802605a:	6023      	strmi	r3, [r4, #0]
 802605c:	b91e      	cbnz	r6, 8026066 <_printf_i+0x196>
 802605e:	6823      	ldr	r3, [r4, #0]
 8026060:	f023 0320 	bic.w	r3, r3, #32
 8026064:	6023      	str	r3, [r4, #0]
 8026066:	2310      	movs	r3, #16
 8026068:	e7b0      	b.n	8025fcc <_printf_i+0xfc>
 802606a:	6823      	ldr	r3, [r4, #0]
 802606c:	f043 0320 	orr.w	r3, r3, #32
 8026070:	6023      	str	r3, [r4, #0]
 8026072:	2378      	movs	r3, #120	; 0x78
 8026074:	4828      	ldr	r0, [pc, #160]	; (8026118 <_printf_i+0x248>)
 8026076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802607a:	e7e3      	b.n	8026044 <_printf_i+0x174>
 802607c:	0659      	lsls	r1, r3, #25
 802607e:	bf48      	it	mi
 8026080:	b2b6      	uxthmi	r6, r6
 8026082:	e7e6      	b.n	8026052 <_printf_i+0x182>
 8026084:	4615      	mov	r5, r2
 8026086:	e7bb      	b.n	8026000 <_printf_i+0x130>
 8026088:	682b      	ldr	r3, [r5, #0]
 802608a:	6826      	ldr	r6, [r4, #0]
 802608c:	1d18      	adds	r0, r3, #4
 802608e:	6961      	ldr	r1, [r4, #20]
 8026090:	6028      	str	r0, [r5, #0]
 8026092:	0635      	lsls	r5, r6, #24
 8026094:	681b      	ldr	r3, [r3, #0]
 8026096:	d501      	bpl.n	802609c <_printf_i+0x1cc>
 8026098:	6019      	str	r1, [r3, #0]
 802609a:	e002      	b.n	80260a2 <_printf_i+0x1d2>
 802609c:	0670      	lsls	r0, r6, #25
 802609e:	d5fb      	bpl.n	8026098 <_printf_i+0x1c8>
 80260a0:	8019      	strh	r1, [r3, #0]
 80260a2:	2300      	movs	r3, #0
 80260a4:	4615      	mov	r5, r2
 80260a6:	6123      	str	r3, [r4, #16]
 80260a8:	e7ba      	b.n	8026020 <_printf_i+0x150>
 80260aa:	682b      	ldr	r3, [r5, #0]
 80260ac:	2100      	movs	r1, #0
 80260ae:	1d1a      	adds	r2, r3, #4
 80260b0:	602a      	str	r2, [r5, #0]
 80260b2:	681d      	ldr	r5, [r3, #0]
 80260b4:	6862      	ldr	r2, [r4, #4]
 80260b6:	4628      	mov	r0, r5
 80260b8:	f000 fbc6 	bl	8026848 <memchr>
 80260bc:	b108      	cbz	r0, 80260c2 <_printf_i+0x1f2>
 80260be:	1b40      	subs	r0, r0, r5
 80260c0:	6060      	str	r0, [r4, #4]
 80260c2:	6863      	ldr	r3, [r4, #4]
 80260c4:	6123      	str	r3, [r4, #16]
 80260c6:	2300      	movs	r3, #0
 80260c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80260cc:	e7a8      	b.n	8026020 <_printf_i+0x150>
 80260ce:	6923      	ldr	r3, [r4, #16]
 80260d0:	462a      	mov	r2, r5
 80260d2:	4649      	mov	r1, r9
 80260d4:	4640      	mov	r0, r8
 80260d6:	47d0      	blx	sl
 80260d8:	3001      	adds	r0, #1
 80260da:	d0ab      	beq.n	8026034 <_printf_i+0x164>
 80260dc:	6823      	ldr	r3, [r4, #0]
 80260de:	079b      	lsls	r3, r3, #30
 80260e0:	d413      	bmi.n	802610a <_printf_i+0x23a>
 80260e2:	68e0      	ldr	r0, [r4, #12]
 80260e4:	9b03      	ldr	r3, [sp, #12]
 80260e6:	4298      	cmp	r0, r3
 80260e8:	bfb8      	it	lt
 80260ea:	4618      	movlt	r0, r3
 80260ec:	e7a4      	b.n	8026038 <_printf_i+0x168>
 80260ee:	2301      	movs	r3, #1
 80260f0:	4632      	mov	r2, r6
 80260f2:	4649      	mov	r1, r9
 80260f4:	4640      	mov	r0, r8
 80260f6:	47d0      	blx	sl
 80260f8:	3001      	adds	r0, #1
 80260fa:	d09b      	beq.n	8026034 <_printf_i+0x164>
 80260fc:	3501      	adds	r5, #1
 80260fe:	68e3      	ldr	r3, [r4, #12]
 8026100:	9903      	ldr	r1, [sp, #12]
 8026102:	1a5b      	subs	r3, r3, r1
 8026104:	42ab      	cmp	r3, r5
 8026106:	dcf2      	bgt.n	80260ee <_printf_i+0x21e>
 8026108:	e7eb      	b.n	80260e2 <_printf_i+0x212>
 802610a:	2500      	movs	r5, #0
 802610c:	f104 0619 	add.w	r6, r4, #25
 8026110:	e7f5      	b.n	80260fe <_printf_i+0x22e>
 8026112:	bf00      	nop
 8026114:	08028ee5 	.word	0x08028ee5
 8026118:	08028ef6 	.word	0x08028ef6

0802611c <_sbrk_r>:
 802611c:	b538      	push	{r3, r4, r5, lr}
 802611e:	2300      	movs	r3, #0
 8026120:	4d05      	ldr	r5, [pc, #20]	; (8026138 <_sbrk_r+0x1c>)
 8026122:	4604      	mov	r4, r0
 8026124:	4608      	mov	r0, r1
 8026126:	602b      	str	r3, [r5, #0]
 8026128:	f7db fee4 	bl	8001ef4 <_sbrk>
 802612c:	1c43      	adds	r3, r0, #1
 802612e:	d102      	bne.n	8026136 <_sbrk_r+0x1a>
 8026130:	682b      	ldr	r3, [r5, #0]
 8026132:	b103      	cbz	r3, 8026136 <_sbrk_r+0x1a>
 8026134:	6023      	str	r3, [r4, #0]
 8026136:	bd38      	pop	{r3, r4, r5, pc}
 8026138:	2004f8d8 	.word	0x2004f8d8

0802613c <_raise_r>:
 802613c:	291f      	cmp	r1, #31
 802613e:	b538      	push	{r3, r4, r5, lr}
 8026140:	4604      	mov	r4, r0
 8026142:	460d      	mov	r5, r1
 8026144:	d904      	bls.n	8026150 <_raise_r+0x14>
 8026146:	2316      	movs	r3, #22
 8026148:	6003      	str	r3, [r0, #0]
 802614a:	f04f 30ff 	mov.w	r0, #4294967295
 802614e:	bd38      	pop	{r3, r4, r5, pc}
 8026150:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026152:	b112      	cbz	r2, 802615a <_raise_r+0x1e>
 8026154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026158:	b94b      	cbnz	r3, 802616e <_raise_r+0x32>
 802615a:	4620      	mov	r0, r4
 802615c:	f000 f830 	bl	80261c0 <_getpid_r>
 8026160:	462a      	mov	r2, r5
 8026162:	4601      	mov	r1, r0
 8026164:	4620      	mov	r0, r4
 8026166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802616a:	f000 b817 	b.w	802619c <_kill_r>
 802616e:	2b01      	cmp	r3, #1
 8026170:	d00a      	beq.n	8026188 <_raise_r+0x4c>
 8026172:	1c59      	adds	r1, r3, #1
 8026174:	d103      	bne.n	802617e <_raise_r+0x42>
 8026176:	2316      	movs	r3, #22
 8026178:	6003      	str	r3, [r0, #0]
 802617a:	2001      	movs	r0, #1
 802617c:	e7e7      	b.n	802614e <_raise_r+0x12>
 802617e:	2400      	movs	r4, #0
 8026180:	4628      	mov	r0, r5
 8026182:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026186:	4798      	blx	r3
 8026188:	2000      	movs	r0, #0
 802618a:	e7e0      	b.n	802614e <_raise_r+0x12>

0802618c <raise>:
 802618c:	4b02      	ldr	r3, [pc, #8]	; (8026198 <raise+0xc>)
 802618e:	4601      	mov	r1, r0
 8026190:	6818      	ldr	r0, [r3, #0]
 8026192:	f7ff bfd3 	b.w	802613c <_raise_r>
 8026196:	bf00      	nop
 8026198:	20025898 	.word	0x20025898

0802619c <_kill_r>:
 802619c:	b538      	push	{r3, r4, r5, lr}
 802619e:	2300      	movs	r3, #0
 80261a0:	4d06      	ldr	r5, [pc, #24]	; (80261bc <_kill_r+0x20>)
 80261a2:	4604      	mov	r4, r0
 80261a4:	4608      	mov	r0, r1
 80261a6:	4611      	mov	r1, r2
 80261a8:	602b      	str	r3, [r5, #0]
 80261aa:	f7db fe1b 	bl	8001de4 <_kill>
 80261ae:	1c43      	adds	r3, r0, #1
 80261b0:	d102      	bne.n	80261b8 <_kill_r+0x1c>
 80261b2:	682b      	ldr	r3, [r5, #0]
 80261b4:	b103      	cbz	r3, 80261b8 <_kill_r+0x1c>
 80261b6:	6023      	str	r3, [r4, #0]
 80261b8:	bd38      	pop	{r3, r4, r5, pc}
 80261ba:	bf00      	nop
 80261bc:	2004f8d8 	.word	0x2004f8d8

080261c0 <_getpid_r>:
 80261c0:	f7db be08 	b.w	8001dd4 <_getpid>

080261c4 <__swbuf_r>:
 80261c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80261c6:	460e      	mov	r6, r1
 80261c8:	4614      	mov	r4, r2
 80261ca:	4605      	mov	r5, r0
 80261cc:	b118      	cbz	r0, 80261d6 <__swbuf_r+0x12>
 80261ce:	6983      	ldr	r3, [r0, #24]
 80261d0:	b90b      	cbnz	r3, 80261d6 <__swbuf_r+0x12>
 80261d2:	f000 fa33 	bl	802663c <__sinit>
 80261d6:	4b21      	ldr	r3, [pc, #132]	; (802625c <__swbuf_r+0x98>)
 80261d8:	429c      	cmp	r4, r3
 80261da:	d12b      	bne.n	8026234 <__swbuf_r+0x70>
 80261dc:	686c      	ldr	r4, [r5, #4]
 80261de:	69a3      	ldr	r3, [r4, #24]
 80261e0:	60a3      	str	r3, [r4, #8]
 80261e2:	89a3      	ldrh	r3, [r4, #12]
 80261e4:	071a      	lsls	r2, r3, #28
 80261e6:	d52f      	bpl.n	8026248 <__swbuf_r+0x84>
 80261e8:	6923      	ldr	r3, [r4, #16]
 80261ea:	b36b      	cbz	r3, 8026248 <__swbuf_r+0x84>
 80261ec:	6923      	ldr	r3, [r4, #16]
 80261ee:	b2f6      	uxtb	r6, r6
 80261f0:	6820      	ldr	r0, [r4, #0]
 80261f2:	4637      	mov	r7, r6
 80261f4:	1ac0      	subs	r0, r0, r3
 80261f6:	6963      	ldr	r3, [r4, #20]
 80261f8:	4283      	cmp	r3, r0
 80261fa:	dc04      	bgt.n	8026206 <__swbuf_r+0x42>
 80261fc:	4621      	mov	r1, r4
 80261fe:	4628      	mov	r0, r5
 8026200:	f000 f988 	bl	8026514 <_fflush_r>
 8026204:	bb30      	cbnz	r0, 8026254 <__swbuf_r+0x90>
 8026206:	68a3      	ldr	r3, [r4, #8]
 8026208:	3001      	adds	r0, #1
 802620a:	3b01      	subs	r3, #1
 802620c:	60a3      	str	r3, [r4, #8]
 802620e:	6823      	ldr	r3, [r4, #0]
 8026210:	1c5a      	adds	r2, r3, #1
 8026212:	6022      	str	r2, [r4, #0]
 8026214:	701e      	strb	r6, [r3, #0]
 8026216:	6963      	ldr	r3, [r4, #20]
 8026218:	4283      	cmp	r3, r0
 802621a:	d004      	beq.n	8026226 <__swbuf_r+0x62>
 802621c:	89a3      	ldrh	r3, [r4, #12]
 802621e:	07db      	lsls	r3, r3, #31
 8026220:	d506      	bpl.n	8026230 <__swbuf_r+0x6c>
 8026222:	2e0a      	cmp	r6, #10
 8026224:	d104      	bne.n	8026230 <__swbuf_r+0x6c>
 8026226:	4621      	mov	r1, r4
 8026228:	4628      	mov	r0, r5
 802622a:	f000 f973 	bl	8026514 <_fflush_r>
 802622e:	b988      	cbnz	r0, 8026254 <__swbuf_r+0x90>
 8026230:	4638      	mov	r0, r7
 8026232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026234:	4b0a      	ldr	r3, [pc, #40]	; (8026260 <__swbuf_r+0x9c>)
 8026236:	429c      	cmp	r4, r3
 8026238:	d101      	bne.n	802623e <__swbuf_r+0x7a>
 802623a:	68ac      	ldr	r4, [r5, #8]
 802623c:	e7cf      	b.n	80261de <__swbuf_r+0x1a>
 802623e:	4b09      	ldr	r3, [pc, #36]	; (8026264 <__swbuf_r+0xa0>)
 8026240:	429c      	cmp	r4, r3
 8026242:	bf08      	it	eq
 8026244:	68ec      	ldreq	r4, [r5, #12]
 8026246:	e7ca      	b.n	80261de <__swbuf_r+0x1a>
 8026248:	4621      	mov	r1, r4
 802624a:	4628      	mov	r0, r5
 802624c:	f000 f80c 	bl	8026268 <__swsetup_r>
 8026250:	2800      	cmp	r0, #0
 8026252:	d0cb      	beq.n	80261ec <__swbuf_r+0x28>
 8026254:	f04f 37ff 	mov.w	r7, #4294967295
 8026258:	e7ea      	b.n	8026230 <__swbuf_r+0x6c>
 802625a:	bf00      	nop
 802625c:	08028f2c 	.word	0x08028f2c
 8026260:	08028f4c 	.word	0x08028f4c
 8026264:	08028f0c 	.word	0x08028f0c

08026268 <__swsetup_r>:
 8026268:	4b32      	ldr	r3, [pc, #200]	; (8026334 <__swsetup_r+0xcc>)
 802626a:	b570      	push	{r4, r5, r6, lr}
 802626c:	681d      	ldr	r5, [r3, #0]
 802626e:	4606      	mov	r6, r0
 8026270:	460c      	mov	r4, r1
 8026272:	b125      	cbz	r5, 802627e <__swsetup_r+0x16>
 8026274:	69ab      	ldr	r3, [r5, #24]
 8026276:	b913      	cbnz	r3, 802627e <__swsetup_r+0x16>
 8026278:	4628      	mov	r0, r5
 802627a:	f000 f9df 	bl	802663c <__sinit>
 802627e:	4b2e      	ldr	r3, [pc, #184]	; (8026338 <__swsetup_r+0xd0>)
 8026280:	429c      	cmp	r4, r3
 8026282:	d10f      	bne.n	80262a4 <__swsetup_r+0x3c>
 8026284:	686c      	ldr	r4, [r5, #4]
 8026286:	89a3      	ldrh	r3, [r4, #12]
 8026288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802628c:	0719      	lsls	r1, r3, #28
 802628e:	d42c      	bmi.n	80262ea <__swsetup_r+0x82>
 8026290:	06dd      	lsls	r5, r3, #27
 8026292:	d411      	bmi.n	80262b8 <__swsetup_r+0x50>
 8026294:	2309      	movs	r3, #9
 8026296:	6033      	str	r3, [r6, #0]
 8026298:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802629c:	f04f 30ff 	mov.w	r0, #4294967295
 80262a0:	81a3      	strh	r3, [r4, #12]
 80262a2:	e03e      	b.n	8026322 <__swsetup_r+0xba>
 80262a4:	4b25      	ldr	r3, [pc, #148]	; (802633c <__swsetup_r+0xd4>)
 80262a6:	429c      	cmp	r4, r3
 80262a8:	d101      	bne.n	80262ae <__swsetup_r+0x46>
 80262aa:	68ac      	ldr	r4, [r5, #8]
 80262ac:	e7eb      	b.n	8026286 <__swsetup_r+0x1e>
 80262ae:	4b24      	ldr	r3, [pc, #144]	; (8026340 <__swsetup_r+0xd8>)
 80262b0:	429c      	cmp	r4, r3
 80262b2:	bf08      	it	eq
 80262b4:	68ec      	ldreq	r4, [r5, #12]
 80262b6:	e7e6      	b.n	8026286 <__swsetup_r+0x1e>
 80262b8:	0758      	lsls	r0, r3, #29
 80262ba:	d512      	bpl.n	80262e2 <__swsetup_r+0x7a>
 80262bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80262be:	b141      	cbz	r1, 80262d2 <__swsetup_r+0x6a>
 80262c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80262c4:	4299      	cmp	r1, r3
 80262c6:	d002      	beq.n	80262ce <__swsetup_r+0x66>
 80262c8:	4630      	mov	r0, r6
 80262ca:	f7ff fb57 	bl	802597c <_free_r>
 80262ce:	2300      	movs	r3, #0
 80262d0:	6363      	str	r3, [r4, #52]	; 0x34
 80262d2:	89a3      	ldrh	r3, [r4, #12]
 80262d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80262d8:	81a3      	strh	r3, [r4, #12]
 80262da:	2300      	movs	r3, #0
 80262dc:	6063      	str	r3, [r4, #4]
 80262de:	6923      	ldr	r3, [r4, #16]
 80262e0:	6023      	str	r3, [r4, #0]
 80262e2:	89a3      	ldrh	r3, [r4, #12]
 80262e4:	f043 0308 	orr.w	r3, r3, #8
 80262e8:	81a3      	strh	r3, [r4, #12]
 80262ea:	6923      	ldr	r3, [r4, #16]
 80262ec:	b94b      	cbnz	r3, 8026302 <__swsetup_r+0x9a>
 80262ee:	89a3      	ldrh	r3, [r4, #12]
 80262f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80262f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80262f8:	d003      	beq.n	8026302 <__swsetup_r+0x9a>
 80262fa:	4621      	mov	r1, r4
 80262fc:	4630      	mov	r0, r6
 80262fe:	f000 fa63 	bl	80267c8 <__smakebuf_r>
 8026302:	89a0      	ldrh	r0, [r4, #12]
 8026304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026308:	f010 0301 	ands.w	r3, r0, #1
 802630c:	d00a      	beq.n	8026324 <__swsetup_r+0xbc>
 802630e:	2300      	movs	r3, #0
 8026310:	60a3      	str	r3, [r4, #8]
 8026312:	6963      	ldr	r3, [r4, #20]
 8026314:	425b      	negs	r3, r3
 8026316:	61a3      	str	r3, [r4, #24]
 8026318:	6923      	ldr	r3, [r4, #16]
 802631a:	b943      	cbnz	r3, 802632e <__swsetup_r+0xc6>
 802631c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026320:	d1ba      	bne.n	8026298 <__swsetup_r+0x30>
 8026322:	bd70      	pop	{r4, r5, r6, pc}
 8026324:	0781      	lsls	r1, r0, #30
 8026326:	bf58      	it	pl
 8026328:	6963      	ldrpl	r3, [r4, #20]
 802632a:	60a3      	str	r3, [r4, #8]
 802632c:	e7f4      	b.n	8026318 <__swsetup_r+0xb0>
 802632e:	2000      	movs	r0, #0
 8026330:	e7f7      	b.n	8026322 <__swsetup_r+0xba>
 8026332:	bf00      	nop
 8026334:	20025898 	.word	0x20025898
 8026338:	08028f2c 	.word	0x08028f2c
 802633c:	08028f4c 	.word	0x08028f4c
 8026340:	08028f0c 	.word	0x08028f0c

08026344 <__register_exitproc>:
 8026344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026348:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8026408 <__register_exitproc+0xc4>
 802634c:	4606      	mov	r6, r0
 802634e:	461f      	mov	r7, r3
 8026350:	460d      	mov	r5, r1
 8026352:	f8d8 0000 	ldr.w	r0, [r8]
 8026356:	4691      	mov	r9, r2
 8026358:	f000 fa0e 	bl	8026778 <__retarget_lock_acquire_recursive>
 802635c:	4b26      	ldr	r3, [pc, #152]	; (80263f8 <__register_exitproc+0xb4>)
 802635e:	681c      	ldr	r4, [r3, #0]
 8026360:	b934      	cbnz	r4, 8026370 <__register_exitproc+0x2c>
 8026362:	4c26      	ldr	r4, [pc, #152]	; (80263fc <__register_exitproc+0xb8>)
 8026364:	601c      	str	r4, [r3, #0]
 8026366:	4b26      	ldr	r3, [pc, #152]	; (8026400 <__register_exitproc+0xbc>)
 8026368:	b113      	cbz	r3, 8026370 <__register_exitproc+0x2c>
 802636a:	681b      	ldr	r3, [r3, #0]
 802636c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026370:	6863      	ldr	r3, [r4, #4]
 8026372:	2b1f      	cmp	r3, #31
 8026374:	dd07      	ble.n	8026386 <__register_exitproc+0x42>
 8026376:	f8d8 0000 	ldr.w	r0, [r8]
 802637a:	f000 f9ff 	bl	802677c <__retarget_lock_release_recursive>
 802637e:	f04f 30ff 	mov.w	r0, #4294967295
 8026382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026386:	b35e      	cbz	r6, 80263e0 <__register_exitproc+0x9c>
 8026388:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802638c:	b988      	cbnz	r0, 80263b2 <__register_exitproc+0x6e>
 802638e:	4b1d      	ldr	r3, [pc, #116]	; (8026404 <__register_exitproc+0xc0>)
 8026390:	b923      	cbnz	r3, 802639c <__register_exitproc+0x58>
 8026392:	f8d8 0000 	ldr.w	r0, [r8]
 8026396:	f000 f9f0 	bl	802677a <__retarget_lock_release>
 802639a:	e7f0      	b.n	802637e <__register_exitproc+0x3a>
 802639c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80263a0:	f7ff fac6 	bl	8025930 <malloc>
 80263a4:	2800      	cmp	r0, #0
 80263a6:	d0f4      	beq.n	8026392 <__register_exitproc+0x4e>
 80263a8:	2300      	movs	r3, #0
 80263aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80263ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80263b2:	6863      	ldr	r3, [r4, #4]
 80263b4:	2201      	movs	r2, #1
 80263b6:	2e02      	cmp	r6, #2
 80263b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80263bc:	fa02 f203 	lsl.w	r2, r2, r3
 80263c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80263c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80263c8:	ea43 0302 	orr.w	r3, r3, r2
 80263cc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80263d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80263d4:	bf02      	ittt	eq
 80263d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80263da:	4313      	orreq	r3, r2
 80263dc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80263e0:	6863      	ldr	r3, [r4, #4]
 80263e2:	f8d8 0000 	ldr.w	r0, [r8]
 80263e6:	1c5a      	adds	r2, r3, #1
 80263e8:	3302      	adds	r3, #2
 80263ea:	6062      	str	r2, [r4, #4]
 80263ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80263f0:	f000 f9c4 	bl	802677c <__retarget_lock_release_recursive>
 80263f4:	2000      	movs	r0, #0
 80263f6:	e7c4      	b.n	8026382 <__register_exitproc+0x3e>
 80263f8:	2004f8d0 	.word	0x2004f8d0
 80263fc:	2004f844 	.word	0x2004f844
 8026400:	08028f08 	.word	0x08028f08
 8026404:	08025931 	.word	0x08025931
 8026408:	200258fc 	.word	0x200258fc

0802640c <__sflush_r>:
 802640c:	898a      	ldrh	r2, [r1, #12]
 802640e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026412:	4605      	mov	r5, r0
 8026414:	0710      	lsls	r0, r2, #28
 8026416:	460c      	mov	r4, r1
 8026418:	d458      	bmi.n	80264cc <__sflush_r+0xc0>
 802641a:	684b      	ldr	r3, [r1, #4]
 802641c:	2b00      	cmp	r3, #0
 802641e:	dc05      	bgt.n	802642c <__sflush_r+0x20>
 8026420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026422:	2b00      	cmp	r3, #0
 8026424:	dc02      	bgt.n	802642c <__sflush_r+0x20>
 8026426:	2000      	movs	r0, #0
 8026428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802642c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802642e:	2e00      	cmp	r6, #0
 8026430:	d0f9      	beq.n	8026426 <__sflush_r+0x1a>
 8026432:	2300      	movs	r3, #0
 8026434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026438:	682f      	ldr	r7, [r5, #0]
 802643a:	602b      	str	r3, [r5, #0]
 802643c:	d032      	beq.n	80264a4 <__sflush_r+0x98>
 802643e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026440:	89a3      	ldrh	r3, [r4, #12]
 8026442:	075a      	lsls	r2, r3, #29
 8026444:	d505      	bpl.n	8026452 <__sflush_r+0x46>
 8026446:	6863      	ldr	r3, [r4, #4]
 8026448:	1ac0      	subs	r0, r0, r3
 802644a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802644c:	b10b      	cbz	r3, 8026452 <__sflush_r+0x46>
 802644e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026450:	1ac0      	subs	r0, r0, r3
 8026452:	2300      	movs	r3, #0
 8026454:	4602      	mov	r2, r0
 8026456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026458:	4628      	mov	r0, r5
 802645a:	6a21      	ldr	r1, [r4, #32]
 802645c:	47b0      	blx	r6
 802645e:	1c43      	adds	r3, r0, #1
 8026460:	89a3      	ldrh	r3, [r4, #12]
 8026462:	d106      	bne.n	8026472 <__sflush_r+0x66>
 8026464:	6829      	ldr	r1, [r5, #0]
 8026466:	291d      	cmp	r1, #29
 8026468:	d82c      	bhi.n	80264c4 <__sflush_r+0xb8>
 802646a:	4a29      	ldr	r2, [pc, #164]	; (8026510 <__sflush_r+0x104>)
 802646c:	40ca      	lsrs	r2, r1
 802646e:	07d6      	lsls	r6, r2, #31
 8026470:	d528      	bpl.n	80264c4 <__sflush_r+0xb8>
 8026472:	2200      	movs	r2, #0
 8026474:	04d9      	lsls	r1, r3, #19
 8026476:	6062      	str	r2, [r4, #4]
 8026478:	6922      	ldr	r2, [r4, #16]
 802647a:	6022      	str	r2, [r4, #0]
 802647c:	d504      	bpl.n	8026488 <__sflush_r+0x7c>
 802647e:	1c42      	adds	r2, r0, #1
 8026480:	d101      	bne.n	8026486 <__sflush_r+0x7a>
 8026482:	682b      	ldr	r3, [r5, #0]
 8026484:	b903      	cbnz	r3, 8026488 <__sflush_r+0x7c>
 8026486:	6560      	str	r0, [r4, #84]	; 0x54
 8026488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802648a:	602f      	str	r7, [r5, #0]
 802648c:	2900      	cmp	r1, #0
 802648e:	d0ca      	beq.n	8026426 <__sflush_r+0x1a>
 8026490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026494:	4299      	cmp	r1, r3
 8026496:	d002      	beq.n	802649e <__sflush_r+0x92>
 8026498:	4628      	mov	r0, r5
 802649a:	f7ff fa6f 	bl	802597c <_free_r>
 802649e:	2000      	movs	r0, #0
 80264a0:	6360      	str	r0, [r4, #52]	; 0x34
 80264a2:	e7c1      	b.n	8026428 <__sflush_r+0x1c>
 80264a4:	6a21      	ldr	r1, [r4, #32]
 80264a6:	2301      	movs	r3, #1
 80264a8:	4628      	mov	r0, r5
 80264aa:	47b0      	blx	r6
 80264ac:	1c41      	adds	r1, r0, #1
 80264ae:	d1c7      	bne.n	8026440 <__sflush_r+0x34>
 80264b0:	682b      	ldr	r3, [r5, #0]
 80264b2:	2b00      	cmp	r3, #0
 80264b4:	d0c4      	beq.n	8026440 <__sflush_r+0x34>
 80264b6:	2b1d      	cmp	r3, #29
 80264b8:	d001      	beq.n	80264be <__sflush_r+0xb2>
 80264ba:	2b16      	cmp	r3, #22
 80264bc:	d101      	bne.n	80264c2 <__sflush_r+0xb6>
 80264be:	602f      	str	r7, [r5, #0]
 80264c0:	e7b1      	b.n	8026426 <__sflush_r+0x1a>
 80264c2:	89a3      	ldrh	r3, [r4, #12]
 80264c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80264c8:	81a3      	strh	r3, [r4, #12]
 80264ca:	e7ad      	b.n	8026428 <__sflush_r+0x1c>
 80264cc:	690f      	ldr	r7, [r1, #16]
 80264ce:	2f00      	cmp	r7, #0
 80264d0:	d0a9      	beq.n	8026426 <__sflush_r+0x1a>
 80264d2:	0793      	lsls	r3, r2, #30
 80264d4:	680e      	ldr	r6, [r1, #0]
 80264d6:	600f      	str	r7, [r1, #0]
 80264d8:	bf0c      	ite	eq
 80264da:	694b      	ldreq	r3, [r1, #20]
 80264dc:	2300      	movne	r3, #0
 80264de:	eba6 0807 	sub.w	r8, r6, r7
 80264e2:	608b      	str	r3, [r1, #8]
 80264e4:	f1b8 0f00 	cmp.w	r8, #0
 80264e8:	dd9d      	ble.n	8026426 <__sflush_r+0x1a>
 80264ea:	4643      	mov	r3, r8
 80264ec:	463a      	mov	r2, r7
 80264ee:	6a21      	ldr	r1, [r4, #32]
 80264f0:	4628      	mov	r0, r5
 80264f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80264f4:	47b0      	blx	r6
 80264f6:	2800      	cmp	r0, #0
 80264f8:	dc06      	bgt.n	8026508 <__sflush_r+0xfc>
 80264fa:	89a3      	ldrh	r3, [r4, #12]
 80264fc:	f04f 30ff 	mov.w	r0, #4294967295
 8026500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026504:	81a3      	strh	r3, [r4, #12]
 8026506:	e78f      	b.n	8026428 <__sflush_r+0x1c>
 8026508:	4407      	add	r7, r0
 802650a:	eba8 0800 	sub.w	r8, r8, r0
 802650e:	e7e9      	b.n	80264e4 <__sflush_r+0xd8>
 8026510:	20400001 	.word	0x20400001

08026514 <_fflush_r>:
 8026514:	b538      	push	{r3, r4, r5, lr}
 8026516:	690b      	ldr	r3, [r1, #16]
 8026518:	4605      	mov	r5, r0
 802651a:	460c      	mov	r4, r1
 802651c:	b913      	cbnz	r3, 8026524 <_fflush_r+0x10>
 802651e:	2500      	movs	r5, #0
 8026520:	4628      	mov	r0, r5
 8026522:	bd38      	pop	{r3, r4, r5, pc}
 8026524:	b118      	cbz	r0, 802652e <_fflush_r+0x1a>
 8026526:	6983      	ldr	r3, [r0, #24]
 8026528:	b90b      	cbnz	r3, 802652e <_fflush_r+0x1a>
 802652a:	f000 f887 	bl	802663c <__sinit>
 802652e:	4b14      	ldr	r3, [pc, #80]	; (8026580 <_fflush_r+0x6c>)
 8026530:	429c      	cmp	r4, r3
 8026532:	d11b      	bne.n	802656c <_fflush_r+0x58>
 8026534:	686c      	ldr	r4, [r5, #4]
 8026536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802653a:	2b00      	cmp	r3, #0
 802653c:	d0ef      	beq.n	802651e <_fflush_r+0xa>
 802653e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026540:	07d0      	lsls	r0, r2, #31
 8026542:	d404      	bmi.n	802654e <_fflush_r+0x3a>
 8026544:	0599      	lsls	r1, r3, #22
 8026546:	d402      	bmi.n	802654e <_fflush_r+0x3a>
 8026548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802654a:	f000 f915 	bl	8026778 <__retarget_lock_acquire_recursive>
 802654e:	4628      	mov	r0, r5
 8026550:	4621      	mov	r1, r4
 8026552:	f7ff ff5b 	bl	802640c <__sflush_r>
 8026556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026558:	4605      	mov	r5, r0
 802655a:	07da      	lsls	r2, r3, #31
 802655c:	d4e0      	bmi.n	8026520 <_fflush_r+0xc>
 802655e:	89a3      	ldrh	r3, [r4, #12]
 8026560:	059b      	lsls	r3, r3, #22
 8026562:	d4dd      	bmi.n	8026520 <_fflush_r+0xc>
 8026564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026566:	f000 f909 	bl	802677c <__retarget_lock_release_recursive>
 802656a:	e7d9      	b.n	8026520 <_fflush_r+0xc>
 802656c:	4b05      	ldr	r3, [pc, #20]	; (8026584 <_fflush_r+0x70>)
 802656e:	429c      	cmp	r4, r3
 8026570:	d101      	bne.n	8026576 <_fflush_r+0x62>
 8026572:	68ac      	ldr	r4, [r5, #8]
 8026574:	e7df      	b.n	8026536 <_fflush_r+0x22>
 8026576:	4b04      	ldr	r3, [pc, #16]	; (8026588 <_fflush_r+0x74>)
 8026578:	429c      	cmp	r4, r3
 802657a:	bf08      	it	eq
 802657c:	68ec      	ldreq	r4, [r5, #12]
 802657e:	e7da      	b.n	8026536 <_fflush_r+0x22>
 8026580:	08028f2c 	.word	0x08028f2c
 8026584:	08028f4c 	.word	0x08028f4c
 8026588:	08028f0c 	.word	0x08028f0c

0802658c <std>:
 802658c:	2300      	movs	r3, #0
 802658e:	b510      	push	{r4, lr}
 8026590:	4604      	mov	r4, r0
 8026592:	6083      	str	r3, [r0, #8]
 8026594:	8181      	strh	r1, [r0, #12]
 8026596:	4619      	mov	r1, r3
 8026598:	6643      	str	r3, [r0, #100]	; 0x64
 802659a:	81c2      	strh	r2, [r0, #14]
 802659c:	2208      	movs	r2, #8
 802659e:	6183      	str	r3, [r0, #24]
 80265a0:	e9c0 3300 	strd	r3, r3, [r0]
 80265a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80265a8:	305c      	adds	r0, #92	; 0x5c
 80265aa:	f7ff f9de 	bl	802596a <memset>
 80265ae:	4b05      	ldr	r3, [pc, #20]	; (80265c4 <std+0x38>)
 80265b0:	6224      	str	r4, [r4, #32]
 80265b2:	6263      	str	r3, [r4, #36]	; 0x24
 80265b4:	4b04      	ldr	r3, [pc, #16]	; (80265c8 <std+0x3c>)
 80265b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80265b8:	4b04      	ldr	r3, [pc, #16]	; (80265cc <std+0x40>)
 80265ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80265bc:	4b04      	ldr	r3, [pc, #16]	; (80265d0 <std+0x44>)
 80265be:	6323      	str	r3, [r4, #48]	; 0x30
 80265c0:	bd10      	pop	{r4, pc}
 80265c2:	bf00      	nop
 80265c4:	0802687d 	.word	0x0802687d
 80265c8:	0802689f 	.word	0x0802689f
 80265cc:	080268d7 	.word	0x080268d7
 80265d0:	080268fb 	.word	0x080268fb

080265d4 <_cleanup_r>:
 80265d4:	4901      	ldr	r1, [pc, #4]	; (80265dc <_cleanup_r+0x8>)
 80265d6:	f000 b8af 	b.w	8026738 <_fwalk_reent>
 80265da:	bf00      	nop
 80265dc:	08026515 	.word	0x08026515

080265e0 <__sfmoreglue>:
 80265e0:	b570      	push	{r4, r5, r6, lr}
 80265e2:	2268      	movs	r2, #104	; 0x68
 80265e4:	1e4d      	subs	r5, r1, #1
 80265e6:	460e      	mov	r6, r1
 80265e8:	4355      	muls	r5, r2
 80265ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80265ee:	f7ff fa31 	bl	8025a54 <_malloc_r>
 80265f2:	4604      	mov	r4, r0
 80265f4:	b140      	cbz	r0, 8026608 <__sfmoreglue+0x28>
 80265f6:	2100      	movs	r1, #0
 80265f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80265fc:	e9c0 1600 	strd	r1, r6, [r0]
 8026600:	300c      	adds	r0, #12
 8026602:	60a0      	str	r0, [r4, #8]
 8026604:	f7ff f9b1 	bl	802596a <memset>
 8026608:	4620      	mov	r0, r4
 802660a:	bd70      	pop	{r4, r5, r6, pc}

0802660c <__sfp_lock_acquire>:
 802660c:	4801      	ldr	r0, [pc, #4]	; (8026614 <__sfp_lock_acquire+0x8>)
 802660e:	f000 b8b3 	b.w	8026778 <__retarget_lock_acquire_recursive>
 8026612:	bf00      	nop
 8026614:	2004f8d6 	.word	0x2004f8d6

08026618 <__sfp_lock_release>:
 8026618:	4801      	ldr	r0, [pc, #4]	; (8026620 <__sfp_lock_release+0x8>)
 802661a:	f000 b8af 	b.w	802677c <__retarget_lock_release_recursive>
 802661e:	bf00      	nop
 8026620:	2004f8d6 	.word	0x2004f8d6

08026624 <__sinit_lock_acquire>:
 8026624:	4801      	ldr	r0, [pc, #4]	; (802662c <__sinit_lock_acquire+0x8>)
 8026626:	f000 b8a7 	b.w	8026778 <__retarget_lock_acquire_recursive>
 802662a:	bf00      	nop
 802662c:	2004f8d7 	.word	0x2004f8d7

08026630 <__sinit_lock_release>:
 8026630:	4801      	ldr	r0, [pc, #4]	; (8026638 <__sinit_lock_release+0x8>)
 8026632:	f000 b8a3 	b.w	802677c <__retarget_lock_release_recursive>
 8026636:	bf00      	nop
 8026638:	2004f8d7 	.word	0x2004f8d7

0802663c <__sinit>:
 802663c:	b510      	push	{r4, lr}
 802663e:	4604      	mov	r4, r0
 8026640:	f7ff fff0 	bl	8026624 <__sinit_lock_acquire>
 8026644:	69a3      	ldr	r3, [r4, #24]
 8026646:	b11b      	cbz	r3, 8026650 <__sinit+0x14>
 8026648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802664c:	f7ff bff0 	b.w	8026630 <__sinit_lock_release>
 8026650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026654:	6523      	str	r3, [r4, #80]	; 0x50
 8026656:	4620      	mov	r0, r4
 8026658:	4b12      	ldr	r3, [pc, #72]	; (80266a4 <__sinit+0x68>)
 802665a:	4a13      	ldr	r2, [pc, #76]	; (80266a8 <__sinit+0x6c>)
 802665c:	681b      	ldr	r3, [r3, #0]
 802665e:	62a2      	str	r2, [r4, #40]	; 0x28
 8026660:	42a3      	cmp	r3, r4
 8026662:	bf04      	itt	eq
 8026664:	2301      	moveq	r3, #1
 8026666:	61a3      	streq	r3, [r4, #24]
 8026668:	f000 f820 	bl	80266ac <__sfp>
 802666c:	6060      	str	r0, [r4, #4]
 802666e:	4620      	mov	r0, r4
 8026670:	f000 f81c 	bl	80266ac <__sfp>
 8026674:	60a0      	str	r0, [r4, #8]
 8026676:	4620      	mov	r0, r4
 8026678:	f000 f818 	bl	80266ac <__sfp>
 802667c:	2200      	movs	r2, #0
 802667e:	2104      	movs	r1, #4
 8026680:	60e0      	str	r0, [r4, #12]
 8026682:	6860      	ldr	r0, [r4, #4]
 8026684:	f7ff ff82 	bl	802658c <std>
 8026688:	2201      	movs	r2, #1
 802668a:	2109      	movs	r1, #9
 802668c:	68a0      	ldr	r0, [r4, #8]
 802668e:	f7ff ff7d 	bl	802658c <std>
 8026692:	2202      	movs	r2, #2
 8026694:	2112      	movs	r1, #18
 8026696:	68e0      	ldr	r0, [r4, #12]
 8026698:	f7ff ff78 	bl	802658c <std>
 802669c:	2301      	movs	r3, #1
 802669e:	61a3      	str	r3, [r4, #24]
 80266a0:	e7d2      	b.n	8026648 <__sinit+0xc>
 80266a2:	bf00      	nop
 80266a4:	08028ed0 	.word	0x08028ed0
 80266a8:	080265d5 	.word	0x080265d5

080266ac <__sfp>:
 80266ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266ae:	4607      	mov	r7, r0
 80266b0:	f7ff ffac 	bl	802660c <__sfp_lock_acquire>
 80266b4:	4b1e      	ldr	r3, [pc, #120]	; (8026730 <__sfp+0x84>)
 80266b6:	681e      	ldr	r6, [r3, #0]
 80266b8:	69b3      	ldr	r3, [r6, #24]
 80266ba:	b913      	cbnz	r3, 80266c2 <__sfp+0x16>
 80266bc:	4630      	mov	r0, r6
 80266be:	f7ff ffbd 	bl	802663c <__sinit>
 80266c2:	3648      	adds	r6, #72	; 0x48
 80266c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80266c8:	3b01      	subs	r3, #1
 80266ca:	d503      	bpl.n	80266d4 <__sfp+0x28>
 80266cc:	6833      	ldr	r3, [r6, #0]
 80266ce:	b30b      	cbz	r3, 8026714 <__sfp+0x68>
 80266d0:	6836      	ldr	r6, [r6, #0]
 80266d2:	e7f7      	b.n	80266c4 <__sfp+0x18>
 80266d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80266d8:	b9d5      	cbnz	r5, 8026710 <__sfp+0x64>
 80266da:	4b16      	ldr	r3, [pc, #88]	; (8026734 <__sfp+0x88>)
 80266dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80266e0:	6665      	str	r5, [r4, #100]	; 0x64
 80266e2:	60e3      	str	r3, [r4, #12]
 80266e4:	f000 f847 	bl	8026776 <__retarget_lock_init_recursive>
 80266e8:	f7ff ff96 	bl	8026618 <__sfp_lock_release>
 80266ec:	2208      	movs	r2, #8
 80266ee:	4629      	mov	r1, r5
 80266f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80266f4:	6025      	str	r5, [r4, #0]
 80266f6:	61a5      	str	r5, [r4, #24]
 80266f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80266fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026700:	f7ff f933 	bl	802596a <memset>
 8026704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802670c:	4620      	mov	r0, r4
 802670e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026710:	3468      	adds	r4, #104	; 0x68
 8026712:	e7d9      	b.n	80266c8 <__sfp+0x1c>
 8026714:	2104      	movs	r1, #4
 8026716:	4638      	mov	r0, r7
 8026718:	f7ff ff62 	bl	80265e0 <__sfmoreglue>
 802671c:	4604      	mov	r4, r0
 802671e:	6030      	str	r0, [r6, #0]
 8026720:	2800      	cmp	r0, #0
 8026722:	d1d5      	bne.n	80266d0 <__sfp+0x24>
 8026724:	f7ff ff78 	bl	8026618 <__sfp_lock_release>
 8026728:	230c      	movs	r3, #12
 802672a:	603b      	str	r3, [r7, #0]
 802672c:	e7ee      	b.n	802670c <__sfp+0x60>
 802672e:	bf00      	nop
 8026730:	08028ed0 	.word	0x08028ed0
 8026734:	ffff0001 	.word	0xffff0001

08026738 <_fwalk_reent>:
 8026738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802673c:	4606      	mov	r6, r0
 802673e:	4688      	mov	r8, r1
 8026740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026744:	2700      	movs	r7, #0
 8026746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802674a:	f1b9 0901 	subs.w	r9, r9, #1
 802674e:	d505      	bpl.n	802675c <_fwalk_reent+0x24>
 8026750:	6824      	ldr	r4, [r4, #0]
 8026752:	2c00      	cmp	r4, #0
 8026754:	d1f7      	bne.n	8026746 <_fwalk_reent+0xe>
 8026756:	4638      	mov	r0, r7
 8026758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802675c:	89ab      	ldrh	r3, [r5, #12]
 802675e:	2b01      	cmp	r3, #1
 8026760:	d907      	bls.n	8026772 <_fwalk_reent+0x3a>
 8026762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026766:	3301      	adds	r3, #1
 8026768:	d003      	beq.n	8026772 <_fwalk_reent+0x3a>
 802676a:	4629      	mov	r1, r5
 802676c:	4630      	mov	r0, r6
 802676e:	47c0      	blx	r8
 8026770:	4307      	orrs	r7, r0
 8026772:	3568      	adds	r5, #104	; 0x68
 8026774:	e7e9      	b.n	802674a <_fwalk_reent+0x12>

08026776 <__retarget_lock_init_recursive>:
 8026776:	4770      	bx	lr

08026778 <__retarget_lock_acquire_recursive>:
 8026778:	4770      	bx	lr

0802677a <__retarget_lock_release>:
 802677a:	4770      	bx	lr

0802677c <__retarget_lock_release_recursive>:
 802677c:	4770      	bx	lr

0802677e <__swhatbuf_r>:
 802677e:	b570      	push	{r4, r5, r6, lr}
 8026780:	460e      	mov	r6, r1
 8026782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026786:	b096      	sub	sp, #88	; 0x58
 8026788:	4614      	mov	r4, r2
 802678a:	2900      	cmp	r1, #0
 802678c:	461d      	mov	r5, r3
 802678e:	da08      	bge.n	80267a2 <__swhatbuf_r+0x24>
 8026790:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026794:	2200      	movs	r2, #0
 8026796:	602a      	str	r2, [r5, #0]
 8026798:	061a      	lsls	r2, r3, #24
 802679a:	d410      	bmi.n	80267be <__swhatbuf_r+0x40>
 802679c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80267a0:	e00e      	b.n	80267c0 <__swhatbuf_r+0x42>
 80267a2:	466a      	mov	r2, sp
 80267a4:	f000 f8d0 	bl	8026948 <_fstat_r>
 80267a8:	2800      	cmp	r0, #0
 80267aa:	dbf1      	blt.n	8026790 <__swhatbuf_r+0x12>
 80267ac:	9a01      	ldr	r2, [sp, #4]
 80267ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80267b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80267b6:	425a      	negs	r2, r3
 80267b8:	415a      	adcs	r2, r3
 80267ba:	602a      	str	r2, [r5, #0]
 80267bc:	e7ee      	b.n	802679c <__swhatbuf_r+0x1e>
 80267be:	2340      	movs	r3, #64	; 0x40
 80267c0:	2000      	movs	r0, #0
 80267c2:	6023      	str	r3, [r4, #0]
 80267c4:	b016      	add	sp, #88	; 0x58
 80267c6:	bd70      	pop	{r4, r5, r6, pc}

080267c8 <__smakebuf_r>:
 80267c8:	898b      	ldrh	r3, [r1, #12]
 80267ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80267cc:	079d      	lsls	r5, r3, #30
 80267ce:	4606      	mov	r6, r0
 80267d0:	460c      	mov	r4, r1
 80267d2:	d507      	bpl.n	80267e4 <__smakebuf_r+0x1c>
 80267d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80267d8:	6023      	str	r3, [r4, #0]
 80267da:	6123      	str	r3, [r4, #16]
 80267dc:	2301      	movs	r3, #1
 80267de:	6163      	str	r3, [r4, #20]
 80267e0:	b002      	add	sp, #8
 80267e2:	bd70      	pop	{r4, r5, r6, pc}
 80267e4:	ab01      	add	r3, sp, #4
 80267e6:	466a      	mov	r2, sp
 80267e8:	f7ff ffc9 	bl	802677e <__swhatbuf_r>
 80267ec:	9900      	ldr	r1, [sp, #0]
 80267ee:	4605      	mov	r5, r0
 80267f0:	4630      	mov	r0, r6
 80267f2:	f7ff f92f 	bl	8025a54 <_malloc_r>
 80267f6:	b948      	cbnz	r0, 802680c <__smakebuf_r+0x44>
 80267f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80267fc:	059a      	lsls	r2, r3, #22
 80267fe:	d4ef      	bmi.n	80267e0 <__smakebuf_r+0x18>
 8026800:	f023 0303 	bic.w	r3, r3, #3
 8026804:	f043 0302 	orr.w	r3, r3, #2
 8026808:	81a3      	strh	r3, [r4, #12]
 802680a:	e7e3      	b.n	80267d4 <__smakebuf_r+0xc>
 802680c:	4b0d      	ldr	r3, [pc, #52]	; (8026844 <__smakebuf_r+0x7c>)
 802680e:	62b3      	str	r3, [r6, #40]	; 0x28
 8026810:	89a3      	ldrh	r3, [r4, #12]
 8026812:	6020      	str	r0, [r4, #0]
 8026814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026818:	6120      	str	r0, [r4, #16]
 802681a:	81a3      	strh	r3, [r4, #12]
 802681c:	9b00      	ldr	r3, [sp, #0]
 802681e:	6163      	str	r3, [r4, #20]
 8026820:	9b01      	ldr	r3, [sp, #4]
 8026822:	b15b      	cbz	r3, 802683c <__smakebuf_r+0x74>
 8026824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026828:	4630      	mov	r0, r6
 802682a:	f000 f89f 	bl	802696c <_isatty_r>
 802682e:	b128      	cbz	r0, 802683c <__smakebuf_r+0x74>
 8026830:	89a3      	ldrh	r3, [r4, #12]
 8026832:	f023 0303 	bic.w	r3, r3, #3
 8026836:	f043 0301 	orr.w	r3, r3, #1
 802683a:	81a3      	strh	r3, [r4, #12]
 802683c:	89a0      	ldrh	r0, [r4, #12]
 802683e:	4305      	orrs	r5, r0
 8026840:	81a5      	strh	r5, [r4, #12]
 8026842:	e7cd      	b.n	80267e0 <__smakebuf_r+0x18>
 8026844:	080265d5 	.word	0x080265d5

08026848 <memchr>:
 8026848:	b2c9      	uxtb	r1, r1
 802684a:	4402      	add	r2, r0
 802684c:	b510      	push	{r4, lr}
 802684e:	4290      	cmp	r0, r2
 8026850:	4603      	mov	r3, r0
 8026852:	d101      	bne.n	8026858 <memchr+0x10>
 8026854:	2300      	movs	r3, #0
 8026856:	e003      	b.n	8026860 <memchr+0x18>
 8026858:	781c      	ldrb	r4, [r3, #0]
 802685a:	3001      	adds	r0, #1
 802685c:	428c      	cmp	r4, r1
 802685e:	d1f6      	bne.n	802684e <memchr+0x6>
 8026860:	4618      	mov	r0, r3
 8026862:	bd10      	pop	{r4, pc}

08026864 <__malloc_lock>:
 8026864:	4801      	ldr	r0, [pc, #4]	; (802686c <__malloc_lock+0x8>)
 8026866:	f7ff bf87 	b.w	8026778 <__retarget_lock_acquire_recursive>
 802686a:	bf00      	nop
 802686c:	2004f8d5 	.word	0x2004f8d5

08026870 <__malloc_unlock>:
 8026870:	4801      	ldr	r0, [pc, #4]	; (8026878 <__malloc_unlock+0x8>)
 8026872:	f7ff bf83 	b.w	802677c <__retarget_lock_release_recursive>
 8026876:	bf00      	nop
 8026878:	2004f8d5 	.word	0x2004f8d5

0802687c <__sread>:
 802687c:	b510      	push	{r4, lr}
 802687e:	460c      	mov	r4, r1
 8026880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026884:	f000 f894 	bl	80269b0 <_read_r>
 8026888:	2800      	cmp	r0, #0
 802688a:	bfab      	itete	ge
 802688c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802688e:	89a3      	ldrhlt	r3, [r4, #12]
 8026890:	181b      	addge	r3, r3, r0
 8026892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026896:	bfac      	ite	ge
 8026898:	6563      	strge	r3, [r4, #84]	; 0x54
 802689a:	81a3      	strhlt	r3, [r4, #12]
 802689c:	bd10      	pop	{r4, pc}

0802689e <__swrite>:
 802689e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80268a2:	461f      	mov	r7, r3
 80268a4:	898b      	ldrh	r3, [r1, #12]
 80268a6:	4605      	mov	r5, r0
 80268a8:	460c      	mov	r4, r1
 80268aa:	05db      	lsls	r3, r3, #23
 80268ac:	4616      	mov	r6, r2
 80268ae:	d505      	bpl.n	80268bc <__swrite+0x1e>
 80268b0:	2302      	movs	r3, #2
 80268b2:	2200      	movs	r2, #0
 80268b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268b8:	f000 f868 	bl	802698c <_lseek_r>
 80268bc:	89a3      	ldrh	r3, [r4, #12]
 80268be:	4632      	mov	r2, r6
 80268c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80268c4:	4628      	mov	r0, r5
 80268c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80268ca:	81a3      	strh	r3, [r4, #12]
 80268cc:	463b      	mov	r3, r7
 80268ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80268d2:	f000 b817 	b.w	8026904 <_write_r>

080268d6 <__sseek>:
 80268d6:	b510      	push	{r4, lr}
 80268d8:	460c      	mov	r4, r1
 80268da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268de:	f000 f855 	bl	802698c <_lseek_r>
 80268e2:	1c43      	adds	r3, r0, #1
 80268e4:	89a3      	ldrh	r3, [r4, #12]
 80268e6:	bf15      	itete	ne
 80268e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80268ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80268ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80268f2:	81a3      	strheq	r3, [r4, #12]
 80268f4:	bf18      	it	ne
 80268f6:	81a3      	strhne	r3, [r4, #12]
 80268f8:	bd10      	pop	{r4, pc}

080268fa <__sclose>:
 80268fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268fe:	f000 b813 	b.w	8026928 <_close_r>
	...

08026904 <_write_r>:
 8026904:	b538      	push	{r3, r4, r5, lr}
 8026906:	4604      	mov	r4, r0
 8026908:	4d06      	ldr	r5, [pc, #24]	; (8026924 <_write_r+0x20>)
 802690a:	4608      	mov	r0, r1
 802690c:	4611      	mov	r1, r2
 802690e:	2200      	movs	r2, #0
 8026910:	602a      	str	r2, [r5, #0]
 8026912:	461a      	mov	r2, r3
 8026914:	f7db fa9d 	bl	8001e52 <_write>
 8026918:	1c43      	adds	r3, r0, #1
 802691a:	d102      	bne.n	8026922 <_write_r+0x1e>
 802691c:	682b      	ldr	r3, [r5, #0]
 802691e:	b103      	cbz	r3, 8026922 <_write_r+0x1e>
 8026920:	6023      	str	r3, [r4, #0]
 8026922:	bd38      	pop	{r3, r4, r5, pc}
 8026924:	2004f8d8 	.word	0x2004f8d8

08026928 <_close_r>:
 8026928:	b538      	push	{r3, r4, r5, lr}
 802692a:	2300      	movs	r3, #0
 802692c:	4d05      	ldr	r5, [pc, #20]	; (8026944 <_close_r+0x1c>)
 802692e:	4604      	mov	r4, r0
 8026930:	4608      	mov	r0, r1
 8026932:	602b      	str	r3, [r5, #0]
 8026934:	f7db faa9 	bl	8001e8a <_close>
 8026938:	1c43      	adds	r3, r0, #1
 802693a:	d102      	bne.n	8026942 <_close_r+0x1a>
 802693c:	682b      	ldr	r3, [r5, #0]
 802693e:	b103      	cbz	r3, 8026942 <_close_r+0x1a>
 8026940:	6023      	str	r3, [r4, #0]
 8026942:	bd38      	pop	{r3, r4, r5, pc}
 8026944:	2004f8d8 	.word	0x2004f8d8

08026948 <_fstat_r>:
 8026948:	b538      	push	{r3, r4, r5, lr}
 802694a:	2300      	movs	r3, #0
 802694c:	4d06      	ldr	r5, [pc, #24]	; (8026968 <_fstat_r+0x20>)
 802694e:	4604      	mov	r4, r0
 8026950:	4608      	mov	r0, r1
 8026952:	4611      	mov	r1, r2
 8026954:	602b      	str	r3, [r5, #0]
 8026956:	f7db faa4 	bl	8001ea2 <_fstat>
 802695a:	1c43      	adds	r3, r0, #1
 802695c:	d102      	bne.n	8026964 <_fstat_r+0x1c>
 802695e:	682b      	ldr	r3, [r5, #0]
 8026960:	b103      	cbz	r3, 8026964 <_fstat_r+0x1c>
 8026962:	6023      	str	r3, [r4, #0]
 8026964:	bd38      	pop	{r3, r4, r5, pc}
 8026966:	bf00      	nop
 8026968:	2004f8d8 	.word	0x2004f8d8

0802696c <_isatty_r>:
 802696c:	b538      	push	{r3, r4, r5, lr}
 802696e:	2300      	movs	r3, #0
 8026970:	4d05      	ldr	r5, [pc, #20]	; (8026988 <_isatty_r+0x1c>)
 8026972:	4604      	mov	r4, r0
 8026974:	4608      	mov	r0, r1
 8026976:	602b      	str	r3, [r5, #0]
 8026978:	f7db faa3 	bl	8001ec2 <_isatty>
 802697c:	1c43      	adds	r3, r0, #1
 802697e:	d102      	bne.n	8026986 <_isatty_r+0x1a>
 8026980:	682b      	ldr	r3, [r5, #0]
 8026982:	b103      	cbz	r3, 8026986 <_isatty_r+0x1a>
 8026984:	6023      	str	r3, [r4, #0]
 8026986:	bd38      	pop	{r3, r4, r5, pc}
 8026988:	2004f8d8 	.word	0x2004f8d8

0802698c <_lseek_r>:
 802698c:	b538      	push	{r3, r4, r5, lr}
 802698e:	4604      	mov	r4, r0
 8026990:	4d06      	ldr	r5, [pc, #24]	; (80269ac <_lseek_r+0x20>)
 8026992:	4608      	mov	r0, r1
 8026994:	4611      	mov	r1, r2
 8026996:	2200      	movs	r2, #0
 8026998:	602a      	str	r2, [r5, #0]
 802699a:	461a      	mov	r2, r3
 802699c:	f7db fa9c 	bl	8001ed8 <_lseek>
 80269a0:	1c43      	adds	r3, r0, #1
 80269a2:	d102      	bne.n	80269aa <_lseek_r+0x1e>
 80269a4:	682b      	ldr	r3, [r5, #0]
 80269a6:	b103      	cbz	r3, 80269aa <_lseek_r+0x1e>
 80269a8:	6023      	str	r3, [r4, #0]
 80269aa:	bd38      	pop	{r3, r4, r5, pc}
 80269ac:	2004f8d8 	.word	0x2004f8d8

080269b0 <_read_r>:
 80269b0:	b538      	push	{r3, r4, r5, lr}
 80269b2:	4604      	mov	r4, r0
 80269b4:	4d06      	ldr	r5, [pc, #24]	; (80269d0 <_read_r+0x20>)
 80269b6:	4608      	mov	r0, r1
 80269b8:	4611      	mov	r1, r2
 80269ba:	2200      	movs	r2, #0
 80269bc:	602a      	str	r2, [r5, #0]
 80269be:	461a      	mov	r2, r3
 80269c0:	f7db fa2a 	bl	8001e18 <_read>
 80269c4:	1c43      	adds	r3, r0, #1
 80269c6:	d102      	bne.n	80269ce <_read_r+0x1e>
 80269c8:	682b      	ldr	r3, [r5, #0]
 80269ca:	b103      	cbz	r3, 80269ce <_read_r+0x1e>
 80269cc:	6023      	str	r3, [r4, #0]
 80269ce:	bd38      	pop	{r3, r4, r5, pc}
 80269d0:	2004f8d8 	.word	0x2004f8d8

080269d4 <_init>:
 80269d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269d6:	bf00      	nop
 80269d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269da:	bc08      	pop	{r3}
 80269dc:	469e      	mov	lr, r3
 80269de:	4770      	bx	lr

080269e0 <_fini>:
 80269e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269e2:	bf00      	nop
 80269e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269e6:	bc08      	pop	{r3}
 80269e8:	469e      	mov	lr, r3
 80269ea:	4770      	bx	lr
