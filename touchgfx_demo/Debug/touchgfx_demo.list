
touchgfx_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000267c0  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024fc  080269f4  080269f4  000369f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08028ef0  08028ef0  00038ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08029098  08029098  00039098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00025800  080290b0  080290b0  000390b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  0804e8b0  0804e8b0  0005e8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  0804e8c0  0804e8c0  0005e8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  0804e8c8  0804e8c8  0005e8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0804e8dc  0804e8dc  0005e8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00025900  20000000  0804e8e4  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00025800  20025900  080741e4  00085900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000032c4  2004b100  080999e4  000ab100  2**2
                  ALLOC
 13 ._threadx_heap 00040004  2004e3c4  080999e4  000ae3c4  2**0
                  ALLOC
 14 ._user_heap_stack 00000600  2008e3c8  080999e4  000ae3c8  2**0
                  ALLOC
 15 .ARM.attributes 00000036  00000000  00000000  000ab100  2**0
                  CONTENTS, READONLY
 16 .debug_info   000b9662  00000000  00000000  000ab136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00014814  00000000  00000000  00164798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003e80  00000000  00000000  00178fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000037e8  00000000  00000000  0017ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00049419  00000000  00000000  00180618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00050d3b  00000000  00000000  001c9a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001974b7  00000000  00000000  0021a76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  003b1c23  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010830  00000000  00000000  003b1cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2004b100 	.word	0x2004b100
 8000250:	00000000 	.word	0x00000000
 8000254:	080269dc 	.word	0x080269dc

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	2004b104 	.word	0x2004b104
 8000270:	080269dc 	.word	0x080269dc

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i

    /* Set base of available memory to end of non-initialised RAM area.  */
#ifdef USE_DYNAMIC_MEMORY_ALLOCATION
    LDR     r0, =_tx_initialize_unused_memory       // Build address of unused memory pointer
 8000276:	481b      	ldr	r0, [pc, #108]	; (80002e4 <__tx_DBGHandler+0x4>)
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
 8000278:	491b      	ldr	r1, [pc, #108]	; (80002e8 <__tx_DBGHandler+0x8>)
    ADD     r1, r1, #4                              //
 800027a:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                // Setup first unused memory pointer
 800027e:	6001      	str	r1, [r0, #0]
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000280:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000284:	4919      	ldr	r1, [pc, #100]	; (80002ec <__tx_DBGHandler+0xc>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000286:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800028a:	4819      	ldr	r0, [pc, #100]	; (80002f0 <__tx_DBGHandler+0x10>)
    LDR     r1, [r0]                                // Pickup the current value
 800028c:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800028e:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000292:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000294:	4817      	ldr	r0, [pc, #92]	; (80002f4 <__tx_DBGHandler+0x14>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000296:	4915      	ldr	r1, [pc, #84]	; (80002ec <__tx_DBGHandler+0xc>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000298:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 800029a:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800029c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002a0:	4915      	ldr	r1, [pc, #84]	; (80002f8 <__tx_DBGHandler+0x18>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002a2:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002a4:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a8:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002aa:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002ae:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002b2:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b6:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ba:	4910      	ldr	r1, [pc, #64]	; (80002fc <__tx_DBGHandler+0x1c>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002bc:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop

080002c4 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002c4:	f7ff bffe 	b.w	80002c4 <__tx_BadHandler>

080002c8 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d0:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002d2:	f000 f89b 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002dc:	f7ff bffe 	b.w	80002dc <__tx_NMIHandler>

080002e0 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002e0:	f7ff bffe 	b.w	80002e0 <__tx_DBGHandler>
    LDR     r0, =_tx_initialize_unused_memory       // Build address of unused memory pointer
 80002e4:	2004b8a8 	.word	0x2004b8a8
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
 80002e8:	2004e3c8 	.word	0x2004e3c8
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002ec:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f4:	2004b8ac 	.word	0x2004b8ac
    LDR     r1, =SYSTICK_CYCLES
 80002f8:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002fc:	40ff0000 	.word	0x40ff0000

08000300 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000300:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000304:	4a2d      	ldr	r2, [pc, #180]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000306:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000308:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800030c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000310:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000314:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000316:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800031e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000322:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000326:	f3bf 8f6f 	isb	sy

0800032a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032a:	e7fe      	b.n	800032a <__tx_wait_here>

0800032c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800032c:	4824      	ldr	r0, [pc, #144]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800032e:	4a25      	ldr	r2, [pc, #148]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000330:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000334:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000336:	b191      	cbz	r1, 800035e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000338:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800033e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000342:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000346:	d101      	bne.n	800034c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000348:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800034c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800034c:	4c1e      	ldr	r4, [pc, #120]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800034e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000352:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000356:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000358:	b10d      	cbz	r5, 800035e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800035c:	6023      	str	r3, [r4, #0]

0800035e <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800035e:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000360:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000362:	b1d1      	cbz	r1, 800039a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000364:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000366:	b662      	cpsie	i

08000368 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000368:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036a:	4c17      	ldr	r4, [pc, #92]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800036c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800036e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000372:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000374:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000376:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800037e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000382:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000386:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038a:	d101      	bne.n	8000390 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800038c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000390 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000390:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000394:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000398:	4770      	bx	lr

0800039a <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 800039a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800039c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800039e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a0:	b909      	cbnz	r1, 80003a6 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f9      	b.n	800039a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d8      	b.n	8000368 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	2004b948 	.word	0x2004b948
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	2004b8b0 	.word	0x2004b8b0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	2004b8b4 	.word	0x2004b8b4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	2004beb4 	.word	0x2004beb4

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00b fecc 	bl	800c200 <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00b fe39 	bl	800c0e4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	2004b954 	.word	0x2004b954
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	2004beb4 	.word	0x2004beb4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	2004b958 	.word	0x2004b958
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	2004b9e4 	.word	0x2004b9e4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	2004b9e8 	.word	0x2004b9e8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	2004b9e0 	.word	0x2004b9e0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	2004b9dc 	.word	0x2004b9dc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	2004b948 	.word	0x2004b948
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	2004b8b0 	.word	0x2004b8b0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	2004b8b4 	.word	0x2004b8b4
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <__aeabi_uldivmod>:
 80004c4:	b953      	cbnz	r3, 80004dc <__aeabi_uldivmod+0x18>
 80004c6:	b94a      	cbnz	r2, 80004dc <__aeabi_uldivmod+0x18>
 80004c8:	2900      	cmp	r1, #0
 80004ca:	bf08      	it	eq
 80004cc:	2800      	cmpeq	r0, #0
 80004ce:	bf1c      	itt	ne
 80004d0:	f04f 31ff 	movne.w	r1, #4294967295
 80004d4:	f04f 30ff 	movne.w	r0, #4294967295
 80004d8:	f000 b982 	b.w	80007e0 <__aeabi_idiv0>
 80004dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80004e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004e4:	f000 f806 	bl	80004f4 <__udivmoddi4>
 80004e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004f0:	b004      	add	sp, #16
 80004f2:	4770      	bx	lr

080004f4 <__udivmoddi4>:
 80004f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004fa:	4604      	mov	r4, r0
 80004fc:	460f      	mov	r7, r1
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d148      	bne.n	8000594 <__udivmoddi4+0xa0>
 8000502:	428a      	cmp	r2, r1
 8000504:	4694      	mov	ip, r2
 8000506:	d961      	bls.n	80005cc <__udivmoddi4+0xd8>
 8000508:	fab2 f382 	clz	r3, r2
 800050c:	b143      	cbz	r3, 8000520 <__udivmoddi4+0x2c>
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	409f      	lsls	r7, r3
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	409c      	lsls	r4, r3
 800051a:	fa20 f101 	lsr.w	r1, r0, r1
 800051e:	430f      	orrs	r7, r1
 8000520:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000524:	fa1f fe8c 	uxth.w	lr, ip
 8000528:	0c22      	lsrs	r2, r4, #16
 800052a:	fbb7 f6f1 	udiv	r6, r7, r1
 800052e:	fb01 7716 	mls	r7, r1, r6, r7
 8000532:	fb06 f00e 	mul.w	r0, r6, lr
 8000536:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800053a:	4290      	cmp	r0, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x5c>
 800053e:	eb1c 0202 	adds.w	r2, ip, r2
 8000542:	f106 37ff 	add.w	r7, r6, #4294967295
 8000546:	d202      	bcs.n	800054e <__udivmoddi4+0x5a>
 8000548:	4290      	cmp	r0, r2
 800054a:	f200 8137 	bhi.w	80007bc <__udivmoddi4+0x2c8>
 800054e:	463e      	mov	r6, r7
 8000550:	1a12      	subs	r2, r2, r0
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb2 f0f1 	udiv	r0, r2, r1
 8000558:	fb01 2210 	mls	r2, r1, r0, r2
 800055c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000560:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000564:	45a6      	cmp	lr, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x86>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000570:	d202      	bcs.n	8000578 <__udivmoddi4+0x84>
 8000572:	45a6      	cmp	lr, r4
 8000574:	f200 811c 	bhi.w	80007b0 <__udivmoddi4+0x2bc>
 8000578:	4610      	mov	r0, r2
 800057a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800057e:	eba4 040e 	sub.w	r4, r4, lr
 8000582:	2600      	movs	r6, #0
 8000584:	b11d      	cbz	r5, 800058e <__udivmoddi4+0x9a>
 8000586:	40dc      	lsrs	r4, r3
 8000588:	2300      	movs	r3, #0
 800058a:	e9c5 4300 	strd	r4, r3, [r5]
 800058e:	4631      	mov	r1, r6
 8000590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000594:	428b      	cmp	r3, r1
 8000596:	d909      	bls.n	80005ac <__udivmoddi4+0xb8>
 8000598:	2d00      	cmp	r5, #0
 800059a:	f000 80fd 	beq.w	8000798 <__udivmoddi4+0x2a4>
 800059e:	2600      	movs	r6, #0
 80005a0:	e9c5 0100 	strd	r0, r1, [r5]
 80005a4:	4630      	mov	r0, r6
 80005a6:	4631      	mov	r1, r6
 80005a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005ac:	fab3 f683 	clz	r6, r3
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d14b      	bne.n	800064c <__udivmoddi4+0x158>
 80005b4:	428b      	cmp	r3, r1
 80005b6:	f0c0 80f2 	bcc.w	800079e <__udivmoddi4+0x2aa>
 80005ba:	4282      	cmp	r2, r0
 80005bc:	f240 80ef 	bls.w	800079e <__udivmoddi4+0x2aa>
 80005c0:	4630      	mov	r0, r6
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d0e3      	beq.n	800058e <__udivmoddi4+0x9a>
 80005c6:	e9c5 4700 	strd	r4, r7, [r5]
 80005ca:	e7e0      	b.n	800058e <__udivmoddi4+0x9a>
 80005cc:	b902      	cbnz	r2, 80005d0 <__udivmoddi4+0xdc>
 80005ce:	deff      	udf	#255	; 0xff
 80005d0:	fab2 f382 	clz	r3, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f040 809d 	bne.w	8000714 <__udivmoddi4+0x220>
 80005da:	1a89      	subs	r1, r1, r2
 80005dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005e0:	b297      	uxth	r7, r2
 80005e2:	2601      	movs	r6, #1
 80005e4:	0c20      	lsrs	r0, r4, #16
 80005e6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005ea:	fb0e 1112 	mls	r1, lr, r2, r1
 80005ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005f2:	fb07 f002 	mul.w	r0, r7, r2
 80005f6:	4288      	cmp	r0, r1
 80005f8:	d90f      	bls.n	800061a <__udivmoddi4+0x126>
 80005fa:	eb1c 0101 	adds.w	r1, ip, r1
 80005fe:	f102 38ff 	add.w	r8, r2, #4294967295
 8000602:	bf2c      	ite	cs
 8000604:	f04f 0901 	movcs.w	r9, #1
 8000608:	f04f 0900 	movcc.w	r9, #0
 800060c:	4288      	cmp	r0, r1
 800060e:	d903      	bls.n	8000618 <__udivmoddi4+0x124>
 8000610:	f1b9 0f00 	cmp.w	r9, #0
 8000614:	f000 80cf 	beq.w	80007b6 <__udivmoddi4+0x2c2>
 8000618:	4642      	mov	r2, r8
 800061a:	1a09      	subs	r1, r1, r0
 800061c:	b2a4      	uxth	r4, r4
 800061e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000622:	fb0e 1110 	mls	r1, lr, r0, r1
 8000626:	fb00 f707 	mul.w	r7, r0, r7
 800062a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800062e:	42a7      	cmp	r7, r4
 8000630:	d908      	bls.n	8000644 <__udivmoddi4+0x150>
 8000632:	eb1c 0404 	adds.w	r4, ip, r4
 8000636:	f100 31ff 	add.w	r1, r0, #4294967295
 800063a:	d202      	bcs.n	8000642 <__udivmoddi4+0x14e>
 800063c:	42a7      	cmp	r7, r4
 800063e:	f200 80b4 	bhi.w	80007aa <__udivmoddi4+0x2b6>
 8000642:	4608      	mov	r0, r1
 8000644:	1be4      	subs	r4, r4, r7
 8000646:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800064a:	e79b      	b.n	8000584 <__udivmoddi4+0x90>
 800064c:	f1c6 0720 	rsb	r7, r6, #32
 8000650:	40b3      	lsls	r3, r6
 8000652:	fa01 f406 	lsl.w	r4, r1, r6
 8000656:	fa22 fc07 	lsr.w	ip, r2, r7
 800065a:	40f9      	lsrs	r1, r7
 800065c:	40b2      	lsls	r2, r6
 800065e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000662:	fa20 f307 	lsr.w	r3, r0, r7
 8000666:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800066a:	431c      	orrs	r4, r3
 800066c:	fa1f fe8c 	uxth.w	lr, ip
 8000670:	fa00 f306 	lsl.w	r3, r0, r6
 8000674:	0c20      	lsrs	r0, r4, #16
 8000676:	fbb1 f8f9 	udiv	r8, r1, r9
 800067a:	fb09 1118 	mls	r1, r9, r8, r1
 800067e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000682:	fb08 f00e 	mul.w	r0, r8, lr
 8000686:	4288      	cmp	r0, r1
 8000688:	d90f      	bls.n	80006aa <__udivmoddi4+0x1b6>
 800068a:	eb1c 0101 	adds.w	r1, ip, r1
 800068e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000692:	bf2c      	ite	cs
 8000694:	f04f 0b01 	movcs.w	fp, #1
 8000698:	f04f 0b00 	movcc.w	fp, #0
 800069c:	4288      	cmp	r0, r1
 800069e:	d903      	bls.n	80006a8 <__udivmoddi4+0x1b4>
 80006a0:	f1bb 0f00 	cmp.w	fp, #0
 80006a4:	f000 808d 	beq.w	80007c2 <__udivmoddi4+0x2ce>
 80006a8:	46d0      	mov	r8, sl
 80006aa:	1a09      	subs	r1, r1, r0
 80006ac:	b2a4      	uxth	r4, r4
 80006ae:	fbb1 f0f9 	udiv	r0, r1, r9
 80006b2:	fb09 1110 	mls	r1, r9, r0, r1
 80006b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ba:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006be:	458e      	cmp	lr, r1
 80006c0:	d907      	bls.n	80006d2 <__udivmoddi4+0x1de>
 80006c2:	eb1c 0101 	adds.w	r1, ip, r1
 80006c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006ca:	d201      	bcs.n	80006d0 <__udivmoddi4+0x1dc>
 80006cc:	458e      	cmp	lr, r1
 80006ce:	d87f      	bhi.n	80007d0 <__udivmoddi4+0x2dc>
 80006d0:	4620      	mov	r0, r4
 80006d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006d6:	eba1 010e 	sub.w	r1, r1, lr
 80006da:	fba0 9802 	umull	r9, r8, r0, r2
 80006de:	4541      	cmp	r1, r8
 80006e0:	464c      	mov	r4, r9
 80006e2:	46c6      	mov	lr, r8
 80006e4:	d302      	bcc.n	80006ec <__udivmoddi4+0x1f8>
 80006e6:	d106      	bne.n	80006f6 <__udivmoddi4+0x202>
 80006e8:	454b      	cmp	r3, r9
 80006ea:	d204      	bcs.n	80006f6 <__udivmoddi4+0x202>
 80006ec:	3801      	subs	r0, #1
 80006ee:	ebb9 0402 	subs.w	r4, r9, r2
 80006f2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d070      	beq.n	80007dc <__udivmoddi4+0x2e8>
 80006fa:	1b1a      	subs	r2, r3, r4
 80006fc:	eb61 010e 	sbc.w	r1, r1, lr
 8000700:	fa22 f306 	lsr.w	r3, r2, r6
 8000704:	fa01 f707 	lsl.w	r7, r1, r7
 8000708:	40f1      	lsrs	r1, r6
 800070a:	2600      	movs	r6, #0
 800070c:	431f      	orrs	r7, r3
 800070e:	e9c5 7100 	strd	r7, r1, [r5]
 8000712:	e73c      	b.n	800058e <__udivmoddi4+0x9a>
 8000714:	fa02 fc03 	lsl.w	ip, r2, r3
 8000718:	f1c3 0020 	rsb	r0, r3, #32
 800071c:	fa01 f203 	lsl.w	r2, r1, r3
 8000720:	fa21 f600 	lsr.w	r6, r1, r0
 8000724:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000728:	fa24 f100 	lsr.w	r1, r4, r0
 800072c:	fa1f f78c 	uxth.w	r7, ip
 8000730:	409c      	lsls	r4, r3
 8000732:	4311      	orrs	r1, r2
 8000734:	fbb6 f0fe 	udiv	r0, r6, lr
 8000738:	0c0a      	lsrs	r2, r1, #16
 800073a:	fb0e 6610 	mls	r6, lr, r0, r6
 800073e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000742:	fb00 f607 	mul.w	r6, r0, r7
 8000746:	4296      	cmp	r6, r2
 8000748:	d90e      	bls.n	8000768 <__udivmoddi4+0x274>
 800074a:	eb1c 0202 	adds.w	r2, ip, r2
 800074e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000752:	bf2c      	ite	cs
 8000754:	f04f 0901 	movcs.w	r9, #1
 8000758:	f04f 0900 	movcc.w	r9, #0
 800075c:	4296      	cmp	r6, r2
 800075e:	d902      	bls.n	8000766 <__udivmoddi4+0x272>
 8000760:	f1b9 0f00 	cmp.w	r9, #0
 8000764:	d031      	beq.n	80007ca <__udivmoddi4+0x2d6>
 8000766:	4640      	mov	r0, r8
 8000768:	1b92      	subs	r2, r2, r6
 800076a:	b289      	uxth	r1, r1
 800076c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000770:	fb0e 2216 	mls	r2, lr, r6, r2
 8000774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000778:	fb06 f207 	mul.w	r2, r6, r7
 800077c:	428a      	cmp	r2, r1
 800077e:	d907      	bls.n	8000790 <__udivmoddi4+0x29c>
 8000780:	eb1c 0101 	adds.w	r1, ip, r1
 8000784:	f106 38ff 	add.w	r8, r6, #4294967295
 8000788:	d201      	bcs.n	800078e <__udivmoddi4+0x29a>
 800078a:	428a      	cmp	r2, r1
 800078c:	d823      	bhi.n	80007d6 <__udivmoddi4+0x2e2>
 800078e:	4646      	mov	r6, r8
 8000790:	1a89      	subs	r1, r1, r2
 8000792:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000796:	e725      	b.n	80005e4 <__udivmoddi4+0xf0>
 8000798:	462e      	mov	r6, r5
 800079a:	4628      	mov	r0, r5
 800079c:	e6f7      	b.n	800058e <__udivmoddi4+0x9a>
 800079e:	1a84      	subs	r4, r0, r2
 80007a0:	eb61 0303 	sbc.w	r3, r1, r3
 80007a4:	2001      	movs	r0, #1
 80007a6:	461f      	mov	r7, r3
 80007a8:	e70b      	b.n	80005c2 <__udivmoddi4+0xce>
 80007aa:	4464      	add	r4, ip
 80007ac:	3802      	subs	r0, #2
 80007ae:	e749      	b.n	8000644 <__udivmoddi4+0x150>
 80007b0:	4464      	add	r4, ip
 80007b2:	3802      	subs	r0, #2
 80007b4:	e6e1      	b.n	800057a <__udivmoddi4+0x86>
 80007b6:	3a02      	subs	r2, #2
 80007b8:	4461      	add	r1, ip
 80007ba:	e72e      	b.n	800061a <__udivmoddi4+0x126>
 80007bc:	3e02      	subs	r6, #2
 80007be:	4462      	add	r2, ip
 80007c0:	e6c6      	b.n	8000550 <__udivmoddi4+0x5c>
 80007c2:	f1a8 0802 	sub.w	r8, r8, #2
 80007c6:	4461      	add	r1, ip
 80007c8:	e76f      	b.n	80006aa <__udivmoddi4+0x1b6>
 80007ca:	3802      	subs	r0, #2
 80007cc:	4462      	add	r2, ip
 80007ce:	e7cb      	b.n	8000768 <__udivmoddi4+0x274>
 80007d0:	3802      	subs	r0, #2
 80007d2:	4461      	add	r1, ip
 80007d4:	e77d      	b.n	80006d2 <__udivmoddi4+0x1de>
 80007d6:	3e02      	subs	r6, #2
 80007d8:	4461      	add	r1, ip
 80007da:	e7d9      	b.n	8000790 <__udivmoddi4+0x29c>
 80007dc:	462e      	mov	r6, r5
 80007de:	e6d6      	b.n	800058e <__udivmoddi4+0x9a>

080007e0 <__aeabi_idiv0>:
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <ST7789V_SEND_COMMAND>:

static uint8_t rotationNum=1;
static bool _cp437    = false;

void ST7789V_SEND_COMMAND(uint16_t cmd)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 8000802:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	8013      	strh	r3, [r2, #0]

}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <ST7789V_SEND_DATA>:
void ST7789V_SEND_DATA(uint16_t data)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <ST7789V_SEND_DATA+0x1c>)
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	8013      	strh	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	60080000 	.word	0x60080000

08000838 <ST7789V_writeRegister32>:
	ST7789V_SEND_COMMAND(r);
	ST7789V_SEND_DATA((d >> 8));
	ST7789V_SEND_DATA(d);
}

void ST7789V_writeRegister32(uint8_t r, uint32_t d) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
	ST7789V_SEND_COMMAND(r);
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29b      	uxth	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ffd5 	bl	80007f8 <ST7789V_SEND_COMMAND>
	ST7789V_SEND_DATA((d >> 24));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	0e1b      	lsrs	r3, r3, #24
 8000852:	b29b      	uxth	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffdf 	bl	8000818 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 16));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	0c1b      	lsrs	r3, r3, #16
 800085e:	b29b      	uxth	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ffd9 	bl	8000818 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 8));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	b29b      	uxth	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ffd3 	bl	8000818 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA(d);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffce 	bl	8000818 <ST7789V_SEND_DATA>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <ST7789V_setCursorPosition>:

void ST7789V_setCursorPosition(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	4604      	mov	r4, r0
 800088c:	4608      	mov	r0, r1
 800088e:	4611      	mov	r1, r2
 8000890:	461a      	mov	r2, r3
 8000892:	4623      	mov	r3, r4
 8000894:	80fb      	strh	r3, [r7, #6]
 8000896:	4603      	mov	r3, r0
 8000898:	80bb      	strh	r3, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	807b      	strh	r3, [r7, #2]
 800089e:	4613      	mov	r3, r2
 80008a0:	803b      	strh	r3, [r7, #0]
  uint32_t t;
  t = (x0 << 16) | x1;
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	041a      	lsls	r2, r3, #16
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 80008ac:	202c      	movs	r0, #44	; 0x2c
 80008ae:	f7ff ffa3 	bl	80007f8 <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_CASET, t);
 80008b2:	68f9      	ldr	r1, [r7, #12]
 80008b4:	202a      	movs	r0, #42	; 0x2a
 80008b6:	f7ff ffbf 	bl	8000838 <ST7789V_writeRegister32>
  t = (y0 << 16) | y1;
 80008ba:	88bb      	ldrh	r3, [r7, #4]
 80008bc:	041a      	lsls	r2, r3, #16
 80008be:	883b      	ldrh	r3, [r7, #0]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 80008c4:	202c      	movs	r0, #44	; 0x2c
 80008c6:	f7ff ff97 	bl	80007f8 <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_RASET, t);
 80008ca:	68f9      	ldr	r1, [r7, #12]
 80008cc:	202b      	movs	r0, #43	; 0x2b
 80008ce:	f7ff ffb3 	bl	8000838 <ST7789V_writeRegister32>
  ST7789V_SEND_COMMAND (ST7789V_RAMWR);
 80008d2:	202c      	movs	r0, #44	; 0x2c
 80008d4:	f7ff ff90 	bl	80007f8 <ST7789V_SEND_COMMAND>
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}

080008e0 <ST7789V_init>:
	/* invert area */
	ST7789V_SEND_COMMAND(ST7789V_INVON);
}

void ST7789V_init(void)
 {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
   ExternalSRAMSpecStruct ST7789VSpec = {
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	f8c3 2003 	str.w	r2, [r3, #3]
 80008f0:	2310      	movs	r3, #16
 80008f2:	703b      	strb	r3, [r7, #0]
 80008f4:	2332      	movs	r3, #50	; 0x32
 80008f6:	713b      	strb	r3, [r7, #4]
 80008f8:	2301      	movs	r3, #1
 80008fa:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 80008fc:	463b      	mov	r3, r7
 80008fe:	2101      	movs	r1, #1
 8000900:	4618      	mov	r0, r3
 8000902:	f000 faf7 	bl	8000ef4 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2104      	movs	r1, #4
 800090a:	4877      	ldr	r0, [pc, #476]	; (8000ae8 <ST7789V_init+0x208>)
 800090c:	f002 fcd6 	bl	80032bc <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f001 fc37 	bl	8002184 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2104      	movs	r1, #4
 800091a:	4873      	ldr	r0, [pc, #460]	; (8000ae8 <ST7789V_init+0x208>)
 800091c:	f002 fcce 	bl	80032bc <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8000920:	200a      	movs	r0, #10
 8000922:	f001 fc2f 	bl	8002184 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2104      	movs	r1, #4
 800092a:	486f      	ldr	r0, [pc, #444]	; (8000ae8 <ST7789V_init+0x208>)
 800092c:	f002 fcc6 	bl	80032bc <HAL_GPIO_WritePin>
      HAL_Delay(120);
 8000930:	2078      	movs	r0, #120	; 0x78
 8000932:	f001 fc27 	bl	8002184 <HAL_Delay>


      ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 8000936:	2011      	movs	r0, #17
 8000938:	f7ff ff5e 	bl	80007f8 <ST7789V_SEND_COMMAND>
      HAL_Delay(120);
 800093c:	2078      	movs	r0, #120	; 0x78
 800093e:	f001 fc21 	bl	8002184 <HAL_Delay>

      ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 8000942:	2036      	movs	r0, #54	; 0x36
 8000944:	f7ff ff58 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff ff65 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 800094e:	20b2      	movs	r0, #178	; 0xb2
 8000950:	f7ff ff52 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0C);
 8000954:	200c      	movs	r0, #12
 8000956:	f7ff ff5f 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0C);
 800095a:	200c      	movs	r0, #12
 800095c:	f7ff ff5c 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff ff59 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 8000966:	2033      	movs	r0, #51	; 0x33
 8000968:	f7ff ff56 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 800096c:	2033      	movs	r0, #51	; 0x33
 800096e:	f7ff ff53 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 8000972:	20b7      	movs	r0, #183	; 0xb7
 8000974:	f7ff ff40 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x70); //VGH, VGL
 8000978:	2070      	movs	r0, #112	; 0x70
 800097a:	f7ff ff4d 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 800097e:	20bb      	movs	r0, #187	; 0xbb
 8000980:	f7ff ff3a 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x3A);
 8000984:	203a      	movs	r0, #58	; 0x3a
 8000986:	f7ff ff47 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 800098a:	20c0      	movs	r0, #192	; 0xc0
 800098c:	f7ff ff34 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x2C);
 8000990:	202c      	movs	r0, #44	; 0x2c
 8000992:	f7ff ff41 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 8000996:	20c2      	movs	r0, #194	; 0xc2
 8000998:	f7ff ff2e 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x01);
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff ff3b 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VRHS);
 80009a2:	20c3      	movs	r0, #195	; 0xc3
 80009a4:	f7ff ff28 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x14);
 80009a8:	2014      	movs	r0, #20
 80009aa:	f7ff ff35 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVS);
 80009ae:	20c4      	movs	r0, #196	; 0xc4
 80009b0:	f7ff ff22 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x20);
 80009b4:	2020      	movs	r0, #32
 80009b6:	f7ff ff2f 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 80009ba:	20c6      	movs	r0, #198	; 0xc6
 80009bc:	f7ff ff1c 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0F); //60Hz 0A
 80009c0:	200f      	movs	r0, #15
 80009c2:	f7ff ff29 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 80009c6:	20d0      	movs	r0, #208	; 0xd0
 80009c8:	f7ff ff16 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xA4);
 80009cc:	20a4      	movs	r0, #164	; 0xa4
 80009ce:	f7ff ff23 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xA1); //AVDD VCL
 80009d2:	20a1      	movs	r0, #161	; 0xa1
 80009d4:	f7ff ff20 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 80009d8:	20e0      	movs	r0, #224	; 0xe0
 80009da:	f7ff ff0d 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 80009de:	20d0      	movs	r0, #208	; 0xd0
 80009e0:	f7ff ff1a 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 80009e4:	2007      	movs	r0, #7
 80009e6:	f7ff ff17 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 80009ea:	200d      	movs	r0, #13
 80009ec:	f7ff ff14 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 80009f0:	2009      	movs	r0, #9
 80009f2:	f7ff ff11 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x08);
 80009f6:	2008      	movs	r0, #8
 80009f8:	f7ff ff0e 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 80009fc:	2025      	movs	r0, #37	; 0x25
 80009fe:	f7ff ff0b 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x28);
 8000a02:	2028      	movs	r0, #40	; 0x28
 8000a04:	f7ff ff08 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x53);
 8000a08:	2053      	movs	r0, #83	; 0x53
 8000a0a:	f7ff ff05 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000a0e:	2039      	movs	r0, #57	; 0x39
 8000a10:	f7ff ff02 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x12);
 8000a14:	2012      	movs	r0, #18
 8000a16:	f7ff feff 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0B);
 8000a1a:	200b      	movs	r0, #11
 8000a1c:	f7ff fefc 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000a20:	200a      	movs	r0, #10
 8000a22:	f7ff fef9 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x17);
 8000a26:	2017      	movs	r0, #23
 8000a28:	f7ff fef6 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000a2c:	2034      	movs	r0, #52	; 0x34
 8000a2e:	f7ff fef3 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 8000a32:	20e1      	movs	r0, #225	; 0xe1
 8000a34:	f7ff fee0 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000a38:	20d0      	movs	r0, #208	; 0xd0
 8000a3a:	f7ff feed 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff feea 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000a44:	200d      	movs	r0, #13
 8000a46:	f7ff fee7 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000a4a:	2009      	movs	r0, #9
 8000a4c:	f7ff fee4 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000a50:	2009      	movs	r0, #9
 8000a52:	f7ff fee1 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000a56:	2025      	movs	r0, #37	; 0x25
 8000a58:	f7ff fede 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x29);
 8000a5c:	2029      	movs	r0, #41	; 0x29
 8000a5e:	f7ff fedb 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x35);
 8000a62:	2035      	movs	r0, #53	; 0x35
 8000a64:	f7ff fed8 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000a68:	2039      	movs	r0, #57	; 0x39
 8000a6a:	f7ff fed5 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x13);
 8000a6e:	2013      	movs	r0, #19
 8000a70:	f7ff fed2 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f7ff fecf 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f7ff fecc 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x16);
 8000a80:	2016      	movs	r0, #22
 8000a82:	f7ff fec9 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000a86:	2034      	movs	r0, #52	; 0x34
 8000a88:	f7ff fec6 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000a8c:	2021      	movs	r0, #33	; 0x21
 8000a8e:	f7ff feb3 	bl	80007f8 <ST7789V_SEND_COMMAND>

      ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 8000a92:	203a      	movs	r0, #58	; 0x3a
 8000a94:	f7ff feb0 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000a98:	2055      	movs	r0, #85	; 0x55
 8000a9a:	f7ff febd 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_CASET);
 8000a9e:	202a      	movs	r0, #42	; 0x2a
 8000aa0:	f7ff feaa 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff feb7 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff feb4 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff feb1 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xEF);
 8000ab6:	20ef      	movs	r0, #239	; 0xef
 8000ab8:	f7ff feae 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000abc:	202b      	movs	r0, #43	; 0x2b
 8000abe:	f7ff fe9b 	bl	80007f8 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fea8 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff fea5 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x01);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff fea2 	bl	8000818 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x3F);
 8000ad4:	203f      	movs	r0, #63	; 0x3f
 8000ad6:	f7ff fe9f 	bl	8000818 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000ada:	2029      	movs	r0, #41	; 0x29
 8000adc:	f7ff fe8c 	bl	80007f8 <ST7789V_SEND_COMMAND>
//      ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 }
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	42021000 	.word	0x42021000

08000aec <ST7789V_drawPixel>:

void ST7789V_drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
 8000af6:	460b      	mov	r3, r1
 8000af8:	80bb      	strh	r3, [r7, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	807b      	strh	r3, [r7, #2]
	ST7789V_setCursorPosition(x, y, x, y);
 8000afe:	88bb      	ldrh	r3, [r7, #4]
 8000b00:	88fa      	ldrh	r2, [r7, #6]
 8000b02:	88b9      	ldrh	r1, [r7, #4]
 8000b04:	88f8      	ldrh	r0, [r7, #6]
 8000b06:	f7ff febd 	bl	8000884 <ST7789V_setCursorPosition>
	ST7789V_SEND_DATA(color);
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fe83 	bl	8000818 <ST7789V_SEND_DATA>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <ST7789V_fill>:

void ST7789V_fill(uint16_t color) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ST7789V_PIXEL_COUNT;
 8000b26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000b2a:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <ST7789V_fill+0x6c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d003      	beq.n	8000b3c <ST7789V_fill+0x20>
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <ST7789V_fill+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d107      	bne.n	8000b4c <ST7789V_fill+0x30>
	{
		ST7789V_setCursorPosition(0, 0,   ST7789V_WIDTH -1, ST7789V_HEIGHT -1);
 8000b3c:	f240 133f 	movw	r3, #319	; 0x13f
 8000b40:	22ef      	movs	r2, #239	; 0xef
 8000b42:	2100      	movs	r1, #0
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff fe9d 	bl	8000884 <ST7789V_setCursorPosition>
 8000b4a:	e00e      	b.n	8000b6a <ST7789V_fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <ST7789V_fill+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d003      	beq.n	8000b5c <ST7789V_fill+0x40>
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <ST7789V_fill+0x6c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	d106      	bne.n	8000b6a <ST7789V_fill+0x4e>
	{
		ST7789V_setCursorPosition(0, 0, ST7789V_HEIGHT -1, ST7789V_WIDTH -1);
 8000b5c:	23ef      	movs	r3, #239	; 0xef
 8000b5e:	f240 123f 	movw	r2, #319	; 0x13f
 8000b62:	2100      	movs	r1, #0
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff fe8d 	bl	8000884 <ST7789V_setCursorPosition>
	}

	while (n) {
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d007      	beq.n	8000b80 <ST7789V_fill+0x64>
	   n--;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
	   ST7789V_SEND_DATA(color);
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe4d 	bl	8000818 <ST7789V_SEND_DATA>
	while (n) {
 8000b7e:	e7f4      	b.n	8000b6a <ST7789V_fill+0x4e>
	}
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000004 	.word	0x20000004

08000b8c <ST7789V_drawCircle>:
			ST7789V_SEND_DATA(color);
	}
}

void ST7789V_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4604      	mov	r4, r0
 8000b94:	4608      	mov	r0, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	80fb      	strh	r3, [r7, #6]
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80bb      	strh	r3, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	807b      	strh	r3, [r7, #2]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	f1c3 0301 	rsb	r3, r3, #1
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	03d2      	lsls	r2, r2, #15
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	81fb      	strh	r3, [r7, #14]

  ST7789V_drawPixel(x0  , y0+r, color);
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b299      	uxth	r1, r3
 8000bd6:	883a      	ldrh	r2, [r7, #0]
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff86 	bl	8000aec <ST7789V_drawPixel>
  ST7789V_drawPixel(x0  , y0-r, color);
 8000be0:	88ba      	ldrh	r2, [r7, #4]
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	b299      	uxth	r1, r3
 8000be8:	883a      	ldrh	r2, [r7, #0]
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff7d 	bl	8000aec <ST7789V_drawPixel>
  ST7789V_drawPixel(x0+r, y0  , color);
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	883a      	ldrh	r2, [r7, #0]
 8000bfc:	88b9      	ldrh	r1, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff74 	bl	8000aec <ST7789V_drawPixel>
  ST7789V_drawPixel(x0-r, y0  , color);
 8000c04:	88fa      	ldrh	r2, [r7, #6]
 8000c06:	887b      	ldrh	r3, [r7, #2]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	883a      	ldrh	r2, [r7, #0]
 8000c0e:	88b9      	ldrh	r1, [r7, #4]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff6b 	bl	8000aec <ST7789V_drawPixel>

  while (x<y) {
 8000c16:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	f280 8083 	bge.w	8000d2a <ST7789V_drawCircle+0x19e>
    if (f >= 0) {
 8000c24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <ST7789V_drawCircle+0xbe>
      y--;
 8000c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	3b01      	subs	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000c38:	8a7b      	ldrh	r3, [r7, #18]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8000c40:	8afa      	ldrh	r2, [r7, #22]
 8000c42:	8a7b      	ldrh	r3, [r7, #18]
 8000c44:	4413      	add	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000c4a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	3301      	adds	r3, #1
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000c56:	8abb      	ldrh	r3, [r7, #20]
 8000c58:	3302      	adds	r3, #2
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8000c5e:	8afa      	ldrh	r2, [r7, #22]
 8000c60:	8abb      	ldrh	r3, [r7, #20]
 8000c62:	4413      	add	r3, r2
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	82fb      	strh	r3, [r7, #22]
  
    ST7789V_drawPixel(x0 + x, y0 + y, color);
 8000c68:	8a3a      	ldrh	r2, [r7, #16]
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b298      	uxth	r0, r3
 8000c70:	89fa      	ldrh	r2, [r7, #14]
 8000c72:	88bb      	ldrh	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	883a      	ldrh	r2, [r7, #0]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f7ff ff36 	bl	8000aec <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 + y, color);
 8000c80:	8a3b      	ldrh	r3, [r7, #16]
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	b298      	uxth	r0, r3
 8000c88:	89fa      	ldrh	r2, [r7, #14]
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	883a      	ldrh	r2, [r7, #0]
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff ff2a 	bl	8000aec <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + x, y0 - y, color);
 8000c98:	8a3a      	ldrh	r2, [r7, #16]
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b298      	uxth	r0, r3
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	88ba      	ldrh	r2, [r7, #4]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	883a      	ldrh	r2, [r7, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	f7ff ff1e 	bl	8000aec <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 - y, color);
 8000cb0:	8a3b      	ldrh	r3, [r7, #16]
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	b298      	uxth	r0, r3
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	88ba      	ldrh	r2, [r7, #4]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	883a      	ldrh	r2, [r7, #0]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff ff12 	bl	8000aec <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 + x, color);
 8000cc8:	89fa      	ldrh	r2, [r7, #14]
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b298      	uxth	r0, r3
 8000cd0:	8a3a      	ldrh	r2, [r7, #16]
 8000cd2:	88bb      	ldrh	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	883a      	ldrh	r2, [r7, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f7ff ff06 	bl	8000aec <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 + x, color);
 8000ce0:	89fb      	ldrh	r3, [r7, #14]
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	b298      	uxth	r0, r3
 8000ce8:	8a3a      	ldrh	r2, [r7, #16]
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	883a      	ldrh	r2, [r7, #0]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f7ff fefa 	bl	8000aec <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 - x, color);
 8000cf8:	89fa      	ldrh	r2, [r7, #14]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	8a3b      	ldrh	r3, [r7, #16]
 8000d02:	88ba      	ldrh	r2, [r7, #4]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	883a      	ldrh	r2, [r7, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f7ff feee 	bl	8000aec <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 - x, color);
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	88fa      	ldrh	r2, [r7, #6]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b298      	uxth	r0, r3
 8000d18:	8a3b      	ldrh	r3, [r7, #16]
 8000d1a:	88ba      	ldrh	r2, [r7, #4]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	883a      	ldrh	r2, [r7, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	f7ff fee2 	bl	8000aec <ST7789V_drawPixel>
  while (x<y) {
 8000d28:	e775      	b.n	8000c16 <ST7789V_drawCircle+0x8a>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd90      	pop	{r4, r7, pc}

08000d32 <ST7789V_drawLine>:
  ST7789V_drawFastVLine(x0, y0-r, 2*r+1, color);
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

void ST7789V_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000d32:	b590      	push	{r4, r7, lr}
 8000d34:	b087      	sub	sp, #28
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4604      	mov	r4, r0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4623      	mov	r3, r4
 8000d42:	80fb      	strh	r3, [r7, #6]
 8000d44:	4603      	mov	r3, r0
 8000d46:	80bb      	strh	r3, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000d50:	883b      	ldrh	r3, [r7, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d5c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	4619      	mov	r1, r3
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bfb8      	it	lt
 8000d6c:	425b      	neglt	r3, r3
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	bfcc      	ite	gt
 8000d72:	2301      	movgt	r3, #1
 8000d74:	2300      	movle	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	827b      	strh	r3, [r7, #18]
  if (steep) {
 8000d7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00b      	beq.n	8000d9a <ST7789V_drawLine+0x68>
	std::swap(x0, y0);
 8000d82:	1d3a      	adds	r2, r7, #4
 8000d84:	1dbb      	adds	r3, r7, #6
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f88d 	bl	8000ea8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(x1, y1);
 8000d8e:	463a      	mov	r2, r7
 8000d90:	1cbb      	adds	r3, r7, #2
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f887 	bl	8000ea8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  if (x0 > x1) {
 8000d9a:	88fa      	ldrh	r2, [r7, #6]
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d90b      	bls.n	8000dba <ST7789V_drawLine+0x88>
	std::swap(x0, x1);
 8000da2:	1cba      	adds	r2, r7, #2
 8000da4:	1dbb      	adds	r3, r7, #6
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f87d 	bl	8000ea8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(y0, y1);
 8000dae:	463a      	mov	r2, r7
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f877 	bl	8000ea8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  uint16_t dx, dy;
  dx = x1 - x0;
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000dc2:	883b      	ldrh	r3, [r7, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	bfb8      	it	lt
 8000dce:	425b      	neglt	r3, r3
 8000dd0:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx>>1;
 8000dd2:	8a3b      	ldrh	r3, [r7, #16]
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	82fb      	strh	r3, [r7, #22]
  int16_t ystep;

  if (y0 < y1) {
 8000dda:	88ba      	ldrh	r2, [r7, #4]
 8000ddc:	883b      	ldrh	r3, [r7, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d202      	bcs.n	8000de8 <ST7789V_drawLine+0xb6>
    ystep = 1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	82bb      	strh	r3, [r7, #20]
 8000de6:	e002      	b.n	8000dee <ST7789V_drawLine+0xbc>
  } else {
    ystep = -1;
 8000de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dec:	82bb      	strh	r3, [r7, #20]
  }

  for (; x0<=x1; x0++) {
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d828      	bhi.n	8000e48 <ST7789V_drawLine+0x116>
    if (steep) {
 8000df6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <ST7789V_drawLine+0xda>
      ST7789V_drawPixel(y0, x0, color);
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	88f9      	ldrh	r1, [r7, #6]
 8000e02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fe71 	bl	8000aec <ST7789V_drawPixel>
 8000e0a:	e005      	b.n	8000e18 <ST7789V_drawLine+0xe6>
    } else {
      ST7789V_drawPixel(x0, y0, color);
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	88b9      	ldrh	r1, [r7, #4]
 8000e10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fe6a 	bl	8000aec <ST7789V_drawPixel>
    }
    err -= dy;
 8000e18:	8afa      	ldrh	r2, [r7, #22]
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	82fb      	strh	r3, [r7, #22]
    if (err < 0) {
 8000e22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da09      	bge.n	8000e3e <ST7789V_drawLine+0x10c>
      y0 += ystep;
 8000e2a:	88ba      	ldrh	r2, [r7, #4]
 8000e2c:	8abb      	ldrh	r3, [r7, #20]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000e34:	8afa      	ldrh	r2, [r7, #22]
 8000e36:	8a3b      	ldrh	r3, [r7, #16]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	82fb      	strh	r3, [r7, #22]
  for (; x0<=x1; x0++) {
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	3301      	adds	r3, #1
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	e7d2      	b.n	8000dee <ST7789V_drawLine+0xbc>
    }
  }
}	
 8000e48:	bf00      	nop
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}

08000e50 <ST7789V_drawFastVLine>:
{
	ST7789V_drawLine(x, y, x+w-1, y, color);
}

void ST7789V_drawFastVLine(uint16_t x, uint16_t y, uint16_t h, uint16_t color)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	4604      	mov	r4, r0
 8000e58:	4608      	mov	r0, r1
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4623      	mov	r3, r4
 8000e60:	80fb      	strh	r3, [r7, #6]
 8000e62:	4603      	mov	r3, r0
 8000e64:	80bb      	strh	r3, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	807b      	strh	r3, [r7, #2]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	803b      	strh	r3, [r7, #0]
	ST7789V_drawLine(x, y, x, y+h-1, color);
 8000e6e:	88ba      	ldrh	r2, [r7, #4]
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	4413      	add	r3, r2
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	3b01      	subs	r3, #1
 8000e78:	b29c      	uxth	r4, r3
 8000e7a:	88fa      	ldrh	r2, [r7, #6]
 8000e7c:	88b9      	ldrh	r1, [r7, #4]
 8000e7e:	88f8      	ldrh	r0, [r7, #6]
 8000e80:	883b      	ldrh	r3, [r7, #0]
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	4623      	mov	r3, r4
 8000e86:	f7ff ff54 	bl	8000d32 <ST7789V_drawLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}

08000e92 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffed 	bl	8000e92 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 8000ebe:	6838      	ldr	r0, [r7, #0]
 8000ec0:	f7ff ffe7 	bl	8000e92 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000ecc:	f107 030e 	add.w	r3, r7, #14
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ffde 	bl	8000e92 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	881a      	ldrh	r2, [r3, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	801a      	strh	r2, [r3, #0]
    }
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000eea:	f00a f889 	bl	800b000 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0a0      	sub	sp, #128	; 0x80
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	2220      	movs	r2, #32
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f024 fd33 	bl	8025974 <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <FMCSRAMInit+0xc4>)
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f12:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <FMCSRAMInit+0xc8>)
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d102      	bne.n	8000f22 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8000f20:	e005      	b.n	8000f2e <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	2201      	movs	r2, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d102      	bne.n	8000f3c <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000f36:	2300      	movs	r3, #0
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f3a:	e008      	b.n	8000f4e <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	d102      	bne.n	8000f4a <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f44:	2310      	movs	r3, #16
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f48:	e001      	b.n	8000f4e <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000f52:	2300      	movs	r3, #0
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000f7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8000f92:	2306      	movs	r3, #6
 8000f94:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 8000f96:	f107 0108 	add.w	r1, r7, #8
 8000f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f007 fb1d 	bl	80085e0 <HAL_SRAM_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 8000fac:	f000 f808 	bl	8000fc0 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8000fb0:	bf00      	nop
 8000fb2:	3780      	adds	r7, #128	; 0x80
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	420d0400 	.word	0x420d0400
 8000fbc:	420d0504 	.word	0x420d0504

08000fc0 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000fda:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000fde:	4909      	ldr	r1, [pc, #36]	; (8001004 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000fea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	46020c00 	.word	0x46020c00

08001008 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <LL_APB1_GRP2_EnableClock+0x34>)
 8001012:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001016:	4909      	ldr	r1, [pc, #36]	; (800103c <LL_APB1_GRP2_EnableClock+0x34>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4313      	orrs	r3, r2
 800101c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <LL_APB1_GRP2_EnableClock+0x34>)
 8001022:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	46020c00 	.word	0x46020c00

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f001 f84f 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f881 	bl	8001150 <_Z18SystemClock_Configv>

  /* Configure the System Power */
  SystemPower_Config();
 800104e:	f000 f8f2 	bl	8001236 <_ZL18SystemPower_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001052:	f000 fb27 	bl	80016a4 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8001056:	f000 f901 	bl	800125c <_ZL12MX_ADC1_Initv>
  MX_UCPD1_Init();
 800105a:	f000 f9ed 	bl	8001438 <_ZL13MX_UCPD1_Initv>
  MX_USART1_UART_Init();
 800105e:	f000 fa21 	bl	80014a4 <_ZL19MX_USART1_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8001062:	f000 fa7f 	bl	8001564 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_FMC_Init();
 8001066:	f000 faad 	bl	80015c4 <_ZL11MX_FMC_Initv>
  MX_CRC_Init();
 800106a:	f000 f941 	bl	80012f0 <_ZL11MX_CRC_Initv>
  MX_ICACHE_Init();
 800106e:	f000 f9af 	bl	80013d0 <_ZL14MX_ICACHE_Initv>
  MX_DMA2D_Init();
 8001072:	f000 f965 	bl	8001340 <_ZL13MX_DMA2D_Initv>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8001076:	f00b fdfd 	bl	800cc74 <MX_TouchGFX_PreOSInit>
  	      {
  	      	Error_Handler();
  	      }
*/

  ST7789V_init();
 800107a:	f7ff fc31 	bl	80008e0 <ST7789V_init>
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 800107e:	202c      	movs	r0, #44	; 0x2c
 8001080:	f7ff fbba 	bl	80007f8 <ST7789V_SEND_COMMAND>
  ST7789V_fill(COLOR_BLUE);
 8001084:	201f      	movs	r0, #31
 8001086:	f7ff fd49 	bl	8000b1c <ST7789V_fill>
  HAL_Delay(100);
 800108a:	2064      	movs	r0, #100	; 0x64
 800108c:	f001 f87a 	bl	8002184 <HAL_Delay>



  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001090:	f7ff ff29 	bl	8000ee6 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int round_num = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	482a      	ldr	r0, [pc, #168]	; (8001144 <main+0x104>)
 800109c:	f002 f926 	bl	80032ec <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80010a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a4:	f001 f86e 	bl	8002184 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	4826      	ldr	r0, [pc, #152]	; (8001144 <main+0x104>)
 80010ac:	f002 f91e 	bl	80032ec <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 80010b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010b4:	f001 f866 	bl	8002184 <HAL_Delay>


	  if(round_num == 0)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10b      	bne.n	80010d6 <main+0x96>

		  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
		  {
			  ST7789V_SEND_DATA(COLOR_RED);
		  }*/
		  ST7789V_fill(COLOR_RED);
 80010be:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80010c2:	f7ff fd2b 	bl	8000b1c <ST7789V_fill>
		  round_num++;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3301      	adds	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
		  HAL_Delay(500);
 80010cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d0:	f001 f858 	bl	8002184 <HAL_Delay>
 80010d4:	e013      	b.n	80010fe <main+0xbe>
	  }
	  else
	  {
		  //ST7789V_fillCircle(100, 100, 50, COLOR_BLACK);
		  ST7789V_drawCircle(100, 100, 50, COLOR_WHITE);
 80010d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010da:	2232      	movs	r2, #50	; 0x32
 80010dc:	2164      	movs	r1, #100	; 0x64
 80010de:	2064      	movs	r0, #100	; 0x64
 80010e0:	f7ff fd54 	bl	8000b8c <ST7789V_drawCircle>
		  ST7789V_drawFastVLine(150, 80, 100, COLOR_WHITE);
 80010e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e8:	2264      	movs	r2, #100	; 0x64
 80010ea:	2150      	movs	r1, #80	; 0x50
 80010ec:	2096      	movs	r0, #150	; 0x96
 80010ee:	f7ff feaf 	bl	8000e50 <ST7789V_drawFastVLine>
			  for(int j = 0; j<200; j++)
			  {
				  ST7789V_drawPixel(i, j, COLOR_WHITE);
			  }
		  }
*/		  HAL_Delay(500);
 80010f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f6:	f001 f845 	bl	8002184 <HAL_Delay>
		  round_num = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
	   	  round_num = 0;
	  }
/*
	  else if(round_num == 1)
	  {
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001108:	da0a      	bge.n	8001120 <main+0xe0>
	   	  {
	   		  ST7789V_SEND_DATA(kuhmuh[i]);
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <main+0x108>)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fb80 	bl	8000818 <ST7789V_SEND_DATA>
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	e7f0      	b.n	8001102 <main+0xc2>
	   	  }
	  	  HAL_Delay(500);
 8001120:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001124:	f001 f82e 	bl	8002184 <HAL_Delay>
	  	  	  {
	  	  		 ST7789V_SEND_DATA(COLOR_BLUE);
	  	  	  }
	  	  	  */

	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001128:	2104      	movs	r1, #4
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <main+0x10c>)
 800112c:	f002 f8de 	bl	80032ec <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001134:	f001 f826 	bl	8002184 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001138:	2104      	movs	r1, #4
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <main+0x10c>)
 800113c:	f002 f8d6 	bl	80032ec <HAL_GPIO_TogglePin>

  }
 8001140:	e7aa      	b.n	8001098 <main+0x58>
 8001142:	bf00      	nop
 8001144:	42020400 	.word	0x42020400
 8001148:	20000008 	.word	0x20000008
 800114c:	42021800 	.word	0x42021800

08001150 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b09e      	sub	sp, #120	; 0x78
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0318 	add.w	r3, r7, #24
 800115a:	2260      	movs	r2, #96	; 0x60
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f024 fc08 	bl	8025974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001174:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001178:	f003 fa12 	bl	80045a0 <HAL_PWREx_ControlVoltageScaling>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf14      	ite	ne
 8001182:	2301      	movne	r3, #1
 8001184:	2300      	moveq	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <_Z18SystemClock_Configv+0x40>
  {
    Error_Handler();
 800118c:	f000 fbb6 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001190:	2332      	movs	r3, #50	; 0x32
 8001192:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	2310      	movs	r3, #16
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011a4:	2301      	movs	r3, #1
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011a8:	2310      	movs	r3, #16
 80011aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2302      	movs	r3, #2
 80011b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011b6:	2301      	movs	r3, #1
 80011b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80011c2:	2350      	movs	r3, #80	; 0x50
 80011c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fad0 	bl	8004784 <HAL_RCC_OscConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80011f4:	f000 fb82 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	231f      	movs	r3, #31
 80011fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2303      	movs	r3, #3
 80011fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2104      	movs	r1, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f98b 	bl	8005530 <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf14      	ite	ne
 8001220:	2301      	movne	r3, #1
 8001222:	2300      	moveq	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800122a:	f000 fb67 	bl	80018fc <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3778      	adds	r7, #120	; 0x78
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_ZL18SystemPower_Configv>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800123a:	f003 fa93 	bl	8004764 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800123e:	2002      	movs	r0, #2
 8001240:	f003 fa30 	bl	80046a4 <HAL_PWREx_ConfigSupply>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <_ZL18SystemPower_Configv+0x22>
  {
    Error_Handler();
 8001254:	f000 fb52 	bl	80018fc <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <_ZL12MX_ADC1_Initv+0x90>)
 8001264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 8001280:	2204      	movs	r2, #4
 8001282:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 8001286:	2200      	movs	r2, #0
 8001288:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 8001294:	2201      	movs	r2, #1
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <_ZL12MX_ADC1_Initv+0x8c>)
 80012ca:	f001 f85b 	bl	8002384 <HAL_ADC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf14      	ite	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	2300      	moveq	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <_ZL12MX_ADC1_Initv+0x86>
  {
    Error_Handler();
 80012de:	f000 fb0d 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2004b11c 	.word	0x2004b11c
 80012ec:	42028000 	.word	0x42028000

080012f0 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_ZL11MX_CRC_Initv+0x48>)
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <_ZL11MX_CRC_Initv+0x4c>)
 80012f8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <_ZL11MX_CRC_Initv+0x48>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <_ZL11MX_CRC_Initv+0x48>)
 8001302:	2200      	movs	r2, #0
 8001304:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <_ZL11MX_CRC_Initv+0x48>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <_ZL11MX_CRC_Initv+0x48>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <_ZL11MX_CRC_Initv+0x48>)
 8001314:	2201      	movs	r2, #1
 8001316:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <_ZL11MX_CRC_Initv+0x48>)
 800131a:	f001 fc0d 	bl	8002b38 <HAL_CRC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 800132e:	f000 fae5 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2004b1a8 	.word	0x2004b1a8
 800133c:	40023000 	.word	0x40023000

08001340 <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <_ZL13MX_DMA2D_Initv+0x8c>)
 8001348:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 8001352:	2202      	movs	r2, #2
 8001354:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 8001364:	2200      	movs	r2, #0
 8001366:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 800136a:	2200      	movs	r2, #0
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 8001370:	2202      	movs	r2, #2
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 8001376:	2200      	movs	r2, #0
 8001378:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 800137c:	2200      	movs	r2, #0
 800137e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 8001382:	2200      	movs	r2, #0
 8001384:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 8001388:	2200      	movs	r2, #0
 800138a:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800138c:	480e      	ldr	r0, [pc, #56]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 800138e:	f001 fcbd 	bl	8002d0c <HAL_DMA2D_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf14      	ite	ne
 8001398:	2301      	movne	r3, #1
 800139a:	2300      	moveq	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <_ZL13MX_DMA2D_Initv+0x66>
  {
    Error_Handler();
 80013a2:	f000 faab 	bl	80018fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80013a6:	2101      	movs	r1, #1
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <_ZL13MX_DMA2D_Initv+0x88>)
 80013aa:	f001 fd11 	bl	8002dd0 <HAL_DMA2D_ConfigLayer>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <_ZL13MX_DMA2D_Initv+0x82>
  {
    Error_Handler();
 80013be:	f000 fa9d 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2004b1cc 	.word	0x2004b1cc
 80013cc:	4002b000 	.word	0x4002b000

080013d0 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 80013e4:	f001 ffd8 	bl	8003398 <HAL_ICACHE_Disable>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf14      	ite	ne
 80013ee:	2301      	movne	r3, #1
 80013f0:	2300      	moveq	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <_ZL14MX_ICACHE_Initv+0x2c>
  {
    Error_Handler();
 80013f8:	f000 fa80 	bl	80018fc <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x0;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8001404:	2301      	movs	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(ICACHE_REGION_0, &pRegionConfig) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	2000      	movs	r0, #0
 8001416:	f001 ffef 	bl	80033f8 <HAL_ICACHE_EnableRemapRegion>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf14      	ite	ne
 8001420:	2301      	movne	r3, #1
 8001422:	2300      	moveq	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <_ZL14MX_ICACHE_Initv+0x5e>
  {
    Error_Handler();
 800142a:	f000 fa67 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800144e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001452:	f7ff fdd9 	bl	8001008 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001456:	2002      	movs	r0, #2
 8001458:	f7ff fdba 	bl	8000fd0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff fdb7 	bl	8000fd0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001466:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001468:	2303      	movs	r3, #3
 800146a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	463b      	mov	r3, r7
 8001472:	4619      	mov	r1, r3
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <_ZL13MX_UCPD1_Initv+0x64>)
 8001476:	f008 fc3e 	bl	8009cf6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800147a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800147e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001480:	2303      	movs	r3, #3
 8001482:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <_ZL13MX_UCPD1_Initv+0x68>)
 800148e:	f008 fc32 	bl	8009cf6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	42020400 	.word	0x42020400
 80014a0:	42020000 	.word	0x42020000

080014a4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014aa:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ec:	481b      	ldr	r0, [pc, #108]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80014ee:	f007 fcb1 	bl	8008e54 <HAL_UART_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8001502:	f000 f9fb 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001506:	2100      	movs	r1, #0
 8001508:	4814      	ldr	r0, [pc, #80]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800150a:	f008 f883 	bl	8009614 <HAL_UARTEx_SetTxFifoThreshold>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800151e:	f000 f9ed 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001522:	2100      	movs	r1, #0
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001526:	f008 f8b3 	bl	8009690 <HAL_UARTEx_SetRxFifoThreshold>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800153a:	f000 f9df 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001540:	f008 f82f 	bl	80095a2 <HAL_UARTEx_DisableFifoMode>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001554:	f000 f9d2 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2004b22c 	.word	0x2004b22c
 8001560:	40013800 	.word	0x40013800

08001564 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800156a:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>)
 800156c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001570:	2206      	movs	r2, #6
 8001572:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001576:	2202      	movs	r2, #2
 8001578:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 80015a0:	f001 ff7c 	bl	800349c <HAL_PCD_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x54>
  {
    Error_Handler();
 80015b4:	f000 f9a2 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2004b2bc 	.word	0x2004b2bc
 80015c0:	42040000 	.word	0x42040000

080015c4 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80015ca:	463b      	mov	r3, r7
 80015cc:	2220      	movs	r2, #32
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f024 f9cf 	bl	8025974 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 80015d8:	4a30      	ldr	r2, [pc, #192]	; (800169c <_ZL11MX_FMC_Initv+0xd8>)
 80015da:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <_ZL11MX_FMC_Initv+0xdc>)
 80015e0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 80015f6:	2210      	movs	r2, #16
 80015f8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001606:	4b24      	ldr	r3, [pc, #144]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 800160e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 800161c:	2200      	movs	r2, #0
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 8001622:	2200      	movs	r2, #0
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 800162e:	2200      	movs	r2, #0
 8001630:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 8001634:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001638:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 800163c:	2200      	movs	r2, #0
 800163e:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 8001642:	2200      	movs	r2, #0
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 7;
 800164e:	2307      	movs	r3, #7
 8001650:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001652:	230f      	movs	r3, #15
 8001654:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 8001656:	2303      	movs	r3, #3
 8001658:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 800165a:	2303      	movs	r3, #3
 800165c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800165e:	230f      	movs	r3, #15
 8001660:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001662:	2310      	movs	r3, #16
 8001664:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001666:	2311      	movs	r3, #17
 8001668:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <_ZL11MX_FMC_Initv+0xd4>)
 8001676:	f006 ffb3 	bl	80085e0 <HAL_SRAM_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_ZL11MX_FMC_Initv+0xca>
  {
    Error_Handler( );
 800168a:	f000 f937 	bl	80018fc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2004b7c8 	.word	0x2004b7c8
 800169c:	420d0400 	.word	0x420d0400
 80016a0:	420d0504 	.word	0x420d0504

080016a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	4b7f      	ldr	r3, [pc, #508]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 80016bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c0:	4a7d      	ldr	r2, [pc, #500]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ca:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 80016cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 80016da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016de:	4a76      	ldr	r2, [pc, #472]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016e8:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 80016ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f6:	4b70      	ldr	r3, [pc, #448]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016fc:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 80016fe:	f043 0320 	orr.w	r3, r3, #32
 8001702:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001706:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171a:	4a67      	ldr	r2, [pc, #412]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001724:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001738:	4a5f      	ldr	r2, [pc, #380]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001756:	4a58      	ldr	r2, [pc, #352]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001760:	4b55      	ldr	r3, [pc, #340]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b52      	ldr	r3, [pc, #328]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001774:	4a50      	ldr	r2, [pc, #320]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800177e:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <_ZL12MX_GPIO_Initv+0x214>)
 8001780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	2104      	movs	r1, #4
 8001790:	484a      	ldr	r0, [pc, #296]	; (80018bc <_ZL12MX_GPIO_Initv+0x218>)
 8001792:	f001 fd93 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2104      	movs	r1, #4
 800179a:	4849      	ldr	r0, [pc, #292]	; (80018c0 <_ZL12MX_GPIO_Initv+0x21c>)
 800179c:	f001 fd8e 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	4847      	ldr	r0, [pc, #284]	; (80018c4 <_ZL12MX_GPIO_Initv+0x220>)
 80017a6:	f001 fd89 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	21a0      	movs	r1, #160	; 0xa0
 80017ae:	4846      	ldr	r0, [pc, #280]	; (80018c8 <_ZL12MX_GPIO_Initv+0x224>)
 80017b0:	f001 fd84 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 80017b4:	2304      	movs	r3, #4
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	483c      	ldr	r0, [pc, #240]	; (80018bc <_ZL12MX_GPIO_Initv+0x218>)
 80017cc:	f001 fb9e 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80017d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <_ZL12MX_GPIO_Initv+0x228>)
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4837      	ldr	r0, [pc, #220]	; (80018c4 <_ZL12MX_GPIO_Initv+0x220>)
 80017e6:	f001 fb91 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 80017ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f0:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <_ZL12MX_GPIO_Initv+0x22c>)
 80017f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4835      	ldr	r0, [pc, #212]	; (80018d4 <_ZL12MX_GPIO_Initv+0x230>)
 8001800:	f001 fb84 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001804:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	482b      	ldr	r0, [pc, #172]	; (80018c8 <_ZL12MX_GPIO_Initv+0x224>)
 800181a:	f001 fb77 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800181e:	2304      	movs	r3, #4
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182a:	2302      	movs	r3, #2
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	4822      	ldr	r0, [pc, #136]	; (80018c0 <_ZL12MX_GPIO_Initv+0x21c>)
 8001836:	f001 fb69 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001842:	2301      	movs	r3, #1
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001846:	2302      	movs	r3, #2
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <_ZL12MX_GPIO_Initv+0x220>)
 8001852:	f001 fb5b 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001856:	2320      	movs	r3, #32
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4816      	ldr	r0, [pc, #88]	; (80018c8 <_ZL12MX_GPIO_Initv+0x224>)
 800186e:	f001 fb4d 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187a:	2301      	movs	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187e:	2302      	movs	r3, #2
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	480f      	ldr	r0, [pc, #60]	; (80018c8 <_ZL12MX_GPIO_Initv+0x224>)
 800188a:	f001 fb3f 	bl	8002f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2013      	movs	r0, #19
 8001894:	f001 f928 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001898:	2013      	movs	r0, #19
 800189a:	f001 f93f 	bl	8002b1c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2018      	movs	r0, #24
 80018a4:	f001 f920 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80018a8:	2018      	movs	r0, #24
 80018aa:	f001 f937 	bl	8002b1c <HAL_NVIC_EnableIRQ>

}
 80018ae:	bf00      	nop
 80018b0:	3730      	adds	r7, #48	; 0x30
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	46020c00 	.word	0x46020c00
 80018bc:	42021000 	.word	0x42021000
 80018c0:	42021800 	.word	0x42021800
 80018c4:	42020800 	.word	0x42020800
 80018c8:	42020400 	.word	0x42020400
 80018cc:	10210000 	.word	0x10210000
 80018d0:	10110000 	.word	0x10110000
 80018d4:	42021400 	.word	0x42021400

080018d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ea:	f000 fc2b 	bl	8002144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40012c00 	.word	0x40012c00

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_MspInit+0x34>)
 8001910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001914:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_MspInit+0x34>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_MspInit+0x34>)
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800192c:	2004      	movs	r0, #4
 800192e:	f001 f8d0 	bl	8002ad2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	46020c00 	.word	0x46020c00

08001940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0bc      	sub	sp, #240	; 0xf0
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	22c8      	movs	r2, #200	; 0xc8
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f024 f807 	bl	8025974 <memset>
  if(hadc->Instance==ADC1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a24      	ldr	r2, [pc, #144]	; (80019fc <HAL_ADC_MspInit+0xbc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d140      	bne.n	80019f2 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001970:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800197c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4618      	mov	r0, r3
 800198a:	f004 f9df 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001994:	f7ff ffb2 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_ADC_MspInit+0xc0>)
 800199a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <HAL_ADC_MspInit+0xc0>)
 80019a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_ADC_MspInit+0xc0>)
 80019aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_ADC_MspInit+0xc0>)
 80019b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_ADC_MspInit+0xc0>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_ADC_MspInit+0xc0>)
 80019c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80019d4:	2304      	movs	r3, #4
 80019d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019da:	2303      	movs	r3, #3
 80019dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019ea:	4619      	mov	r1, r3
 80019ec:	4805      	ldr	r0, [pc, #20]	; (8001a04 <HAL_ADC_MspInit+0xc4>)
 80019ee:	f001 fa8d 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	37f0      	adds	r7, #240	; 0xf0
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	42028000 	.word	0x42028000
 8001a00:	46020c00 	.word	0x46020c00
 8001a04:	42020800 	.word	0x42020800

08001a08 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_CRC_MspInit+0x3c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10e      	bne.n	8001a38 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_CRC_MspInit+0x40>)
 8001a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a20:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_CRC_MspInit+0x40>)
 8001a22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_CRC_MspInit+0x40>)
 8001a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40023000 	.word	0x40023000
 8001a48:	46020c00 	.word	0x46020c00

08001a4c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <HAL_DMA2D_MspInit+0x3c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d10e      	bne.n	8001a7c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_DMA2D_MspInit+0x40>)
 8001a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_DMA2D_MspInit+0x40>)
 8001a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_DMA2D_MspInit+0x40>)
 8001a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	4002b000 	.word	0x4002b000
 8001a8c:	46020c00 	.word	0x46020c00

08001a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0bc      	sub	sp, #240	; 0xf0
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	22c8      	movs	r2, #200	; 0xc8
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f023 ff5f 	bl	8025974 <memset>
  if(huart->Instance==USART1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_UART_MspInit+0xc4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d145      	bne.n	8001b4c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ac0:	f04f 0201 	mov.w	r2, #1
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001acc:	2300      	movs	r3, #0
 8001ace:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 f939 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001ae0:	f7ff ff0c 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_UART_MspInit+0xc8>)
 8001ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001aea:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <HAL_UART_MspInit+0xc8>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_UART_MspInit+0xc8>)
 8001af6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_UART_MspInit+0xc8>)
 8001b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b08:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <HAL_UART_MspInit+0xc8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_UART_MspInit+0xc8>)
 8001b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001b20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b44:	4619      	mov	r1, r3
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <HAL_UART_MspInit+0xcc>)
 8001b48:	f001 f9e0 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	37f0      	adds	r7, #240	; 0xf0
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40013800 	.word	0x40013800
 8001b58:	46020c00 	.word	0x46020c00
 8001b5c:	42020000 	.word	0x42020000

08001b60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0be      	sub	sp, #248	; 0xf8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b78:	f107 0318 	add.w	r3, r7, #24
 8001b7c:	22c8      	movs	r2, #200	; 0xc8
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f023 fef7 	bl	8025974 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a3c      	ldr	r2, [pc, #240]	; (8001c7c <HAL_PCD_MspInit+0x11c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d171      	bne.n	8001c74 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba2:	f107 0318 	add.w	r3, r7, #24
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 f8d0 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001bb2:	f7ff fea3 	bl	80018fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bbc:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001bd4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001bee:	230a      	movs	r3, #10
 8001bf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4822      	ldr	r0, [pc, #136]	; (8001c84 <HAL_PCD_MspInit+0x124>)
 8001bfc:	f001 f986 	bl	8002f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c06:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d119      	bne.n	8001c60 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001c34:	f043 0304 	orr.w	r3, r3, #4
 8001c38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001c4a:	f002 fd7b 	bl	8004744 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_PCD_MspInit+0x120>)
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c5e:	e001      	b.n	8001c64 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001c60:	f002 fd70 	bl	8004744 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	2049      	movs	r0, #73	; 0x49
 8001c6a:	f000 ff3d 	bl	8002ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001c6e:	2049      	movs	r0, #73	; 0x49
 8001c70:	f000 ff54 	bl	8002b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	37f8      	adds	r7, #248	; 0xf8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	42040000 	.word	0x42040000
 8001c80:	46020c00 	.word	0x46020c00
 8001c84:	42020000 	.word	0x42020000

08001c88 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_FMC_MspInit+0x8c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d132      	bne.n	8001d0a <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_FMC_MspInit+0x8c>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_FMC_MspInit+0x90>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_FMC_MspInit+0x90>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_FMC_MspInit+0x90>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001cc8:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001ccc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cda:	230c      	movs	r3, #12
 8001cdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480e      	ldr	r0, [pc, #56]	; (8001d1c <HAL_FMC_MspInit+0x94>)
 8001ce4:	f001 f912 	bl	8002f0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001ce8:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001cec:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <HAL_FMC_MspInit+0x98>)
 8001d04:	f001 f902 	bl	8002f0c <HAL_GPIO_Init>
 8001d08:	e000      	b.n	8001d0c <HAL_FMC_MspInit+0x84>
    return;
 8001d0a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2004b820 	.word	0x2004b820
 8001d18:	46020c00 	.word	0x46020c00
 8001d1c:	42021000 	.word	0x42021000
 8001d20:	42020c00 	.word	0x42020c00

08001d24 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001d2c:	f7ff ffac 	bl	8001c88 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08e      	sub	sp, #56	; 0x38
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_InitTick+0xcc>)
 8001d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_InitTick+0xcc>)
 8001d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d54:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_InitTick+0xcc>)
 8001d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d66:	f107 0210 	add.w	r2, r7, #16
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 ff2d 	bl	8005bd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d76:	f003 ff03 	bl	8005b80 <HAL_RCC_GetPCLK2Freq>
 8001d7a:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_InitTick+0xd0>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	3b01      	subs	r3, #1
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_InitTick+0xd4>)
 8001d8c:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <HAL_InitTick+0xd8>)
 8001d8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_InitTick+0xd4>)
 8001d92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d96:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_InitTick+0xd4>)
 8001d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_InitTick+0xd4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_InitTick+0xd4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001daa:	4818      	ldr	r0, [pc, #96]	; (8001e0c <HAL_InitTick+0xd4>)
 8001dac:	f006 fc68 	bl	8008680 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001db6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001dbe:	4813      	ldr	r0, [pc, #76]	; (8001e0c <HAL_InitTick+0xd4>)
 8001dc0:	f006 fcc0 	bl	8008744 <HAL_TIM_Base_Start_IT>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001dca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10e      	bne.n	8001df0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d808      	bhi.n	8001dea <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	202a      	movs	r0, #42	; 0x2a
 8001dde:	f000 fe83 	bl	8002ae8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de2:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <HAL_InitTick+0xdc>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	e002      	b.n	8001df0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001df0:	202a      	movs	r0, #42	; 0x2a
 8001df2:	f000 fe93 	bl	8002b1c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001df6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3738      	adds	r7, #56	; 0x38
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	46020c00 	.word	0x46020c00
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	2004b824 	.word	0x2004b824
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	2002580c 	.word	0x2002580c

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <NMI_Handler+0x4>

08001e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <BusFault_Handler+0x4>

08001e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <UsageFault_Handler+0x4>

08001e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_RIGHT_Pin);
 8001e48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e4c:	f001 fa68 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */
HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	4802      	ldr	r0, [pc, #8]	; (8001e5c <EXTI8_IRQHandler+0x18>)
 8001e54:	f001 fa4a 	bl	80032ec <HAL_GPIO_TogglePin>
//signalVSync_caller();
  /* USER CODE END EXTI8_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	42020400 	.word	0x42020400

08001e60 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001e64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e68:	f001 fa5a 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <TIM1_UP_IRQHandler+0x10>)
 8001e76:	f006 fd05 	bl	8008884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2004b824 	.word	0x2004b824

08001e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <OTG_FS_IRQHandler+0x10>)
 8001e8a:	f001 fc2b 	bl	80036e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2004b2bc 	.word	0x2004b2bc

08001e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
	return 1;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_kill>:

int _kill(int pid, int sig)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eb2:	f023 fd13 	bl	80258dc <__errno>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2216      	movs	r2, #22
 8001eba:	601a      	str	r2, [r3, #0]
	return -1;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_exit>:

void _exit (int status)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffe7 	bl	8001ea8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eda:	e7fe      	b.n	8001eda <_exit+0x12>

08001edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e00a      	b.n	8001f04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eee:	e000      	b.n	8001ef2 <_read+0x16>
 8001ef0:	bf00      	nop
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	b2ca      	uxtb	r2, r1
 8001efc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbf0      	blt.n	8001eee <_read+0x12>
	}

return len;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e009      	b.n	8001f3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	e000      	b.n	8001f36 <_write+0x20>
 8001f34:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbf1      	blt.n	8001f28 <_write+0x12>
	}
	return len;
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_close>:

int _close(int file)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	return -1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f76:	605a      	str	r2, [r3, #4]
	return 0;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_isatty>:

int _isatty(int file)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
	return 0;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <_sbrk+0x5c>)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <_sbrk+0x60>)
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <_sbrk+0x64>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <_sbrk+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d207      	bcs.n	8001ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe8:	f023 fc78 	bl	80258dc <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	220c      	movs	r2, #12
 8001ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e009      	b.n	800200c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <_sbrk+0x64>)
 8002008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200c0000 	.word	0x200c0000
 8002018:	00000400 	.word	0x00000400
 800201c:	2004b870 	.word	0x2004b870
 8002020:	2008e3c8 	.word	0x2008e3c8

08002024 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <SystemInit+0x68>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <SystemInit+0x68>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <SystemInit+0x6c>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <SystemInit+0x6c>)
 8002040:	2200      	movs	r2, #0
 8002042:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <SystemInit+0x6c>)
 8002046:	2200      	movs	r2, #0
 8002048:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <SystemInit+0x6c>)
 800204c:	2200      	movs	r2, #0
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <SystemInit+0x6c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <SystemInit+0x6c>)
 8002056:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800205a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800205e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <SystemInit+0x6c>)
 8002062:	2200      	movs	r2, #0
 8002064:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <SystemInit+0x6c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <SystemInit+0x6c>)
 800206c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <SystemInit+0x6c>)
 8002074:	2200      	movs	r2, #0
 8002076:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <SystemInit+0x68>)
 800207a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800207e:	609a      	str	r2, [r3, #8]
  #endif
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00
 8002090:	46020c00 	.word	0x46020c00

08002094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002098:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800209a:	e003      	b.n	80020a4 <LoopCopyDataInit>

0800209c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800209e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020a2:	3104      	adds	r1, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020ac:	d3f6      	bcc.n	800209c <CopyDataInit>
	ldr	r2, =_sbss
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80020b0:	e002      	b.n	80020b8 <LoopFillZerobss>

080020b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020b4:	f842 3b04 	str.w	r3, [r2], #4

080020b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <LoopForever+0x16>)
	cmp	r2, r3
 80020ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020bc:	d3f9      	bcc.n	80020b2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020be:	f7ff ffb1 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f023 fc23 	bl	802590c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020c6:	f7fe ffbb 	bl	8001040 <main>

080020ca <LoopForever>:

LoopForever:
    b LoopForever
 80020ca:	e7fe      	b.n	80020ca <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80020cc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80020d0:	0804e8e4 	.word	0x0804e8e4
	ldr	r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020d8:	20025900 	.word	0x20025900
	ldr	r2, =_sbss
 80020dc:	2004b100 	.word	0x2004b100
	ldr	r3, = _ebss
 80020e0:	2004e3c4 	.word	0x2004e3c4

080020e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC1_IRQHandler>
	...

080020e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_Init+0x4c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_Init+0x4c>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 fcea 	bl	8002ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80020fe:	f003 fc09 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8002102:	4602      	mov	r2, r0
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_Init+0x50>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	490b      	ldr	r1, [pc, #44]	; (800213c <HAL_Init+0x54>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_Init+0x58>)
 8002116:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002118:	2007      	movs	r0, #7
 800211a:	f7ff fe0d 	bl	8001d38 <HAL_InitTick>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e002      	b.n	800212e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002128:	f7ff fbee 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40022000 	.word	0x40022000
 8002138:	46020c00 	.word	0x46020c00
 800213c:	08027948 	.word	0x08027948
 8002140:	20025808 	.word	0x20025808

08002144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x20>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x24>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_IncTick+0x24>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20025810 	.word	0x20025810
 8002168:	2004b874 	.word	0x2004b874

0800216c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_GetTick+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	2004b874 	.word	0x2004b874

08002184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ffee 	bl	800216c <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_Delay+0x44>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffde 	bl	800216c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20025810 	.word	0x20025810

080021cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	2a00      	cmp	r2, #0
 800221c:	d002      	beq.n	8002224 <LL_ADC_SetGainCompensation+0x32>
 800221e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002222:	e000      	b.n	8002226 <LL_ADC_SetGainCompensation+0x34>
 8002224:	2200      	movs	r2, #0
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2107      	movs	r1, #7
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	401a      	ands	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002286:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6093      	str	r3, [r2, #8]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ae:	d101      	bne.n	80022b4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	609a      	str	r2, [r3, #8]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022fe:	d101      	bne.n	8002304 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <LL_ADC_IsEnabled+0x18>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_IsEnabled+0x1a>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b04      	cmp	r3, #4
 800234a:	d101      	bne.n	8002350 <LL_ADC_REG_IsConversionOngoing+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b08      	cmp	r3, #8
 8002370:	d101      	bne.n	8002376 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e2e3      	b.n	800296c <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a92      	ldr	r2, [pc, #584]	; (80025fc <HAL_ADC_Init+0x278>)
 80023b2:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff fabf 	bl	8001940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff60 	bl	800229a <LL_ADC_IsDeepPowerDownEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff46 	bl	8002276 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff7b 	bl	80022ea <LL_ADC_IsInternalRegulatorEnabled>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d115      	bne.n	8002426 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff5f 	bl	80022c2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002404:	4b7e      	ldr	r3, [pc, #504]	; (8002600 <HAL_ADC_Init+0x27c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	4a7e      	ldr	r2, [pc, #504]	; (8002604 <HAL_ADC_Init+0x280>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002418:	e002      	b.n	8002420 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3b01      	subs	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f9      	bne.n	800241a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff5d 	bl	80022ea <LL_ADC_IsInternalRegulatorEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10e      	bne.n	8002454 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff6d 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 800245e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 8274 	bne.w	8002956 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 8270 	bne.w	8002956 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800247e:	f043 0202 	orr.w	r2, r3, #2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff41 	bl	8002312 <LL_ADC_IsEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d14e      	bne.n	8002534 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a58      	ldr	r2, [pc, #352]	; (80025fc <HAL_ADC_Init+0x278>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d028      	beq.n	80024f2 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a58      	ldr	r2, [pc, #352]	; (8002608 <HAL_ADC_Init+0x284>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d109      	bne.n	80024be <HAL_ADC_Init+0x13a>
 80024aa:	4857      	ldr	r0, [pc, #348]	; (8002608 <HAL_ADC_Init+0x284>)
 80024ac:	f7ff ff31 	bl	8002312 <LL_ADC_IsEnabled>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	e008      	b.n	80024d0 <HAL_ADC_Init+0x14c>
 80024be:	484f      	ldr	r0, [pc, #316]	; (80025fc <HAL_ADC_Init+0x278>)
 80024c0:	f7ff ff27 	bl	8002312 <LL_ADC_IsEnabled>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bf0c      	ite	eq
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2300      	movne	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02f      	beq.n	8002534 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a4b      	ldr	r2, [pc, #300]	; (8002608 <HAL_ADC_Init+0x284>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Init+0x15e>
 80024de:	4a4b      	ldr	r2, [pc, #300]	; (800260c <HAL_ADC_Init+0x288>)
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_Init+0x160>
 80024e2:	4a4b      	ldr	r2, [pc, #300]	; (8002610 <HAL_ADC_Init+0x28c>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f7ff fe6e 	bl	80021cc <LL_ADC_SetCommonClock>
 80024f0:	e020      	b.n	8002534 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f023 010c 	bic.w	r1, r3, #12
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002504:	4293      	cmp	r3, r2
 8002506:	d005      	beq.n	8002514 <HAL_ADC_Init+0x190>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	3b01      	subs	r3, #1
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	e000      	b.n	8002516 <HAL_ADC_Init+0x192>
 8002514:	230c      	movs	r3, #12
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	430b      	orrs	r3, r1
 800251c:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800251e:	4b3c      	ldr	r3, [pc, #240]	; (8002610 <HAL_ADC_Init+0x28c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800252e:	4938      	ldr	r1, [pc, #224]	; (8002610 <HAL_ADC_Init+0x28c>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a30      	ldr	r2, [pc, #192]	; (80025fc <HAL_ADC_Init+0x278>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d010      	beq.n	8002560 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002544:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800254a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002550:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002558:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800255a:	4313      	orrs	r3, r2
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	e030      	b.n	80025c2 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7f1b      	ldrb	r3, [r3, #28]
 8002564:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800256e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002574:	2a00      	cmp	r2, #0
 8002576:	d002      	beq.n	800257e <HAL_ADC_Init+0x1fa>
 8002578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800257c:	e000      	b.n	8002580 <HAL_ADC_Init+0x1fc>
 800257e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002580:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002586:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	da04      	bge.n	800259a <HAL_ADC_Init+0x216>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002598:	e001      	b.n	800259e <HAL_ADC_Init+0x21a>
 800259a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 800259e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4918      	ldr	r1, [pc, #96]	; (8002608 <HAL_ADC_Init+0x284>)
 80025a6:	428b      	cmp	r3, r1
 80025a8:	d103      	bne.n	80025b2 <HAL_ADC_Init+0x22e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b0:	e003      	b.n	80025ba <HAL_ADC_Init+0x236>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80025ba:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025bc:	6a3a      	ldr	r2, [r7, #32]
 80025be:	4313      	orrs	r3, r2
 80025c0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d12f      	bne.n	800262c <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_ADC_Init+0x278>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	3b01      	subs	r3, #1
 80025dc:	045b      	lsls	r3, r3, #17
 80025de:	6a3a      	ldr	r2, [r7, #32]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	623b      	str	r3, [r7, #32]
 80025e4:	e022      	b.n	800262c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d111      	bne.n	8002614 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	e018      	b.n	800262c <HAL_ADC_Init+0x2a8>
 80025fa:	bf00      	nop
 80025fc:	46021000 	.word	0x46021000
 8002600:	20025808 	.word	0x20025808
 8002604:	053e2d63 	.word	0x053e2d63
 8002608:	42028000 	.word	0x42028000
 800260c:	42028308 	.word	0x42028308
 8002610:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a93      	ldr	r2, [pc, #588]	; (8002880 <HAL_ADC_Init+0x4fc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d018      	beq.n	8002668 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	4313      	orrs	r3, r2
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	4313      	orrs	r3, r2
 8002650:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	4b8a      	ldr	r3, [pc, #552]	; (8002884 <HAL_ADC_Init+0x500>)
 800265a:	4013      	ands	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	6a39      	ldr	r1, [r7, #32]
 8002662:	430b      	orrs	r3, r1
 8002664:	60d3      	str	r3, [r2, #12]
 8002666:	e033      	b.n	80026d0 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002674:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	4313      	orrs	r3, r2
 800267e:	6a3a      	ldr	r2, [r7, #32]
 8002680:	4313      	orrs	r3, r2
 8002682:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 800268e:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	6a39      	ldr	r1, [r7, #32]
 8002698:	430b      	orrs	r3, r1
 800269a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6a      	ldr	r2, [pc, #424]	; (8002880 <HAL_ADC_Init+0x4fc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	f000 8093 	beq.w	8002802 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fe29 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 80026e6:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fe36 	bl	800235e <LL_ADC_INJ_IsConversionOngoing>
 80026f2:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d161      	bne.n	80027be <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d15e      	bne.n	80027be <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7f1b      	ldrb	r3, [r3, #28]
 8002704:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	495f      	ldr	r1, [pc, #380]	; (8002888 <HAL_ADC_Init+0x504>)
 800270c:	428b      	cmp	r3, r1
 800270e:	d102      	bne.n	8002716 <HAL_ADC_Init+0x392>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	e002      	b.n	800271c <HAL_ADC_Init+0x398>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800271c:	4313      	orrs	r3, r2
 800271e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	6a39      	ldr	r1, [r7, #32]
 8002734:	430b      	orrs	r3, r1
 8002736:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f7ff fd51 	bl	80021f2 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002756:	2b01      	cmp	r3, #1
 8002758:	d11e      	bne.n	8002798 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <HAL_ADC_Init+0x508>)
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800276e:	0411      	lsls	r1, r2, #16
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002774:	4311      	orrs	r1, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800277a:	4311      	orrs	r1, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002780:	4311      	orrs	r1, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002786:	0892      	lsrs	r2, r2, #2
 8002788:	430a      	orrs	r2, r1
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	611a      	str	r2, [r3, #16]
 8002796:	e007      	b.n	80027a8 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10c      	bne.n	80027e0 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f023 010f 	bic.w	r1, r3, #15
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
 80027de:	e007      	b.n	80027f0 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020f 	bic.w	r2, r2, #15
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f4:	f023 0303 	bic.w	r3, r3, #3
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002800:	e0b2      	b.n	8002968 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800280a:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8002810:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8002816:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	4313      	orrs	r3, r2
 800281c:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002824:	2b01      	cmp	r3, #1
 8002826:	d103      	bne.n	8002830 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_ADC_Init+0x50c>)
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	69f9      	ldr	r1, [r7, #28]
 8002840:	430b      	orrs	r3, r1
 8002842:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284c:	461a      	mov	r2, r3
 800284e:	2100      	movs	r1, #0
 8002850:	f7ff fcf2 	bl	8002238 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	461a      	mov	r2, r3
 800285e:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002862:	f7ff fce9 	bl	8002238 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d112      	bne.n	8002894 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f062 020f 	orn	r2, r2, #15
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
 800287e:	e044      	b.n	800290a <HAL_ADC_Init+0x586>
 8002880:	46021000 	.word	0x46021000
 8002884:	fff0c013 	.word	0xfff0c013
 8002888:	42028000 	.word	0x42028000
 800288c:	fc00f81e 	.word	0xfc00f81e
 8002890:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800289c:	d135      	bne.n	800290a <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	e00d      	b.n	80028c0 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	d006      	beq.n	80028c8 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	3301      	adds	r3, #1
 80028be:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b07      	cmp	r3, #7
 80028c4:	d9ee      	bls.n	80028a4 <HAL_ADC_Init+0x520>
 80028c6:	e000      	b.n	80028ca <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 80028c8:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d108      	bne.n	80028e2 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f062 020f 	orn	r2, r2, #15
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
 80028e0:	e013      	b.n	800290a <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	3b01      	subs	r3, #1
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	f003 031c 	and.w	r3, r3, #28
 80028f4:	f06f 020f 	mvn.w	r2, #15
 80028f8:	fa02 f103 	lsl.w	r1, r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_ADC_Init+0x5f0>)
 8002912:	4013      	ands	r3, r2
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	429a      	cmp	r2, r3
 8002918:	d10b      	bne.n	8002932 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002924:	f023 0303 	bic.w	r3, r3, #3
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002930:	e01a      	b.n	8002968 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002936:	f023 0312 	bic.w	r3, r3, #18
 800293a:	f043 0210 	orr.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002954:	e008      	b.n	8002968 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800295a:	f043 0210 	orr.w	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800296c:	4618      	mov	r0, r3
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	833ffff3 	.word	0x833ffff3

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff4c 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002af6:	f7ff ff63 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002afa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f7ff ffb3 	bl	8002a6c <NVIC_EncodePriority>
 8002b06:	4602      	mov	r2, r0
 8002b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff82 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b14:	bf00      	nop
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ff56 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e054      	b.n	8002bf4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7f5b      	ldrb	r3, [r3, #29]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe ff54 	bl	8001a08 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10c      	bne.n	8002b88 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_CRC_Init+0xc4>)
 8002b74:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0218 	bic.w	r2, r2, #24
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	e00c      	b.n	8002ba2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6899      	ldr	r1, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	461a      	mov	r2, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f834 	bl	8002c00 <HAL_CRCEx_Polynomial_Set>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e028      	b.n	8002bf4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	795b      	ldrb	r3, [r3, #5]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb2:	611a      	str	r2, [r3, #16]
 8002bb4:	e004      	b.n	8002bc0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6912      	ldr	r2, [r2, #16]
 8002bbe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	04c11db7 	.word	0x04c11db7

08002c00 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002c10:	231f      	movs	r3, #31
 8002c12:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002c14:	bf00      	nop
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	613a      	str	r2, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <HAL_CRCEx_Polynomial_Set+0x34>
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b18      	cmp	r3, #24
 8002c38:	d846      	bhi.n	8002cc8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002c3a:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002ccf 	.word	0x08002ccf
 8002c44:	08002cc9 	.word	0x08002cc9
 8002c48:	08002cc9 	.word	0x08002cc9
 8002c4c:	08002cc9 	.word	0x08002cc9
 8002c50:	08002cc9 	.word	0x08002cc9
 8002c54:	08002cc9 	.word	0x08002cc9
 8002c58:	08002cc9 	.word	0x08002cc9
 8002c5c:	08002cc9 	.word	0x08002cc9
 8002c60:	08002cbd 	.word	0x08002cbd
 8002c64:	08002cc9 	.word	0x08002cc9
 8002c68:	08002cc9 	.word	0x08002cc9
 8002c6c:	08002cc9 	.word	0x08002cc9
 8002c70:	08002cc9 	.word	0x08002cc9
 8002c74:	08002cc9 	.word	0x08002cc9
 8002c78:	08002cc9 	.word	0x08002cc9
 8002c7c:	08002cc9 	.word	0x08002cc9
 8002c80:	08002cb1 	.word	0x08002cb1
 8002c84:	08002cc9 	.word	0x08002cc9
 8002c88:	08002cc9 	.word	0x08002cc9
 8002c8c:	08002cc9 	.word	0x08002cc9
 8002c90:	08002cc9 	.word	0x08002cc9
 8002c94:	08002cc9 	.word	0x08002cc9
 8002c98:	08002cc9 	.word	0x08002cc9
 8002c9c:	08002cc9 	.word	0x08002cc9
 8002ca0:	08002ca5 	.word	0x08002ca5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b06      	cmp	r3, #6
 8002ca8:	d913      	bls.n	8002cd2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002cae:	e010      	b.n	8002cd2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b07      	cmp	r3, #7
 8002cb4:	d90f      	bls.n	8002cd6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002cba:	e00c      	b.n	8002cd6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	d90b      	bls.n	8002cda <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002cc6:	e008      	b.n	8002cda <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
      break;
 8002ccc:	e006      	b.n	8002cdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e004      	b.n	8002cdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e002      	b.n	8002cdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cda:	bf00      	nop
  }
  if (status == HAL_OK)
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 0118 	bic.w	r1, r3, #24
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e053      	b.n	8002dc6 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fe8a 	bl	8001a4c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6851      	ldr	r1, [r2, #4]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	69d2      	ldr	r2, [r2, #28]
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d66:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6891      	ldr	r1, [r2, #8]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6992      	ldr	r2, [r2, #24]
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68d1      	ldr	r1, [r2, #12]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	430b      	orrs	r3, r1
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	051a      	lsls	r2, r3, #20
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	055b      	lsls	r3, r3, #21
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_DMA2D_ConfigLayer+0x20>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e084      	b.n	8002efa <HAL_DMA2D_ConfigLayer+0x12a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	3328      	adds	r3, #40	; 0x28
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e24:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002e30:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <HAL_DMA2D_ConfigLayer+0x138>)
 8002e32:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b0a      	cmp	r3, #10
 8002e3a:	d003      	beq.n	8002e44 <HAL_DMA2D_ConfigLayer+0x74>
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b09      	cmp	r3, #9
 8002e42:	d107      	bne.n	8002e54 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	e005      	b.n	8002e60 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d120      	bne.n	8002ea8 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	ea02 0103 	and.w	r1, r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b0a      	cmp	r3, #10
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA2D_ConfigLayer+0xc8>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d127      	bne.n	8002ee8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea6:	e01f      	b.n	8002ee8 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	ea02 0103 	and.w	r1, r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b0a      	cmp	r3, #10
 8002ed0:	d003      	beq.n	8002eda <HAL_DMA2D_ConfigLayer+0x10a>
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b09      	cmp	r3, #9
 8002ed8:	d106      	bne.n	8002ee8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ee6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	ff33000f 	.word	0xff33000f

08002f0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f1e:	e1ba      	b.n	8003296 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 81aa 	beq.w	8003290 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a55      	ldr	r2, [pc, #340]	; (8003094 <HAL_GPIO_Init+0x188>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d15d      	bne.n	8003000 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0201 	and.w	r2, r3, #1
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002f74:	4a48      	ldr	r2, [pc, #288]	; (8003098 <HAL_GPIO_Init+0x18c>)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f7c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002f7e:	4a46      	ldr	r2, [pc, #280]	; (8003098 <HAL_GPIO_Init+0x18c>)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3208      	adds	r2, #8
 8002f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f96:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	220b      	movs	r2, #11
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	08da      	lsrs	r2, r3, #3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	3208      	adds	r2, #8
 8002fca:	69f9      	ldr	r1, [r7, #28]
 8002fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2202      	movs	r2, #2
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e067      	b.n	80030d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x104>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b12      	cmp	r3, #18
 800300e:	d145      	bne.n	800309c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	4013      	ands	r3, r2
 8003032:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	4313      	orrs	r3, r2
 800304c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	08da      	lsrs	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3208      	adds	r2, #8
 8003056:	69f9      	ldr	r1, [r7, #28]
 8003058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	2203      	movs	r2, #3
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	4013      	ands	r3, r2
 8003072:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0203 	and.w	r2, r3, #3
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	4313      	orrs	r3, r2
 8003088:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e01e      	b.n	80030d0 <HAL_GPIO_Init+0x1c4>
 8003092:	bf00      	nop
 8003094:	46020000 	.word	0x46020000
 8003098:	080279a0 	.word	0x080279a0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0203 	and.w	r2, r3, #3
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d00b      	beq.n	80030f0 <HAL_GPIO_Init+0x1e4>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d007      	beq.n	80030f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030e4:	2b11      	cmp	r3, #17
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b12      	cmp	r3, #18
 80030ee:	d130      	bne.n	8003152 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	4013      	ands	r3, r2
 8003106:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	4313      	orrs	r3, r2
 8003118:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003126:	2201      	movs	r2, #1
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	4013      	ands	r3, r2
 8003134:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 0201 	and.w	r2, r3, #1
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	4313      	orrs	r3, r2
 800314a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d017      	beq.n	800318a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	2203      	movs	r2, #3
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	4013      	ands	r3, r2
 8003170:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	4313      	orrs	r3, r2
 8003182:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d07c      	beq.n	8003290 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003196:	4a47      	ldr	r2, [pc, #284]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3318      	adds	r3, #24
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0a9a      	lsrs	r2, r3, #10
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <HAL_GPIO_Init+0x3ac>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	f002 0203 	and.w	r2, r2, #3
 80031c8:	00d2      	lsls	r2, r2, #3
 80031ca:	4093      	lsls	r3, r2
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80031d2:	4938      	ldr	r1, [pc, #224]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	3318      	adds	r3, #24
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80031e0:	4b34      	ldr	r3, [pc, #208]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003204:	4a2b      	ldr	r2, [pc, #172]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800320a:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	4013      	ands	r3, r2
 8003218:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800322e:	4a21      	ldr	r2, [pc, #132]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003234:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43db      	mvns	r3, r3
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	4013      	ands	r3, r2
 8003244:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003262:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 8003264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003268:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	4013      	ands	r3, r2
 8003272:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_GPIO_Init+0x3a8>)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3301      	adds	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f47f ae3d 	bne.w	8002f20 <HAL_GPIO_Init+0x14>
  }
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	3724      	adds	r7, #36	; 0x24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	46022000 	.word	0x46022000
 80032b8:	002f7f7f 	.word	0x002f7f7f

080032bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
 80032c8:	4613      	mov	r3, r2
 80032ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032cc:	787b      	ldrb	r3, [r7, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80032d8:	e002      	b.n	80032e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4013      	ands	r3, r2
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43d9      	mvns	r1, r3
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	400b      	ands	r3, r1
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f814 	bl	800336c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003350:	4a05      	ldr	r2, [pc, #20]	; (8003368 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f812 	bl	8003382 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	46022000 	.word	0x46022000

0800336c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_ICACHE_Disable+0x5c>)
 80033a4:	2202      	movs	r2, #2
 80033a6:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_ICACHE_Disable+0x5c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a11      	ldr	r2, [pc, #68]	; (80033f4 <HAL_ICACHE_Disable+0x5c>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b4:	f7fe feda 	bl	800216c <HAL_GetTick>
 80033b8:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80033ba:	e00f      	b.n	80033dc <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 80033bc:	f7fe fed6 	bl	800216c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d908      	bls.n	80033dc <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_ICACHE_Disable+0x5c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	71fb      	strb	r3, [r7, #7]
        break;
 80033da:	e005      	b.n	80033e8 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_ICACHE_Disable+0x5c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e9      	bne.n	80033bc <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 80033e8:	79fb      	ldrb	r3, [r7, #7]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40030400 	.word	0x40030400

080033f8 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003406:	4b22      	ldr	r3, [pc, #136]	; (8003490 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	75fb      	strb	r3, [r7, #23]
 8003416:	e034      	b.n	8003482 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 800341e:	4413      	add	r3, r2
 8003420:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
 8003432:	e026      	b.n	8003482 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8003440:	4013      	ands	r3, r2
 8003442:	b2db      	uxtb	r3, r3
 8003444:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	425b      	negs	r3, r3
 8003452:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8003454:	401a      	ands	r2, r3
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8003458:	4013      	ands	r3, r2
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	025a      	lsls	r2, r3, #9
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8003470:	4313      	orrs	r3, r2
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
}
 8003484:	4618      	mov	r0, r3
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40030400 	.word	0x40030400
 8003494:	40030420 	.word	0x40030420
 8003498:	07ff0000 	.word	0x07ff0000

0800349c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800349c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349e:	b08f      	sub	sp, #60	; 0x3c
 80034a0:	af0a      	add	r7, sp, #40	; 0x28
 80034a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e116      	b.n	80036dc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d106      	bne.n	80034ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fe fb49 	bl	8001b60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2203      	movs	r2, #3
 80034d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f006 fd57 	bl	8009fa0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	687e      	ldr	r6, [r7, #4]
 80034fa:	466d      	mov	r5, sp
 80034fc:	f106 0410 	add.w	r4, r6, #16
 8003500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003508:	e894 0003 	ldmia.w	r4, {r0, r1}
 800350c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003510:	1d33      	adds	r3, r6, #4
 8003512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003514:	6838      	ldr	r0, [r7, #0]
 8003516:	f006 fc74 	bl	8009e02 <USB_CoreInit>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0d7      	b.n	80036dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f006 fd45 	bl	8009fc2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	e04a      	b.n	80035d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	333d      	adds	r3, #61	; 0x3d
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	333c      	adds	r3, #60	; 0x3c
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	b298      	uxth	r0, r3
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3344      	adds	r3, #68	; 0x44
 800357a:	4602      	mov	r2, r0
 800357c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	3340      	adds	r3, #64	; 0x40
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3348      	adds	r3, #72	; 0x48
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	334c      	adds	r3, #76	; 0x4c
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3354      	adds	r3, #84	; 0x54
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	3301      	adds	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d3af      	bcc.n	800353e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	e044      	b.n	800366e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	3301      	adds	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	d3b5      	bcc.n	80035e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	687e      	ldr	r6, [r7, #4]
 8003680:	466d      	mov	r5, sp
 8003682:	f106 0410 	add.w	r4, r6, #16
 8003686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800368a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800368e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003692:	e885 0003 	stmia.w	r5, {r0, r1}
 8003696:	1d33      	adds	r3, r6, #4
 8003698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800369a:	6838      	ldr	r0, [r7, #0]
 800369c:	f006 fcde 	bl	800a05c <USB_DevInit>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e014      	b.n	80036dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d102      	bne.n	80036d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 ff38 	bl	8004540 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f006 fff1 	bl	800a6bc <USB_DevDisconnect>

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b08d      	sub	sp, #52	; 0x34
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f007 f892 	bl	800a824 <USB_GetMode>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 84b7 	bne.w	8004076 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f006 fff6 	bl	800a6fe <USB_ReadInterrupts>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 84ad 	beq.w	8004074 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f006 ffe3 	bl	800a6fe <USB_ReadInterrupts>
 8003738:	4603      	mov	r3, r0
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d107      	bne.n	8003752 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f002 0202 	and.w	r2, r2, #2
 8003750:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f006 ffd1 	bl	800a6fe <USB_ReadInterrupts>
 800375c:	4603      	mov	r3, r0
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b10      	cmp	r3, #16
 8003764:	d161      	bne.n	800382a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0210 	bic.w	r2, r2, #16
 8003774:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f003 020f 	and.w	r2, r3, #15
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	3304      	adds	r3, #4
 8003794:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	0c5b      	lsrs	r3, r3, #17
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d124      	bne.n	80037ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d035      	beq.n	800381a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	6a38      	ldr	r0, [r7, #32]
 80037c2:	f006 ff23 	bl	800a60c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d2:	441a      	add	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	6a1a      	ldr	r2, [r3, #32]
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e4:	441a      	add	r2, r3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	621a      	str	r2, [r3, #32]
 80037ea:	e016      	b.n	800381a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	0c5b      	lsrs	r3, r3, #17
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	d110      	bne.n	800381a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037fe:	2208      	movs	r2, #8
 8003800:	4619      	mov	r1, r3
 8003802:	6a38      	ldr	r0, [r7, #32]
 8003804:	f006 ff02 	bl	800a60c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003814:	441a      	add	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699a      	ldr	r2, [r3, #24]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0210 	orr.w	r2, r2, #16
 8003828:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f006 ff65 	bl	800a6fe <USB_ReadInterrupts>
 8003834:	4603      	mov	r3, r0
 8003836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800383e:	f040 80a7 	bne.w	8003990 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f006 ff6a 	bl	800a724 <USB_ReadDevAllOutEpInterrupt>
 8003850:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003852:	e099      	b.n	8003988 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 808e 	beq.w	800397c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	4611      	mov	r1, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f006 ff8e 	bl	800a78c <USB_ReadDevOutEPInterrupt>
 8003870:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00c      	beq.n	8003896 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	2301      	movs	r3, #1
 800388c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800388e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fd27 	bl	80042e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00c      	beq.n	80038ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	2308      	movs	r3, #8
 80038b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fdfd 	bl	80044b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d0:	461a      	mov	r2, r3
 80038d2:	2310      	movs	r3, #16
 80038d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d030      	beq.n	8003942 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b80      	cmp	r3, #128	; 0x80
 80038ea:	d109      	bne.n	8003900 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	3304      	adds	r3, #4
 8003914:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	78db      	ldrb	r3, [r3, #3]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d108      	bne.n	8003930 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2200      	movs	r2, #0
 8003922:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	b2db      	uxtb	r3, r3
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fbf0 	bl	8004110 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	461a      	mov	r2, r3
 800393e:	2302      	movs	r3, #2
 8003940:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	2320      	movs	r3, #32
 800395c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800397a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	3301      	adds	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	f47f af62 	bne.w	8003854 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f006 feb2 	bl	800a6fe <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039a4:	f040 80db 	bne.w	8003b5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f006 fed3 	bl	800a758 <USB_ReadDevAllInEpInterrupt>
 80039b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039b8:	e0cd      	b.n	8003b56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80c2 	beq.w	8003b4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f006 fef9 	bl	800a7c8 <USB_ReadDevInEPInterrupt>
 80039d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d057      	beq.n	8003a92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	2201      	movs	r2, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69f9      	ldr	r1, [r7, #28]
 80039fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a02:	4013      	ands	r3, r2
 8003a04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	461a      	mov	r2, r3
 8003a14:	2301      	movs	r3, #1
 8003a16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d132      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	334c      	adds	r3, #76	; 0x4c
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4403      	add	r3, r0
 8003a40:	3348      	adds	r3, #72	; 0x48
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4419      	add	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4403      	add	r3, r0
 8003a54:	334c      	adds	r3, #76	; 0x4c
 8003a56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d113      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x3a2>
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3354      	adds	r3, #84	; 0x54
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d108      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2101      	movs	r1, #1
 8003a82:	f006 ff01 	bl	800a888 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fb01 	bl	8004094 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2308      	movs	r3, #8
 8003aac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2310      	movs	r3, #16
 8003ac8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2340      	movs	r3, #64	; 0x40
 8003ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d023      	beq.n	8003b38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003af2:	6a38      	ldr	r0, [r7, #32]
 8003af4:	f006 fc00 	bl	800a2f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	3338      	adds	r3, #56	; 0x38
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	78db      	ldrb	r3, [r3, #3]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d108      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2200      	movs	r2, #0
 8003b18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb01 	bl	8004128 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b32:	461a      	mov	r2, r3
 8003b34:	2302      	movs	r3, #2
 8003b36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fb40 	bl	80041ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f47f af2e 	bne.w	80039ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f006 fdcb 	bl	800a6fe <USB_ReadInterrupts>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b72:	d122      	bne.n	8003bba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d108      	bne.n	8003ba4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fcf3 	bl	8004588 <HAL_PCDEx_LPM_Callback>
 8003ba2:	e002      	b.n	8003baa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 faa9 	bl	80040fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f006 fd9d 	bl	800a6fe <USB_ReadInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bce:	d112      	bne.n	8003bf6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d102      	bne.n	8003be6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fa81 	bl	80040e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f006 fd7f 	bl	800a6fe <USB_ReadInterrupts>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c0a:	d121      	bne.n	8003c50 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003c1a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d111      	bne.n	8003c4a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	089b      	lsrs	r3, r3, #2
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c40:	2101      	movs	r1, #1
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fca0 	bl	8004588 <HAL_PCDEx_LPM_Callback>
 8003c48:	e002      	b.n	8003c50 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa4c 	bl	80040e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f006 fd52 	bl	800a6fe <USB_ReadInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c64:	f040 80b7 	bne.w	8003dd6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2110      	movs	r1, #16
 8003c82:	4618      	mov	r0, r3
 8003c84:	f006 fb38 	bl	800a2f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8c:	e046      	b.n	8003d1c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ca0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d18:	3301      	adds	r3, #1
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3b3      	bcc.n	8003c8e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d52:	f043 030b 	orr.w	r3, r3, #11
 8003d56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d68:	f043 030b 	orr.w	r3, r3, #11
 8003d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6e:	e015      	b.n	8003d9c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d96:	f043 030b 	orr.w	r3, r3, #11
 8003d9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003daa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f006 fd61 	bl	800a888 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f006 fc8f 	bl	800a6fe <USB_ReadInterrupts>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dea:	d124      	bne.n	8003e36 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f006 fd25 	bl	800a840 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f006 faf9 	bl	800a3f2 <USB_GetDevSpeed>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461a      	mov	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681c      	ldr	r4, [r3, #0]
 8003e0c:	f001 fe8a 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8003e10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f006 f81e 	bl	8009e5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f957 	bl	80040d4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f006 fc5f 	bl	800a6fe <USB_ReadInterrupts>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d10a      	bne.n	8003e60 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f938 	bl	80040c0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f002 0208 	and.w	r2, r2, #8
 8003e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f006 fc4a 	bl	800a6fe <USB_ReadInterrupts>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b80      	cmp	r3, #128	; 0x80
 8003e72:	d122      	bne.n	8003eba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e80:	2301      	movs	r3, #1
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
 8003e84:	e014      	b.n	8003eb0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d105      	bne.n	8003eaa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f95f 	bl	8004168 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	3301      	adds	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d3e5      	bcc.n	8003e86 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f006 fc1d 	bl	800a6fe <USB_ReadInterrupts>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ece:	d13b      	bne.n	8003f48 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	e02b      	b.n	8003f2e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3340      	adds	r3, #64	; 0x40
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d115      	bne.n	8003f28 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003efc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da12      	bge.n	8003f28 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	333f      	adds	r3, #63	; 0x3f
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f920 	bl	8004168 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d3ce      	bcc.n	8003ed6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f006 fbd6 	bl	800a6fe <USB_ReadInterrupts>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f5c:	d155      	bne.n	800400a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f5e:	2301      	movs	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	e045      	b.n	8003ff0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d12e      	bne.n	8003fea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	da2b      	bge.n	8003fea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d121      	bne.n	8003fea <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe6:	6053      	str	r3, [r2, #4]
            break;
 8003fe8:	e007      	b.n	8003ffa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	3301      	adds	r3, #1
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3b4      	bcc.n	8003f64 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f006 fb75 	bl	800a6fe <USB_ReadInterrupts>
 8004014:	4603      	mov	r3, r0
 8004016:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d10a      	bne.n	8004036 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f88d 	bl	8004140 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f006 fb5f 	bl	800a6fe <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b04      	cmp	r3, #4
 8004048:	d115      	bne.n	8004076 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f879 	bl	8004154 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	e000      	b.n	8004076 <HAL_PCD_IRQHandler+0x992>
      return;
 8004074:	bf00      	nop
    }
  }
}
 8004076:	3734      	adds	r7, #52	; 0x34
 8004078:	46bd      	mov	sp, r7
 800407a:	bd90      	pop	{r4, r7, pc}

0800407c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004178:	2b00      	cmp	r3, #0
 800417a:	da0c      	bge.n	8004196 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	f003 020f 	and.w	r2, r3, #15
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	3338      	adds	r3, #56	; 0x38
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4413      	add	r3, r2
 8004190:	3304      	adds	r3, #4
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e00c      	b.n	80041b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	f003 020f 	and.w	r2, r3, #15
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4413      	add	r3, r2
 80041ac:	3304      	adds	r3, #4
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68f9      	ldr	r1, [r7, #12]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f006 f940 	bl	800a43c <USB_EPStopXfer>
 80041bc:	4603      	mov	r3, r0
 80041be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041c0:	7afb      	ldrb	r3, [r7, #11]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b08a      	sub	sp, #40	; 0x28
 80041ce:	af02      	add	r7, sp, #8
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3338      	adds	r3, #56	; 0x38
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1a      	ldr	r2, [r3, #32]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d901      	bls.n	8004202 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e06c      	b.n	80042dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	429a      	cmp	r2, r3
 8004216:	d902      	bls.n	800421e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3303      	adds	r3, #3
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004226:	e02b      	b.n	8004280 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	429a      	cmp	r2, r3
 800423c:	d902      	bls.n	8004244 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3303      	adds	r3, #3
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6919      	ldr	r1, [r3, #16]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800425c:	b2db      	uxtb	r3, r3
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	4603      	mov	r3, r0
 8004262:	6978      	ldr	r0, [r7, #20]
 8004264:	f006 f994 	bl	800a590 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	441a      	add	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	441a      	add	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	b29b      	uxth	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	429a      	cmp	r2, r3
 8004294:	d809      	bhi.n	80042aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800429e:	429a      	cmp	r2, r3
 80042a0:	d203      	bcs.n	80042aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1be      	bne.n	8004228 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d811      	bhi.n	80042da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	2201      	movs	r2, #1
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	6939      	ldr	r1, [r7, #16]
 80042d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d6:	4013      	ands	r3, r2
 80042d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3720      	adds	r7, #32
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	333c      	adds	r3, #60	; 0x3c
 80042fc:	3304      	adds	r3, #4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d17b      	bne.n	8004412 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	4a61      	ldr	r2, [pc, #388]	; (80044ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	f240 80b9 	bls.w	80044a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80b3 	beq.w	80044a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	461a      	mov	r2, r3
 8004348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434c:	6093      	str	r3, [r2, #8]
 800434e:	e0a7      	b.n	80044a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004366:	461a      	mov	r2, r3
 8004368:	2320      	movs	r3, #32
 800436a:	6093      	str	r3, [r2, #8]
 800436c:	e098      	b.n	80044a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 8093 	bne.w	80044a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4a4b      	ldr	r2, [pc, #300]	; (80044ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d90f      	bls.n	80043a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439e:	6093      	str	r3, [r2, #8]
 80043a0:	e07e      	b.n	80044a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4413      	add	r3, r2
 80043b4:	3304      	adds	r3, #4
 80043b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	0159      	lsls	r1, r3, #5
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	440b      	add	r3, r1
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ce:	1ad2      	subs	r2, r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d114      	bne.n	8004404 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043ec:	461a      	mov	r2, r3
 80043ee:	2101      	movs	r1, #1
 80043f0:	f006 fa4a 	bl	800a888 <USB_EP0_OutStart>
 80043f4:	e006      	b.n	8004404 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	441a      	add	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fe36 	bl	800407c <HAL_PCD_DataOutStageCallback>
 8004410:	e046      	b.n	80044a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	4a26      	ldr	r2, [pc, #152]	; (80044b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d124      	bne.n	8004464 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004436:	6093      	str	r3, [r2, #8]
 8004438:	e032      	b.n	80044a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	461a      	mov	r2, r3
 8004452:	2320      	movs	r3, #32
 8004454:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fe0d 	bl	800407c <HAL_PCD_DataOutStageCallback>
 8004462:	e01d      	b.n	80044a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d114      	bne.n	8004494 <PCD_EP_OutXfrComplete_int+0x1b0>
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d108      	bne.n	8004494 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800448c:	461a      	mov	r2, r3
 800448e:	2100      	movs	r1, #0
 8004490:	f006 f9fa 	bl	800a888 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fdee 	bl	800407c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	4f54300a 	.word	0x4f54300a
 80044b0:	4f54310a 	.word	0x4f54310a

080044b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	333c      	adds	r3, #60	; 0x3c
 80044cc:	3304      	adds	r3, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a15      	ldr	r2, [pc, #84]	; (800453c <PCD_EP_OutSetupPacket_int+0x88>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d90e      	bls.n	8004508 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004500:	461a      	mov	r2, r3
 8004502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004506:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fdcf 	bl	80040ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <PCD_EP_OutSetupPacket_int+0x88>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d90c      	bls.n	8004530 <PCD_EP_OutSetupPacket_int+0x7c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d108      	bne.n	8004530 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004528:	461a      	mov	r2, r3
 800452a:	2101      	movs	r1, #1
 800452c:	f006 f9ac 	bl	800a888 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	4f54300a 	.word	0x4f54300a

08004540 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	f043 0303 	orr.w	r3, r3, #3
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80045a8:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80045aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045b0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d101      	bne.n	80045be <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e057      	b.n	800466e <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d90a      	bls.n	80045dc <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80045c6:	4b2d      	ldr	r3, [pc, #180]	; (800467c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	4a2a      	ldr	r2, [pc, #168]	; (800467c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d8:	60d3      	str	r3, [r2, #12]
 80045da:	e007      	b.n	80045ec <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80045dc:	4b27      	ldr	r3, [pc, #156]	; (800467c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80045e4:	4925      	ldr	r1, [pc, #148]	; (800467c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80045ec:	4b24      	ldr	r3, [pc, #144]	; (8004680 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a24      	ldr	r2, [pc, #144]	; (8004684 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	2232      	movs	r2, #50	; 0x32
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	4a21      	ldr	r2, [pc, #132]	; (8004684 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800460a:	e002      	b.n	8004612 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004612:	4b1a      	ldr	r3, [pc, #104]	; (800467c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <HAL_PWREx_ControlVoltageScaling+0x84>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f3      	bne.n	800460c <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01b      	beq.n	8004662 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	2232      	movs	r2, #50	; 0x32
 8004638:	fb02 f303 	mul.w	r3, r2, r3
 800463c:	4a11      	ldr	r2, [pc, #68]	; (8004684 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	3301      	adds	r3, #1
 8004646:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004648:	e002      	b.n	8004650 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3b01      	subs	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <HAL_PWREx_ControlVoltageScaling+0xc2>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f3      	bne.n	800464a <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e000      	b.n	800466e <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	46020800 	.word	0x46020800
 8004680:	20025808 	.word	0x20025808
 8004684:	10624dd3 	.word	0x10624dd3

08004688 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	46020800 	.word	0x46020800

080046a4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80046ac:	4b22      	ldr	r3, [pc, #136]	; (8004738 <HAL_PWREx_ConfigSupply+0x94>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a22      	ldr	r2, [pc, #136]	; (800473c <HAL_PWREx_ConfigSupply+0x98>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	099b      	lsrs	r3, r3, #6
 80046b8:	2232      	movs	r2, #50	; 0x32
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	4a1f      	ldr	r2, [pc, #124]	; (800473c <HAL_PWREx_ConfigSupply+0x98>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d113      	bne.n	80046f8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_PWREx_ConfigSupply+0x9c>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a1a      	ldr	r2, [pc, #104]	; (8004740 <HAL_PWREx_ConfigSupply+0x9c>)
 80046d6:	f023 0302 	bic.w	r3, r3, #2
 80046da:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80046dc:	e002      	b.n	80046e4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_PWREx_ConfigSupply+0x9c>)
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d116      	bne.n	800471e <HAL_PWREx_ConfigSupply+0x7a>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f3      	bne.n	80046de <HAL_PWREx_ConfigSupply+0x3a>
 80046f6:	e012      	b.n	800471e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <HAL_PWREx_ConfigSupply+0x9c>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a10      	ldr	r2, [pc, #64]	; (8004740 <HAL_PWREx_ConfigSupply+0x9c>)
 80046fe:	f043 0302 	orr.w	r3, r3, #2
 8004702:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004704:	e002      	b.n	800470c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3b01      	subs	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <HAL_PWREx_ConfigSupply+0x9c>)
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <HAL_PWREx_ConfigSupply+0x7a>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f3      	bne.n	8004706 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e000      	b.n	800472a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20025808 	.word	0x20025808
 800473c:	10624dd3 	.word	0x10624dd3
 8004740:	46020800 	.word	0x46020800

08004744 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	4a04      	ldr	r2, [pc, #16]	; (8004760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004752:	6113      	str	r3, [r2, #16]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	46020800 	.word	0x46020800

08004764 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_PWREx_EnableVddIO2+0x1c>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <HAL_PWREx_EnableVddIO2+0x1c>)
 800476e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004772:	6113      	str	r3, [r2, #16]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	46020800 	.word	0x46020800

08004784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08e      	sub	sp, #56	; 0x38
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800478c:	2300      	movs	r3, #0
 800478e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f000 bec3 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479e:	4b9c      	ldr	r3, [pc, #624]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a8:	4b99      	ldr	r3, [pc, #612]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8172 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_RCC_OscConfig+0x52>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	f040 80e4 	bne.w	8004996 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	f040 80e0 	bne.w	8004996 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047d6:	4b8e      	ldr	r3, [pc, #568]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d006      	beq.n	80047f0 <HAL_RCC_OscConfig+0x6c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f000 be9a 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f4:	4b86      	ldr	r3, [pc, #536]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <HAL_RCC_OscConfig+0x86>
 8004800:	4b83      	ldr	r3, [pc, #524]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004808:	e005      	b.n	8004816 <HAL_RCC_OscConfig+0x92>
 800480a:	4b81      	ldr	r3, [pc, #516]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800480c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004810:	041b      	lsls	r3, r3, #16
 8004812:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004816:	4293      	cmp	r3, r2
 8004818:	d255      	bcs.n	80048c6 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	4618      	mov	r0, r3
 8004826:	f001 fa0b 	bl	8005c40 <RCC_SetFlashLatencyFromMSIRange>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f000 be77 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004836:	4b76      	ldr	r3, [pc, #472]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	4a75      	ldr	r2, [pc, #468]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800483c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004840:	6093      	str	r3, [r2, #8]
 8004842:	4b73      	ldr	r3, [pc, #460]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	4970      	ldr	r1, [pc, #448]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 8004850:	4313      	orrs	r3, r2
 8004852:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800485c:	d309      	bcc.n	8004872 <HAL_RCC_OscConfig+0xee>
 800485e:	4b6c      	ldr	r3, [pc, #432]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f023 021f 	bic.w	r2, r3, #31
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4969      	ldr	r1, [pc, #420]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	60cb      	str	r3, [r1, #12]
 8004870:	e07e      	b.n	8004970 <HAL_RCC_OscConfig+0x1ec>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	da0a      	bge.n	8004890 <HAL_RCC_OscConfig+0x10c>
 800487a:	4b65      	ldr	r3, [pc, #404]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	015b      	lsls	r3, r3, #5
 8004888:	4961      	ldr	r1, [pc, #388]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	60cb      	str	r3, [r1, #12]
 800488e:	e06f      	b.n	8004970 <HAL_RCC_OscConfig+0x1ec>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d30a      	bcc.n	80048b0 <HAL_RCC_OscConfig+0x12c>
 800489a:	4b5d      	ldr	r3, [pc, #372]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	029b      	lsls	r3, r3, #10
 80048a8:	4959      	ldr	r1, [pc, #356]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60cb      	str	r3, [r1, #12]
 80048ae:	e05f      	b.n	8004970 <HAL_RCC_OscConfig+0x1ec>
 80048b0:	4b57      	ldr	r3, [pc, #348]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	03db      	lsls	r3, r3, #15
 80048be:	4954      	ldr	r1, [pc, #336]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60cb      	str	r3, [r1, #12]
 80048c4:	e054      	b.n	8004970 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80048c6:	4b52      	ldr	r3, [pc, #328]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4a51      	ldr	r2, [pc, #324]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80048cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048d0:	6093      	str	r3, [r2, #8]
 80048d2:	4b4f      	ldr	r3, [pc, #316]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	494c      	ldr	r1, [pc, #304]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80048ec:	d309      	bcc.n	8004902 <HAL_RCC_OscConfig+0x17e>
 80048ee:	4b48      	ldr	r3, [pc, #288]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f023 021f 	bic.w	r2, r3, #31
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	4945      	ldr	r1, [pc, #276]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60cb      	str	r3, [r1, #12]
 8004900:	e028      	b.n	8004954 <HAL_RCC_OscConfig+0x1d0>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	da0a      	bge.n	8004920 <HAL_RCC_OscConfig+0x19c>
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	015b      	lsls	r3, r3, #5
 8004918:	493d      	ldr	r1, [pc, #244]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	60cb      	str	r3, [r1, #12]
 800491e:	e019      	b.n	8004954 <HAL_RCC_OscConfig+0x1d0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004928:	d30a      	bcc.n	8004940 <HAL_RCC_OscConfig+0x1bc>
 800492a:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	029b      	lsls	r3, r3, #10
 8004938:	4935      	ldr	r1, [pc, #212]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	60cb      	str	r3, [r1, #12]
 800493e:	e009      	b.n	8004954 <HAL_RCC_OscConfig+0x1d0>
 8004940:	4b33      	ldr	r3, [pc, #204]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	03db      	lsls	r3, r3, #15
 800494e:	4930      	ldr	r1, [pc, #192]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 8004950:	4313      	orrs	r3, r2
 8004952:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	4618      	mov	r0, r3
 8004960:	f001 f96e 	bl	8005c40 <RCC_SetFlashLatencyFromMSIRange>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f000 bdda 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004970:	f001 f8d8 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004974:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <HAL_RCC_OscConfig+0x290>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f7fd f9dd 	bl	8001d38 <HAL_InitTick>
 800497e:	4603      	mov	r3, r0
 8004980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 808a 	beq.w	8004aa2 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800498e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004992:	f000 bdc7 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d066      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800499e:	4b1c      	ldr	r3, [pc, #112]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80049aa:	f7fd fbdf 	bl	800216c <HAL_GetTick>
 80049ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80049b0:	e009      	b.n	80049c6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049b2:	f7fd fbdb 	bl	800216c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d902      	bls.n	80049c6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	f000 bdaf 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80049c6:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ef      	beq.n	80049b2 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049d2:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80049d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049dc:	6093      	str	r3, [r2, #8]
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	4909      	ldr	r1, [pc, #36]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80049f8:	d30e      	bcc.n	8004a18 <HAL_RCC_OscConfig+0x294>
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f023 021f 	bic.w	r2, r3, #31
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4902      	ldr	r1, [pc, #8]	; (8004a10 <HAL_RCC_OscConfig+0x28c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60cb      	str	r3, [r1, #12]
 8004a0c:	e04a      	b.n	8004aa4 <HAL_RCC_OscConfig+0x320>
 8004a0e:	bf00      	nop
 8004a10:	46020c00 	.word	0x46020c00
 8004a14:	2002580c 	.word	0x2002580c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da0a      	bge.n	8004a36 <HAL_RCC_OscConfig+0x2b2>
 8004a20:	4b9b      	ldr	r3, [pc, #620]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	015b      	lsls	r3, r3, #5
 8004a2e:	4998      	ldr	r1, [pc, #608]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60cb      	str	r3, [r1, #12]
 8004a34:	e036      	b.n	8004aa4 <HAL_RCC_OscConfig+0x320>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d30a      	bcc.n	8004a56 <HAL_RCC_OscConfig+0x2d2>
 8004a40:	4b93      	ldr	r3, [pc, #588]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	029b      	lsls	r3, r3, #10
 8004a4e:	4990      	ldr	r1, [pc, #576]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60cb      	str	r3, [r1, #12]
 8004a54:	e026      	b.n	8004aa4 <HAL_RCC_OscConfig+0x320>
 8004a56:	4b8e      	ldr	r3, [pc, #568]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	03db      	lsls	r3, r3, #15
 8004a64:	498a      	ldr	r1, [pc, #552]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60cb      	str	r3, [r1, #12]
 8004a6a:	e01b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004a6c:	4b88      	ldr	r3, [pc, #544]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a87      	ldr	r2, [pc, #540]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a78:	f7fd fb78 	bl	800216c <HAL_GetTick>
 8004a7c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004a7e:	e009      	b.n	8004a94 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a80:	f7fd fb74 	bl	800216c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d902      	bls.n	8004a94 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	f000 bd48 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004a94:	4b7e      	ldr	r3, [pc, #504]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ef      	bne.n	8004a80 <HAL_RCC_OscConfig+0x2fc>
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aa2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8094 	beq.w	8004bda <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d005      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x340>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	2b0c      	cmp	r3, #12
 8004abc:	d110      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d10d      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac4:	4b72      	ldr	r3, [pc, #456]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8083 	beq.w	8004bd8 <HAL_RCC_OscConfig+0x454>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d17e      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f000 bd22 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d106      	bne.n	8004af8 <HAL_RCC_OscConfig+0x374>
 8004aea:	4b69      	ldr	r3, [pc, #420]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a68      	ldr	r2, [pc, #416]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e041      	b.n	8004b7c <HAL_RCC_OscConfig+0x3f8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b00:	d112      	bne.n	8004b28 <HAL_RCC_OscConfig+0x3a4>
 8004b02:	4b63      	ldr	r3, [pc, #396]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a62      	ldr	r2, [pc, #392]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a5f      	ldr	r2, [pc, #380]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	4b5d      	ldr	r3, [pc, #372]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a5c      	ldr	r2, [pc, #368]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e029      	b.n	8004b7c <HAL_RCC_OscConfig+0x3f8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004b30:	d112      	bne.n	8004b58 <HAL_RCC_OscConfig+0x3d4>
 8004b32:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a56      	ldr	r2, [pc, #344]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4b54      	ldr	r3, [pc, #336]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a53      	ldr	r2, [pc, #332]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a50      	ldr	r2, [pc, #320]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e011      	b.n	8004b7c <HAL_RCC_OscConfig+0x3f8>
 8004b58:	4b4d      	ldr	r3, [pc, #308]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a4c      	ldr	r2, [pc, #304]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a49      	ldr	r2, [pc, #292]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a46      	ldr	r2, [pc, #280]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004b76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d014      	beq.n	8004bae <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004b84:	f7fd faf2 	bl	800216c <HAL_GetTick>
 8004b88:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b8a:	e009      	b.n	8004ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fd faee 	bl	800216c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d902      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	f000 bcc2 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba0:	4b3b      	ldr	r3, [pc, #236]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0ef      	beq.n	8004b8c <HAL_RCC_OscConfig+0x408>
 8004bac:	e015      	b.n	8004bda <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004bae:	f7fd fadd 	bl	800216c <HAL_GetTick>
 8004bb2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bb4:	e009      	b.n	8004bca <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb6:	f7fd fad9 	bl	800216c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b64      	cmp	r3, #100	; 0x64
 8004bc2:	d902      	bls.n	8004bca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	f000 bcad 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bca:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ef      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x432>
 8004bd6:	e000      	b.n	8004bda <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d066      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x474>
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	2b0c      	cmp	r3, #12
 8004bf0:	d11a      	bne.n	8004c28 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d117      	bne.n	8004c28 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf8:	4b25      	ldr	r3, [pc, #148]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <HAL_RCC_OscConfig+0x48e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f000 bc89 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004c12:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	491b      	ldr	r1, [pc, #108]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c26:	e045      	b.n	8004cb4 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d024      	beq.n	8004c7a <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004c30:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c3c:	f7fd fa96 	bl	800216c <HAL_GetTick>
 8004c40:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c42:	e009      	b.n	8004c58 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c44:	f7fd fa92 	bl	800216c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d902      	bls.n	8004c58 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	f000 bc66 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ef      	beq.n	8004c44 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	4907      	ldr	r1, [pc, #28]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	610b      	str	r3, [r1, #16]
 8004c78:	e01c      	b.n	8004cb4 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <HAL_RCC_OscConfig+0x50c>)
 8004c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c86:	f7fd fa71 	bl	800216c <HAL_GetTick>
 8004c8a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c8c:	e00c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x524>
 8004c8e:	bf00      	nop
 8004c90:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fd fa6a 	bl	800216c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d902      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	f000 bc3e 	b.w	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca8:	4baf      	ldr	r3, [pc, #700]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1ef      	bne.n	8004c94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80c7 	beq.w	8004e50 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc8:	4ba7      	ldr	r3, [pc, #668]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d111      	bne.n	8004cfa <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	4ba4      	ldr	r3, [pc, #656]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cdc:	4aa2      	ldr	r2, [pc, #648]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004cde:	f043 0304 	orr.w	r3, r3, #4
 8004ce2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004ce6:	4ba0      	ldr	r3, [pc, #640]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cfa:	4b9c      	ldr	r3, [pc, #624]	; (8004f6c <HAL_RCC_OscConfig+0x7e8>)
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d118      	bne.n	8004d38 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004d06:	4b99      	ldr	r3, [pc, #612]	; (8004f6c <HAL_RCC_OscConfig+0x7e8>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	4a98      	ldr	r2, [pc, #608]	; (8004f6c <HAL_RCC_OscConfig+0x7e8>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d12:	f7fd fa2b 	bl	800216c <HAL_GetTick>
 8004d16:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1a:	f7fd fa27 	bl	800216c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e3fb      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d2c:	4b8f      	ldr	r3, [pc, #572]	; (8004f6c <HAL_RCC_OscConfig+0x7e8>)
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d05f      	beq.n	8004e00 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004d40:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d46:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d037      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e3da      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01b      	beq.n	8004db0 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004d78:	4b7b      	ldr	r3, [pc, #492]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d7e:	4a7a      	ldr	r2, [pc, #488]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004d80:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004d84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004d88:	f7fd f9f0 	bl	800216c <HAL_GetTick>
 8004d8c:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d90:	f7fd f9ec 	bl	800216c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e3c0      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004da2:	4b71      	ldr	r3, [pc, #452]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1ef      	bne.n	8004d90 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004db0:	4b6d      	ldr	r3, [pc, #436]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004db6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	496a      	ldr	r1, [pc, #424]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004dc6:	4b68      	ldr	r3, [pc, #416]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dcc:	4a66      	ldr	r2, [pc, #408]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004dce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004dd6:	f7fd f9c9 	bl	800216c <HAL_GetTick>
 8004dda:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dde:	f7fd f9c5 	bl	800216c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e399      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004df0:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0ef      	beq.n	8004dde <HAL_RCC_OscConfig+0x65a>
 8004dfe:	e01b      	b.n	8004e38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004e00:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e06:	4a58      	ldr	r2, [pc, #352]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004e08:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004e0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004e10:	f7fd f9ac 	bl	800216c <HAL_GetTick>
 8004e14:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e18:	f7fd f9a8 	bl	800216c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e37c      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e2a:	4b4f      	ldr	r3, [pc, #316]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1ef      	bne.n	8004e18 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e38:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e40:	4b49      	ldr	r3, [pc, #292]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e46:	4a48      	ldr	r2, [pc, #288]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004e48:	f023 0304 	bic.w	r3, r3, #4
 8004e4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8112 	beq.w	8005082 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e64:	4b40      	ldr	r3, [pc, #256]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d111      	bne.n	8004e96 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e72:	4b3d      	ldr	r3, [pc, #244]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e78:	4a3b      	ldr	r2, [pc, #236]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e96:	4b35      	ldr	r3, [pc, #212]	; (8004f6c <HAL_RCC_OscConfig+0x7e8>)
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d118      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004ea2:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCC_OscConfig+0x7e8>)
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	4a31      	ldr	r2, [pc, #196]	; (8004f6c <HAL_RCC_OscConfig+0x7e8>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eae:	f7fd f95d 	bl	800216c <HAL_GetTick>
 8004eb2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb6:	f7fd f959 	bl	800216c <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e32d      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ec8:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <HAL_RCC_OscConfig+0x7e8>)
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01f      	beq.n	8004f20 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d010      	beq.n	8004f0e <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004eec:	4b1e      	ldr	r3, [pc, #120]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ef2:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004ef4:	f043 0304 	orr.w	r3, r3, #4
 8004ef8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004efc:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f02:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f0c:	e018      	b.n	8004f40 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f0e:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f14:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f1e:	e00f      	b.n	8004f40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f20:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f26:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f36:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <HAL_RCC_OscConfig+0x7e4>)
 8004f38:	f023 0304 	bic.w	r3, r3, #4
 8004f3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d058      	beq.n	8004ffa <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8004f48:	f7fd f910 	bl	800216c <HAL_GetTick>
 8004f4c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4e:	e00f      	b.n	8004f70 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f50:	f7fd f90c 	bl	800216c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d906      	bls.n	8004f70 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e2de      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
 8004f66:	bf00      	nop
 8004f68:	46020c00 	.word	0x46020c00
 8004f6c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f70:	4b9c      	ldr	r3, [pc, #624]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8004f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0e8      	beq.n	8004f50 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01b      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f8a:	4b96      	ldr	r3, [pc, #600]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8004f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f90:	4a94      	ldr	r2, [pc, #592]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8004f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9c:	f7fd f8e6 	bl	800216c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e2b8      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004fb2:	4b8c      	ldr	r3, [pc, #560]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8004fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0ed      	beq.n	8004f9c <HAL_RCC_OscConfig+0x818>
 8004fc0:	e053      	b.n	800506a <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004fc2:	4b88      	ldr	r3, [pc, #544]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8004fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fc8:	4a86      	ldr	r2, [pc, #536]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8004fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd4:	f7fd f8ca 	bl	800216c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e29c      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fea:	4b7e      	ldr	r3, [pc, #504]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8004fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ed      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x850>
 8004ff8:	e037      	b.n	800506a <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004ffa:	f7fd f8b7 	bl	800216c <HAL_GetTick>
 8004ffe:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fd f8b3 	bl	800216c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e285      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005018:	4b72      	ldr	r3, [pc, #456]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 800501a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1ed      	bne.n	8005002 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005026:	4b6f      	ldr	r3, [pc, #444]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800502c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01a      	beq.n	800506a <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005034:	4b6b      	ldr	r3, [pc, #428]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800503a:	4a6a      	ldr	r2, [pc, #424]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 800503c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005040:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005044:	e00a      	b.n	800505c <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7fd f891 	bl	800216c <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	; 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e263      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800505c:	4b61      	ldr	r3, [pc, #388]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 800505e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ed      	bne.n	8005046 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800506a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005072:	4b5c      	ldr	r3, [pc, #368]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005078:	4a5a      	ldr	r2, [pc, #360]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 800507a:	f023 0304 	bic.w	r3, r3, #4
 800507e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d036      	beq.n	80050fc <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d019      	beq.n	80050ca <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005096:	4b53      	ldr	r3, [pc, #332]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a52      	ldr	r2, [pc, #328]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 800509c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050a0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80050a2:	f7fd f863 	bl	800216c <HAL_GetTick>
 80050a6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050aa:	f7fd f85f 	bl	800216c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e233      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80050bc:	4b49      	ldr	r3, [pc, #292]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x926>
 80050c8:	e018      	b.n	80050fc <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80050ca:	4b46      	ldr	r3, [pc, #280]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a45      	ldr	r2, [pc, #276]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 80050d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80050d6:	f7fd f849 	bl	800216c <HAL_GetTick>
 80050da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050de:	f7fd f845 	bl	800216c <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e219      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80050f0:	4b3c      	ldr	r3, [pc, #240]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f0      	bne.n	80050de <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005104:	2b00      	cmp	r3, #0
 8005106:	d036      	beq.n	8005176 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	2b00      	cmp	r3, #0
 800510e:	d019      	beq.n	8005144 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005110:	4b34      	ldr	r3, [pc, #208]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a33      	ldr	r2, [pc, #204]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800511a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800511c:	f7fd f826 	bl	800216c <HAL_GetTick>
 8005120:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005124:	f7fd f822 	bl	800216c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e1f6      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005136:	4b2b      	ldr	r3, [pc, #172]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x9a0>
 8005142:	e018      	b.n	8005176 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005144:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a26      	ldr	r2, [pc, #152]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 800514a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800514e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005150:	f7fd f80c 	bl	800216c <HAL_GetTick>
 8005154:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005158:	f7fd f808 	bl	800216c <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e1dc      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800516a:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d07f      	beq.n	8005282 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005186:	2b00      	cmp	r3, #0
 8005188:	d062      	beq.n	8005250 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800518a:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005194:	6093      	str	r3, [r2, #8]
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	4910      	ldr	r1, [pc, #64]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80051b0:	d309      	bcc.n	80051c6 <HAL_RCC_OscConfig+0xa42>
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f023 021f 	bic.w	r2, r3, #31
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	4909      	ldr	r1, [pc, #36]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60cb      	str	r3, [r1, #12]
 80051c4:	e02a      	b.n	800521c <HAL_RCC_OscConfig+0xa98>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da0c      	bge.n	80051e8 <HAL_RCC_OscConfig+0xa64>
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	015b      	lsls	r3, r3, #5
 80051dc:	4901      	ldr	r1, [pc, #4]	; (80051e4 <HAL_RCC_OscConfig+0xa60>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	60cb      	str	r3, [r1, #12]
 80051e2:	e01b      	b.n	800521c <HAL_RCC_OscConfig+0xa98>
 80051e4:	46020c00 	.word	0x46020c00
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d30a      	bcc.n	8005208 <HAL_RCC_OscConfig+0xa84>
 80051f2:	4ba5      	ldr	r3, [pc, #660]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	029b      	lsls	r3, r3, #10
 8005200:	49a1      	ldr	r1, [pc, #644]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005202:	4313      	orrs	r3, r2
 8005204:	60cb      	str	r3, [r1, #12]
 8005206:	e009      	b.n	800521c <HAL_RCC_OscConfig+0xa98>
 8005208:	4b9f      	ldr	r3, [pc, #636]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	03db      	lsls	r3, r3, #15
 8005216:	499c      	ldr	r1, [pc, #624]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005218:	4313      	orrs	r3, r2
 800521a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800521c:	4b9a      	ldr	r3, [pc, #616]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a99      	ldr	r2, [pc, #612]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005222:	f043 0310 	orr.w	r3, r3, #16
 8005226:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005228:	f7fc ffa0 	bl	800216c <HAL_GetTick>
 800522c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005230:	f7fc ff9c 	bl	800216c <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e170      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005242:	4b91      	ldr	r3, [pc, #580]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0xaac>
 800524e:	e018      	b.n	8005282 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005250:	4b8d      	ldr	r3, [pc, #564]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a8c      	ldr	r2, [pc, #560]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005256:	f023 0310 	bic.w	r3, r3, #16
 800525a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800525c:	f7fc ff86 	bl	800216c <HAL_GetTick>
 8005260:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005264:	f7fc ff82 	bl	800216c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e156      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005276:	4b84      	ldr	r3, [pc, #528]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 814b 	beq.w	8005522 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800528c:	2300      	movs	r3, #0
 800528e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005292:	4b7d      	ldr	r3, [pc, #500]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f003 030c 	and.w	r3, r3, #12
 800529a:	2b0c      	cmp	r3, #12
 800529c:	f000 80fa 	beq.w	8005494 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	f040 80cc 	bne.w	8005442 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80052aa:	4b77      	ldr	r3, [pc, #476]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a76      	ldr	r2, [pc, #472]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80052b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80052b6:	f7fc ff59 	bl	800216c <HAL_GetTick>
 80052ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052be:	f7fc ff55 	bl	800216c <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e129      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80052d0:	4b6d      	ldr	r3, [pc, #436]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052dc:	4b6a      	ldr	r3, [pc, #424]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80052de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d111      	bne.n	800530e <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	4b67      	ldr	r3, [pc, #412]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80052ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f0:	4a65      	ldr	r2, [pc, #404]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80052f2:	f043 0304 	orr.w	r3, r3, #4
 80052f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80052fa:	4b63      	ldr	r3, [pc, #396]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80052fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005308:	2301      	movs	r3, #1
 800530a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800530e:	4b5f      	ldr	r3, [pc, #380]	; (800548c <HAL_RCC_OscConfig+0xd08>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800531a:	d102      	bne.n	8005322 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005322:	4b5a      	ldr	r3, [pc, #360]	; (800548c <HAL_RCC_OscConfig+0xd08>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4a59      	ldr	r2, [pc, #356]	; (800548c <HAL_RCC_OscConfig+0xd08>)
 8005328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800532e:	4b56      	ldr	r3, [pc, #344]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005342:	3a01      	subs	r2, #1
 8005344:	0212      	lsls	r2, r2, #8
 8005346:	4311      	orrs	r1, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800534c:	430a      	orrs	r2, r1
 800534e:	494e      	ldr	r1, [pc, #312]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005350:	4313      	orrs	r3, r2
 8005352:	628b      	str	r3, [r1, #40]	; 0x28
 8005354:	4b4c      	ldr	r3, [pc, #304]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005358:	4b4d      	ldr	r3, [pc, #308]	; (8005490 <HAL_RCC_OscConfig+0xd0c>)
 800535a:	4013      	ands	r3, r2
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005360:	3a01      	subs	r2, #1
 8005362:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800536a:	3a01      	subs	r2, #1
 800536c:	0252      	lsls	r2, r2, #9
 800536e:	b292      	uxth	r2, r2
 8005370:	4311      	orrs	r1, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005376:	3a01      	subs	r2, #1
 8005378:	0412      	lsls	r2, r2, #16
 800537a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800537e:	4311      	orrs	r1, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005384:	3a01      	subs	r2, #1
 8005386:	0612      	lsls	r2, r2, #24
 8005388:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800538c:	430a      	orrs	r2, r1
 800538e:	493e      	ldr	r1, [pc, #248]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005390:	4313      	orrs	r3, r2
 8005392:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005394:	4b3c      	ldr	r3, [pc, #240]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	4a3b      	ldr	r2, [pc, #236]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 800539a:	f023 0310 	bic.w	r3, r3, #16
 800539e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80053a0:	4b39      	ldr	r3, [pc, #228]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80053b0:	00d2      	lsls	r2, r2, #3
 80053b2:	4935      	ldr	r1, [pc, #212]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053b8:	4b33      	ldr	r3, [pc, #204]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	4a32      	ldr	r2, [pc, #200]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80053be:	f043 0310 	orr.w	r3, r3, #16
 80053c2:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80053c4:	4b30      	ldr	r3, [pc, #192]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f023 020c 	bic.w	r2, r3, #12
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d0:	492d      	ldr	r1, [pc, #180]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80053d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d105      	bne.n	80053ea <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80053de:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_RCC_OscConfig+0xd08>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a2a      	ldr	r2, [pc, #168]	; (800548c <HAL_RCC_OscConfig+0xd08>)
 80053e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e8:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80053ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80053f2:	4b25      	ldr	r3, [pc, #148]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80053f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f8:	4a23      	ldr	r2, [pc, #140]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 80053fa:	f023 0304 	bic.w	r3, r3, #4
 80053fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005402:	4b21      	ldr	r3, [pc, #132]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	4a20      	ldr	r2, [pc, #128]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800540c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800540e:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1d      	ldr	r2, [pc, #116]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005418:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800541a:	f7fc fea7 	bl	800216c <HAL_GetTick>
 800541e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005422:	f7fc fea3 	bl	800216c <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e077      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005434:	4b14      	ldr	r3, [pc, #80]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0xc9e>
 8005440:	e06f      	b.n	8005522 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a10      	ldr	r2, [pc, #64]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800544c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800544e:	f7fc fe8d 	bl	800216c <HAL_GetTick>
 8005452:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005456:	f7fc fe89 	bl	800216c <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e05d      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005468:	4b07      	ldr	r3, [pc, #28]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f0      	bne.n	8005456 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005474:	4b04      	ldr	r3, [pc, #16]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	4a03      	ldr	r2, [pc, #12]	; (8005488 <HAL_RCC_OscConfig+0xd04>)
 800547a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	6293      	str	r3, [r2, #40]	; 0x28
 8005484:	e04d      	b.n	8005522 <HAL_RCC_OscConfig+0xd9e>
 8005486:	bf00      	nop
 8005488:	46020c00 	.word	0x46020c00
 800548c:	46020800 	.word	0x46020800
 8005490:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005494:	4b25      	ldr	r3, [pc, #148]	; (800552c <HAL_RCC_OscConfig+0xda8>)
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800549a:	4b24      	ldr	r3, [pc, #144]	; (800552c <HAL_RCC_OscConfig+0xda8>)
 800549c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d03a      	beq.n	800551e <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	f003 0203 	and.w	r2, r3, #3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d133      	bne.n	800551e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	0a1b      	lsrs	r3, r3, #8
 80054ba:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d12a      	bne.n	800551e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	0b1b      	lsrs	r3, r3, #12
 80054cc:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d122      	bne.n	800551e <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d11a      	bne.n	800551e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	0a5b      	lsrs	r3, r3, #9
 80054ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d111      	bne.n	800551e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005506:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d108      	bne.n	800551e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	0e1b      	lsrs	r3, r3, #24
 8005510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005518:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3738      	adds	r7, #56	; 0x38
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	46020c00 	.word	0x46020c00

08005530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e1d9      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	4b9b      	ldr	r3, [pc, #620]	; (80057b4 <HAL_RCC_ClockConfig+0x284>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d910      	bls.n	8005574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b98      	ldr	r3, [pc, #608]	; (80057b4 <HAL_RCC_ClockConfig+0x284>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 020f 	bic.w	r2, r3, #15
 800555a:	4996      	ldr	r1, [pc, #600]	; (80057b4 <HAL_RCC_ClockConfig+0x284>)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b94      	ldr	r3, [pc, #592]	; (80057b4 <HAL_RCC_ClockConfig+0x284>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e1c1      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	4b8c      	ldr	r3, [pc, #560]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800558c:	429a      	cmp	r2, r3
 800558e:	d908      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005590:	4b89      	ldr	r3, [pc, #548]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	4986      	ldr	r1, [pc, #536]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d012      	beq.n	80055d4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	4b81      	ldr	r3, [pc, #516]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055bc:	429a      	cmp	r2, r3
 80055be:	d909      	bls.n	80055d4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80055c0:	4b7d      	ldr	r3, [pc, #500]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	497a      	ldr	r1, [pc, #488]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	4b74      	ldr	r3, [pc, #464]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d908      	bls.n	8005602 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b71      	ldr	r3, [pc, #452]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	496e      	ldr	r1, [pc, #440]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	4b69      	ldr	r3, [pc, #420]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	429a      	cmp	r2, r3
 800561c:	d908      	bls.n	8005630 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800561e:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 020f 	bic.w	r2, r3, #15
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4963      	ldr	r1, [pc, #396]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800562c:	4313      	orrs	r3, r2
 800562e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80d2 	beq.w	80057e2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d143      	bne.n	80056d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564a:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800564c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d110      	bne.n	800567a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005658:	4b57      	ldr	r3, [pc, #348]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800565a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800565e:	4a56      	ldr	r2, [pc, #344]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005668:	4b53      	ldr	r3, [pc, #332]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800566a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800567a:	f7fc fd77 	bl	800216c <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005680:	4b4e      	ldr	r3, [pc, #312]	; (80057bc <HAL_RCC_ClockConfig+0x28c>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00f      	beq.n	80056ac <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800568e:	f7fc fd6d 	bl	800216c <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e12b      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80056a0:	4b46      	ldr	r3, [pc, #280]	; (80057bc <HAL_RCC_ClockConfig+0x28c>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d107      	bne.n	80056c2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80056b2:	4b41      	ldr	r3, [pc, #260]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b8:	4a3f      	ldr	r2, [pc, #252]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056ba:	f023 0304 	bic.w	r3, r3, #4
 80056be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80056c2:	4b3d      	ldr	r3, [pc, #244]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d121      	bne.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e112      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d107      	bne.n	80056ea <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056da:	4b37      	ldr	r3, [pc, #220]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d115      	bne.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e106      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d107      	bne.n	8005702 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80056f2:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e0fa      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005702:	4b2d      	ldr	r3, [pc, #180]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0f2      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005712:	4b29      	ldr	r3, [pc, #164]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f023 0203 	bic.w	r2, r3, #3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4926      	ldr	r1, [pc, #152]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005724:	f7fc fd22 	bl	800216c <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d112      	bne.n	8005758 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005732:	e00a      	b.n	800574a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005734:	f7fc fd1a 	bl	800216c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0d6      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800574a:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d1ee      	bne.n	8005734 <HAL_RCC_ClockConfig+0x204>
 8005756:	e044      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d112      	bne.n	8005786 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005760:	e00a      	b.n	8005778 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005762:	f7fc fd03 	bl	800216c <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005770:	4293      	cmp	r3, r2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e0bf      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f003 030c 	and.w	r3, r3, #12
 8005780:	2b08      	cmp	r3, #8
 8005782:	d1ee      	bne.n	8005762 <HAL_RCC_ClockConfig+0x232>
 8005784:	e02d      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d123      	bne.n	80057d6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fc fcec 	bl	800216c <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	; 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0a8      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80057a6:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1ee      	bne.n	8005790 <HAL_RCC_ClockConfig+0x260>
 80057b2:	e016      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2b2>
 80057b4:	40022000 	.word	0x40022000
 80057b8:	46020c00 	.word	0x46020c00
 80057bc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c0:	f7fc fcd4 	bl	800216c <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e090      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057d6:	4b4a      	ldr	r3, [pc, #296]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d1ee      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	4b43      	ldr	r3, [pc, #268]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d208      	bcs.n	8005810 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80057fe:	4b40      	ldr	r3, [pc, #256]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 020f 	bic.w	r2, r3, #15
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	493d      	ldr	r1, [pc, #244]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800580c:	4313      	orrs	r3, r2
 800580e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005810:	4b3c      	ldr	r3, [pc, #240]	; (8005904 <HAL_RCC_ClockConfig+0x3d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d210      	bcs.n	8005840 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581e:	4b39      	ldr	r3, [pc, #228]	; (8005904 <HAL_RCC_ClockConfig+0x3d4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f023 020f 	bic.w	r2, r3, #15
 8005826:	4937      	ldr	r1, [pc, #220]	; (8005904 <HAL_RCC_ClockConfig+0x3d4>)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	4313      	orrs	r3, r2
 800582c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582e:	4b35      	ldr	r3, [pc, #212]	; (8005904 <HAL_RCC_ClockConfig+0x3d4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e05b      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d010      	beq.n	800586e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005858:	429a      	cmp	r2, r3
 800585a:	d208      	bcs.n	800586e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800585c:	4b28      	ldr	r3, [pc, #160]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4925      	ldr	r1, [pc, #148]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800586a:	4313      	orrs	r3, r2
 800586c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d012      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	4b20      	ldr	r3, [pc, #128]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005888:	429a      	cmp	r2, r3
 800588a:	d209      	bcs.n	80058a0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800588c:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	4919      	ldr	r1, [pc, #100]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800589c:	4313      	orrs	r3, r2
 800589e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d010      	beq.n	80058ce <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	4b13      	ldr	r3, [pc, #76]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d208      	bcs.n	80058ce <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80058bc:	4b10      	ldr	r3, [pc, #64]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	490d      	ldr	r1, [pc, #52]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80058ce:	f000 f821 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 80058d2:	4602      	mov	r2, r0
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	490a      	ldr	r1, [pc, #40]	; (8005908 <HAL_RCC_ClockConfig+0x3d8>)
 80058de:	5ccb      	ldrb	r3, [r1, r3]
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
 80058e4:	4a09      	ldr	r2, [pc, #36]	; (800590c <HAL_RCC_ClockConfig+0x3dc>)
 80058e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <HAL_RCC_ClockConfig+0x3e0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fc fa23 	bl	8001d38 <HAL_InitTick>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	46020c00 	.word	0x46020c00
 8005904:	40022000 	.word	0x40022000
 8005908:	08027948 	.word	0x08027948
 800590c:	20025808 	.word	0x20025808
 8005910:	2002580c 	.word	0x2002580c

08005914 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005914:	b480      	push	{r7}
 8005916:	b08b      	sub	sp, #44	; 0x2c
 8005918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005922:	4b7b      	ldr	r3, [pc, #492]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800592c:	4b78      	ldr	r3, [pc, #480]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_RCC_GetSysClockFreq+0x34>
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d121      	bne.n	8005986 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d11e      	bne.n	8005986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005948:	4b71      	ldr	r3, [pc, #452]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005954:	4b6e      	ldr	r3, [pc, #440]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800595a:	0b1b      	lsrs	r3, r3, #12
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
 8005962:	e005      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005964:	4b6a      	ldr	r3, [pc, #424]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	0f1b      	lsrs	r3, r3, #28
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005970:	4a68      	ldr	r2, [pc, #416]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005978:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d110      	bne.n	80059a2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005984:	e00d      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005986:	4b62      	ldr	r3, [pc, #392]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b04      	cmp	r3, #4
 8005990:	d102      	bne.n	8005998 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005992:	4b61      	ldr	r3, [pc, #388]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	e004      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b08      	cmp	r3, #8
 800599c:	d101      	bne.n	80059a2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800599e:	4b5e      	ldr	r3, [pc, #376]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x204>)
 80059a0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b0c      	cmp	r3, #12
 80059a6:	f040 80ac 	bne.w	8005b02 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80059aa:	4b59      	ldr	r3, [pc, #356]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80059b4:	4b56      	ldr	r3, [pc, #344]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	0a1b      	lsrs	r3, r3, #8
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	3301      	adds	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80059c2:	4b53      	ldr	r3, [pc, #332]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	091b      	lsrs	r3, r3, #4
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80059ce:	4b50      	ldr	r3, [pc, #320]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	08db      	lsrs	r3, r3, #3
 80059d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8086 	beq.w	8005afe <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d003      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0xec>
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d022      	beq.n	8005a44 <HAL_RCC_GetSysClockFreq+0x130>
 80059fe:	e043      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005b1c <HAL_RCC_GetSysClockFreq+0x208>
 8005a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a12:	4b3f      	ldr	r3, [pc, #252]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a22:	ed97 6a01 	vldr	s12, [r7, #4]
 8005a26:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005b20 <HAL_RCC_GetSysClockFreq+0x20c>
 8005a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005a42:	e046      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005b1c <HAL_RCC_GetSysClockFreq+0x208>
 8005a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a56:	4b2e      	ldr	r3, [pc, #184]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a66:	ed97 6a01 	vldr	s12, [r7, #4]
 8005a6a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005b20 <HAL_RCC_GetSysClockFreq+0x20c>
 8005a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a82:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005a86:	e024      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	ee07 3a90 	vmov	s15, r3
 8005a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa0:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ab0:	ed97 6a01 	vldr	s12, [r7, #4]
 8005ab4:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005b20 <HAL_RCC_GetSysClockFreq+0x20c>
 8005ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005acc:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005ad0:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005ad2:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	0e1b      	lsrs	r3, r3, #24
 8005ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005adc:	3301      	adds	r3, #1
 8005ade:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005af6:	ee17 3a90 	vmov	r3, s15
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	e001      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005b02:	6a3b      	ldr	r3, [r7, #32]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	372c      	adds	r7, #44	; 0x2c
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	46020c00 	.word	0x46020c00
 8005b14:	08027960 	.word	0x08027960
 8005b18:	00f42400 	.word	0x00f42400
 8005b1c:	4b742400 	.word	0x4b742400
 8005b20:	46000000 	.word	0x46000000

08005b24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005b28:	f7ff fef4 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <HAL_RCC_GetHCLKFreq+0x28>)
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	4906      	ldr	r1, [pc, #24]	; (8005b50 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005b38:	5ccb      	ldrb	r3, [r1, r3]
 8005b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3e:	4a05      	ldr	r2, [pc, #20]	; (8005b54 <HAL_RCC_GetHCLKFreq+0x30>)
 8005b40:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <HAL_RCC_GetHCLKFreq+0x30>)
 8005b44:	681b      	ldr	r3, [r3, #0]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	46020c00 	.word	0x46020c00
 8005b50:	08027948 	.word	0x08027948
 8005b54:	20025808 	.word	0x20025808

08005b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005b5c:	f7ff ffe2 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4903      	ldr	r1, [pc, #12]	; (8005b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	46020c00 	.word	0x46020c00
 8005b7c:	08027958 	.word	0x08027958

08005b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005b84:	f7ff ffce 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	0a1b      	lsrs	r3, r3, #8
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4903      	ldr	r1, [pc, #12]	; (8005ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	46020c00 	.word	0x46020c00
 8005ba4:	08027958 	.word	0x08027958

08005ba8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005bac:	f7ff ffba 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	4903      	ldr	r1, [pc, #12]	; (8005bcc <HAL_RCC_GetPCLK3Freq+0x24>)
 8005bbe:	5ccb      	ldrb	r3, [r1, r3]
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	46020c00 	.word	0x46020c00
 8005bcc:	08027958 	.word	0x08027958

08005bd0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	221f      	movs	r2, #31
 8005bde:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005be0:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <HAL_RCC_GetClockConfig+0x68>)
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f003 0203 	and.w	r2, r3, #3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005bec:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <HAL_RCC_GetClockConfig+0x68>)
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f003 020f 	and.w	r2, r3, #15
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <HAL_RCC_GetClockConfig+0x68>)
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_RCC_GetClockConfig+0x68>)
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_RCC_GetClockConfig+0x68>)
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c1e:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <HAL_RCC_GetClockConfig+0x6c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 020f 	and.w	r2, r3, #15
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	601a      	str	r2, [r3, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	46020c00 	.word	0x46020c00
 8005c3c:	40022000 	.word	0x40022000

08005c40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c48:	4b3e      	ldr	r3, [pc, #248]	; (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c56:	f7fe fd17 	bl	8004688 <HAL_PWREx_GetVoltageRange>
 8005c5a:	6178      	str	r0, [r7, #20]
 8005c5c:	e019      	b.n	8005c92 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	4b39      	ldr	r3, [pc, #228]	; (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c64:	4a37      	ldr	r2, [pc, #220]	; (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c6e:	4b35      	ldr	r3, [pc, #212]	; (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c7c:	f7fe fd04 	bl	8004688 <HAL_PWREx_GetVoltageRange>
 8005c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c82:	4b30      	ldr	r3, [pc, #192]	; (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c88:	4a2e      	ldr	r2, [pc, #184]	; (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c8a:	f023 0304 	bic.w	r3, r3, #4
 8005c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c98:	d003      	beq.n	8005ca2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca0:	d109      	bne.n	8005cb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ca8:	d202      	bcs.n	8005cb0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005caa:	2301      	movs	r3, #1
 8005cac:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005cae:	e033      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005cb4:	e030      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cbc:	d208      	bcs.n	8005cd0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc4:	d102      	bne.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	e025      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e035      	b.n	8005d3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cd6:	d90f      	bls.n	8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ce4:	d902      	bls.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	e015      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005cec:	2301      	movs	r3, #1
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	e012      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	e00f      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cfe:	d109      	bne.n	8005d14 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d06:	d102      	bne.n	8005d0e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005d08:	2301      	movs	r3, #1
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	e004      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005d0e:	2302      	movs	r3, #2
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	e001      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005d14:	2301      	movs	r3, #1
 8005d16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f023 020f 	bic.w	r2, r3, #15
 8005d20:	4909      	ldr	r1, [pc, #36]	; (8005d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005d28:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d001      	beq.n	8005d3a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	46020c00 	.word	0x46020c00
 8005d48:	40022000 	.word	0x40022000

08005d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d50:	b0ba      	sub	sp, #232	; 0xe8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f002 0401 	and.w	r4, r2, #1
 8005d70:	2500      	movs	r5, #0
 8005d72:	ea54 0305 	orrs.w	r3, r4, r5
 8005d76:	d00b      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005d78:	4bcb      	ldr	r3, [pc, #812]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d7e:	f023 0103 	bic.w	r1, r3, #3
 8005d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d88:	4ac7      	ldr	r2, [pc, #796]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f002 0802 	and.w	r8, r2, #2
 8005d9c:	f04f 0900 	mov.w	r9, #0
 8005da0:	ea58 0309 	orrs.w	r3, r8, r9
 8005da4:	d00b      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005da6:	4bc0      	ldr	r3, [pc, #768]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dac:	f023 010c 	bic.w	r1, r3, #12
 8005db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	4abc      	ldr	r2, [pc, #752]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db8:	430b      	orrs	r3, r1
 8005dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f002 0a04 	and.w	sl, r2, #4
 8005dca:	f04f 0b00 	mov.w	fp, #0
 8005dce:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dd2:	d00b      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005dd4:	4bb4      	ldr	r3, [pc, #720]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dda:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de4:	4ab0      	ldr	r2, [pc, #704]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005de6:	430b      	orrs	r3, r1
 8005de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f002 0308 	and.w	r3, r2, #8
 8005df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005e06:	460b      	mov	r3, r1
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	d00b      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005e0c:	4ba6      	ldr	r3, [pc, #664]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1c:	4aa2      	ldr	r2, [pc, #648]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f002 0310 	and.w	r3, r2, #16
 8005e30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005e44:	4b98      	ldr	r3, [pc, #608]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e54:	4a94      	ldr	r2, [pc, #592]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e56:	430b      	orrs	r3, r1
 8005e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f002 0320 	and.w	r3, r2, #32
 8005e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005e76:	460b      	mov	r3, r1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005e7c:	4b8a      	ldr	r3, [pc, #552]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e82:	f023 0107 	bic.w	r1, r3, #7
 8005e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e8c:	4a86      	ldr	r2, [pc, #536]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eaa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005eb4:	4b7c      	ldr	r3, [pc, #496]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eba:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec4:	4a78      	ldr	r2, [pc, #480]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ee2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	d00b      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005eec:	4b6e      	ldr	r3, [pc, #440]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efc:	4a6a      	ldr	r2, [pc, #424]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005efe:	430b      	orrs	r3, r1
 8005f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f1a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4313      	orrs	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005f24:	4b60      	ldr	r3, [pc, #384]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	4a5c      	ldr	r2, [pc, #368]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f36:	430b      	orrs	r3, r1
 8005f38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f52:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005f56:	460b      	mov	r3, r1
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005f5c:	4b52      	ldr	r3, [pc, #328]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f62:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6c:	4a4e      	ldr	r2, [pc, #312]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f6e:	430b      	orrs	r3, r1
 8005f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005f80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f84:	2300      	movs	r3, #0
 8005f86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4313      	orrs	r3, r2
 8005f92:	d00b      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005f94:	4b44      	ldr	r3, [pc, #272]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f9a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa4:	4a40      	ldr	r2, [pc, #256]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fc2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005fcc:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fd2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fdc:	4a32      	ldr	r2, [pc, #200]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ffa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005ffe:	460b      	mov	r3, r1
 8006000:	4313      	orrs	r3, r2
 8006002:	d00c      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006004:	4b28      	ldr	r3, [pc, #160]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800600a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800600e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006016:	4a24      	ldr	r2, [pc, #144]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006018:	430b      	orrs	r3, r1
 800601a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800601e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800602a:	67bb      	str	r3, [r7, #120]	; 0x78
 800602c:	2300      	movs	r3, #0
 800602e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006030:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006034:	460b      	mov	r3, r1
 8006036:	4313      	orrs	r3, r2
 8006038:	d04f      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800603a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d02d      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006046:	2b80      	cmp	r3, #128	; 0x80
 8006048:	d827      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800604a:	2b60      	cmp	r3, #96	; 0x60
 800604c:	d02e      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 800604e:	2b60      	cmp	r3, #96	; 0x60
 8006050:	d823      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d006      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d81f      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d009      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800605e:	2b20      	cmp	r3, #32
 8006060:	d011      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006062:	e01a      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006064:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	4a0f      	ldr	r2, [pc, #60]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800606a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800606e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006070:	e01d      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006076:	3308      	adds	r3, #8
 8006078:	4618      	mov	r0, r3
 800607a:	f002 f981 	bl	8008380 <RCCEx_PLL2_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006084:	e013      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800608a:	332c      	adds	r3, #44	; 0x2c
 800608c:	4618      	mov	r0, r3
 800608e:	f002 fa0f 	bl	80084b0 <RCCEx_PLL3_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006098:	e009      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80060a0:	e005      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80060a2:	bf00      	nop
 80060a4:	e003      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 80060a6:	bf00      	nop
 80060a8:	46020c00 	.word	0x46020c00
        break;
 80060ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10d      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80060b6:	4bb6      	ldr	r3, [pc, #728]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060bc:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80060c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c8:	4ab1      	ldr	r2, [pc, #708]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060ca:	430b      	orrs	r3, r1
 80060cc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80060d0:	e003      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80060d6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80060e6:	673b      	str	r3, [r7, #112]	; 0x70
 80060e8:	2300      	movs	r3, #0
 80060ea:	677b      	str	r3, [r7, #116]	; 0x74
 80060ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d053      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80060f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006102:	d033      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006108:	d82c      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800610a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800610e:	d02f      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006114:	d826      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611a:	d008      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800611c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006120:	d820      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8006126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800612a:	d011      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800612c:	e01a      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800612e:	4b98      	ldr	r3, [pc, #608]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	4a97      	ldr	r2, [pc, #604]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006138:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800613a:	e01a      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800613c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006140:	3308      	adds	r3, #8
 8006142:	4618      	mov	r0, r3
 8006144:	f002 f91c 	bl	8008380 <RCCEx_PLL2_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800614e:	e010      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006154:	332c      	adds	r3, #44	; 0x2c
 8006156:	4618      	mov	r0, r3
 8006158:	f002 f9aa 	bl	80084b0 <RCCEx_PLL3_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006162:	e006      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800616a:	e002      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006172:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10d      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800617a:	4b85      	ldr	r3, [pc, #532]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800617c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006180:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800618c:	4a80      	ldr	r2, [pc, #512]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800618e:	430b      	orrs	r3, r1
 8006190:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006194:	e003      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006196:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800619a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800619e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80061aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ac:	2300      	movs	r3, #0
 80061ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80061b4:	460b      	mov	r3, r1
 80061b6:	4313      	orrs	r3, r2
 80061b8:	d046      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80061ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061c2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80061c6:	d028      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061c8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80061cc:	d821      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80061ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061d2:	d022      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061d8:	d81b      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80061da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061de:	d01c      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061e4:	d815      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80061e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ea:	d008      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80061ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f0:	d80f      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d011      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fa:	d00e      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061fc:	e009      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006202:	3308      	adds	r3, #8
 8006204:	4618      	mov	r0, r3
 8006206:	f002 f8bb 	bl	8008380 <RCCEx_PLL2_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006210:	e004      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800621a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006224:	4b5a      	ldr	r3, [pc, #360]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800622a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800622e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006236:	4a56      	ldr	r2, [pc, #344]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006238:	430b      	orrs	r3, r1
 800623a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800623e:	e003      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006244:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006254:	663b      	str	r3, [r7, #96]	; 0x60
 8006256:	2300      	movs	r3, #0
 8006258:	667b      	str	r3, [r7, #100]	; 0x64
 800625a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800625e:	460b      	mov	r3, r1
 8006260:	4313      	orrs	r3, r2
 8006262:	d03f      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626c:	2b04      	cmp	r3, #4
 800626e:	d81e      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	080062b7 	.word	0x080062b7
 800627c:	0800628d 	.word	0x0800628d
 8006280:	0800629b 	.word	0x0800629b
 8006284:	080062b7 	.word	0x080062b7
 8006288:	080062b7 	.word	0x080062b7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800628c:	4b40      	ldr	r3, [pc, #256]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	4a3f      	ldr	r2, [pc, #252]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006296:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006298:	e00e      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800629a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800629e:	332c      	adds	r3, #44	; 0x2c
 80062a0:	4618      	mov	r0, r3
 80062a2:	f002 f905 	bl	80084b0 <RCCEx_PLL3_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80062ac:	e004      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80062b4:	e000      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80062b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10d      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80062c0:	4b33      	ldr	r3, [pc, #204]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80062c6:	f023 0107 	bic.w	r1, r3, #7
 80062ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d2:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062d4:	430b      	orrs	r3, r1
 80062d6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80062da:	e003      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80062e0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80062e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80062f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80062f2:	2300      	movs	r3, #0
 80062f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80062fa:	460b      	mov	r3, r1
 80062fc:	4313      	orrs	r3, r2
 80062fe:	d04d      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006308:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800630c:	d028      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800630e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006312:	d821      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006314:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006318:	d024      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800631a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800631e:	d81b      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006324:	d00e      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800632a:	d815      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01b      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006334:	d110      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006336:	4b16      	ldr	r3, [pc, #88]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	4a15      	ldr	r2, [pc, #84]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006340:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006342:	e012      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006344:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006348:	332c      	adds	r3, #44	; 0x2c
 800634a:	4618      	mov	r0, r3
 800634c:	f002 f8b0 	bl	80084b0 <RCCEx_PLL3_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006356:	e008      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800635e:	e004      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006360:	bf00      	nop
 8006362:	e002      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006364:	bf00      	nop
 8006366:	e000      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006368:	bf00      	nop
    }
    if (ret == HAL_OK)
 800636a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d110      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006372:	4b07      	ldr	r3, [pc, #28]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006378:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800637c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006384:	4a02      	ldr	r2, [pc, #8]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006386:	430b      	orrs	r3, r1
 8006388:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800638c:	e006      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800638e:	bf00      	nop
 8006390:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006394:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006398:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800639c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80063a8:	653b      	str	r3, [r7, #80]	; 0x50
 80063aa:	2300      	movs	r3, #0
 80063ac:	657b      	str	r3, [r7, #84]	; 0x54
 80063ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f000 80b5 	beq.w	8006524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063c0:	4b9d      	ldr	r3, [pc, #628]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d113      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ce:	4b9a      	ldr	r3, [pc, #616]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d4:	4a98      	ldr	r2, [pc, #608]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063d6:	f043 0304 	orr.w	r3, r3, #4
 80063da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80063de:	4b96      	ldr	r3, [pc, #600]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80063f6:	4b91      	ldr	r3, [pc, #580]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	4a90      	ldr	r2, [pc, #576]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006402:	f7fb feb3 	bl	800216c <HAL_GetTick>
 8006406:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800640a:	e00b      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800640c:	f7fb feae 	bl	800216c <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d903      	bls.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006422:	e005      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006424:	4b85      	ldr	r3, [pc, #532]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0ed      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006430:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d165      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006438:	4b7f      	ldr	r3, [pc, #508]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800643a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800643e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644a:	2b00      	cmp	r3, #0
 800644c:	d023      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800644e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006452:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645a:	4293      	cmp	r3, r2
 800645c:	d01b      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800645e:	4b76      	ldr	r3, [pc, #472]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800646c:	4b72      	ldr	r3, [pc, #456]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800646e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006472:	4a71      	ldr	r2, [pc, #452]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006478:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800647c:	4b6e      	ldr	r3, [pc, #440]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800647e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006482:	4a6d      	ldr	r2, [pc, #436]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006488:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800648c:	4a6a      	ldr	r2, [pc, #424]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006492:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d019      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a2:	f7fb fe63 	bl	800216c <HAL_GetTick>
 80064a6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064aa:	e00d      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ac:	f7fb fe5e 	bl	800216c <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80064bc:	429a      	cmp	r2, r3
 80064be:	d903      	bls.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80064c6:	e006      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c8:	4b5b      	ldr	r3, [pc, #364]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0ea      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80064d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10d      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80064de:	4b56      	ldr	r3, [pc, #344]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80064f0:	4a51      	ldr	r2, [pc, #324]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064f2:	430b      	orrs	r3, r1
 80064f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80064f8:	e008      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064fe:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006502:	e003      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006508:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800650c:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d107      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006514:	4b48      	ldr	r3, [pc, #288]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800651a:	4a47      	ldr	r2, [pc, #284]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800651c:	f023 0304 	bic.w	r3, r3, #4
 8006520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006530:	64bb      	str	r3, [r7, #72]	; 0x48
 8006532:	2300      	movs	r3, #0
 8006534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006536:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d042      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006540:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006544:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006548:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800654c:	d022      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800654e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006552:	d81b      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006558:	d011      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800655a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800655e:	d815      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d019      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006568:	d110      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800656a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800656e:	3308      	adds	r3, #8
 8006570:	4618      	mov	r0, r3
 8006572:	f001 ff05 	bl	8008380 <RCCEx_PLL2_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800657c:	e00d      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800657e:	4b2e      	ldr	r3, [pc, #184]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	4a2d      	ldr	r2, [pc, #180]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006588:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800658a:	e006      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006592:	e002      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006598:	bf00      	nop
    }
    if (ret == HAL_OK)
 800659a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10d      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80065a2:	4b25      	ldr	r3, [pc, #148]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065a8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80065ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065b6:	430b      	orrs	r3, r1
 80065b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065bc:	e003      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065c2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80065d2:	643b      	str	r3, [r7, #64]	; 0x40
 80065d4:	2300      	movs	r3, #0
 80065d6:	647b      	str	r3, [r7, #68]	; 0x44
 80065d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80065dc:	460b      	mov	r3, r1
 80065de:	4313      	orrs	r3, r2
 80065e0:	d032      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80065e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ee:	d00b      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80065f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f4:	d804      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d008      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fe:	d007      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006606:	e004      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006608:	bf00      	nop
 800660a:	e002      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800660c:	bf00      	nop
 800660e:	e000      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006610:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006612:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d112      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800661a:	4b07      	ldr	r3, [pc, #28]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800661c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006620:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800662c:	4a02      	ldr	r2, [pc, #8]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800662e:	430b      	orrs	r3, r1
 8006630:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006634:	e008      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006636:	bf00      	nop
 8006638:	46020c00 	.word	0x46020c00
 800663c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006644:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006654:	63bb      	str	r3, [r7, #56]	; 0x38
 8006656:	2300      	movs	r3, #0
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800665a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	d00c      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006664:	4b98      	ldr	r3, [pc, #608]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006666:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800666a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800666e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006676:	4a94      	ldr	r2, [pc, #592]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006678:	430b      	orrs	r3, r1
 800667a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800667e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800668a:	633b      	str	r3, [r7, #48]	; 0x30
 800668c:	2300      	movs	r3, #0
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
 8006690:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006694:	460b      	mov	r3, r1
 8006696:	4313      	orrs	r3, r2
 8006698:	d019      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800669a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800669e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066a6:	d105      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066a8:	4b87      	ldr	r3, [pc, #540]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	4a86      	ldr	r2, [pc, #536]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b2:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80066b4:	4b84      	ldr	r3, [pc, #528]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066ba:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80066be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066c6:	4a80      	ldr	r2, [pc, #512]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066c8:	430b      	orrs	r3, r1
 80066ca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80066ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
 80066dc:	2300      	movs	r3, #0
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80066e4:	460b      	mov	r3, r1
 80066e6:	4313      	orrs	r3, r2
 80066e8:	d00c      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80066ea:	4b77      	ldr	r3, [pc, #476]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066fc:	4972      	ldr	r1, [pc, #456]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	2300      	movs	r3, #0
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
 8006716:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800671a:	460b      	mov	r3, r1
 800671c:	4313      	orrs	r3, r2
 800671e:	d00c      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006720:	4b69      	ldr	r3, [pc, #420]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006726:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800672a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800672e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006732:	4965      	ldr	r1, [pc, #404]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800673a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d00c      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006756:	4b5c      	ldr	r3, [pc, #368]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800675c:	f023 0218 	bic.w	r2, r3, #24
 8006760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006764:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006768:	4957      	ldr	r1, [pc, #348]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800676a:	4313      	orrs	r3, r2
 800676c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006786:	460b      	mov	r3, r1
 8006788:	4313      	orrs	r3, r2
 800678a:	d032      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800678c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006798:	d105      	bne.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800679a:	4b4b      	ldr	r3, [pc, #300]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	4a4a      	ldr	r2, [pc, #296]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a4:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80067a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067b2:	d108      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b8:	3308      	adds	r3, #8
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 fde0 	bl	8008380 <RCCEx_PLL2_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80067c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10d      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80067ce:	4b3e      	ldr	r3, [pc, #248]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067e0:	4939      	ldr	r1, [pc, #228]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80067e8:	e003      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067ee:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80067f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006808:	460b      	mov	r3, r1
 800680a:	4313      	orrs	r3, r2
 800680c:	d03a      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800680e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800681a:	d00e      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800681c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006820:	d815      	bhi.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d017      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800682a:	d110      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800682c:	4b26      	ldr	r3, [pc, #152]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006830:	4a25      	ldr	r2, [pc, #148]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006836:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006838:	e00e      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800683a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800683e:	3308      	adds	r3, #8
 8006840:	4618      	mov	r0, r3
 8006842:	f001 fd9d 	bl	8008380 <RCCEx_PLL2_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800684c:	e004      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006854:	e000      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006856:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006858:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10d      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006860:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006866:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800686a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800686e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006872:	4915      	ldr	r1, [pc, #84]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800687a:	e003      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006880:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	e9d7 1200 	ldrd	r1, r2, [r7]
 800689a:	460b      	mov	r3, r1
 800689c:	4313      	orrs	r3, r2
 800689e:	d00c      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80068aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068b2:	4905      	ldr	r1, [pc, #20]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80068ba:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80068be:	4618      	mov	r0, r3
 80068c0:	37e8      	adds	r7, #232	; 0xe8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068c8:	46020c00 	.word	0x46020c00

080068cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b089      	sub	sp, #36	; 0x24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80068d4:	4bac      	ldr	r3, [pc, #688]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068dc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80068de:	4baa      	ldr	r3, [pc, #680]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80068e8:	4ba7      	ldr	r3, [pc, #668]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ec:	0a1b      	lsrs	r3, r3, #8
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	3301      	adds	r3, #1
 80068f4:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80068f6:	4ba4      	ldr	r3, [pc, #656]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006900:	4ba1      	ldr	r3, [pc, #644]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	08db      	lsrs	r3, r3, #3
 8006906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	ee07 3a90 	vmov	s15, r3
 8006914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006918:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8123 	beq.w	8006b6a <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2b03      	cmp	r3, #3
 8006928:	d062      	beq.n	80069f0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b03      	cmp	r3, #3
 800692e:	f200 8081 	bhi.w	8006a34 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d024      	beq.n	8006982 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d17a      	bne.n	8006a34 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	ee07 3a90 	vmov	s15, r3
 8006944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006948:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006b8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800694c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006950:	4b8d      	ldr	r3, [pc, #564]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006958:	ee07 3a90 	vmov	s15, r3
 800695c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006960:	ed97 6a02 	vldr	s12, [r7, #8]
 8006964:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006968:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800696c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006974:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006980:	e08f      	b.n	8006aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006982:	4b81      	ldr	r3, [pc, #516]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800698e:	4b7e      	ldr	r3, [pc, #504]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	0f1b      	lsrs	r3, r3, #28
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	e006      	b.n	80069a8 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800699a:	4b7b      	ldr	r3, [pc, #492]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800699c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069a0:	041b      	lsls	r3, r3, #16
 80069a2:	0f1b      	lsrs	r3, r3, #28
 80069a4:	f003 030f 	and.w	r3, r3, #15
 80069a8:	4a7a      	ldr	r2, [pc, #488]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80069aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80069d2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80069d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80069e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ee:	e058      	b.n	8006aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006b8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80069fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a02:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a16:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a32:	e036      	b.n	8006aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006a34:	4b54      	ldr	r3, [pc, #336]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006a40:	4b51      	ldr	r3, [pc, #324]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	0f1b      	lsrs	r3, r3, #28
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	e006      	b.n	8006a5a <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006a4c:	4b4e      	ldr	r3, [pc, #312]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	0f1b      	lsrs	r3, r3, #28
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	4a4e      	ldr	r2, [pc, #312]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a60:	ee07 3a90 	vmov	s15, r3
 8006a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a80:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a84:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aa0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006aa2:	4b39      	ldr	r3, [pc, #228]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d017      	beq.n	8006ade <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006aae:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	0a5b      	lsrs	r3, r3, #9
 8006ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab8:	ee07 3a90 	vmov	s15, r3
 8006abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ad4:	ee17 2a90 	vmov	r2, s15
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	e002      	b.n	8006ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006ae4:	4b28      	ldr	r3, [pc, #160]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d017      	beq.n	8006b20 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006af0:	4b25      	ldr	r3, [pc, #148]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af4:	0c1b      	lsrs	r3, r3, #16
 8006af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b06:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b16:	ee17 2a90 	vmov	r2, s15
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	605a      	str	r2, [r3, #4]
 8006b1e:	e002      	b.n	8006b26 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006b26:	4b18      	ldr	r3, [pc, #96]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d017      	beq.n	8006b62 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	0e1b      	lsrs	r3, r3, #24
 8006b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b48:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b58:	ee17 2a90 	vmov	r2, s15
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006b60:	e00c      	b.n	8006b7c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	609a      	str	r2, [r3, #8]
}
 8006b68:	e008      	b.n	8006b7c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	609a      	str	r2, [r3, #8]
}
 8006b7c:	bf00      	nop
 8006b7e:	3724      	adds	r7, #36	; 0x24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	46020c00 	.word	0x46020c00
 8006b8c:	4b742400 	.word	0x4b742400
 8006b90:	46000000 	.word	0x46000000
 8006b94:	08027960 	.word	0x08027960

08006b98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b089      	sub	sp, #36	; 0x24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006ba0:	4bac      	ldr	r3, [pc, #688]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006baa:	4baa      	ldr	r3, [pc, #680]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006bb4:	4ba7      	ldr	r3, [pc, #668]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	0a1b      	lsrs	r3, r3, #8
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006bc2:	4ba4      	ldr	r3, [pc, #656]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006bcc:	4ba1      	ldr	r3, [pc, #644]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	08db      	lsrs	r3, r3, #3
 8006bd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	fb02 f303 	mul.w	r3, r2, r3
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8123 	beq.w	8006e36 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d062      	beq.n	8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	f200 8081 	bhi.w	8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d024      	beq.n	8006c4e <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d17a      	bne.n	8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c14:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1c:	4b8d      	ldr	r3, [pc, #564]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c24:	ee07 3a90 	vmov	s15, r3
 8006c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c30:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c4c:	e08f      	b.n	8006d6e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006c4e:	4b81      	ldr	r3, [pc, #516]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006c5a:	4b7e      	ldr	r3, [pc, #504]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	0f1b      	lsrs	r3, r3, #28
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	e006      	b.n	8006c74 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006c66:	4b7b      	ldr	r3, [pc, #492]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c6c:	041b      	lsls	r3, r3, #16
 8006c6e:	0f1b      	lsrs	r3, r3, #28
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	4a7a      	ldr	r2, [pc, #488]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	ee07 3a90 	vmov	s15, r3
 8006c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cba:	e058      	b.n	8006d6e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cce:	4b61      	ldr	r3, [pc, #388]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfe:	e036      	b.n	8006d6e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006d00:	4b54      	ldr	r3, [pc, #336]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006d0c:	4b51      	ldr	r3, [pc, #324]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	0f1b      	lsrs	r3, r3, #28
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	e006      	b.n	8006d26 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006d18:	4b4e      	ldr	r3, [pc, #312]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d1e:	041b      	lsls	r3, r3, #16
 8006d20:	0f1b      	lsrs	r3, r3, #28
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	4a4e      	ldr	r2, [pc, #312]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d2c:	ee07 3a90 	vmov	s15, r3
 8006d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	ee07 3a90 	vmov	s15, r3
 8006d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d50:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d6c:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006d6e:	4b39      	ldr	r3, [pc, #228]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d017      	beq.n	8006daa <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d7a:	4b36      	ldr	r3, [pc, #216]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7e:	0a5b      	lsrs	r3, r3, #9
 8006d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d84:	ee07 3a90 	vmov	s15, r3
 8006d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d90:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da0:	ee17 2a90 	vmov	r2, s15
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	e002      	b.n	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006db0:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d017      	beq.n	8006dec <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dbc:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc0:	0c1b      	lsrs	r3, r3, #16
 8006dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de2:	ee17 2a90 	vmov	r2, s15
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	605a      	str	r2, [r3, #4]
 8006dea:	e002      	b.n	8006df2 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006df2:	4b18      	ldr	r3, [pc, #96]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d017      	beq.n	8006e2e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dfe:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e02:	0e1b      	lsrs	r3, r3, #24
 8006e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e08:	ee07 3a90 	vmov	s15, r3
 8006e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e14:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e24:	ee17 2a90 	vmov	r2, s15
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e2c:	e00c      	b.n	8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	609a      	str	r2, [r3, #8]
}
 8006e34:	e008      	b.n	8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	609a      	str	r2, [r3, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	3724      	adds	r7, #36	; 0x24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	46020c00 	.word	0x46020c00
 8006e58:	4b742400 	.word	0x4b742400
 8006e5c:	46000000 	.word	0x46000000
 8006e60:	08027960 	.word	0x08027960

08006e64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b089      	sub	sp, #36	; 0x24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006e6c:	4bac      	ldr	r3, [pc, #688]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e74:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006e76:	4baa      	ldr	r3, [pc, #680]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006e80:	4ba7      	ldr	r3, [pc, #668]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	0a1b      	lsrs	r3, r3, #8
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006e8e:	4ba4      	ldr	r3, [pc, #656]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	f003 0310 	and.w	r3, r3, #16
 8006e96:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006e98:	4ba1      	ldr	r3, [pc, #644]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9c:	08db      	lsrs	r3, r3, #3
 8006e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	fb02 f303 	mul.w	r3, r2, r3
 8006ea8:	ee07 3a90 	vmov	s15, r3
 8006eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8123 	beq.w	8007102 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d062      	beq.n	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	f200 8081 	bhi.w	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d024      	beq.n	8006f1a <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d17a      	bne.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee8:	4b8d      	ldr	r3, [pc, #564]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef0:	ee07 3a90 	vmov	s15, r3
 8006ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ef8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006efc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f14:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006f18:	e08f      	b.n	800703a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006f1a:	4b81      	ldr	r3, [pc, #516]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8006f26:	4b7e      	ldr	r3, [pc, #504]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	0f1b      	lsrs	r3, r3, #28
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	e006      	b.n	8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8006f32:	4b7b      	ldr	r3, [pc, #492]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f38:	041b      	lsls	r3, r3, #16
 8006f3a:	0f1b      	lsrs	r3, r3, #28
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	4a7a      	ldr	r2, [pc, #488]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f6a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f86:	e058      	b.n	800703a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b61      	ldr	r3, [pc, #388]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fae:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fca:	e036      	b.n	800703a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006fcc:	4b54      	ldr	r3, [pc, #336]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8006fd8:	4b51      	ldr	r3, [pc, #324]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	0f1b      	lsrs	r3, r3, #28
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	e006      	b.n	8006ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8006fe4:	4b4e      	ldr	r3, [pc, #312]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	0f1b      	lsrs	r3, r3, #28
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	4a4e      	ldr	r2, [pc, #312]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff8:	ee07 3a90 	vmov	s15, r3
 8006ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007018:	ed97 6a02 	vldr	s12, [r7, #8]
 800701c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007038:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800703a:	4b39      	ldr	r3, [pc, #228]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d017      	beq.n	8007076 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007046:	4b36      	ldr	r3, [pc, #216]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	0a5b      	lsrs	r3, r3, #9
 800704c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800705c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007060:	edd7 6a07 	vldr	s13, [r7, #28]
 8007064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800706c:	ee17 2a90 	vmov	r2, s15
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	e002      	b.n	800707c <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800707c:	4b28      	ldr	r3, [pc, #160]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d017      	beq.n	80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007088:	4b25      	ldr	r3, [pc, #148]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800708a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708c:	0c1b      	lsrs	r3, r3, #16
 800708e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800709a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800709e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ae:	ee17 2a90 	vmov	r2, s15
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	605a      	str	r2, [r3, #4]
 80070b6:	e002      	b.n	80070be <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80070be:	4b18      	ldr	r3, [pc, #96]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d017      	beq.n	80070fa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070ca:	4b15      	ldr	r3, [pc, #84]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	0e1b      	lsrs	r3, r3, #24
 80070d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d4:	ee07 3a90 	vmov	s15, r3
 80070d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80070dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070e0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f0:	ee17 2a90 	vmov	r2, s15
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80070f8:	e00c      	b.n	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	609a      	str	r2, [r3, #8]
}
 8007100:	e008      	b.n	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	609a      	str	r2, [r3, #8]
}
 8007114:	bf00      	nop
 8007116:	3724      	adds	r7, #36	; 0x24
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	46020c00 	.word	0x46020c00
 8007124:	4b742400 	.word	0x4b742400
 8007128:	46000000 	.word	0x46000000
 800712c:	08027960 	.word	0x08027960

08007130 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08e      	sub	sp, #56	; 0x38
 8007134:	af00      	add	r7, sp, #0
 8007136:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800713a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800713e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8007142:	430b      	orrs	r3, r1
 8007144:	d145      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007146:	4ba7      	ldr	r3, [pc, #668]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800714c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007150:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007152:	4ba4      	ldr	r3, [pc, #656]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b02      	cmp	r3, #2
 800715e:	d108      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007166:	d104      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
 800716e:	f001 b8fc 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007172:	4b9c      	ldr	r3, [pc, #624]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007180:	d114      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007188:	d110      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800718a:	4b96      	ldr	r3, [pc, #600]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800718c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007198:	d103      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800719a:	23fa      	movs	r3, #250	; 0xfa
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800719e:	f001 b8e4 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80071a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071a6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071a8:	f001 b8df 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80071ac:	4b8d      	ldr	r3, [pc, #564]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b8:	d107      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071c0:	d103      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80071c2:	4b89      	ldr	r3, [pc, #548]	; (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80071c4:	637b      	str	r3, [r7, #52]	; 0x34
 80071c6:	f001 b8d0 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
 80071ce:	f001 b8cc 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80071d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80071da:	430b      	orrs	r3, r1
 80071dc:	d151      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80071de:	4b81      	ldr	r3, [pc, #516]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071e4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80071e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	2b80      	cmp	r3, #128	; 0x80
 80071ee:	d035      	beq.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	2b80      	cmp	r3, #128	; 0x80
 80071f4:	d841      	bhi.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	2b60      	cmp	r3, #96	; 0x60
 80071fa:	d02a      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	2b60      	cmp	r3, #96	; 0x60
 8007200:	d83b      	bhi.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	2b40      	cmp	r3, #64	; 0x40
 8007206:	d009      	beq.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d835      	bhi.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00c      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	2b20      	cmp	r3, #32
 8007218:	d012      	beq.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800721a:	e02e      	b.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800721c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff fb53 	bl	80068cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800722a:	f001 b89e 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800722e:	f107 0318 	add.w	r3, r7, #24
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fcb0 	bl	8006b98 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800723c:	f001 b895 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007240:	f107 030c 	add.w	r3, r7, #12
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff fe0d 	bl	8006e64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800724e:	f001 b88c 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007252:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007258:	f001 b887 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800725c:	4b61      	ldr	r3, [pc, #388]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007268:	d103      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800726a:	4b60      	ldr	r3, [pc, #384]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800726e:	f001 b87c 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007276:	f001 b878 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800727e:	f001 b874 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007286:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800728a:	430b      	orrs	r3, r1
 800728c:	d158      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800728e:	4b55      	ldr	r3, [pc, #340]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007290:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007298:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a0:	d03b      	beq.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a8:	d846      	bhi.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b0:	d02e      	beq.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b8:	d83e      	bhi.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c0:	d00b      	beq.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c8:	d836      	bhi.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00d      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d6:	d012      	beq.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80072d8:	e02e      	b.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff faf4 	bl	80068cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072e8:	f001 b83f 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ec:	f107 0318 	add.w	r3, r7, #24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff fc51 	bl	8006b98 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072fa:	f001 b836 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072fe:	f107 030c 	add.w	r3, r7, #12
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff fdae 	bl	8006e64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800730c:	f001 b82d 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007310:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007314:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007316:	f001 b828 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800731a:	4b32      	ldr	r3, [pc, #200]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007326:	d103      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007328:	4b30      	ldr	r3, [pc, #192]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800732a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800732c:	f001 b81d 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007334:	f001 b819 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800733c:	f001 b815 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007344:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007348:	430b      	orrs	r3, r1
 800734a:	d126      	bne.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800734c:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800734e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007356:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007358:	4b22      	ldr	r3, [pc, #136]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007364:	d106      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	2b00      	cmp	r3, #0
 800736a:	d103      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800736c:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
 8007370:	f000 bffb 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007374:	4b1b      	ldr	r3, [pc, #108]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800737c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007380:	d107      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007388:	d103      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800738a:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
 800738e:	f000 bfec 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	637b      	str	r3, [r7, #52]	; 0x34
 8007396:	f000 bfe8 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800739a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800739e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80073a2:	430b      	orrs	r3, r1
 80073a4:	d164      	bne.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073ac:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80073b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073b8:	d03d      	beq.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073c0:	d852      	bhi.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073c8:	d014      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d0:	d84a      	bhi.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01f      	beq.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073de:	d012      	beq.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80073e0:	e042      	b.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073e2:	bf00      	nop
 80073e4:	46020c00 	.word	0x46020c00
 80073e8:	0007a120 	.word	0x0007a120
 80073ec:	00f42400 	.word	0x00f42400
 80073f0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fa67 	bl	80068cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007402:	f000 bfb2 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007406:	f107 0318 	add.w	r3, r7, #24
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fbc4 	bl	8006b98 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007414:	f000 bfa9 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007418:	4bab      	ldr	r3, [pc, #684]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007424:	d103      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007426:	4ba9      	ldr	r3, [pc, #676]	; (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800742a:	f000 bf9e 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007432:	f000 bf9a 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007436:	4ba4      	ldr	r3, [pc, #656]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007442:	4ba1      	ldr	r3, [pc, #644]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	0e1b      	lsrs	r3, r3, #24
 8007448:	f003 030f 	and.w	r3, r3, #15
 800744c:	e006      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800744e:	4b9e      	ldr	r3, [pc, #632]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007454:	041b      	lsls	r3, r3, #16
 8007456:	0e1b      	lsrs	r3, r3, #24
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	4a9c      	ldr	r2, [pc, #624]	; (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800745e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007464:	f000 bf81 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800746c:	f000 bf7d 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007474:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007478:	430b      	orrs	r3, r1
 800747a:	d175      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800747c:	4b92      	ldr	r3, [pc, #584]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800747e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007486:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	2b00      	cmp	r3, #0
 800748c:	d15b      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800748e:	4b8e      	ldr	r3, [pc, #568]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007494:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007498:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074a0:	d034      	beq.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074a8:	d849      	bhi.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074b0:	d00b      	beq.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074b8:	d841      	bhi.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d016      	beq.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074c6:	d009      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80074c8:	e039      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff f9fc 	bl	80068cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80074d8:	f000 bf47 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074dc:	f107 0318 	add.w	r3, r7, #24
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fb59 	bl	8006b98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80074ea:	f000 bf3e 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80074ee:	4b76      	ldr	r3, [pc, #472]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074fa:	d103      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80074fc:	4b73      	ldr	r3, [pc, #460]	; (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074fe:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007500:	f000 bf33 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007508:	f000 bf2f 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800750c:	4b6e      	ldr	r3, [pc, #440]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8007518:	4b6b      	ldr	r3, [pc, #428]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	0e1b      	lsrs	r3, r3, #24
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	e006      	b.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8007524:	4b68      	ldr	r3, [pc, #416]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800752a:	041b      	lsls	r3, r3, #16
 800752c:	0e1b      	lsrs	r3, r3, #24
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	4a67      	ldr	r2, [pc, #412]	; (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800753a:	f000 bf16 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007542:	f000 bf12 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800754c:	d108      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800754e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff f9ba 	bl	80068cc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
 800755c:	f000 bf05 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
 8007564:	f000 bf01 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800756c:	1e51      	subs	r1, r2, #1
 800756e:	430b      	orrs	r3, r1
 8007570:	d136      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007572:	4b55      	ldr	r3, [pc, #340]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	2b00      	cmp	r3, #0
 8007582:	d104      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007584:	f7fe fafc 	bl	8005b80 <HAL_RCC_GetPCLK2Freq>
 8007588:	6378      	str	r0, [r7, #52]	; 0x34
 800758a:	f000 beee 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	2b01      	cmp	r3, #1
 8007592:	d104      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007594:	f7fe f9be 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007598:	6378      	str	r0, [r7, #52]	; 0x34
 800759a:	f000 bee6 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800759e:	4b4a      	ldr	r3, [pc, #296]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075aa:	d106      	bne.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d103      	bne.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 80075b2:	4b48      	ldr	r3, [pc, #288]	; (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
 80075b6:	f000 bed8 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80075ba:	4b43      	ldr	r3, [pc, #268]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d107      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d104      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80075ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
 80075d4:	f000 bec9 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	637b      	str	r3, [r7, #52]	; 0x34
 80075dc:	f000 bec5 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80075e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e4:	1e91      	subs	r1, r2, #2
 80075e6:	430b      	orrs	r3, r1
 80075e8:	d136      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80075ea:	4b37      	ldr	r3, [pc, #220]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075f0:	f003 030c 	and.w	r3, r3, #12
 80075f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075fc:	f7fe faac 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8007600:	6378      	str	r0, [r7, #52]	; 0x34
 8007602:	f000 beb2 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	2b04      	cmp	r3, #4
 800760a:	d104      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800760c:	f7fe f982 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007610:	6378      	str	r0, [r7, #52]	; 0x34
 8007612:	f000 beaa 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007616:	4b2c      	ldr	r3, [pc, #176]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800761e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007622:	d106      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	2b08      	cmp	r3, #8
 8007628:	d103      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800762a:	4b2a      	ldr	r3, [pc, #168]	; (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
 800762e:	f000 be9c 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007632:	4b25      	ldr	r3, [pc, #148]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b02      	cmp	r3, #2
 800763e:	d107      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	2b0c      	cmp	r3, #12
 8007644:	d104      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8007646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800764a:	637b      	str	r3, [r7, #52]	; 0x34
 800764c:	f000 be8d 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	637b      	str	r3, [r7, #52]	; 0x34
 8007654:	f000 be89 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765c:	1f11      	subs	r1, r2, #4
 800765e:	430b      	orrs	r3, r1
 8007660:	d13e      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007662:	4b19      	ldr	r3, [pc, #100]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007668:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800766c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	2b00      	cmp	r3, #0
 8007672:	d104      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007674:	f7fe fa70 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8007678:	6378      	str	r0, [r7, #52]	; 0x34
 800767a:	f000 be76 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	2b10      	cmp	r3, #16
 8007682:	d104      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007684:	f7fe f946 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007688:	6378      	str	r0, [r7, #52]	; 0x34
 800768a:	f000 be6e 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800768e:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800769a:	d106      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d103      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80076a2:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
 80076a6:	f000 be60 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80076aa:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d10f      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2b30      	cmp	r3, #48	; 0x30
 80076bc:	d10c      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 80076be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
 80076c4:	f000 be51 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80076c8:	46020c00 	.word	0x46020c00
 80076cc:	02dc6c00 	.word	0x02dc6c00
 80076d0:	08027960 	.word	0x08027960
 80076d4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	637b      	str	r3, [r7, #52]	; 0x34
 80076dc:	f000 be45 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80076e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e4:	f1a2 0108 	sub.w	r1, r2, #8
 80076e8:	430b      	orrs	r3, r1
 80076ea:	d136      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80076ec:	4b9f      	ldr	r3, [pc, #636]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80076ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80076fe:	f7fe fa2b 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8007702:	6378      	str	r0, [r7, #52]	; 0x34
 8007704:	f000 be31 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d104      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800770e:	f7fe f901 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007712:	6378      	str	r0, [r7, #52]	; 0x34
 8007714:	f000 be29 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007718:	4b94      	ldr	r3, [pc, #592]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007724:	d106      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	2b80      	cmp	r3, #128	; 0x80
 800772a:	d103      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800772c:	4b90      	ldr	r3, [pc, #576]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
 8007730:	f000 be1b 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007734:	4b8d      	ldr	r3, [pc, #564]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b02      	cmp	r3, #2
 8007740:	d107      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	2bc0      	cmp	r3, #192	; 0xc0
 8007746:	d104      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8007748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
 800774e:	f000 be0c 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	637b      	str	r3, [r7, #52]	; 0x34
 8007756:	f000 be08 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800775a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800775e:	f1a2 0110 	sub.w	r1, r2, #16
 8007762:	430b      	orrs	r3, r1
 8007764:	d139      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007766:	4b81      	ldr	r3, [pc, #516]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800776c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007770:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007778:	f7fe f9ee 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 800777c:	6378      	str	r0, [r7, #52]	; 0x34
 800777e:	f000 bdf4 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007788:	d104      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800778a:	f7fe f8c3 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 800778e:	6378      	str	r0, [r7, #52]	; 0x34
 8007790:	f000 bdeb 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007794:	4b75      	ldr	r3, [pc, #468]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800779c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a0:	d107      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a8:	d103      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 80077aa:	4b71      	ldr	r3, [pc, #452]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
 80077ae:	f000 bddc 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80077b2:	4b6e      	ldr	r3, [pc, #440]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d108      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077c6:	d104      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80077c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
 80077ce:	f000 bdcc 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34
 80077d6:	f000 bdc8 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80077da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077de:	f1a2 0120 	sub.w	r1, r2, #32
 80077e2:	430b      	orrs	r3, r1
 80077e4:	d158      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80077e6:	4b61      	ldr	r3, [pc, #388]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80077f8:	f7fe f9d6 	bl	8005ba8 <HAL_RCC_GetPCLK3Freq>
 80077fc:	6378      	str	r0, [r7, #52]	; 0x34
 80077fe:	f000 bdb4 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	2b01      	cmp	r3, #1
 8007806:	d104      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007808:	f7fe f884 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 800780c:	6378      	str	r0, [r7, #52]	; 0x34
 800780e:	f000 bdac 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007812:	4b56      	ldr	r3, [pc, #344]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800781a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800781e:	d106      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	2b02      	cmp	r3, #2
 8007824:	d103      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007826:	4b52      	ldr	r3, [pc, #328]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
 800782a:	f000 bd9e 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800782e:	4b4f      	ldr	r3, [pc, #316]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b02      	cmp	r3, #2
 800783a:	d107      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	2b03      	cmp	r3, #3
 8007840:	d104      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8007842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
 8007848:	f000 bd8f 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800784c:	4b47      	ldr	r3, [pc, #284]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	2b20      	cmp	r3, #32
 8007856:	d11b      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	2b04      	cmp	r3, #4
 800785c:	d118      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800785e:	4b43      	ldr	r3, [pc, #268]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800786a:	4b40      	ldr	r3, [pc, #256]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	0e1b      	lsrs	r3, r3, #24
 8007870:	f003 030f 	and.w	r3, r3, #15
 8007874:	e006      	b.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007876:	4b3d      	ldr	r3, [pc, #244]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	0e1b      	lsrs	r3, r3, #24
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	4a3b      	ldr	r2, [pc, #236]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800788a:	637b      	str	r3, [r7, #52]	; 0x34
 800788c:	f000 bd6d 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	637b      	str	r3, [r7, #52]	; 0x34
 8007894:	f000 bd69 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80078a0:	430b      	orrs	r3, r1
 80078a2:	d169      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80078a4:	4b31      	ldr	r3, [pc, #196]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80078aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80078ae:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b6:	d104      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078b8:	f7fe f82c 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 80078bc:	6378      	str	r0, [r7, #52]	; 0x34
 80078be:	f000 bd54 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c8:	d108      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ca:	f107 0318 	add.w	r3, r7, #24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff f962 	bl	8006b98 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	637b      	str	r3, [r7, #52]	; 0x34
 80078d8:	f000 bd47 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80078e2:	f7fe f91f 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 80078e6:	6378      	str	r0, [r7, #52]	; 0x34
 80078e8:	f000 bd3f 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80078f2:	d118      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80078f4:	4b1d      	ldr	r3, [pc, #116]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007900:	4b1a      	ldr	r3, [pc, #104]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	0f1b      	lsrs	r3, r3, #28
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	e006      	b.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800790c:	4b17      	ldr	r3, [pc, #92]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800790e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007912:	041b      	lsls	r3, r3, #16
 8007914:	0f1b      	lsrs	r3, r3, #28
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	4a16      	ldr	r2, [pc, #88]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800791c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
 8007922:	f000 bd22 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007926:	4b11      	ldr	r3, [pc, #68]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007932:	d107      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800793a:	d103      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800793c:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
 8007940:	f000 bd13 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007944:	4b09      	ldr	r3, [pc, #36]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800794c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007950:	d107      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007958:	d103      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800795a:	4b05      	ldr	r3, [pc, #20]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
 800795e:	f000 bd04 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
 8007966:	f000 bd00 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800796a:	bf00      	nop
 800796c:	46020c00 	.word	0x46020c00
 8007970:	00f42400 	.word	0x00f42400
 8007974:	08027960 	.word	0x08027960
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800797c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007980:	430b      	orrs	r3, r1
 8007982:	d14e      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007984:	4ba8      	ldr	r3, [pc, #672]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007986:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	2b04      	cmp	r3, #4
 8007994:	d841      	bhi.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007996:	a201      	add	r2, pc, #4	; (adr r2, 800799c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	080079d5 	.word	0x080079d5
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079c3 	.word	0x080079c3
 80079a8:	080079df 	.word	0x080079df
 80079ac:	080079e9 	.word	0x080079e9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe ff89 	bl	80068cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079be:	f000 bcd4 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c2:	f107 030c 	add.w	r3, r7, #12
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fa4c 	bl	8006e64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079d0:	f000 bccb 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80079d4:	f7fe f8a6 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 80079d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079da:	f000 bcc6 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80079de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079e4:	f000 bcc1 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079e8:	4b8f      	ldr	r3, [pc, #572]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d005      	beq.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80079f4:	4b8c      	ldr	r3, [pc, #560]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	0e1b      	lsrs	r3, r3, #24
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	e006      	b.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007a00:	4b89      	ldr	r3, [pc, #548]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a06:	041b      	lsls	r3, r3, #16
 8007a08:	0e1b      	lsrs	r3, r3, #24
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	4a87      	ldr	r2, [pc, #540]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a16:	f000 bca8 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a1e:	f000 bca4 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a26:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007a2a:	430b      	orrs	r3, r1
 8007a2c:	d15d      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007a2e:	4b7e      	ldr	r3, [pc, #504]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a34:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007a38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a40:	d036      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a48:	d84b      	bhi.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a50:	d029      	beq.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a58:	d843      	bhi.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a60:	d013      	beq.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a68:	d83b      	bhi.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d015      	beq.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a76:	d134      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe ff25 	bl	80068cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a86:	f000 bc70 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a8a:	f107 030c 	add.w	r3, r7, #12
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff f9e8 	bl	8006e64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a98:	f000 bc67 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007a9c:	f7fe f842 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8007aa0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007aa2:	f000 bc62 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007aa6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aac:	f000 bc5d 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ab0:	4b5d      	ldr	r3, [pc, #372]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007abc:	4b5a      	ldr	r3, [pc, #360]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	0e1b      	lsrs	r3, r3, #24
 8007ac2:	f003 030f 	and.w	r3, r3, #15
 8007ac6:	e006      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007ac8:	4b57      	ldr	r3, [pc, #348]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	0e1b      	lsrs	r3, r3, #24
 8007ad2:	f003 030f 	and.w	r3, r3, #15
 8007ad6:	4a55      	ldr	r2, [pc, #340]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007adc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ade:	f000 bc44 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ae6:	f000 bc40 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aee:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007af2:	430b      	orrs	r3, r1
 8007af4:	d14a      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007af6:	4b4c      	ldr	r3, [pc, #304]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007afc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b00:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7fe f826 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8007b0c:	6378      	str	r0, [r7, #52]	; 0x34
 8007b0e:	f000 bc2c 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b18:	d104      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b1a:	f7fd fefb 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007b1e:	6378      	str	r0, [r7, #52]	; 0x34
 8007b20:	f000 bc23 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007b24:	4b40      	ldr	r3, [pc, #256]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b30:	d107      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b38:	d103      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007b3a:	4b3d      	ldr	r3, [pc, #244]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3e:	f000 bc14 	b.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007b42:	4b39      	ldr	r3, [pc, #228]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	d11b      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b54:	d117      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b56:	4b34      	ldr	r3, [pc, #208]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007b62:	4b31      	ldr	r3, [pc, #196]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	0e1b      	lsrs	r3, r3, #24
 8007b68:	f003 030f 	and.w	r3, r3, #15
 8007b6c:	e006      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007b6e:	4b2e      	ldr	r3, [pc, #184]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	0e1b      	lsrs	r3, r3, #24
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	4a2b      	ldr	r2, [pc, #172]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
 8007b84:	e3f1      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
 8007b8a:	e3ee      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b90:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007b94:	430b      	orrs	r3, r1
 8007b96:	d14d      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007b98:	4b23      	ldr	r3, [pc, #140]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ba2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007baa:	f7fd ffd5 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8007bae:	6378      	str	r0, [r7, #52]	; 0x34
 8007bb0:	e3db      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb8:	d103      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bba:	f7fd feab 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007bbe:	6378      	str	r0, [r7, #52]	; 0x34
 8007bc0:	e3d3      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007bc2:	4b19      	ldr	r3, [pc, #100]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bce:	d106      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd6:	d102      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007bd8:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
 8007bdc:	e3c5      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	d11b      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bf0:	d117      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	0e1b      	lsrs	r3, r3, #24
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	e006      	b.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007c0a:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c10:	041b      	lsls	r3, r3, #16
 8007c12:	0e1b      	lsrs	r3, r3, #24
 8007c14:	f003 030f 	and.w	r3, r3, #15
 8007c18:	4a04      	ldr	r2, [pc, #16]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c20:	e3a3      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
 8007c26:	e3a0      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007c28:	46020c00 	.word	0x46020c00
 8007c2c:	08027960 	.word	0x08027960
 8007c30:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c38:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	d148      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007c40:	4b9d      	ldr	r3, [pc, #628]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c4a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c50:	d024      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	2bc0      	cmp	r3, #192	; 0xc0
 8007c56:	d839      	bhi.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5a:	2b80      	cmp	r3, #128	; 0x80
 8007c5c:	d00d      	beq.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	2b80      	cmp	r3, #128	; 0x80
 8007c62:	d833      	bhi.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	d011      	beq.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007c70:	e02c      	b.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007c72:	f7fd ff99 	bl	8005ba8 <HAL_RCC_GetPCLK3Freq>
 8007c76:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c78:	e377      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c7a:	4b8f      	ldr	r3, [pc, #572]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c86:	d102      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007c88:	4b8c      	ldr	r3, [pc, #560]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007c8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c8c:	e36d      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c92:	e36a      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007c94:	f7fd fe3e 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007c98:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c9a:	e366      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007c9c:	4b86      	ldr	r3, [pc, #536]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007ca8:	4b83      	ldr	r3, [pc, #524]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	0f1b      	lsrs	r3, r3, #28
 8007cae:	f003 030f 	and.w	r3, r3, #15
 8007cb2:	e006      	b.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007cb4:	4b80      	ldr	r3, [pc, #512]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cba:	041b      	lsls	r3, r3, #16
 8007cbc:	0f1b      	lsrs	r3, r3, #28
 8007cbe:	f003 030f 	and.w	r3, r3, #15
 8007cc2:	4a7f      	ldr	r2, [pc, #508]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cca:	e34e      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cd0:	e34b      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd6:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	d147      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007cde:	4b76      	ldr	r3, [pc, #472]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ce4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ce8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cf0:	f7fd ff32 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8007cf4:	6378      	str	r0, [r7, #52]	; 0x34
 8007cf6:	e338      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cfe:	d103      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d00:	f7fd fe08 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007d04:	6378      	str	r0, [r7, #52]	; 0x34
 8007d06:	e330      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007d08:	4b6b      	ldr	r3, [pc, #428]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d14:	d106      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d1c:	d102      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007d1e:	4b67      	ldr	r3, [pc, #412]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
 8007d22:	e322      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007d24:	4b64      	ldr	r3, [pc, #400]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0320 	and.w	r3, r3, #32
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d11b      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d36:	d117      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d38:	4b5f      	ldr	r3, [pc, #380]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007d44:	4b5c      	ldr	r3, [pc, #368]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	0e1b      	lsrs	r3, r3, #24
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	e006      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007d50:	4b59      	ldr	r3, [pc, #356]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d56:	041b      	lsls	r3, r3, #16
 8007d58:	0e1b      	lsrs	r3, r3, #24
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	4a58      	ldr	r2, [pc, #352]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d64:	637b      	str	r3, [r7, #52]	; 0x34
 8007d66:	e300      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6c:	e2fd      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d72:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007d76:	430b      	orrs	r3, r1
 8007d78:	d15b      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007d7a:	4b4f      	ldr	r3, [pc, #316]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d84:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d117      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d8c:	4b4a      	ldr	r3, [pc, #296]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007d98:	4b47      	ldr	r3, [pc, #284]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	0e1b      	lsrs	r3, r3, #24
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	e006      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007da4:	4b44      	ldr	r3, [pc, #272]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007daa:	041b      	lsls	r3, r3, #16
 8007dac:	0e1b      	lsrs	r3, r3, #24
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	4a43      	ldr	r2, [pc, #268]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dba:	e2d6      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007dbc:	4b3e      	ldr	r3, [pc, #248]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dca:	d112      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd2:	d10e      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dd4:	4b38      	ldr	r3, [pc, #224]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de2:	d102      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007de4:	23fa      	movs	r3, #250	; 0xfa
 8007de6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007de8:	e2bf      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007dea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007dee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007df0:	e2bb      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007df2:	4b31      	ldr	r3, [pc, #196]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfe:	d106      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e06:	d102      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8007e08:	4b2c      	ldr	r3, [pc, #176]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0c:	e2ad      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007e0e:	4b2a      	ldr	r3, [pc, #168]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d107      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e22:	d103      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2a:	e29e      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e30:	e29b      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e36:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	d162      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007e3e:	4b1e      	ldr	r3, [pc, #120]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e48:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d117      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e50:	4b19      	ldr	r3, [pc, #100]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007e5c:	4b16      	ldr	r3, [pc, #88]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	0e1b      	lsrs	r3, r3, #24
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	e006      	b.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007e68:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e6e:	041b      	lsls	r3, r3, #16
 8007e70:	0e1b      	lsrs	r3, r3, #24
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	4a12      	ldr	r2, [pc, #72]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e7e:	e274      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007e80:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e8e:	d119      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e96:	d115      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ea6:	d102      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007ea8:	23fa      	movs	r3, #250	; 0xfa
 8007eaa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007eac:	e25d      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007eae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007eb4:	e259      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007eb6:	bf00      	nop
 8007eb8:	46020c00 	.word	0x46020c00
 8007ebc:	00f42400 	.word	0x00f42400
 8007ec0:	08027960 	.word	0x08027960
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007ec4:	4b9d      	ldr	r3, [pc, #628]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed0:	d106      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ed8:	d102      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8007eda:	4b99      	ldr	r3, [pc, #612]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ede:	e244      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007ee0:	4b96      	ldr	r3, [pc, #600]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007ee2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d107      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ef4:	d103      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8007ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
 8007efc:	e235      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
 8007f02:	e232      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f08:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	d147      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007f10:	4b8a      	ldr	r3, [pc, #552]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f16:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007f1a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d103      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f22:	f7fd fe19 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8007f26:	6378      	str	r0, [r7, #52]	; 0x34
 8007f28:	e21f      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007f2a:	4b84      	ldr	r3, [pc, #528]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f38:	d112      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f40:	d10e      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f42:	4b7e      	ldr	r3, [pc, #504]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f50:	d102      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8007f52:	23fa      	movs	r3, #250	; 0xfa
 8007f54:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f56:	e208      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007f58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f5e:	e204      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007f60:	4b76      	ldr	r3, [pc, #472]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6c:	d106      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f74:	d102      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8007f76:	4b72      	ldr	r3, [pc, #456]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007f78:	637b      	str	r3, [r7, #52]	; 0x34
 8007f7a:	e1f6      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007f7c:	4b6f      	ldr	r3, [pc, #444]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d107      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f90:	d103      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8007f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f96:	637b      	str	r3, [r7, #52]	; 0x34
 8007f98:	e1e7      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9e:	e1e4      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa4:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	d12d      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007fac:	4b63      	ldr	r3, [pc, #396]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fb2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007fb6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007fb8:	4b60      	ldr	r3, [pc, #384]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fc4:	d105      	bne.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8007fcc:	4b5c      	ldr	r3, [pc, #368]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007fce:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd0:	e1cb      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fd8:	d107      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fc74 	bl	80068cc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe8:	e1bf      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff0:	d107      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ff2:	f107 0318 	add.w	r3, r7, #24
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe fdce 	bl	8006b98 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8008000:	e1b3      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	637b      	str	r3, [r7, #52]	; 0x34
 8008006:	e1b0      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800800c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008010:	430b      	orrs	r3, r1
 8008012:	d14d      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008014:	4b49      	ldr	r3, [pc, #292]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800801a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800801e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008026:	d028      	beq.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800802e:	d83c      	bhi.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008036:	d013      	beq.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800803e:	d834      	bhi.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800804c:	d004      	beq.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800804e:	e02c      	b.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008050:	f7fd fd96 	bl	8005b80 <HAL_RCC_GetPCLK2Freq>
 8008054:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008056:	e188      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008058:	f7fd fc5c 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 800805c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800805e:	e184      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008060:	4b36      	ldr	r3, [pc, #216]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806c:	d102      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800806e:	4b34      	ldr	r3, [pc, #208]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008070:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008072:	e17a      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008078:	e177      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800807a:	4b30      	ldr	r3, [pc, #192]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d005      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8008086:	4b2d      	ldr	r3, [pc, #180]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	0e1b      	lsrs	r3, r3, #24
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	e006      	b.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8008092:	4b2a      	ldr	r3, [pc, #168]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008094:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008098:	041b      	lsls	r3, r3, #16
 800809a:	0e1b      	lsrs	r3, r3, #24
 800809c:	f003 030f 	and.w	r3, r3, #15
 80080a0:	4a28      	ldr	r2, [pc, #160]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 80080a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080a8:	e15f      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080ae:	e15c      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80080b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b4:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80080b8:	430b      	orrs	r3, r1
 80080ba:	d154      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80080bc:	4b1f      	ldr	r3, [pc, #124]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ce:	d028      	beq.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080d6:	d843      	bhi.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080de:	d013      	beq.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080e6:	d83b      	bhi.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d004      	beq.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f4:	d004      	beq.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80080f6:	e033      	b.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80080f8:	f7fd fd2e 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 80080fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80080fe:	e134      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008100:	f7fd fc08 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8008104:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008106:	e130      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008108:	4b0c      	ldr	r3, [pc, #48]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008114:	d102      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008116:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800811a:	e126      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008120:	e123      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008122:	4b06      	ldr	r3, [pc, #24]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800812e:	4b03      	ldr	r3, [pc, #12]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	0e1b      	lsrs	r3, r3, #24
 8008134:	f003 030f 	and.w	r3, r3, #15
 8008138:	e00d      	b.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800813a:	bf00      	nop
 800813c:	46020c00 	.word	0x46020c00
 8008140:	00f42400 	.word	0x00f42400
 8008144:	08027960 	.word	0x08027960
 8008148:	4b8a      	ldr	r3, [pc, #552]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800814a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800814e:	041b      	lsls	r3, r3, #16
 8008150:	0e1b      	lsrs	r3, r3, #24
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	4a88      	ldr	r2, [pc, #544]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800815e:	e104      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008164:	e101      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800816a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800816e:	430b      	orrs	r3, r1
 8008170:	d16e      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008172:	4b80      	ldr	r3, [pc, #512]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008178:	f003 0318 	and.w	r3, r3, #24
 800817c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	2b18      	cmp	r3, #24
 8008182:	d862      	bhi.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8008184:	a201      	add	r2, pc, #4	; (adr r2, 800818c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	080081f1 	.word	0x080081f1
 8008190:	0800824b 	.word	0x0800824b
 8008194:	0800824b 	.word	0x0800824b
 8008198:	0800824b 	.word	0x0800824b
 800819c:	0800824b 	.word	0x0800824b
 80081a0:	0800824b 	.word	0x0800824b
 80081a4:	0800824b 	.word	0x0800824b
 80081a8:	0800824b 	.word	0x0800824b
 80081ac:	080081f9 	.word	0x080081f9
 80081b0:	0800824b 	.word	0x0800824b
 80081b4:	0800824b 	.word	0x0800824b
 80081b8:	0800824b 	.word	0x0800824b
 80081bc:	0800824b 	.word	0x0800824b
 80081c0:	0800824b 	.word	0x0800824b
 80081c4:	0800824b 	.word	0x0800824b
 80081c8:	0800824b 	.word	0x0800824b
 80081cc:	08008201 	.word	0x08008201
 80081d0:	0800824b 	.word	0x0800824b
 80081d4:	0800824b 	.word	0x0800824b
 80081d8:	0800824b 	.word	0x0800824b
 80081dc:	0800824b 	.word	0x0800824b
 80081e0:	0800824b 	.word	0x0800824b
 80081e4:	0800824b 	.word	0x0800824b
 80081e8:	0800824b 	.word	0x0800824b
 80081ec:	0800821b 	.word	0x0800821b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80081f0:	f7fd fcda 	bl	8005ba8 <HAL_RCC_GetPCLK3Freq>
 80081f4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081f6:	e0b8      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80081f8:	f7fd fb8c 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 80081fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081fe:	e0b4      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008200:	4b5c      	ldr	r3, [pc, #368]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800820c:	d102      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800820e:	4b5b      	ldr	r3, [pc, #364]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8008210:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008212:	e0aa      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008218:	e0a7      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800821a:	4b56      	ldr	r3, [pc, #344]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8008226:	4b53      	ldr	r3, [pc, #332]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	0e1b      	lsrs	r3, r3, #24
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	e006      	b.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8008232:	4b50      	ldr	r3, [pc, #320]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008238:	041b      	lsls	r3, r3, #16
 800823a:	0e1b      	lsrs	r3, r3, #24
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	4a4d      	ldr	r2, [pc, #308]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008246:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008248:	e08f      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800824e:	e08c      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008254:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008258:	430b      	orrs	r3, r1
 800825a:	d14c      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800825c:	4b45      	ldr	r3, [pc, #276]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800825e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008262:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008266:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800826e:	d013      	beq.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008276:	d83b      	bhi.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800827e:	d013      	beq.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008286:	d833      	bhi.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	2b00      	cmp	r3, #0
 800828c:	d014      	beq.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008294:	d014      	beq.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008296:	e02b      	b.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008298:	f107 0318 	add.w	r3, r7, #24
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fc7b 	bl	8006b98 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082a6:	e060      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fe fb0d 	bl	80068cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082b6:	e058      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80082b8:	f7fd fb2c 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 80082bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082be:	e054      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082c0:	4b2c      	ldr	r3, [pc, #176]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d005      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80082cc:	4b29      	ldr	r3, [pc, #164]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	0e1b      	lsrs	r3, r3, #24
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	e006      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80082d8:	4b26      	ldr	r3, [pc, #152]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082de:	041b      	lsls	r3, r3, #16
 80082e0:	0e1b      	lsrs	r3, r3, #24
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	4a24      	ldr	r2, [pc, #144]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80082e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082ee:	e03c      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082f4:	e039      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80082f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fa:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80082fe:	430b      	orrs	r3, r1
 8008300:	d131      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008302:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800830c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800830e:	4b19      	ldr	r3, [pc, #100]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b02      	cmp	r3, #2
 800831a:	d106      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	2b00      	cmp	r3, #0
 8008320:	d103      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8008322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008326:	637b      	str	r3, [r7, #52]	; 0x34
 8008328:	e01f      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800832a:	4b12      	ldr	r3, [pc, #72]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800832c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008338:	d112      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008340:	d10e      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008342:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800834c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008350:	d102      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8008352:	23fa      	movs	r3, #250	; 0xfa
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008356:	e008      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008358:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800835e:	e004      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
 8008364:	e001      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800836c:	4618      	mov	r0, r3
 800836e:	3738      	adds	r7, #56	; 0x38
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	46020c00 	.word	0x46020c00
 8008378:	08027960 	.word	0x08027960
 800837c:	00f42400 	.word	0x00f42400

08008380 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008388:	4b47      	ldr	r3, [pc, #284]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a46      	ldr	r2, [pc, #280]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 800838e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008392:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008394:	f7f9 feea 	bl	800216c <HAL_GetTick>
 8008398:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800839a:	e008      	b.n	80083ae <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800839c:	f7f9 fee6 	bl	800216c <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d901      	bls.n	80083ae <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e077      	b.n	800849e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083ae:	4b3e      	ldr	r3, [pc, #248]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1f0      	bne.n	800839c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80083ba:	4b3b      	ldr	r3, [pc, #236]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 80083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80083c2:	f023 0303 	bic.w	r3, r3, #3
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6811      	ldr	r1, [r2, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6852      	ldr	r2, [r2, #4]
 80083ce:	3a01      	subs	r2, #1
 80083d0:	0212      	lsls	r2, r2, #8
 80083d2:	430a      	orrs	r2, r1
 80083d4:	4934      	ldr	r1, [pc, #208]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 80083da:	4b33      	ldr	r3, [pc, #204]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 80083dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083de:	4b33      	ldr	r3, [pc, #204]	; (80084ac <RCCEx_PLL2_Config+0x12c>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6892      	ldr	r2, [r2, #8]
 80083e6:	3a01      	subs	r2, #1
 80083e8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	68d2      	ldr	r2, [r2, #12]
 80083f0:	3a01      	subs	r2, #1
 80083f2:	0252      	lsls	r2, r2, #9
 80083f4:	b292      	uxth	r2, r2
 80083f6:	4311      	orrs	r1, r2
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6912      	ldr	r2, [r2, #16]
 80083fc:	3a01      	subs	r2, #1
 80083fe:	0412      	lsls	r2, r2, #16
 8008400:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008404:	4311      	orrs	r1, r2
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6952      	ldr	r2, [r2, #20]
 800840a:	3a01      	subs	r2, #1
 800840c:	0612      	lsls	r2, r2, #24
 800840e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008412:	430a      	orrs	r2, r1
 8008414:	4924      	ldr	r1, [pc, #144]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 8008416:	4313      	orrs	r3, r2
 8008418:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800841a:	4b23      	ldr	r3, [pc, #140]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	f023 020c 	bic.w	r2, r3, #12
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	4920      	ldr	r1, [pc, #128]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 8008428:	4313      	orrs	r3, r2
 800842a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800842c:	4b1e      	ldr	r3, [pc, #120]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 800842e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	491c      	ldr	r1, [pc, #112]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 8008436:	4313      	orrs	r3, r2
 8008438:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800843a:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	4a1a      	ldr	r2, [pc, #104]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 8008440:	f023 0310 	bic.w	r3, r3, #16
 8008444:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008446:	4b18      	ldr	r3, [pc, #96]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800844e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	69d2      	ldr	r2, [r2, #28]
 8008456:	00d2      	lsls	r2, r2, #3
 8008458:	4913      	ldr	r1, [pc, #76]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 800845a:	4313      	orrs	r3, r2
 800845c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800845e:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 8008460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008462:	4a11      	ldr	r2, [pc, #68]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 8008464:	f043 0310 	orr.w	r3, r3, #16
 8008468:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800846a:	4b0f      	ldr	r3, [pc, #60]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a0e      	ldr	r2, [pc, #56]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 8008470:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008474:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008476:	f7f9 fe79 	bl	800216c <HAL_GetTick>
 800847a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800847c:	e008      	b.n	8008490 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800847e:	f7f9 fe75 	bl	800216c <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d901      	bls.n	8008490 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e006      	b.n	800849e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008490:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <RCCEx_PLL2_Config+0x128>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0f0      	beq.n	800847e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800849c:	2300      	movs	r3, #0

}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	46020c00 	.word	0x46020c00
 80084ac:	80800000 	.word	0x80800000

080084b0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80084b8:	4b47      	ldr	r3, [pc, #284]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a46      	ldr	r2, [pc, #280]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 80084be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80084c4:	f7f9 fe52 	bl	800216c <HAL_GetTick>
 80084c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084ca:	e008      	b.n	80084de <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084cc:	f7f9 fe4e 	bl	800216c <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e077      	b.n	80085ce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084de:	4b3e      	ldr	r3, [pc, #248]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f0      	bne.n	80084cc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80084ea:	4b3b      	ldr	r3, [pc, #236]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6811      	ldr	r1, [r2, #0]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6852      	ldr	r2, [r2, #4]
 80084fe:	3a01      	subs	r2, #1
 8008500:	0212      	lsls	r2, r2, #8
 8008502:	430a      	orrs	r2, r1
 8008504:	4934      	ldr	r1, [pc, #208]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 8008506:	4313      	orrs	r3, r2
 8008508:	630b      	str	r3, [r1, #48]	; 0x30
 800850a:	4b33      	ldr	r3, [pc, #204]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 800850c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800850e:	4b33      	ldr	r3, [pc, #204]	; (80085dc <RCCEx_PLL3_Config+0x12c>)
 8008510:	4013      	ands	r3, r2
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	6892      	ldr	r2, [r2, #8]
 8008516:	3a01      	subs	r2, #1
 8008518:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68d2      	ldr	r2, [r2, #12]
 8008520:	3a01      	subs	r2, #1
 8008522:	0252      	lsls	r2, r2, #9
 8008524:	b292      	uxth	r2, r2
 8008526:	4311      	orrs	r1, r2
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6912      	ldr	r2, [r2, #16]
 800852c:	3a01      	subs	r2, #1
 800852e:	0412      	lsls	r2, r2, #16
 8008530:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008534:	4311      	orrs	r1, r2
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6952      	ldr	r2, [r2, #20]
 800853a:	3a01      	subs	r2, #1
 800853c:	0612      	lsls	r2, r2, #24
 800853e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008542:	430a      	orrs	r2, r1
 8008544:	4924      	ldr	r1, [pc, #144]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 8008546:	4313      	orrs	r3, r2
 8008548:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800854a:	4b23      	ldr	r3, [pc, #140]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	f023 020c 	bic.w	r2, r3, #12
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	4920      	ldr	r1, [pc, #128]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 8008558:	4313      	orrs	r3, r2
 800855a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800855c:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 800855e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	491c      	ldr	r1, [pc, #112]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 8008566:	4313      	orrs	r3, r2
 8008568:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800856a:	4b1b      	ldr	r3, [pc, #108]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 800856c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856e:	4a1a      	ldr	r2, [pc, #104]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 8008570:	f023 0310 	bic.w	r3, r3, #16
 8008574:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008576:	4b18      	ldr	r3, [pc, #96]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 8008578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800857a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800857e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	69d2      	ldr	r2, [r2, #28]
 8008586:	00d2      	lsls	r2, r2, #3
 8008588:	4913      	ldr	r1, [pc, #76]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 800858a:	4313      	orrs	r3, r2
 800858c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800858e:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	4a11      	ldr	r2, [pc, #68]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 8008594:	f043 0310 	orr.w	r3, r3, #16
 8008598:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800859a:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a0e      	ldr	r2, [pc, #56]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 80085a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80085a6:	f7f9 fde1 	bl	800216c <HAL_GetTick>
 80085aa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085ac:	e008      	b.n	80085c0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085ae:	f7f9 fddd 	bl	800216c <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d901      	bls.n	80085c0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e006      	b.n	80085ce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <RCCEx_PLL3_Config+0x128>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0f0      	beq.n	80085ae <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	46020c00 	.word	0x46020c00
 80085dc:	80800000 	.word	0x80800000

080085e0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e03e      	b.n	8008674 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7f9 fb8a 	bl	8001d24 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3308      	adds	r3, #8
 8008618:	4619      	mov	r1, r3
 800861a:	4610      	mov	r0, r2
 800861c:	f001 f8c4 	bl	80097a8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6818      	ldr	r0, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	461a      	mov	r2, r3
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	f001 f98c 	bl	8009948 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6858      	ldr	r0, [r3, #4]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	f001 f9d5 	bl	80099ec <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	6892      	ldr	r2, [r2, #8]
 800864a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	6892      	ldr	r2, [r2, #8]
 8008656:	f041 0101 	orr.w	r1, r1, #1
 800865a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <HAL_SRAM_Init+0x9c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a06      	ldr	r2, [pc, #24]	; (800867c <HAL_SRAM_Init+0x9c>)
 8008664:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008668:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	420d0400 	.word	0x420d0400

08008680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e049      	b.n	8008726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f841 	bl	800872e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3304      	adds	r3, #4
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	f000 fa88 	bl	8008bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	d001      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e072      	b.n	8008842 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a35      	ldr	r2, [pc, #212]	; (8008850 <HAL_TIM_Base_Start_IT+0x10c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d040      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a34      	ldr	r2, [pc, #208]	; (8008854 <HAL_TIM_Base_Start_IT+0x110>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d03b      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008790:	d036      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800879a:	d031      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a2d      	ldr	r2, [pc, #180]	; (8008858 <HAL_TIM_Base_Start_IT+0x114>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d02c      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a2c      	ldr	r2, [pc, #176]	; (800885c <HAL_TIM_Base_Start_IT+0x118>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d027      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a2a      	ldr	r2, [pc, #168]	; (8008860 <HAL_TIM_Base_Start_IT+0x11c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d022      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a29      	ldr	r2, [pc, #164]	; (8008864 <HAL_TIM_Base_Start_IT+0x120>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d01d      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a27      	ldr	r2, [pc, #156]	; (8008868 <HAL_TIM_Base_Start_IT+0x124>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d018      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a26      	ldr	r2, [pc, #152]	; (800886c <HAL_TIM_Base_Start_IT+0x128>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d013      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a24      	ldr	r2, [pc, #144]	; (8008870 <HAL_TIM_Base_Start_IT+0x12c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00e      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a23      	ldr	r2, [pc, #140]	; (8008874 <HAL_TIM_Base_Start_IT+0x130>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d009      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a21      	ldr	r2, [pc, #132]	; (8008878 <HAL_TIM_Base_Start_IT+0x134>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0xbc>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a20      	ldr	r2, [pc, #128]	; (800887c <HAL_TIM_Base_Start_IT+0x138>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d115      	bne.n	800882c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	4b1e      	ldr	r3, [pc, #120]	; (8008880 <HAL_TIM_Base_Start_IT+0x13c>)
 8008808:	4013      	ands	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b06      	cmp	r3, #6
 8008810:	d015      	beq.n	800883e <HAL_TIM_Base_Start_IT+0xfa>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008818:	d011      	beq.n	800883e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0201 	orr.w	r2, r2, #1
 8008828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800882a:	e008      	b.n	800883e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	e000      	b.n	8008840 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800883e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	40012c00 	.word	0x40012c00
 8008854:	50012c00 	.word	0x50012c00
 8008858:	40000400 	.word	0x40000400
 800885c:	50000400 	.word	0x50000400
 8008860:	40000800 	.word	0x40000800
 8008864:	50000800 	.word	0x50000800
 8008868:	40000c00 	.word	0x40000c00
 800886c:	50000c00 	.word	0x50000c00
 8008870:	40013400 	.word	0x40013400
 8008874:	50013400 	.word	0x50013400
 8008878:	40014000 	.word	0x40014000
 800887c:	50014000 	.word	0x50014000
 8008880:	00010007 	.word	0x00010007

08008884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b02      	cmp	r3, #2
 8008898:	d122      	bne.n	80088e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f003 0302 	and.w	r3, r3, #2
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d11b      	bne.n	80088e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f06f 0202 	mvn.w	r2, #2
 80088b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f965 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 80088cc:	e005      	b.n	80088da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f957 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f968 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d122      	bne.n	8008934 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	d11b      	bne.n	8008934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f06f 0204 	mvn.w	r2, #4
 8008904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2202      	movs	r2, #2
 800890a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f93b 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 8008920:	e005      	b.n	800892e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f92d 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f93e 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	f003 0308 	and.w	r3, r3, #8
 800893e:	2b08      	cmp	r3, #8
 8008940:	d122      	bne.n	8008988 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f003 0308 	and.w	r3, r3, #8
 800894c:	2b08      	cmp	r3, #8
 800894e:	d11b      	bne.n	8008988 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f06f 0208 	mvn.w	r2, #8
 8008958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2204      	movs	r2, #4
 800895e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f911 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 8008974:	e005      	b.n	8008982 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f903 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f914 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f003 0310 	and.w	r3, r3, #16
 8008992:	2b10      	cmp	r3, #16
 8008994:	d122      	bne.n	80089dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b10      	cmp	r3, #16
 80089a2:	d11b      	bne.n	80089dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f06f 0210 	mvn.w	r2, #16
 80089ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2208      	movs	r2, #8
 80089b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f8e7 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 80089c8:	e005      	b.n	80089d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f8d9 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f8ea 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d10e      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d107      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 0201 	mvn.w	r2, #1
 8008a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7f8 ff68 	bl	80018d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a12:	2b80      	cmp	r3, #128	; 0x80
 8008a14:	d10e      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a20:	2b80      	cmp	r3, #128	; 0x80
 8008a22:	d107      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f9d4 	bl	8008ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a42:	d10e      	bne.n	8008a62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a4e:	2b80      	cmp	r3, #128	; 0x80
 8008a50:	d107      	bne.n	8008a62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f9c7 	bl	8008df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6c:	2b40      	cmp	r3, #64	; 0x40
 8008a6e:	d10e      	bne.n	8008a8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7a:	2b40      	cmp	r3, #64	; 0x40
 8008a7c:	d107      	bne.n	8008a8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f898 	bl	8008bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	d10e      	bne.n	8008aba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f003 0320 	and.w	r3, r3, #32
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	d107      	bne.n	8008aba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f06f 0220 	mvn.w	r2, #32
 8008ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f987 	bl	8008dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac8:	d10f      	bne.n	8008aea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ad8:	d107      	bne.n	8008aea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f98d 	bl	8008e04 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008af8:	d10f      	bne.n	8008b1a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b08:	d107      	bne.n	8008b1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f97f 	bl	8008e18 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b28:	d10f      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b38:	d107      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f971 	bl	8008e2c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b58:	d10f      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b68:	d107      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f963 	bl	8008e40 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a68      	ldr	r2, [pc, #416]	; (8008d88 <TIM_Base_SetConfig+0x1b4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d02b      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a67      	ldr	r2, [pc, #412]	; (8008d8c <TIM_Base_SetConfig+0x1b8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d027      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bfa:	d023      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c02:	d01f      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a62      	ldr	r2, [pc, #392]	; (8008d90 <TIM_Base_SetConfig+0x1bc>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d01b      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a61      	ldr	r2, [pc, #388]	; (8008d94 <TIM_Base_SetConfig+0x1c0>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d017      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a60      	ldr	r2, [pc, #384]	; (8008d98 <TIM_Base_SetConfig+0x1c4>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d013      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a5f      	ldr	r2, [pc, #380]	; (8008d9c <TIM_Base_SetConfig+0x1c8>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d00f      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a5e      	ldr	r2, [pc, #376]	; (8008da0 <TIM_Base_SetConfig+0x1cc>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00b      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a5d      	ldr	r2, [pc, #372]	; (8008da4 <TIM_Base_SetConfig+0x1d0>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d007      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a5c      	ldr	r2, [pc, #368]	; (8008da8 <TIM_Base_SetConfig+0x1d4>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d003      	beq.n	8008c44 <TIM_Base_SetConfig+0x70>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a5b      	ldr	r2, [pc, #364]	; (8008dac <TIM_Base_SetConfig+0x1d8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d108      	bne.n	8008c56 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a4b      	ldr	r2, [pc, #300]	; (8008d88 <TIM_Base_SetConfig+0x1b4>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d043      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a4a      	ldr	r2, [pc, #296]	; (8008d8c <TIM_Base_SetConfig+0x1b8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d03f      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c6c:	d03b      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c74:	d037      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a45      	ldr	r2, [pc, #276]	; (8008d90 <TIM_Base_SetConfig+0x1bc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d033      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a44      	ldr	r2, [pc, #272]	; (8008d94 <TIM_Base_SetConfig+0x1c0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d02f      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a43      	ldr	r2, [pc, #268]	; (8008d98 <TIM_Base_SetConfig+0x1c4>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d02b      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a42      	ldr	r2, [pc, #264]	; (8008d9c <TIM_Base_SetConfig+0x1c8>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d027      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a41      	ldr	r2, [pc, #260]	; (8008da0 <TIM_Base_SetConfig+0x1cc>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d023      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a40      	ldr	r2, [pc, #256]	; (8008da4 <TIM_Base_SetConfig+0x1d0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d01f      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a3f      	ldr	r2, [pc, #252]	; (8008da8 <TIM_Base_SetConfig+0x1d4>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d01b      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a3e      	ldr	r2, [pc, #248]	; (8008dac <TIM_Base_SetConfig+0x1d8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d017      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a3d      	ldr	r2, [pc, #244]	; (8008db0 <TIM_Base_SetConfig+0x1dc>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d013      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a3c      	ldr	r2, [pc, #240]	; (8008db4 <TIM_Base_SetConfig+0x1e0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d00f      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a3b      	ldr	r2, [pc, #236]	; (8008db8 <TIM_Base_SetConfig+0x1e4>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00b      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a3a      	ldr	r2, [pc, #232]	; (8008dbc <TIM_Base_SetConfig+0x1e8>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d007      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a39      	ldr	r2, [pc, #228]	; (8008dc0 <TIM_Base_SetConfig+0x1ec>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d003      	beq.n	8008ce6 <TIM_Base_SetConfig+0x112>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a38      	ldr	r2, [pc, #224]	; (8008dc4 <TIM_Base_SetConfig+0x1f0>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d108      	bne.n	8008cf8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a1a      	ldr	r2, [pc, #104]	; (8008d88 <TIM_Base_SetConfig+0x1b4>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d023      	beq.n	8008d6c <TIM_Base_SetConfig+0x198>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a19      	ldr	r2, [pc, #100]	; (8008d8c <TIM_Base_SetConfig+0x1b8>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d01f      	beq.n	8008d6c <TIM_Base_SetConfig+0x198>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a1e      	ldr	r2, [pc, #120]	; (8008da8 <TIM_Base_SetConfig+0x1d4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d01b      	beq.n	8008d6c <TIM_Base_SetConfig+0x198>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a1d      	ldr	r2, [pc, #116]	; (8008dac <TIM_Base_SetConfig+0x1d8>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d017      	beq.n	8008d6c <TIM_Base_SetConfig+0x198>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a1c      	ldr	r2, [pc, #112]	; (8008db0 <TIM_Base_SetConfig+0x1dc>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d013      	beq.n	8008d6c <TIM_Base_SetConfig+0x198>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a1b      	ldr	r2, [pc, #108]	; (8008db4 <TIM_Base_SetConfig+0x1e0>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d00f      	beq.n	8008d6c <TIM_Base_SetConfig+0x198>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a1a      	ldr	r2, [pc, #104]	; (8008db8 <TIM_Base_SetConfig+0x1e4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d00b      	beq.n	8008d6c <TIM_Base_SetConfig+0x198>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a19      	ldr	r2, [pc, #100]	; (8008dbc <TIM_Base_SetConfig+0x1e8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d007      	beq.n	8008d6c <TIM_Base_SetConfig+0x198>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a18      	ldr	r2, [pc, #96]	; (8008dc0 <TIM_Base_SetConfig+0x1ec>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d003      	beq.n	8008d6c <TIM_Base_SetConfig+0x198>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a17      	ldr	r2, [pc, #92]	; (8008dc4 <TIM_Base_SetConfig+0x1f0>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d103      	bne.n	8008d74 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	691a      	ldr	r2, [r3, #16]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	615a      	str	r2, [r3, #20]
}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	40012c00 	.word	0x40012c00
 8008d8c:	50012c00 	.word	0x50012c00
 8008d90:	40000400 	.word	0x40000400
 8008d94:	50000400 	.word	0x50000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	50000800 	.word	0x50000800
 8008da0:	40000c00 	.word	0x40000c00
 8008da4:	50000c00 	.word	0x50000c00
 8008da8:	40013400 	.word	0x40013400
 8008dac:	50013400 	.word	0x50013400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	50014000 	.word	0x50014000
 8008db8:	40014400 	.word	0x40014400
 8008dbc:	50014400 	.word	0x50014400
 8008dc0:	40014800 	.word	0x40014800
 8008dc4:	50014800 	.word	0x50014800

08008dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e042      	b.n	8008eec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d106      	bne.n	8008e7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7f8 fe09 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2224      	movs	r2, #36	; 0x24
 8008e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0201 	bic.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f82c 	bl	8008ef4 <UART_SetConfig>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d101      	bne.n	8008ea6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e022      	b.n	8008eec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f9c2 	bl	8009238 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0201 	orr.w	r2, r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa49 	bl	800937c <UART_CheckIdleState>
 8008eea:	4603      	mov	r3, r0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ef8:	b094      	sub	sp, #80	; 0x50
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	4b7e      	ldr	r3, [pc, #504]	; (8009104 <UART_SetConfig+0x210>)
 8008f0a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	431a      	orrs	r2, r3
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4977      	ldr	r1, [pc, #476]	; (8009108 <UART_SetConfig+0x214>)
 8008f2c:	4019      	ands	r1, r3
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f34:	430b      	orrs	r3, r1
 8008f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	68d9      	ldr	r1, [r3, #12]
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	ea40 0301 	orr.w	r3, r0, r1
 8008f4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b6a      	ldr	r3, [pc, #424]	; (8009104 <UART_SetConfig+0x210>)
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d009      	beq.n	8008f74 <UART_SetConfig+0x80>
 8008f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	4b69      	ldr	r3, [pc, #420]	; (800910c <UART_SetConfig+0x218>)
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d004      	beq.n	8008f74 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	6a1a      	ldr	r2, [r3, #32]
 8008f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f70:	4313      	orrs	r3, r2
 8008f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008f7e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f88:	430b      	orrs	r3, r1
 8008f8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f92:	f023 000f 	bic.w	r0, r3, #15
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	ea40 0301 	orr.w	r3, r0, r1
 8008fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	4b59      	ldr	r3, [pc, #356]	; (8009110 <UART_SetConfig+0x21c>)
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d102      	bne.n	8008fb4 <UART_SetConfig+0xc0>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fb2:	e029      	b.n	8009008 <UART_SetConfig+0x114>
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	4b56      	ldr	r3, [pc, #344]	; (8009114 <UART_SetConfig+0x220>)
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d102      	bne.n	8008fc4 <UART_SetConfig+0xd0>
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fc2:	e021      	b.n	8009008 <UART_SetConfig+0x114>
 8008fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	4b53      	ldr	r3, [pc, #332]	; (8009118 <UART_SetConfig+0x224>)
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d102      	bne.n	8008fd4 <UART_SetConfig+0xe0>
 8008fce:	2304      	movs	r3, #4
 8008fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fd2:	e019      	b.n	8009008 <UART_SetConfig+0x114>
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	4b50      	ldr	r3, [pc, #320]	; (800911c <UART_SetConfig+0x228>)
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d102      	bne.n	8008fe4 <UART_SetConfig+0xf0>
 8008fde:	2308      	movs	r3, #8
 8008fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fe2:	e011      	b.n	8009008 <UART_SetConfig+0x114>
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	4b4d      	ldr	r3, [pc, #308]	; (8009120 <UART_SetConfig+0x22c>)
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d102      	bne.n	8008ff4 <UART_SetConfig+0x100>
 8008fee:	2310      	movs	r3, #16
 8008ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ff2:	e009      	b.n	8009008 <UART_SetConfig+0x114>
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	4b42      	ldr	r3, [pc, #264]	; (8009104 <UART_SetConfig+0x210>)
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d102      	bne.n	8009004 <UART_SetConfig+0x110>
 8008ffe:	2320      	movs	r3, #32
 8009000:	64bb      	str	r3, [r7, #72]	; 0x48
 8009002:	e001      	b.n	8009008 <UART_SetConfig+0x114>
 8009004:	2300      	movs	r3, #0
 8009006:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	4b3d      	ldr	r3, [pc, #244]	; (8009104 <UART_SetConfig+0x210>)
 800900e:	429a      	cmp	r2, r3
 8009010:	d005      	beq.n	800901e <UART_SetConfig+0x12a>
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	4b3d      	ldr	r3, [pc, #244]	; (800910c <UART_SetConfig+0x218>)
 8009018:	429a      	cmp	r2, r3
 800901a:	f040 8085 	bne.w	8009128 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800901e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009020:	2200      	movs	r2, #0
 8009022:	623b      	str	r3, [r7, #32]
 8009024:	627a      	str	r2, [r7, #36]	; 0x24
 8009026:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800902a:	f7fe f881 	bl	8007130 <HAL_RCCEx_GetPeriphCLKFreq>
 800902e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 80e8 	beq.w	8009208 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	4a39      	ldr	r2, [pc, #228]	; (8009124 <UART_SetConfig+0x230>)
 800903e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009042:	461a      	mov	r2, r3
 8009044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009046:	fbb3 f3f2 	udiv	r3, r3, r2
 800904a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4613      	mov	r3, r2
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	4413      	add	r3, r2
 8009056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009058:	429a      	cmp	r2, r3
 800905a:	d305      	bcc.n	8009068 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009064:	429a      	cmp	r2, r3
 8009066:	d903      	bls.n	8009070 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800906e:	e048      	b.n	8009102 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009072:	2200      	movs	r2, #0
 8009074:	61bb      	str	r3, [r7, #24]
 8009076:	61fa      	str	r2, [r7, #28]
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	4a29      	ldr	r2, [pc, #164]	; (8009124 <UART_SetConfig+0x230>)
 800907e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009082:	b29b      	uxth	r3, r3
 8009084:	2200      	movs	r2, #0
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	617a      	str	r2, [r7, #20]
 800908a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800908e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009092:	f7f7 fa17 	bl	80004c4 <__aeabi_uldivmod>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4610      	mov	r0, r2
 800909c:	4619      	mov	r1, r3
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	f04f 0300 	mov.w	r3, #0
 80090a6:	020b      	lsls	r3, r1, #8
 80090a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090ac:	0202      	lsls	r2, r0, #8
 80090ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090b0:	6849      	ldr	r1, [r1, #4]
 80090b2:	0849      	lsrs	r1, r1, #1
 80090b4:	2000      	movs	r0, #0
 80090b6:	460c      	mov	r4, r1
 80090b8:	4605      	mov	r5, r0
 80090ba:	eb12 0804 	adds.w	r8, r2, r4
 80090be:	eb43 0905 	adc.w	r9, r3, r5
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	60bb      	str	r3, [r7, #8]
 80090ca:	60fa      	str	r2, [r7, #12]
 80090cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 f9f6 	bl	80004c4 <__aeabi_uldivmod>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4613      	mov	r3, r2
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090e6:	d308      	bcc.n	80090fa <UART_SetConfig+0x206>
 80090e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ee:	d204      	bcs.n	80090fa <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090f6:	60da      	str	r2, [r3, #12]
 80090f8:	e003      	b.n	8009102 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009100:	e082      	b.n	8009208 <UART_SetConfig+0x314>
 8009102:	e081      	b.n	8009208 <UART_SetConfig+0x314>
 8009104:	46002400 	.word	0x46002400
 8009108:	cfff69f3 	.word	0xcfff69f3
 800910c:	56002400 	.word	0x56002400
 8009110:	40013800 	.word	0x40013800
 8009114:	40004400 	.word	0x40004400
 8009118:	40004800 	.word	0x40004800
 800911c:	40004c00 	.word	0x40004c00
 8009120:	40005000 	.word	0x40005000
 8009124:	08027a20 	.word	0x08027a20
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009130:	d13c      	bne.n	80091ac <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009134:	2200      	movs	r2, #0
 8009136:	603b      	str	r3, [r7, #0]
 8009138:	607a      	str	r2, [r7, #4]
 800913a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800913e:	f7fd fff7 	bl	8007130 <HAL_RCCEx_GetPeriphCLKFreq>
 8009142:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009146:	2b00      	cmp	r3, #0
 8009148:	d05e      	beq.n	8009208 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800914a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	4a39      	ldr	r2, [pc, #228]	; (8009234 <UART_SetConfig+0x340>)
 8009150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009154:	461a      	mov	r2, r3
 8009156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009158:	fbb3 f3f2 	udiv	r3, r3, r2
 800915c:	005a      	lsls	r2, r3, #1
 800915e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	085b      	lsrs	r3, r3, #1
 8009164:	441a      	add	r2, r3
 8009166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	fbb2 f3f3 	udiv	r3, r2, r3
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009172:	2b0f      	cmp	r3, #15
 8009174:	d916      	bls.n	80091a4 <UART_SetConfig+0x2b0>
 8009176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800917c:	d212      	bcs.n	80091a4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	b29b      	uxth	r3, r3
 8009182:	f023 030f 	bic.w	r3, r3, #15
 8009186:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918a:	085b      	lsrs	r3, r3, #1
 800918c:	b29b      	uxth	r3, r3
 800918e:	f003 0307 	and.w	r3, r3, #7
 8009192:	b29a      	uxth	r2, r3
 8009194:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009196:	4313      	orrs	r3, r2
 8009198:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80091a0:	60da      	str	r2, [r3, #12]
 80091a2:	e031      	b.n	8009208 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80091aa:	e02d      	b.n	8009208 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80091ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ae:	2200      	movs	r2, #0
 80091b0:	469a      	mov	sl, r3
 80091b2:	4693      	mov	fp, r2
 80091b4:	4650      	mov	r0, sl
 80091b6:	4659      	mov	r1, fp
 80091b8:	f7fd ffba 	bl	8007130 <HAL_RCCEx_GetPeriphCLKFreq>
 80091bc:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80091be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d021      	beq.n	8009208 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	4a1a      	ldr	r2, [pc, #104]	; (8009234 <UART_SetConfig+0x340>)
 80091ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	085b      	lsrs	r3, r3, #1
 80091dc:	441a      	add	r2, r3
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ea:	2b0f      	cmp	r3, #15
 80091ec:	d909      	bls.n	8009202 <UART_SetConfig+0x30e>
 80091ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f4:	d205      	bcs.n	8009202 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60da      	str	r2, [r3, #12]
 8009200:	e002      	b.n	8009208 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	2201      	movs	r2, #1
 800920c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	2201      	movs	r2, #1
 8009214:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	2200      	movs	r2, #0
 800921c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	2200      	movs	r2, #0
 8009222:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009224:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009228:	4618      	mov	r0, r3
 800922a:	3750      	adds	r7, #80	; 0x50
 800922c:	46bd      	mov	sp, r7
 800922e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009232:	bf00      	nop
 8009234:	08027a20 	.word	0x08027a20

08009238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092aa:	f003 0308 	and.w	r3, r3, #8
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092cc:	f003 0310 	and.w	r3, r3, #16
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00a      	beq.n	80092ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ee:	f003 0320 	and.w	r3, r3, #32
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01a      	beq.n	800934e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009336:	d10a      	bne.n	800934e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	605a      	str	r2, [r3, #4]
  }
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af02      	add	r7, sp, #8
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800938c:	f7f8 feee 	bl	800216c <HAL_GetTick>
 8009390:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b08      	cmp	r3, #8
 800939e:	d10e      	bne.n	80093be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f82f 	bl	8009412 <UART_WaitOnFlagUntilTimeout>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e025      	b.n	800940a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d10e      	bne.n	80093ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f819 	bl	8009412 <UART_WaitOnFlagUntilTimeout>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e00f      	b.n	800940a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2220      	movs	r2, #32
 80093f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b09c      	sub	sp, #112	; 0x70
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	603b      	str	r3, [r7, #0]
 800941e:	4613      	mov	r3, r2
 8009420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009422:	e0a9      	b.n	8009578 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942a:	f000 80a5 	beq.w	8009578 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800942e:	f7f8 fe9d 	bl	800216c <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800943a:	429a      	cmp	r2, r3
 800943c:	d302      	bcc.n	8009444 <UART_WaitOnFlagUntilTimeout+0x32>
 800943e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009440:	2b00      	cmp	r3, #0
 8009442:	d140      	bne.n	80094c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009454:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009458:	667b      	str	r3, [r7, #100]	; 0x64
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009462:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009464:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009468:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e6      	bne.n	8009444 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3308      	adds	r3, #8
 800947c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	663b      	str	r3, [r7, #96]	; 0x60
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3308      	adds	r3, #8
 8009494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009496:	64ba      	str	r2, [r7, #72]	; 0x48
 8009498:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800949c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80094a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e5      	bne.n	8009476 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e069      	b.n	800959a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d051      	beq.n	8009578 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094e2:	d149      	bne.n	8009578 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800950c:	637b      	str	r3, [r7, #52]	; 0x34
 800950e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e6      	bne.n	80094ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3308      	adds	r3, #8
 8009526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	613b      	str	r3, [r7, #16]
   return(result);
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f023 0301 	bic.w	r3, r3, #1
 8009536:	66bb      	str	r3, [r7, #104]	; 0x68
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3308      	adds	r3, #8
 800953e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009540:	623a      	str	r2, [r7, #32]
 8009542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	69f9      	ldr	r1, [r7, #28]
 8009546:	6a3a      	ldr	r2, [r7, #32]
 8009548:	e841 2300 	strex	r3, r2, [r1]
 800954c:	61bb      	str	r3, [r7, #24]
   return(result);
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1e5      	bne.n	8009520 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2220      	movs	r2, #32
 8009558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2220      	movs	r2, #32
 8009560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2220      	movs	r2, #32
 8009568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e010      	b.n	800959a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	69da      	ldr	r2, [r3, #28]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	4013      	ands	r3, r2
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	429a      	cmp	r2, r3
 8009586:	bf0c      	ite	eq
 8009588:	2301      	moveq	r3, #1
 800958a:	2300      	movne	r3, #0
 800958c:	b2db      	uxtb	r3, r3
 800958e:	461a      	mov	r2, r3
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	429a      	cmp	r2, r3
 8009594:	f43f af46 	beq.w	8009424 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3770      	adds	r7, #112	; 0x70
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d101      	bne.n	80095b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80095b4:	2302      	movs	r3, #2
 80095b6:	e027      	b.n	8009608 <HAL_UARTEx_DisableFifoMode+0x66>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2224      	movs	r2, #36	; 0x24
 80095c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0201 	bic.w	r2, r2, #1
 80095de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009628:	2302      	movs	r3, #2
 800962a:	e02d      	b.n	8009688 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2224      	movs	r2, #36	; 0x24
 8009638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 0201 	bic.w	r2, r2, #1
 8009652:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f84f 	bl	800970c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2220      	movs	r2, #32
 800967a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d101      	bne.n	80096a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096a4:	2302      	movs	r3, #2
 80096a6:	e02d      	b.n	8009704 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2224      	movs	r2, #36	; 0x24
 80096b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0201 	bic.w	r2, r2, #1
 80096ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f811 	bl	800970c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009718:	2b00      	cmp	r3, #0
 800971a:	d108      	bne.n	800972e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800972c:	e031      	b.n	8009792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800972e:	2308      	movs	r3, #8
 8009730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009732:	2308      	movs	r3, #8
 8009734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	0e5b      	lsrs	r3, r3, #25
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	0f5b      	lsrs	r3, r3, #29
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f003 0307 	and.w	r3, r3, #7
 8009754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	7b3a      	ldrb	r2, [r7, #12]
 800975a:	4911      	ldr	r1, [pc, #68]	; (80097a0 <UARTEx_SetNbDataToProcess+0x94>)
 800975c:	5c8a      	ldrb	r2, [r1, r2]
 800975e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009762:	7b3a      	ldrb	r2, [r7, #12]
 8009764:	490f      	ldr	r1, [pc, #60]	; (80097a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009768:	fb93 f3f2 	sdiv	r3, r3, r2
 800976c:	b29a      	uxth	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	7b7a      	ldrb	r2, [r7, #13]
 8009778:	4909      	ldr	r1, [pc, #36]	; (80097a0 <UARTEx_SetNbDataToProcess+0x94>)
 800977a:	5c8a      	ldrb	r2, [r1, r2]
 800977c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009780:	7b7a      	ldrb	r2, [r7, #13]
 8009782:	4908      	ldr	r1, [pc, #32]	; (80097a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009786:	fb93 f3f2 	sdiv	r3, r3, r2
 800978a:	b29a      	uxth	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009792:	bf00      	nop
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	08027a38 	.word	0x08027a38
 80097a4:	08027a40 	.word	0x08027a40

080097a8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	f023 0101 	bic.w	r1, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	2b08      	cmp	r3, #8
 80097d0:	d102      	bne.n	80097d8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80097d2:	2340      	movs	r3, #64	; 0x40
 80097d4:	617b      	str	r3, [r7, #20]
 80097d6:	e001      	b.n	80097dc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80097e8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80097ee:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80097f4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80097fa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009800:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009806:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800980c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009812:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009818:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800981e:	4313      	orrs	r3, r2
 8009820:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	4313      	orrs	r3, r2
 800982a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	4313      	orrs	r3, r2
 800983e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4313      	orrs	r3, r2
 8009848:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800984a:	4b3e      	ldr	r3, [pc, #248]	; (8009944 <FMC_NORSRAM_Init+0x19c>)
 800984c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009854:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800985c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8009864:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800986c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	43db      	mvns	r3, r3
 800987c:	ea02 0103 	and.w	r1, r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	4319      	orrs	r1, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009896:	d10c      	bne.n	80098b2 <FMC_NORSRAM_Init+0x10a>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ac:	431a      	orrs	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d006      	beq.n	80098c8 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c2:	431a      	orrs	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d12f      	bne.n	8009932 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	0c1b      	lsrs	r3, r3, #16
 80098d8:	041b      	lsls	r3, r3, #16
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80098de:	431a      	orrs	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b04      	cmp	r3, #4
 80098ea:	d014      	beq.n	8009916 <FMC_NORSRAM_Init+0x16e>
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d819      	bhi.n	8009924 <FMC_NORSRAM_Init+0x17c>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <FMC_NORSRAM_Init+0x152>
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d007      	beq.n	8009908 <FMC_NORSRAM_Init+0x160>
 80098f8:	e014      	b.n	8009924 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	621a      	str	r2, [r3, #32]
        break;
 8009906:	e015      	b.n	8009934 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	621a      	str	r2, [r3, #32]
        break;
 8009914:	e00e      	b.n	8009934 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	621a      	str	r2, [r3, #32]
        break;
 8009922:	e007      	b.n	8009934 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	621a      	str	r2, [r3, #32]
        break;
 8009930:	e000      	b.n	8009934 <FMC_NORSRAM_Init+0x18c>
    }
  }
 8009932:	bf00      	nop

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	371c      	adds	r7, #28
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	0008fb7f 	.word	0x0008fb7f

08009948 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	431a      	orrs	r2, r3
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	431a      	orrs	r2, r3
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	079b      	lsls	r3, r3, #30
 8009978:	431a      	orrs	r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	041b      	lsls	r3, r3, #16
 8009980:	431a      	orrs	r2, r3
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	3b01      	subs	r3, #1
 8009988:	051b      	lsls	r3, r3, #20
 800998a:	431a      	orrs	r2, r3
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	3b02      	subs	r3, #2
 8009992:	061b      	lsls	r3, r3, #24
 8009994:	ea42 0103 	orr.w	r1, r2, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	3201      	adds	r2, #1
 80099a0:	4319      	orrs	r1, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099b4:	d113      	bne.n	80099de <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099be:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	051b      	lsls	r3, r3, #20
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	431a      	orrs	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a00:	d121      	bne.n	8009a46 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	6819      	ldr	r1, [r3, #0]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	011b      	lsls	r3, r3, #4
 8009a18:	4319      	orrs	r1, r3
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	021b      	lsls	r3, r3, #8
 8009a20:	4319      	orrs	r1, r3
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	079b      	lsls	r3, r3, #30
 8009a28:	4319      	orrs	r1, r3
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	4319      	orrs	r1, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	041b      	lsls	r3, r3, #16
 8009a36:	430b      	orrs	r3, r1
 8009a38:	ea42 0103 	orr.w	r1, r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009a44:	e005      	b.n	8009a52 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b08b      	sub	sp, #44	; 0x2c
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	fa93 f3a3 	rbit	r3, r3
 8009a7a:	613b      	str	r3, [r7, #16]
  return result;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d101      	bne.n	8009a8a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009a86:	2320      	movs	r3, #32
 8009a88:	e003      	b.n	8009a92 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	fab3 f383 	clz	r3, r3
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	2103      	movs	r1, #3
 8009a96:	fa01 f303 	lsl.w	r3, r1, r3
 8009a9a:	43db      	mvns	r3, r3
 8009a9c:	401a      	ands	r2, r3
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	fa93 f3a3 	rbit	r3, r3
 8009aa8:	61fb      	str	r3, [r7, #28]
  return result;
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009ab4:	2320      	movs	r3, #32
 8009ab6:	e003      	b.n	8009ac0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	fab3 f383 	clz	r3, r3
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	601a      	str	r2, [r3, #0]
}
 8009ace:	bf00      	nop
 8009ad0:	372c      	adds	r7, #44	; 0x2c
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b085      	sub	sp, #20
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	43db      	mvns	r3, r3
 8009aee:	401a      	ands	r2, r3
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6879      	ldr	r1, [r7, #4]
 8009af4:	fb01 f303 	mul.w	r3, r1, r3
 8009af8:	431a      	orrs	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	605a      	str	r2, [r3, #4]
}
 8009afe:	bf00      	nop
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b08b      	sub	sp, #44	; 0x2c
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	689a      	ldr	r2, [r3, #8]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	fa93 f3a3 	rbit	r3, r3
 8009b24:	613b      	str	r3, [r7, #16]
  return result;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009b30:	2320      	movs	r3, #32
 8009b32:	e003      	b.n	8009b3c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	fab3 f383 	clz	r3, r3
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	005b      	lsls	r3, r3, #1
 8009b3e:	2103      	movs	r1, #3
 8009b40:	fa01 f303 	lsl.w	r3, r1, r3
 8009b44:	43db      	mvns	r3, r3
 8009b46:	401a      	ands	r2, r3
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	fa93 f3a3 	rbit	r3, r3
 8009b52:	61fb      	str	r3, [r7, #28]
  return result;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009b5e:	2320      	movs	r3, #32
 8009b60:	e003      	b.n	8009b6a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	fab3 f383 	clz	r3, r3
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	6879      	ldr	r1, [r7, #4]
 8009b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b72:	431a      	orrs	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009b78:	bf00      	nop
 8009b7a:	372c      	adds	r7, #44	; 0x2c
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b08b      	sub	sp, #44	; 0x2c
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	fa93 f3a3 	rbit	r3, r3
 8009b9e:	613b      	str	r3, [r7, #16]
  return result;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009baa:	2320      	movs	r3, #32
 8009bac:	e003      	b.n	8009bb6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	fab3 f383 	clz	r3, r3
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	005b      	lsls	r3, r3, #1
 8009bb8:	2103      	movs	r1, #3
 8009bba:	fa01 f303 	lsl.w	r3, r1, r3
 8009bbe:	43db      	mvns	r3, r3
 8009bc0:	401a      	ands	r2, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	fa93 f3a3 	rbit	r3, r3
 8009bcc:	61fb      	str	r3, [r7, #28]
  return result;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009bd8:	2320      	movs	r3, #32
 8009bda:	e003      	b.n	8009be4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	fab3 f383 	clz	r3, r3
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	005b      	lsls	r3, r3, #1
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bec:	431a      	orrs	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	60da      	str	r2, [r3, #12]
}
 8009bf2:	bf00      	nop
 8009bf4:	372c      	adds	r7, #44	; 0x2c
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b08b      	sub	sp, #44	; 0x2c
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a1a      	ldr	r2, [r3, #32]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	fa93 f3a3 	rbit	r3, r3
 8009c18:	613b      	str	r3, [r7, #16]
  return result;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009c24:	2320      	movs	r3, #32
 8009c26:	e003      	b.n	8009c30 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	fab3 f383 	clz	r3, r3
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	210f      	movs	r1, #15
 8009c34:	fa01 f303 	lsl.w	r3, r1, r3
 8009c38:	43db      	mvns	r3, r3
 8009c3a:	401a      	ands	r2, r3
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	fa93 f3a3 	rbit	r3, r3
 8009c46:	61fb      	str	r3, [r7, #28]
  return result;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009c52:	2320      	movs	r3, #32
 8009c54:	e003      	b.n	8009c5e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	fab3 f383 	clz	r3, r3
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	fa01 f303 	lsl.w	r3, r1, r3
 8009c66:	431a      	orrs	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009c6c:	bf00      	nop
 8009c6e:	372c      	adds	r7, #44	; 0x2c
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b08b      	sub	sp, #44	; 0x2c
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	0a1b      	lsrs	r3, r3, #8
 8009c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	fa93 f3a3 	rbit	r3, r3
 8009c94:	613b      	str	r3, [r7, #16]
  return result;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009ca0:	2320      	movs	r3, #32
 8009ca2:	e003      	b.n	8009cac <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	fab3 f383 	clz	r3, r3
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	210f      	movs	r1, #15
 8009cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb4:	43db      	mvns	r3, r3
 8009cb6:	401a      	ands	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	0a1b      	lsrs	r3, r3, #8
 8009cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	fa93 f3a3 	rbit	r3, r3
 8009cc4:	61fb      	str	r3, [r7, #28]
  return result;
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	e003      	b.n	8009cdc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	fab3 f383 	clz	r3, r3
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009cea:	bf00      	nop
 8009cec:	372c      	adds	r7, #44	; 0x2c
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b08a      	sub	sp, #40	; 0x28
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	fa93 f3a3 	rbit	r3, r3
 8009d0c:	617b      	str	r3, [r7, #20]
  return result;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d101      	bne.n	8009d1c <LL_GPIO_Init+0x26>
    return 32U;
 8009d18:	2320      	movs	r3, #32
 8009d1a:	e003      	b.n	8009d24 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	fab3 f383 	clz	r3, r3
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009d26:	e050      	b.n	8009dca <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	fa01 f303 	lsl.w	r3, r1, r3
 8009d34:	4013      	ands	r3, r2
 8009d36:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d042      	beq.n	8009dc4 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	461a      	mov	r2, r3
 8009d44:	6a39      	ldr	r1, [r7, #32]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff fe8a 	bl	8009a60 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d003      	beq.n	8009d5c <LL_GPIO_Init+0x66>
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d106      	bne.n	8009d6a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6a39      	ldr	r1, [r7, #32]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff fed0 	bl	8009b0a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	6a39      	ldr	r1, [r7, #32]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7ff ff06 	bl	8009b84 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d121      	bne.n	8009dc4 <LL_GPIO_Init+0xce>
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	fa93 f3a3 	rbit	r3, r3
 8009d8a:	60bb      	str	r3, [r7, #8]
  return result;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d101      	bne.n	8009d9a <LL_GPIO_Init+0xa4>
    return 32U;
 8009d96:	2320      	movs	r3, #32
 8009d98:	e003      	b.n	8009da2 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	fab3 f383 	clz	r3, r3
 8009da0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009da2:	2b07      	cmp	r3, #7
 8009da4:	d807      	bhi.n	8009db6 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	461a      	mov	r2, r3
 8009dac:	6a39      	ldr	r1, [r7, #32]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff ff25 	bl	8009bfe <LL_GPIO_SetAFPin_0_7>
 8009db4:	e006      	b.n	8009dc4 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	6a39      	ldr	r1, [r7, #32]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff ff5a 	bl	8009c78 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1a7      	bne.n	8009d28 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d003      	beq.n	8009de8 <LL_GPIO_Init+0xf2>
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d107      	bne.n	8009df8 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	6819      	ldr	r1, [r3, #0]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	461a      	mov	r2, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff fe71 	bl	8009ada <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3728      	adds	r7, #40	; 0x28
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e02:	b084      	sub	sp, #16
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	f107 001c 	add.w	r0, r7, #28
 8009e10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fd8f 	bl	800a944 <USB_CoreReset>
 8009e26:	4603      	mov	r3, r0
 8009e28:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d106      	bne.n	8009e3e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8009e3c:	e005      	b.n	8009e4a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e56:	b004      	add	sp, #16
 8009e58:	4770      	bx	lr
	...

08009e5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	4613      	mov	r3, r2
 8009e68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d165      	bne.n	8009f3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	4a41      	ldr	r2, [pc, #260]	; (8009f78 <USB_SetTurnaroundTime+0x11c>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d906      	bls.n	8009e86 <USB_SetTurnaroundTime+0x2a>
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	4a40      	ldr	r2, [pc, #256]	; (8009f7c <USB_SetTurnaroundTime+0x120>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d202      	bcs.n	8009e86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e80:	230f      	movs	r3, #15
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e062      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	4a3c      	ldr	r2, [pc, #240]	; (8009f7c <USB_SetTurnaroundTime+0x120>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d306      	bcc.n	8009e9c <USB_SetTurnaroundTime+0x40>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	4a3b      	ldr	r2, [pc, #236]	; (8009f80 <USB_SetTurnaroundTime+0x124>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d202      	bcs.n	8009e9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e96:	230e      	movs	r3, #14
 8009e98:	617b      	str	r3, [r7, #20]
 8009e9a:	e057      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	4a38      	ldr	r2, [pc, #224]	; (8009f80 <USB_SetTurnaroundTime+0x124>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d306      	bcc.n	8009eb2 <USB_SetTurnaroundTime+0x56>
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4a37      	ldr	r2, [pc, #220]	; (8009f84 <USB_SetTurnaroundTime+0x128>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d202      	bcs.n	8009eb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009eac:	230d      	movs	r3, #13
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e04c      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	4a33      	ldr	r2, [pc, #204]	; (8009f84 <USB_SetTurnaroundTime+0x128>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d306      	bcc.n	8009ec8 <USB_SetTurnaroundTime+0x6c>
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	4a32      	ldr	r2, [pc, #200]	; (8009f88 <USB_SetTurnaroundTime+0x12c>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d802      	bhi.n	8009ec8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009ec2:	230c      	movs	r3, #12
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	e041      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	4a2f      	ldr	r2, [pc, #188]	; (8009f88 <USB_SetTurnaroundTime+0x12c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d906      	bls.n	8009ede <USB_SetTurnaroundTime+0x82>
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4a2e      	ldr	r2, [pc, #184]	; (8009f8c <USB_SetTurnaroundTime+0x130>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d802      	bhi.n	8009ede <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ed8:	230b      	movs	r3, #11
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	e036      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	4a2a      	ldr	r2, [pc, #168]	; (8009f8c <USB_SetTurnaroundTime+0x130>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d906      	bls.n	8009ef4 <USB_SetTurnaroundTime+0x98>
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4a29      	ldr	r2, [pc, #164]	; (8009f90 <USB_SetTurnaroundTime+0x134>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d802      	bhi.n	8009ef4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009eee:	230a      	movs	r3, #10
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	e02b      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4a26      	ldr	r2, [pc, #152]	; (8009f90 <USB_SetTurnaroundTime+0x134>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d906      	bls.n	8009f0a <USB_SetTurnaroundTime+0xae>
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	4a25      	ldr	r2, [pc, #148]	; (8009f94 <USB_SetTurnaroundTime+0x138>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d202      	bcs.n	8009f0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009f04:	2309      	movs	r3, #9
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	e020      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	4a21      	ldr	r2, [pc, #132]	; (8009f94 <USB_SetTurnaroundTime+0x138>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d306      	bcc.n	8009f20 <USB_SetTurnaroundTime+0xc4>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	4a20      	ldr	r2, [pc, #128]	; (8009f98 <USB_SetTurnaroundTime+0x13c>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d802      	bhi.n	8009f20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009f1a:	2308      	movs	r3, #8
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e015      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	4a1d      	ldr	r2, [pc, #116]	; (8009f98 <USB_SetTurnaroundTime+0x13c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d906      	bls.n	8009f36 <USB_SetTurnaroundTime+0xda>
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	4a1c      	ldr	r2, [pc, #112]	; (8009f9c <USB_SetTurnaroundTime+0x140>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d202      	bcs.n	8009f36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f30:	2307      	movs	r3, #7
 8009f32:	617b      	str	r3, [r7, #20]
 8009f34:	e00a      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f36:	2306      	movs	r3, #6
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	e007      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f42:	2309      	movs	r3, #9
 8009f44:	617b      	str	r3, [r7, #20]
 8009f46:	e001      	b.n	8009f4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f48:	2309      	movs	r3, #9
 8009f4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	68da      	ldr	r2, [r3, #12]
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	029b      	lsls	r3, r3, #10
 8009f60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009f64:	431a      	orrs	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	371c      	adds	r7, #28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	00d8acbf 	.word	0x00d8acbf
 8009f7c:	00e4e1c0 	.word	0x00e4e1c0
 8009f80:	00f42400 	.word	0x00f42400
 8009f84:	01067380 	.word	0x01067380
 8009f88:	011a499f 	.word	0x011a499f
 8009f8c:	01312cff 	.word	0x01312cff
 8009f90:	014ca43f 	.word	0x014ca43f
 8009f94:	016e3600 	.word	0x016e3600
 8009f98:	01a6ab1f 	.word	0x01a6ab1f
 8009f9c:	01e84800 	.word	0x01e84800

08009fa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f023 0201 	bic.w	r2, r3, #1
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d115      	bne.n	800a010 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	f7f8 f8c7 	bl	8002184 <HAL_Delay>
      ms++;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fc11 	bl	800a824 <USB_GetMode>
 800a002:	4603      	mov	r3, r0
 800a004:	2b01      	cmp	r3, #1
 800a006:	d01e      	beq.n	800a046 <USB_SetCurrentMode+0x84>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b31      	cmp	r3, #49	; 0x31
 800a00c:	d9f0      	bls.n	8009ff0 <USB_SetCurrentMode+0x2e>
 800a00e:	e01a      	b.n	800a046 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d115      	bne.n	800a042 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a022:	2001      	movs	r0, #1
 800a024:	f7f8 f8ae 	bl	8002184 <HAL_Delay>
      ms++;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fbf8 	bl	800a824 <USB_GetMode>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d005      	beq.n	800a046 <USB_SetCurrentMode+0x84>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b31      	cmp	r3, #49	; 0x31
 800a03e:	d9f0      	bls.n	800a022 <USB_SetCurrentMode+0x60>
 800a040:	e001      	b.n	800a046 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e005      	b.n	800a052 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b32      	cmp	r3, #50	; 0x32
 800a04a:	d101      	bne.n	800a050 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e000      	b.n	800a052 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a05c:	b084      	sub	sp, #16
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a06a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a076:	2300      	movs	r3, #0
 800a078:	613b      	str	r3, [r7, #16]
 800a07a:	e009      	b.n	800a090 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	3340      	adds	r3, #64	; 0x40
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	2200      	movs	r2, #0
 800a088:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	3301      	adds	r3, #1
 800a08e:	613b      	str	r3, [r7, #16]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	2b0e      	cmp	r3, #14
 800a094:	d9f2      	bls.n	800a07c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d11c      	bne.n	800a0d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0aa:	f043 0302 	orr.w	r3, r3, #2
 800a0ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e005      	b.n	800a0e2 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	680b      	ldr	r3, [r1, #0]
 800a100:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a102:	2103      	movs	r1, #3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f95b 	bl	800a3c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a10a:	2110      	movs	r1, #16
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f8f3 	bl	800a2f8 <USB_FlushTxFifo>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f91f 	bl	800a360 <USB_FlushRxFifo>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a132:	461a      	mov	r2, r3
 800a134:	2300      	movs	r3, #0
 800a136:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13e:	461a      	mov	r2, r3
 800a140:	2300      	movs	r3, #0
 800a142:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14a:	461a      	mov	r2, r3
 800a14c:	2300      	movs	r3, #0
 800a14e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]
 800a154:	e043      	b.n	800a1de <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a16c:	d118      	bne.n	800a1a0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a180:	461a      	mov	r2, r3
 800a182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a186:	6013      	str	r3, [r2, #0]
 800a188:	e013      	b.n	800a1b2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4413      	add	r3, r2
 800a192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a196:	461a      	mov	r2, r3
 800a198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	e008      	b.n	800a1b2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1be:	461a      	mov	r2, r3
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d3b7      	bcc.n	800a156 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	613b      	str	r3, [r7, #16]
 800a1ea:	e043      	b.n	800a274 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	015a      	lsls	r2, r3, #5
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a202:	d118      	bne.n	800a236 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4413      	add	r3, r2
 800a212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a216:	461a      	mov	r2, r3
 800a218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	e013      	b.n	800a248 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22c:	461a      	mov	r2, r3
 800a22e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a232:	6013      	str	r3, [r2, #0]
 800a234:	e008      	b.n	800a248 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a242:	461a      	mov	r2, r3
 800a244:	2300      	movs	r3, #0
 800a246:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a254:	461a      	mov	r2, r3
 800a256:	2300      	movs	r3, #0
 800a258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a266:	461a      	mov	r2, r3
 800a268:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a26c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	3301      	adds	r3, #1
 800a272:	613b      	str	r3, [r7, #16]
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d3b7      	bcc.n	800a1ec <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a28a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a28e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a29c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	f043 0210 	orr.w	r2, r3, #16
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	699a      	ldr	r2, [r3, #24]
 800a2b4:	4b0f      	ldr	r3, [pc, #60]	; (800a2f4 <USB_DevInit+0x298>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d005      	beq.n	800a2ce <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	f043 0208 	orr.w	r2, r3, #8
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d107      	bne.n	800a2e4 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2dc:	f043 0304 	orr.w	r3, r3, #4
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2f0:	b004      	add	sp, #16
 800a2f2:	4770      	bx	lr
 800a2f4:	803c3800 	.word	0x803c3800

0800a2f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3301      	adds	r3, #1
 800a30a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4a13      	ldr	r2, [pc, #76]	; (800a35c <USB_FlushTxFifo+0x64>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d901      	bls.n	800a318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e01b      	b.n	800a350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	daf2      	bge.n	800a306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	019b      	lsls	r3, r3, #6
 800a328:	f043 0220 	orr.w	r2, r3, #32
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3301      	adds	r3, #1
 800a334:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4a08      	ldr	r2, [pc, #32]	; (800a35c <USB_FlushTxFifo+0x64>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d901      	bls.n	800a342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e006      	b.n	800a350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d0f0      	beq.n	800a330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	00030d40 	.word	0x00030d40

0800a360 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3301      	adds	r3, #1
 800a370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4a11      	ldr	r2, [pc, #68]	; (800a3bc <USB_FlushRxFifo+0x5c>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d901      	bls.n	800a37e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e018      	b.n	800a3b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	daf2      	bge.n	800a36c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2210      	movs	r2, #16
 800a38e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4a08      	ldr	r2, [pc, #32]	; (800a3bc <USB_FlushRxFifo+0x5c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d901      	bls.n	800a3a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e006      	b.n	800a3b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	f003 0310 	and.w	r3, r3, #16
 800a3aa:	2b10      	cmp	r3, #16
 800a3ac:	d0f0      	beq.n	800a390 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	00030d40 	.word	0x00030d40

0800a3c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	78fb      	ldrb	r3, [r7, #3]
 800a3da:	68f9      	ldr	r1, [r7, #12]
 800a3dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b087      	sub	sp, #28
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f003 0306 	and.w	r3, r3, #6
 800a40a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d102      	bne.n	800a418 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a412:	2300      	movs	r3, #0
 800a414:	75fb      	strb	r3, [r7, #23]
 800a416:	e00a      	b.n	800a42e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d002      	beq.n	800a424 <USB_GetDevSpeed+0x32>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b06      	cmp	r3, #6
 800a422:	d102      	bne.n	800a42a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a424:	2302      	movs	r3, #2
 800a426:	75fb      	strb	r3, [r7, #23]
 800a428:	e001      	b.n	800a42e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a42a:	230f      	movs	r3, #15
 800a42c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a430:	4618      	mov	r0, r3
 800a432:	371c      	adds	r7, #28
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	785b      	ldrb	r3, [r3, #1]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d14a      	bne.n	800a4f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a46e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a472:	f040 8086 	bne.w	800a582 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	7812      	ldrb	r2, [r2, #0]
 800a48a:	0151      	lsls	r1, r2, #5
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	440a      	add	r2, r1
 800a490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a494:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a498:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	7812      	ldrb	r2, [r2, #0]
 800a4ae:	0151      	lsls	r1, r2, #5
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	440a      	add	r2, r1
 800a4b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d902      	bls.n	800a4d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4d2:	e056      	b.n	800a582 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4ec:	d0e7      	beq.n	800a4be <USB_EPStopXfer+0x82>
 800a4ee:	e048      	b.n	800a582 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a508:	d13b      	bne.n	800a582 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	7812      	ldrb	r2, [r2, #0]
 800a51e:	0151      	lsls	r1, r2, #5
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	440a      	add	r2, r1
 800a524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a528:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a52c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	7812      	ldrb	r2, [r2, #0]
 800a542:	0151      	lsls	r1, r2, #5
 800a544:	693a      	ldr	r2, [r7, #16]
 800a546:	440a      	add	r2, r1
 800a548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a54c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a550:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3301      	adds	r3, #1
 800a556:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a55e:	4293      	cmp	r3, r2
 800a560:	d902      	bls.n	800a568 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	75fb      	strb	r3, [r7, #23]
          break;
 800a566:	e00c      	b.n	800a582 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	4413      	add	r3, r2
 800a572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a57c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a580:	d0e7      	beq.n	800a552 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a582:	7dfb      	ldrb	r3, [r7, #23]
}
 800a584:	4618      	mov	r0, r3
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a590:	b480      	push	{r7}
 800a592:	b089      	sub	sp, #36	; 0x24
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	4611      	mov	r1, r2
 800a59c:	461a      	mov	r2, r3
 800a59e:	460b      	mov	r3, r1
 800a5a0:	71fb      	strb	r3, [r7, #7]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a5ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d123      	bne.n	800a5fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5b6:	88bb      	ldrh	r3, [r7, #4]
 800a5b8:	3303      	adds	r3, #3
 800a5ba:	089b      	lsrs	r3, r3, #2
 800a5bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	e018      	b.n	800a5f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	031a      	lsls	r2, r3, #12
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	61bb      	str	r3, [r7, #24]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d3e2      	bcc.n	800a5c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3724      	adds	r7, #36	; 0x24
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b08b      	sub	sp, #44	; 0x2c
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	4613      	mov	r3, r2
 800a618:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	089b      	lsrs	r3, r3, #2
 800a626:	b29b      	uxth	r3, r3
 800a628:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a62a:	88fb      	ldrh	r3, [r7, #6]
 800a62c:	f003 0303 	and.w	r3, r3, #3
 800a630:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a632:	2300      	movs	r3, #0
 800a634:	623b      	str	r3, [r7, #32]
 800a636:	e014      	b.n	800a662 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	601a      	str	r2, [r3, #0]
    pDest++;
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	3301      	adds	r3, #1
 800a648:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	3301      	adds	r3, #1
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	3301      	adds	r3, #1
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	3301      	adds	r3, #1
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	3301      	adds	r3, #1
 800a660:	623b      	str	r3, [r7, #32]
 800a662:	6a3a      	ldr	r2, [r7, #32]
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	429a      	cmp	r2, r3
 800a668:	d3e6      	bcc.n	800a638 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a66a:	8bfb      	ldrh	r3, [r7, #30]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d01e      	beq.n	800a6ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67a:	461a      	mov	r2, r3
 800a67c:	f107 0310 	add.w	r3, r7, #16
 800a680:	6812      	ldr	r2, [r2, #0]
 800a682:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	fa22 f303 	lsr.w	r3, r2, r3
 800a690:	b2da      	uxtb	r2, r3
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	701a      	strb	r2, [r3, #0]
      i++;
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	3301      	adds	r3, #1
 800a69a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	3301      	adds	r3, #1
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a6a2:	8bfb      	ldrh	r3, [r7, #30]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6a8:	8bfb      	ldrh	r3, [r7, #30]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1ea      	bne.n	800a684 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	372c      	adds	r7, #44	; 0x2c
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6d6:	f023 0303 	bic.w	r3, r3, #3
 800a6da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6ea:	f043 0302 	orr.w	r3, r3, #2
 800a6ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	4013      	ands	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a716:	68fb      	ldr	r3, [r7, #12]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	4013      	ands	r3, r2
 800a746:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	0c1b      	lsrs	r3, r3, #16
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	4013      	ands	r3, r2
 800a77a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	b29b      	uxth	r3, r3
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a7ba:	68bb      	ldr	r3, [r7, #8]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a7ec:	78fb      	ldrb	r3, [r7, #3]
 800a7ee:	f003 030f 	and.w	r3, r3, #15
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f8:	01db      	lsls	r3, r3, #7
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a802:	78fb      	ldrb	r3, [r7, #3]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	4013      	ands	r3, r2
 800a814:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a816:	68bb      	ldr	r3, [r7, #8]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	371c      	adds	r7, #28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	f003 0301 	and.w	r3, r3, #1
}
 800a834:	4618      	mov	r0, r3
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a85a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a85e:	f023 0307 	bic.w	r3, r3, #7
 800a862:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a876:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
	...

0800a888 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a888:	b480      	push	{r7}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	460b      	mov	r3, r1
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	333c      	adds	r3, #60	; 0x3c
 800a89e:	3304      	adds	r3, #4
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	4a26      	ldr	r2, [pc, #152]	; (800a940 <USB_EP0_OutStart+0xb8>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d90a      	bls.n	800a8c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8bc:	d101      	bne.n	800a8c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e037      	b.n	800a932 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8f0:	f043 0318 	orr.w	r3, r3, #24
 800a8f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a904:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a908:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a90a:	7afb      	ldrb	r3, [r7, #11]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d10f      	bne.n	800a930 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a92a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a92e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	371c      	adds	r7, #28
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	4f54300a 	.word	0x4f54300a

0800a944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	3301      	adds	r3, #1
 800a954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4a13      	ldr	r2, [pc, #76]	; (800a9a8 <USB_CoreReset+0x64>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d901      	bls.n	800a962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e01b      	b.n	800a99a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	2b00      	cmp	r3, #0
 800a968:	daf2      	bge.n	800a950 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	f043 0201 	orr.w	r2, r3, #1
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3301      	adds	r3, #1
 800a97e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4a09      	ldr	r2, [pc, #36]	; (800a9a8 <USB_CoreReset+0x64>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d901      	bls.n	800a98c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a988:	2303      	movs	r3, #3
 800a98a:	e006      	b.n	800a99a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b01      	cmp	r3, #1
 800a996:	d0f0      	beq.n	800a97a <USB_CoreReset+0x36>

  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	00030d40 	.word	0x00030d40

0800a9ac <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b096      	sub	sp, #88	; 0x58
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	3303      	adds	r3, #3
 800a9be:	f023 0303 	bic.w	r3, r3, #3
 800a9c2:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c8:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800a9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800a9cc:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9ce:	b672      	cpsid	i
#endif
    return(int_posture);
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800a9d2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a9d4:	4b55      	ldr	r3, [pc, #340]	; (800ab2c <_tx_byte_allocate+0x180>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9e2:	621a      	str	r2, [r3, #32]
 800a9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	f383 8810 	msr	PRIMASK, r3
}
 800a9ee:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800a9f0:	6879      	ldr	r1, [r7, #4]
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 f9b2 	bl	800ad5c <_tx_byte_pool_search>
 800a9f8:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800aa02:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa04:	b672      	cpsid	i
    return(int_posture);
 800aa06:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800aa08:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800aa0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800aa10:	2301      	movs	r3, #1
 800aa12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa14:	e006      	b.n	800aa24 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d101      	bne.n	800aa24 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800aa20:	2301      	movs	r3, #1
 800aa22:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800aa24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0d9      	beq.n	800a9de <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa2e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800aa30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d008      	beq.n	800aa48 <_tx_byte_allocate+0x9c>
 800aa36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa38:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	f383 8810 	msr	PRIMASK, r3
}
 800aa40:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800aa42:	2300      	movs	r3, #0
 800aa44:	653b      	str	r3, [r7, #80]	; 0x50
 800aa46:	e06c      	b.n	800ab22 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d061      	beq.n	800ab12 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800aa4e:	4b38      	ldr	r3, [pc, #224]	; (800ab30 <_tx_byte_allocate+0x184>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d007      	beq.n	800aa66 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800aa56:	2310      	movs	r3, #16
 800aa58:	653b      	str	r3, [r7, #80]	; 0x50
 800aa5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa5c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	f383 8810 	msr	PRIMASK, r3
}
 800aa64:	e05d      	b.n	800ab22 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800aa66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa68:	4a32      	ldr	r2, [pc, #200]	; (800ab34 <_tx_byte_allocate+0x188>)
 800aa6a:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800aa6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800aa72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800aa78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800aa7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa88:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa90:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa96:	1c5a      	adds	r2, r3, #1
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800aa9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d109      	bne.n	800aab6 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaa6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800aaa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaac:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800aaae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aab2:	675a      	str	r2, [r3, #116]	; 0x74
 800aab4:	e011      	b.n	800aada <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800aabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aabe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aac0:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800aac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aac6:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800aac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aacc:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800aace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad2:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800aad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad8:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800aada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aadc:	2209      	movs	r2, #9
 800aade:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800aae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aae2:	2201      	movs	r2, #1
 800aae4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800aae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800aaec:	4b10      	ldr	r3, [pc, #64]	; (800ab30 <_tx_byte_allocate+0x184>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	4a0f      	ldr	r2, [pc, #60]	; (800ab30 <_tx_byte_allocate+0x184>)
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	f383 8810 	msr	PRIMASK, r3
}
 800ab00:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ab02:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ab04:	f001 f9d6 	bl	800beb4 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800ab08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab0e:	653b      	str	r3, [r7, #80]	; 0x50
 800ab10:	e007      	b.n	800ab22 <_tx_byte_allocate+0x176>
 800ab12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab14:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f383 8810 	msr	PRIMASK, r3
}
 800ab1c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800ab1e:	2310      	movs	r3, #16
 800ab20:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800ab22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3758      	adds	r7, #88	; 0x58
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	2004b8b0 	.word	0x2004b8b0
 800ab30:	2004b948 	.word	0x2004b948
 800ab34:	0800ab39 	.word	0x0800ab39

0800ab38 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08e      	sub	sp, #56	; 0x38
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab42:	f3ef 8310 	mrs	r3, PRIMASK
 800ab46:	623b      	str	r3, [r7, #32]
    return(posture);
 800ab48:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ab4a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab4c:	b672      	cpsid	i
    return(int_posture);
 800ab4e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800ab50:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab56:	4a33      	ldr	r2, [pc, #204]	; (800ac24 <_tx_byte_pool_cleanup+0xec>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d158      	bne.n	800ac0e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d152      	bne.n	800ac0e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab6c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d04c      	beq.n	800ac0e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a2b      	ldr	r2, [pc, #172]	; (800ac28 <_tx_byte_pool_cleanup+0xf0>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d147      	bne.n	800ac0e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d043      	beq.n	800ac0e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab90:	1e5a      	subs	r2, r3, #1
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d103      	bne.n	800abaa <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800aba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba4:	2200      	movs	r2, #0
 800aba6:	625a      	str	r2, [r3, #36]	; 0x24
 800aba8:	e013      	b.n	800abd2 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abae:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abb4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800abb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abba:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d102      	bne.n	800abd2 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd0:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd6:	2b09      	cmp	r3, #9
 800abd8:	d119      	bne.n	800ac0e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2210      	movs	r2, #16
 800abde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800abe2:	4b12      	ldr	r3, [pc, #72]	; (800ac2c <_tx_byte_pool_cleanup+0xf4>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3301      	adds	r3, #1
 800abe8:	4a10      	ldr	r2, [pc, #64]	; (800ac2c <_tx_byte_pool_cleanup+0xf4>)
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	f383 8810 	msr	PRIMASK, r3
}
 800abf6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f001 f85b 	bl	800bcb4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800abfe:	f3ef 8310 	mrs	r3, PRIMASK
 800ac02:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ac04:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ac06:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac08:	b672      	cpsid	i
    return(int_posture);
 800ac0a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ac0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac10:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f383 8810 	msr	PRIMASK, r3
}
 800ac18:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ac1a:	bf00      	nop
 800ac1c:	3738      	adds	r7, #56	; 0x38
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	0800ab39 	.word	0x0800ab39
 800ac28:	42595445 	.word	0x42595445
 800ac2c:	2004b948 	.word	0x2004b948

0800ac30 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08e      	sub	sp, #56	; 0x38
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800ac3e:	2234      	movs	r2, #52	; 0x34
 800ac40:	2100      	movs	r1, #0
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f01a fe96 	bl	8025974 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	f023 0303 	bic.w	r3, r3, #3
 800ac4e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	f1a3 0208 	sub.w	r2, r3, #8
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800ac82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	4413      	add	r3, r2
 800ac88:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	3b04      	subs	r3, #4
 800ac8e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ac94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac96:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac9c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800ac9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca0:	3b04      	subs	r3, #4
 800aca2:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800aca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800acb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acba:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800acc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc2:	3304      	adds	r3, #4
 800acc4:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800acc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc8:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	4a1f      	ldr	r2, [pc, #124]	; (800ad4c <_tx_byte_pool_create+0x11c>)
 800acce:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800acd6:	f3ef 8310 	mrs	r3, PRIMASK
 800acda:	61bb      	str	r3, [r7, #24]
    return(posture);
 800acdc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800acde:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ace0:	b672      	cpsid	i
    return(int_posture);
 800ace2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	4a19      	ldr	r2, [pc, #100]	; (800ad50 <_tx_byte_pool_create+0x120>)
 800acea:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800acec:	4b19      	ldr	r3, [pc, #100]	; (800ad54 <_tx_byte_pool_create+0x124>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d109      	bne.n	800ad08 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800acf4:	4a18      	ldr	r2, [pc, #96]	; (800ad58 <_tx_byte_pool_create+0x128>)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	631a      	str	r2, [r3, #48]	; 0x30
 800ad06:	e011      	b.n	800ad2c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800ad08:	4b13      	ldr	r3, [pc, #76]	; (800ad58 <_tx_byte_pool_create+0x128>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad12:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6a3a      	ldr	r2, [r7, #32]
 800ad2a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ad2c:	4b09      	ldr	r3, [pc, #36]	; (800ad54 <_tx_byte_pool_create+0x124>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3301      	adds	r3, #1
 800ad32:	4a08      	ldr	r2, [pc, #32]	; (800ad54 <_tx_byte_pool_create+0x124>)
 800ad34:	6013      	str	r3, [r2, #0]
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	f383 8810 	msr	PRIMASK, r3
}
 800ad40:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3738      	adds	r7, #56	; 0x38
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	ffffeeee 	.word	0xffffeeee
 800ad50:	42595445 	.word	0x42595445
 800ad54:	2004b8a4 	.word	0x2004b8a4
 800ad58:	2004b8a0 	.word	0x2004b8a0

0800ad5c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b097      	sub	sp, #92	; 0x5c
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800ad66:	2300      	movs	r3, #0
 800ad68:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800ad72:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad74:	b672      	cpsid	i
    return(int_posture);
 800ad76:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800ad78:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	689a      	ldr	r2, [r3, #8]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	3b02      	subs	r3, #2
 800ad84:	00db      	lsls	r3, r3, #3
 800ad86:	4413      	add	r3, r2
 800ad88:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d308      	bcc.n	800ada4 <_tx_byte_pool_search+0x48>
 800ad92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad94:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	f383 8810 	msr	PRIMASK, r3
}
 800ad9c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	653b      	str	r3, [r7, #80]	; 0x50
 800ada2:	e0dd      	b.n	800af60 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800ada4:	4b72      	ldr	r3, [pc, #456]	; (800af70 <_tx_byte_pool_search+0x214>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adae:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	695b      	ldr	r3, [r3, #20]
 800adb4:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	3301      	adds	r3, #1
 800adbc:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800adbe:	2300      	movs	r3, #0
 800adc0:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800adc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adc4:	3304      	adds	r3, #4
 800adc6:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800adc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adca:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800adcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a68      	ldr	r2, [pc, #416]	; (800af74 <_tx_byte_pool_search+0x218>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d143      	bne.n	800ae5e <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800add6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800add8:	2b00      	cmp	r3, #0
 800adda:	d104      	bne.n	800ade6 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ade0:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800ade2:	2301      	movs	r3, #1
 800ade4:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ade6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ade8:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800adf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800adf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adfa:	3b08      	subs	r3, #8
 800adfc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800adfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d257      	bcs.n	800aeb6 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800ae06:	2300      	movs	r3, #0
 800ae08:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ae10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae12:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ae14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a56      	ldr	r2, [pc, #344]	; (800af74 <_tx_byte_pool_search+0x218>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d113      	bne.n	800ae46 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ae1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae20:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	1e5a      	subs	r2, r3, #1
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d114      	bne.n	800ae68 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae42:	615a      	str	r2, [r3, #20]
 800ae44:	e010      	b.n	800ae68 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800ae50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d008      	beq.n	800ae68 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800ae56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae5c:	e004      	b.n	800ae68 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ae5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae60:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800ae68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800ae6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae70:	3b01      	subs	r3, #1
 800ae72:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae76:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	f383 8810 	msr	PRIMASK, r3
}
 800ae7e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae80:	f3ef 8310 	mrs	r3, PRIMASK
 800ae84:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ae86:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ae88:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae8a:	b672      	cpsid	i
    return(int_posture);
 800ae8c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800ae8e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d009      	beq.n	800aeae <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	3301      	adds	r3, #1
 800aea6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aeac:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800aeae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d186      	bne.n	800adc2 <_tx_byte_pool_search+0x66>
 800aeb4:	e000      	b.n	800aeb8 <_tx_byte_pool_search+0x15c>
                    break;
 800aeb6:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800aeb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d048      	beq.n	800af50 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800aebe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	2b13      	cmp	r3, #19
 800aec6:	d91e      	bls.n	800af06 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	3308      	adds	r3, #8
 800aecc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aece:	4413      	add	r3, r2
 800aed0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed4:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800aed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aed8:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800aee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee4:	3304      	adds	r3, #4
 800aee6:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800aee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeea:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800aeec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeee:	4a21      	ldr	r2, [pc, #132]	; (800af74 <_tx_byte_pool_search+0x218>)
 800aef0:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af00:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800af06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af08:	3304      	adds	r3, #4
 800af0a:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800af0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0e:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	689a      	ldr	r2, [r3, #8]
 800af1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	f1a3 0208 	sub.w	r2, r3, #8
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d105      	bne.n	800af3c <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800af30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af32:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	615a      	str	r2, [r3, #20]
 800af3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af3e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f383 8810 	msr	PRIMASK, r3
}
 800af46:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800af48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af4a:	3308      	adds	r3, #8
 800af4c:	653b      	str	r3, [r7, #80]	; 0x50
 800af4e:	e007      	b.n	800af60 <_tx_byte_pool_search+0x204>
 800af50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af52:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f383 8810 	msr	PRIMASK, r3
}
 800af5a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800af5c:	2300      	movs	r3, #0
 800af5e:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800af60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800af62:	4618      	mov	r0, r3
 800af64:	375c      	adds	r7, #92	; 0x5c
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	2004b8b0 	.word	0x2004b8b0
 800af74:	ffffeeee 	.word	0xffffeeee

0800af78 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800af7c:	f000 fdd8 	bl	800bb30 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800af80:	f001 f960 	bl	800c244 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800af84:	4b12      	ldr	r3, [pc, #72]	; (800afd0 <_tx_initialize_high_level+0x58>)
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <_tx_initialize_high_level+0x5c>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800af90:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <_tx_initialize_high_level+0x60>)
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	4b11      	ldr	r3, [pc, #68]	; (800afdc <_tx_initialize_high_level+0x64>)
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800af9c:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <_tx_initialize_high_level+0x68>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	601a      	str	r2, [r3, #0]
 800afa2:	4b10      	ldr	r3, [pc, #64]	; (800afe4 <_tx_initialize_high_level+0x6c>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800afa8:	4b0f      	ldr	r3, [pc, #60]	; (800afe8 <_tx_initialize_high_level+0x70>)
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	4b0f      	ldr	r3, [pc, #60]	; (800afec <_tx_initialize_high_level+0x74>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800afb4:	4b0e      	ldr	r3, [pc, #56]	; (800aff0 <_tx_initialize_high_level+0x78>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	4b0e      	ldr	r3, [pc, #56]	; (800aff4 <_tx_initialize_high_level+0x7c>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800afc0:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <_tx_initialize_high_level+0x80>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	4b0d      	ldr	r3, [pc, #52]	; (800affc <_tx_initialize_high_level+0x84>)
 800afc8:	2200      	movs	r2, #0
 800afca:	601a      	str	r2, [r3, #0]
#endif
}
 800afcc:	bf00      	nop
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	2004b878 	.word	0x2004b878
 800afd4:	2004b87c 	.word	0x2004b87c
 800afd8:	2004b880 	.word	0x2004b880
 800afdc:	2004b884 	.word	0x2004b884
 800afe0:	2004b888 	.word	0x2004b888
 800afe4:	2004b88c 	.word	0x2004b88c
 800afe8:	2004b898 	.word	0x2004b898
 800afec:	2004b89c 	.word	0x2004b89c
 800aff0:	2004b8a0 	.word	0x2004b8a0
 800aff4:	2004b8a4 	.word	0x2004b8a4
 800aff8:	2004b890 	.word	0x2004b890
 800affc:	2004b894 	.word	0x2004b894

0800b000 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b004:	4b10      	ldr	r3, [pc, #64]	; (800b048 <_tx_initialize_kernel_enter+0x48>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b00c:	d00c      	beq.n	800b028 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b00e:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <_tx_initialize_kernel_enter+0x48>)
 800b010:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b014:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b016:	f7f5 f92d 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b01a:	f7ff ffad 	bl	800af78 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b01e:	4b0b      	ldr	r3, [pc, #44]	; (800b04c <_tx_initialize_kernel_enter+0x4c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3301      	adds	r3, #1
 800b024:	4a09      	ldr	r2, [pc, #36]	; (800b04c <_tx_initialize_kernel_enter+0x4c>)
 800b026:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b028:	4b07      	ldr	r3, [pc, #28]	; (800b048 <_tx_initialize_kernel_enter+0x48>)
 800b02a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b02e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <_tx_initialize_kernel_enter+0x50>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4618      	mov	r0, r3
 800b036:	f7f5 fbd5 	bl	80007e4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b03a:	4b03      	ldr	r3, [pc, #12]	; (800b048 <_tx_initialize_kernel_enter+0x48>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b040:	f7f5 f95e 	bl	8000300 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b044:	bf00      	nop
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20025814 	.word	0x20025814
 800b04c:	2004b948 	.word	0x2004b948
 800b050:	2004b8a8 	.word	0x2004b8a8

0800b054 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	; 0x38
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b05e:	f3ef 8310 	mrs	r3, PRIMASK
 800b062:	623b      	str	r3, [r7, #32]
    return(posture);
 800b064:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b066:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b068:	b672      	cpsid	i
    return(int_posture);
 800b06a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b06c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b072:	4a37      	ldr	r2, [pc, #220]	; (800b150 <_tx_queue_cleanup+0xfc>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d161      	bne.n	800b13c <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b07e:	683a      	ldr	r2, [r7, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d15b      	bne.n	800b13c <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b088:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d055      	beq.n	800b13c <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a2f      	ldr	r2, [pc, #188]	; (800b154 <_tx_queue_cleanup+0x100>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d150      	bne.n	800b13c <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d04c      	beq.n	800b13c <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ac:	1e5a      	subs	r2, r3, #1
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d103      	bne.n	800b0c6 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	629a      	str	r2, [r3, #40]	; 0x28
 800b0c4:	e013      	b.n	800b0ee <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ca:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0d0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0d6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0dc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d102      	bne.n	800b0ee <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ec:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	d122      	bne.n	800b13c <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d004      	beq.n	800b108 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	220b      	movs	r2, #11
 800b102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b106:	e003      	b.n	800b110 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	220a      	movs	r2, #10
 800b10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b110:	4b11      	ldr	r3, [pc, #68]	; (800b158 <_tx_queue_cleanup+0x104>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3301      	adds	r3, #1
 800b116:	4a10      	ldr	r2, [pc, #64]	; (800b158 <_tx_queue_cleanup+0x104>)
 800b118:	6013      	str	r3, [r2, #0]
 800b11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	f383 8810 	msr	PRIMASK, r3
}
 800b124:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fdc4 	bl	800bcb4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b12c:	f3ef 8310 	mrs	r3, PRIMASK
 800b130:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b132:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b134:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b136:	b672      	cpsid	i
    return(int_posture);
 800b138:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b13a:	637b      	str	r3, [r7, #52]	; 0x34
 800b13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f383 8810 	msr	PRIMASK, r3
}
 800b146:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b148:	bf00      	nop
 800b14a:	3738      	adds	r7, #56	; 0x38
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	0800b055 	.word	0x0800b055
 800b154:	51554555 	.word	0x51554555
 800b158:	2004b948 	.word	0x2004b948

0800b15c <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08c      	sub	sp, #48	; 0x30
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b16a:	2238      	movs	r2, #56	; 0x38
 800b16c:	2100      	movs	r1, #0
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f01a fc00 	bl	8025974 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b186:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18a:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 800b18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	fb02 f303 	mul.w	r3, r2, r3
 800b194:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	699a      	ldr	r2, [r3, #24]
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	441a      	add	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ba:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1c0:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b1c8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b1ca:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1cc:	b672      	cpsid	i
    return(int_posture);
 800b1ce:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b1d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	4a18      	ldr	r2, [pc, #96]	; (800b238 <_tx_queue_create+0xdc>)
 800b1d6:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b1d8:	4b18      	ldr	r3, [pc, #96]	; (800b23c <_tx_queue_create+0xe0>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d109      	bne.n	800b1f4 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b1e0:	4a17      	ldr	r2, [pc, #92]	; (800b240 <_tx_queue_create+0xe4>)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	635a      	str	r2, [r3, #52]	; 0x34
 800b1f2:	e011      	b.n	800b218 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b1f4:	4b12      	ldr	r3, [pc, #72]	; (800b240 <_tx_queue_create+0xe4>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fe:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	69fa      	ldr	r2, [r7, #28]
 800b210:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6a3a      	ldr	r2, [r7, #32]
 800b216:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b218:	4b08      	ldr	r3, [pc, #32]	; (800b23c <_tx_queue_create+0xe0>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3301      	adds	r3, #1
 800b21e:	4a07      	ldr	r2, [pc, #28]	; (800b23c <_tx_queue_create+0xe0>)
 800b220:	6013      	str	r3, [r2, #0]
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	f383 8810 	msr	PRIMASK, r3
}
 800b22c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3730      	adds	r7, #48	; 0x30
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	51554555 	.word	0x51554555
 800b23c:	2004b884 	.word	0x2004b884
 800b240:	2004b880 	.word	0x2004b880

0800b244 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b096      	sub	sp, #88	; 0x58
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b250:	2300      	movs	r3, #0
 800b252:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b254:	f3ef 8310 	mrs	r3, PRIMASK
 800b258:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b25c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b25e:	b672      	cpsid	i
    return(int_posture);
 800b260:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800b262:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b268:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f000 8136 	beq.w	800b4e0 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b276:	2b00      	cmp	r3, #0
 800b278:	d13c      	bne.n	800b2f4 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b28a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b28c:	1d13      	adds	r3, r2, #4
 800b28e:	657b      	str	r3, [r7, #84]	; 0x54
 800b290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b292:	1d19      	adds	r1, r3, #4
 800b294:	6539      	str	r1, [r7, #80]	; 0x50
 800b296:	6812      	ldr	r2, [r2, #0]
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d90e      	bls.n	800b2be <_tx_queue_receive+0x7a>
 800b2a0:	e007      	b.n	800b2b2 <_tx_queue_receive+0x6e>
 800b2a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2a4:	1d13      	adds	r3, r2, #4
 800b2a6:	657b      	str	r3, [r7, #84]	; 0x54
 800b2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2aa:	1d19      	adds	r1, r3, #4
 800b2ac:	6539      	str	r1, [r7, #80]	; 0x50
 800b2ae:	6812      	ldr	r2, [r2, #0]
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1f1      	bne.n	800b2a2 <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d102      	bne.n	800b2ce <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2d2:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	695b      	ldr	r3, [r3, #20]
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	1e5a      	subs	r2, r3, #1
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	611a      	str	r2, [r3, #16]
 800b2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	f383 8810 	msr	PRIMASK, r3
}
 800b2f2:	e163      	b.n	800b5bc <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800b2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b300:	2b01      	cmp	r3, #1
 800b302:	d153      	bne.n	800b3ac <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b308:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b316:	1d13      	adds	r3, r2, #4
 800b318:	657b      	str	r3, [r7, #84]	; 0x54
 800b31a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b31c:	1d19      	adds	r1, r3, #4
 800b31e:	6539      	str	r1, [r7, #80]	; 0x50
 800b320:	6812      	ldr	r2, [r2, #0]
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b326:	2b01      	cmp	r3, #1
 800b328:	d90e      	bls.n	800b348 <_tx_queue_receive+0x104>
 800b32a:	e007      	b.n	800b33c <_tx_queue_receive+0xf8>
 800b32c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b32e:	1d13      	adds	r3, r2, #4
 800b330:	657b      	str	r3, [r7, #84]	; 0x54
 800b332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b334:	1d19      	adds	r1, r3, #4
 800b336:	6539      	str	r1, [r7, #80]	; 0x50
 800b338:	6812      	ldr	r2, [r2, #0]
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b33e:	3b01      	subs	r3, #1
 800b340:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1f1      	bne.n	800b32c <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800b348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b34a:	3b01      	subs	r3, #1
 800b34c:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b350:	2b00      	cmp	r3, #0
 800b352:	d103      	bne.n	800b35c <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	629a      	str	r2, [r3, #40]	; 0x28
 800b35a:	e00e      	b.n	800b37a <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800b35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b360:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b366:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b36c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b372:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800b374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b378:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b37e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b382:	2200      	movs	r2, #0
 800b384:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b388:	2200      	movs	r2, #0
 800b38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b38e:	4b8e      	ldr	r3, [pc, #568]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3301      	adds	r3, #1
 800b394:	4a8c      	ldr	r2, [pc, #560]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b39a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	f383 8810 	msr	PRIMASK, r3
}
 800b3a2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800b3a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3a6:	f000 fc85 	bl	800bcb4 <_tx_thread_system_resume>
 800b3aa:	e107      	b.n	800b5bc <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b3bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3be:	1d13      	adds	r3, r2, #4
 800b3c0:	657b      	str	r3, [r7, #84]	; 0x54
 800b3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3c4:	1d19      	adds	r1, r3, #4
 800b3c6:	6539      	str	r1, [r7, #80]	; 0x50
 800b3c8:	6812      	ldr	r2, [r2, #0]
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d90e      	bls.n	800b3f0 <_tx_queue_receive+0x1ac>
 800b3d2:	e007      	b.n	800b3e4 <_tx_queue_receive+0x1a0>
 800b3d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3d6:	1d13      	adds	r3, r2, #4
 800b3d8:	657b      	str	r3, [r7, #84]	; 0x54
 800b3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3dc:	1d19      	adds	r1, r3, #4
 800b3de:	6539      	str	r1, [r7, #80]	; 0x50
 800b3e0:	6812      	ldr	r2, [r2, #0]
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1f1      	bne.n	800b3d4 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d102      	bne.n	800b400 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b404:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800b406:	4b70      	ldr	r3, [pc, #448]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	3301      	adds	r3, #1
 800b40c:	4a6e      	ldr	r2, [pc, #440]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b40e:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800b410:	4b6d      	ldr	r3, [pc, #436]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3b01      	subs	r3, #1
 800b416:	4a6c      	ldr	r2, [pc, #432]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b418:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b41e:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b424:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b42c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b42e:	1d13      	adds	r3, r2, #4
 800b430:	657b      	str	r3, [r7, #84]	; 0x54
 800b432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b434:	1d19      	adds	r1, r3, #4
 800b436:	6539      	str	r1, [r7, #80]	; 0x50
 800b438:	6812      	ldr	r2, [r2, #0]
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d90e      	bls.n	800b460 <_tx_queue_receive+0x21c>
 800b442:	e007      	b.n	800b454 <_tx_queue_receive+0x210>
 800b444:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b446:	1d13      	adds	r3, r2, #4
 800b448:	657b      	str	r3, [r7, #84]	; 0x54
 800b44a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b44c:	1d19      	adds	r1, r3, #4
 800b44e:	6539      	str	r1, [r7, #80]	; 0x50
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b456:	3b01      	subs	r3, #1
 800b458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1f1      	bne.n	800b444 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b466:	429a      	cmp	r2, r3
 800b468:	d102      	bne.n	800b470 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b474:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800b47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b47e:	3b01      	subs	r3, #1
 800b480:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b484:	2b00      	cmp	r3, #0
 800b486:	d103      	bne.n	800b490 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	629a      	str	r2, [r3, #40]	; 0x28
 800b48e:	e00e      	b.n	800b4ae <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800b490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b494:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b49a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b49e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4a0:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4a6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800b4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4ac:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4b2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b4c2:	4b41      	ldr	r3, [pc, #260]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	4a3f      	ldr	r2, [pc, #252]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b4ca:	6013      	str	r3, [r2, #0]
 800b4cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4d0:	6a3b      	ldr	r3, [r7, #32]
 800b4d2:	f383 8810 	msr	PRIMASK, r3
}
 800b4d6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800b4d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b4da:	f000 fbeb 	bl	800bcb4 <_tx_thread_system_resume>
 800b4de:	e06d      	b.n	800b5bc <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d062      	beq.n	800b5ac <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b4e6:	4b38      	ldr	r3, [pc, #224]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d008      	beq.n	800b500 <_tx_queue_receive+0x2bc>
 800b4ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4f0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	f383 8810 	msr	PRIMASK, r3
}
 800b4f8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800b4fa:	230a      	movs	r3, #10
 800b4fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4fe:	e05d      	b.n	800b5bc <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b500:	4b32      	ldr	r3, [pc, #200]	; (800b5cc <_tx_queue_receive+0x388>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800b506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b508:	4a31      	ldr	r2, [pc, #196]	; (800b5d0 <_tx_queue_receive+0x38c>)
 800b50a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800b50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800b512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800b518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800b520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b522:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b526:	1c5a      	adds	r2, r3, #1
 800b528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800b52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b530:	2b00      	cmp	r3, #0
 800b532:	d109      	bne.n	800b548 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b538:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b53e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b544:	675a      	str	r2, [r3, #116]	; 0x74
 800b546:	e011      	b.n	800b56c <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54c:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b552:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b558:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b55e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b564:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b56a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800b56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800b574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b576:	2205      	movs	r2, #5
 800b578:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b57a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57c:	2201      	movs	r2, #1
 800b57e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b586:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3301      	adds	r3, #1
 800b58c:	4a0e      	ldr	r2, [pc, #56]	; (800b5c8 <_tx_queue_receive+0x384>)
 800b58e:	6013      	str	r3, [r2, #0]
 800b590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b592:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	f383 8810 	msr	PRIMASK, r3
}
 800b59a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b59c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b59e:	f000 fc89 	bl	800beb4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5aa:	e007      	b.n	800b5bc <_tx_queue_receive+0x378>
 800b5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ae:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	f383 8810 	msr	PRIMASK, r3
}
 800b5b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800b5b8:	230a      	movs	r3, #10
 800b5ba:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 800b5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3758      	adds	r7, #88	; 0x58
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	2004b948 	.word	0x2004b948
 800b5cc:	2004b8b0 	.word	0x2004b8b0
 800b5d0:	0800b055 	.word	0x0800b055

0800b5d4 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08e      	sub	sp, #56	; 0x38
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5de:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e2:	623b      	str	r3, [r7, #32]
    return(posture);
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b5e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5e8:	b672      	cpsid	i
    return(int_posture);
 800b5ea:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800b5ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5f2:	4a33      	ldr	r2, [pc, #204]	; (800b6c0 <_tx_semaphore_cleanup+0xec>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d158      	bne.n	800b6aa <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d152      	bne.n	800b6aa <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b608:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d04c      	beq.n	800b6aa <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a2b      	ldr	r2, [pc, #172]	; (800b6c4 <_tx_semaphore_cleanup+0xf0>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d147      	bne.n	800b6aa <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d043      	beq.n	800b6aa <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	1e5a      	subs	r2, r3, #1
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d103      	bne.n	800b646 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	2200      	movs	r2, #0
 800b642:	60da      	str	r2, [r3, #12]
 800b644:	e013      	b.n	800b66e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b64a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b650:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b656:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b65c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800b65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	429a      	cmp	r2, r3
 800b666:	d102      	bne.n	800b66e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b66c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	2b06      	cmp	r3, #6
 800b674:	d119      	bne.n	800b6aa <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	220d      	movs	r2, #13
 800b67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b67e:	4b12      	ldr	r3, [pc, #72]	; (800b6c8 <_tx_semaphore_cleanup+0xf4>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3301      	adds	r3, #1
 800b684:	4a10      	ldr	r2, [pc, #64]	; (800b6c8 <_tx_semaphore_cleanup+0xf4>)
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	f383 8810 	msr	PRIMASK, r3
}
 800b692:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fb0d 	bl	800bcb4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b69a:	f3ef 8310 	mrs	r3, PRIMASK
 800b69e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b6a0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b6a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6a4:	b672      	cpsid	i
    return(int_posture);
 800b6a6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b6a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f383 8810 	msr	PRIMASK, r3
}
 800b6b4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b6b6:	bf00      	nop
 800b6b8:	3738      	adds	r7, #56	; 0x38
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	0800b5d5 	.word	0x0800b5d5
 800b6c4:	53454d41 	.word	0x53454d41
 800b6c8:	2004b948 	.word	0x2004b948

0800b6cc <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08a      	sub	sp, #40	; 0x28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800b6d8:	221c      	movs	r2, #28
 800b6da:	2100      	movs	r1, #0
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f01a f949 	bl	8025974 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b6f2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b6f4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b6f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6f8:	b672      	cpsid	i
    return(int_posture);
 800b6fa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	4a18      	ldr	r2, [pc, #96]	; (800b764 <_tx_semaphore_create+0x98>)
 800b702:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800b704:	4b18      	ldr	r3, [pc, #96]	; (800b768 <_tx_semaphore_create+0x9c>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d109      	bne.n	800b720 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800b70c:	4a17      	ldr	r2, [pc, #92]	; (800b76c <_tx_semaphore_create+0xa0>)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	619a      	str	r2, [r3, #24]
 800b71e:	e011      	b.n	800b744 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800b720:	4b12      	ldr	r3, [pc, #72]	; (800b76c <_tx_semaphore_create+0xa0>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	69fa      	ldr	r2, [r7, #28]
 800b73c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6a3a      	ldr	r2, [r7, #32]
 800b742:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800b744:	4b08      	ldr	r3, [pc, #32]	; (800b768 <_tx_semaphore_create+0x9c>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3301      	adds	r3, #1
 800b74a:	4a07      	ldr	r2, [pc, #28]	; (800b768 <_tx_semaphore_create+0x9c>)
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f383 8810 	msr	PRIMASK, r3
}
 800b758:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3728      	adds	r7, #40	; 0x28
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	53454d41 	.word	0x53454d41
 800b768:	2004b87c 	.word	0x2004b87c
 800b76c:	2004b878 	.word	0x2004b878

0800b770 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08e      	sub	sp, #56	; 0x38
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b77a:	2300      	movs	r3, #0
 800b77c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b77e:	f3ef 8310 	mrs	r3, PRIMASK
 800b782:	623b      	str	r3, [r7, #32]
    return(posture);
 800b784:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b786:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b788:	b672      	cpsid	i
    return(int_posture);
 800b78a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800b78c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	1e5a      	subs	r2, r3, #1
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	609a      	str	r2, [r3, #8]
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	f383 8810 	msr	PRIMASK, r3
}
 800b7aa:	e068      	b.n	800b87e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d05d      	beq.n	800b86e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b7b2:	4b35      	ldr	r3, [pc, #212]	; (800b888 <_tx_semaphore_get+0x118>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d008      	beq.n	800b7cc <_tx_semaphore_get+0x5c>
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f383 8810 	msr	PRIMASK, r3
}
 800b7c4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800b7c6:	230d      	movs	r3, #13
 800b7c8:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ca:	e058      	b.n	800b87e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b7cc:	4b2f      	ldr	r3, [pc, #188]	; (800b88c <_tx_semaphore_get+0x11c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	4a2e      	ldr	r2, [pc, #184]	; (800b890 <_tx_semaphore_get+0x120>)
 800b7d6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b7e4:	1c5a      	adds	r2, r3, #1
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d109      	bne.n	800b808 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7f8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7fe:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b804:	675a      	str	r2, [r3, #116]	; 0x74
 800b806:	e011      	b.n	800b82c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b812:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b818:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b81e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b824:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b82a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	1c5a      	adds	r2, r3, #1
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	2206      	movs	r2, #6
 800b83a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83e:	2201      	movs	r2, #1
 800b840:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b848:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <_tx_semaphore_get+0x118>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3301      	adds	r3, #1
 800b84e:	4a0e      	ldr	r2, [pc, #56]	; (800b888 <_tx_semaphore_get+0x118>)
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f383 8810 	msr	PRIMASK, r3
}
 800b85c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b85e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b860:	f000 fb28 	bl	800beb4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b86a:	637b      	str	r3, [r7, #52]	; 0x34
 800b86c:	e007      	b.n	800b87e <_tx_semaphore_get+0x10e>
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f383 8810 	msr	PRIMASK, r3
}
 800b878:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800b87a:	230d      	movs	r3, #13
 800b87c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800b87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b880:	4618      	mov	r0, r3
 800b882:	3738      	adds	r7, #56	; 0x38
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	2004b948 	.word	0x2004b948
 800b88c:	2004b8b0 	.word	0x2004b8b0
 800b890:	0800b5d5 	.word	0x0800b5d5

0800b894 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08c      	sub	sp, #48	; 0x30
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b89c:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b8a2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b8a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8a6:	b672      	cpsid	i
    return(int_posture);
 800b8a8:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800b8aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10a      	bne.n	800b8ce <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	609a      	str	r2, [r3, #8]
 800b8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f383 8810 	msr	PRIMASK, r3
}
 800b8cc:	e033      	b.n	800b936 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d103      	bne.n	800b8e8 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	60da      	str	r2, [r3, #12]
 800b8e6:	e00e      	b.n	800b906 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ec:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a3a      	ldr	r2, [r7, #32]
 800b8f2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8f8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	69fa      	ldr	r2, [r7, #28]
 800b8fe:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	6a3a      	ldr	r2, [r7, #32]
 800b904:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b90a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	2200      	movs	r2, #0
 800b910:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	2200      	movs	r2, #0
 800b916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <_tx_semaphore_put+0xac>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	3301      	adds	r3, #1
 800b920:	4a07      	ldr	r2, [pc, #28]	; (800b940 <_tx_semaphore_put+0xac>)
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b926:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f383 8810 	msr	PRIMASK, r3
}
 800b92e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b932:	f000 f9bf 	bl	800bcb4 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3730      	adds	r7, #48	; 0x30
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	2004b948 	.word	0x2004b948

0800b944 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b092      	sub	sp, #72	; 0x48
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
 800b950:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800b952:	2300      	movs	r3, #0
 800b954:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800b956:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b958:	21ef      	movs	r1, #239	; 0xef
 800b95a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b95c:	f01a f80a 	bl	8025974 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800b960:	22b0      	movs	r2, #176	; 0xb0
 800b962:	2100      	movs	r1, #0
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f01a f805 	bl	8025974 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	683a      	ldr	r2, [r7, #0]
 800b97a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b980:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b986:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b98c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b992:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b99a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b9a0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2220      	movs	r2, #32
 800b9a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800b9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800b9ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9b4:	4413      	add	r3, r2
 800b9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9bc:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800b9be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d007      	beq.n	800b9d6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b9d4:	e006      	b.n	800b9e4 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9da:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2203      	movs	r2, #3
 800b9e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	4a48      	ldr	r2, [pc, #288]	; (800bb10 <_tx_thread_create+0x1cc>)
 800b9ee:	655a      	str	r2, [r3, #84]	; 0x54
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800b9f6:	4947      	ldr	r1, [pc, #284]	; (800bb14 <_tx_thread_create+0x1d0>)
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f7f4 fce7 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9fe:	f3ef 8310 	mrs	r3, PRIMASK
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800ba06:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba08:	b672      	cpsid	i
    return(int_posture);
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ba0c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	4a41      	ldr	r2, [pc, #260]	; (800bb18 <_tx_thread_create+0x1d4>)
 800ba12:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800ba14:	4b41      	ldr	r3, [pc, #260]	; (800bb1c <_tx_thread_create+0x1d8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10b      	bne.n	800ba34 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800ba1c:	4a40      	ldr	r2, [pc, #256]	; (800bb20 <_tx_thread_create+0x1dc>)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ba32:	e016      	b.n	800ba62 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800ba34:	4b3a      	ldr	r3, [pc, #232]	; (800bb20 <_tx_thread_create+0x1dc>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800ba3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba40:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ba42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800ba62:	4b2e      	ldr	r3, [pc, #184]	; (800bb1c <_tx_thread_create+0x1d8>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3301      	adds	r3, #1
 800ba68:	4a2c      	ldr	r2, [pc, #176]	; (800bb1c <_tx_thread_create+0x1d8>)
 800ba6a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ba6c:	4b2d      	ldr	r3, [pc, #180]	; (800bb24 <_tx_thread_create+0x1e0>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3301      	adds	r3, #1
 800ba72:	4a2c      	ldr	r2, [pc, #176]	; (800bb24 <_tx_thread_create+0x1e0>)
 800ba74:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800ba76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d129      	bne.n	800bad0 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ba7c:	f3ef 8305 	mrs	r3, IPSR
 800ba80:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800ba82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ba84:	4b28      	ldr	r3, [pc, #160]	; (800bb28 <_tx_thread_create+0x1e4>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ba8e:	d30d      	bcc.n	800baac <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ba90:	4b26      	ldr	r3, [pc, #152]	; (800bb2c <_tx_thread_create+0x1e8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ba96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d009      	beq.n	800bab0 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ba9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa0:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800baa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa8:	63da      	str	r2, [r3, #60]	; 0x3c
 800baaa:	e001      	b.n	800bab0 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800baac:	2300      	movs	r3, #0
 800baae:	647b      	str	r3, [r7, #68]	; 0x44
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	f383 8810 	msr	PRIMASK, r3
}
 800baba:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f000 f8f9 	bl	800bcb4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800bac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d01e      	beq.n	800bb06 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800bac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bacc:	63da      	str	r2, [r3, #60]	; 0x3c
 800bace:	e01a      	b.n	800bb06 <_tx_thread_create+0x1c2>
 800bad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	f383 8810 	msr	PRIMASK, r3
}
 800bada:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800badc:	f3ef 8310 	mrs	r3, PRIMASK
 800bae0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bae2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bae4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bae6:	b672      	cpsid	i
    return(int_posture);
 800bae8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800baea:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800baec:	4b0d      	ldr	r3, [pc, #52]	; (800bb24 <_tx_thread_create+0x1e0>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	4a0c      	ldr	r2, [pc, #48]	; (800bb24 <_tx_thread_create+0x1e0>)
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	f383 8810 	msr	PRIMASK, r3
}
 800bb00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bb02:	f000 f89d 	bl	800bc40 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3748      	adds	r7, #72	; 0x48
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	0800c189 	.word	0x0800c189
 800bb14:	0800bba9 	.word	0x0800bba9
 800bb18:	54485244 	.word	0x54485244
 800bb1c:	2004b8bc 	.word	0x2004b8bc
 800bb20:	2004b8b8 	.word	0x2004b8b8
 800bb24:	2004b948 	.word	0x2004b948
 800bb28:	20025814 	.word	0x20025814
 800bb2c:	2004b8b4 	.word	0x2004b8b4

0800bb30 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800bb34:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <_tx_thread_initialize+0x50>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800bb3a:	4b12      	ldr	r3, [pc, #72]	; (800bb84 <_tx_thread_initialize+0x54>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	4b11      	ldr	r3, [pc, #68]	; (800bb88 <_tx_thread_initialize+0x58>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bb46:	4b11      	ldr	r3, [pc, #68]	; (800bb8c <_tx_thread_initialize+0x5c>)
 800bb48:	2220      	movs	r2, #32
 800bb4a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800bb4c:	2280      	movs	r2, #128	; 0x80
 800bb4e:	2100      	movs	r1, #0
 800bb50:	480f      	ldr	r0, [pc, #60]	; (800bb90 <_tx_thread_initialize+0x60>)
 800bb52:	f019 ff0f 	bl	8025974 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800bb56:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <_tx_thread_initialize+0x64>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800bb5c:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <_tx_thread_initialize+0x68>)
 800bb5e:	2200      	movs	r2, #0
 800bb60:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800bb62:	4b0e      	ldr	r3, [pc, #56]	; (800bb9c <_tx_thread_initialize+0x6c>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800bb68:	4b0d      	ldr	r3, [pc, #52]	; (800bba0 <_tx_thread_initialize+0x70>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800bb6e:	4b0d      	ldr	r3, [pc, #52]	; (800bba4 <_tx_thread_initialize+0x74>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800bb76:	4a0b      	ldr	r2, [pc, #44]	; (800bba4 <_tx_thread_initialize+0x74>)
 800bb78:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800bb7a:	bf00      	nop
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	2004b8b0 	.word	0x2004b8b0
 800bb84:	2004b8b4 	.word	0x2004b8b4
 800bb88:	2004b8c0 	.word	0x2004b8c0
 800bb8c:	2004b8c4 	.word	0x2004b8c4
 800bb90:	2004b8c8 	.word	0x2004b8c8
 800bb94:	2004b8b8 	.word	0x2004b8b8
 800bb98:	2004b8bc 	.word	0x2004b8bc
 800bb9c:	2004b948 	.word	0x2004b948
 800bba0:	2004b94c 	.word	0x2004b94c
 800bba4:	2004b950 	.word	0x2004b950

0800bba8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b088      	sub	sp, #32
 800bbac:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bbae:	4b21      	ldr	r3, [pc, #132]	; (800bc34 <_tx_thread_shell_entry+0x8c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb8:	69fa      	ldr	r2, [r7, #28]
 800bbba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	; (800bc38 <_tx_thread_shell_entry+0x90>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d003      	beq.n	800bbd0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800bbc8:	4b1b      	ldr	r3, [pc, #108]	; (800bc38 <_tx_thread_shell_entry+0x90>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	69f8      	ldr	r0, [r7, #28]
 800bbce:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbd0:	f3ef 8310 	mrs	r3, PRIMASK
 800bbd4:	607b      	str	r3, [r7, #4]
    return(posture);
 800bbd6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800bbd8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbda:	b672      	cpsid	i
    return(int_posture);
 800bbdc:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800bbde:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bbf2:	4b12      	ldr	r3, [pc, #72]	; (800bc3c <_tx_thread_shell_entry+0x94>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	4a10      	ldr	r2, [pc, #64]	; (800bc3c <_tx_thread_shell_entry+0x94>)
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	f383 8810 	msr	PRIMASK, r3
}
 800bc06:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800bc08:	f3ef 8314 	mrs	r3, CONTROL
 800bc0c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800bc0e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800bc10:	617b      	str	r3, [r7, #20]
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f023 0304 	bic.w	r3, r3, #4
 800bc18:	617b      	str	r3, [r7, #20]
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	f383 8814 	msr	CONTROL, r3
}
 800bc24:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800bc26:	69f8      	ldr	r0, [r7, #28]
 800bc28:	f000 f944 	bl	800beb4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800bc2c:	bf00      	nop
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	2004b8b0 	.word	0x2004b8b0
 800bc38:	2004b94c 	.word	0x2004b94c
 800bc3c:	2004b948 	.word	0x2004b948

0800bc40 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b089      	sub	sp, #36	; 0x24
 800bc44:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bc46:	4b17      	ldr	r3, [pc, #92]	; (800bca4 <_tx_thread_system_preempt_check+0x64>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d121      	bne.n	800bc96 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800bc52:	4b15      	ldr	r3, [pc, #84]	; (800bca8 <_tx_thread_system_preempt_check+0x68>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800bc58:	4b14      	ldr	r3, [pc, #80]	; (800bcac <_tx_thread_system_preempt_check+0x6c>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800bc5e:	69ba      	ldr	r2, [r7, #24]
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d017      	beq.n	800bc96 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bc66:	4b12      	ldr	r3, [pc, #72]	; (800bcb0 <_tx_thread_system_preempt_check+0x70>)
 800bc68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc6c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc6e:	f3ef 8305 	mrs	r3, IPSR
 800bc72:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800bc74:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10c      	bne.n	800bc94 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc7a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc7e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800bc80:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800bc82:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bc84:	b662      	cpsie	i
}
 800bc86:	bf00      	nop
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f383 8810 	msr	PRIMASK, r3
}
 800bc92:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800bc94:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800bc96:	bf00      	nop
 800bc98:	3724      	adds	r7, #36	; 0x24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	2004b948 	.word	0x2004b948
 800bca8:	2004b8b0 	.word	0x2004b8b0
 800bcac:	2004b8b4 	.word	0x2004b8b4
 800bcb0:	e000ed04 	.word	0xe000ed04

0800bcb4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b096      	sub	sp, #88	; 0x58
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcbc:	f3ef 8310 	mrs	r3, PRIMASK
 800bcc0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800bcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800bcc4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcc6:	b672      	cpsid	i
    return(int_posture);
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bcca:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d005      	beq.n	800bce0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	334c      	adds	r3, #76	; 0x4c
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 fb91 	bl	800c400 <_tx_timer_system_deactivate>
 800bcde:	e002      	b.n	800bce6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800bce6:	4b6c      	ldr	r3, [pc, #432]	; (800be98 <_tx_thread_system_resume+0x1e4>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	4a6a      	ldr	r2, [pc, #424]	; (800be98 <_tx_thread_system_resume+0x1e4>)
 800bcee:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f040 8083 	bne.w	800be00 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 8097 	beq.w	800be32 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d172      	bne.n	800bdf2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd16:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800bd18:	4a60      	ldr	r2, [pc, #384]	; (800be9c <_tx_thread_system_resume+0x1e8>)
 800bd1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd20:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800bd22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d154      	bne.n	800bdd2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800bd28:	495c      	ldr	r1, [pc, #368]	; (800be9c <_tx_thread_system_resume+0x1e8>)
 800bd2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd42:	fa02 f303 	lsl.w	r3, r2, r3
 800bd46:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800bd48:	4b55      	ldr	r3, [pc, #340]	; (800bea0 <_tx_thread_system_resume+0x1ec>)
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	4a53      	ldr	r2, [pc, #332]	; (800bea0 <_tx_thread_system_resume+0x1ec>)
 800bd52:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800bd54:	4b53      	ldr	r3, [pc, #332]	; (800bea4 <_tx_thread_system_resume+0x1f0>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d269      	bcs.n	800be32 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800bd5e:	4a51      	ldr	r2, [pc, #324]	; (800bea4 <_tx_thread_system_resume+0x1f0>)
 800bd60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd62:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800bd64:	4b50      	ldr	r3, [pc, #320]	; (800bea8 <_tx_thread_system_resume+0x1f4>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800bd6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d103      	bne.n	800bd78 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800bd70:	4a4d      	ldr	r2, [pc, #308]	; (800bea8 <_tx_thread_system_resume+0x1f4>)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	e05c      	b.n	800be32 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800bd78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d257      	bcs.n	800be32 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800bd82:	4a49      	ldr	r2, [pc, #292]	; (800bea8 <_tx_thread_system_resume+0x1f4>)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8e:	f383 8810 	msr	PRIMASK, r3
}
 800bd92:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bd94:	4b40      	ldr	r3, [pc, #256]	; (800be98 <_tx_thread_system_resume+0x1e4>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800bd9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d174      	bne.n	800be8a <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bda0:	4b42      	ldr	r3, [pc, #264]	; (800beac <_tx_thread_system_resume+0x1f8>)
 800bda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bda6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bda8:	f3ef 8305 	mrs	r3, IPSR
 800bdac:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10c      	bne.n	800bdce <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdb4:	f3ef 8310 	mrs	r3, PRIMASK
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800bdbc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bdbe:	b662      	cpsie	i
}
 800bdc0:	bf00      	nop
 800bdc2:	6a3b      	ldr	r3, [r7, #32]
 800bdc4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	f383 8810 	msr	PRIMASK, r3
}
 800bdcc:	bf00      	nop
}
 800bdce:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800bdd0:	e05b      	b.n	800be8a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800bdd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd6:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800bdd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800bdde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bde8:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdee:	621a      	str	r2, [r3, #32]
 800bdf0:	e01f      	b.n	800be32 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2203      	movs	r2, #3
 800bdfc:	631a      	str	r2, [r3, #48]	; 0x30
 800bdfe:	e018      	b.n	800be32 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be04:	2b01      	cmp	r3, #1
 800be06:	d014      	beq.n	800be32 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d010      	beq.n	800be32 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be14:	2b00      	cmp	r3, #0
 800be16:	d106      	bne.n	800be26 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	631a      	str	r2, [r3, #48]	; 0x30
 800be24:	e005      	b.n	800be32 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2203      	movs	r2, #3
 800be30:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800be32:	4b1f      	ldr	r3, [pc, #124]	; (800beb0 <_tx_thread_system_resume+0x1fc>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	63bb      	str	r3, [r7, #56]	; 0x38
 800be38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be3a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	f383 8810 	msr	PRIMASK, r3
}
 800be42:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800be44:	4b18      	ldr	r3, [pc, #96]	; (800bea8 <_tx_thread_system_resume+0x1f4>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d020      	beq.n	800be90 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800be4e:	4b12      	ldr	r3, [pc, #72]	; (800be98 <_tx_thread_system_resume+0x1e4>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800be54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be56:	2b00      	cmp	r3, #0
 800be58:	d11a      	bne.n	800be90 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800be5a:	4b14      	ldr	r3, [pc, #80]	; (800beac <_tx_thread_system_resume+0x1f8>)
 800be5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be60:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be62:	f3ef 8305 	mrs	r3, IPSR
 800be66:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800be68:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10f      	bne.n	800be8e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be6e:	f3ef 8310 	mrs	r3, PRIMASK
 800be72:	613b      	str	r3, [r7, #16]
    return(posture);
 800be74:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800be76:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800be78:	b662      	cpsie	i
}
 800be7a:	bf00      	nop
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	f383 8810 	msr	PRIMASK, r3
}
 800be86:	bf00      	nop
}
 800be88:	e001      	b.n	800be8e <_tx_thread_system_resume+0x1da>
                                return;
 800be8a:	bf00      	nop
 800be8c:	e000      	b.n	800be90 <_tx_thread_system_resume+0x1dc>
 800be8e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800be90:	3758      	adds	r7, #88	; 0x58
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	2004b948 	.word	0x2004b948
 800be9c:	2004b8c8 	.word	0x2004b8c8
 800bea0:	2004b8c0 	.word	0x2004b8c0
 800bea4:	2004b8c4 	.word	0x2004b8c4
 800bea8:	2004b8b4 	.word	0x2004b8b4
 800beac:	e000ed04 	.word	0xe000ed04
 800beb0:	2004b8b0 	.word	0x2004b8b0

0800beb4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b09e      	sub	sp, #120	; 0x78
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800bebc:	4b81      	ldr	r3, [pc, #516]	; (800c0c4 <_tx_thread_system_suspend+0x210>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bec2:	f3ef 8310 	mrs	r3, PRIMASK
 800bec6:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800bec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800beca:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800becc:	b672      	cpsid	i
    return(int_posture);
 800bece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800bed0:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d112      	bne.n	800bf00 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bede:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800bee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d008      	beq.n	800bef8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800bee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beec:	d004      	beq.n	800bef8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	334c      	adds	r3, #76	; 0x4c
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 fa22 	bl	800c33c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	4a72      	ldr	r2, [pc, #456]	; (800c0c8 <_tx_thread_system_suspend+0x214>)
 800befe:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800bf00:	4b72      	ldr	r3, [pc, #456]	; (800c0cc <_tx_thread_system_suspend+0x218>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	4a71      	ldr	r2, [pc, #452]	; (800c0cc <_tx_thread_system_suspend+0x218>)
 800bf08:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	f040 80a6 	bne.w	800c060 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a1b      	ldr	r3, [r3, #32]
 800bf24:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800bf26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d015      	beq.n	800bf5a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf32:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800bf34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf38:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800bf3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf3e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800bf40:	4a63      	ldr	r2, [pc, #396]	; (800c0d0 <_tx_thread_system_suspend+0x21c>)
 800bf42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d157      	bne.n	800bffe <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800bf4e:	4960      	ldr	r1, [pc, #384]	; (800c0d0 <_tx_thread_system_suspend+0x21c>)
 800bf50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bf58:	e051      	b.n	800bffe <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800bf5a:	4a5d      	ldr	r2, [pc, #372]	; (800c0d0 <_tx_thread_system_suspend+0x21c>)
 800bf5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf5e:	2100      	movs	r1, #0
 800bf60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800bf64:	2201      	movs	r2, #1
 800bf66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf68:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800bf6e:	4b59      	ldr	r3, [pc, #356]	; (800c0d4 <_tx_thread_system_suspend+0x220>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf74:	43db      	mvns	r3, r3
 800bf76:	4013      	ands	r3, r2
 800bf78:	4a56      	ldr	r2, [pc, #344]	; (800c0d4 <_tx_thread_system_suspend+0x220>)
 800bf7a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800bf80:	4b54      	ldr	r3, [pc, #336]	; (800c0d4 <_tx_thread_system_suspend+0x220>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800bf86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d12b      	bne.n	800bfe4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bf8c:	4b52      	ldr	r3, [pc, #328]	; (800c0d8 <_tx_thread_system_suspend+0x224>)
 800bf8e:	2220      	movs	r2, #32
 800bf90:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800bf92:	4b52      	ldr	r3, [pc, #328]	; (800c0dc <_tx_thread_system_suspend+0x228>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf9a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf9e:	f383 8810 	msr	PRIMASK, r3
}
 800bfa2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bfa4:	4b49      	ldr	r3, [pc, #292]	; (800c0cc <_tx_thread_system_suspend+0x218>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800bfaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f040 8081 	bne.w	800c0b4 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bfb2:	4b4b      	ldr	r3, [pc, #300]	; (800c0e0 <_tx_thread_system_suspend+0x22c>)
 800bfb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfb8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bfba:	f3ef 8305 	mrs	r3, IPSR
 800bfbe:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800bfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10c      	bne.n	800bfe0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfc6:	f3ef 8310 	mrs	r3, PRIMASK
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800bfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800bfce:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bfd0:	b662      	cpsie	i
}
 800bfd2:	bf00      	nop
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfda:	f383 8810 	msr	PRIMASK, r3
}
 800bfde:	bf00      	nop
}
 800bfe0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800bfe2:	e067      	b.n	800c0b4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800bfe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfe6:	fa93 f3a3 	rbit	r3, r3
 800bfea:	65bb      	str	r3, [r7, #88]	; 0x58
 800bfec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfee:	fab3 f383 	clz	r3, r3
 800bff2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800bff4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bff8:	4413      	add	r3, r2
 800bffa:	4a37      	ldr	r2, [pc, #220]	; (800c0d8 <_tx_thread_system_suspend+0x224>)
 800bffc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800bffe:	4b37      	ldr	r3, [pc, #220]	; (800c0dc <_tx_thread_system_suspend+0x228>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	429a      	cmp	r2, r3
 800c006:	d12b      	bne.n	800c060 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c008:	4b33      	ldr	r3, [pc, #204]	; (800c0d8 <_tx_thread_system_suspend+0x224>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a30      	ldr	r2, [pc, #192]	; (800c0d0 <_tx_thread_system_suspend+0x21c>)
 800c00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c012:	4a32      	ldr	r2, [pc, #200]	; (800c0dc <_tx_thread_system_suspend+0x228>)
 800c014:	6013      	str	r3, [r2, #0]
 800c016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c018:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	f383 8810 	msr	PRIMASK, r3
}
 800c020:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c022:	4b2a      	ldr	r3, [pc, #168]	; (800c0cc <_tx_thread_system_suspend+0x218>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800c028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d144      	bne.n	800c0b8 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c02e:	4b2c      	ldr	r3, [pc, #176]	; (800c0e0 <_tx_thread_system_suspend+0x22c>)
 800c030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c034:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c036:	f3ef 8305 	mrs	r3, IPSR
 800c03a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10c      	bne.n	800c05c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c042:	f3ef 8310 	mrs	r3, PRIMASK
 800c046:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800c04a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c04c:	b662      	cpsie	i
}
 800c04e:	bf00      	nop
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	f383 8810 	msr	PRIMASK, r3
}
 800c05a:	bf00      	nop
}
 800c05c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800c05e:	e02b      	b.n	800c0b8 <_tx_thread_system_suspend+0x204>
 800c060:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c062:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	f383 8810 	msr	PRIMASK, r3
}
 800c06a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c06c:	4b1b      	ldr	r3, [pc, #108]	; (800c0dc <_tx_thread_system_suspend+0x228>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c072:	429a      	cmp	r2, r3
 800c074:	d022      	beq.n	800c0bc <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c076:	4b15      	ldr	r3, [pc, #84]	; (800c0cc <_tx_thread_system_suspend+0x218>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800c07c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d11c      	bne.n	800c0bc <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c082:	4b17      	ldr	r3, [pc, #92]	; (800c0e0 <_tx_thread_system_suspend+0x22c>)
 800c084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c088:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c08a:	f3ef 8305 	mrs	r3, IPSR
 800c08e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c090:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10c      	bne.n	800c0b0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c096:	f3ef 8310 	mrs	r3, PRIMASK
 800c09a:	617b      	str	r3, [r7, #20]
    return(posture);
 800c09c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800c09e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c0a0:	b662      	cpsie	i
}
 800c0a2:	bf00      	nop
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f383 8810 	msr	PRIMASK, r3
}
 800c0ae:	bf00      	nop
}
 800c0b0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800c0b2:	e003      	b.n	800c0bc <_tx_thread_system_suspend+0x208>
                return;
 800c0b4:	bf00      	nop
 800c0b6:	e002      	b.n	800c0be <_tx_thread_system_suspend+0x20a>
            return;
 800c0b8:	bf00      	nop
 800c0ba:	e000      	b.n	800c0be <_tx_thread_system_suspend+0x20a>
    return;
 800c0bc:	bf00      	nop
}
 800c0be:	3778      	adds	r7, #120	; 0x78
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	2004b8b0 	.word	0x2004b8b0
 800c0c8:	2004beb4 	.word	0x2004beb4
 800c0cc:	2004b948 	.word	0x2004b948
 800c0d0:	2004b8c8 	.word	0x2004b8c8
 800c0d4:	2004b8c0 	.word	0x2004b8c0
 800c0d8:	2004b8c4 	.word	0x2004b8c4
 800c0dc:	2004b8b4 	.word	0x2004b8b4
 800c0e0:	e000ed04 	.word	0xe000ed04

0800c0e4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c0ea:	4b21      	ldr	r3, [pc, #132]	; (800c170 <_tx_thread_time_slice+0x8c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800c0f4:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c0f8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c0fa:	b672      	cpsid	i
    return(int_posture);
 800c0fc:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800c0fe:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c100:	4b1c      	ldr	r3, [pc, #112]	; (800c174 <_tx_thread_time_slice+0x90>)
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d024      	beq.n	800c156 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c110:	2b00      	cmp	r3, #0
 800c112:	d120      	bne.n	800c156 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	69da      	ldr	r2, [r3, #28]
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	4a15      	ldr	r2, [pc, #84]	; (800c178 <_tx_thread_time_slice+0x94>)
 800c122:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	697a      	ldr	r2, [r7, #20]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d013      	beq.n	800c156 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c136:	429a      	cmp	r2, r3
 800c138:	d10d      	bne.n	800c156 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13e:	697a      	ldr	r2, [r7, #20]
 800c140:	6a12      	ldr	r2, [r2, #32]
 800c142:	490e      	ldr	r1, [pc, #56]	; (800c17c <_tx_thread_time_slice+0x98>)
 800c144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c148:	4b0d      	ldr	r3, [pc, #52]	; (800c180 <_tx_thread_time_slice+0x9c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a0b      	ldr	r2, [pc, #44]	; (800c17c <_tx_thread_time_slice+0x98>)
 800c14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c152:	4a0c      	ldr	r2, [pc, #48]	; (800c184 <_tx_thread_time_slice+0xa0>)
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f383 8810 	msr	PRIMASK, r3
}
 800c160:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800c162:	bf00      	nop
 800c164:	371c      	adds	r7, #28
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	2004b8b0 	.word	0x2004b8b0
 800c174:	2004b958 	.word	0x2004b958
 800c178:	2004beb4 	.word	0x2004beb4
 800c17c:	2004b8c8 	.word	0x2004b8c8
 800c180:	2004b8c4 	.word	0x2004b8c4
 800c184:	2004b8b4 	.word	0x2004b8b4

0800c188 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08a      	sub	sp, #40	; 0x28
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c194:	f3ef 8310 	mrs	r3, PRIMASK
 800c198:	617b      	str	r3, [r7, #20]
    return(posture);
 800c19a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c19c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c19e:	b672      	cpsid	i
    return(int_posture);
 800c1a0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800c1a2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a8:	2b04      	cmp	r3, #4
 800c1aa:	d10e      	bne.n	800c1ca <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800c1ac:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <_tx_thread_timeout+0x74>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	4a12      	ldr	r2, [pc, #72]	; (800c1fc <_tx_thread_timeout+0x74>)
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	6a3b      	ldr	r3, [r7, #32]
 800c1b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f383 8810 	msr	PRIMASK, r3
}
 800c1c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c1c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1c4:	f7ff fd76 	bl	800bcb4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c1c8:	e013      	b.n	800c1f2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1ce:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1d6:	61bb      	str	r3, [r7, #24]
 800c1d8:	6a3b      	ldr	r3, [r7, #32]
 800c1da:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	f383 8810 	msr	PRIMASK, r3
}
 800c1e2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d003      	beq.n	800c1f2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	69b9      	ldr	r1, [r7, #24]
 800c1ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1f0:	4798      	blx	r3
}
 800c1f2:	bf00      	nop
 800c1f4:	3728      	adds	r7, #40	; 0x28
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	2004b948 	.word	0x2004b948

0800c200 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c206:	f3ef 8310 	mrs	r3, PRIMASK
 800c20a:	607b      	str	r3, [r7, #4]
    return(posture);
 800c20c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c20e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c210:	b672      	cpsid	i
    return(int_posture);
 800c212:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800c214:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800c216:	4b09      	ldr	r3, [pc, #36]	; (800c23c <_tx_timer_expiration_process+0x3c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3301      	adds	r3, #1
 800c21c:	4a07      	ldr	r2, [pc, #28]	; (800c23c <_tx_timer_expiration_process+0x3c>)
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	f383 8810 	msr	PRIMASK, r3
}
 800c22a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800c22c:	4804      	ldr	r0, [pc, #16]	; (800c240 <_tx_timer_expiration_process+0x40>)
 800c22e:	f7ff fd41 	bl	800bcb4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c232:	bf00      	nop
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	2004b948 	.word	0x2004b948
 800c240:	2004b9f8 	.word	0x2004b9f8

0800c244 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800c244:	b590      	push	{r4, r7, lr}
 800c246:	b089      	sub	sp, #36	; 0x24
 800c248:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800c24a:	4b28      	ldr	r3, [pc, #160]	; (800c2ec <_tx_timer_initialize+0xa8>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800c250:	4b27      	ldr	r3, [pc, #156]	; (800c2f0 <_tx_timer_initialize+0xac>)
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c256:	4b27      	ldr	r3, [pc, #156]	; (800c2f4 <_tx_timer_initialize+0xb0>)
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800c25c:	4b26      	ldr	r3, [pc, #152]	; (800c2f8 <_tx_timer_initialize+0xb4>)
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800c262:	4b26      	ldr	r3, [pc, #152]	; (800c2fc <_tx_timer_initialize+0xb8>)
 800c264:	2200      	movs	r2, #0
 800c266:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800c268:	2280      	movs	r2, #128	; 0x80
 800c26a:	2100      	movs	r1, #0
 800c26c:	4824      	ldr	r0, [pc, #144]	; (800c300 <_tx_timer_initialize+0xbc>)
 800c26e:	f019 fb81 	bl	8025974 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800c272:	4b24      	ldr	r3, [pc, #144]	; (800c304 <_tx_timer_initialize+0xc0>)
 800c274:	4a22      	ldr	r2, [pc, #136]	; (800c300 <_tx_timer_initialize+0xbc>)
 800c276:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800c278:	4b23      	ldr	r3, [pc, #140]	; (800c308 <_tx_timer_initialize+0xc4>)
 800c27a:	4a21      	ldr	r2, [pc, #132]	; (800c300 <_tx_timer_initialize+0xbc>)
 800c27c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800c27e:	4b23      	ldr	r3, [pc, #140]	; (800c30c <_tx_timer_initialize+0xc8>)
 800c280:	4a23      	ldr	r2, [pc, #140]	; (800c310 <_tx_timer_initialize+0xcc>)
 800c282:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800c284:	4b21      	ldr	r3, [pc, #132]	; (800c30c <_tx_timer_initialize+0xc8>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3304      	adds	r3, #4
 800c28a:	4a20      	ldr	r2, [pc, #128]	; (800c30c <_tx_timer_initialize+0xc8>)
 800c28c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800c28e:	4b21      	ldr	r3, [pc, #132]	; (800c314 <_tx_timer_initialize+0xd0>)
 800c290:	4a21      	ldr	r2, [pc, #132]	; (800c318 <_tx_timer_initialize+0xd4>)
 800c292:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800c294:	4b21      	ldr	r3, [pc, #132]	; (800c31c <_tx_timer_initialize+0xd8>)
 800c296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c29a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800c29c:	4b20      	ldr	r3, [pc, #128]	; (800c320 <_tx_timer_initialize+0xdc>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <_tx_timer_initialize+0xd0>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a1d      	ldr	r2, [pc, #116]	; (800c31c <_tx_timer_initialize+0xd8>)
 800c2a8:	6812      	ldr	r2, [r2, #0]
 800c2aa:	491d      	ldr	r1, [pc, #116]	; (800c320 <_tx_timer_initialize+0xdc>)
 800c2ac:	6809      	ldr	r1, [r1, #0]
 800c2ae:	481c      	ldr	r0, [pc, #112]	; (800c320 <_tx_timer_initialize+0xdc>)
 800c2b0:	6800      	ldr	r0, [r0, #0]
 800c2b2:	2400      	movs	r4, #0
 800c2b4:	9405      	str	r4, [sp, #20]
 800c2b6:	2400      	movs	r4, #0
 800c2b8:	9404      	str	r4, [sp, #16]
 800c2ba:	9003      	str	r0, [sp, #12]
 800c2bc:	9102      	str	r1, [sp, #8]
 800c2be:	9201      	str	r2, [sp, #4]
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	4b18      	ldr	r3, [pc, #96]	; (800c324 <_tx_timer_initialize+0xe0>)
 800c2c4:	4a18      	ldr	r2, [pc, #96]	; (800c328 <_tx_timer_initialize+0xe4>)
 800c2c6:	4919      	ldr	r1, [pc, #100]	; (800c32c <_tx_timer_initialize+0xe8>)
 800c2c8:	4819      	ldr	r0, [pc, #100]	; (800c330 <_tx_timer_initialize+0xec>)
 800c2ca:	f7ff fb3b 	bl	800b944 <_tx_thread_create>
 800c2ce:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1e5      	bne.n	800c2a2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800c2d6:	4b17      	ldr	r3, [pc, #92]	; (800c334 <_tx_timer_initialize+0xf0>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800c2dc:	4b16      	ldr	r3, [pc, #88]	; (800c338 <_tx_timer_initialize+0xf4>)
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800c2e2:	bf00      	nop
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd90      	pop	{r4, r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	2004b954 	.word	0x2004b954
 800c2f0:	2004beb4 	.word	0x2004beb4
 800c2f4:	2004b958 	.word	0x2004b958
 800c2f8:	2004b9e8 	.word	0x2004b9e8
 800c2fc:	2004b9f4 	.word	0x2004b9f4
 800c300:	2004b95c 	.word	0x2004b95c
 800c304:	2004b9dc 	.word	0x2004b9dc
 800c308:	2004b9e4 	.word	0x2004b9e4
 800c30c:	2004b9e0 	.word	0x2004b9e0
 800c310:	2004b9d8 	.word	0x2004b9d8
 800c314:	2004baa8 	.word	0x2004baa8
 800c318:	2004bab4 	.word	0x2004bab4
 800c31c:	2004baac 	.word	0x2004baac
 800c320:	2004bab0 	.word	0x2004bab0
 800c324:	4154494d 	.word	0x4154494d
 800c328:	0800c471 	.word	0x0800c471
 800c32c:	080269f4 	.word	0x080269f4
 800c330:	2004b9f8 	.word	0x2004b9f8
 800c334:	2004b9ec 	.word	0x2004b9ec
 800c338:	2004b9f0 	.word	0x2004b9f0

0800c33c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b089      	sub	sp, #36	; 0x24
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d04a      	beq.n	800c3e6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c356:	d046      	beq.n	800c3e6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d142      	bne.n	800c3e6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	2b20      	cmp	r3, #32
 800c364:	d902      	bls.n	800c36c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800c366:	231f      	movs	r3, #31
 800c368:	61bb      	str	r3, [r7, #24]
 800c36a:	e002      	b.n	800c372 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	3b01      	subs	r3, #1
 800c370:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800c372:	4b20      	ldr	r3, [pc, #128]	; (800c3f4 <_tx_timer_system_activate+0xb8>)
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800c37e:	4b1e      	ldr	r3, [pc, #120]	; (800c3f8 <_tx_timer_system_activate+0xbc>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	69fa      	ldr	r2, [r7, #28]
 800c384:	429a      	cmp	r2, r3
 800c386:	d30b      	bcc.n	800c3a0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800c388:	4b1b      	ldr	r3, [pc, #108]	; (800c3f8 <_tx_timer_system_activate+0xbc>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	69fa      	ldr	r2, [r7, #28]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	109b      	asrs	r3, r3, #2
 800c392:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800c394:	4b19      	ldr	r3, [pc, #100]	; (800c3fc <_tx_timer_system_activate+0xc0>)
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d109      	bne.n	800c3bc <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	601a      	str	r2, [r3, #0]
 800c3ba:	e011      	b.n	800c3e0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	69fa      	ldr	r2, [r7, #28]
 800c3e4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800c3e6:	bf00      	nop
 800c3e8:	3724      	adds	r7, #36	; 0x24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	2004b9e4 	.word	0x2004b9e4
 800c3f8:	2004b9e0 	.word	0x2004b9e0
 800c3fc:	2004b9dc 	.word	0x2004b9dc

0800c400 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	699b      	ldr	r3, [r3, #24]
 800c40c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d026      	beq.n	800c462 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d108      	bne.n	800c434 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d117      	bne.n	800c45c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	e013      	b.n	800c45c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	695b      	ldr	r3, [r3, #20]
 800c438:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	693a      	ldr	r2, [r7, #16]
 800c444:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d105      	bne.n	800c45c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	693a      	ldr	r2, [r7, #16]
 800c45a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	619a      	str	r2, [r3, #24]
    }
}
 800c462:	bf00      	nop
 800c464:	371c      	adds	r7, #28
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
	...

0800c470 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b098      	sub	sp, #96	; 0x60
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800c478:	2300      	movs	r3, #0
 800c47a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a73      	ldr	r2, [pc, #460]	; (800c64c <_tx_timer_thread_entry+0x1dc>)
 800c480:	4293      	cmp	r3, r2
 800c482:	f040 80de 	bne.w	800c642 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c486:	f3ef 8310 	mrs	r3, PRIMASK
 800c48a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800c48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800c48e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c490:	b672      	cpsid	i
    return(int_posture);
 800c492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800c494:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800c496:	4b6e      	ldr	r3, [pc, #440]	; (800c650 <_tx_timer_thread_entry+0x1e0>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d003      	beq.n	800c4ac <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f107 020c 	add.w	r2, r7, #12
 800c4aa:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800c4ac:	4b68      	ldr	r3, [pc, #416]	; (800c650 <_tx_timer_thread_entry+0x1e0>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800c4b4:	4b66      	ldr	r3, [pc, #408]	; (800c650 <_tx_timer_thread_entry+0x1e0>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4a65      	ldr	r2, [pc, #404]	; (800c650 <_tx_timer_thread_entry+0x1e0>)
 800c4bc:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800c4be:	4b64      	ldr	r3, [pc, #400]	; (800c650 <_tx_timer_thread_entry+0x1e0>)
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	4b64      	ldr	r3, [pc, #400]	; (800c654 <_tx_timer_thread_entry+0x1e4>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d103      	bne.n	800c4d2 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800c4ca:	4b63      	ldr	r3, [pc, #396]	; (800c658 <_tx_timer_thread_entry+0x1e8>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a60      	ldr	r2, [pc, #384]	; (800c650 <_tx_timer_thread_entry+0x1e0>)
 800c4d0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800c4d2:	4b62      	ldr	r3, [pc, #392]	; (800c65c <_tx_timer_thread_entry+0x1ec>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	601a      	str	r2, [r3, #0]
 800c4d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4da:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	f383 8810 	msr	PRIMASK, r3
}
 800c4e2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4e4:	f3ef 8310 	mrs	r3, PRIMASK
 800c4e8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800c4ec:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4ee:	b672      	cpsid	i
    return(int_posture);
 800c4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c4f2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800c4f4:	e07f      	b.n	800c5f6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800c500:	2300      	movs	r3, #0
 800c502:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800c504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c508:	429a      	cmp	r2, r3
 800c50a:	d102      	bne.n	800c512 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800c50c:	2300      	movs	r3, #0
 800c50e:	60fb      	str	r3, [r7, #12]
 800c510:	e00e      	b.n	800c530 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800c512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c514:	695b      	ldr	r3, [r3, #20]
 800c516:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c51a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c51c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c522:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800c524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c526:	f107 020c 	add.w	r2, r7, #12
 800c52a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800c52c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c52e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b20      	cmp	r3, #32
 800c536:	d911      	bls.n	800c55c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800c540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c542:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800c544:	2300      	movs	r3, #0
 800c546:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c54a:	f107 0208 	add.w	r2, r7, #8
 800c54e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800c550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c554:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800c556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c558:	60bb      	str	r3, [r7, #8]
 800c55a:	e01a      	b.n	800c592 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800c55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800c562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800c568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c56e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800c570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d009      	beq.n	800c58c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c57a:	f107 0208 	add.w	r2, r7, #8
 800c57e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800c580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c584:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800c586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c588:	60bb      	str	r3, [r7, #8]
 800c58a:	e002      	b.n	800c592 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800c58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c58e:	2200      	movs	r2, #0
 800c590:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800c592:	4a33      	ldr	r2, [pc, #204]	; (800c660 <_tx_timer_thread_entry+0x1f0>)
 800c594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c596:	6013      	str	r3, [r2, #0]
 800c598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c59a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	f383 8810 	msr	PRIMASK, r3
}
 800c5a2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800c5a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d002      	beq.n	800c5b0 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800c5aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c5ae:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5b0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5b4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c5b8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5ba:	b672      	cpsid	i
    return(int_posture);
 800c5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c5be:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800c5c0:	4b27      	ldr	r3, [pc, #156]	; (800c660 <_tx_timer_thread_entry+0x1f0>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d105      	bne.n	800c5da <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800c5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800c5d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c5d6:	f7ff feb1 	bl	800c33c <_tx_timer_system_activate>
 800c5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	f383 8810 	msr	PRIMASK, r3
}
 800c5e4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c5ea:	623b      	str	r3, [r7, #32]
    return(posture);
 800c5ec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c5ee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5f0:	b672      	cpsid	i
    return(int_posture);
 800c5f2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c5f4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f47f af7c 	bne.w	800c4f6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800c5fe:	4b17      	ldr	r3, [pc, #92]	; (800c65c <_tx_timer_thread_entry+0x1ec>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d116      	bne.n	800c634 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800c606:	4b17      	ldr	r3, [pc, #92]	; (800c664 <_tx_timer_thread_entry+0x1f4>)
 800c608:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c60c:	2203      	movs	r2, #3
 800c60e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c612:	2201      	movs	r2, #1
 800c614:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <_tx_timer_thread_entry+0x1f8>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3301      	adds	r3, #1
 800c61c:	4a12      	ldr	r2, [pc, #72]	; (800c668 <_tx_timer_thread_entry+0x1f8>)
 800c61e:	6013      	str	r3, [r2, #0]
 800c620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c622:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f383 8810 	msr	PRIMASK, r3
}
 800c62a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c62c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c62e:	f7ff fc41 	bl	800beb4 <_tx_thread_system_suspend>
 800c632:	e728      	b.n	800c486 <_tx_timer_thread_entry+0x16>
 800c634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c636:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	f383 8810 	msr	PRIMASK, r3
}
 800c63e:	bf00      	nop
            TX_DISABLE
 800c640:	e721      	b.n	800c486 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800c642:	bf00      	nop
 800c644:	3760      	adds	r7, #96	; 0x60
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	4154494d 	.word	0x4154494d
 800c650:	2004b9e4 	.word	0x2004b9e4
 800c654:	2004b9e0 	.word	0x2004b9e0
 800c658:	2004b9dc 	.word	0x2004b9dc
 800c65c:	2004b9e8 	.word	0x2004b9e8
 800c660:	2004b9f4 	.word	0x2004b9f4
 800c664:	2004b9f8 	.word	0x2004b9f8
 800c668:	2004b948 	.word	0x2004b948

0800c66c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08a      	sub	sp, #40	; 0x28
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
 800c678:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c67a:	2300      	movs	r3, #0
 800c67c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d102      	bne.n	800c68a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c684:	2302      	movs	r3, #2
 800c686:	627b      	str	r3, [r7, #36]	; 0x24
 800c688:	e029      	b.n	800c6de <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a2d      	ldr	r2, [pc, #180]	; (800c744 <_txe_byte_allocate+0xd8>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d002      	beq.n	800c69a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c694:	2302      	movs	r3, #2
 800c696:	627b      	str	r3, [r7, #36]	; 0x24
 800c698:	e021      	b.n	800c6de <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6a4:	e01b      	b.n	800c6de <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d102      	bne.n	800c6b2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800c6ac:	2305      	movs	r3, #5
 800c6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800c6b0:	e015      	b.n	800c6de <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	69db      	ldr	r3, [r3, #28]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d902      	bls.n	800c6c2 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800c6bc:	2305      	movs	r3, #5
 800c6be:	627b      	str	r3, [r7, #36]	; 0x24
 800c6c0:	e00d      	b.n	800c6de <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00a      	beq.n	800c6de <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6c8:	f3ef 8305 	mrs	r3, IPSR
 800c6cc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c6ce:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c6d0:	4b1d      	ldr	r3, [pc, #116]	; (800c748 <_txe_byte_allocate+0xdc>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c6da:	2304      	movs	r3, #4
 800c6dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d108      	bne.n	800c6f6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c6e4:	4b19      	ldr	r3, [pc, #100]	; (800c74c <_txe_byte_allocate+0xe0>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c6ea:	6a3b      	ldr	r3, [r7, #32]
 800c6ec:	4a18      	ldr	r2, [pc, #96]	; (800c750 <_txe_byte_allocate+0xe4>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d101      	bne.n	800c6f6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c6f2:	2313      	movs	r3, #19
 800c6f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800c6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d114      	bne.n	800c726 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6fc:	f3ef 8305 	mrs	r3, IPSR
 800c700:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c702:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c704:	4b10      	ldr	r3, [pc, #64]	; (800c748 <_txe_byte_allocate+0xdc>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4313      	orrs	r3, r2
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00b      	beq.n	800c726 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c70e:	f3ef 8305 	mrs	r3, IPSR
 800c712:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c714:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c716:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <_txe_byte_allocate+0xdc>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c720:	d201      	bcs.n	800c726 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c722:	2313      	movs	r3, #19
 800c724:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d106      	bne.n	800c73a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	68b9      	ldr	r1, [r7, #8]
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f7fe f93a 	bl	800a9ac <_tx_byte_allocate>
 800c738:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3728      	adds	r7, #40	; 0x28
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	42595445 	.word	0x42595445
 800c748:	20025814 	.word	0x20025814
 800c74c:	2004b8b0 	.word	0x2004b8b0
 800c750:	2004b9f8 	.word	0x2004b9f8

0800c754 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b092      	sub	sp, #72	; 0x48
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
 800c760:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c762:	2300      	movs	r3, #0
 800c764:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d102      	bne.n	800c772 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c76c:	2302      	movs	r3, #2
 800c76e:	647b      	str	r3, [r7, #68]	; 0x44
 800c770:	e075      	b.n	800c85e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800c772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c774:	2b34      	cmp	r3, #52	; 0x34
 800c776:	d002      	beq.n	800c77e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c778:	2302      	movs	r3, #2
 800c77a:	647b      	str	r3, [r7, #68]	; 0x44
 800c77c:	e06f      	b.n	800c85e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c77e:	f3ef 8310 	mrs	r3, PRIMASK
 800c782:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c786:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c788:	b672      	cpsid	i
    return(int_posture);
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c78c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c78e:	4b3b      	ldr	r3, [pc, #236]	; (800c87c <_txe_byte_pool_create+0x128>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3301      	adds	r3, #1
 800c794:	4a39      	ldr	r2, [pc, #228]	; (800c87c <_txe_byte_pool_create+0x128>)
 800c796:	6013      	str	r3, [r2, #0]
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	f383 8810 	msr	PRIMASK, r3
}
 800c7a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800c7a4:	4b36      	ldr	r3, [pc, #216]	; (800c880 <_txe_byte_pool_create+0x12c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	643b      	str	r3, [r7, #64]	; 0x40
 800c7ae:	e009      	b.n	800c7c4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d00b      	beq.n	800c7d0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800c7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	643b      	str	r3, [r7, #64]	; 0x40
 800c7c4:	4b2f      	ldr	r3, [pc, #188]	; (800c884 <_txe_byte_pool_create+0x130>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d3f0      	bcc.n	800c7b0 <_txe_byte_pool_create+0x5c>
 800c7ce:	e000      	b.n	800c7d2 <_txe_byte_pool_create+0x7e>
                break;
 800c7d0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d6:	623b      	str	r3, [r7, #32]
    return(posture);
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c7da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c7dc:	b672      	cpsid	i
    return(int_posture);
 800c7de:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c7e0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c7e2:	4b26      	ldr	r3, [pc, #152]	; (800c87c <_txe_byte_pool_create+0x128>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	4a24      	ldr	r2, [pc, #144]	; (800c87c <_txe_byte_pool_create+0x128>)
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	f383 8810 	msr	PRIMASK, r3
}
 800c7f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c7f8:	f7ff fa22 	bl	800bc40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c800:	429a      	cmp	r2, r3
 800c802:	d102      	bne.n	800c80a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800c804:	2302      	movs	r3, #2
 800c806:	647b      	str	r3, [r7, #68]	; 0x44
 800c808:	e029      	b.n	800c85e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d102      	bne.n	800c816 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800c810:	2303      	movs	r3, #3
 800c812:	647b      	str	r3, [r7, #68]	; 0x44
 800c814:	e023      	b.n	800c85e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b63      	cmp	r3, #99	; 0x63
 800c81a:	d802      	bhi.n	800c822 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800c81c:	2305      	movs	r3, #5
 800c81e:	647b      	str	r3, [r7, #68]	; 0x44
 800c820:	e01d      	b.n	800c85e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c822:	4b19      	ldr	r3, [pc, #100]	; (800c888 <_txe_byte_pool_create+0x134>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82a:	4a18      	ldr	r2, [pc, #96]	; (800c88c <_txe_byte_pool_create+0x138>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d101      	bne.n	800c834 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c830:	2313      	movs	r3, #19
 800c832:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c834:	f3ef 8305 	mrs	r3, IPSR
 800c838:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c83a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c83c:	4b14      	ldr	r3, [pc, #80]	; (800c890 <_txe_byte_pool_create+0x13c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4313      	orrs	r3, r2
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00b      	beq.n	800c85e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c846:	f3ef 8305 	mrs	r3, IPSR
 800c84a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c84c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c84e:	4b10      	ldr	r3, [pc, #64]	; (800c890 <_txe_byte_pool_create+0x13c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4313      	orrs	r3, r2
 800c854:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c858:	d201      	bcs.n	800c85e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c85a:	2313      	movs	r3, #19
 800c85c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c860:	2b00      	cmp	r3, #0
 800c862:	d106      	bne.n	800c872 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	68b9      	ldr	r1, [r7, #8]
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f7fe f9e0 	bl	800ac30 <_tx_byte_pool_create>
 800c870:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c874:	4618      	mov	r0, r3
 800c876:	3748      	adds	r7, #72	; 0x48
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	2004b948 	.word	0x2004b948
 800c880:	2004b8a0 	.word	0x2004b8a0
 800c884:	2004b8a4 	.word	0x2004b8a4
 800c888:	2004b8b0 	.word	0x2004b8b0
 800c88c:	2004b9f8 	.word	0x2004b9f8
 800c890:	20025814 	.word	0x20025814

0800c894 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b094      	sub	sp, #80	; 0x50
 800c898:	af02      	add	r7, sp, #8
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
 800c8a0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d102      	bne.n	800c8b2 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800c8ac:	2309      	movs	r3, #9
 800c8ae:	647b      	str	r3, [r7, #68]	; 0x44
 800c8b0:	e083      	b.n	800c9ba <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800c8b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8b4:	2b38      	cmp	r3, #56	; 0x38
 800c8b6:	d002      	beq.n	800c8be <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800c8b8:	2309      	movs	r3, #9
 800c8ba:	647b      	str	r3, [r7, #68]	; 0x44
 800c8bc:	e07d      	b.n	800c9ba <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8be:	f3ef 8310 	mrs	r3, PRIMASK
 800c8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c8c6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8c8:	b672      	cpsid	i
    return(int_posture);
 800c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c8cc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c8ce:	4b43      	ldr	r3, [pc, #268]	; (800c9dc <_txe_queue_create+0x148>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	4a41      	ldr	r2, [pc, #260]	; (800c9dc <_txe_queue_create+0x148>)
 800c8d6:	6013      	str	r3, [r2, #0]
 800c8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8da:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8de:	f383 8810 	msr	PRIMASK, r3
}
 800c8e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800c8e4:	4b3e      	ldr	r3, [pc, #248]	; (800c9e0 <_txe_queue_create+0x14c>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c8ee:	e009      	b.n	800c904 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d00b      	beq.n	800c910 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800c8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800c8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c900:	3301      	adds	r3, #1
 800c902:	643b      	str	r3, [r7, #64]	; 0x40
 800c904:	4b37      	ldr	r3, [pc, #220]	; (800c9e4 <_txe_queue_create+0x150>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d3f0      	bcc.n	800c8f0 <_txe_queue_create+0x5c>
 800c90e:	e000      	b.n	800c912 <_txe_queue_create+0x7e>
                break;
 800c910:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c912:	f3ef 8310 	mrs	r3, PRIMASK
 800c916:	623b      	str	r3, [r7, #32]
    return(posture);
 800c918:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c91a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c91c:	b672      	cpsid	i
    return(int_posture);
 800c91e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c920:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c922:	4b2e      	ldr	r3, [pc, #184]	; (800c9dc <_txe_queue_create+0x148>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3b01      	subs	r3, #1
 800c928:	4a2c      	ldr	r2, [pc, #176]	; (800c9dc <_txe_queue_create+0x148>)
 800c92a:	6013      	str	r3, [r2, #0]
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c932:	f383 8810 	msr	PRIMASK, r3
}
 800c936:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c938:	f7ff f982 	bl	800bc40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c940:	429a      	cmp	r2, r3
 800c942:	d102      	bne.n	800c94a <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800c944:	2309      	movs	r3, #9
 800c946:	647b      	str	r3, [r7, #68]	; 0x44
 800c948:	e037      	b.n	800c9ba <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d102      	bne.n	800c956 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800c950:	2303      	movs	r3, #3
 800c952:	647b      	str	r3, [r7, #68]	; 0x44
 800c954:	e031      	b.n	800c9ba <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800c95c:	2305      	movs	r3, #5
 800c95e:	647b      	str	r3, [r7, #68]	; 0x44
 800c960:	e02b      	b.n	800c9ba <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b10      	cmp	r3, #16
 800c966:	d902      	bls.n	800c96e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800c968:	2305      	movs	r3, #5
 800c96a:	647b      	str	r3, [r7, #68]	; 0x44
 800c96c:	e025      	b.n	800c9ba <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800c96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c970:	089b      	lsrs	r3, r3, #2
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	429a      	cmp	r2, r3
 800c976:	d902      	bls.n	800c97e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800c978:	2305      	movs	r3, #5
 800c97a:	647b      	str	r3, [r7, #68]	; 0x44
 800c97c:	e01d      	b.n	800c9ba <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c97e:	4b1a      	ldr	r3, [pc, #104]	; (800c9e8 <_txe_queue_create+0x154>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c986:	4a19      	ldr	r2, [pc, #100]	; (800c9ec <_txe_queue_create+0x158>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d101      	bne.n	800c990 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c98c:	2313      	movs	r3, #19
 800c98e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c990:	f3ef 8305 	mrs	r3, IPSR
 800c994:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c996:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c998:	4b15      	ldr	r3, [pc, #84]	; (800c9f0 <_txe_queue_create+0x15c>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00b      	beq.n	800c9ba <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9a2:	f3ef 8305 	mrs	r3, IPSR
 800c9a6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c9a8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c9aa:	4b11      	ldr	r3, [pc, #68]	; (800c9f0 <_txe_queue_create+0x15c>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c9b4:	d201      	bcs.n	800c9ba <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c9b6:	2313      	movs	r3, #19
 800c9b8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d108      	bne.n	800c9d2 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800c9c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	68b9      	ldr	r1, [r7, #8]
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f7fe fbc6 	bl	800b15c <_tx_queue_create>
 800c9d0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c9d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3748      	adds	r7, #72	; 0x48
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	2004b948 	.word	0x2004b948
 800c9e0:	2004b880 	.word	0x2004b880
 800c9e4:	2004b884 	.word	0x2004b884
 800c9e8:	2004b8b0 	.word	0x2004b8b0
 800c9ec:	2004b9f8 	.word	0x2004b9f8
 800c9f0:	20025814 	.word	0x20025814

0800c9f4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ca00:	2300      	movs	r3, #0
 800ca02:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ca0a:	2309      	movs	r3, #9
 800ca0c:	61fb      	str	r3, [r7, #28]
 800ca0e:	e025      	b.n	800ca5c <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a18      	ldr	r2, [pc, #96]	; (800ca78 <_txe_queue_receive+0x84>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d002      	beq.n	800ca20 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ca1a:	2309      	movs	r3, #9
 800ca1c:	61fb      	str	r3, [r7, #28]
 800ca1e:	e01d      	b.n	800ca5c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d102      	bne.n	800ca2c <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800ca26:	2303      	movs	r3, #3
 800ca28:	61fb      	str	r3, [r7, #28]
 800ca2a:	e017      	b.n	800ca5c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d014      	beq.n	800ca5c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca32:	f3ef 8305 	mrs	r3, IPSR
 800ca36:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ca38:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ca3a:	4b10      	ldr	r3, [pc, #64]	; (800ca7c <_txe_queue_receive+0x88>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ca44:	2304      	movs	r3, #4
 800ca46:	61fb      	str	r3, [r7, #28]
 800ca48:	e008      	b.n	800ca5c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ca4a:	4b0d      	ldr	r3, [pc, #52]	; (800ca80 <_txe_queue_receive+0x8c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	4a0c      	ldr	r2, [pc, #48]	; (800ca84 <_txe_queue_receive+0x90>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d101      	bne.n	800ca5c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ca58:	2304      	movs	r3, #4
 800ca5a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d105      	bne.n	800ca6e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	68b9      	ldr	r1, [r7, #8]
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f7fe fbec 	bl	800b244 <_tx_queue_receive>
 800ca6c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800ca6e:	69fb      	ldr	r3, [r7, #28]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3720      	adds	r7, #32
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	51554555 	.word	0x51554555
 800ca7c:	20025814 	.word	0x20025814
 800ca80:	2004b8b0 	.word	0x2004b8b0
 800ca84:	2004b9f8 	.word	0x2004b9f8

0800ca88 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b092      	sub	sp, #72	; 0x48
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
 800ca94:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ca96:	2300      	movs	r3, #0
 800ca98:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d102      	bne.n	800caa6 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800caa0:	230c      	movs	r3, #12
 800caa2:	647b      	str	r3, [r7, #68]	; 0x44
 800caa4:	e054      	b.n	800cb50 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	2b1c      	cmp	r3, #28
 800caaa:	d002      	beq.n	800cab2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800caac:	230c      	movs	r3, #12
 800caae:	647b      	str	r3, [r7, #68]	; 0x44
 800cab0:	e04e      	b.n	800cb50 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cab2:	f3ef 8310 	mrs	r3, PRIMASK
 800cab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800caba:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cabc:	b672      	cpsid	i
    return(int_posture);
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cac0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cac2:	4b36      	ldr	r3, [pc, #216]	; (800cb9c <_txe_semaphore_create+0x114>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	3301      	adds	r3, #1
 800cac8:	4a34      	ldr	r2, [pc, #208]	; (800cb9c <_txe_semaphore_create+0x114>)
 800caca:	6013      	str	r3, [r2, #0]
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	f383 8810 	msr	PRIMASK, r3
}
 800cad6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800cad8:	4b31      	ldr	r3, [pc, #196]	; (800cba0 <_txe_semaphore_create+0x118>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800cade:	2300      	movs	r3, #0
 800cae0:	643b      	str	r3, [r7, #64]	; 0x40
 800cae2:	e009      	b.n	800caf8 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae8:	429a      	cmp	r2, r3
 800caea:	d00b      	beq.n	800cb04 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800caec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800caf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf4:	3301      	adds	r3, #1
 800caf6:	643b      	str	r3, [r7, #64]	; 0x40
 800caf8:	4b2a      	ldr	r3, [pc, #168]	; (800cba4 <_txe_semaphore_create+0x11c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d3f0      	bcc.n	800cae4 <_txe_semaphore_create+0x5c>
 800cb02:	e000      	b.n	800cb06 <_txe_semaphore_create+0x7e>
                break;
 800cb04:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb06:	f3ef 8310 	mrs	r3, PRIMASK
 800cb0a:	623b      	str	r3, [r7, #32]
    return(posture);
 800cb0c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cb0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb10:	b672      	cpsid	i
    return(int_posture);
 800cb12:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cb14:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cb16:	4b21      	ldr	r3, [pc, #132]	; (800cb9c <_txe_semaphore_create+0x114>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	4a1f      	ldr	r2, [pc, #124]	; (800cb9c <_txe_semaphore_create+0x114>)
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	f383 8810 	msr	PRIMASK, r3
}
 800cb2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cb2c:	f7ff f888 	bl	800bc40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d102      	bne.n	800cb3e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800cb38:	230c      	movs	r3, #12
 800cb3a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb3c:	e008      	b.n	800cb50 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cb3e:	4b1a      	ldr	r3, [pc, #104]	; (800cba8 <_txe_semaphore_create+0x120>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800cb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb46:	4a19      	ldr	r2, [pc, #100]	; (800cbac <_txe_semaphore_create+0x124>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d101      	bne.n	800cb50 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cb4c:	2313      	movs	r3, #19
 800cb4e:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cb50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d114      	bne.n	800cb80 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb56:	f3ef 8305 	mrs	r3, IPSR
 800cb5a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cb5c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cb5e:	4b14      	ldr	r3, [pc, #80]	; (800cbb0 <_txe_semaphore_create+0x128>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00b      	beq.n	800cb80 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb68:	f3ef 8305 	mrs	r3, IPSR
 800cb6c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cb6e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cb70:	4b0f      	ldr	r3, [pc, #60]	; (800cbb0 <_txe_semaphore_create+0x128>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cb7a:	d201      	bcs.n	800cb80 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cb7c:	2313      	movs	r3, #19
 800cb7e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cb80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d105      	bne.n	800cb92 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	68b9      	ldr	r1, [r7, #8]
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f7fe fd9e 	bl	800b6cc <_tx_semaphore_create>
 800cb90:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800cb92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3748      	adds	r7, #72	; 0x48
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	2004b948 	.word	0x2004b948
 800cba0:	2004b878 	.word	0x2004b878
 800cba4:	2004b87c 	.word	0x2004b87c
 800cba8:	2004b8b0 	.word	0x2004b8b0
 800cbac:	2004b9f8 	.word	0x2004b9f8
 800cbb0:	20025814 	.word	0x20025814

0800cbb4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b086      	sub	sp, #24
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d102      	bne.n	800cbce <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cbc8:	230c      	movs	r3, #12
 800cbca:	617b      	str	r3, [r7, #20]
 800cbcc:	e01f      	b.n	800cc0e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a15      	ldr	r2, [pc, #84]	; (800cc28 <_txe_semaphore_get+0x74>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d002      	beq.n	800cbde <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cbd8:	230c      	movs	r3, #12
 800cbda:	617b      	str	r3, [r7, #20]
 800cbdc:	e017      	b.n	800cc0e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d014      	beq.n	800cc0e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cbe4:	f3ef 8305 	mrs	r3, IPSR
 800cbe8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800cbea:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cbec:	4b0f      	ldr	r3, [pc, #60]	; (800cc2c <_txe_semaphore_get+0x78>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d002      	beq.n	800cbfc <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cbf6:	2304      	movs	r3, #4
 800cbf8:	617b      	str	r3, [r7, #20]
 800cbfa:	e008      	b.n	800cc0e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800cbfc:	4b0c      	ldr	r3, [pc, #48]	; (800cc30 <_txe_semaphore_get+0x7c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	4a0b      	ldr	r2, [pc, #44]	; (800cc34 <_txe_semaphore_get+0x80>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d101      	bne.n	800cc0e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800cc0a:	2304      	movs	r3, #4
 800cc0c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7fe fdaa 	bl	800b770 <_tx_semaphore_get>
 800cc1c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800cc1e:	697b      	ldr	r3, [r7, #20]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	53454d41 	.word	0x53454d41
 800cc2c:	20025814 	.word	0x20025814
 800cc30:	2004b8b0 	.word	0x2004b8b0
 800cc34:	2004b9f8 	.word	0x2004b9f8

0800cc38 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d102      	bne.n	800cc4c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cc46:	230c      	movs	r3, #12
 800cc48:	60fb      	str	r3, [r7, #12]
 800cc4a:	e00b      	b.n	800cc64 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a07      	ldr	r2, [pc, #28]	; (800cc70 <_txe_semaphore_put+0x38>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d002      	beq.n	800cc5c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cc56:	230c      	movs	r3, #12
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	e003      	b.n	800cc64 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7fe fe19 	bl	800b894 <_tx_semaphore_put>
 800cc62:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800cc64:	68fb      	ldr	r3, [r7, #12]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	53454d41 	.word	0x53454d41

0800cc74 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800cc78:	f005 fce2 	bl	8012640 <touchgfx_components_init>
  touchgfx_init();
 800cc7c:	f005 fcb6 	bl	80125ec <touchgfx_init>
}
 800cc80:	bf00      	nop
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
    {
 800cc8c:	4a04      	ldr	r2, [pc, #16]	; (800cca0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	601a      	str	r2, [r3, #0]
    }
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4618      	mov	r0, r3
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	08027a64 	.word	0x08027a64

0800cca4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
    }
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7ff ffe9 	bl	800cc84 <_ZN8touchgfx12FontProviderD1Ev>
 800ccb2:	2104      	movs	r1, #4
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f018 fdb3 	bl	8025820 <_ZdlPvj>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	460b      	mov	r3, r1
 800ccce:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ccd0:	887b      	ldrh	r3, [r7, #2]
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d010      	beq.n	800ccf8 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	dc13      	bgt.n	800cd02 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d005      	beq.n	800ccee <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800cce2:	e00e      	b.n	800cd02 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800cce4:	f003 fdce 	bl	8010884 <_ZN17TypedTextDatabase8getFontsEv>
 800cce8:	4603      	mov	r3, r0
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	e00a      	b.n	800cd04 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800ccee:	f003 fdc9 	bl	8010884 <_ZN17TypedTextDatabase8getFontsEv>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	e005      	b.n	800cd04 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ccf8:	f003 fdc4 	bl	8010884 <_ZN17TypedTextDatabase8getFontsEv>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	e000      	b.n	800cd04 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800cd02:	2300      	movs	r3, #0
    }
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	4a05      	ldr	r2, [pc, #20]	; (800cd2c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	601a      	str	r2, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7ff ffb1 	bl	800cc84 <_ZN8touchgfx12FontProviderD1Ev>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	08027a50 	.word	0x08027a50

0800cd30 <_ZN23ApplicationFontProviderD0Ev>:
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff ffe7 	bl	800cd0c <_ZN23ApplicationFontProviderD1Ev>
 800cd3e:	2104      	movs	r1, #4
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f018 fd6d 	bl	8025820 <_ZdlPvj>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
    {
 800cd58:	4a04      	ldr	r2, [pc, #16]	; (800cd6c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	601a      	str	r2, [r3, #0]
    }
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4618      	mov	r0, r3
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	08027f24 	.word	0x08027f24

0800cd70 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
    }
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7ff ffe9 	bl	800cd50 <_ZN8touchgfx4FontD1Ev>
 800cd7e:	2110      	movs	r1, #16
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f018 fd4d 	bl	8025820 <_ZdlPvj>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800cd90:	b590      	push	{r4, r7, lr}
 800cd92:	b087      	sub	sp, #28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800cd9c:	887b      	ldrh	r3, [r7, #2]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	e010      	b.n	800cdc8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	681c      	ldr	r4, [r3, #0]
 800cdb6:	f107 030f 	add.w	r3, r7, #15
 800cdba:	f107 0210 	add.w	r2, r7, #16
 800cdbe:	8879      	ldrh	r1, [r7, #2]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	47a0      	blx	r4
 800cdc4:	6178      	str	r0, [r7, #20]
        return glyph;
 800cdc6:	697b      	ldr	r3, [r7, #20]
    }
 800cdc8:	4618      	mov	r0, r3
 800cdca:	371c      	adds	r7, #28
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd90      	pop	{r4, r7, pc}

0800cdd0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	895b      	ldrh	r3, [r3, #10]
    }
 800cddc:	4618      	mov	r0, r3
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	899b      	ldrh	r3, [r3, #12]
    }
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	889b      	ldrh	r3, [r3, #4]
    }
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	889a      	ldrh	r2, [r3, #4]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	799b      	ldrb	r3, [r3, #6]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	4413      	add	r3, r2
 800ce2c:	b29b      	uxth	r3, r3
    }
 800ce2e:	4618      	mov	r0, r3
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800ce3a:	b480      	push	{r7}
 800ce3c:	b083      	sub	sp, #12
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	79db      	ldrb	r3, [r3, #7]
 800ce46:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800ce4a:	b2db      	uxtb	r3, r3
    }
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	79db      	ldrb	r3, [r3, #7]
 800ce64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ce68:	b2db      	uxtb	r3, r3
    }
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
	...

0800ce78 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	4a05      	ldr	r2, [pc, #20]	; (800ce98 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff ff61 	bl	800cd50 <_ZN8touchgfx4FontD1Ev>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	08028ad0 	.word	0x08028ad0

0800ce9c <_ZN8touchgfx9ConstFontD0Ev>:
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7ff ffe7 	bl	800ce78 <_ZN8touchgfx9ConstFontD1Ev>
 800ceaa:	2118      	movs	r1, #24
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f018 fcb7 	bl	8025820 <_ZdlPvj>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	4a05      	ldr	r2, [pc, #20]	; (800cedc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	601a      	str	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4618      	mov	r0, r3
 800cece:	f7ff ffd3 	bl	800ce78 <_ZN8touchgfx9ConstFontD1Ev>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4618      	mov	r0, r3
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	08027a78 	.word	0x08027a78

0800cee0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7ff ffe7 	bl	800cebc <_ZN8touchgfx13GeneratedFontD1Ev>
 800ceee:	2128      	movs	r1, #40	; 0x28
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f018 fc95 	bl	8025820 <_ZdlPvj>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4618      	mov	r0, r3
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6a1b      	ldr	r3, [r3, #32]
    }
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800cf24:	4618      	mov	r0, r3
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08c      	sub	sp, #48	; 0x30
 800cf34:	af08      	add	r7, sp, #32
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	4611      	mov	r1, r2
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	460b      	mov	r3, r1
 800cf40:	80fb      	strh	r3, [r7, #6]
 800cf42:	4613      	mov	r3, r2
 800cf44:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	88b9      	ldrh	r1, [r7, #4]
 800cf4a:	88fa      	ldrh	r2, [r7, #6]
 800cf4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cf4e:	9306      	str	r3, [sp, #24]
 800cf50:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf52:	9305      	str	r3, [sp, #20]
 800cf54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf58:	9304      	str	r3, [sp, #16]
 800cf5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf5e:	9303      	str	r3, [sp, #12]
 800cf60:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf64:	9302      	str	r3, [sp, #8]
 800cf66:	7f3b      	ldrb	r3, [r7, #28]
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	7e3b      	ldrb	r3, [r7, #24]
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	460b      	mov	r3, r1
 800cf70:	68b9      	ldr	r1, [r7, #8]
 800cf72:	f00a ff91 	bl	8017e98 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800cf76:	4a0a      	ldr	r2, [pc, #40]	; (800cfa0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf80:	619a      	str	r2, [r3, #24]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf86:	61da      	str	r2, [r3, #28]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf8c:	621a      	str	r2, [r3, #32]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf92:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	08027a78 	.word	0x08027a78

0800cfa4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	889b      	ldrh	r3, [r3, #4]
 800cfb8:	0adb      	lsrs	r3, r3, #11
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4413      	add	r3, r2
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3714      	adds	r7, #20
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr

0800cfd6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800cfd6:	b480      	push	{r7}
 800cfd8:	b089      	sub	sp, #36	; 0x24
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	60f8      	str	r0, [r7, #12]
 800cfde:	460b      	mov	r3, r1
 800cfe0:	607a      	str	r2, [r7, #4]
 800cfe2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d003      	beq.n	800cff2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	7b1b      	ldrb	r3, [r3, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d101      	bne.n	800cff6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	e030      	b.n	800d058 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	69da      	ldr	r2, [r3, #28]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	7b5b      	ldrb	r3, [r3, #13]
 800d002:	021b      	lsls	r3, r3, #8
 800d004:	b21b      	sxth	r3, r3
 800d006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d00a:	b219      	sxth	r1, r3
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	7adb      	ldrb	r3, [r3, #11]
 800d010:	b21b      	sxth	r3, r3
 800d012:	430b      	orrs	r3, r1
 800d014:	b21b      	sxth	r3, r3
 800d016:	b29b      	uxth	r3, r3
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	7b1b      	ldrb	r3, [r3, #12]
 800d022:	837b      	strh	r3, [r7, #26]
 800d024:	8b7b      	ldrh	r3, [r7, #26]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d015      	beq.n	800d056 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	881b      	ldrh	r3, [r3, #0]
 800d02e:	897a      	ldrh	r2, [r7, #10]
 800d030:	429a      	cmp	r2, r3
 800d032:	d103      	bne.n	800d03c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d03a:	e00d      	b.n	800d058 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	897a      	ldrh	r2, [r7, #10]
 800d042:	429a      	cmp	r2, r3
 800d044:	d306      	bcc.n	800d054 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d046:	8b7b      	ldrh	r3, [r7, #26]
 800d048:	3b01      	subs	r3, #1
 800d04a:	837b      	strh	r3, [r7, #26]
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	3304      	adds	r3, #4
 800d050:	61fb      	str	r3, [r7, #28]
 800d052:	e7e7      	b.n	800d024 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800d054:	bf00      	nop
        }
    }
    return 0;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3724      	adds	r7, #36	; 0x24
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d064:	b580      	push	{r7, lr}
 800d066:	af00      	add	r7, sp, #0
 800d068:	4801      	ldr	r0, [pc, #4]	; (800d070 <__tcf_0+0xc>)
 800d06a:	f7ff ff27 	bl	800cebc <_ZN8touchgfx13GeneratedFontD1Ev>
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	2004beb8 	.word	0x2004beb8

0800d074 <_Z23getFont_verdana_10_4bppv>:
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08c      	sub	sp, #48	; 0x30
 800d078:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d07a:	4b1f      	ldr	r3, [pc, #124]	; (800d0f8 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d07c:	e8d3 3f8f 	ldab	r3, [r3]
 800d080:	b2db      	uxtb	r3, r3
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	bf0c      	ite	eq
 800d08a:	2301      	moveq	r3, #1
 800d08c:	2300      	movne	r3, #0
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d02c      	beq.n	800d0ee <_Z23getFont_verdana_10_4bppv+0x7a>
 800d094:	4818      	ldr	r0, [pc, #96]	; (800d0f8 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d096:	f018 fbc5 	bl	8025824 <__cxa_guard_acquire>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	bf14      	ite	ne
 800d0a0:	2301      	movne	r3, #1
 800d0a2:	2300      	moveq	r3, #0
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d021      	beq.n	800d0ee <_Z23getFont_verdana_10_4bppv+0x7a>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	930a      	str	r3, [sp, #40]	; 0x28
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	9308      	str	r3, [sp, #32]
 800d0b6:	233f      	movs	r3, #63	; 0x3f
 800d0b8:	9307      	str	r3, [sp, #28]
 800d0ba:	4b10      	ldr	r3, [pc, #64]	; (800d0fc <_Z23getFont_verdana_10_4bppv+0x88>)
 800d0bc:	9306      	str	r3, [sp, #24]
 800d0be:	4b10      	ldr	r3, [pc, #64]	; (800d100 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d0c0:	9305      	str	r3, [sp, #20]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	9304      	str	r3, [sp, #16]
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	9303      	str	r3, [sp, #12]
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	9302      	str	r3, [sp, #8]
 800d0ce:	2304      	movs	r3, #4
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	230a      	movs	r3, #10
 800d0d8:	2201      	movs	r2, #1
 800d0da:	490a      	ldr	r1, [pc, #40]	; (800d104 <_Z23getFont_verdana_10_4bppv+0x90>)
 800d0dc:	480a      	ldr	r0, [pc, #40]	; (800d108 <_Z23getFont_verdana_10_4bppv+0x94>)
 800d0de:	f7ff ff27 	bl	800cf30 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d0e2:	480a      	ldr	r0, [pc, #40]	; (800d10c <_Z23getFont_verdana_10_4bppv+0x98>)
 800d0e4:	f018 fbe6 	bl	80258b4 <atexit>
 800d0e8:	4803      	ldr	r0, [pc, #12]	; (800d0f8 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d0ea:	f018 fba7 	bl	802583c <__cxa_guard_release>
    return verdana_10_4bpp;
 800d0ee:	4b06      	ldr	r3, [pc, #24]	; (800d108 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	2004bee0 	.word	0x2004bee0
 800d0fc:	08029098 	.word	0x08029098
 800d100:	080290a4 	.word	0x080290a4
 800d104:	08029068 	.word	0x08029068
 800d108:	2004beb8 	.word	0x2004beb8
 800d10c:	0800d065 	.word	0x0800d065

0800d110 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d110:	b580      	push	{r7, lr}
 800d112:	af00      	add	r7, sp, #0
 800d114:	4801      	ldr	r0, [pc, #4]	; (800d11c <__tcf_0+0xc>)
 800d116:	f7ff fed1 	bl	800cebc <_ZN8touchgfx13GeneratedFontD1Ev>
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	2004bee4 	.word	0x2004bee4

0800d120 <_Z23getFont_verdana_20_4bppv>:
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08c      	sub	sp, #48	; 0x30
 800d124:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d126:	4b1f      	ldr	r3, [pc, #124]	; (800d1a4 <_Z23getFont_verdana_20_4bppv+0x84>)
 800d128:	e8d3 3f8f 	ldab	r3, [r3]
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	2b00      	cmp	r3, #0
 800d134:	bf0c      	ite	eq
 800d136:	2301      	moveq	r3, #1
 800d138:	2300      	movne	r3, #0
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d02c      	beq.n	800d19a <_Z23getFont_verdana_20_4bppv+0x7a>
 800d140:	4818      	ldr	r0, [pc, #96]	; (800d1a4 <_Z23getFont_verdana_20_4bppv+0x84>)
 800d142:	f018 fb6f 	bl	8025824 <__cxa_guard_acquire>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	bf14      	ite	ne
 800d14c:	2301      	movne	r3, #1
 800d14e:	2300      	moveq	r3, #0
 800d150:	b2db      	uxtb	r3, r3
 800d152:	2b00      	cmp	r3, #0
 800d154:	d021      	beq.n	800d19a <_Z23getFont_verdana_20_4bppv+0x7a>
 800d156:	2300      	movs	r3, #0
 800d158:	930a      	str	r3, [sp, #40]	; 0x28
 800d15a:	2300      	movs	r3, #0
 800d15c:	9309      	str	r3, [sp, #36]	; 0x24
 800d15e:	2300      	movs	r3, #0
 800d160:	9308      	str	r3, [sp, #32]
 800d162:	233f      	movs	r3, #63	; 0x3f
 800d164:	9307      	str	r3, [sp, #28]
 800d166:	4b10      	ldr	r3, [pc, #64]	; (800d1a8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800d168:	9306      	str	r3, [sp, #24]
 800d16a:	4b10      	ldr	r3, [pc, #64]	; (800d1ac <_Z23getFont_verdana_20_4bppv+0x8c>)
 800d16c:	9305      	str	r3, [sp, #20]
 800d16e:	2300      	movs	r3, #0
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	2300      	movs	r3, #0
 800d174:	9303      	str	r3, [sp, #12]
 800d176:	2301      	movs	r3, #1
 800d178:	9302      	str	r3, [sp, #8]
 800d17a:	2304      	movs	r3, #4
 800d17c:	9301      	str	r3, [sp, #4]
 800d17e:	2300      	movs	r3, #0
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	2314      	movs	r3, #20
 800d184:	2201      	movs	r2, #1
 800d186:	490a      	ldr	r1, [pc, #40]	; (800d1b0 <_Z23getFont_verdana_20_4bppv+0x90>)
 800d188:	480a      	ldr	r0, [pc, #40]	; (800d1b4 <_Z23getFont_verdana_20_4bppv+0x94>)
 800d18a:	f7ff fed1 	bl	800cf30 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d18e:	480a      	ldr	r0, [pc, #40]	; (800d1b8 <_Z23getFont_verdana_20_4bppv+0x98>)
 800d190:	f018 fb90 	bl	80258b4 <atexit>
 800d194:	4803      	ldr	r0, [pc, #12]	; (800d1a4 <_Z23getFont_verdana_20_4bppv+0x84>)
 800d196:	f018 fb51 	bl	802583c <__cxa_guard_release>
    return verdana_20_4bpp;
 800d19a:	4b06      	ldr	r3, [pc, #24]	; (800d1b4 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	2004bf0c 	.word	0x2004bf0c
 800d1a8:	0802909c 	.word	0x0802909c
 800d1ac:	080290a8 	.word	0x080290a8
 800d1b0:	08029078 	.word	0x08029078
 800d1b4:	2004bee4 	.word	0x2004bee4
 800d1b8:	0800d111 	.word	0x0800d111

0800d1bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	4801      	ldr	r0, [pc, #4]	; (800d1c8 <__tcf_0+0xc>)
 800d1c2:	f7ff fe7b 	bl	800cebc <_ZN8touchgfx13GeneratedFontD1Ev>
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	2004bf10 	.word	0x2004bf10

0800d1cc <_Z23getFont_verdana_40_4bppv>:
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b08c      	sub	sp, #48	; 0x30
 800d1d0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d1d2:	4b1f      	ldr	r3, [pc, #124]	; (800d250 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d1d4:	e8d3 3f8f 	ldab	r3, [r3]
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	f003 0301 	and.w	r3, r3, #1
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bf0c      	ite	eq
 800d1e2:	2301      	moveq	r3, #1
 800d1e4:	2300      	movne	r3, #0
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d02c      	beq.n	800d246 <_Z23getFont_verdana_40_4bppv+0x7a>
 800d1ec:	4818      	ldr	r0, [pc, #96]	; (800d250 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d1ee:	f018 fb19 	bl	8025824 <__cxa_guard_acquire>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	bf14      	ite	ne
 800d1f8:	2301      	movne	r3, #1
 800d1fa:	2300      	moveq	r3, #0
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d021      	beq.n	800d246 <_Z23getFont_verdana_40_4bppv+0x7a>
 800d202:	2300      	movs	r3, #0
 800d204:	930a      	str	r3, [sp, #40]	; 0x28
 800d206:	2300      	movs	r3, #0
 800d208:	9309      	str	r3, [sp, #36]	; 0x24
 800d20a:	2300      	movs	r3, #0
 800d20c:	9308      	str	r3, [sp, #32]
 800d20e:	233f      	movs	r3, #63	; 0x3f
 800d210:	9307      	str	r3, [sp, #28]
 800d212:	4b10      	ldr	r3, [pc, #64]	; (800d254 <_Z23getFont_verdana_40_4bppv+0x88>)
 800d214:	9306      	str	r3, [sp, #24]
 800d216:	4b10      	ldr	r3, [pc, #64]	; (800d258 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d218:	9305      	str	r3, [sp, #20]
 800d21a:	2300      	movs	r3, #0
 800d21c:	9304      	str	r3, [sp, #16]
 800d21e:	2300      	movs	r3, #0
 800d220:	9303      	str	r3, [sp, #12]
 800d222:	2301      	movs	r3, #1
 800d224:	9302      	str	r3, [sp, #8]
 800d226:	2304      	movs	r3, #4
 800d228:	9301      	str	r3, [sp, #4]
 800d22a:	2300      	movs	r3, #0
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	2328      	movs	r3, #40	; 0x28
 800d230:	2201      	movs	r2, #1
 800d232:	490a      	ldr	r1, [pc, #40]	; (800d25c <_Z23getFont_verdana_40_4bppv+0x90>)
 800d234:	480a      	ldr	r0, [pc, #40]	; (800d260 <_Z23getFont_verdana_40_4bppv+0x94>)
 800d236:	f7ff fe7b 	bl	800cf30 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d23a:	480a      	ldr	r0, [pc, #40]	; (800d264 <_Z23getFont_verdana_40_4bppv+0x98>)
 800d23c:	f018 fb3a 	bl	80258b4 <atexit>
 800d240:	4803      	ldr	r0, [pc, #12]	; (800d250 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d242:	f018 fafb 	bl	802583c <__cxa_guard_release>
    return verdana_40_4bpp;
 800d246:	4b06      	ldr	r3, [pc, #24]	; (800d260 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800d248:	4618      	mov	r0, r3
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	2004bf38 	.word	0x2004bf38
 800d254:	080290a0 	.word	0x080290a0
 800d258:	080290ac 	.word	0x080290ac
 800d25c:	08029088 	.word	0x08029088
 800d260:	2004bf10 	.word	0x2004bf10
 800d264:	0800d1bd 	.word	0x0800d1bd

0800d268 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	4618      	mov	r0, r3
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	801a      	strh	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	805a      	strh	r2, [r3, #2]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	809a      	strh	r2, [r3, #4]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	80da      	strh	r2, [r3, #6]
    {
    }
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800d2ae:	b480      	push	{r7}
 800d2b0:	b085      	sub	sp, #20
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	4603      	mov	r3, r0
 800d2be:	817b      	strh	r3, [r7, #10]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	813b      	strh	r3, [r7, #8]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	897a      	ldrh	r2, [r7, #10]
 800d2cc:	801a      	strh	r2, [r3, #0]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	893a      	ldrh	r2, [r7, #8]
 800d2d2:	805a      	strh	r2, [r3, #2]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	88fa      	ldrh	r2, [r7, #6]
 800d2d8:	809a      	strh	r2, [r3, #4]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	8b3a      	ldrh	r2, [r7, #24]
 800d2de:	80da      	strh	r2, [r3, #6]
    {
    }
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d2f8:	bf00      	nop
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d30e:	bf00      	nop
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
    {
    }
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
    {
    }
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
    {
 800d378:	4a04      	ldr	r2, [pc, #16]	; (800d38c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	601a      	str	r2, [r3, #0]
    }
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4618      	mov	r0, r3
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	08027d30 	.word	0x08027d30

0800d390 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
    }
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7ff ffe9 	bl	800d370 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d39e:	2104      	movs	r1, #4
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f018 fa3d 	bl	8025820 <_ZdlPvj>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
    {
    }
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800d3d0:	bf00      	nop
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d3ee:	6810      	ldr	r0, [r2, #0]
 800d3f0:	6851      	ldr	r1, [r2, #4]
 800d3f2:	c303      	stmia	r3!, {r0, r1}
    }
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
    {
 800d408:	4a04      	ldr	r2, [pc, #16]	; (800d41c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	601a      	str	r2, [r3, #0]
    }
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4618      	mov	r0, r3
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr
 800d41c:	08027d18 	.word	0x08027d18

0800d420 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
    }
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff ffe9 	bl	800d400 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d42e:	2104      	movs	r1, #4
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f018 f9f5 	bl	8025820 <_ZdlPvj>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4618      	mov	r0, r3
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800d448:	4a14      	ldr	r2, [pc, #80]	; (800d49c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	3304      	adds	r3, #4
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff ff14 	bl	800d280 <_ZN8touchgfx4RectC1Ev>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	330c      	adds	r3, #12
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7ff ff0f 	bl	800d280 <_ZN8touchgfx4RectC1Ev>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	615a      	str	r2, [r3, #20]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	619a      	str	r2, [r3, #24]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	61da      	str	r2, [r3, #28]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	841a      	strh	r2, [r3, #32]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	845a      	strh	r2, [r3, #34]	; 0x22
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4618      	mov	r0, r3
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	08028a68 	.word	0x08028a68

0800d4a0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
    {
 800d4a8:	4a04      	ldr	r2, [pc, #16]	; (800d4bc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	601a      	str	r2, [r3, #0]
    }
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	08028a68 	.word	0x08028a68

0800d4c0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
    }
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7ff ffe9 	bl	800d4a0 <_ZN8touchgfx8DrawableD1Ev>
 800d4ce:	2128      	movs	r1, #40	; 0x28
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f018 f9a5 	bl	8025820 <_ZdlPvj>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3708      	adds	r7, #8
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	3314      	adds	r3, #20
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	4798      	blx	r3
        }
    }
 800d4fe:	bf00      	nop
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800d506:	b480      	push	{r7}
 800d508:	b083      	sub	sp, #12
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d50e:	2300      	movs	r3, #0
    }
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3304      	adds	r3, #4
    }
 800d528:	4618      	mov	r0, r3
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	4608      	mov	r0, r1
 800d53e:	4611      	mov	r1, r2
 800d540:	461a      	mov	r2, r3
 800d542:	4603      	mov	r3, r0
 800d544:	817b      	strh	r3, [r7, #10]
 800d546:	460b      	mov	r3, r1
 800d548:	813b      	strh	r3, [r7, #8]
 800d54a:	4613      	mov	r3, r2
 800d54c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800d54e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d552:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d556:	4619      	mov	r1, r3
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	f000 f844 	bl	800d5e6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800d55e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800d562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d566:	4619      	mov	r1, r3
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f000 f898 	bl	800d69e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800d56e:	bf00      	nop
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800d576:	b480      	push	{r7}
 800d578:	b083      	sub	sp, #12
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800d59e:	4618      	mov	r0, r3
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800d5aa:	b480      	push	{r7}
 800d5ac:	b083      	sub	sp, #12
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	887a      	ldrh	r2, [r7, #2]
 800d5ba:	809a      	strh	r2, [r3, #4]
    }
 800d5bc:	bf00      	nop
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	887a      	ldrh	r2, [r7, #2]
 800d5d8:	80da      	strh	r2, [r3, #6]
    }
 800d5da:	bf00      	nop
 800d5dc:	370c      	adds	r7, #12
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr

0800d5e6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	807b      	strh	r3, [r7, #2]
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3330      	adds	r3, #48	; 0x30
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d602:	4611      	mov	r1, r2
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	4798      	blx	r3
        setY(y);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3334      	adds	r3, #52	; 0x34
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d614:	4611      	mov	r1, r2
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	4798      	blx	r3
    }
 800d61a:	bf00      	nop
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800d622:	b480      	push	{r7}
 800d624:	b083      	sub	sp, #12
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
 800d62a:	460b      	mov	r3, r1
 800d62c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	887a      	ldrh	r2, [r7, #2]
 800d632:	811a      	strh	r2, [r3, #8]
    }
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	887a      	ldrh	r2, [r7, #2]
 800d650:	815a      	strh	r2, [r3, #10]
    }
 800d652:	bf00      	nop
 800d654:	370c      	adds	r7, #12
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800d65e:	b480      	push	{r7}
 800d660:	b083      	sub	sp, #12
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
    {
    }
 800d666:	bf00      	nop
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d672:	b480      	push	{r7}
 800d674:	b083      	sub	sp, #12
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d67c:	bf00      	nop
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d692:	bf00      	nop
 800d694:	370c      	adds	r7, #12
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr

0800d69e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b082      	sub	sp, #8
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	807b      	strh	r3, [r7, #2]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3338      	adds	r3, #56	; 0x38
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	4798      	blx	r3
        setHeight(height);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	333c      	adds	r3, #60	; 0x3c
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	4798      	blx	r3
    }
 800d6d2:	bf00      	nop
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d6da:	b480      	push	{r7}
 800d6dc:	b083      	sub	sp, #12
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d6e4:	bf00      	nop
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
    {
    }
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800d712:	4618      	mov	r0, r3
 800d714:	370c      	adds	r7, #12
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800d71e:	b480      	push	{r7}
 800d720:	b083      	sub	sp, #12
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800d72c:	4618      	mov	r0, r3
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	460b      	mov	r3, r1
 800d742:	807b      	strh	r3, [r7, #2]
 800d744:	4613      	mov	r3, r2
 800d746:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	3354      	adds	r3, #84	; 0x54
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	8879      	ldrh	r1, [r7, #2]
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d758:	b292      	uxth	r2, r2
 800d75a:	1a8a      	subs	r2, r1, r2
 800d75c:	b292      	uxth	r2, r2
 800d75e:	b210      	sxth	r0, r2
 800d760:	8839      	ldrh	r1, [r7, #0]
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d768:	b292      	uxth	r2, r2
 800d76a:	1a8a      	subs	r2, r1, r2
 800d76c:	b292      	uxth	r2, r2
 800d76e:	b212      	sxth	r2, r2
 800d770:	4601      	mov	r1, r0
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	4798      	blx	r3
    }
 800d776:	bf00      	nop
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800d77e:	b480      	push	{r7}
 800d780:	b083      	sub	sp, #12
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d78c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d794:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d79c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800d79e:	bf00      	nop
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr

0800d7aa <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b084      	sub	sp, #16
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	60f8      	str	r0, [r7, #12]
 800d7b2:	60b9      	str	r1, [r7, #8]
 800d7b4:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7ff ffe1 	bl	800d77e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	601a      	str	r2, [r3, #0]
    }
 800d7ca:	bf00      	nop
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
	...

0800d7d4 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d7d4:	b480      	push	{r7}
 800d7d6:	af00      	add	r7, sp, #0
    {
        return instance;
 800d7d8:	4b03      	ldr	r3, [pc, #12]	; (800d7e8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d7da:	681b      	ldr	r3, [r3, #0]
    }
 800d7dc:	4618      	mov	r0, r3
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	2004e118 	.word	0x2004e118

0800d7ec <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d7ec:	b480      	push	{r7}
 800d7ee:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d7f0:	4b0b      	ldr	r3, [pc, #44]	; (800d820 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d008      	beq.n	800d80e <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d7fc:	4b08      	ldr	r3, [pc, #32]	; (800d820 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d802:	2b00      	cmp	r3, #0
 800d804:	d003      	beq.n	800d80e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d806:	4b06      	ldr	r3, [pc, #24]	; (800d820 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d80c:	e002      	b.n	800d814 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800d80e:	4b04      	ldr	r3, [pc, #16]	; (800d820 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	689b      	ldr	r3, [r3, #8]
    }
 800d814:	4618      	mov	r0, r3
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop
 800d820:	2004e118 	.word	0x2004e118

0800d824 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800d82c:	4a07      	ldr	r2, [pc, #28]	; (800d84c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	601a      	str	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	605a      	str	r2, [r3, #4]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	721a      	strb	r2, [r3, #8]
    {
    }
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4618      	mov	r0, r3
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	08027cf4 	.word	0x08027cf4

0800d850 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
    {
 800d858:	4a04      	ldr	r2, [pc, #16]	; (800d86c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	601a      	str	r2, [r3, #0]
    }
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4618      	mov	r0, r3
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	08027cf4 	.word	0x08027cf4

0800d870 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
    }
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7ff ffe9 	bl	800d850 <_ZN8touchgfx10TransitionD1Ev>
 800d87e:	210c      	movs	r1, #12
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f017 ffcd 	bl	8025820 <_ZdlPvj>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
    {
    }
 800d898:	bf00      	nop
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
    {
    }
 800d8ac:	bf00      	nop
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
    {
    }
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800d8d4:	f009 fa9c 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f009 fe3c 	bl	8017558 <_ZN8touchgfx11Application10invalidateEv>
    }
 800d8e0:	bf00      	nop
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	605a      	str	r2, [r3, #4]
    }
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	4a05      	ldr	r2, [pc, #20]	; (800d924 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	601a      	str	r2, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4618      	mov	r0, r3
 800d916:	f7ff fd2b 	bl	800d370 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	08028a1c 	.word	0x08028a1c

0800d928 <_ZN8touchgfx11ApplicationD0Ev>:
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7ff ffe7 	bl	800d904 <_ZN8touchgfx11ApplicationD1Ev>
 800d936:	f44f 719c 	mov.w	r1, #312	; 0x138
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f017 ff70 	bl	8025820 <_ZdlPvj>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4618      	mov	r0, r3
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4618      	mov	r0, r3
 800d958:	f009 fa7a 	bl	8016e50 <_ZN8touchgfx11ApplicationC1Ev>
 800d95c:	4a09      	ldr	r2, [pc, #36]	; (800d984 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	601a      	str	r2, [r3, #0]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2200      	movs	r2, #0
 800d966:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	4a04      	ldr	r2, [pc, #16]	; (800d988 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800d976:	6013      	str	r3, [r2, #0]
    }
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4618      	mov	r0, r3
 800d97c:	3708      	adds	r7, #8
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	08027ca8 	.word	0x08027ca8
 800d988:	2004e16c 	.word	0x2004e16c

0800d98c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 f804 	bl	800d9a2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800d99a:	bf00      	nop
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00f      	beq.n	800d9d4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	330c      	adds	r3, #12
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4610      	mov	r0, r2
 800d9c8:	4798      	blx	r3
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e000      	b.n	800d9d6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00e      	beq.n	800d9f8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	3308      	adds	r3, #8
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800d9f8:	bf00      	nop
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	601a      	str	r2, [r3, #0]
    }
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	4a05      	ldr	r2, [pc, #20]	; (800da3c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	601a      	str	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff ff69 	bl	800d904 <_ZN8touchgfx11ApplicationD1Ev>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4618      	mov	r0, r3
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	08027ca8 	.word	0x08027ca8

0800da40 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff ffe7 	bl	800da1c <_ZN8touchgfx14MVPApplicationD1Ev>
 800da4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f017 fee4 	bl	8025820 <_ZdlPvj>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4618      	mov	r0, r3
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
	...

0800da64 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	4a08      	ldr	r2, [pc, #32]	; (800da90 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	601a      	str	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800da78:	4618      	mov	r0, r3
 800da7a:	f001 f81d 	bl	800eab8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff ffcb 	bl	800da1c <_ZN8touchgfx14MVPApplicationD1Ev>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	08027c44 	.word	0x08027c44

0800da94 <_ZN23FrontendApplicationBaseD0Ev>:
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ffe1 	bl	800da64 <_ZN23FrontendApplicationBaseD1Ev>
 800daa2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f017 feba 	bl	8025820 <_ZdlPvj>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b082      	sub	sp, #8
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f8d0 	bl	800dc64 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800dac4:	bf00      	nop
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	721a      	strb	r2, [r3, #8]
    }
 800dada:	bf00      	nop
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	607b      	str	r3, [r7, #4]
 800daf0:	460b      	mov	r3, r1
 800daf2:	817b      	strh	r3, [r7, #10]
 800daf4:	4613      	mov	r3, r2
 800daf6:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff fe02 	bl	800d704 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d008      	beq.n	800db18 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7ff fe08 	bl	800d71e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800db14:	2301      	movs	r3, #1
 800db16:	e000      	b.n	800db1a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800db18:	2300      	movs	r3, #0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d002      	beq.n	800db24 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	601a      	str	r2, [r3, #0]
        }
    }
 800db24:	bf00      	nop
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	683a      	ldr	r2, [r7, #0]
 800db3a:	605a      	str	r2, [r3, #4]
    }
 800db3c:	bf00      	nop
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff fc74 	bl	800d440 <_ZN8touchgfx8DrawableC1Ev>
 800db58:	4a03      	ldr	r2, [pc, #12]	; (800db68 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	601a      	str	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4618      	mov	r0, r3
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	08027bb8 	.word	0x08027bb8

0800db6c <_ZN8touchgfx6WidgetD1Ev>:
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	4a05      	ldr	r2, [pc, #20]	; (800db8c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	601a      	str	r2, [r3, #0]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff fc8f 	bl	800d4a0 <_ZN8touchgfx8DrawableD1Ev>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4618      	mov	r0, r3
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	08027bb8 	.word	0x08027bb8

0800db90 <_ZN8touchgfx6WidgetD0Ev>:
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7ff ffe7 	bl	800db6c <_ZN8touchgfx6WidgetD1Ev>
 800db9e:	2128      	movs	r1, #40	; 0x28
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f017 fe3d 	bl	8025820 <_ZdlPvj>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7ff fec4 	bl	800d94c <_ZN8touchgfx14MVPApplicationC1Ev>
 800dbc4:	4a12      	ldr	r2, [pc, #72]	; (800dc10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	601a      	str	r2, [r3, #0]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 f929 	bl	800de28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800dbe6:	f7ff fdf5 	bl	800d7d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800dbea:	4603      	mov	r3, r0
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	3208      	adds	r2, #8
 800dbf0:	6812      	ldr	r2, [r2, #0]
 800dbf2:	2101      	movs	r1, #1
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800dbf8:	f7ff fdf8 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f010 fc03 	bl	801e40a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	08027c44 	.word	0x08027c44

0800dc14 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4618      	mov	r0, r3
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	683a      	ldr	r2, [r7, #0]
 800dc3a:	4611      	mov	r1, r2
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff ffe9 	bl	800dc14 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	685a      	ldr	r2, [r3, #4]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	605a      	str	r2, [r3, #4]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	683a      	ldr	r2, [r7, #0]
 800dc4e:	3308      	adds	r3, #8
 800dc50:	3208      	adds	r2, #8
 800dc52:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc56:	e883 0003 	stmia.w	r3, {r0, r1}
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800dc64:	b590      	push	{r4, r7, lr}
 800dc66:	b089      	sub	sp, #36	; 0x24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800dc72:	4b10      	ldr	r3, [pc, #64]	; (800dcb4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800dc74:	61bb      	str	r3, [r7, #24]
 800dc76:	2300      	movs	r3, #0
 800dc78:	61fb      	str	r3, [r7, #28]
 800dc7a:	f107 0008 	add.w	r0, r7, #8
 800dc7e:	f107 0318 	add.w	r3, r7, #24
 800dc82:	cb0c      	ldmia	r3, {r2, r3}
 800dc84:	6879      	ldr	r1, [r7, #4]
 800dc86:	f000 f8eb 	bl	800de60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800dc8a:	f107 0308 	add.w	r3, r7, #8
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4620      	mov	r0, r4
 800dc92:	f7ff ffcb 	bl	800dc2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800dc96:	f107 0308 	add.w	r3, r7, #8
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 ff0c 	bl	800eab8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800dcac:	bf00      	nop
 800dcae:	3724      	adds	r7, #36	; 0x24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd90      	pop	{r4, r7, pc}
 800dcb4:	0800dcb9 	.word	0x0800dcb9

0800dcb8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af02      	add	r7, sp, #8
 800dcbe:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800dccc:	461a      	mov	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	4b04      	ldr	r3, [pc, #16]	; (800dce8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800dcd8:	4804      	ldr	r0, [pc, #16]	; (800dcec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800dcda:	f000 f8f3 	bl	800dec4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800dcde:	bf00      	nop
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	2004e160 	.word	0x2004e160
 800dcec:	2004e15c 	.word	0x2004e15c

0800dcf0 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouth()
{
 800dcf0:	b590      	push	{r4, r7, lr}
 800dcf2:	b089      	sub	sp, #36	; 0x24
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionSouthImpl);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800dcfe:	4b10      	ldr	r3, [pc, #64]	; (800dd40 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv+0x50>)
 800dd00:	61bb      	str	r3, [r7, #24]
 800dd02:	2300      	movs	r3, #0
 800dd04:	61fb      	str	r3, [r7, #28]
 800dd06:	f107 0008 	add.w	r0, r7, #8
 800dd0a:	f107 0318 	add.w	r3, r7, #24
 800dd0e:	cb0c      	ldmia	r3, {r2, r3}
 800dd10:	6879      	ldr	r1, [r7, #4]
 800dd12:	f000 f8a5 	bl	800de60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800dd16:	f107 0308 	add.w	r3, r7, #8
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f7ff ff85 	bl	800dc2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800dd22:	f107 0308 	add.w	r3, r7, #8
 800dd26:	4618      	mov	r0, r3
 800dd28:	f000 fec6 	bl	800eab8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800dd38:	bf00      	nop
 800dd3a:	3724      	adds	r7, #36	; 0x24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd90      	pop	{r4, r7, pc}
 800dd40:	0800dd45 	.word	0x0800dd45

0800dd44 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouthImpl()
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af02      	add	r7, sp, #8
 800dd4a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800dd58:	461a      	mov	r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800dd60:	9300      	str	r3, [sp, #0]
 800dd62:	4b04      	ldr	r3, [pc, #16]	; (800dd74 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x30>)
 800dd64:	4804      	ldr	r0, [pc, #16]	; (800dd78 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x34>)
 800dd66:	f000 f9cb 	bl	800e100 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800dd6a:	bf00      	nop
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	2004e160 	.word	0x2004e160
 800dd78:	2004e15c 	.word	0x2004e15c

0800dd7c <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenWipeTransitionEast()
{
 800dd7c:	b590      	push	{r4, r7, lr}
 800dd7e:	b089      	sub	sp, #36	; 0x24
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenWipeTransitionEastImpl);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800dd8a:	4b10      	ldr	r3, [pc, #64]	; (800ddcc <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv+0x50>)
 800dd8c:	61bb      	str	r3, [r7, #24]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	61fb      	str	r3, [r7, #28]
 800dd92:	f107 0008 	add.w	r0, r7, #8
 800dd96:	f107 0318 	add.w	r3, r7, #24
 800dd9a:	cb0c      	ldmia	r3, {r2, r3}
 800dd9c:	6879      	ldr	r1, [r7, #4]
 800dd9e:	f000 f85f 	bl	800de60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800dda2:	f107 0308 	add.w	r3, r7, #8
 800dda6:	4619      	mov	r1, r3
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f7ff ff3f 	bl	800dc2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ddae:	f107 0308 	add.w	r3, r7, #8
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 fe80 	bl	800eab8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ddc4:	bf00      	nop
 800ddc6:	3724      	adds	r7, #36	; 0x24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd90      	pop	{r4, r7, pc}
 800ddcc:	0800ddd1 	.word	0x0800ddd1

0800ddd0 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenWipeTransitionEastImpl()
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af02      	add	r7, sp, #8
 800ddd6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800dde4:	461a      	mov	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	4b04      	ldr	r3, [pc, #16]	; (800de00 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x30>)
 800ddf0:	4804      	ldr	r0, [pc, #16]	; (800de04 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x34>)
 800ddf2:	f000 faa3 	bl	800e33c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ddf6:	bf00      	nop
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	2004e160 	.word	0x2004e160
 800de04:	2004e15c 	.word	0x2004e15c

0800de08 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	4a04      	ldr	r2, [pc, #16]	; (800de24 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4618      	mov	r0, r3
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	08027d18 	.word	0x08027d18

0800de28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4618      	mov	r0, r3
 800de34:	f7ff ffe8 	bl	800de08 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800de38:	4a08      	ldr	r2, [pc, #32]	; (800de5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	605a      	str	r2, [r3, #4]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	609a      	str	r2, [r3, #8]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	60da      	str	r2, [r3, #12]
    {
    }
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	08027c90 	.word	0x08027c90

0800de60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	4639      	mov	r1, r7
 800de6c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4618      	mov	r0, r3
 800de74:	f7ff ffc8 	bl	800de08 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800de78:	4a08      	ldr	r2, [pc, #32]	; (800de9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	605a      	str	r2, [r3, #4]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	3308      	adds	r3, #8
 800de88:	463a      	mov	r2, r7
 800de8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de8e:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	4618      	mov	r0, r3
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	08027c90 	.word	0x08027c90

0800dea0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff fcba 	bl	800d824 <_ZN8touchgfx10TransitionC1Ev>
 800deb0:	4a03      	ldr	r2, [pc, #12]	; (800dec0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	601a      	str	r2, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4618      	mov	r0, r3
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	08027c20 	.word	0x08027c20

0800dec4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800dec4:	b590      	push	{r4, r7, lr}
 800dec6:	b08f      	sub	sp, #60	; 0x3c
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	689a      	ldr	r2, [r3, #8]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3320      	adds	r3, #32
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4610      	mov	r0, r2
 800dee2:	4798      	blx	r3
 800dee4:	4603      	mov	r3, r0
 800dee6:	f241 023b 	movw	r2, #4155	; 0x103b
 800deea:	4293      	cmp	r3, r2
 800deec:	d805      	bhi.n	800defa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800deee:	4b7f      	ldr	r3, [pc, #508]	; (800e0ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800def0:	4a7f      	ldr	r2, [pc, #508]	; (800e0f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800def2:	21a2      	movs	r1, #162	; 0xa2
 800def4:	487f      	ldr	r0, [pc, #508]	; (800e0f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800def6:	f017 fcbf 	bl	8025878 <__assert_func>
 800defa:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685a      	ldr	r2, [r3, #4]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	3320      	adds	r3, #32
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4610      	mov	r0, r2
 800df0c:	4798      	blx	r3
 800df0e:	4603      	mov	r3, r0
 800df10:	2b0f      	cmp	r3, #15
 800df12:	d805      	bhi.n	800df20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800df14:	4b78      	ldr	r3, [pc, #480]	; (800e0f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800df16:	4a76      	ldr	r2, [pc, #472]	; (800e0f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800df18:	21a3      	movs	r1, #163	; 0xa3
 800df1a:	4876      	ldr	r0, [pc, #472]	; (800e0f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800df1c:	f017 fcac 	bl	8025878 <__assert_func>
 800df20:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	68da      	ldr	r2, [r3, #12]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	3320      	adds	r3, #32
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4610      	mov	r0, r2
 800df32:	4798      	blx	r3
 800df34:	4603      	mov	r3, r0
 800df36:	2b0b      	cmp	r3, #11
 800df38:	d805      	bhi.n	800df46 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800df3a:	4b70      	ldr	r3, [pc, #448]	; (800e0fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800df3c:	4a6c      	ldr	r2, [pc, #432]	; (800e0f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800df3e:	21a4      	movs	r1, #164	; 0xa4
 800df40:	486c      	ldr	r0, [pc, #432]	; (800e0f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800df42:	f017 fc99 	bl	8025878 <__assert_func>
 800df46:	bf00      	nop
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	627b      	str	r3, [r7, #36]	; 0x24
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800df54:	f008 ff5c 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 800df58:	4603      	mov	r3, r0
 800df5a:	4618      	mov	r0, r3
 800df5c:	f008 ff5e 	bl	8016e1c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800df60:	6a3b      	ldr	r3, [r7, #32]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d008      	beq.n	800df7a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800df68:	6a3b      	ldr	r3, [r7, #32]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	330c      	adds	r3, #12
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4610      	mov	r0, r2
 800df78:	4798      	blx	r3
    if (*currentTrans)
 800df7a:	6a3b      	ldr	r3, [r7, #32]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d007      	beq.n	800df92 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800df82:	6a3b      	ldr	r3, [r7, #32]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	6a3b      	ldr	r3, [r7, #32]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4610      	mov	r0, r2
 800df90:	4798      	blx	r3
    if (*currentScreen)
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d008      	beq.n	800dfac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3314      	adds	r3, #20
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	4798      	blx	r3
    if (*currentPresenter)
 800dfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d008      	beq.n	800dfc6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	4798      	blx	r3
    if (*currentScreen)
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d007      	beq.n	800dfde <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800dfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4610      	mov	r0, r2
 800dfdc:	4798      	blx	r3
    if (*currentPresenter)
 800dfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d008      	beq.n	800dff8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800dfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	3308      	adds	r3, #8
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4610      	mov	r0, r2
 800dff6:	4798      	blx	r3
}
 800dff8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	2100      	movs	r1, #0
 800e000:	4618      	mov	r0, r3
 800e002:	f000 fab9 	bl	800e578 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e006:	4603      	mov	r3, r0
 800e008:	4619      	mov	r1, r3
 800e00a:	200c      	movs	r0, #12
 800e00c:	f7ff f92c 	bl	800d268 <_ZnwjPv>
 800e010:	4604      	mov	r4, r0
 800e012:	4620      	mov	r0, r4
 800e014:	f7ff ff44 	bl	800dea0 <_ZN8touchgfx12NoTransitionC1Ev>
 800e018:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	689b      	ldr	r3, [r3, #8]
 800e01e:	2100      	movs	r1, #0
 800e020:	4618      	mov	r0, r3
 800e022:	f000 fabc 	bl	800e59e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800e026:	4603      	mov	r3, r0
 800e028:	4619      	mov	r1, r3
 800e02a:	f241 003c 	movw	r0, #4156	; 0x103c
 800e02e:	f7ff f91b 	bl	800d268 <_ZnwjPv>
 800e032:	4604      	mov	r4, r0
 800e034:	4620      	mov	r0, r4
 800e036:	f002 fdc1 	bl	8010bbc <_ZN11Screen1ViewC1Ev>
 800e03a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	2100      	movs	r1, #0
 800e042:	4618      	mov	r0, r3
 800e044:	f000 fabe 	bl	800e5c4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800e048:	4603      	mov	r3, r0
 800e04a:	4619      	mov	r1, r3
 800e04c:	2010      	movs	r0, #16
 800e04e:	f7ff f90b 	bl	800d268 <_ZnwjPv>
 800e052:	4604      	mov	r4, r0
 800e054:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e056:	4620      	mov	r0, r4
 800e058:	f002 fd58 	bl	8010b0c <_ZN16Screen1PresenterC1ER11Screen1View>
 800e05c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e062:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e068:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e06e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800e076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e078:	3304      	adds	r3, #4
 800e07a:	e000      	b.n	800e07e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800e07c:	2300      	movs	r3, #0
 800e07e:	4619      	mov	r1, r3
 800e080:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e082:	f7ff fcbd 	bl	800da00 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e088:	3304      	adds	r3, #4
 800e08a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7ff fd4d 	bl	800db2c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e096:	4618      	mov	r0, r3
 800e098:	f000 faa7 	bl	800e5ea <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800e09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09e:	61fb      	str	r3, [r7, #28]
 800e0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a2:	61bb      	str	r3, [r7, #24]
 800e0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	330c      	adds	r3, #12
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	69f8      	ldr	r0, [r7, #28]
 800e0b2:	4798      	blx	r3
    newPresenter->activate();
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	69b8      	ldr	r0, [r7, #24]
 800e0bc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e0be:	6979      	ldr	r1, [r7, #20]
 800e0c0:	69f8      	ldr	r0, [r7, #28]
 800e0c2:	f00a fb09 	bl	80186d8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	3310      	adds	r3, #16
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	6978      	ldr	r0, [r7, #20]
 800e0d0:	4798      	blx	r3
    newTransition->invalidate();
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	3314      	adds	r3, #20
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	6978      	ldr	r0, [r7, #20]
 800e0dc:	4798      	blx	r3
}
 800e0de:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	373c      	adds	r7, #60	; 0x3c
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd90      	pop	{r4, r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	08026a08 	.word	0x08026a08
 800e0f0:	08026a98 	.word	0x08026a98
 800e0f4:	08026b9c 	.word	0x08026b9c
 800e0f8:	08026be0 	.word	0x08026be0
 800e0fc:	08026c84 	.word	0x08026c84

0800e100 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e100:	b590      	push	{r4, r7, lr}
 800e102:	b08f      	sub	sp, #60	; 0x3c
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	689a      	ldr	r2, [r3, #8]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3320      	adds	r3, #32
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4610      	mov	r0, r2
 800e11e:	4798      	blx	r3
 800e120:	4603      	mov	r3, r0
 800e122:	f241 023b 	movw	r2, #4155	; 0x103b
 800e126:	4293      	cmp	r3, r2
 800e128:	d805      	bhi.n	800e136 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800e12a:	4b7f      	ldr	r3, [pc, #508]	; (800e328 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e12c:	4a7f      	ldr	r2, [pc, #508]	; (800e32c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e12e:	21a2      	movs	r1, #162	; 0xa2
 800e130:	487f      	ldr	r0, [pc, #508]	; (800e330 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e132:	f017 fba1 	bl	8025878 <__assert_func>
 800e136:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	3320      	adds	r3, #32
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4610      	mov	r0, r2
 800e148:	4798      	blx	r3
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b0f      	cmp	r3, #15
 800e14e:	d805      	bhi.n	800e15c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800e150:	4b78      	ldr	r3, [pc, #480]	; (800e334 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800e152:	4a76      	ldr	r2, [pc, #472]	; (800e32c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e154:	21a3      	movs	r1, #163	; 0xa3
 800e156:	4876      	ldr	r0, [pc, #472]	; (800e330 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e158:	f017 fb8e 	bl	8025878 <__assert_func>
 800e15c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68da      	ldr	r2, [r3, #12]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	3320      	adds	r3, #32
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4610      	mov	r0, r2
 800e16e:	4798      	blx	r3
 800e170:	4603      	mov	r3, r0
 800e172:	2b53      	cmp	r3, #83	; 0x53
 800e174:	d805      	bhi.n	800e182 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800e176:	4b70      	ldr	r3, [pc, #448]	; (800e338 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800e178:	4a6c      	ldr	r2, [pc, #432]	; (800e32c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e17a:	21a4      	movs	r1, #164	; 0xa4
 800e17c:	486c      	ldr	r0, [pc, #432]	; (800e330 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e17e:	f017 fb7b 	bl	8025878 <__assert_func>
 800e182:	bf00      	nop
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	62bb      	str	r3, [r7, #40]	; 0x28
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	627b      	str	r3, [r7, #36]	; 0x24
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e190:	f008 fe3e 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 800e194:	4603      	mov	r3, r0
 800e196:	4618      	mov	r0, r3
 800e198:	f008 fe40 	bl	8016e1c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e19c:	6a3b      	ldr	r3, [r7, #32]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d008      	beq.n	800e1b6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	6a3b      	ldr	r3, [r7, #32]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	330c      	adds	r3, #12
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	4798      	blx	r3
    if (*currentTrans)
 800e1b6:	6a3b      	ldr	r3, [r7, #32]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d007      	beq.n	800e1ce <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	6a3b      	ldr	r3, [r7, #32]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	4798      	blx	r3
    if (*currentScreen)
 800e1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d008      	beq.n	800e1e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800e1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	3314      	adds	r3, #20
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4798      	blx	r3
    if (*currentPresenter)
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d008      	beq.n	800e202 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3304      	adds	r3, #4
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4610      	mov	r0, r2
 800e200:	4798      	blx	r3
    if (*currentScreen)
 800e202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d007      	beq.n	800e21a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800e20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4610      	mov	r0, r2
 800e218:	4798      	blx	r3
    if (*currentPresenter)
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d008      	beq.n	800e234 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3308      	adds	r3, #8
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4610      	mov	r0, r2
 800e232:	4798      	blx	r3
}
 800e234:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	2100      	movs	r1, #0
 800e23c:	4618      	mov	r0, r3
 800e23e:	f000 f9e2 	bl	800e606 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>
 800e242:	4603      	mov	r3, r0
 800e244:	4619      	mov	r1, r3
 800e246:	2054      	movs	r0, #84	; 0x54
 800e248:	f7ff f80e 	bl	800d268 <_ZnwjPv>
 800e24c:	4604      	mov	r4, r0
 800e24e:	2114      	movs	r1, #20
 800e250:	4620      	mov	r0, r4
 800e252:	f000 fa2f 	bl	800e6b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>
 800e256:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	2100      	movs	r1, #0
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 f99d 	bl	800e59e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800e264:	4603      	mov	r3, r0
 800e266:	4619      	mov	r1, r3
 800e268:	f241 003c 	movw	r0, #4156	; 0x103c
 800e26c:	f7fe fffc 	bl	800d268 <_ZnwjPv>
 800e270:	4604      	mov	r4, r0
 800e272:	4620      	mov	r0, r4
 800e274:	f002 fca2 	bl	8010bbc <_ZN11Screen1ViewC1Ev>
 800e278:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	2100      	movs	r1, #0
 800e280:	4618      	mov	r0, r3
 800e282:	f000 f99f 	bl	800e5c4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800e286:	4603      	mov	r3, r0
 800e288:	4619      	mov	r1, r3
 800e28a:	2010      	movs	r0, #16
 800e28c:	f7fe ffec 	bl	800d268 <_ZnwjPv>
 800e290:	4604      	mov	r4, r0
 800e292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e294:	4620      	mov	r0, r4
 800e296:	f002 fc39 	bl	8010b0c <_ZN16Screen1PresenterC1ER11Screen1View>
 800e29a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2a0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2a6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2ac:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	e000      	b.n	800e2bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	4619      	mov	r1, r3
 800e2be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e2c0:	f7ff fb9e 	bl	800da00 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7ff fc2e 	bl	800db2c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f000 f988 	bl	800e5ea <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800e2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2dc:	61fb      	str	r3, [r7, #28]
 800e2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e0:	61bb      	str	r3, [r7, #24]
 800e2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2e4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	330c      	adds	r3, #12
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	69f8      	ldr	r0, [r7, #28]
 800e2f0:	4798      	blx	r3
    newPresenter->activate();
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	69b8      	ldr	r0, [r7, #24]
 800e2fa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e2fc:	6979      	ldr	r1, [r7, #20]
 800e2fe:	69f8      	ldr	r0, [r7, #28]
 800e300:	f00a f9ea 	bl	80186d8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	3310      	adds	r3, #16
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6978      	ldr	r0, [r7, #20]
 800e30e:	4798      	blx	r3
    newTransition->invalidate();
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	3314      	adds	r3, #20
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	6978      	ldr	r0, [r7, #20]
 800e31a:	4798      	blx	r3
}
 800e31c:	bf00      	nop
    return newPresenter;
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e320:	4618      	mov	r0, r3
 800e322:	373c      	adds	r7, #60	; 0x3c
 800e324:	46bd      	mov	sp, r7
 800e326:	bd90      	pop	{r4, r7, pc}
 800e328:	08026a08 	.word	0x08026a08
 800e32c:	08026d28 	.word	0x08026d28
 800e330:	08026b9c 	.word	0x08026b9c
 800e334:	08026be0 	.word	0x08026be0
 800e338:	08026c84 	.word	0x08026c84

0800e33c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e33c:	b590      	push	{r4, r7, lr}
 800e33e:	b08f      	sub	sp, #60	; 0x3c
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
 800e348:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	689a      	ldr	r2, [r3, #8]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3320      	adds	r3, #32
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4610      	mov	r0, r2
 800e35a:	4798      	blx	r3
 800e35c:	4603      	mov	r3, r0
 800e35e:	f640 62a7 	movw	r2, #3751	; 0xea7
 800e362:	4293      	cmp	r3, r2
 800e364:	d805      	bhi.n	800e372 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800e366:	4b7f      	ldr	r3, [pc, #508]	; (800e564 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e368:	4a7f      	ldr	r2, [pc, #508]	; (800e568 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e36a:	21a2      	movs	r1, #162	; 0xa2
 800e36c:	487f      	ldr	r0, [pc, #508]	; (800e56c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e36e:	f017 fa83 	bl	8025878 <__assert_func>
 800e372:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	685a      	ldr	r2, [r3, #4]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3320      	adds	r3, #32
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4610      	mov	r0, r2
 800e384:	4798      	blx	r3
 800e386:	4603      	mov	r3, r0
 800e388:	2b0f      	cmp	r3, #15
 800e38a:	d805      	bhi.n	800e398 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800e38c:	4b78      	ldr	r3, [pc, #480]	; (800e570 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800e38e:	4a76      	ldr	r2, [pc, #472]	; (800e568 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e390:	21a3      	movs	r1, #163	; 0xa3
 800e392:	4876      	ldr	r0, [pc, #472]	; (800e56c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e394:	f017 fa70 	bl	8025878 <__assert_func>
 800e398:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	68da      	ldr	r2, [r3, #12]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3320      	adds	r3, #32
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	4798      	blx	r3
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b37      	cmp	r3, #55	; 0x37
 800e3b0:	d805      	bhi.n	800e3be <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800e3b2:	4b70      	ldr	r3, [pc, #448]	; (800e574 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800e3b4:	4a6c      	ldr	r2, [pc, #432]	; (800e568 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e3b6:	21a4      	movs	r1, #164	; 0xa4
 800e3b8:	486c      	ldr	r0, [pc, #432]	; (800e56c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e3ba:	f017 fa5d 	bl	8025878 <__assert_func>
 800e3be:	bf00      	nop
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e3cc:	f008 fd20 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f008 fd22 	bl	8016e1c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e3d8:	6a3b      	ldr	r3, [r7, #32]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d008      	beq.n	800e3f2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	6a3b      	ldr	r3, [r7, #32]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	330c      	adds	r3, #12
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	4798      	blx	r3
    if (*currentTrans)
 800e3f2:	6a3b      	ldr	r3, [r7, #32]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d007      	beq.n	800e40a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800e3fa:	6a3b      	ldr	r3, [r7, #32]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4610      	mov	r0, r2
 800e408:	4798      	blx	r3
    if (*currentScreen)
 800e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d008      	beq.n	800e424 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800e412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3314      	adds	r3, #20
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4610      	mov	r0, r2
 800e422:	4798      	blx	r3
    if (*currentPresenter)
 800e424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d008      	beq.n	800e43e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	3304      	adds	r3, #4
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4610      	mov	r0, r2
 800e43c:	4798      	blx	r3
    if (*currentScreen)
 800e43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d007      	beq.n	800e456 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4610      	mov	r0, r2
 800e454:	4798      	blx	r3
    if (*currentPresenter)
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d008      	beq.n	800e470 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800e45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	3308      	adds	r3, #8
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4610      	mov	r0, r2
 800e46e:	4798      	blx	r3
}
 800e470:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	2100      	movs	r1, #0
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 f97f 	bl	800e77c <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>
 800e47e:	4603      	mov	r3, r0
 800e480:	4619      	mov	r1, r3
 800e482:	2038      	movs	r0, #56	; 0x38
 800e484:	f7fe fef0 	bl	800d268 <_ZnwjPv>
 800e488:	4604      	mov	r4, r0
 800e48a:	2114      	movs	r1, #20
 800e48c:	4620      	mov	r0, r4
 800e48e:	f000 f9bd 	bl	800e80c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>
 800e492:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	2100      	movs	r1, #0
 800e49a:	4618      	mov	r0, r3
 800e49c:	f000 f9f8 	bl	800e890 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	f640 60a8 	movw	r0, #3752	; 0xea8
 800e4a8:	f7fe fede 	bl	800d268 <_ZnwjPv>
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f002 fc3a 	bl	8010d28 <_ZN11Screen2ViewC1Ev>
 800e4b4:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	2100      	movs	r1, #0
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 f9fa 	bl	800e8b6 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	2010      	movs	r0, #16
 800e4c8:	f7fe fece 	bl	800d268 <_ZnwjPv>
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f002 fbd1 	bl	8010c78 <_ZN16Screen2PresenterC1ER11Screen2View>
 800e4d6:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4dc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4e2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4e8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	e000      	b.n	800e4f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e4fc:	f7ff fa80 	bl	800da00 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e502:	3304      	adds	r3, #4
 800e504:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e506:	4618      	mov	r0, r3
 800e508:	f7ff fb10 	bl	800db2c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e510:	4618      	mov	r0, r3
 800e512:	f000 f9e3 	bl	800e8dc <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 800e516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e518:	61fb      	str	r3, [r7, #28]
 800e51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51c:	61bb      	str	r3, [r7, #24]
 800e51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e520:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	330c      	adds	r3, #12
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	69f8      	ldr	r0, [r7, #28]
 800e52c:	4798      	blx	r3
    newPresenter->activate();
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	69b8      	ldr	r0, [r7, #24]
 800e536:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e538:	6979      	ldr	r1, [r7, #20]
 800e53a:	69f8      	ldr	r0, [r7, #28]
 800e53c:	f00a f8cc 	bl	80186d8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	3310      	adds	r3, #16
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6978      	ldr	r0, [r7, #20]
 800e54a:	4798      	blx	r3
    newTransition->invalidate();
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	3314      	adds	r3, #20
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	6978      	ldr	r0, [r7, #20]
 800e556:	4798      	blx	r3
}
 800e558:	bf00      	nop
    return newPresenter;
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	373c      	adds	r7, #60	; 0x3c
 800e560:	46bd      	mov	sp, r7
 800e562:	bd90      	pop	{r4, r7, pc}
 800e564:	08026a08 	.word	0x08026a08
 800e568:	08026e40 	.word	0x08026e40
 800e56c:	08026b9c 	.word	0x08026b9c
 800e570:	08026be0 	.word	0x08026be0
 800e574:	08026c84 	.word	0x08026c84

0800e578 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	460b      	mov	r3, r1
 800e582:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3324      	adds	r3, #36	; 0x24
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	887a      	ldrh	r2, [r7, #2]
 800e58e:	4611      	mov	r1, r2
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	4798      	blx	r3
 800e594:	4603      	mov	r3, r0
    }
 800e596:	4618      	mov	r0, r3
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b082      	sub	sp, #8
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	3324      	adds	r3, #36	; 0x24
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	887a      	ldrh	r2, [r7, #2]
 800e5b4:	4611      	mov	r1, r2
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	4798      	blx	r3
 800e5ba:	4603      	mov	r3, r0
    }
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3324      	adds	r3, #36	; 0x24
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	887a      	ldrh	r2, [r7, #2]
 800e5da:	4611      	mov	r1, r2
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	4798      	blx	r3
 800e5e0:	4603      	mov	r3, r0
    }
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e5ea:	b480      	push	{r7}
 800e5ec:	b083      	sub	sp, #12
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
 800e5f2:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e5fa:	bf00      	nop
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 800e606:	b580      	push	{r7, lr}
 800e608:	b082      	sub	sp, #8
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
 800e60e:	460b      	mov	r3, r1
 800e610:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	3324      	adds	r3, #36	; 0x24
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	887a      	ldrh	r2, [r7, #2]
 800e61c:	4611      	mov	r1, r2
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	4798      	blx	r3
 800e622:	4603      	mov	r3, r0
    }
 800e624:	4618      	mov	r0, r3
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	4a05      	ldr	r2, [pc, #20]	; (800e64c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	601a      	str	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff fa95 	bl	800db6c <_ZN8touchgfx6WidgetD1Ev>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4618      	mov	r0, r3
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	08028870 	.word	0x08028870

0800e650 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7ff ffe7 	bl	800e62c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800e65e:	212c      	movs	r1, #44	; 0x2c
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f017 f8dd 	bl	8025820 <_ZdlPvj>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4618      	mov	r0, r3
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	4a05      	ldr	r2, [pc, #20]	; (800e690 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev+0x20>)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	601a      	str	r2, [r3, #0]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4618      	mov	r0, r3
 800e682:	f000 f983 	bl	800e98c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4618      	mov	r0, r3
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	08027afc 	.word	0x08027afc

0800e694 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED0Ev>:
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7ff ffe7 	bl	800e670 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800e6a2:	2110      	movs	r1, #16
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f017 f8bb 	bl	8025820 <_ZdlPvj>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800e6b4:	b590      	push	{r4, r7, lr}
 800e6b6:	b087      	sub	sp, #28
 800e6b8:	af02      	add	r7, sp, #8
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	460b      	mov	r3, r1
 800e6be:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7ff f8ae 	bl	800d824 <_ZN8touchgfx10TransitionC1Ev>
 800e6c8:	4a27      	ldr	r2, [pc, #156]	; (800e768 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb4>)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	601a      	str	r2, [r3, #0]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	330c      	adds	r3, #12
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f006 fb9a 	bl	8014e0c <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	639a      	str	r2, [r3, #56]	; 0x38
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800e6e8:	4a20      	ldr	r2, [pc, #128]	; (800e76c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb8>)
 800e6ea:	f107 0308 	add.w	r3, r7, #8
 800e6ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6f2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e6f6:	f107 0308 	add.w	r3, r7, #8
 800e6fa:	cb0c      	ldmia	r3, {r2, r3}
 800e6fc:	6879      	ldr	r1, [r7, #4]
 800e6fe:	4620      	mov	r0, r4
 800e700:	f000 f924 	bl	800e94c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	78fa      	ldrb	r2, [r7, #3]
 800e708:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2200      	movs	r2, #0
 800e718:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800e71c:	4b14      	ldr	r3, [pc, #80]	; (800e770 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xbc>)
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d01c      	beq.n	800e75e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f103 000c 	add.w	r0, r3, #12
 800e72a:	4b12      	ldr	r3, [pc, #72]	; (800e774 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc0>)
 800e72c:	881b      	ldrh	r3, [r3, #0]
 800e72e:	b21a      	sxth	r2, r3
 800e730:	4b11      	ldr	r3, [pc, #68]	; (800e778 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800e732:	881b      	ldrh	r3, [r3, #0]
 800e734:	b21b      	sxth	r3, r3
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	4613      	mov	r3, r2
 800e73a:	2200      	movs	r2, #0
 800e73c:	2100      	movs	r1, #0
 800e73e:	f7fe fef9 	bl	800d534 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	330c      	adds	r3, #12
 800e746:	4618      	mov	r0, r3
 800e748:	f006 fae3 	bl	8014d12 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
                break;
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
                break;
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800e74c:	4b0a      	ldr	r3, [pc, #40]	; (800e778 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800e74e:	881b      	ldrh	r3, [r3, #0]
 800e750:	425b      	negs	r3, r3
 800e752:	b29b      	uxth	r3, r3
 800e754:	b21a      	sxth	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 800e75c:	bf00      	nop
            }
        }
    }
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4618      	mov	r0, r3
 800e762:	3714      	adds	r7, #20
 800e764:	46bd      	mov	sp, r7
 800e766:	bd90      	pop	{r4, r7, pc}
 800e768:	08027ad0 	.word	0x08027ad0
 800e76c:	08026f58 	.word	0x08026f58
 800e770:	2004e117 	.word	0x2004e117
 800e774:	2004e10c 	.word	0x2004e10c
 800e778:	2004e10e 	.word	0x2004e10e

0800e77c <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	460b      	mov	r3, r1
 800e786:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	3324      	adds	r3, #36	; 0x24
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	887a      	ldrh	r2, [r7, #2]
 800e792:	4611      	mov	r1, r2
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	4798      	blx	r3
 800e798:	4603      	mov	r3, r0
    }
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
	...

0800e7a4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7ff f9ca 	bl	800db48 <_ZN8touchgfx6WidgetC1Ev>
 800e7b4:	4a03      	ldr	r2, [pc, #12]	; (800e7c4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	601a      	str	r2, [r3, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3708      	adds	r7, #8
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	08027b50 	.word	0x08027b50

0800e7c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	4a05      	ldr	r2, [pc, #20]	; (800e7e8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff f9c7 	bl	800db6c <_ZN8touchgfx6WidgetD1Ev>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	08027b50 	.word	0x08027b50

0800e7ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f7ff ffe7 	bl	800e7c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800e7fa:	2128      	movs	r1, #40	; 0x28
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f017 f80f 	bl	8025820 <_ZdlPvj>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4618      	mov	r0, r3
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af02      	add	r7, sp, #8
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	460b      	mov	r3, r1
 800e816:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7ff f802 	bl	800d824 <_ZN8touchgfx10TransitionC1Ev>
 800e820:	4a18      	ldr	r2, [pc, #96]	; (800e884 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x78>)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	601a      	str	r2, [r3, #0]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	78fa      	ldrb	r2, [r7, #3]
 800e82a:	725a      	strb	r2, [r3, #9]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	729a      	strb	r2, [r3, #10]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	81da      	strh	r2, [r3, #14]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	3310      	adds	r3, #16
 800e83c:	2228      	movs	r2, #40	; 0x28
 800e83e:	2100      	movs	r1, #0
 800e840:	4618      	mov	r0, r3
 800e842:	f017 f897 	bl	8025974 <memset>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	3310      	adds	r3, #16
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff ffaa 	bl	800e7a4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800e850:	4b0d      	ldr	r3, [pc, #52]	; (800e888 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800e852:	881b      	ldrh	r3, [r3, #0]
 800e854:	b21a      	sxth	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	819a      	strh	r2, [r3, #12]
            break;
 800e85a:	bf00      	nop
            targetValue = HAL::DISPLAY_HEIGHT;
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f103 0010 	add.w	r0, r3, #16
 800e862:	4b09      	ldr	r3, [pc, #36]	; (800e888 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800e864:	881b      	ldrh	r3, [r3, #0]
 800e866:	b21a      	sxth	r2, r3
 800e868:	4b08      	ldr	r3, [pc, #32]	; (800e88c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800e86a:	881b      	ldrh	r3, [r3, #0]
 800e86c:	b21b      	sxth	r3, r3
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	4613      	mov	r3, r2
 800e872:	2200      	movs	r2, #0
 800e874:	2100      	movs	r1, #0
 800e876:	f7fe fe5d 	bl	800d534 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4618      	mov	r0, r3
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	08027b2c 	.word	0x08027b2c
 800e888:	2004e10c 	.word	0x2004e10c
 800e88c:	2004e10e 	.word	0x2004e10e

0800e890 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	460b      	mov	r3, r1
 800e89a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3324      	adds	r3, #36	; 0x24
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	887a      	ldrh	r2, [r7, #2]
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	4798      	blx	r3
 800e8ac:	4603      	mov	r3, r0
    }
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3708      	adds	r7, #8
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b082      	sub	sp, #8
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
 800e8be:	460b      	mov	r3, r1
 800e8c0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3324      	adds	r3, #36	; 0x24
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	887a      	ldrh	r2, [r7, #2]
 800e8cc:	4611      	mov	r1, r2
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	4798      	blx	r3
 800e8d2:	4603      	mov	r3, r0
    }
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3708      	adds	r7, #8
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	683a      	ldr	r2, [r7, #0]
 800e8ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d00a      	beq.n	800e922 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2a>
        case WEST:
            d.moveRelative(calculatedValue, 0);
            break;
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	3354      	adds	r3, #84	; 0x54
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800e91a:	2100      	movs	r1, #0
 800e91c:	6838      	ldr	r0, [r7, #0]
 800e91e:	4798      	blx	r3
            break;
 800e920:	e000      	b.n	800e924 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 800e922:	bf00      	nop
        }
    }
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
	...

0800e92c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	4a04      	ldr	r2, [pc, #16]	; (800e948 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	601a      	str	r2, [r3, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4618      	mov	r0, r3
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	08027b14 	.word	0x08027b14

0800e94c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	4639      	mov	r1, r7
 800e958:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	4618      	mov	r0, r3
 800e960:	f7ff ffe4 	bl	800e92c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800e964:	4a08      	ldr	r2, [pc, #32]	; (800e988 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	605a      	str	r2, [r3, #4]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	3308      	adds	r3, #8
 800e974:	463a      	mov	r2, r7
 800e976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e97a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	4618      	mov	r0, r3
 800e982:	3710      	adds	r7, #16
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	08027afc 	.word	0x08027afc

0800e98c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
    }
 800e994:	4a04      	ldr	r2, [pc, #16]	; (800e9a8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	601a      	str	r2, [r3, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	4618      	mov	r0, r3
 800e99e:	370c      	adds	r7, #12
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr
 800e9a8:	08027b14 	.word	0x08027b14

0800e9ac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
    }
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7ff ffe9 	bl	800e98c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e9ba:	2104      	movs	r1, #4
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f016 ff2f 	bl	8025820 <_ZdlPvj>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>:
class SlideTransition : public Transition
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	4a0a      	ldr	r2, [pc, #40]	; (800ea00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev+0x34>)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	601a      	str	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	333c      	adds	r3, #60	; 0x3c
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7ff fe46 	bl	800e670 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	330c      	adds	r3, #12
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7ff fe1f 	bl	800e62c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fe ff2d 	bl	800d850 <_ZN8touchgfx10TransitionD1Ev>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	08027ad0 	.word	0x08027ad0

0800ea04 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED0Ev>:
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f7ff ffdd 	bl	800e9cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>
 800ea12:	2154      	movs	r1, #84	; 0x54
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f016 ff03 	bl	8025820 <_ZdlPvj>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
class WipeTransition : public Transition
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	4a08      	ldr	r2, [pc, #32]	; (800ea50 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	601a      	str	r2, [r3, #0]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3310      	adds	r3, #16
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7ff fec6 	bl	800e7c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7fe ff06 	bl	800d850 <_ZN8touchgfx10TransitionD1Ev>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4618      	mov	r0, r3
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	08027b2c 	.word	0x08027b2c

0800ea54 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7ff ffe1 	bl	800ea24 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>
 800ea62:	2138      	movs	r1, #56	; 0x38
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f016 fedb 	bl	8025820 <_ZdlPvj>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <_ZN8touchgfx12NoTransitionD1Ev>:
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	4a05      	ldr	r2, [pc, #20]	; (800ea94 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	601a      	str	r2, [r3, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fe fee3 	bl	800d850 <_ZN8touchgfx10TransitionD1Ev>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	08027c20 	.word	0x08027c20

0800ea98 <_ZN8touchgfx12NoTransitionD0Ev>:
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f7ff ffe7 	bl	800ea74 <_ZN8touchgfx12NoTransitionD1Ev>
 800eaa6:	210c      	movs	r1, #12
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f016 feb9 	bl	8025820 <_ZdlPvj>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4618      	mov	r0, r3
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	4a05      	ldr	r2, [pc, #20]	; (800ead8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4618      	mov	r0, r3
 800eaca:	f7fe fc99 	bl	800d400 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4618      	mov	r0, r3
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	08027c90 	.word	0x08027c90

0800eadc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7ff ffe7 	bl	800eab8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800eaea:	2110      	movs	r1, #16
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f016 fe97 	bl	8025820 <_ZdlPvj>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800eb04:	4b40      	ldr	r3, [pc, #256]	; (800ec08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x10c>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f083 0301 	eor.w	r3, r3, #1
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d003      	beq.n	800eb1a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1e>
            done = true;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2201      	movs	r2, #1
 800eb16:	721a      	strb	r2, [r3, #8]
            return;
 800eb18:	e073      	b.n	800ec02 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fe feb7 	bl	800d890 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800eb28:	3301      	adds	r3, #1
 800eb2a:	b2da      	uxtb	r2, r3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d82f      	bhi.n	800eba2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800eb48:	b298      	uxth	r0, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	2100      	movs	r1, #0
 800eb5a:	f009 fdc3 	bl	80186e4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	461a      	mov	r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	f003 0301 	and.w	r3, r3, #1
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d01b      	beq.n	800ebb2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800eb88:	2a00      	cmp	r2, #0
 800eb8a:	dd01      	ble.n	800eb90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x94>
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	e001      	b.n	800eb94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x98>
 800eb90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb94:	4413      	add	r3, r2
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	b21a      	sxth	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800eba0:	e007      	b.n	800ebb2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
            done = true;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2201      	movs	r2, #1
 800eba6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 800ebb0:	e027      	b.n	800ec02 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getY();
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	330c      	adds	r3, #12
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fe fcdd 	bl	800d576 <_ZNK8touchgfx8Drawable4getYEv>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	b28b      	uxth	r3, r1
 800ebca:	1ad3      	subs	r3, r2, r3
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	b21a      	sxth	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(0, calculatedValue);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f103 000c 	add.w	r0, r3, #12
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	f009 f92b 	bl	8017e40 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800ebea:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6858      	ldr	r0, [r3, #4]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	337c      	adds	r3, #124	; 0x7c
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	323c      	adds	r2, #60	; 0x3c
 800ebfe:	4611      	mov	r1, r2
 800ec00:	4798      	blx	r3
    }
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	2004e117 	.word	0x2004e117

0800ec0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv>:
    virtual void tearDown()
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800ec14:	4b0b      	ldr	r3, [pc, #44]	; (800ec44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x38>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d00e      	beq.n	800ec3a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00a      	beq.n	800ec3a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6858      	ldr	r0, [r3, #4]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	3364      	adds	r3, #100	; 0x64
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	320c      	adds	r2, #12
 800ec36:	4611      	mov	r1, r2
 800ec38:	4798      	blx	r3
    }
 800ec3a:	bf00      	nop
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	2004e117 	.word	0x2004e117

0800ec48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv>:
    virtual void init()
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b088      	sub	sp, #32
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800ec50:	4b1a      	ldr	r3, [pc, #104]	; (800ecbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x74>)
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d02d      	beq.n	800ecb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x6c>
            Transition::init();
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fe fe2c 	bl	800d8b8 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800ec60:	4a17      	ldr	r2, [pc, #92]	; (800ecc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x78>)
 800ec62:	f107 0318 	add.w	r3, r7, #24
 800ec66:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec6a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec6e:	f107 0008 	add.w	r0, r7, #8
 800ec72:	f107 0318 	add.w	r3, r7, #24
 800ec76:	cb0c      	ldmia	r3, {r2, r3}
 800ec78:	6879      	ldr	r1, [r7, #4]
 800ec7a:	f7ff fe67 	bl	800e94c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	685a      	ldr	r2, [r3, #4]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	337c      	adds	r3, #124	; 0x7c
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f107 0108 	add.w	r1, r7, #8
 800ec90:	4610      	mov	r0, r2
 800ec92:	4798      	blx	r3
            screenContainer->add(snapshot);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6858      	ldr	r0, [r3, #4]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	3360      	adds	r3, #96	; 0x60
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	320c      	adds	r2, #12
 800eca6:	4611      	mov	r1, r2
 800eca8:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800ecaa:	f107 0308 	add.w	r3, r7, #8
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7ff fcde 	bl	800e670 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
    }
 800ecb4:	bf00      	nop
 800ecb6:	3720      	adds	r7, #32
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	2004e117 	.word	0x2004e117
 800ecc0:	08026f60 	.word	0x08026f60

0800ecc4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3354      	adds	r3, #84	; 0x54
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a05      	ldr	r2, [pc, #20]	; (800ecec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x28>)
 800ecd8:	8812      	ldrh	r2, [r2, #0]
 800ecda:	b212      	sxth	r2, r2
 800ecdc:	2100      	movs	r1, #0
 800ecde:	6838      	ldr	r0, [r7, #0]
 800ece0:	4798      	blx	r3
            break;
 800ece2:	bf00      	nop
    }
 800ece4:	bf00      	nop
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	2004e10e 	.word	0x2004e10e

0800ecf0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	68d2      	ldr	r2, [r2, #12]
 800ed02:	1052      	asrs	r2, r2, #1
 800ed04:	1898      	adds	r0, r3, r2
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	f003 0301 	and.w	r3, r3, #1
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d102      	bne.n	800ed18 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x28>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	e00a      	b.n	800ed2e <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	68d2      	ldr	r2, [r2, #12]
 800ed20:	1052      	asrs	r2, r2, #1
 800ed22:	4413      	add	r3, r2
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	6892      	ldr	r2, [r2, #8]
 800ed2a:	4413      	add	r3, r2
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	6839      	ldr	r1, [r7, #0]
 800ed30:	4798      	blx	r3
    }
 800ed32:	bf00      	nop
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800ed3a:	b480      	push	{r7}
 800ed3c:	b083      	sub	sp, #12
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d010      	beq.n	800ed6c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d107      	bne.n	800ed62 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	f003 0301 	and.w	r3, r3, #1
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e000      	b.n	800ed64 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800ed62:	2300      	movs	r3, #0
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d001      	beq.n	800ed6c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800ed68:	2301      	movs	r3, #1
 800ed6a:	e000      	b.n	800ed6e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x34>
 800ed6c:	2300      	movs	r3, #0
    }
 800ed6e:	4618      	mov	r0, r3
 800ed70:	370c      	adds	r7, #12
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr
	...

0800ed7c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 800ed7c:	b590      	push	{r4, r7, lr}
 800ed7e:	b093      	sub	sp, #76	; 0x4c
 800ed80:	af02      	add	r7, sp, #8
 800ed82:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fe fd82 	bl	800d890 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	7a9b      	ldrb	r3, [r3, #10]
 800ed90:	3301      	adds	r3, #1
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	7a9a      	ldrb	r2, [r3, #10]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	7a5b      	ldrb	r3, [r3, #9]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d82b      	bhi.n	800edfc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	7a9b      	ldrb	r3, [r3, #10]
 800eda8:	b298      	uxth	r0, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	7a5b      	ldrb	r3, [r3, #9]
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	2100      	movs	r1, #0
 800edb8:	f009 fc94 	bl	80186e4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800edbc:	4603      	mov	r3, r0
 800edbe:	461a      	mov	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800edca:	b29b      	uxth	r3, r3
 800edcc:	f003 0301 	and.w	r3, r3, #1
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d019      	beq.n	800ee0a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	dd01      	ble.n	800edec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 800ede8:	2201      	movs	r2, #1
 800edea:	e001      	b.n	800edf0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 800edec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edf0:	4413      	add	r3, r2
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	b21a      	sxth	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	81da      	strh	r2, [r3, #14]
 800edfa:	e006      	b.n	800ee0a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	729a      	strb	r2, [r3, #10]
            return;
 800ee08:	e07d      	b.n	800ef06 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x18a>
        switch (templateDirection)
        {
        case EAST:
            {
                // Cover must have width of remaining part
                const uint16_t prevSolidWidth = solid.getWidth();
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	3310      	adds	r3, #16
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fe fbbe 	bl	800d590 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ee14:	4603      	mov	r3, r0
 800ee16:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f103 0010 	add.w	r0, r3, #16
 800ee1e:	4b3b      	ldr	r3, [pc, #236]	; (800ef0c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x190>)
 800ee20:	881a      	ldrh	r2, [r3, #0]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	b21b      	sxth	r3, r3
 800ee30:	4619      	mov	r1, r3
 800ee32:	f7fe fbf6 	bl	800d622 <_ZN8touchgfx8Drawable8setWidthEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	3310      	adds	r3, #16
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fe fba8 	bl	800d590 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ee40:	4603      	mov	r3, r0
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	3310      	adds	r3, #16
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fe fb9e 	bl	800d590 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ee54:	4603      	mov	r3, r0
 800ee56:	4619      	mov	r1, r3
 800ee58:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800ee5c:	4b2c      	ldr	r3, [pc, #176]	; (800ef10 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x194>)
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	b21b      	sxth	r3, r3
 800ee62:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	4613      	mov	r3, r2
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f7fe fa1f 	bl	800d2ae <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	4618      	mov	r0, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	3310      	adds	r3, #16
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ee84:	4611      	mov	r1, r2
 800ee86:	4798      	blx	r3
                break;
 800ee88:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	7a9b      	ldrb	r3, [r3, #10]
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d139      	bne.n	800ef06 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x18a>
 800ee92:	4b20      	ldr	r3, [pc, #128]	; (800ef14 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x198>)
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d035      	beq.n	800ef06 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x18a>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	3310      	adds	r3, #16
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fe fb3c 	bl	800d51c <_ZNK8touchgfx8Drawable7getRectEv>
 800eea4:	4602      	mov	r2, r0
 800eea6:	f107 0310 	add.w	r3, r7, #16
 800eeaa:	6810      	ldr	r0, [r2, #0]
 800eeac:	6851      	ldr	r1, [r2, #4]
 800eeae:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800eeb0:	f7fe fc90 	bl	800d7d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	3230      	adds	r2, #48	; 0x30
 800eeba:	6812      	ldr	r2, [r2, #0]
 800eebc:	4618      	mov	r0, r3
 800eebe:	4790      	blx	r2
 800eec0:	63f8      	str	r0, [r7, #60]	; 0x3c

            Rect source;
 800eec2:	f107 0308 	add.w	r3, r7, #8
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fe f9da 	bl	800d280 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 800eecc:	2300      	movs	r3, #0
 800eece:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 800eed0:	2300      	movs	r3, #0
 800eed2:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 800eed4:	4b0d      	ldr	r3, [pc, #52]	; (800ef0c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x190>)
 800eed6:	881b      	ldrh	r3, [r3, #0]
 800eed8:	b21b      	sxth	r3, r3
 800eeda:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 800eedc:	4b0c      	ldr	r3, [pc, #48]	; (800ef10 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x194>)
 800eede:	881b      	ldrh	r3, [r3, #0]
 800eee0:	b21b      	sxth	r3, r3
 800eee2:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800eee4:	f7fe fc76 	bl	800d7d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800eee8:	f7fe fc80 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 800eeec:	6803      	ldr	r3, [r0, #0]
 800eeee:	330c      	adds	r3, #12
 800eef0:	681c      	ldr	r4, [r3, #0]
 800eef2:	f107 0310 	add.w	r3, r7, #16
 800eef6:	f107 0208 	add.w	r2, r7, #8
 800eefa:	2100      	movs	r1, #0
 800eefc:	9101      	str	r1, [sp, #4]
 800eefe:	21ff      	movs	r1, #255	; 0xff
 800ef00:	9100      	str	r1, [sp, #0]
 800ef02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef04:	47a0      	blx	r4
        }
    }
 800ef06:	3744      	adds	r7, #68	; 0x44
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd90      	pop	{r4, r7, pc}
 800ef0c:	2004e10c 	.word	0x2004e10c
 800ef10:	2004e10e 	.word	0x2004e10e
 800ef14:	2004e116 	.word	0x2004e116

0800ef18 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6858      	ldr	r0, [r3, #4]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	3364      	adds	r3, #100	; 0x64
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	3210      	adds	r2, #16
 800ef32:	4611      	mov	r1, r2
 800ef34:	4798      	blx	r3
    }
 800ef36:	bf00      	nop
 800ef38:	3708      	adds	r7, #8
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b082      	sub	sp, #8
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fe fcb5 	bl	800d8b8 <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6858      	ldr	r0, [r3, #4]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	3360      	adds	r3, #96	; 0x60
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	3210      	adds	r2, #16
 800ef60:	4611      	mov	r1, r2
 800ef62:	4798      	blx	r3
    }
 800ef64:	bf00      	nop
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
    {
    }
 800ef74:	bf00      	nop
 800ef76:	370c      	adds	r7, #12
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
        }
 800ef8a:	bf00      	nop
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr

0800ef96 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b084      	sub	sp, #16
 800ef9a:	af02      	add	r7, sp, #8
 800ef9c:	6078      	str	r0, [r7, #4]
 800ef9e:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	4613      	mov	r3, r2
 800efb0:	2200      	movs	r2, #0
 800efb2:	2100      	movs	r1, #0
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7fe f97a 	bl	800d2ae <_ZN8touchgfx4RectC1Essss>
        }
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	3708      	adds	r7, #8
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b082      	sub	sp, #8
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	68d2      	ldr	r2, [r2, #12]
 800efd2:	1052      	asrs	r2, r2, #1
 800efd4:	1899      	adds	r1, r3, r2
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	e00a      	b.n	800effe <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	68d2      	ldr	r2, [r2, #12]
 800eff0:	1052      	asrs	r2, r2, #1
 800eff2:	4413      	add	r3, r2
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	6892      	ldr	r2, [r2, #8]
 800effa:	4413      	add	r3, r2
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4608      	mov	r0, r1
 800f000:	4798      	blx	r3
    }
 800f002:	bf00      	nop
 800f004:	3708      	adds	r7, #8
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f00a:	b480      	push	{r7}
 800f00c:	b083      	sub	sp, #12
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d010      	beq.n	800f03c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	689b      	ldr	r3, [r3, #8]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d107      	bne.n	800f032 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d101      	bne.n	800f032 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f02e:	2301      	movs	r3, #1
 800f030:	e000      	b.n	800f034 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f032:	2300      	movs	r3, #0
 800f034:	2b01      	cmp	r3, #1
 800f036:	d001      	beq.n	800f03c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f038:	2301      	movs	r3, #1
 800f03a:	e000      	b.n	800f03e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f03c:	2300      	movs	r3, #0
    }
 800f03e:	4618      	mov	r0, r3
 800f040:	370c      	adds	r7, #12
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr

0800f04a <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800f04a:	b480      	push	{r7}
 800f04c:	b083      	sub	sp, #12
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
        : color(0)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2200      	movs	r2, #0
 800f056:	601a      	str	r2, [r3, #0]
    }
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr

0800f066 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f066:	b480      	push	{r7}
 800f068:	b083      	sub	sp, #12
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
 800f06e:	6039      	str	r1, [r7, #0]
        : color(col)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	601a      	str	r2, [r3, #0]
    }
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	4618      	mov	r0, r3
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
        return color;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
    }
 800f090:	4618      	mov	r0, r3
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	370c      	adds	r7, #12
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
    {
 800f0bc:	4a06      	ldr	r2, [pc, #24]	; (800f0d8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	601a      	str	r2, [r3, #0]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 ff84 	bl	800ffd4 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	08028b64 	.word	0x08028b64

0800f0dc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
    }
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff ffe5 	bl	800f0b4 <_ZN8touchgfx6ScreenD1Ev>
 800f0ea:	213c      	movs	r1, #60	; 0x3c
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f016 fb97 	bl	8025820 <_ZdlPvj>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    {
    }
 800f104:	bf00      	nop
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f110:	b480      	push	{r7}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
    {
    }
 800f118:	bf00      	nop
 800f11a:	370c      	adds	r7, #12
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr

0800f124 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
    {
    }
 800f12c:	bf00      	nop
 800f12e:	370c      	adds	r7, #12
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr

0800f138 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
    {
    }
 800f140:	bf00      	nop
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	460b      	mov	r3, r1
 800f156:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	3304      	adds	r3, #4
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	4618      	mov	r0, r3
 800f176:	f003 fd81 	bl	8012c7c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f17a:	bf00      	nop
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
	...

0800f184 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4618      	mov	r0, r3
 800f190:	2326      	movs	r3, #38	; 0x26
 800f192:	461a      	mov	r2, r3
 800f194:	2100      	movs	r1, #0
 800f196:	f016 fbed 	bl	8025974 <memset>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fe fcd3 	bl	800db48 <_ZN8touchgfx6WidgetC1Ev>
 800f1a2:	4a09      	ldr	r2, [pc, #36]	; (800f1c8 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	601a      	str	r2, [r3, #0]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	22ff      	movs	r2, #255	; 0xff
 800f1ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	3328      	adds	r3, #40	; 0x28
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff ff55 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	080288e0 	.word	0x080288e0

0800f1cc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	683a      	ldr	r2, [r7, #0]
 800f1da:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f1dc:	bf00      	nop
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800f1f0:	4a06      	ldr	r2, [pc, #24]	; (800f20c <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	601a      	str	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	809a      	strh	r2, [r3, #4]
    {
    }
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	4618      	mov	r0, r3
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	08027e88 	.word	0x08027e88

0800f210 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
    {
 800f218:	4a04      	ldr	r2, [pc, #16]	; (800f22c <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	601a      	str	r2, [r3, #0]
    }
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	4618      	mov	r0, r3
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	08027e88 	.word	0x08027e88

0800f230 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
    }
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f7ff ffe9 	bl	800f210 <_ZN8touchgfx15AbstractPainterD1Ev>
 800f23e:	2108      	movs	r1, #8
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f016 faed 	bl	8025820 <_ZdlPvj>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4618      	mov	r0, r3
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800f258:	2300      	movs	r3, #0
    }
 800f25a:	4618      	mov	r0, r3
 800f25c:	370c      	adds	r7, #12
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr

0800f266 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800f266:	b480      	push	{r7}
 800f268:	b083      	sub	sp, #12
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
 800f26e:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	809a      	strh	r2, [r3, #4]
        return true;
 800f27a:	2301      	movs	r3, #1
    }
 800f27c:	4618      	mov	r0, r3
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
    {
        return;
 800f290:	bf00      	nop
    }
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
     */
    class Q5
    {
    public:
        /** Initializes a new instance of the Q5 class. */
        Q5()
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
            : v(0)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	601a      	str	r2, [r3, #0]
        {
        }
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr

0800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
            : v(i)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	601a      	str	r2, [r3, #0]
        {
        }
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	370c      	adds	r7, #12
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr

0800f2d6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800f2d6:	b480      	push	{r7}
 800f2d8:	b083      	sub	sp, #12
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
        {
            return v;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
        }
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	370c      	adds	r7, #12
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q10 format.
         *
         * @param  i int pre-formattet in Q10 format.
         */
        explicit Q10(int i)
 800f2ee:	b480      	push	{r7}
 800f2f0:	b083      	sub	sp, #12
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	6039      	str	r1, [r7, #0]
            : v(i)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	683a      	ldr	r2, [r7, #0]
 800f2fc:	601a      	str	r2, [r3, #0]
        {
        }
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4618      	mov	r0, r3
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f31c:	bf00      	nop
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	460b      	mov	r3, r1
 800f332:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	78fa      	ldrb	r2, [r7, #3]
 800f338:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 800f356:	4618      	mov	r0, r3
 800f358:	370c      	adds	r7, #12
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr

0800f362 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 800f362:	b580      	push	{r7, lr}
 800f364:	b082      	sub	sp, #8
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
 800f36a:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7fd ff87 	bl	800d280 <_ZN8touchgfx4RectC1Ev>
    }
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
	...

0800f37c <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
    {
 800f386:	4a08      	ldr	r2, [pc, #32]	; (800f3a8 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	601a      	str	r2, [r3, #0]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	3304      	adds	r3, #4
 800f390:	4618      	mov	r0, r3
 800f392:	f7ff fe5a 	bl	800f04a <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f827 	bl	800f3ec <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3708      	adds	r7, #8
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	08027e74 	.word	0x08027e74

0800f3ac <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
    {
 800f3b4:	4a04      	ldr	r2, [pc, #16]	; (800f3c8 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	601a      	str	r2, [r3, #0]
    }
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	08027e74 	.word	0x08027e74

0800f3cc <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
    }
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7ff ffe9 	bl	800f3ac <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f3da:	2108      	movs	r1, #8
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f016 fa1f 	bl	8025820 <_ZdlPvj>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	683a      	ldr	r2, [r7, #0]
 800f3fa:	605a      	str	r2, [r3, #4]
    }
 800f3fc:	bf00      	nop
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4618      	mov	r0, r3
 800f414:	f7ff fee8 	bl	800f1e8 <_ZN8touchgfx15AbstractPainterC1Ev>
 800f418:	4a26      	ldr	r2, [pc, #152]	; (800f4b4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	601a      	str	r2, [r3, #0]
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800f422:	f7fe f9e3 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 800f426:	4603      	mov	r3, r0
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	322c      	adds	r2, #44	; 0x2c
 800f42c:	6812      	ldr	r2, [r2, #0]
 800f42e:	4618      	mov	r0, r3
 800f430:	4790      	blx	r2
 800f432:	4603      	mov	r3, r0
 800f434:	461a      	mov	r2, r3
 800f436:	7bfb      	ldrb	r3, [r7, #15]
 800f438:	4293      	cmp	r3, r2
 800f43a:	bf0c      	ite	eq
 800f43c:	2301      	moveq	r3, #1
 800f43e:	2300      	movne	r3, #0
 800f440:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800f442:	f7fe f9c7 	bl	800d7d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800f446:	4603      	mov	r3, r0
 800f448:	4618      	mov	r0, r3
 800f44a:	f7ff fe27 	bl	800f09c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	bf14      	ite	ne
 800f454:	2301      	movne	r3, #1
 800f456:	2300      	moveq	r3, #0
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d01b      	beq.n	800f496 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800f45e:	f7fe f9b9 	bl	800d7d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800f462:	4603      	mov	r3, r0
 800f464:	4618      	mov	r0, r3
 800f466:	f7ff fe19 	bl	800f09c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f46a:	4603      	mov	r3, r0
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	322c      	adds	r2, #44	; 0x2c
 800f470:	6812      	ldr	r2, [r2, #0]
 800f472:	4618      	mov	r0, r3
 800f474:	4790      	blx	r2
 800f476:	4603      	mov	r3, r0
 800f478:	461a      	mov	r2, r3
 800f47a:	7bfb      	ldrb	r3, [r7, #15]
 800f47c:	4293      	cmp	r3, r2
 800f47e:	bf0c      	ite	eq
 800f480:	2301      	moveq	r3, #1
 800f482:	2300      	movne	r3, #0
 800f484:	b2da      	uxtb	r2, r3
 800f486:	7bbb      	ldrb	r3, [r7, #14]
 800f488:	4313      	orrs	r3, r2
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	bf14      	ite	ne
 800f490:	2301      	movne	r3, #1
 800f492:	2300      	moveq	r3, #0
 800f494:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800f496:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d105      	bne.n	800f4a8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 800f49c:	4b06      	ldr	r3, [pc, #24]	; (800f4b8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 800f49e:	4a07      	ldr	r2, [pc, #28]	; (800f4bc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 800f4a0:	212c      	movs	r1, #44	; 0x2c
 800f4a2:	4807      	ldr	r0, [pc, #28]	; (800f4c0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 800f4a4:	f016 f9e8 	bl	8025878 <__assert_func>
 800f4a8:	bf00      	nop
    }
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3710      	adds	r7, #16
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	08027e54 	.word	0x08027e54
 800f4b8:	08026f68 	.word	0x08026f68
 800f4bc:	08026fc8 	.word	0x08026fc8
 800f4c0:	08027004 	.word	0x08027004

0800f4c4 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	4a05      	ldr	r2, [pc, #20]	; (800f4e4 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	601a      	str	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7ff fe9b 	bl	800f210 <_ZN8touchgfx15AbstractPainterD1Ev>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	08027e54 	.word	0x08027e54

0800f4e8 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f7ff ffe7 	bl	800f4c4 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800f4f6:	2108      	movs	r1, #8
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f016 f991 	bl	8025820 <_ZdlPvj>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4618      	mov	r0, r3
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4618      	mov	r0, r3
 800f516:	f7ff ff77 	bl	800f408 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	3308      	adds	r3, #8
 800f51e:	6839      	ldr	r1, [r7, #0]
 800f520:	4618      	mov	r0, r3
 800f522:	f7ff ff2b 	bl	800f37c <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800f526:	4a05      	ldr	r2, [pc, #20]	; (800f53c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	4a04      	ldr	r2, [pc, #16]	; (800f540 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	609a      	str	r2, [r3, #8]
    {
    }
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4618      	mov	r0, r3
 800f536:	3708      	adds	r7, #8
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	080285ec 	.word	0x080285ec
 800f540:	08028610 	.word	0x08028610

0800f544 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	3308      	adds	r3, #8
 800f552:	6839      	ldr	r1, [r7, #0]
 800f554:	4618      	mov	r0, r3
 800f556:	f7ff ff49 	bl	800f3ec <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 800f560:	f107 030c 	add.w	r3, r7, #12
 800f564:	4618      	mov	r0, r3
 800f566:	f7ff fd8d 	bl	800f084 <_ZNK8touchgfx9colortypecvmEv>
 800f56a:	4603      	mov	r3, r0
 800f56c:	0a1b      	lsrs	r3, r3, #8
 800f56e:	b29b      	uxth	r3, r3
 800f570:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f574:	f023 0307 	bic.w	r3, r3, #7
 800f578:	b29c      	uxth	r4, r3
 800f57a:	f107 030c 	add.w	r3, r7, #12
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff fd80 	bl	800f084 <_ZNK8touchgfx9colortypecvmEv>
 800f584:	4603      	mov	r3, r0
 800f586:	095b      	lsrs	r3, r3, #5
 800f588:	b29b      	uxth	r3, r3
 800f58a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f58e:	b29b      	uxth	r3, r3
 800f590:	4323      	orrs	r3, r4
 800f592:	b29c      	uxth	r4, r3
 800f594:	f107 030c 	add.w	r3, r7, #12
 800f598:	4618      	mov	r0, r3
 800f59a:	f7ff fd73 	bl	800f084 <_ZNK8touchgfx9colortypecvmEv>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	08db      	lsrs	r3, r3, #3
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	f003 031f 	and.w	r3, r3, #31
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	4323      	orrs	r3, r4
 800f5ac:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	821a      	strh	r2, [r3, #16]
    }
 800f5b2:	bf00      	nop
 800f5b4:	3714      	adds	r7, #20
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd90      	pop	{r4, r7, pc}

0800f5ba <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800f5ba:	f1a0 0008 	sub.w	r0, r0, #8
 800f5be:	e7c1      	b.n	800f544 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

0800f5c0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	4a05      	ldr	r2, [pc, #20]	; (800f5e0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	601a      	str	r2, [r3, #0]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff fd6f 	bl	800f0b4 <_ZN8touchgfx6ScreenD1Ev>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}
 800f5e0:	08027e20 	.word	0x08027e20

0800f5e4 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7ff ffe7 	bl	800f5c0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800f5f2:	2140      	movs	r1, #64	; 0x40
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f016 f913 	bl	8025820 <_ZdlPvj>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	4a1b      	ldr	r2, [pc, #108]	; (800f67c <_ZN15Screen1ViewBaseD1Ev+0x78>)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800f618:	4618      	mov	r0, r3
 800f61a:	f000 fd41 	bl	80100a0 <_ZN8touchgfx13PainterRGB565D1Ev>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f624:	4618      	mov	r0, r3
 800f626:	f000 fcb3 	bl	800ff90 <_ZN8touchgfx5ShapeILt4EED1Ev>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800f630:	4618      	mov	r0, r3
 800f632:	f000 fd35 	bl	80100a0 <_ZN8touchgfx13PainterRGB565D1Ev>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	33f4      	adds	r3, #244	; 0xf4
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 fca8 	bl	800ff90 <_ZN8touchgfx5ShapeILt4EED1Ev>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	33e0      	adds	r3, #224	; 0xe0
 800f644:	4618      	mov	r0, r3
 800f646:	f000 fd2b 	bl	80100a0 <_ZN8touchgfx13PainterRGB565D1Ev>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3398      	adds	r3, #152	; 0x98
 800f64e:	4618      	mov	r0, r3
 800f650:	f000 fd04 	bl	801005c <_ZN8touchgfx6CircleD1Ev>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	336c      	adds	r3, #108	; 0x6c
 800f658:	4618      	mov	r0, r3
 800f65a:	f000 fcdd 	bl	8010018 <_ZN8touchgfx3BoxD1Ev>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	3340      	adds	r3, #64	; 0x40
 800f662:	4618      	mov	r0, r3
 800f664:	f000 fcd8 	bl	8010018 <_ZN8touchgfx3BoxD1Ev>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7ff ffa8 	bl	800f5c0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4618      	mov	r0, r3
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
 800f67a:	bf00      	nop
 800f67c:	08027d58 	.word	0x08027d58

0800f680 <_ZN15Screen1ViewBaseD0Ev>:
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7ff ffbb 	bl	800f604 <_ZN15Screen1ViewBaseD1Ev>
 800f68e:	f241 013c 	movw	r1, #4156	; 0x103c
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f016 f8c4 	bl	8025820 <_ZdlPvj>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4618      	mov	r0, r3
 800f69c:	3708      	adds	r7, #8
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b082      	sub	sp, #8
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f6aa:	f007 fbb1 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 800f6ae:	4603      	mov	r3, r0
    }
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	4a05      	ldr	r2, [pc, #20]	; (800f6d8 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	601a      	str	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fe fa4f 	bl	800db6c <_ZN8touchgfx6WidgetD1Ev>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	080287f8 	.word	0x080287f8

0800f6dc <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7ff ffe7 	bl	800f6b8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f6ea:	212c      	movs	r1, #44	; 0x2c
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f016 f897 	bl	8025820 <_ZdlPvj>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3708      	adds	r7, #8
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <_ZN8touchgfx13AbstractShapeD1Ev>:
 * around 0,0. The shapes points (corners) are calculated with regards to scaling and
 * rotation to allow for faster redrawing. Care must be taken to call
 * updateAbstractShapeCache() after updating the shape, the scale of the shape or the
 * rotation of the shape.
 */
class AbstractShape : public CanvasWidget
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	4a05      	ldr	r2, [pc, #20]	; (800f71c <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	601a      	str	r2, [r3, #0]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7ff ffd3 	bl	800f6b8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	080286ec 	.word	0x080286ec

0800f720 <_ZN8touchgfx13AbstractShapeD0Ev>:
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f7ff ffe7 	bl	800f6fc <_ZN8touchgfx13AbstractShapeD1Ev>
 800f72e:	2148      	movs	r1, #72	; 0x48
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f016 f875 	bl	8025820 <_ZdlPvj>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <_ZN8touchgfx5ShapeILt4EEC1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 800f740:	b5b0      	push	{r4, r5, r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f004 fc92 	bl	8014074 <_ZN8touchgfx13AbstractShapeC1Ev>
 800f750:	4a1b      	ldr	r2, [pc, #108]	; (800f7c0 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x80>)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	601a      	str	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	3348      	adds	r3, #72	; 0x48
 800f75a:	2403      	movs	r4, #3
 800f75c:	461d      	mov	r5, r3
 800f75e:	2c00      	cmp	r4, #0
 800f760:	db05      	blt.n	800f76e <_ZN8touchgfx5ShapeILt4EEC1Ev+0x2e>
 800f762:	4628      	mov	r0, r5
 800f764:	f7ff fd9a 	bl	800f29c <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800f768:	3504      	adds	r5, #4
 800f76a:	3c01      	subs	r4, #1
 800f76c:	e7f7      	b.n	800f75e <_ZN8touchgfx5ShapeILt4EEC1Ev+0x1e>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	3358      	adds	r3, #88	; 0x58
 800f772:	2403      	movs	r4, #3
 800f774:	461d      	mov	r5, r3
 800f776:	2c00      	cmp	r4, #0
 800f778:	db05      	blt.n	800f786 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x46>
 800f77a:	4628      	mov	r0, r5
 800f77c:	f7ff fd8e 	bl	800f29c <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800f780:	3504      	adds	r5, #4
 800f782:	3c01      	subs	r4, #1
 800f784:	e7f7      	b.n	800f776 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x36>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	3368      	adds	r3, #104	; 0x68
 800f78a:	2403      	movs	r4, #3
 800f78c:	461d      	mov	r5, r3
 800f78e:	2c00      	cmp	r4, #0
 800f790:	db05      	blt.n	800f79e <_ZN8touchgfx5ShapeILt4EEC1Ev+0x5e>
 800f792:	4628      	mov	r0, r5
 800f794:	f7ff fd82 	bl	800f29c <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800f798:	3504      	adds	r5, #4
 800f79a:	3c01      	subs	r4, #1
 800f79c:	e7f7      	b.n	800f78e <_ZN8touchgfx5ShapeILt4EEC1Ev+0x4e>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	3378      	adds	r3, #120	; 0x78
 800f7a2:	2403      	movs	r4, #3
 800f7a4:	461d      	mov	r5, r3
 800f7a6:	2c00      	cmp	r4, #0
 800f7a8:	db05      	blt.n	800f7b6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x76>
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	f7ff fd76 	bl	800f29c <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800f7b0:	3504      	adds	r5, #4
 800f7b2:	3c01      	subs	r4, #1
 800f7b4:	e7f7      	b.n	800f7a6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x66>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bdb0      	pop	{r4, r5, r7, pc}
 800f7c0:	08027d8c 	.word	0x08027d8c

0800f7c4 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase()
 800f7c4:	b5b0      	push	{r4, r5, r7, lr}
 800f7c6:	b0a0      	sub	sp, #128	; 0x80
 800f7c8:	af02      	add	r7, sp, #8
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f000 fa6a 	bl	800fca8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800f7d4:	4ae1      	ldr	r2, [pc, #900]	; (800fb5c <_ZN15Screen1ViewBaseC1Ev+0x398>)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	601a      	str	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	3340      	adds	r3, #64	; 0x40
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7ff fcd0 	bl	800f184 <_ZN8touchgfx3BoxC1Ev>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	336c      	adds	r3, #108	; 0x6c
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7ff fccb 	bl	800f184 <_ZN8touchgfx3BoxC1Ev>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	3398      	adds	r3, #152	; 0x98
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f004 fd5c 	bl	80142b0 <_ZN8touchgfx6CircleC1Ev>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800f7fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f802:	2100      	movs	r1, #0
 800f804:	4618      	mov	r0, r3
 800f806:	f7ff fc2e 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
 800f80a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f80c:	4620      	mov	r0, r4
 800f80e:	f7ff fe7b 	bl	800f508 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	33f4      	adds	r3, #244	; 0xf4
 800f816:	4618      	mov	r0, r3
 800f818:	f7ff ff92 	bl	800f740 <_ZN8touchgfx5ShapeILt4EEC1Ev>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800f822:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f826:	2100      	movs	r1, #0
 800f828:	4618      	mov	r0, r3
 800f82a:	f7ff fc1c 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
 800f82e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f830:	4620      	mov	r0, r4
 800f832:	f7ff fe69 	bl	800f508 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7ff ff7f 	bl	800f740 <_ZN8touchgfx5ShapeILt4EEC1Ev>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f503 7406 	add.w	r4, r3, #536	; 0x218
 800f848:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f84c:	2100      	movs	r1, #0
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff fc09 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
 800f854:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f856:	4620      	mov	r0, r4
 800f858:	f7ff fe56 	bl	800f508 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800f862:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800f866:	4618      	mov	r0, r3
 800f868:	f006 fa26 	bl	8015cb8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 240, 320);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f872:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	23f0      	movs	r3, #240	; 0xf0
 800f87a:	2200      	movs	r2, #0
 800f87c:	2100      	movs	r1, #0
 800f87e:	f7fd fe59 	bl	800d534 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f888:	2300      	movs	r3, #0
 800f88a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800f88e:	2300      	movs	r3, #0
 800f890:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800f894:	2300      	movs	r3, #0
 800f896:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f89a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f89e:	041b      	lsls	r3, r3, #16
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800f8a6:	021b      	lsls	r3, r3, #8
 800f8a8:	431a      	orrs	r2, r3
 800f8aa:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f8b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f8b8:	4611      	mov	r1, r2
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7ff fbd3 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
 800f8c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f7ff fc81 	bl	800f1cc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 240, 320);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800f8d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f8d4:	9300      	str	r3, [sp, #0]
 800f8d6:	23f0      	movs	r3, #240	; 0xf0
 800f8d8:	2200      	movs	r2, #0
 800f8da:	2100      	movs	r1, #0
 800f8dc:	f7fd fe2a 	bl	800d534 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f8e6:	23ff      	movs	r3, #255	; 0xff
 800f8e8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800f8ec:	23ff      	movs	r3, #255	; 0xff
 800f8ee:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800f8f2:	23ff      	movs	r3, #255	; 0xff
 800f8f4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800f8f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800f8fc:	041b      	lsls	r3, r3, #16
 800f8fe:	461a      	mov	r2, r3
 800f900:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f904:	021b      	lsls	r3, r3, #8
 800f906:	431a      	orrs	r2, r3
 800f908:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f90c:	4313      	orrs	r3, r2
 800f90e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f912:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f916:	4611      	mov	r1, r2
 800f918:	4618      	mov	r0, r3
 800f91a:	f7ff fba4 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
 800f91e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f920:	4619      	mov	r1, r3
 800f922:	4620      	mov	r0, r4
 800f924:	f7ff fc52 	bl	800f1cc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    circle1.setPosition(80, 120, 80, 80);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800f92e:	2350      	movs	r3, #80	; 0x50
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	2350      	movs	r3, #80	; 0x50
 800f934:	2278      	movs	r2, #120	; 0x78
 800f936:	2150      	movs	r1, #80	; 0x50
 800f938:	f7fd fdfc 	bl	800d534 <_ZN8touchgfx8Drawable11setPositionEssss>
    circle1.setCenter(40, 40);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	3398      	adds	r3, #152	; 0x98
 800f940:	2228      	movs	r2, #40	; 0x28
 800f942:	2128      	movs	r1, #40	; 0x28
 800f944:	4618      	mov	r0, r3
 800f946:	f000 f962 	bl	800fc0e <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circle1.setRadius(40);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	3398      	adds	r3, #152	; 0x98
 800f94e:	2128      	movs	r1, #40	; 0x28
 800f950:	4618      	mov	r0, r3
 800f952:	f000 f9bf 	bl	800fcd4 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circle1.setLineWidth(0);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	3398      	adds	r3, #152	; 0x98
 800f95a:	2100      	movs	r1, #0
 800f95c:	4618      	mov	r0, r3
 800f95e:	f000 f9d0 	bl	800fd02 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circle1.setArc(0, 360);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	3398      	adds	r3, #152	; 0x98
 800f966:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f96a:	2100      	movs	r1, #0
 800f96c:	4618      	mov	r0, r3
 800f96e:	f000 f974 	bl	800fc5a <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circle1Painter.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800f978:	2300      	movs	r3, #0
 800f97a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 800f97e:	23ff      	movs	r3, #255	; 0xff
 800f980:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800f984:	2300      	movs	r3, #0
 800f986:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800f98a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800f98e:	041b      	lsls	r3, r3, #16
 800f990:	461a      	mov	r2, r3
 800f992:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800f996:	021b      	lsls	r3, r3, #8
 800f998:	431a      	orrs	r2, r3
 800f99a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f9a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f9a8:	4611      	mov	r1, r2
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7ff fb5b 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
 800f9b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f7ff fdc5 	bl	800f544 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    circle1.setPainter(circle1Painter);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	33e0      	adds	r3, #224	; 0xe0
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	f7ff fca0 	bl	800f30c <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    circle1.setAlpha(162);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	3398      	adds	r3, #152	; 0x98
 800f9d0:	21a2      	movs	r1, #162	; 0xa2
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7ff fca8 	bl	800f328 <_ZN8touchgfx12CanvasWidget8setAlphaEh>

    shape1.setPosition(80, 40, 80, 80);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 800f9de:	2350      	movs	r3, #80	; 0x50
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	2350      	movs	r3, #80	; 0x50
 800f9e4:	2228      	movs	r2, #40	; 0x28
 800f9e6:	2150      	movs	r1, #80	; 0x50
 800f9e8:	f7fd fda4 	bl	800d534 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setAlpha(95);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	33f4      	adds	r3, #244	; 0xf4
 800f9f0:	215f      	movs	r1, #95	; 0x5f
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7ff fc98 	bl	800f328 <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    shape1.setOrigin(0.0f, 0.0f);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	33f4      	adds	r3, #244	; 0xf4
 800f9fc:	eddf 0a58 	vldr	s1, [pc, #352]	; 800fb60 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800fa00:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800fb60 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800fa04:	4618      	mov	r0, r3
 800fa06:	f000 f993 	bl	800fd30 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(1.0f, 1.0f);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	33f4      	adds	r3, #244	; 0xf4
 800fa0e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800fa12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fa16:	4618      	mov	r0, r3
 800fa18:	f000 f9ea 	bl	800fdf0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.0f);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	33f4      	adds	r3, #244	; 0xf4
 800fa20:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800fb60 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 fa27 	bl	800fe78 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800fa30:	23ff      	movs	r3, #255	; 0xff
 800fa32:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 800fa36:	2300      	movs	r3, #0
 800fa38:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800fa42:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800fa46:	041b      	lsls	r3, r3, #16
 800fa48:	461a      	mov	r2, r3
 800fa4a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800fa4e:	021b      	lsls	r3, r3, #8
 800fa50:	431a      	orrs	r2, r3
 800fa52:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800fa56:	4313      	orrs	r3, r2
 800fa58:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fa5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fa60:	4611      	mov	r1, r2
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7ff faff 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
 800fa68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	f7ff fd69 	bl	800f544 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape1.setPainter(shape1Painter);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800fa7e:	4619      	mov	r1, r3
 800fa80:	4610      	mov	r0, r2
 800fa82:	f7ff fc43 	bl	800f30c <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 800fa86:	4b37      	ldr	r3, [pc, #220]	; (800fb64 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 800fa88:	f107 0408 	add.w	r4, r7, #8
 800fa8c:	461d      	mov	r5, r3
 800fa8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fa96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape1.setShape(shape1Points);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	33f4      	adds	r3, #244	; 0xf4
 800fa9e:	f107 0208 	add.w	r2, r7, #8
 800faa2:	4611      	mov	r1, r2
 800faa4:	4618      	mov	r0, r3
 800faa6:	f000 fa1f 	bl	800fee8 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    shape2.setPosition(80, 200, 80, 80);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 800fab0:	2350      	movs	r3, #80	; 0x50
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	2350      	movs	r3, #80	; 0x50
 800fab6:	22c8      	movs	r2, #200	; 0xc8
 800fab8:	2150      	movs	r1, #80	; 0x50
 800faba:	f7fd fd3b 	bl	800d534 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape2.setOrigin(0.0f, 0.0f);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fac4:	eddf 0a26 	vldr	s1, [pc, #152]	; 800fb60 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800fac8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800fb60 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800facc:	4618      	mov	r0, r3
 800face:	f000 f92f 	bl	800fd30 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape2.setScale(1.0f, 1.0f);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fad8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800fadc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fae0:	4618      	mov	r0, r3
 800fae2:	f000 f985 	bl	800fdf0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape2.setAngle(0.0f);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800faec:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800fb60 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 800faf0:	4618      	mov	r0, r3
 800faf2:	f000 f9c1 	bl	800fe78 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape2Painter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 255));
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f503 7406 	add.w	r4, r3, #536	; 0x218
 800fafc:	2300      	movs	r3, #0
 800fafe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800fb02:	2300      	movs	r3, #0
 800fb04:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800fb08:	23ff      	movs	r3, #255	; 0xff
 800fb0a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800fb0e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fb12:	041b      	lsls	r3, r3, #16
 800fb14:	461a      	mov	r2, r3
 800fb16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fb1a:	021b      	lsls	r3, r3, #8
 800fb1c:	431a      	orrs	r2, r3
 800fb1e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800fb22:	4313      	orrs	r3, r2
 800fb24:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fb28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fb2c:	4611      	mov	r1, r2
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7ff fa99 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
 800fb34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb36:	4619      	mov	r1, r3
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f7ff fd03 	bl	800f544 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape2.setPainter(shape2Painter);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f7ff fbdd 	bl	800f30c <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape2Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 800fb52:	4b04      	ldr	r3, [pc, #16]	; (800fb64 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 800fb54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800fb58:	e006      	b.n	800fb68 <_ZN15Screen1ViewBaseC1Ev+0x3a4>
 800fb5a:	bf00      	nop
 800fb5c:	08027d58 	.word	0x08027d58
 800fb60:	00000000 	.word	0x00000000
 800fb64:	08027064 	.word	0x08027064
 800fb68:	461d      	mov	r5, r3
 800fb6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fb72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape2.setShape(shape2Points);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fb7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fb80:	4611      	mov	r1, r2
 800fb82:	4618      	mov	r0, r3
 800fb84:	f000 f9b0 	bl	800fee8 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(__background);
 800fb88:	687a      	ldr	r2, [r7, #4]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	3340      	adds	r3, #64	; 0x40
 800fb8e:	4619      	mov	r1, r3
 800fb90:	4610      	mov	r0, r2
 800fb92:	f7ff fae7 	bl	800f164 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	336c      	adds	r3, #108	; 0x6c
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	4610      	mov	r0, r2
 800fba0:	f7ff fae0 	bl	800f164 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circle1);
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	3398      	adds	r3, #152	; 0x98
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4610      	mov	r0, r2
 800fbae:	f7ff fad9 	bl	800f164 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape1);
 800fbb2:	687a      	ldr	r2, [r7, #4]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	33f4      	adds	r3, #244	; 0xf4
 800fbb8:	4619      	mov	r1, r3
 800fbba:	4610      	mov	r0, r2
 800fbbc:	f7ff fad2 	bl	800f164 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape2);
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fbc8:	4619      	mov	r1, r3
 800fbca:	4610      	mov	r0, r2
 800fbcc:	f7ff faca 	bl	800f164 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3778      	adds	r7, #120	; 0x78
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bdb0      	pop	{r4, r5, r7, pc}
 800fbda:	bf00      	nop

0800fbdc <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]

}
 800fbe4:	bf00      	nop
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <_ZN15Screen1ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen1ViewBase::afterTransition()
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
    //Screen1to2
    //When screen transition ends change screen to Screen2
    //Go to Screen2 with screen transition towards East
    application().gotoScreen2ScreenWipeTransitionEast();
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7ff fd52 	bl	800f6a2 <_ZN15Screen1ViewBase11applicationEv>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fe f8bb 	bl	800dd7c <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv>
}
 800fc06:	bf00      	nop
 800fc08:	3708      	adds	r7, #8
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}

0800fc0e <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 800fc0e:	b580      	push	{r7, lr}
 800fc10:	b088      	sub	sp, #32
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	60f8      	str	r0, [r7, #12]
 800fc16:	60b9      	str	r1, [r7, #8]
 800fc18:	607a      	str	r2, [r7, #4]
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	015a      	lsls	r2, r3, #5
 800fc22:	f107 0314 	add.w	r3, r7, #20
 800fc26:	4611      	mov	r1, r2
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7ff fb45 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5(x);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	62da      	str	r2, [r3, #44]	; 0x2c
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	61fb      	str	r3, [r7, #28]
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	015a      	lsls	r2, r3, #5
 800fc3e:	f107 0310 	add.w	r3, r7, #16
 800fc42:	4611      	mov	r1, r2
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7ff fb37 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5(y);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800fc52:	bf00      	nop
 800fc54:	3720      	adds	r7, #32
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     *
     * @note    The area containing the Circle is not invalidated.
     * @note    Angles are given in degrees, so a full circle is 360.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b088      	sub	sp, #32
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	60f8      	str	r0, [r7, #12]
 800fc62:	60b9      	str	r1, [r7, #8]
 800fc64:	607a      	str	r2, [r7, #4]
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	61bb      	str	r3, [r7, #24]
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	015a      	lsls	r2, r3, #5
 800fc6e:	f107 0314 	add.w	r3, r7, #20
 800fc72:	4611      	mov	r1, r2
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7ff fb1f 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	639a      	str	r2, [r3, #56]	; 0x38
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	61fb      	str	r3, [r7, #28]
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	015a      	lsls	r2, r3, #5
 800fc8a:	f107 0310 	add.w	r3, r7, #16
 800fc8e:	4611      	mov	r1, r2
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7ff fb11 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fc9e:	bf00      	nop
 800fca0:	3720      	adds	r7, #32
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
	...

0800fca8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f008 fb64 	bl	8018380 <_ZN8touchgfx6ScreenC1Ev>
 800fcb8:	4a05      	ldr	r2, [pc, #20]	; (800fcd0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	601a      	str	r2, [r3, #0]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3708      	adds	r7, #8
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	08027e20 	.word	0x08027e20

0800fcd4 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	60fb      	str	r3, [r7, #12]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	015a      	lsls	r2, r3, #5
 800fce6:	f107 0308 	add.w	r3, r7, #8
 800fcea:	4611      	mov	r1, r2
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff fae3 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5(r);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800fcfa:	bf00      	nop
 800fcfc:	3710      	adds	r7, #16
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b084      	sub	sp, #16
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
 800fd0a:	6039      	str	r1, [r7, #0]
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	60fb      	str	r3, [r7, #12]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	015a      	lsls	r2, r3, #5
 800fd14:	f107 0308 	add.w	r3, r7, #8
 800fd18:	4611      	mov	r1, r2
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7ff facc 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800fd28:	bf00      	nop
 800fd2a:	3710      	adds	r7, #16
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @see moveOrigin
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setOrigin(T x, T y)
 800fd30:	b590      	push	{r4, r7, lr}
 800fd32:	b08b      	sub	sp, #44	; 0x2c
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	60f8      	str	r0, [r7, #12]
 800fd38:	ed87 0a02 	vstr	s0, [r7, #8]
 800fd3c:	edc7 0a01 	vstr	s1, [r7, #4]
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	623b      	str	r3, [r7, #32]
 800fd44:	edd7 7a08 	vldr	s15, [r7, #32]
 800fd48:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800fdec <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 800fd4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd54:	f107 031c 	add.w	r3, r7, #28
 800fd58:	ee17 1a90 	vmov	r1, s15
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7ff faab 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fd62:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 800fd64:	617b      	str	r3, [r7, #20]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	627b      	str	r3, [r7, #36]	; 0x24
 800fd6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800fd6e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800fdec <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 800fd72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd7a:	f107 0318 	add.w	r3, r7, #24
 800fd7e:	ee17 1a90 	vmov	r1, s15
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7ff fa98 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fd88:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 800fd8a:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	332c      	adds	r3, #44	; 0x2c
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7ff faa0 	bl	800f2d6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fd96:	4604      	mov	r4, r0
 800fd98:	f107 0314 	add.w	r3, r7, #20
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7ff fa9a 	bl	800f2d6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fda2:	4603      	mov	r3, r0
 800fda4:	429c      	cmp	r4, r3
 800fda6:	d10f      	bne.n	800fdc8 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	3330      	adds	r3, #48	; 0x30
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7ff fa92 	bl	800f2d6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	f107 0310 	add.w	r3, r7, #16
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff fa8c 	bl	800f2d6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	429c      	cmp	r4, r3
 800fdc2:	d101      	bne.n	800fdc8 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	e000      	b.n	800fdca <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 800fdc8:	2300      	movs	r3, #0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d109      	bne.n	800fde2 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	697a      	ldr	r2, [r7, #20]
 800fdd2:	62da      	str	r2, [r3, #44]	; 0x2c
        dy = dyNew;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	693a      	ldr	r2, [r7, #16]
 800fdd8:	631a      	str	r2, [r3, #48]	; 0x30

        updateAbstractShapeCache();
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f004 f960 	bl	80140a0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 800fde0:	e000      	b.n	800fde4 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 800fde2:	bf00      	nop
    }
 800fde4:	372c      	adds	r7, #44	; 0x2c
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd90      	pop	{r4, r7, pc}
 800fdea:	bf00      	nop
 800fdec:	42000000 	.word	0x42000000

0800fdf0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @see getScale, updateScale
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b088      	sub	sp, #32
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	ed87 0a02 	vstr	s0, [r7, #8]
 800fdfc:	edc7 0a01 	vstr	s1, [r7, #4]
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10((int)(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 800fe04:	edd7 7a06 	vldr	s15, [r7, #24]
 800fe08:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800fe74 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800fe0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe10:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800fe74 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800fe14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe1c:	f107 0314 	add.w	r3, r7, #20
 800fe20:	ee17 1a90 	vmov	r1, s15
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff fa62 	bl	800f2ee <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	639a      	str	r2, [r3, #56]	; 0x38
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	61fb      	str	r3, [r7, #28]
 800fe36:	edd7 7a07 	vldr	s15, [r7, #28]
 800fe3a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800fe74 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800fe3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe42:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fe74 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800fe46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe4e:	f107 0310 	add.w	r3, r7, #16
 800fe52:	ee17 1a90 	vmov	r1, s15
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7ff fa49 	bl	800f2ee <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	63da      	str	r2, [r3, #60]	; 0x3c
        updateAbstractShapeCache();
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f004 f91b 	bl	80140a0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 800fe6a:	bf00      	nop
 800fe6c:	3720      	adds	r7, #32
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	42000000 	.word	0x42000000

0800fe78 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 800fe78:	b590      	push	{r4, r7, lr}
 800fe7a:	b087      	sub	sp, #28
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	ed87 0a00 	vstr	s0, [r7]
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	617b      	str	r3, [r7, #20]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800fe88:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe8c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800fee4 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 800fe90:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe98:	f107 0310 	add.w	r3, r7, #16
 800fe9c:	ee17 1a90 	vmov	r1, s15
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7ff fa09 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fea6:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 800fea8:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	3334      	adds	r3, #52	; 0x34
 800feae:	4618      	mov	r0, r3
 800feb0:	f7ff fa11 	bl	800f2d6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800feb4:	4604      	mov	r4, r0
 800feb6:	f107 030c 	add.w	r3, r7, #12
 800feba:	4618      	mov	r0, r3
 800febc:	f7ff fa0b 	bl	800f2d6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fec0:	4603      	mov	r3, r0
 800fec2:	429c      	cmp	r4, r3
 800fec4:	bf14      	ite	ne
 800fec6:	2301      	movne	r3, #1
 800fec8:	2300      	moveq	r3, #0
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d005      	beq.n	800fedc <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	68fa      	ldr	r2, [r7, #12]
 800fed4:	635a      	str	r2, [r3, #52]	; 0x34
            updateAbstractShapeCache();
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f004 f8e2 	bl	80140a0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 800fedc:	bf00      	nop
 800fede:	371c      	adds	r7, #28
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd90      	pop	{r4, r7, pc}
 800fee4:	42000000 	.word	0x42000000

0800fee8 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 800fee8:	b5b0      	push	{r4, r5, r7, lr}
 800feea:	b088      	sub	sp, #32
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	3370      	adds	r3, #112	; 0x70
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	4798      	blx	r3
 800fefe:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 800ff00:	2300      	movs	r3, #0
 800ff02:	61fb      	str	r3, [r7, #28]
 800ff04:	69fa      	ldr	r2, [r7, #28]
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	da38      	bge.n	800ff7e <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	3374      	adds	r3, #116	; 0x74
 800ff12:	681c      	ldr	r4, [r3, #0]
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	00db      	lsls	r3, r3, #3
 800ff18:	683a      	ldr	r2, [r7, #0]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	613b      	str	r3, [r7, #16]
 800ff20:	edd7 7a04 	vldr	s15, [r7, #16]
 800ff24:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800ff8c <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 800ff28:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff30:	f107 030c 	add.w	r3, r7, #12
 800ff34:	ee17 1a90 	vmov	r1, s15
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7ff f9bd 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	461d      	mov	r5, r3
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	00db      	lsls	r3, r3, #3
 800ff46:	683a      	ldr	r2, [r7, #0]
 800ff48:	4413      	add	r3, r2
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	617b      	str	r3, [r7, #20]
 800ff4e:	edd7 7a05 	vldr	s15, [r7, #20]
 800ff52:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800ff8c <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 800ff56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff5e:	f107 0308 	add.w	r3, r7, #8
 800ff62:	ee17 1a90 	vmov	r1, s15
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7ff f9a6 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	462a      	mov	r2, r5
 800ff70:	69f9      	ldr	r1, [r7, #28]
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	61fb      	str	r3, [r7, #28]
 800ff7c:	e7c2      	b.n	800ff04 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f004 f88e 	bl	80140a0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 800ff84:	bf00      	nop
 800ff86:	3720      	adds	r7, #32
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bdb0      	pop	{r4, r5, r7, pc}
 800ff8c:	42000000 	.word	0x42000000

0800ff90 <_ZN8touchgfx5ShapeILt4EED1Ev>:
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	4a05      	ldr	r2, [pc, #20]	; (800ffb0 <_ZN8touchgfx5ShapeILt4EED1Ev+0x20>)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	601a      	str	r2, [r3, #0]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7ff fbab 	bl	800f6fc <_ZN8touchgfx13AbstractShapeD1Ev>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	08027d8c 	.word	0x08027d8c

0800ffb4 <_ZN8touchgfx5ShapeILt4EED0Ev>:
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7ff ffe7 	bl	800ff90 <_ZN8touchgfx5ShapeILt4EED1Ev>
 800ffc2:	2188      	movs	r1, #136	; 0x88
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f015 fc2b 	bl	8025820 <_ZdlPvj>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	4a05      	ldr	r2, [pc, #20]	; (800fff4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	601a      	str	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7fd fa5b 	bl	800d4a0 <_ZN8touchgfx8DrawableD1Ev>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4618      	mov	r0, r3
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	08028404 	.word	0x08028404

0800fff8 <_ZN8touchgfx9ContainerD0Ev>:
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff ffe7 	bl	800ffd4 <_ZN8touchgfx9ContainerD1Ev>
 8010006:	212c      	movs	r1, #44	; 0x2c
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f015 fc09 	bl	8025820 <_ZdlPvj>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4618      	mov	r0, r3
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	4a05      	ldr	r2, [pc, #20]	; (8010038 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	601a      	str	r2, [r3, #0]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4618      	mov	r0, r3
 801002a:	f7fd fd9f 	bl	800db6c <_ZN8touchgfx6WidgetD1Ev>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	080288e0 	.word	0x080288e0

0801003c <_ZN8touchgfx3BoxD0Ev>:
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff ffe7 	bl	8010018 <_ZN8touchgfx3BoxD1Ev>
 801004a:	212c      	movs	r1, #44	; 0x2c
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f015 fbe7 	bl	8025820 <_ZdlPvj>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4618      	mov	r0, r3
 8010056:	3708      	adds	r7, #8
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	4a05      	ldr	r2, [pc, #20]	; (801007c <_ZN8touchgfx6CircleD1Ev+0x20>)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	601a      	str	r2, [r3, #0]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4618      	mov	r0, r3
 801006e:	f7ff fb23 	bl	800f6b8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	08028780 	.word	0x08028780

08010080 <_ZN8touchgfx6CircleD0Ev>:
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7ff ffe7 	bl	801005c <_ZN8touchgfx6CircleD1Ev>
 801008e:	2148      	movs	r1, #72	; 0x48
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f015 fbc5 	bl	8025820 <_ZdlPvj>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	4a09      	ldr	r2, [pc, #36]	; (80100d0 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	4a09      	ldr	r2, [pc, #36]	; (80100d4 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	609a      	str	r2, [r3, #8]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	3308      	adds	r3, #8
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7ff f977 	bl	800f3ac <_ZN8touchgfx20AbstractPainterColorD1Ev>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7ff f9ff 	bl	800f4c4 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	080285ec 	.word	0x080285ec
 80100d4:	08028610 	.word	0x08028610

080100d8 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 80100d8:	f1a0 0008 	sub.w	r0, r0, #8
 80100dc:	e7e0      	b.n	80100a0 <_ZN8touchgfx13PainterRGB565D1Ev>
 80100de:	bf00      	nop

080100e0 <_ZN8touchgfx13PainterRGB565D0Ev>:
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7ff ffd9 	bl	80100a0 <_ZN8touchgfx13PainterRGB565D1Ev>
 80100ee:	2114      	movs	r1, #20
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f015 fb95 	bl	8025820 <_ZdlPvj>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4618      	mov	r0, r3
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8010100:	f1a0 0008 	sub.w	r0, r0, #8
 8010104:	e7ec      	b.n	80100e0 <_ZN8touchgfx13PainterRGB565D0Ev>

08010106 <_ZNK8touchgfx5ShapeILt4EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
 8010106:	b480      	push	{r7}
 8010108:	b083      	sub	sp, #12
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 801010e:	2304      	movs	r3, #4
    }
 8010110:	4618      	mov	r0, r3
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	607a      	str	r2, [r7, #4]
 8010128:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	2b00      	cmp	r3, #0
 801012e:	db0e      	blt.n	801014e <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	2b03      	cmp	r3, #3
 8010134:	dc0b      	bgt.n	801014e <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCorner[i] = x, yCorner[i] = y;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	68ba      	ldr	r2, [r7, #8]
 801013a:	3212      	adds	r2, #18
 801013c:	6879      	ldr	r1, [r7, #4]
 801013e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	68ba      	ldr	r2, [r7, #8]
 8010146:	3216      	adds	r2, #22
 8010148:	6839      	ldr	r1, [r7, #0]
 801014a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 801014e:	bf00      	nop
 8010150:	3714      	adds	r7, #20
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr

0801015a <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
 801015a:	b580      	push	{r7, lr}
 801015c:	b084      	sub	sp, #16
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
 8010162:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	2b00      	cmp	r3, #0
 8010168:	db08      	blt.n	801017c <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	2b03      	cmp	r3, #3
 801016e:	dc05      	bgt.n	801017c <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
        {
            return xCorner[i];
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	3212      	adds	r2, #18
 8010176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801017a:	e00b      	b.n	8010194 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x3a>
 801017c:	2300      	movs	r3, #0
 801017e:	60fb      	str	r3, [r7, #12]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	015a      	lsls	r2, r3, #5
 8010184:	f107 0308 	add.w	r3, r7, #8
 8010188:	4611      	mov	r1, r2
 801018a:	4618      	mov	r0, r3
 801018c:	f7ff f894 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010190:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010192:	bf00      	nop
    }
 8010194:	4618      	mov	r0, r3
 8010196:	3710      	adds	r7, #16
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
 801019c:	b580      	push	{r7, lr}
 801019e:	b084      	sub	sp, #16
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	db08      	blt.n	80101be <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	2b03      	cmp	r3, #3
 80101b0:	dc05      	bgt.n	80101be <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
        {
            return yCorner[i];
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	683a      	ldr	r2, [r7, #0]
 80101b6:	3216      	adds	r2, #22
 80101b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101bc:	e00b      	b.n	80101d6 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x3a>
 80101be:	2300      	movs	r3, #0
 80101c0:	60fb      	str	r3, [r7, #12]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	015a      	lsls	r2, r3, #5
 80101c6:	f107 0308 	add.w	r3, r7, #8
 80101ca:	4611      	mov	r1, r2
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7ff f873 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80101d2:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80101d4:	bf00      	nop
    }
 80101d6:	4618      	mov	r0, r3
 80101d8:	3710      	adds	r7, #16
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}

080101de <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 80101de:	b480      	push	{r7}
 80101e0:	b085      	sub	sp, #20
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	60f8      	str	r0, [r7, #12]
 80101e6:	60b9      	str	r1, [r7, #8]
 80101e8:	607a      	str	r2, [r7, #4]
 80101ea:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	db0e      	blt.n	8010210 <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	2b03      	cmp	r3, #3
 80101f6:	dc0b      	bgt.n	8010210 <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCache[i] = x, yCache[i] = y;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	321a      	adds	r2, #26
 80101fe:	6879      	ldr	r1, [r7, #4]
 8010200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	321e      	adds	r2, #30
 801020a:	6839      	ldr	r1, [r7, #0]
 801020c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8010210:	bf00      	nop
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	db08      	blt.n	801023e <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	2b03      	cmp	r3, #3
 8010230:	dc05      	bgt.n	801023e <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
        {
            return xCache[i];
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	683a      	ldr	r2, [r7, #0]
 8010236:	321a      	adds	r2, #26
 8010238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801023c:	e00b      	b.n	8010256 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x3a>
 801023e:	2300      	movs	r3, #0
 8010240:	60fb      	str	r3, [r7, #12]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	015a      	lsls	r2, r3, #5
 8010246:	f107 0308 	add.w	r3, r7, #8
 801024a:	4611      	mov	r1, r2
 801024c:	4618      	mov	r0, r3
 801024e:	f7ff f833 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010252:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010254:	bf00      	nop
    }
 8010256:	4618      	mov	r0, r3
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
 801025e:	b580      	push	{r7, lr}
 8010260:	b084      	sub	sp, #16
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	db08      	blt.n	8010280 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	2b03      	cmp	r3, #3
 8010272:	dc05      	bgt.n	8010280 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
        {
            return yCache[i];
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	683a      	ldr	r2, [r7, #0]
 8010278:	321e      	adds	r2, #30
 801027a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801027e:	e00b      	b.n	8010298 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x3a>
 8010280:	2300      	movs	r3, #0
 8010282:	60fb      	str	r3, [r7, #12]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	015a      	lsls	r2, r3, #5
 8010288:	f107 0308 	add.w	r3, r7, #8
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff f812 	bl	800f2b8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010294:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010296:	bf00      	nop
    }
 8010298:	4618      	mov	r0, r3
 801029a:	3710      	adds	r7, #16
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	460b      	mov	r3, r1
 80102aa:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	887a      	ldrh	r2, [r7, #2]
 80102b0:	801a      	strh	r2, [r3, #0]
    {
    }
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr

080102c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4618      	mov	r0, r3
 80102ce:	2326      	movs	r3, #38	; 0x26
 80102d0:	461a      	mov	r2, r3
 80102d2:	2100      	movs	r1, #0
 80102d4:	f015 fb4e 	bl	8025974 <memset>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fd fc34 	bl	800db48 <_ZN8touchgfx6WidgetC1Ev>
 80102e0:	4a09      	ldr	r2, [pc, #36]	; (8010308 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	601a      	str	r2, [r3, #0]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	683a      	ldr	r2, [r7, #0]
 80102ea:	8812      	ldrh	r2, [r2, #0]
 80102ec:	84da      	strh	r2, [r3, #38]	; 0x26
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	22ff      	movs	r2, #255	; 0xff
 80102f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 80102f6:	6839      	ldr	r1, [r7, #0]
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f004 fddb 	bl	8014eb4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	08028948 	.word	0x08028948

0801030c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	4a05      	ldr	r2, [pc, #20]	; (801032c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	601a      	str	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4618      	mov	r0, r3
 801031e:	f7fe fec9 	bl	800f0b4 <_ZN8touchgfx6ScreenD1Ev>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4618      	mov	r0, r3
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	08027edc 	.word	0x08027edc

08010330 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f7ff ffe7 	bl	801030c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801033e:	2140      	movs	r1, #64	; 0x40
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f015 fa6d 	bl	8025820 <_ZdlPvj>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4618      	mov	r0, r3
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	4a0a      	ldr	r2, [pc, #40]	; (8010384 <_ZN15Screen2ViewBaseD1Ev+0x34>)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	601a      	str	r2, [r3, #0]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	336c      	adds	r3, #108	; 0x6c
 8010362:	4618      	mov	r0, r3
 8010364:	f000 f8d8 	bl	8010518 <_ZN8touchgfx5ImageD1Ev>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	3340      	adds	r3, #64	; 0x40
 801036c:	4618      	mov	r0, r3
 801036e:	f7ff fe53 	bl	8010018 <_ZN8touchgfx3BoxD1Ev>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4618      	mov	r0, r3
 8010376:	f7ff ffc9 	bl	801030c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	08027ea8 	.word	0x08027ea8

08010388 <_ZN15Screen2ViewBaseD0Ev>:
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7ff ffdd 	bl	8010350 <_ZN15Screen2ViewBaseD1Ev>
 8010396:	f640 61a8 	movw	r1, #3752	; 0xea8
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f015 fa40 	bl	8025820 <_ZdlPvj>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4618      	mov	r0, r3
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b082      	sub	sp, #8
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80103b2:	f006 fd2d 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 80103b6:	4603      	mov	r3, r0
    }
 80103b8:	4618      	mov	r0, r3
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <_ZN15Screen2ViewBaseC1Ev>:
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen2ViewBase::Screen2ViewBase()
 80103c0:	b590      	push	{r4, r7, lr}
 80103c2:	b089      	sub	sp, #36	; 0x24
 80103c4:	af02      	add	r7, sp, #8
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 f88e 	bl	80104ec <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 80103d0:	4a38      	ldr	r2, [pc, #224]	; (80104b4 <_ZN15Screen2ViewBaseC1Ev+0xf4>)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	601a      	str	r2, [r3, #0]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	3340      	adds	r3, #64	; 0x40
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fe fed2 	bl	800f184 <_ZN8touchgfx3BoxC1Ev>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80103e6:	f107 0308 	add.w	r3, r7, #8
 80103ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff ff56 	bl	80102a0 <_ZN8touchgfx6BitmapC1Et>
 80103f4:	f107 0308 	add.w	r3, r7, #8
 80103f8:	4619      	mov	r1, r3
 80103fa:	4620      	mov	r0, r4
 80103fc:	f7ff ff60 	bl	80102c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	3398      	adds	r3, #152	; 0x98
 8010404:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8010408:	4618      	mov	r0, r3
 801040a:	f005 fc55 	bl	8015cb8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 240, 320);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010414:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010418:	9300      	str	r3, [sp, #0]
 801041a:	23f0      	movs	r3, #240	; 0xf0
 801041c:	2200      	movs	r2, #0
 801041e:	2100      	movs	r1, #0
 8010420:	f7fd f888 	bl	800d534 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801042a:	2300      	movs	r3, #0
 801042c:	75fb      	strb	r3, [r7, #23]
 801042e:	2300      	movs	r3, #0
 8010430:	75bb      	strb	r3, [r7, #22]
 8010432:	2300      	movs	r3, #0
 8010434:	757b      	strb	r3, [r7, #21]
 8010436:	7dfb      	ldrb	r3, [r7, #23]
 8010438:	041b      	lsls	r3, r3, #16
 801043a:	461a      	mov	r2, r3
 801043c:	7dbb      	ldrb	r3, [r7, #22]
 801043e:	021b      	lsls	r3, r3, #8
 8010440:	431a      	orrs	r2, r3
 8010442:	7d7b      	ldrb	r3, [r7, #21]
 8010444:	4313      	orrs	r3, r2
 8010446:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801044a:	f107 0310 	add.w	r3, r7, #16
 801044e:	4611      	mov	r1, r2
 8010450:	4618      	mov	r0, r3
 8010452:	f7fe fe08 	bl	800f066 <_ZN8touchgfx9colortypeC1Em>
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	4619      	mov	r1, r3
 801045a:	4620      	mov	r0, r4
 801045c:	f7fe feb6 	bl	800f1cc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	336c      	adds	r3, #108	; 0x6c
 8010464:	2200      	movs	r2, #0
 8010466:	2100      	movs	r1, #0
 8010468:	4618      	mov	r0, r3
 801046a:	f7fd f8bc 	bl	800d5e6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_KUHMUH_VERTICAL_ID));
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8010474:	f107 030c 	add.w	r3, r7, #12
 8010478:	2100      	movs	r1, #0
 801047a:	4618      	mov	r0, r3
 801047c:	f7ff ff10 	bl	80102a0 <_ZN8touchgfx6BitmapC1Et>
 8010480:	f107 030c 	add.w	r3, r7, #12
 8010484:	4619      	mov	r1, r3
 8010486:	4620      	mov	r0, r4
 8010488:	f004 fd14 	bl	8014eb4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	3340      	adds	r3, #64	; 0x40
 8010492:	4619      	mov	r1, r3
 8010494:	4610      	mov	r0, r2
 8010496:	f7fe fe65 	bl	800f164 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	336c      	adds	r3, #108	; 0x6c
 80104a0:	4619      	mov	r1, r3
 80104a2:	4610      	mov	r0, r2
 80104a4:	f7fe fe5e 	bl	800f164 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	4618      	mov	r0, r3
 80104ac:	371c      	adds	r7, #28
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd90      	pop	{r4, r7, pc}
 80104b2:	bf00      	nop
 80104b4:	08027ea8 	.word	0x08027ea8

080104b8 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]

}
 80104c0:	bf00      	nop
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <_ZN15Screen2ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen2ViewBase::afterTransition()
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
    //Screen2to1
    //When screen transition ends change screen to Screen1
    //Go to Screen1 with screen transition towards South
    application().gotoScreen1ScreenSlideTransitionSouth();
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7ff ff68 	bl	80103aa <_ZN15Screen2ViewBase11applicationEv>
 80104da:	4603      	mov	r3, r0
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fd fc07 	bl	800dcf0 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>
}
 80104e2:	bf00      	nop
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
	...

080104ec <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f007 ff42 	bl	8018380 <_ZN8touchgfx6ScreenC1Ev>
 80104fc:	4a05      	ldr	r2, [pc, #20]	; (8010514 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	601a      	str	r2, [r3, #0]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2200      	movs	r2, #0
 8010506:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	4618      	mov	r0, r3
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	08027edc 	.word	0x08027edc

08010518 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	4a05      	ldr	r2, [pc, #20]	; (8010538 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4618      	mov	r0, r3
 801052a:	f7fd fb1f 	bl	800db6c <_ZN8touchgfx6WidgetD1Ev>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4618      	mov	r0, r3
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}
 8010538:	08028948 	.word	0x08028948

0801053c <_ZN8touchgfx5ImageD0Ev>:
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f7ff ffe7 	bl	8010518 <_ZN8touchgfx5ImageD1Ev>
 801054a:	212c      	movs	r1, #44	; 0x2c
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f015 f967 	bl	8025820 <_ZdlPvj>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4618      	mov	r0, r3
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801055c:	b480      	push	{r7}
 801055e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010560:	4b02      	ldr	r3, [pc, #8]	; (801056c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8010562:	4618      	mov	r0, r3
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr
 801056c:	08027f08 	.word	0x08027f08

08010570 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010570:	b480      	push	{r7}
 8010572:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010574:	2301      	movs	r3, #1
}
 8010576:	4618      	mov	r0, r3
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	460b      	mov	r3, r1
 801058a:	607a      	str	r2, [r7, #4]
 801058c:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 801058e:	2300      	movs	r3, #0
    }
 8010590:	4618      	mov	r0, r3
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80105a4:	2300      	movs	r3, #0
    }
 80105a6:	4618      	mov	r0, r3
 80105a8:	370c      	adds	r7, #12
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr

080105b2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80105b2:	b480      	push	{r7}
 80105b4:	b083      	sub	sp, #12
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80105ba:	2300      	movs	r3, #0
    }
 80105bc:	4618      	mov	r0, r3
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80105c8:	b480      	push	{r7}
 80105ca:	b085      	sub	sp, #20
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	4613      	mov	r3, r2
 80105d4:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 80105d6:	4a07      	ldr	r2, [pc, #28]	; (80105f4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	6013      	str	r3, [r2, #0]
        fonts = f;
 80105dc:	4a06      	ldr	r2, [pc, #24]	; (80105f8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80105e2:	4a06      	ldr	r2, [pc, #24]	; (80105fc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80105e4:	88fb      	ldrh	r3, [r7, #6]
 80105e6:	8013      	strh	r3, [r2, #0]
    }
 80105e8:	bf00      	nop
 80105ea:	3714      	adds	r7, #20
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr
 80105f4:	2004e170 	.word	0x2004e170
 80105f8:	2004e178 	.word	0x2004e178
 80105fc:	2004e174 	.word	0x2004e174

08010600 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010600:	b40e      	push	{r1, r2, r3}
 8010602:	b580      	push	{r7, lr}
 8010604:	b085      	sub	sp, #20
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 801060a:	f107 0320 	add.w	r3, r7, #32
 801060e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	69fa      	ldr	r2, [r7, #28]
 8010614:	2100      	movs	r1, #0
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f007 fa70 	bl	8017afc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 801061c:	4603      	mov	r3, r0
 801061e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010620:	89fb      	ldrh	r3, [r7, #14]
}
 8010622:	4618      	mov	r0, r3
 8010624:	3714      	adds	r7, #20
 8010626:	46bd      	mov	sp, r7
 8010628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801062c:	b003      	add	sp, #12
 801062e:	4770      	bx	lr

08010630 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010630:	b40c      	push	{r2, r3}
 8010632:	b580      	push	{r7, lr}
 8010634:	b084      	sub	sp, #16
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
 801063a:	460b      	mov	r3, r1
 801063c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 801063e:	f107 031c 	add.w	r3, r7, #28
 8010642:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010644:	78f9      	ldrb	r1, [r7, #3]
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	69ba      	ldr	r2, [r7, #24]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f007 fa56 	bl	8017afc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010650:	4603      	mov	r3, r0
 8010652:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010654:	89fb      	ldrh	r3, [r7, #14]
}
 8010656:	4618      	mov	r0, r3
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010660:	b002      	add	sp, #8
 8010662:	4770      	bx	lr

08010664 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b08a      	sub	sp, #40	; 0x28
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	460b      	mov	r3, r1
 801066e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010674:	2b00      	cmp	r3, #0
 8010676:	d016      	beq.n	80106a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	3322      	adds	r3, #34	; 0x22
 801067c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010680:	8adb      	ldrh	r3, [r3, #22]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d105      	bne.n	8010692 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010686:	4b43      	ldr	r3, [pc, #268]	; (8010794 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010688:	4a43      	ldr	r2, [pc, #268]	; (8010798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801068a:	21c0      	movs	r1, #192	; 0xc0
 801068c:	4843      	ldr	r0, [pc, #268]	; (801079c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801068e:	f015 f8f3 	bl	8025878 <__assert_func>
            return buffer[pos];
 8010692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010694:	8a9b      	ldrh	r3, [r3, #20]
 8010696:	461a      	mov	r2, r3
 8010698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d001      	beq.n	80106a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80106a2:	2301      	movs	r3, #1
 80106a4:	e000      	b.n	80106a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80106a6:	2300      	movs	r3, #0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d06a      	beq.n	8010782 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f008 fd0e 	bl	80190ce <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	3322      	adds	r3, #34	; 0x22
 80106b6:	623b      	str	r3, [r7, #32]
 80106b8:	2301      	movs	r3, #1
 80106ba:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80106bc:	6a3b      	ldr	r3, [r7, #32]
 80106be:	8adb      	ldrh	r3, [r3, #22]
 80106c0:	8bfa      	ldrh	r2, [r7, #30]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d305      	bcc.n	80106d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80106c6:	4b36      	ldr	r3, [pc, #216]	; (80107a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80106c8:	4a36      	ldr	r2, [pc, #216]	; (80107a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80106ca:	21c5      	movs	r1, #197	; 0xc5
 80106cc:	4833      	ldr	r0, [pc, #204]	; (801079c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80106ce:	f015 f8d3 	bl	8025878 <__assert_func>
            const uint16_t index = pos + offset;
 80106d2:	6a3b      	ldr	r3, [r7, #32]
 80106d4:	8a9a      	ldrh	r2, [r3, #20]
 80106d6:	8bfb      	ldrh	r3, [r7, #30]
 80106d8:	4413      	add	r3, r2
 80106da:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80106dc:	8bbb      	ldrh	r3, [r7, #28]
 80106de:	2b09      	cmp	r3, #9
 80106e0:	d801      	bhi.n	80106e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80106e2:	8bbb      	ldrh	r3, [r7, #28]
 80106e4:	e001      	b.n	80106ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80106e6:	8bbb      	ldrh	r3, [r7, #28]
 80106e8:	3b0a      	subs	r3, #10
 80106ea:	6a3a      	ldr	r2, [r7, #32]
 80106ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106f0:	f640 123f 	movw	r2, #2367	; 0x93f
 80106f4:	4293      	cmp	r3, r2
 80106f6:	bf0c      	ite	eq
 80106f8:	2301      	moveq	r3, #1
 80106fa:	2300      	movne	r3, #0
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d03f      	beq.n	8010782 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	3322      	adds	r3, #34	; 0x22
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	3222      	adds	r2, #34	; 0x22
 801070a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 801070c:	68ba      	ldr	r2, [r7, #8]
 801070e:	8ad2      	ldrh	r2, [r2, #22]
 8010710:	2a00      	cmp	r2, #0
 8010712:	d105      	bne.n	8010720 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010714:	4b1f      	ldr	r3, [pc, #124]	; (8010794 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010716:	4a20      	ldr	r2, [pc, #128]	; (8010798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010718:	21c0      	movs	r1, #192	; 0xc0
 801071a:	4820      	ldr	r0, [pc, #128]	; (801079c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801071c:	f015 f8ac 	bl	8025878 <__assert_func>
            return buffer[pos];
 8010720:	68ba      	ldr	r2, [r7, #8]
 8010722:	8a92      	ldrh	r2, [r2, #20]
 8010724:	4611      	mov	r1, r2
 8010726:	68ba      	ldr	r2, [r7, #8]
 8010728:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801072c:	613b      	str	r3, [r7, #16]
 801072e:	4613      	mov	r3, r2
 8010730:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	8adb      	ldrh	r3, [r3, #22]
 8010736:	2b01      	cmp	r3, #1
 8010738:	d806      	bhi.n	8010748 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 801073a:	4b1b      	ldr	r3, [pc, #108]	; (80107a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 801073c:	4a1b      	ldr	r2, [pc, #108]	; (80107ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 801073e:	f240 110d 	movw	r1, #269	; 0x10d
 8010742:	4816      	ldr	r0, [pc, #88]	; (801079c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010744:	f015 f898 	bl	8025878 <__assert_func>
            const uint16_t index = pos + 1;
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	8a9b      	ldrh	r3, [r3, #20]
 801074c:	3301      	adds	r3, #1
 801074e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010750:	89bb      	ldrh	r3, [r7, #12]
 8010752:	2b09      	cmp	r3, #9
 8010754:	d801      	bhi.n	801075a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010756:	89bb      	ldrh	r3, [r7, #12]
 8010758:	e000      	b.n	801075c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801075a:	2300      	movs	r3, #0
 801075c:	693a      	ldr	r2, [r7, #16]
 801075e:	89f9      	ldrh	r1, [r7, #14]
 8010760:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010764:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	3322      	adds	r3, #34	; 0x22
 801076a:	61bb      	str	r3, [r7, #24]
 801076c:	f640 133f 	movw	r3, #2367	; 0x93f
 8010770:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010772:	69bb      	ldr	r3, [r7, #24]
 8010774:	8a9b      	ldrh	r3, [r3, #20]
 8010776:	4619      	mov	r1, r3
 8010778:	69bb      	ldr	r3, [r7, #24]
 801077a:	8afa      	ldrh	r2, [r7, #22]
 801077c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010780:	bf00      	nop
        }
    }
    return getNextChar();
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f008 fba6 	bl	8018ed4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010788:	4603      	mov	r3, r0
}
 801078a:	4618      	mov	r0, r3
 801078c:	3728      	adds	r7, #40	; 0x28
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	08027084 	.word	0x08027084
 8010798:	08027090 	.word	0x08027090
 801079c:	0802713c 	.word	0x0802713c
 80107a0:	08027184 	.word	0x08027184
 80107a4:	08027194 	.word	0x08027194
 80107a8:	08027268 	.word	0x08027268
 80107ac:	08027274 	.word	0x08027274

080107b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f008 fb52 	bl	8018e62 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80107be:	bf00      	nop
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
	...

080107c8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80107c8:	b590      	push	{r4, r7, lr}
 80107ca:	b085      	sub	sp, #20
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	4603      	mov	r3, r0
 80107d0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80107d2:	2300      	movs	r3, #0
 80107d4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80107d6:	88fb      	ldrh	r3, [r7, #6]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d127      	bne.n	801082c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80107dc:	88fb      	ldrh	r3, [r7, #6]
 80107de:	4a1e      	ldr	r2, [pc, #120]	; (8010858 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80107e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d016      	beq.n	8010816 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80107e8:	88fb      	ldrh	r3, [r7, #6]
 80107ea:	4a1b      	ldr	r2, [pc, #108]	; (8010858 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80107ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107f0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	68ba      	ldr	r2, [r7, #8]
 80107f8:	4413      	add	r3, r2
 80107fa:	4a18      	ldr	r2, [pc, #96]	; (801085c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80107fc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	68ba      	ldr	r2, [r7, #8]
 8010804:	4413      	add	r3, r2
 8010806:	4a16      	ldr	r2, [pc, #88]	; (8010860 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010808:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	689b      	ldr	r3, [r3, #8]
 801080e:	68ba      	ldr	r2, [r7, #8]
 8010810:	4413      	add	r3, r2
 8010812:	60fb      	str	r3, [r7, #12]
 8010814:	e00a      	b.n	801082c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010816:	4b11      	ldr	r3, [pc, #68]	; (801085c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010818:	4a12      	ldr	r2, [pc, #72]	; (8010864 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801081a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801081c:	4a12      	ldr	r2, [pc, #72]	; (8010868 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801081e:	4b10      	ldr	r3, [pc, #64]	; (8010860 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010820:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010822:	88fb      	ldrh	r3, [r7, #6]
 8010824:	4a11      	ldr	r2, [pc, #68]	; (801086c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801082a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d00d      	beq.n	801084e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010832:	4a0f      	ldr	r2, [pc, #60]	; (8010870 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010834:	88fb      	ldrh	r3, [r7, #6]
 8010836:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010838:	f000 f824 	bl	8010884 <_ZN17TypedTextDatabase8getFontsEv>
 801083c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801083e:	f000 f819 	bl	8010874 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010842:	4603      	mov	r3, r0
 8010844:	461a      	mov	r2, r3
 8010846:	4621      	mov	r1, r4
 8010848:	68f8      	ldr	r0, [r7, #12]
 801084a:	f7ff febd 	bl	80105c8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801084e:	bf00      	nop
 8010850:	3714      	adds	r7, #20
 8010852:	46bd      	mov	sp, r7
 8010854:	bd90      	pop	{r4, r7, pc}
 8010856:	bf00      	nop
 8010858:	2004bf3c 	.word	0x2004bf3c
 801085c:	2004bf44 	.word	0x2004bf44
 8010860:	2004bf48 	.word	0x2004bf48
 8010864:	0804e8b4 	.word	0x0804e8b4
 8010868:	0804e8b0 	.word	0x0804e8b0
 801086c:	0804e8bc 	.word	0x0804e8bc
 8010870:	2004bf40 	.word	0x2004bf40

08010874 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010874:	b480      	push	{r7}
 8010876:	af00      	add	r7, sp, #0
    return 0;
 8010878:	2300      	movs	r3, #0
}
 801087a:	4618      	mov	r0, r3
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010884:	b480      	push	{r7}
 8010886:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8010888:	4b02      	ldr	r3, [pc, #8]	; (8010894 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801088a:	4618      	mov	r0, r3
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr
 8010894:	2004bf4c 	.word	0x2004bf4c

08010898 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d113      	bne.n	80108d0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d10e      	bne.n	80108d0 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80108b2:	f7fc fc35 	bl	800d120 <_Z23getFont_verdana_20_4bppv>
 80108b6:	4603      	mov	r3, r0
};
 80108b8:	4a07      	ldr	r2, [pc, #28]	; (80108d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80108ba:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80108bc:	f7fc fc86 	bl	800d1cc <_Z23getFont_verdana_40_4bppv>
 80108c0:	4603      	mov	r3, r0
};
 80108c2:	4a05      	ldr	r2, [pc, #20]	; (80108d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80108c4:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80108c6:	f7fc fbd5 	bl	800d074 <_Z23getFont_verdana_10_4bppv>
 80108ca:	4603      	mov	r3, r0
};
 80108cc:	4a02      	ldr	r2, [pc, #8]	; (80108d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80108ce:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80108d0:	bf00      	nop
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	2004bf4c 	.word	0x2004bf4c

080108dc <_GLOBAL__sub_I_touchgfx_fonts>:
 80108dc:	b580      	push	{r7, lr}
 80108de:	af00      	add	r7, sp, #0
 80108e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80108e4:	2001      	movs	r0, #1
 80108e6:	f7ff ffd7 	bl	8010898 <_Z41__static_initialization_and_destruction_0ii>
 80108ea:	bd80      	pop	{r7, pc}

080108ec <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	4a05      	ldr	r2, [pc, #20]	; (801090c <_ZN19FrontendApplicationD1Ev+0x20>)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	601a      	str	r2, [r3, #0]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fd f8b1 	bl	800da64 <_ZN23FrontendApplicationBaseD1Ev>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4618      	mov	r0, r3
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}
 801090c:	08027f78 	.word	0x08027f78

08010910 <_ZN19FrontendApplicationD0Ev>:
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f7ff ffe7 	bl	80108ec <_ZN19FrontendApplicationD1Ev>
 801091e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f014 ff7c 	bl	8025820 <_ZdlPvj>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4618      	mov	r0, r3
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010940:	4618      	mov	r0, r3
 8010942:	f000 f82d 	bl	80109a0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4618      	mov	r0, r3
 801094a:	f006 f919 	bl	8016b80 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801094e:	bf00      	nop
 8010950:	3708      	adds	r7, #8
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
	...

08010958 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010958:	b580      	push	{r7, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	60f8      	str	r0, [r7, #12]
 8010960:	60b9      	str	r1, [r7, #8]
 8010962:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	68b9      	ldr	r1, [r7, #8]
 801096a:	4618      	mov	r0, r3
 801096c:	f7fd f920 	bl	800dbb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8010970:	4a03      	ldr	r2, [pc, #12]	; (8010980 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	601a      	str	r2, [r3, #0]
{

}
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	4618      	mov	r0, r3
 801097a:	3710      	adds	r7, #16
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	08027f78 	.word	0x08027f78

08010984 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	601a      	str	r2, [r3, #0]
{

}
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	370c      	adds	r7, #12
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr

080109a0 <_ZN5Model4tickEv>:

void Model::tick()
{
 80109a0:	b480      	push	{r7}
 80109a2:	b083      	sub	sp, #12
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]

}
 80109a8:	bf00      	nop
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
    {
    }
 80109bc:	bf00      	nop
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
    {
    }
 80109d0:	bf00      	nop
 80109d2:	370c      	adds	r7, #12
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
    {
 80109e4:	4a04      	ldr	r2, [pc, #16]	; (80109f8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	601a      	str	r2, [r3, #0]
    }
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4618      	mov	r0, r3
 80109ee:	370c      	adds	r7, #12
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr
 80109f8:	08027ffc 	.word	0x08027ffc

080109fc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
    }
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7ff ffe9 	bl	80109dc <_ZN8touchgfx9PresenterD1Ev>
 8010a0a:	2104      	movs	r1, #4
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f014 ff07 	bl	8025820 <_ZdlPvj>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4618      	mov	r0, r3
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
    {
 8010a24:	4a04      	ldr	r2, [pc, #16]	; (8010a38 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	601a      	str	r2, [r3, #0]
    }
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	370c      	adds	r7, #12
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr
 8010a38:	08027ffc 	.word	0x08027ffc

08010a3c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	4a06      	ldr	r2, [pc, #24]	; (8010a60 <_ZN13ModelListenerC1Ev+0x24>)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	601a      	str	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	605a      	str	r2, [r3, #4]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4618      	mov	r0, r3
 8010a54:	370c      	adds	r7, #12
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop
 8010a60:	08027fec 	.word	0x08027fec

08010a64 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	4a04      	ldr	r2, [pc, #16]	; (8010a80 <_ZN13ModelListenerD1Ev+0x1c>)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	601a      	str	r2, [r3, #0]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	4618      	mov	r0, r3
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr
 8010a80:	08027fec 	.word	0x08027fec

08010a84 <_ZN13ModelListenerD0Ev>:
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f7ff ffe9 	bl	8010a64 <_ZN13ModelListenerD1Ev>
 8010a92:	2108      	movs	r1, #8
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f014 fec3 	bl	8025820 <_ZdlPvj>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	4a09      	ldr	r2, [pc, #36]	; (8010ad4 <_ZN16Screen1PresenterD1Ev+0x30>)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	4a09      	ldr	r2, [pc, #36]	; (8010ad8 <_ZN16Screen1PresenterD1Ev+0x34>)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	605a      	str	r2, [r3, #4]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	3304      	adds	r3, #4
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7ff ffd1 	bl	8010a64 <_ZN13ModelListenerD1Ev>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7ff ff89 	bl	80109dc <_ZN8touchgfx9PresenterD1Ev>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4618      	mov	r0, r3
 8010ace:	3708      	adds	r7, #8
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	08027fc4 	.word	0x08027fc4
 8010ad8:	08027fdc 	.word	0x08027fdc

08010adc <_ZThn4_N16Screen1PresenterD1Ev>:
 8010adc:	f1a0 0004 	sub.w	r0, r0, #4
 8010ae0:	e7e0      	b.n	8010aa4 <_ZN16Screen1PresenterD1Ev>
 8010ae2:	bf00      	nop

08010ae4 <_ZN16Screen1PresenterD0Ev>:
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f7ff ffd9 	bl	8010aa4 <_ZN16Screen1PresenterD1Ev>
 8010af2:	2110      	movs	r1, #16
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f014 fe93 	bl	8025820 <_ZdlPvj>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4618      	mov	r0, r3
 8010afe:	3708      	adds	r7, #8
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <_ZThn4_N16Screen1PresenterD0Ev>:
 8010b04:	f1a0 0004 	sub.w	r0, r0, #4
 8010b08:	e7ec      	b.n	8010ae4 <_ZN16Screen1PresenterD0Ev>
	...

08010b0c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
    : view(v)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7ff ff7f 	bl	8010a1c <_ZN8touchgfx9PresenterC1Ev>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	3304      	adds	r3, #4
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff ff8a 	bl	8010a3c <_ZN13ModelListenerC1Ev>
 8010b28:	4a06      	ldr	r2, [pc, #24]	; (8010b44 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	4a06      	ldr	r2, [pc, #24]	; (8010b48 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	605a      	str	r2, [r3, #4]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	683a      	ldr	r2, [r7, #0]
 8010b38:	60da      	str	r2, [r3, #12]
{

}
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3708      	adds	r7, #8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	08027fc4 	.word	0x08027fc4
 8010b48:	08027fdc 	.word	0x08027fdc

08010b4c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b083      	sub	sp, #12
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]

}
 8010b54:	bf00      	nop
 8010b56:	370c      	adds	r7, #12
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5e:	4770      	bx	lr

08010b60 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8010b60:	b480      	push	{r7}
 8010b62:	b083      	sub	sp, #12
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]

}
 8010b68:	bf00      	nop
 8010b6a:	370c      	adds	r7, #12
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	4a05      	ldr	r2, [pc, #20]	; (8010b94 <_ZN11Screen1ViewD1Ev+0x20>)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	601a      	str	r2, [r3, #0]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fe fd3d 	bl	800f604 <_ZN15Screen1ViewBaseD1Ev>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3708      	adds	r7, #8
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	08028014 	.word	0x08028014

08010b98 <_ZN11Screen1ViewD0Ev>:
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7ff ffe7 	bl	8010b74 <_ZN11Screen1ViewD1Ev>
 8010ba6:	f241 013c 	movw	r1, #4156	; 0x103c
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f014 fe38 	bl	8025820 <_ZdlPvj>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3708      	adds	r7, #8
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
	...

08010bbc <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fe fdfc 	bl	800f7c4 <_ZN15Screen1ViewBaseC1Ev>
 8010bcc:	4a03      	ldr	r2, [pc, #12]	; (8010bdc <_ZN11Screen1ViewC1Ev+0x20>)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	601a      	str	r2, [r3, #0]
{

}
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	08028014 	.word	0x08028014

08010be0 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7fe fff6 	bl	800fbdc <_ZN15Screen1ViewBase11setupScreenEv>
}
 8010bf0:	bf00      	nop
 8010bf2:	3708      	adds	r7, #8
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fe fa8e 	bl	800f124 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010c08:	bf00      	nop
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	4a09      	ldr	r2, [pc, #36]	; (8010c40 <_ZN16Screen2PresenterD1Ev+0x30>)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	601a      	str	r2, [r3, #0]
 8010c1e:	4a09      	ldr	r2, [pc, #36]	; (8010c44 <_ZN16Screen2PresenterD1Ev+0x34>)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	605a      	str	r2, [r3, #4]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	3304      	adds	r3, #4
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7ff ff1b 	bl	8010a64 <_ZN13ModelListenerD1Ev>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff fed3 	bl	80109dc <_ZN8touchgfx9PresenterD1Ev>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	08028048 	.word	0x08028048
 8010c44:	08028060 	.word	0x08028060

08010c48 <_ZThn4_N16Screen2PresenterD1Ev>:
 8010c48:	f1a0 0004 	sub.w	r0, r0, #4
 8010c4c:	e7e0      	b.n	8010c10 <_ZN16Screen2PresenterD1Ev>
 8010c4e:	bf00      	nop

08010c50 <_ZN16Screen2PresenterD0Ev>:
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f7ff ffd9 	bl	8010c10 <_ZN16Screen2PresenterD1Ev>
 8010c5e:	2110      	movs	r1, #16
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f014 fddd 	bl	8025820 <_ZdlPvj>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <_ZThn4_N16Screen2PresenterD0Ev>:
 8010c70:	f1a0 0004 	sub.w	r0, r0, #4
 8010c74:	e7ec      	b.n	8010c50 <_ZN16Screen2PresenterD0Ev>
	...

08010c78 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
    : view(v)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7ff fec9 	bl	8010a1c <_ZN8touchgfx9PresenterC1Ev>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7ff fed4 	bl	8010a3c <_ZN13ModelListenerC1Ev>
 8010c94:	4a06      	ldr	r2, [pc, #24]	; (8010cb0 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	601a      	str	r2, [r3, #0]
 8010c9a:	4a06      	ldr	r2, [pc, #24]	; (8010cb4 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	605a      	str	r2, [r3, #4]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	683a      	ldr	r2, [r7, #0]
 8010ca4:	60da      	str	r2, [r3, #12]
{

}
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3708      	adds	r7, #8
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	08028048 	.word	0x08028048
 8010cb4:	08028060 	.word	0x08028060

08010cb8 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b083      	sub	sp, #12
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]

}
 8010cc0:	bf00      	nop
 8010cc2:	370c      	adds	r7, #12
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]

}
 8010cd4:	bf00      	nop
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	4a05      	ldr	r2, [pc, #20]	; (8010d00 <_ZN11Screen2ViewD1Ev+0x20>)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	601a      	str	r2, [r3, #0]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7ff fb2d 	bl	8010350 <_ZN15Screen2ViewBaseD1Ev>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	08028070 	.word	0x08028070

08010d04 <_ZN11Screen2ViewD0Ev>:
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f7ff ffe7 	bl	8010ce0 <_ZN11Screen2ViewD1Ev>
 8010d12:	f640 61a8 	movw	r1, #3752	; 0xea8
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f014 fd82 	bl	8025820 <_ZdlPvj>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
	...

08010d28 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7ff fb44 	bl	80103c0 <_ZN15Screen2ViewBaseC1Ev>
 8010d38:	4a03      	ldr	r2, [pc, #12]	; (8010d48 <_ZN11Screen2ViewC1Ev+0x20>)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	601a      	str	r2, [r3, #0]
{

}
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	4618      	mov	r0, r3
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	08028070 	.word	0x08028070

08010d4c <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7ff fbae 	bl	80104b8 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8010d5c:	bf00      	nop
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fe f9d8 	bl	800f124 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010d74:	bf00      	nop
 8010d76:	3708      	adds	r7, #8
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
    {
 8010d84:	4a04      	ldr	r2, [pc, #16]	; (8010d98 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	601a      	str	r2, [r3, #0]
    }
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	370c      	adds	r7, #12
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr
 8010d98:	080280bc 	.word	0x080280bc

08010d9c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b082      	sub	sp, #8
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
    }
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7ff ffe9 	bl	8010d7c <_ZN8touchgfx15TouchControllerD1Ev>
 8010daa:	2104      	movs	r1, #4
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f014 fd37 	bl	8025820 <_ZdlPvj>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4618      	mov	r0, r3
 8010db6:	3708      	adds	r7, #8
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8010dc4:	bf00      	nop
 8010dc6:	370c      	adds	r7, #12
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b085      	sub	sp, #20
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8010ddc:	2300      	movs	r3, #0
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3714      	adds	r7, #20
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr
	...

08010dec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	4a05      	ldr	r2, [pc, #20]	; (8010e0c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	601a      	str	r2, [r3, #0]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7ff ffbd 	bl	8010d7c <_ZN8touchgfx15TouchControllerD1Ev>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	080280a4 	.word	0x080280a4

08010e10 <_ZN20STM32TouchControllerD0Ev>:
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff ffe7 	bl	8010dec <_ZN20STM32TouchControllerD1Ev>
 8010e1e:	2104      	movs	r1, #4
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f014 fcfd 	bl	8025820 <_ZdlPvj>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	4603      	mov	r3, r0
 8010e38:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	2b03      	cmp	r3, #3
 8010e3e:	d80c      	bhi.n	8010e5a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8010e40:	a201      	add	r2, pc, #4	; (adr r2, 8010e48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8010e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e46:	bf00      	nop
 8010e48:	08010e59 	.word	0x08010e59
 8010e4c:	08010e59 	.word	0x08010e59
 8010e50:	08010e59 	.word	0x08010e59
 8010e54:	08010e59 	.word	0x08010e59
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8010e58:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8010e5a:	bf00      	nop
 8010e5c:	370c      	adds	r7, #12
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop

08010e68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	4603      	mov	r3, r0
 8010e70:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8010e72:	79fb      	ldrb	r3, [r7, #7]
 8010e74:	2b03      	cmp	r3, #3
 8010e76:	d80c      	bhi.n	8010e92 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8010e78:	a201      	add	r2, pc, #4	; (adr r2, 8010e80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8010e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e7e:	bf00      	nop
 8010e80:	08010e91 	.word	0x08010e91
 8010e84:	08010e91 	.word	0x08010e91
 8010e88:	08010e91 	.word	0x08010e91
 8010e8c:	08010e91 	.word	0x08010e91
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8010e90:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8010e92:	bf00      	nop
 8010e94:	370c      	adds	r7, #12
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop

08010ea0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8010eaa:	79fb      	ldrb	r3, [r7, #7]
 8010eac:	2b03      	cmp	r3, #3
 8010eae:	d80c      	bhi.n	8010eca <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8010eb0:	a201      	add	r2, pc, #4	; (adr r2, 8010eb8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8010eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb6:	bf00      	nop
 8010eb8:	08010ec9 	.word	0x08010ec9
 8010ebc:	08010ec9 	.word	0x08010ec9
 8010ec0:	08010ec9 	.word	0x08010ec9
 8010ec4:	08010ec9 	.word	0x08010ec9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8010ec8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8010eca:	bf00      	nop
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop

08010ed8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8010ed8:	b480      	push	{r7}
 8010eda:	b083      	sub	sp, #12
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
    {
 8010ee0:	4a04      	ldr	r2, [pc, #16]	; (8010ef4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	601a      	str	r2, [r3, #0]
    }
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	370c      	adds	r7, #12
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr
 8010ef4:	080284a0 	.word	0x080284a0

08010ef8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
    }
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7ff ffe9 	bl	8010ed8 <_ZN8touchgfx3HALD1Ev>
 8010f06:	217c      	movs	r1, #124	; 0x7c
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f014 fc89 	bl	8025820 <_ZdlPvj>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	4618      	mov	r0, r3
 8010f12:	3708      	adds	r7, #8
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	460b      	mov	r3, r1
 8010f22:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	78fa      	ldrb	r2, [r7, #3]
 8010f28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8010f34:	bf00      	nop
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	460b      	mov	r3, r1
 8010f4a:	807b      	strh	r3, [r7, #2]
 8010f4c:	4613      	mov	r3, r2
 8010f4e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8010f50:	4b0c      	ldr	r3, [pc, #48]	; (8010f84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8010f52:	881b      	ldrh	r3, [r3, #0]
 8010f54:	887a      	ldrh	r2, [r7, #2]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d304      	bcc.n	8010f64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8010f5a:	4b0b      	ldr	r3, [pc, #44]	; (8010f88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8010f5c:	881b      	ldrh	r3, [r3, #0]
 8010f5e:	883a      	ldrh	r2, [r7, #0]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d205      	bcs.n	8010f70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8010f64:	4b09      	ldr	r3, [pc, #36]	; (8010f8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8010f66:	4a0a      	ldr	r2, [pc, #40]	; (8010f90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8010f68:	219e      	movs	r1, #158	; 0x9e
 8010f6a:	480a      	ldr	r0, [pc, #40]	; (8010f94 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8010f6c:	f014 fc84 	bl	8025878 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8010f70:	4a09      	ldr	r2, [pc, #36]	; (8010f98 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8010f72:	887b      	ldrh	r3, [r7, #2]
 8010f74:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8010f76:	4a09      	ldr	r2, [pc, #36]	; (8010f9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8010f78:	883b      	ldrh	r3, [r7, #0]
 8010f7a:	8013      	strh	r3, [r2, #0]
    }
 8010f7c:	bf00      	nop
 8010f7e:	3708      	adds	r7, #8
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	2004e10c 	.word	0x2004e10c
 8010f88:	2004e10e 	.word	0x2004e10e
 8010f8c:	08027328 	.word	0x08027328
 8010f90:	0802738c 	.word	0x0802738c
 8010f94:	080273d0 	.word	0x080273d0
 8010f98:	2004e112 	.word	0x2004e112
 8010f9c:	2004e114 	.word	0x2004e114

08010fa0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d009      	beq.n	8010fc6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	685a      	ldr	r2, [r3, #4]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	4610      	mov	r0, r2
 8010fc0:	4798      	blx	r3
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	e000      	b.n	8010fc8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 8010fc6:	2300      	movs	r3, #0
    }
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3708      	adds	r7, #8
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f002 fe6b 	bl	8013cb4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	33ac      	adds	r3, #172	; 0xac
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	4798      	blx	r3
    }
 8010fea:	bf00      	nop
 8010fec:	3708      	adds	r7, #8
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8010ff2:	b480      	push	{r7}
 8010ff4:	b083      	sub	sp, #12
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
 8010ffa:	6039      	str	r1, [r7, #0]
        return false;
 8010ffc:	2300      	movs	r3, #0
    }
 8010ffe:	4618      	mov	r0, r3
 8011000:	370c      	adds	r7, #12
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
	...

0801100c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801100c:	b580      	push	{r7, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	af00      	add	r7, sp, #0
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	607a      	str	r2, [r7, #4]
 8011018:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d106      	bne.n	801102e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011020:	4b0f      	ldr	r3, [pc, #60]	; (8011060 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8011022:	4a10      	ldr	r2, [pc, #64]	; (8011064 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8011024:	f240 21d2 	movw	r1, #722	; 0x2d2
 8011028:	480f      	ldr	r0, [pc, #60]	; (8011068 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801102a:	f014 fc25 	bl	8025878 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	68ba      	ldr	r2, [r7, #8]
 8011032:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2b00      	cmp	r3, #0
 801103e:	bf14      	ite	ne
 8011040:	2301      	movne	r3, #1
 8011042:	2300      	moveq	r3, #0
 8011044:	b2da      	uxtb	r2, r3
 8011046:	4b09      	ldr	r3, [pc, #36]	; (801106c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8011048:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	338c      	adds	r3, #140	; 0x8c
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	6839      	ldr	r1, [r7, #0]
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	4798      	blx	r3
    }
 8011058:	bf00      	nop
 801105a:	3710      	adds	r7, #16
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}
 8011060:	08027414 	.word	0x08027414
 8011064:	0802744c 	.word	0x0802744c
 8011068:	080273d0 	.word	0x080273d0
 801106c:	2004e116 	.word	0x2004e116

08011070 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	683a      	ldr	r2, [r7, #0]
 801107e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	bf14      	ite	ne
 8011086:	2301      	movne	r3, #1
 8011088:	2300      	moveq	r3, #0
 801108a:	b2da      	uxtb	r2, r3
 801108c:	4b03      	ldr	r3, [pc, #12]	; (801109c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801108e:	701a      	strb	r2, [r3, #0]
    }
 8011090:	bf00      	nop
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr
 801109c:	2004e117 	.word	0x2004e117

080110a0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
        return 0;
 80110a8:	2300      	movs	r3, #0
    }
 80110aa:	4618      	mov	r0, r3
 80110ac:	370c      	adds	r7, #12
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr

080110b6 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 80110b6:	b580      	push	{r7, lr}
 80110b8:	b082      	sub	sp, #8
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
 80110be:	460b      	mov	r3, r1
 80110c0:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d004      	beq.n	80110d4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ce:	887a      	ldrh	r2, [r7, #2]
 80110d0:	4610      	mov	r0, r2
 80110d2:	4798      	blx	r3
    }
 80110d4:	bf00      	nop
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 80110e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80110e8:	4618      	mov	r0, r3
 80110ea:	370c      	adds	r7, #12
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr

080110f4 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	685a      	ldr	r2, [r3, #4]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	3318      	adds	r3, #24
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4610      	mov	r0, r2
 801110c:	4798      	blx	r3
 801110e:	4603      	mov	r3, r0
    }
 8011110:	4618      	mov	r0, r3
 8011112:	3708      	adds	r7, #8
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 8011120:	4b0e      	ldr	r3, [pc, #56]	; (801115c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d00c      	beq.n	8011142 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	3330      	adds	r3, #48	; 0x30
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	4798      	blx	r3
 8011134:	4602      	mov	r2, r0
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801113a:	429a      	cmp	r2, r3
 801113c:	d101      	bne.n	8011142 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 801113e:	2301      	movs	r3, #1
 8011140:	e000      	b.n	8011144 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 8011142:	2300      	movs	r3, #0
 8011144:	2b00      	cmp	r3, #0
 8011146:	d002      	beq.n	801114e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801114c:	e001      	b.n	8011152 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8011152:	4618      	mov	r0, r3
 8011154:	3708      	adds	r7, #8
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	2004e116 	.word	0x2004e116

08011160 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011174:	429a      	cmp	r2, r3
 8011176:	d011      	beq.n	801119c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8011178:	4b14      	ldr	r3, [pc, #80]	; (80111cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d11e      	bne.n	80111be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8011180:	4b13      	ldr	r3, [pc, #76]	; (80111d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011186:	4b13      	ldr	r3, [pc, #76]	; (80111d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011188:	881a      	ldrh	r2, [r3, #0]
 801118a:	4b11      	ldr	r3, [pc, #68]	; (80111d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801118c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801118e:	4a11      	ldr	r2, [pc, #68]	; (80111d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011190:	89bb      	ldrh	r3, [r7, #12]
 8011192:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8011194:	4b0d      	ldr	r3, [pc, #52]	; (80111cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011196:	2201      	movs	r2, #1
 8011198:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801119a:	e010      	b.n	80111be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801119c:	4b0b      	ldr	r3, [pc, #44]	; (80111cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d00c      	beq.n	80111be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80111a4:	4b0a      	ldr	r3, [pc, #40]	; (80111d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80111aa:	4b0a      	ldr	r3, [pc, #40]	; (80111d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80111ac:	881a      	ldrh	r2, [r3, #0]
 80111ae:	4b08      	ldr	r3, [pc, #32]	; (80111d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80111b0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80111b2:	4a08      	ldr	r2, [pc, #32]	; (80111d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80111b4:	89fb      	ldrh	r3, [r7, #14]
 80111b6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80111b8:	4b04      	ldr	r3, [pc, #16]	; (80111cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	701a      	strb	r2, [r3, #0]
    }
 80111be:	bf00      	nop
 80111c0:	3714      	adds	r7, #20
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr
 80111ca:	bf00      	nop
 80111cc:	2004e110 	.word	0x2004e110
 80111d0:	2004e10e 	.word	0x2004e10e
 80111d4:	2004e10c 	.word	0x2004e10c

080111d8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
    {
    }
 80111e0:	bf00      	nop
 80111e2:	370c      	adds	r7, #12
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr

080111ec <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 80111ec:	b480      	push	{r7}
 80111ee:	b083      	sub	sp, #12
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
    {
    }
 80111f4:	bf00      	nop
 80111f6:	370c      	adds	r7, #12
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr

08011200 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4618      	mov	r0, r3
 801120c:	f001 ffca 	bl	80131a4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8011210:	bf00      	nop
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	4a05      	ldr	r2, [pc, #20]	; (8011238 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	601a      	str	r2, [r3, #0]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4618      	mov	r0, r3
 801122a:	f7ff fe55 	bl	8010ed8 <_ZN8touchgfx3HALD1Ev>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	080282f8 	.word	0x080282f8

0801123c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f7ff ffe7 	bl	8011218 <_ZN20TouchGFXGeneratedHALD1Ev>
 801124a:	217c      	movs	r1, #124	; 0x7c
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f014 fae7 	bl	8025820 <_ZdlPvj>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4618      	mov	r0, r3
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	4618      	mov	r0, r3
 8011268:	f7ff ffca 	bl	8011200 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801126c:	bf00      	nop
 801126e:	3708      	adds	r7, #8
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}

08011274 <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4618      	mov	r0, r3
 8011280:	f001 fc22 	bl	8012ac8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8011284:	bf00      	nop
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4618      	mov	r0, r3
 8011298:	f001 fc7e 	bl	8012b98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 801129c:	4603      	mov	r3, r0
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3708      	adds	r7, #8
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b082      	sub	sp, #8
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
 80112ae:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6839      	ldr	r1, [r7, #0]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f001 fc7d 	bl	8012bb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80112ba:	bf00      	nop
 80112bc:	3708      	adds	r7, #8
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}

080112c2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80112c2:	b590      	push	{r4, r7, lr}
 80112c4:	b083      	sub	sp, #12
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]
 80112ca:	6039      	str	r1, [r7, #0]
	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112d2:	b298      	uxth	r0, r3
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112da:	b299      	uxth	r1, r3
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112e2:	b29a      	uxth	r2, r3
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	4413      	add	r3, r2
 80112ee:	b29c      	uxth	r4, r3
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112f6:	b29a      	uxth	r2, r3
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80112fe:	b29b      	uxth	r3, r3
 8011300:	4413      	add	r3, r2
 8011302:	b29b      	uxth	r3, r3
 8011304:	4622      	mov	r2, r4
 8011306:	f7ef fabd 	bl	8000884 <ST7789V_setCursorPosition>
	ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 801130a:	202c      	movs	r0, #44	; 0x2c
 801130c:	f7ef fa74 	bl	80007f8 <ST7789V_SEND_COMMAND>
	this -> copyFrameBufferBlockToLCD(rect);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	33d0      	adds	r3, #208	; 0xd0
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	6839      	ldr	r1, [r7, #0]
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	4798      	blx	r3
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6839      	ldr	r1, [r7, #0]
 8011322:	4618      	mov	r0, r3
 8011324:	f001 fc51 	bl	8012bca <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 }
 8011328:	bf00      	nop
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	bd90      	pop	{r4, r7, pc}

08011330 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE>:

void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect& rect)
{
 8011330:	b590      	push	{r4, r7, lr}
 8011332:	b087      	sub	sp, #28
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
	__IO uint16_t* ptr;
	uint32_t height;

	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011340:	b298      	uxth	r0, r3
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011348:	b299      	uxth	r1, r3
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011350:	b29a      	uxth	r2, r3
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011358:	b29b      	uxth	r3, r3
 801135a:	4413      	add	r3, r2
 801135c:	b29c      	uxth	r4, r3
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011364:	b29a      	uxth	r2, r3
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801136c:	b29b      	uxth	r3, r3
 801136e:	4413      	add	r3, r2
 8011370:	b29b      	uxth	r3, r3
 8011372:	4622      	mov	r2, r4
 8011374:	f7ef fa86 	bl	8000884 <ST7789V_setCursorPosition>

	for(height = 0; height < rect.height; height++)
 8011378:	2300      	movs	r3, #0
 801137a:	617b      	str	r3, [r7, #20]
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011382:	461a      	mov	r2, r3
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	4293      	cmp	r3, r2
 8011388:	d236      	bcs.n	80113f8 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc8>
	{
		ptr = getClientFrameBuffer() + rect.x + (height + rect.y) * HAL::DISPLAY_WIDTH;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4618      	mov	r0, r3
 801138e:	f7ff fec3 	bl	8011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011392:	4602      	mov	r2, r0
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	f9b3 3000 	ldrsh.w	r3, [r3]
 801139a:	4618      	mov	r0, r3
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80113a2:	4619      	mov	r1, r3
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	440b      	add	r3, r1
 80113a8:	4915      	ldr	r1, [pc, #84]	; (8011400 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xd0>)
 80113aa:	8809      	ldrh	r1, [r1, #0]
 80113ac:	fb01 f303 	mul.w	r3, r1, r3
 80113b0:	4403      	add	r3, r0
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	4413      	add	r3, r2
 80113b6:	60fb      	str	r3, [r7, #12]
		//LCD_IO_WriteMultipleData((uint16_t*)ptr, rect.width);
		//for (uint32_t i = 0; i < Size; i++)
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 80113b8:	2300      	movs	r3, #0
 80113ba:	613b      	str	r3, [r7, #16]
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80113c2:	461a      	mov	r2, r3
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80113ca:	fb02 f303 	mul.w	r3, r2, r3
 80113ce:	461a      	mov	r2, r3
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d20c      	bcs.n	80113f0 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc0>
		        {
		            //FMC_BANK1_WriteData(ptr[i]);
					ST7789V_SEND_DATA(ptr[i]);
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	005b      	lsls	r3, r3, #1
 80113da:	68fa      	ldr	r2, [r7, #12]
 80113dc:	4413      	add	r3, r2
 80113de:	881b      	ldrh	r3, [r3, #0]
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7ef fa18 	bl	8000818 <ST7789V_SEND_DATA>
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	3301      	adds	r3, #1
 80113ec:	613b      	str	r3, [r7, #16]
 80113ee:	e7e5      	b.n	80113bc <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x8c>
	for(height = 0; height < rect.height; height++)
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	3301      	adds	r3, #1
 80113f4:	617b      	str	r3, [r7, #20]
 80113f6:	e7c1      	b.n	801137c <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x4c>
		        }
	}
}
 80113f8:	bf00      	nop
 80113fa:	371c      	adds	r7, #28
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd90      	pop	{r4, r7, pc}
 8011400:	2004e10c 	.word	0x2004e10c

08011404 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	607a      	str	r2, [r7, #4]
 8011410:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	687a      	ldr	r2, [r7, #4]
 8011418:	68b9      	ldr	r1, [r7, #8]
 801141a:	f001 fbe4 	bl	8012be6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 801141e:	4603      	mov	r3, r0
}
 8011420:	4618      	mov	r0, r3
 8011422:	3710      	adds	r7, #16
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	4618      	mov	r0, r3
 8011434:	f001 fb6a 	bl	8012b0c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011438:	bf00      	nop
 801143a:	3708      	adds	r7, #8
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	4618      	mov	r0, r3
 801144c:	f001 fb6a 	bl	8012b24 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011450:	bf00      	nop
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	4618      	mov	r0, r3
 8011464:	f001 fb69 	bl	8012b3a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011468:	bf00      	nop
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	4618      	mov	r0, r3
 801147c:	f001 fb68 	bl	8012b50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011480:	bf00      	nop
 8011482:	3708      	adds	r7, #8
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	4618      	mov	r0, r3
 8011494:	f001 fb66 	bl	8012b64 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011498:	4603      	mov	r3, r0
}
 801149a:	4618      	mov	r0, r3
 801149c:	3708      	adds	r7, #8
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}

080114a2 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80114a2:	b580      	push	{r7, lr}
 80114a4:	b082      	sub	sp, #8
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4618      	mov	r0, r3
 80114ae:	f001 fb66 	bl	8012b7e <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 80114b2:	bf00      	nop
 80114b4:	3708      	adds	r7, #8
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
	...

080114bc <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	4a05      	ldr	r2, [pc, #20]	; (80114dc <_ZN11TouchGFXHALD1Ev+0x20>)
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	601a      	str	r2, [r3, #0]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7ff fea3 	bl	8011218 <_ZN20TouchGFXGeneratedHALD1Ev>
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	4618      	mov	r0, r3
 80114d6:	3708      	adds	r7, #8
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	080280d4 	.word	0x080280d4

080114e0 <_ZN11TouchGFXHALD0Ev>:
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f7ff ffe7 	bl	80114bc <_ZN11TouchGFXHALD1Ev>
 80114ee:	217c      	movs	r1, #124	; 0x7c
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f014 f995 	bl	8025820 <_ZdlPvj>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4618      	mov	r0, r3
 80114fa:	3708      	adds	r7, #8
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}

08011500 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af02      	add	r7, sp, #8
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8011506:	2334      	movs	r3, #52	; 0x34
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	2364      	movs	r3, #100	; 0x64
 801150c:	4a2b      	ldr	r2, [pc, #172]	; (80115bc <_ZN8touchgfx10OSWrappers10initializeEv+0xbc>)
 801150e:	492c      	ldr	r1, [pc, #176]	; (80115c0 <_ZN8touchgfx10OSWrappers10initializeEv+0xc0>)
 8011510:	482c      	ldr	r0, [pc, #176]	; (80115c4 <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8011512:	f7fb f91f 	bl	800c754 <_txe_byte_pool_create>
 8011516:	4603      	mov	r3, r0
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
 8011518:	2b00      	cmp	r3, #0
 801151a:	bf14      	ite	ne
 801151c:	2301      	movne	r3, #1
 801151e:	2300      	moveq	r3, #0
 8011520:	b2db      	uxtb	r3, r3
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8011522:	2b00      	cmp	r3, #0
 8011524:	d005      	beq.n	8011532 <_ZN8touchgfx10OSWrappers10initializeEv+0x32>
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 8011526:	4b28      	ldr	r3, [pc, #160]	; (80115c8 <_ZN8touchgfx10OSWrappers10initializeEv+0xc8>)
 8011528:	4a28      	ldr	r2, [pc, #160]	; (80115cc <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 801152a:	2138      	movs	r1, #56	; 0x38
 801152c:	4828      	ldr	r0, [pc, #160]	; (80115d0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 801152e:	f014 f9a3 	bl	8025878 <__assert_func>
    }

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 8011532:	1d39      	adds	r1, r7, #4
 8011534:	2300      	movs	r3, #0
 8011536:	2204      	movs	r2, #4
 8011538:	4822      	ldr	r0, [pc, #136]	; (80115c4 <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 801153a:	f7fb f897 	bl	800c66c <_txe_byte_allocate>
 801153e:	4603      	mov	r3, r0
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8011540:	2b00      	cmp	r3, #0
 8011542:	bf14      	ite	ne
 8011544:	2301      	movne	r3, #1
 8011546:	2300      	moveq	r3, #0
 8011548:	b2db      	uxtb	r3, r3
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 801154a:	2b00      	cmp	r3, #0
 801154c:	d005      	beq.n	801155a <_ZN8touchgfx10OSWrappers10initializeEv+0x5a>
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 801154e:	4b21      	ldr	r3, [pc, #132]	; (80115d4 <_ZN8touchgfx10OSWrappers10initializeEv+0xd4>)
 8011550:	4a1e      	ldr	r2, [pc, #120]	; (80115cc <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011552:	213f      	movs	r1, #63	; 0x3f
 8011554:	481e      	ldr	r0, [pc, #120]	; (80115d0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011556:	f014 f98f 	bl	8025878 <__assert_func>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2238      	movs	r2, #56	; 0x38
 801155e:	9201      	str	r2, [sp, #4]
 8011560:	2204      	movs	r2, #4
 8011562:	9200      	str	r2, [sp, #0]
 8011564:	2201      	movs	r2, #1
 8011566:	491c      	ldr	r1, [pc, #112]	; (80115d8 <_ZN8touchgfx10OSWrappers10initializeEv+0xd8>)
 8011568:	481c      	ldr	r0, [pc, #112]	; (80115dc <_ZN8touchgfx10OSWrappers10initializeEv+0xdc>)
 801156a:	f7fb f993 	bl	800c894 <_txe_queue_create>
 801156e:	4603      	mov	r3, r0
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
 8011570:	2b00      	cmp	r3, #0
 8011572:	bf14      	ite	ne
 8011574:	2301      	movne	r3, #1
 8011576:	2300      	moveq	r3, #0
 8011578:	b2db      	uxtb	r3, r3
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 801157a:	2b00      	cmp	r3, #0
 801157c:	d005      	beq.n	801158a <_ZN8touchgfx10OSWrappers10initializeEv+0x8a>
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 801157e:	4b18      	ldr	r3, [pc, #96]	; (80115e0 <_ZN8touchgfx10OSWrappers10initializeEv+0xe0>)
 8011580:	4a12      	ldr	r2, [pc, #72]	; (80115cc <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011582:	2146      	movs	r1, #70	; 0x46
 8011584:	4812      	ldr	r0, [pc, #72]	; (80115d0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011586:	f014 f977 	bl	8025878 <__assert_func>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 801158a:	231c      	movs	r3, #28
 801158c:	2201      	movs	r2, #1
 801158e:	4915      	ldr	r1, [pc, #84]	; (80115e4 <_ZN8touchgfx10OSWrappers10initializeEv+0xe4>)
 8011590:	4815      	ldr	r0, [pc, #84]	; (80115e8 <_ZN8touchgfx10OSWrappers10initializeEv+0xe8>)
 8011592:	f7fb fa79 	bl	800ca88 <_txe_semaphore_create>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	bf14      	ite	ne
 801159c:	2301      	movne	r3, #1
 801159e:	2300      	moveq	r3, #0
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d005      	beq.n	80115b2 <_ZN8touchgfx10OSWrappers10initializeEv+0xb2>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 80115a6:	4b11      	ldr	r3, [pc, #68]	; (80115ec <_ZN8touchgfx10OSWrappers10initializeEv+0xec>)
 80115a8:	4a08      	ldr	r2, [pc, #32]	; (80115cc <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 80115aa:	214c      	movs	r1, #76	; 0x4c
 80115ac:	4808      	ldr	r0, [pc, #32]	; (80115d0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 80115ae:	f014 f963 	bl	8025878 <__assert_func>
    }
}
 80115b2:	bf00      	nop
 80115b4:	3708      	adds	r7, #8
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	2004bf58 	.word	0x2004bf58
 80115c0:	0802749c 	.word	0x0802749c
 80115c4:	2004bfbc 	.word	0x2004bfbc
 80115c8:	080274b0 	.word	0x080274b0
 80115cc:	080274e0 	.word	0x080274e0
 80115d0:	08027510 	.word	0x08027510
 80115d4:	0802753c 	.word	0x0802753c
 80115d8:	0802757c 	.word	0x0802757c
 80115dc:	2004c00c 	.word	0x2004c00c
 80115e0:	08027590 	.word	0x08027590
 80115e4:	080275c0 	.word	0x080275c0
 80115e8:	2004bff0 	.word	0x2004bff0
 80115ec:	080275d8 	.word	0x080275d8

080115f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 80115f4:	f04f 31ff 	mov.w	r1, #4294967295
 80115f8:	4809      	ldr	r0, [pc, #36]	; (8011620 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 80115fa:	f7fb fadb 	bl	800cbb4 <_txe_semaphore_get>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	bf14      	ite	ne
 8011604:	2301      	movne	r3, #1
 8011606:	2300      	moveq	r3, #0
 8011608:	b2db      	uxtb	r3, r3
 801160a:	2b00      	cmp	r3, #0
 801160c:	d005      	beq.n	801161a <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 801160e:	4b05      	ldr	r3, [pc, #20]	; (8011624 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 8011610:	4a05      	ldr	r2, [pc, #20]	; (8011628 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 8011612:	2157      	movs	r1, #87	; 0x57
 8011614:	4805      	ldr	r0, [pc, #20]	; (801162c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x3c>)
 8011616:	f014 f92f 	bl	8025878 <__assert_func>
    }
}
 801161a:	bf00      	nop
 801161c:	bd80      	pop	{r7, pc}
 801161e:	bf00      	nop
 8011620:	2004bff0 	.word	0x2004bff0
 8011624:	08027608 	.word	0x08027608
 8011628:	08027634 	.word	0x08027634
 801162c:	08027510 	.word	0x08027510

08011630 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011630:	b580      	push	{r7, lr}
 8011632:	af00      	add	r7, sp, #0
    if (!frame_buffer_sem.tx_semaphore_count)
 8011634:	4b0b      	ldr	r3, [pc, #44]	; (8011664 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8011636:	689b      	ldr	r3, [r3, #8]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d110      	bne.n	801165e <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 801163c:	4809      	ldr	r0, [pc, #36]	; (8011664 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 801163e:	f7fb fafb 	bl	800cc38 <_txe_semaphore_put>
 8011642:	4603      	mov	r3, r0
 8011644:	2b00      	cmp	r3, #0
 8011646:	bf14      	ite	ne
 8011648:	2301      	movne	r3, #1
 801164a:	2300      	moveq	r3, #0
 801164c:	b2db      	uxtb	r3, r3
 801164e:	2b00      	cmp	r3, #0
 8011650:	d005      	beq.n	801165e <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8011652:	4b05      	ldr	r3, [pc, #20]	; (8011668 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x38>)
 8011654:	4a05      	ldr	r2, [pc, #20]	; (801166c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x3c>)
 8011656:	2164      	movs	r1, #100	; 0x64
 8011658:	4805      	ldr	r0, [pc, #20]	; (8011670 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x40>)
 801165a:	f014 f90d 	bl	8025878 <__assert_func>
        }
    }
}
 801165e:	bf00      	nop
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	2004bff0 	.word	0x2004bff0
 8011668:	08027674 	.word	0x08027674
 801166c:	080276a0 	.word	0x080276a0
 8011670:	08027510 	.word	0x08027510

08011674 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011674:	b580      	push	{r7, lr}
 8011676:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8011678:	2100      	movs	r1, #0
 801167a:	4803      	ldr	r0, [pc, #12]	; (8011688 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801167c:	f7fb fa9a 	bl	800cbb4 <_txe_semaphore_get>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
    {
        // Typically we should inform the requester about failing to get this semaphore
        // Maybe we should update the prototype of this method to return the result of the try
        // assert(0 && "Failed to get FrameBuffer Semaphore!");
    }
}
 8011684:	bf00      	nop
 8011686:	bd80      	pop	{r7, pc}
 8011688:	2004bff0 	.word	0x2004bff0

0801168c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011692:	f3ef 8310 	mrs	r3, PRIMASK
 8011696:	60bb      	str	r3, [r7, #8]
    return(posture);
 8011698:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 801169a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 801169c:	b672      	cpsid	i
    return(int_posture);
 801169e:	687b      	ldr	r3, [r7, #4]
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
 80116a0:	60fb      	str	r3, [r7, #12]
    _tx_thread_preempt_disable++;
 80116a2:	4b15      	ldr	r3, [pc, #84]	; (80116f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	3301      	adds	r3, #1
 80116a8:	4a13      	ldr	r2, [pc, #76]	; (80116f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 80116aa:	6013      	str	r3, [r2, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 80116ac:	4b13      	ldr	r3, [pc, #76]	; (80116fc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 80116ae:	689b      	ldr	r3, [r3, #8]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d110      	bne.n	80116d6 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 80116b4:	4811      	ldr	r0, [pc, #68]	; (80116fc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 80116b6:	f7fb fabf 	bl	800cc38 <_txe_semaphore_put>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	bf14      	ite	ne
 80116c0:	2301      	movne	r3, #1
 80116c2:	2300      	moveq	r3, #0
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d005      	beq.n	80116d6 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 80116ca:	4b0d      	ldr	r3, [pc, #52]	; (8011700 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x74>)
 80116cc:	4a0d      	ldr	r2, [pc, #52]	; (8011704 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x78>)
 80116ce:	218a      	movs	r1, #138	; 0x8a
 80116d0:	480d      	ldr	r0, [pc, #52]	; (8011708 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x7c>)
 80116d2:	f014 f8d1 	bl	8025878 <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 80116d6:	4b08      	ldr	r3, [pc, #32]	; (80116f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	3b01      	subs	r3, #1
 80116dc:	4a06      	ldr	r2, [pc, #24]	; (80116f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 80116de:	6013      	str	r3, [r2, #0]
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	f383 8810 	msr	PRIMASK, r3
}
 80116ea:	bf00      	nop
    TX_RESTORE;
    _tx_thread_system_preempt_check();
 80116ec:	f7fa faa8 	bl	800bc40 <_tx_thread_system_preempt_check>
}
 80116f0:	bf00      	nop
 80116f2:	3710      	adds	r7, #16
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	2004b948 	.word	0x2004b948
 80116fc:	2004bff0 	.word	0x2004bff0
 8011700:	08027674 	.word	0x08027674
 8011704:	080276e0 	.word	0x080276e0
 8011708:	08027510 	.word	0x08027510

0801170c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8011712:	2200      	movs	r2, #0
 8011714:	490f      	ldr	r1, [pc, #60]	; (8011754 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 8011716:	4810      	ldr	r0, [pc, #64]	; (8011758 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8011718:	f7fb f96c 	bl	800c9f4 <_txe_queue_receive>
 801171c:	6078      	str	r0, [r7, #4]

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d002      	beq.n	801172a <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2b0a      	cmp	r3, #10
 8011728:	d106      	bne.n	8011738 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        // Then, wait for next VSYNC to occur.
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 801172a:	f04f 32ff 	mov.w	r2, #4294967295
 801172e:	4909      	ldr	r1, [pc, #36]	; (8011754 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 8011730:	4809      	ldr	r0, [pc, #36]	; (8011758 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8011732:	f7fb f95f 	bl	800c9f4 <_txe_queue_receive>
 8011736:	6078      	str	r0, [r7, #4]
    }

    if (ret != TX_SUCCESS)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d005      	beq.n	801174a <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3e>
    {
        assert(0 && "Failed to Wait for Vsync!");
 801173e:	4b07      	ldr	r3, [pc, #28]	; (801175c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x50>)
 8011740:	4a07      	ldr	r2, [pc, #28]	; (8011760 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x54>)
 8011742:	21c9      	movs	r1, #201	; 0xc9
 8011744:	4807      	ldr	r0, [pc, #28]	; (8011764 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x58>)
 8011746:	f014 f897 	bl	8025878 <__assert_func>
    }
}
 801174a:	bf00      	nop
 801174c:	3708      	adds	r7, #8
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	20025818 	.word	0x20025818
 8011758:	2004c00c 	.word	0x2004c00c
 801175c:	08027774 	.word	0x08027774
 8011760:	08027798 	.word	0x08027798
 8011764:	08027510 	.word	0x08027510

08011768 <__NVIC_DisableIRQ>:
{
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
 801176e:	4603      	mov	r3, r0
 8011770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011776:	2b00      	cmp	r3, #0
 8011778:	db12      	blt.n	80117a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801177a:	79fb      	ldrb	r3, [r7, #7]
 801177c:	f003 021f 	and.w	r2, r3, #31
 8011780:	490a      	ldr	r1, [pc, #40]	; (80117ac <__NVIC_DisableIRQ+0x44>)
 8011782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011786:	095b      	lsrs	r3, r3, #5
 8011788:	2001      	movs	r0, #1
 801178a:	fa00 f202 	lsl.w	r2, r0, r2
 801178e:	3320      	adds	r3, #32
 8011790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011794:	f3bf 8f4f 	dsb	sy
}
 8011798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801179a:	f3bf 8f6f 	isb	sy
}
 801179e:	bf00      	nop
}
 80117a0:	bf00      	nop
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr
 80117ac:	e000e100 	.word	0xe000e100

080117b0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80117b0:	b480      	push	{r7}
 80117b2:	b083      	sub	sp, #12
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
    {
 80117b8:	4a04      	ldr	r2, [pc, #16]	; (80117cc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	601a      	str	r2, [r3, #0]
    }
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr
 80117cc:	08028200 	.word	0x08028200

080117d0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
    }
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7ff ffe9 	bl	80117b0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80117de:	2104      	movs	r1, #4
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f014 f81d 	bl	8025820 <_ZdlPvj>
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	4618      	mov	r0, r3
 80117ea:	3708      	adds	r7, #8
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	3344      	adds	r3, #68	; 0x44
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	4798      	blx	r3
    }
 8011804:	bf00      	nop
 8011806:	3708      	adds	r7, #8
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
    {
 8011814:	4a04      	ldr	r2, [pc, #16]	; (8011828 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	601a      	str	r2, [r3, #0]
    }
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4618      	mov	r0, r3
 801181e:	370c      	adds	r7, #12
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr
 8011828:	08028578 	.word	0x08028578

0801182c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
    }
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7ff ffe9 	bl	801180c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801183a:	210c      	movs	r1, #12
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f013 ffef 	bl	8025820 <_ZdlPvj>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	4618      	mov	r0, r3
 8011846:	3708      	adds	r7, #8
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801184c:	b480      	push	{r7}
 801184e:	b083      	sub	sp, #12
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8011856:	4a09      	ldr	r2, [pc, #36]	; (801187c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	601a      	str	r2, [r3, #0]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	683a      	ldr	r2, [r7, #0]
 8011860:	605a      	str	r2, [r3, #4]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2200      	movs	r2, #0
 8011866:	721a      	strb	r2, [r3, #8]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2200      	movs	r2, #0
 801186c:	725a      	strb	r2, [r3, #9]
    {
    }
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	4618      	mov	r0, r3
 8011872:	370c      	adds	r7, #12
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr
 801187c:	08028578 	.word	0x08028578

08011880 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8011888:	2301      	movs	r3, #1
    }
 801188a:	4618      	mov	r0, r3
 801188c:	370c      	adds	r7, #12
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr

08011896 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8011896:	b580      	push	{r7, lr}
 8011898:	b082      	sub	sp, #8
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	3328      	adds	r3, #40	; 0x28
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	4610      	mov	r0, r2
 80118aa:	4798      	blx	r3
    }
 80118ac:	bf00      	nop
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	685a      	ldr	r2, [r3, #4]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	3314      	adds	r3, #20
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	4610      	mov	r0, r2
 80118cc:	4798      	blx	r3
    }
 80118ce:	bf00      	nop
 80118d0:	3708      	adds	r7, #8
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}
	...

080118d8 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 80118dc:	4b13      	ldr	r3, [pc, #76]	; (801192c <DMA2D_IRQHandler+0x54>)
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	f003 0302 	and.w	r3, r3, #2
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	bf14      	ite	ne
 80118e8:	2301      	movne	r3, #1
 80118ea:	2300      	moveq	r3, #0
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d019      	beq.n	8011926 <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 80118f2:	4b0e      	ldr	r3, [pc, #56]	; (801192c <DMA2D_IRQHandler+0x54>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	bf14      	ite	ne
 80118fe:	2301      	movne	r3, #1
 8011900:	2300      	moveq	r3, #0
 8011902:	b2db      	uxtb	r3, r3
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00e      	beq.n	8011926 <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8011908:	4b08      	ldr	r3, [pc, #32]	; (801192c <DMA2D_IRQHandler+0x54>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4a07      	ldr	r2, [pc, #28]	; (801192c <DMA2D_IRQHandler+0x54>)
 801190e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011912:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8011914:	4b05      	ldr	r3, [pc, #20]	; (801192c <DMA2D_IRQHandler+0x54>)
 8011916:	2202      	movs	r2, #2
 8011918:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801191a:	f7fb ff5b 	bl	800d7d4 <_ZN8touchgfx3HAL11getInstanceEv>
 801191e:	4603      	mov	r3, r0
 8011920:	4618      	mov	r0, r3
 8011922:	f7ff ffc7 	bl	80118b4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8011926:	bf00      	nop
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	4002b000 	.word	0x4002b000

08011930 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	330c      	adds	r3, #12
 801193c:	4618      	mov	r0, r3
 801193e:	f7fd fb84 	bl	800f04a <_ZN8touchgfx9colortypeC1Ev>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4618      	mov	r0, r3
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 801194c:	b5b0      	push	{r4, r5, r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	330c      	adds	r3, #12
 801195a:	4619      	mov	r1, r3
 801195c:	4610      	mov	r0, r2
 801195e:	f7ff ff75 	bl	801184c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8011962:	4a0e      	ldr	r2, [pc, #56]	; (801199c <_ZN8STM32DMAC1Ev+0x50>)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	601a      	str	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f103 000c 	add.w	r0, r3, #12
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	3320      	adds	r3, #32
 8011972:	2260      	movs	r2, #96	; 0x60
 8011974:	4619      	mov	r1, r3
 8011976:	f002 faef 	bl	8013f58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	3320      	adds	r3, #32
 801197e:	245f      	movs	r4, #95	; 0x5f
 8011980:	461d      	mov	r5, r3
 8011982:	2c00      	cmp	r4, #0
 8011984:	db05      	blt.n	8011992 <_ZN8STM32DMAC1Ev+0x46>
 8011986:	4628      	mov	r0, r5
 8011988:	f7ff ffd2 	bl	8011930 <_ZN8touchgfx6BlitOpC1Ev>
 801198c:	3524      	adds	r5, #36	; 0x24
 801198e:	3c01      	subs	r4, #1
 8011990:	e7f7      	b.n	8011982 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	4618      	mov	r0, r3
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bdb0      	pop	{r4, r5, r7, pc}
 801199c:	080281b0 	.word	0x080281b0

080119a0 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	4a09      	ldr	r2, [pc, #36]	; (80119d0 <_ZN8STM32DMAD1Ev+0x30>)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80119ae:	2076      	movs	r0, #118	; 0x76
 80119b0:	f7ff feda 	bl	8011768 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	330c      	adds	r3, #12
 80119b8:	4618      	mov	r0, r3
 80119ba:	f000 fb31 	bl	8012020 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ff ff23 	bl	801180c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	4618      	mov	r0, r3
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	080281b0 	.word	0x080281b0

080119d4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
}
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7ff ffdf 	bl	80119a0 <_ZN8STM32DMAD1Ev>
 80119e2:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f013 ff1a 	bl	8025820 <_ZdlPvj>
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	4618      	mov	r0, r3
 80119f0:	3708      	adds	r7, #8
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
	...

080119f8 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8011a00:	4b13      	ldr	r3, [pc, #76]	; (8011a50 <_ZN8STM32DMA10initializeEv+0x58>)
 8011a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a06:	4a12      	ldr	r2, [pc, #72]	; (8011a50 <_ZN8STM32DMA10initializeEv+0x58>)
 8011a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8011a10:	4b0f      	ldr	r3, [pc, #60]	; (8011a50 <_ZN8STM32DMA10initializeEv+0x58>)
 8011a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a1a:	60fb      	str	r3, [r7, #12]
 8011a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8011a1e:	4b0c      	ldr	r3, [pc, #48]	; (8011a50 <_ZN8STM32DMA10initializeEv+0x58>)
 8011a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a22:	4a0b      	ldr	r2, [pc, #44]	; (8011a50 <_ZN8STM32DMA10initializeEv+0x58>)
 8011a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011a28:	6613      	str	r3, [r2, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8011a2a:	4b09      	ldr	r3, [pc, #36]	; (8011a50 <_ZN8STM32DMA10initializeEv+0x58>)
 8011a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a2e:	4a08      	ldr	r2, [pc, #32]	; (8011a50 <_ZN8STM32DMA10initializeEv+0x58>)
 8011a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011a34:	6613      	str	r3, [r2, #96]	; 0x60

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8011a36:	2200      	movs	r2, #0
 8011a38:	2105      	movs	r1, #5
 8011a3a:	2076      	movs	r0, #118	; 0x76
 8011a3c:	f7f1 f854 	bl	8002ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8011a40:	2076      	movs	r0, #118	; 0x76
 8011a42:	f7f1 f86b 	bl	8002b1c <HAL_NVIC_EnableIRQ>
}
 8011a46:	bf00      	nop
 8011a48:	3710      	adds	r7, #16
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	46020c00 	.word	0x46020c00

08011a54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8011a60:	2300      	movs	r3, #0
 8011a62:	60fb      	str	r3, [r7, #12]

    switch (format)
 8011a64:	78fb      	ldrb	r3, [r7, #3]
 8011a66:	2b0b      	cmp	r3, #11
 8011a68:	d826      	bhi.n	8011ab8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8011a6a:	a201      	add	r2, pc, #4	; (adr r2, 8011a70 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8011a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a70:	08011aad 	.word	0x08011aad
 8011a74:	08011aa7 	.word	0x08011aa7
 8011a78:	08011aa1 	.word	0x08011aa1
 8011a7c:	08011ab9 	.word	0x08011ab9
 8011a80:	08011ab9 	.word	0x08011ab9
 8011a84:	08011ab9 	.word	0x08011ab9
 8011a88:	08011ab9 	.word	0x08011ab9
 8011a8c:	08011ab3 	.word	0x08011ab3
 8011a90:	08011ab3 	.word	0x08011ab3
 8011a94:	08011ab3 	.word	0x08011ab3
 8011a98:	08011ab3 	.word	0x08011ab3
 8011a9c:	08011ab3 	.word	0x08011ab3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	60fb      	str	r3, [r7, #12]
        break;
 8011aa4:	e00e      	b.n	8011ac4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	60fb      	str	r3, [r7, #12]
        break;
 8011aaa:	e00b      	b.n	8011ac4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8011aac:	2302      	movs	r3, #2
 8011aae:	60fb      	str	r3, [r7, #12]
        break;
 8011ab0:	e008      	b.n	8011ac4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8011ab2:	2305      	movs	r3, #5
 8011ab4:	60fb      	str	r3, [r7, #12]
        break;
 8011ab6:	e005      	b.n	8011ac4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8011ab8:	4b05      	ldr	r3, [pc, #20]	; (8011ad0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8011aba:	4a06      	ldr	r2, [pc, #24]	; (8011ad4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8011abc:	216e      	movs	r1, #110	; 0x6e
 8011abe:	4806      	ldr	r0, [pc, #24]	; (8011ad8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8011ac0:	f013 feda 	bl	8025878 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3710      	adds	r7, #16
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	080277cc 	.word	0x080277cc
 8011ad4:	080277e8 	.word	0x080277e8
 8011ad8:	08027834 	.word	0x08027834

08011adc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	60fb      	str	r3, [r7, #12]

    switch (format)
 8011aec:	78fb      	ldrb	r3, [r7, #3]
 8011aee:	2b0a      	cmp	r3, #10
 8011af0:	d821      	bhi.n	8011b36 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8011af2:	a201      	add	r2, pc, #4	; (adr r2, 8011af8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8011af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011af8:	08011b31 	.word	0x08011b31
 8011afc:	08011b2b 	.word	0x08011b2b
 8011b00:	08011b25 	.word	0x08011b25
 8011b04:	08011b37 	.word	0x08011b37
 8011b08:	08011b37 	.word	0x08011b37
 8011b0c:	08011b37 	.word	0x08011b37
 8011b10:	08011b37 	.word	0x08011b37
 8011b14:	08011b2b 	.word	0x08011b2b
 8011b18:	08011b2b 	.word	0x08011b2b
 8011b1c:	08011b2b 	.word	0x08011b2b
 8011b20:	08011b2b 	.word	0x08011b2b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011b24:	2300      	movs	r3, #0
 8011b26:	60fb      	str	r3, [r7, #12]
        break;
 8011b28:	e00b      	b.n	8011b42 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	60fb      	str	r3, [r7, #12]
        break;
 8011b2e:	e008      	b.n	8011b42 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8011b30:	2302      	movs	r3, #2
 8011b32:	60fb      	str	r3, [r7, #12]
        break;
 8011b34:	e005      	b.n	8011b42 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8011b36:	4b05      	ldr	r3, [pc, #20]	; (8011b4c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8011b38:	4a05      	ldr	r2, [pc, #20]	; (8011b50 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8011b3a:	218f      	movs	r1, #143	; 0x8f
 8011b3c:	4805      	ldr	r0, [pc, #20]	; (8011b54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8011b3e:	f013 fe9b 	bl	8025878 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8011b42:	68fb      	ldr	r3, [r7, #12]
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	080277cc 	.word	0x080277cc
 8011b50:	08027860 	.word	0x08027860
 8011b54:	08027834 	.word	0x08027834

08011b58 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8011b60:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	370c      	adds	r7, #12
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr

08011b70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8011b70:	b590      	push	{r4, r7, lr}
 8011b72:	b089      	sub	sp, #36	; 0x24
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	7f5b      	ldrb	r3, [r3, #29]
 8011b7e:	4619      	mov	r1, r3
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f7ff ff67 	bl	8011a54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011b86:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	7f9b      	ldrb	r3, [r3, #30]
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f7ff ff60 	bl	8011a54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011b94:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	7f9b      	ldrb	r3, [r3, #30]
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f7ff ff9d 	bl	8011adc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011ba2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	8b5b      	ldrh	r3, [r3, #26]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	8a9b      	ldrh	r3, [r3, #20]
 8011bae:	1ad2      	subs	r2, r2, r3
 8011bb0:	4b95      	ldr	r3, [pc, #596]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	8b5b      	ldrh	r3, [r3, #26]
 8011bb8:	461a      	mov	r2, r3
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	8a9b      	ldrh	r3, [r3, #20]
 8011bbe:	1ad2      	subs	r2, r2, r3
 8011bc0:	4b91      	ldr	r3, [pc, #580]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bc2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	8b1b      	ldrh	r3, [r3, #24]
 8011bc8:	461a      	mov	r2, r3
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	8a9b      	ldrh	r3, [r3, #20]
 8011bce:	1ad2      	subs	r2, r2, r3
 8011bd0:	4b8d      	ldr	r3, [pc, #564]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bd2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011bd4:	4a8c      	ldr	r2, [pc, #560]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	8adb      	ldrh	r3, [r3, #22]
 8011bde:	461a      	mov	r2, r3
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	8a9b      	ldrh	r3, [r3, #20]
 8011be4:	041b      	lsls	r3, r3, #16
 8011be6:	431a      	orrs	r2, r3
 8011be8:	4b87      	ldr	r3, [pc, #540]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	691a      	ldr	r2, [r3, #16]
 8011bf0:	4b85      	ldr	r3, [pc, #532]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	685a      	ldr	r2, [r3, #4]
 8011bf8:	4b83      	ldr	r3, [pc, #524]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011bfa:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c04:	d037      	beq.n	8011c76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8011c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c0a:	f200 80e8 	bhi.w	8011dde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8011c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c12:	d014      	beq.n	8011c3e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8011c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c18:	f200 80e1 	bhi.w	8011dde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8011c1c:	2b80      	cmp	r3, #128	; 0x80
 8011c1e:	d05b      	beq.n	8011cd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8011c20:	2b80      	cmp	r3, #128	; 0x80
 8011c22:	f200 80dc 	bhi.w	8011dde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8011c26:	2b40      	cmp	r3, #64	; 0x40
 8011c28:	f000 80c4 	beq.w	8011db4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8011c2c:	2b40      	cmp	r3, #64	; 0x40
 8011c2e:	f200 80d6 	bhi.w	8011dde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8011c32:	2b04      	cmp	r3, #4
 8011c34:	d03b      	beq.n	8011cae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8011c36:	2b20      	cmp	r3, #32
 8011c38:	f000 80bc 	beq.w	8011db4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8011c3c:	e0cf      	b.n	8011dde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	7f1b      	ldrb	r3, [r3, #28]
 8011c42:	061b      	lsls	r3, r3, #24
 8011c44:	4a70      	ldr	r2, [pc, #448]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c4a:	f043 030a 	orr.w	r3, r3, #10
 8011c4e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	330c      	adds	r3, #12
 8011c54:	4c6c      	ldr	r4, [pc, #432]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7fd fa14 	bl	800f084 <_ZNK8touchgfx9colortypecvmEv>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c60:	4a69      	ldr	r2, [pc, #420]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	691a      	ldr	r2, [r3, #16]
 8011c6a:	4b67      	ldr	r3, [pc, #412]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c6c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011c6e:	4b66      	ldr	r3, [pc, #408]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c70:	4a66      	ldr	r2, [pc, #408]	; (8011e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011c72:	601a      	str	r2, [r3, #0]
        break;
 8011c74:	e0d9      	b.n	8011e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	7f1b      	ldrb	r3, [r3, #28]
 8011c7a:	061b      	lsls	r3, r3, #24
 8011c7c:	4a62      	ldr	r2, [pc, #392]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c82:	f043 0309 	orr.w	r3, r3, #9
 8011c86:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	330c      	adds	r3, #12
 8011c8c:	4c5e      	ldr	r4, [pc, #376]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fd f9f8 	bl	800f084 <_ZNK8touchgfx9colortypecvmEv>
 8011c94:	4603      	mov	r3, r0
 8011c96:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c98:	4a5b      	ldr	r2, [pc, #364]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	691a      	ldr	r2, [r3, #16]
 8011ca2:	4b59      	ldr	r3, [pc, #356]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011ca4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011ca6:	4b58      	ldr	r3, [pc, #352]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011ca8:	4a58      	ldr	r2, [pc, #352]	; (8011e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011caa:	601a      	str	r2, [r3, #0]
        break;
 8011cac:	e0bd      	b.n	8011e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	7f1b      	ldrb	r3, [r3, #28]
 8011cb2:	061b      	lsls	r3, r3, #24
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	69bb      	ldr	r3, [r7, #24]
 8011cb8:	4313      	orrs	r3, r2
 8011cba:	4a53      	ldr	r2, [pc, #332]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011cc0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011cc2:	4a51      	ldr	r2, [pc, #324]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	691a      	ldr	r2, [r3, #16]
 8011ccc:	4b4e      	ldr	r3, [pc, #312]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cce:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011cd0:	4b4d      	ldr	r3, [pc, #308]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cd2:	4a4e      	ldr	r2, [pc, #312]	; (8011e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011cd4:	601a      	str	r2, [r3, #0]
        break;
 8011cd6:	e0a8      	b.n	8011e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8011cd8:	2301      	movs	r3, #1
 8011cda:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	689b      	ldr	r3, [r3, #8]
 8011ce0:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	1d1a      	adds	r2, r3, #4
 8011ce6:	4b48      	ldr	r3, [pc, #288]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011ce8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	7f1b      	ldrb	r3, [r3, #28]
 8011cee:	061b      	lsls	r3, r3, #24
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	69bb      	ldr	r3, [r7, #24]
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	4a44      	ldr	r2, [pc, #272]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011cfc:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011cfe:	4a42      	ldr	r2, [pc, #264]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	691a      	ldr	r2, [r3, #16]
 8011d08:	4b3f      	ldr	r3, [pc, #252]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d0a:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	881b      	ldrh	r3, [r3, #0]
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d002      	beq.n	8011d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d00f      	beq.n	8011d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8011d1a:	e024      	b.n	8011d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011d1c:	4b3a      	ldr	r3, [pc, #232]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d1e:	69db      	ldr	r3, [r3, #28]
 8011d20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011d24:	f023 0310 	bic.w	r3, r3, #16
 8011d28:	68fa      	ldr	r2, [r7, #12]
 8011d2a:	8852      	ldrh	r2, [r2, #2]
 8011d2c:	3a01      	subs	r2, #1
 8011d2e:	0212      	lsls	r2, r2, #8
 8011d30:	4611      	mov	r1, r2
 8011d32:	4a35      	ldr	r2, [pc, #212]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d34:	430b      	orrs	r3, r1
 8011d36:	61d3      	str	r3, [r2, #28]
                break;
 8011d38:	e01c      	b.n	8011d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	7f1b      	ldrb	r3, [r3, #28]
 8011d3e:	2bff      	cmp	r3, #255	; 0xff
 8011d40:	d101      	bne.n	8011d46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                    blend = false;
 8011d42:	2300      	movs	r3, #0
 8011d44:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011d46:	4b30      	ldr	r3, [pc, #192]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d48:	69db      	ldr	r3, [r3, #28]
 8011d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011d4e:	f023 0310 	bic.w	r3, r3, #16
 8011d52:	68fa      	ldr	r2, [r7, #12]
 8011d54:	8852      	ldrh	r2, [r2, #2]
 8011d56:	3a01      	subs	r2, #1
 8011d58:	0212      	lsls	r2, r2, #8
 8011d5a:	4313      	orrs	r3, r2
 8011d5c:	4a2a      	ldr	r2, [pc, #168]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d5e:	f043 0310 	orr.w	r3, r3, #16
 8011d62:	61d3      	str	r3, [r2, #28]
                break;
 8011d64:	e006      	b.n	8011d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8011d66:	4b2a      	ldr	r3, [pc, #168]	; (8011e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8011d68:	4a2a      	ldr	r2, [pc, #168]	; (8011e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8011d6a:	f240 1119 	movw	r1, #281	; 0x119
 8011d6e:	482a      	ldr	r0, [pc, #168]	; (8011e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8011d70:	f013 fd82 	bl	8025878 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8011d74:	4b24      	ldr	r3, [pc, #144]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d76:	69db      	ldr	r3, [r3, #28]
 8011d78:	4a23      	ldr	r2, [pc, #140]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d7a:	f043 0320 	orr.w	r3, r3, #32
 8011d7e:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8011d80:	4b21      	ldr	r3, [pc, #132]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d82:	69db      	ldr	r3, [r3, #28]
 8011d84:	f003 0320 	and.w	r3, r3, #32
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	bf14      	ite	ne
 8011d8c:	2301      	movne	r3, #1
 8011d8e:	2300      	moveq	r3, #0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d000      	beq.n	8011d98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8011d96:	e7f3      	b.n	8011d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8011d98:	4b1b      	ldr	r3, [pc, #108]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011d9a:	2210      	movs	r2, #16
 8011d9c:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8011d9e:	7ffb      	ldrb	r3, [r7, #31]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d003      	beq.n	8011dac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011da4:	4b18      	ldr	r3, [pc, #96]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011da6:	4a19      	ldr	r2, [pc, #100]	; (8011e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011da8:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8011daa:	e03e      	b.n	8011e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011dac:	4b16      	ldr	r3, [pc, #88]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011dae:	4a1b      	ldr	r2, [pc, #108]	; (8011e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8011db0:	601a      	str	r2, [r3, #0]
        break;
 8011db2:	e03a      	b.n	8011e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	7f1b      	ldrb	r3, [r3, #28]
 8011db8:	061b      	lsls	r3, r3, #24
 8011dba:	461a      	mov	r2, r3
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	4313      	orrs	r3, r2
 8011dc0:	4a11      	ldr	r2, [pc, #68]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011dc6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011dc8:	4a0f      	ldr	r2, [pc, #60]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	691a      	ldr	r2, [r3, #16]
 8011dd2:	4b0d      	ldr	r3, [pc, #52]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011dd4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011dd6:	4b0c      	ldr	r3, [pc, #48]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011dd8:	4a0c      	ldr	r2, [pc, #48]	; (8011e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011dda:	601a      	str	r2, [r3, #0]
        break;
 8011ddc:	e025      	b.n	8011e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	7f1b      	ldrb	r3, [r3, #28]
 8011de2:	061b      	lsls	r3, r3, #24
 8011de4:	461a      	mov	r2, r3
 8011de6:	69bb      	ldr	r3, [r7, #24]
 8011de8:	4313      	orrs	r3, r2
 8011dea:	4a07      	ldr	r2, [pc, #28]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011df0:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	7f5a      	ldrb	r2, [r3, #29]
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	7f9b      	ldrb	r3, [r3, #30]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d010      	beq.n	8011e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011dfe:	4b02      	ldr	r3, [pc, #8]	; (8011e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8011e00:	4a06      	ldr	r2, [pc, #24]	; (8011e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8011e02:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8011e04:	e010      	b.n	8011e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8011e06:	bf00      	nop
 8011e08:	4002b000 	.word	0x4002b000
 8011e0c:	00020201 	.word	0x00020201
 8011e10:	080278ac 	.word	0x080278ac
 8011e14:	080278c8 	.word	0x080278c8
 8011e18:	08027834 	.word	0x08027834
 8011e1c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8011e20:	4b04      	ldr	r3, [pc, #16]	; (8011e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8011e22:	f240 2201 	movw	r2, #513	; 0x201
 8011e26:	601a      	str	r2, [r3, #0]
        break;
 8011e28:	bf00      	nop
    }
}
 8011e2a:	bf00      	nop
 8011e2c:	3724      	adds	r7, #36	; 0x24
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd90      	pop	{r4, r7, pc}
 8011e32:	bf00      	nop
 8011e34:	4002b000 	.word	0x4002b000

08011e38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8011e38:	b590      	push	{r4, r7, lr}
 8011e3a:	b085      	sub	sp, #20
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	7f9b      	ldrb	r3, [r3, #30]
 8011e46:	4619      	mov	r1, r3
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f7ff fe47 	bl	8011adc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011e4e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011e50:	4a3b      	ldr	r2, [pc, #236]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	8adb      	ldrh	r3, [r3, #22]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	8a9b      	ldrh	r3, [r3, #20]
 8011e60:	041b      	lsls	r3, r3, #16
 8011e62:	431a      	orrs	r2, r3
 8011e64:	4b36      	ldr	r3, [pc, #216]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	691a      	ldr	r2, [r3, #16]
 8011e6c:	4b34      	ldr	r3, [pc, #208]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	8b5b      	ldrh	r3, [r3, #26]
 8011e74:	461a      	mov	r2, r3
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	8a9b      	ldrh	r3, [r3, #20]
 8011e7a:	1ad2      	subs	r2, r2, r3
 8011e7c:	4b30      	ldr	r3, [pc, #192]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e7e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	2b08      	cmp	r3, #8
 8011e86:	d12f      	bne.n	8011ee8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	8b5b      	ldrh	r3, [r3, #26]
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	8a9b      	ldrh	r3, [r3, #20]
 8011e92:	1ad2      	subs	r2, r2, r3
 8011e94:	4b2a      	ldr	r3, [pc, #168]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011e96:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	8b5b      	ldrh	r3, [r3, #26]
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	8a9b      	ldrh	r3, [r3, #20]
 8011ea2:	1ad2      	subs	r2, r2, r3
 8011ea4:	4b26      	ldr	r3, [pc, #152]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011ea6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011ea8:	4a25      	ldr	r2, [pc, #148]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	7f1b      	ldrb	r3, [r3, #28]
 8011eb2:	061b      	lsls	r3, r3, #24
 8011eb4:	4a22      	ldr	r2, [pc, #136]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011eba:	f043 0309 	orr.w	r3, r3, #9
 8011ebe:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	330c      	adds	r3, #12
 8011ec4:	4c1e      	ldr	r4, [pc, #120]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7fd f8dc 	bl	800f084 <_ZNK8touchgfx9colortypecvmEv>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	691a      	ldr	r2, [r3, #16]
 8011ed4:	4b1a      	ldr	r3, [pc, #104]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011ed6:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	691a      	ldr	r2, [r3, #16]
 8011edc:	4b18      	ldr	r3, [pc, #96]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011ede:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011ee0:	4b17      	ldr	r3, [pc, #92]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011ee2:	4a18      	ldr	r2, [pc, #96]	; (8011f44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8011ee4:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8011ee6:	e027      	b.n	8011f38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8011ee8:	4a15      	ldr	r2, [pc, #84]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8011eee:	4b14      	ldr	r3, [pc, #80]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	330c      	adds	r3, #12
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7fd f8c3 	bl	800f084 <_ZNK8touchgfx9colortypecvmEv>
 8011efe:	4603      	mov	r3, r0
 8011f00:	0a1b      	lsrs	r3, r3, #8
 8011f02:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	330c      	adds	r3, #12
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7fd f8ba 	bl	800f084 <_ZNK8touchgfx9colortypecvmEv>
 8011f10:	4603      	mov	r3, r0
 8011f12:	095b      	lsrs	r3, r3, #5
 8011f14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8011f18:	431c      	orrs	r4, r3
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	330c      	adds	r3, #12
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fd f8b0 	bl	800f084 <_ZNK8touchgfx9colortypecvmEv>
 8011f24:	4603      	mov	r3, r0
 8011f26:	08db      	lsrs	r3, r3, #3
 8011f28:	f003 031f 	and.w	r3, r3, #31
 8011f2c:	4a04      	ldr	r2, [pc, #16]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011f2e:	4323      	orrs	r3, r4
 8011f30:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8011f32:	4b03      	ldr	r3, [pc, #12]	; (8011f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011f34:	4a04      	ldr	r2, [pc, #16]	; (8011f48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8011f36:	601a      	str	r2, [r3, #0]
}
 8011f38:	bf00      	nop
 8011f3a:	3714      	adds	r7, #20
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd90      	pop	{r4, r7, pc}
 8011f40:	4002b000 	.word	0x4002b000
 8011f44:	00020201 	.word	0x00020201
 8011f48:	00030201 	.word	0x00030201

08011f4c <_ZN8touchgfx5paint6rgb5658tearDownEv>:
    * @fn void tearDown();
    *
    * @brief Waits until previous DMA drawing operation has finished
    */
    void tearDown()
    {
 8011f4c:	b480      	push	{r7}
 8011f4e:	af00      	add	r7, sp, #0
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8011f50:	4b09      	ldr	r3, [pc, #36]	; (8011f78 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	f003 0301 	and.w	r3, r3, #1
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	bf14      	ite	ne
 8011f5c:	2301      	movne	r3, #1
 8011f5e:	2300      	moveq	r3, #0
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d000      	beq.n	8011f68 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x1c>
 8011f66:	e7f3      	b.n	8011f50 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x4>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8011f68:	4b03      	ldr	r3, [pc, #12]	; (8011f78 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 8011f6a:	2223      	movs	r2, #35	; 0x23
 8011f6c:	609a      	str	r2, [r3, #8]
    }
 8011f6e:	bf00      	nop
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr
 8011f78:	4002b000 	.word	0x4002b000

08011f7c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
    *
    * @brief Renders Canvas Widget chunks using DMA.
    * This functions will not generate an interrupt, and will not affect the DMA queue.
    */
    void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
    {
 8011f7c:	b480      	push	{r7}
 8011f7e:	b085      	sub	sp, #20
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
 8011f88:	70fb      	strb	r3, [r7, #3]
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8011f8a:	4b22      	ldr	r3, [pc, #136]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f003 0301 	and.w	r3, r3, #1
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	bf14      	ite	ne
 8011f96:	2301      	movne	r3, #1
 8011f98:	2300      	moveq	r3, #0
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d000      	beq.n	8011fa2 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x26>
 8011fa0:	e7f3      	b.n	8011f8a <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xe>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8011fa2:	4b1c      	ldr	r3, [pc, #112]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011fa4:	2223      	movs	r2, #35	; 0x23
 8011fa6:	609a      	str	r2, [r3, #8]

        /* DMA2D OPFCCR register configuration */
        WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8011fa8:	4b1a      	ldr	r3, [pc, #104]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011faa:	2202      	movs	r2, #2
 8011fac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Configure DMA2D data size */
        WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	041b      	lsls	r3, r3, #16
 8011fb2:	4a18      	ldr	r2, [pc, #96]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011fb4:	f043 0301 	orr.w	r3, r3, #1
 8011fb8:	6453      	str	r3, [r2, #68]	; 0x44

        /* Configure DMA2D destination address */
        WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8011fba:	4a16      	ldr	r2, [pc, #88]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	63d3      	str	r3, [r2, #60]	; 0x3c

        if (alpha < 0xFF)
 8011fc0:	78fb      	ldrb	r3, [r7, #3]
 8011fc2:	2bff      	cmp	r3, #255	; 0xff
 8011fc4:	d017      	beq.n	8011ff6 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
        {
            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011fc6:	4b13      	ldr	r3, [pc, #76]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011fc8:	2202      	movs	r2, #2
 8011fca:	625a      	str	r2, [r3, #36]	; 0x24

            /* Write DMA2D FGPFCCR register */
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8011fcc:	78fb      	ldrb	r3, [r7, #3]
 8011fce:	061b      	lsls	r3, r3, #24
 8011fd0:	4a10      	ldr	r2, [pc, #64]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011fd6:	f043 0309 	orr.w	r3, r3, #9
 8011fda:	61d3      	str	r3, [r2, #28]

            /* DMA2D FGCOLR register configuration */
            WRITE_REG(DMA2D->FGCOLR, color);
 8011fdc:	4a0d      	ldr	r2, [pc, #52]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6213      	str	r3, [r2, #32]

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8011fe2:	4a0c      	ldr	r2, [pc, #48]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	6153      	str	r3, [r2, #20]

            /* Configure DMA2D source address */
            WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8011fe8:	4a0a      	ldr	r2, [pc, #40]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	60d3      	str	r3, [r2, #12]

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011fee:	4b09      	ldr	r3, [pc, #36]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011ff0:	4a09      	ldr	r2, [pc, #36]	; (8012018 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 8011ff2:	601a      	str	r2, [r3, #0]
            WRITE_REG(DMA2D->OCOLR, color565);

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
        }
    }
 8011ff4:	e008      	b.n	8012008 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8011ff6:	4b07      	ldr	r3, [pc, #28]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011ff8:	2202      	movs	r2, #2
 8011ffa:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->OCOLR, color565);
 8011ffc:	4a05      	ldr	r2, [pc, #20]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011ffe:	69bb      	ldr	r3, [r7, #24]
 8012000:	6393      	str	r3, [r2, #56]	; 0x38
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8012002:	4b04      	ldr	r3, [pc, #16]	; (8012014 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012004:	4a05      	ldr	r2, [pc, #20]	; (801201c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 8012006:	601a      	str	r2, [r3, #0]
    }
 8012008:	bf00      	nop
 801200a:	3714      	adds	r7, #20
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr
 8012014:	4002b000 	.word	0x4002b000
 8012018:	00020001 	.word	0x00020001
 801201c:	00030001 	.word	0x00030001

08012020 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	4a05      	ldr	r2, [pc, #20]	; (8012040 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	601a      	str	r2, [r3, #0]
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	f7ff fbbd 	bl	80117b0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	4618      	mov	r0, r3
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	080285c8 	.word	0x080285c8

08012044 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f7ff ffe7 	bl	8012020 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012052:	2114      	movs	r1, #20
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f013 fbe3 	bl	8025820 <_ZdlPvj>
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	4618      	mov	r0, r3
 801205e:	3708      	adds	r7, #8
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8012064:	b480      	push	{r7}
 8012066:	b083      	sub	sp, #12
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 801206c:	4a04      	ldr	r2, [pc, #16]	; (8012080 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6013      	str	r3, [r2, #0]
    }
 8012072:	bf00      	nop
 8012074:	370c      	adds	r7, #12
 8012076:	46bd      	mov	sp, r7
 8012078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207c:	4770      	bx	lr
 801207e:	bf00      	nop
 8012080:	2004e17c 	.word	0x2004e17c

08012084 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8012084:	b480      	push	{r7}
 8012086:	b085      	sub	sp, #20
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
 8012090:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8012092:	4a0b      	ldr	r2, [pc, #44]	; (80120c0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	601a      	str	r2, [r3, #0]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	68ba      	ldr	r2, [r7, #8]
 801209c:	605a      	str	r2, [r3, #4]
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	609a      	str	r2, [r3, #8]
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	683a      	ldr	r2, [r7, #0]
 80120a8:	60da      	str	r2, [r3, #12]
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	69ba      	ldr	r2, [r7, #24]
 80120ae:	611a      	str	r2, [r3, #16]
    {
    }
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	4618      	mov	r0, r3
 80120b4:	3714      	adds	r7, #20
 80120b6:	46bd      	mov	sp, r7
 80120b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop
 80120c0:	080282e8 	.word	0x080282e8

080120c4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
    {
 80120cc:	4a04      	ldr	r2, [pc, #16]	; (80120e0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	601a      	str	r2, [r3, #0]
    }
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4618      	mov	r0, r3
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr
 80120e0:	080282e8 	.word	0x080282e8

080120e4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
    }
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f7ff ffe9 	bl	80120c4 <_ZN8touchgfx7MVPHeapD1Ev>
 80120f2:	2114      	movs	r1, #20
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f013 fb93 	bl	8025820 <_ZdlPvj>
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	4618      	mov	r0, r3
 80120fe:	3708      	adds	r7, #8
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}

08012104 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
    {
 801210c:	4a04      	ldr	r2, [pc, #16]	; (8012120 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	601a      	str	r2, [r3, #0]
    }
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4618      	mov	r0, r3
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr
 8012120:	080289c4 	.word	0x080289c4

08012124 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
    }
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f7ff ffe9 	bl	8012104 <_ZN8touchgfx3LCDD1Ev>
 8012132:	2108      	movs	r1, #8
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f013 fb73 	bl	8025820 <_ZdlPvj>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	4618      	mov	r0, r3
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}

08012144 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	801a      	strh	r2, [r3, #0]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2200      	movs	r2, #0
 8012156:	805a      	strh	r2, [r3, #2]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	809a      	strh	r2, [r3, #4]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2200      	movs	r2, #0
 8012162:	80da      	strh	r2, [r3, #6]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2200      	movs	r2, #0
 8012168:	811a      	strh	r2, [r3, #8]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2200      	movs	r2, #0
 801216e:	815a      	strh	r2, [r3, #10]
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2200      	movs	r2, #0
 8012174:	819a      	strh	r2, [r3, #12]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2200      	movs	r2, #0
 801217a:	739a      	strb	r2, [r3, #14]
        {
        }
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	4618      	mov	r0, r3
 8012180:	370c      	adds	r7, #12
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr

0801218a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801218a:	b580      	push	{r7, lr}
 801218c:	b082      	sub	sp, #8
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	4618      	mov	r0, r3
 8012196:	f7ff ffd5 	bl	8012144 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2200      	movs	r2, #0
 801219e:	611a      	str	r2, [r3, #16]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	829a      	strh	r2, [r3, #20]
    {
    }
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4618      	mov	r0, r3
 80121aa:	3708      	adds	r7, #8
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
 80121bc:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80121be:	4a55      	ldr	r2, [pc, #340]	; (8012314 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	601a      	str	r2, [r3, #0]
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	68ba      	ldr	r2, [r7, #8]
 80121c8:	605a      	str	r2, [r3, #4]
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	687a      	ldr	r2, [r7, #4]
 80121ce:	609a      	str	r2, [r3, #8]
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	683a      	ldr	r2, [r7, #0]
 80121d4:	60da      	str	r2, [r3, #12]
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2200      	movs	r2, #0
 80121da:	611a      	str	r2, [r3, #16]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2200      	movs	r2, #0
 80121e0:	615a      	str	r2, [r3, #20]
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2200      	movs	r2, #0
 80121e6:	619a      	str	r2, [r3, #24]
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	331c      	adds	r3, #28
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7ff ffcc 	bl	801218a <_ZN8touchgfx8GesturesC1Ev>
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2200      	movs	r2, #0
 80121f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2200      	movs	r2, #0
 80121fe:	639a      	str	r2, [r3, #56]	; 0x38
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2200      	movs	r2, #0
 8012204:	63da      	str	r2, [r3, #60]	; 0x3c
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2200      	movs	r2, #0
 801220a:	641a      	str	r2, [r3, #64]	; 0x40
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2200      	movs	r2, #0
 8012210:	645a      	str	r2, [r3, #68]	; 0x44
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2200      	movs	r2, #0
 8012216:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2201      	movs	r2, #1
 801221e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	2200      	movs	r2, #0
 8012226:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2200      	movs	r2, #0
 801222e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2200      	movs	r2, #0
 8012236:	64da      	str	r2, [r3, #76]	; 0x4c
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	3350      	adds	r3, #80	; 0x50
 801223c:	4618      	mov	r0, r3
 801223e:	f7fb f81f 	bl	800d280 <_ZN8touchgfx4RectC1Ev>
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2200      	movs	r2, #0
 8012246:	659a      	str	r2, [r3, #88]	; 0x58
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2200      	movs	r2, #0
 801224c:	65da      	str	r2, [r3, #92]	; 0x5c
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	2200      	movs	r2, #0
 8012252:	661a      	str	r2, [r3, #96]	; 0x60
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	2201      	movs	r2, #1
 8012258:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2200      	movs	r2, #0
 8012260:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2200      	movs	r2, #0
 8012268:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2201      	movs	r2, #1
 8012270:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2200      	movs	r2, #0
 8012278:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	2200      	movs	r2, #0
 8012280:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2200      	movs	r2, #0
 8012288:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2200      	movs	r2, #0
 8012290:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	2200      	movs	r2, #0
 8012298:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2200      	movs	r2, #0
 80122a0:	671a      	str	r2, [r3, #112]	; 0x70
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2200      	movs	r2, #0
 80122a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2200      	movs	r2, #0
 80122ae:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2200      	movs	r2, #0
 80122b6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2201      	movs	r2, #1
 80122be:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2201      	movs	r2, #1
 80122c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80122ca:	4a13      	ldr	r2, [pc, #76]	; (8012318 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80122d0:	4a12      	ldr	r2, [pc, #72]	; (801231c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80122d2:	8b3b      	ldrh	r3, [r7, #24]
 80122d4:	8013      	strh	r3, [r2, #0]
 80122d6:	4b11      	ldr	r3, [pc, #68]	; (801231c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80122d8:	881a      	ldrh	r2, [r3, #0]
 80122da:	4b11      	ldr	r3, [pc, #68]	; (8012320 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80122dc:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80122de:	4a11      	ldr	r2, [pc, #68]	; (8012324 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80122e0:	8bbb      	ldrh	r3, [r7, #28]
 80122e2:	8013      	strh	r3, [r2, #0]
 80122e4:	4b0f      	ldr	r3, [pc, #60]	; (8012324 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80122e6:	881a      	ldrh	r2, [r3, #0]
 80122e8:	4b0f      	ldr	r3, [pc, #60]	; (8012328 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80122ea:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80122ec:	4b0f      	ldr	r3, [pc, #60]	; (801232c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80122ee:	2200      	movs	r2, #0
 80122f0:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80122f2:	8b3a      	ldrh	r2, [r7, #24]
 80122f4:	8bbb      	ldrh	r3, [r7, #28]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	bf34      	ite	cc
 80122fa:	2301      	movcc	r3, #1
 80122fc:	2300      	movcs	r3, #0
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	461a      	mov	r2, r3
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	4618      	mov	r0, r3
 801230c:	3710      	adds	r7, #16
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	080284a0 	.word	0x080284a0
 8012318:	2004e118 	.word	0x2004e118
 801231c:	2004e10c 	.word	0x2004e10c
 8012320:	2004e112 	.word	0x2004e112
 8012324:	2004e10e 	.word	0x2004e10e
 8012328:	2004e114 	.word	0x2004e114
 801232c:	2004e110 	.word	0x2004e110

08012330 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	4618      	mov	r0, r3
 801233e:	f7fb fc91 	bl	800dc64 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8012342:	bf00      	nop
 8012344:	3708      	adds	r7, #8
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
	...

0801234c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 801234c:	b580      	push	{r7, lr}
 801234e:	b086      	sub	sp, #24
 8012350:	af02      	add	r7, sp, #8
 8012352:	60f8      	str	r0, [r7, #12]
 8012354:	60b9      	str	r1, [r7, #8]
 8012356:	607a      	str	r2, [r7, #4]
 8012358:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801235a:	68f8      	ldr	r0, [r7, #12]
 801235c:	69bb      	ldr	r3, [r7, #24]
 801235e:	9300      	str	r3, [sp, #0]
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	687a      	ldr	r2, [r7, #4]
 8012364:	68b9      	ldr	r1, [r7, #8]
 8012366:	f7ff fe8d 	bl	8012084 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801236a:	4a04      	ldr	r2, [pc, #16]	; (801237c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	601a      	str	r2, [r3, #0]
    {

    }
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	4618      	mov	r0, r3
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	080282d4 	.word	0x080282d4

08012380 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012380:	b580      	push	{r7, lr}
 8012382:	af00      	add	r7, sp, #0
 8012384:	4801      	ldr	r0, [pc, #4]	; (801238c <__tcf_0+0xc>)
 8012386:	f000 f963 	bl	8012650 <_ZN12FrontendHeapD1Ev>
 801238a:	bd80      	pop	{r7, pc}
 801238c:	2004c044 	.word	0x2004c044

08012390 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012390:	b580      	push	{r7, lr}
 8012392:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012394:	4b11      	ldr	r3, [pc, #68]	; (80123dc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012396:	e8d3 3f8f 	ldab	r3, [r3]
 801239a:	b2db      	uxtb	r3, r3
 801239c:	f003 0301 	and.w	r3, r3, #1
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	bf0c      	ite	eq
 80123a4:	2301      	moveq	r3, #1
 80123a6:	2300      	movne	r3, #0
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d013      	beq.n	80123d6 <_ZN12FrontendHeap11getInstanceEv+0x46>
 80123ae:	480b      	ldr	r0, [pc, #44]	; (80123dc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80123b0:	f013 fa38 	bl	8025824 <__cxa_guard_acquire>
 80123b4:	4603      	mov	r3, r0
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	bf14      	ite	ne
 80123ba:	2301      	movne	r3, #1
 80123bc:	2300      	moveq	r3, #0
 80123be:	b2db      	uxtb	r3, r3
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d008      	beq.n	80123d6 <_ZN12FrontendHeap11getInstanceEv+0x46>
 80123c4:	4806      	ldr	r0, [pc, #24]	; (80123e0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80123c6:	f000 f867 	bl	8012498 <_ZN12FrontendHeapC1Ev>
 80123ca:	4806      	ldr	r0, [pc, #24]	; (80123e4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80123cc:	f013 fa72 	bl	80258b4 <atexit>
 80123d0:	4802      	ldr	r0, [pc, #8]	; (80123dc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80123d2:	f013 fa33 	bl	802583c <__cxa_guard_release>
        return instance;
 80123d6:	4b02      	ldr	r3, [pc, #8]	; (80123e0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 80123d8:	4618      	mov	r0, r3
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	2004d26c 	.word	0x2004d26c
 80123e0:	2004c044 	.word	0x2004c044
 80123e4:	08012381 	.word	0x08012381

080123e8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	4a05      	ldr	r2, [pc, #20]	; (8012408 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	601a      	str	r2, [r3, #0]
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7ff fe63 	bl	80120c4 <_ZN8touchgfx7MVPHeapD1Ev>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	4618      	mov	r0, r3
 8012402:	3708      	adds	r7, #8
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	080282d4 	.word	0x080282d4

0801240c <_ZN16FrontendHeapBaseD0Ev>:
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f7ff ffe7 	bl	80123e8 <_ZN16FrontendHeapBaseD1Ev>
 801241a:	2114      	movs	r1, #20
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f013 f9ff 	bl	8025820 <_ZdlPvj>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	4618      	mov	r0, r3
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	4618      	mov	r0, r3
 8012438:	f000 fc0c 	bl	8012c54 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801243c:	4a03      	ldr	r2, [pc, #12]	; (801244c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4618      	mov	r0, r3
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	080282a0 	.word	0x080282a0

08012450 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	4618      	mov	r0, r3
 801245c:	f000 fbfa 	bl	8012c54 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012460:	4a03      	ldr	r2, [pc, #12]	; (8012470 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	601a      	str	r2, [r3, #0]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	4618      	mov	r0, r3
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	0802826c 	.word	0x0802826c

08012474 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	4618      	mov	r0, r3
 8012480:	f000 fbe8 	bl	8012c54 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012484:	4a03      	ldr	r2, [pc, #12]	; (8012494 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	601a      	str	r2, [r3, #0]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	4618      	mov	r0, r3
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}
 8012494:	08028238 	.word	0x08028238

08012498 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012498:	b590      	push	{r4, r7, lr}
 801249a:	b085      	sub	sp, #20
 801249c:	af02      	add	r7, sp, #8
 801249e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f103 0114 	add.w	r1, r3, #20
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f503 5283 	add.w	r2, r3, #4192	; 0x1060
 80124b4:	3210      	adds	r2, #16
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80124bc:	3310      	adds	r3, #16
                     app(model, *this)
 80124be:	9300      	str	r3, [sp, #0]
 80124c0:	4613      	mov	r3, r2
 80124c2:	4622      	mov	r2, r4
 80124c4:	f7ff ff42 	bl	801234c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80124c8:	4a1a      	ldr	r2, [pc, #104]	; (8012534 <_ZN12FrontendHeapC1Ev+0x9c>)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	601a      	str	r2, [r3, #0]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	3314      	adds	r3, #20
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7ff ffaa 	bl	801242c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	332c      	adds	r3, #44	; 0x2c
 80124dc:	4618      	mov	r0, r3
 80124de:	f7ff ffb7 	bl	8012450 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80124e8:	3310      	adds	r3, #16
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7ff ffc2 	bl	8012474 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80124f6:	330c      	adds	r3, #12
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fe fa43 	bl	8010984 <_ZN5ModelC1Ev>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012504:	3310      	adds	r3, #16
 8012506:	687a      	ldr	r2, [r7, #4]
 8012508:	f502 5186 	add.w	r1, r2, #4288	; 0x10c0
 801250c:	310c      	adds	r1, #12
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	4618      	mov	r0, r3
 8012512:	f7fe fa21 	bl	8010958 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801251e:	3310      	adds	r3, #16
 8012520:	4619      	mov	r1, r3
 8012522:	4610      	mov	r0, r2
 8012524:	f7ff ff04 	bl	8012330 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	4618      	mov	r0, r3
 801252c:	370c      	adds	r7, #12
 801252e:	46bd      	mov	sp, r7
 8012530:	bd90      	pop	{r4, r7, pc}
 8012532:	bf00      	nop
 8012534:	08028224 	.word	0x08028224

08012538 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8012538:	b580      	push	{r7, lr}
 801253a:	b086      	sub	sp, #24
 801253c:	af02      	add	r7, sp, #8
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
 8012544:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	8bbb      	ldrh	r3, [r7, #28]
 801254a:	9301      	str	r3, [sp, #4]
 801254c:	8b3b      	ldrh	r3, [r7, #24]
 801254e:	9300      	str	r3, [sp, #0]
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	68b9      	ldr	r1, [r7, #8]
 8012556:	f7ff fe2b 	bl	80121b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801255a:	4a04      	ldr	r2, [pc, #16]	; (801256c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	601a      	str	r2, [r3, #0]
    }
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	4618      	mov	r0, r3
 8012564:	3710      	adds	r7, #16
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	080282f8 	.word	0x080282f8

08012570 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8012570:	b580      	push	{r7, lr}
 8012572:	b086      	sub	sp, #24
 8012574:	af02      	add	r7, sp, #8
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
 801257c:	603b      	str	r3, [r7, #0]
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	8bbb      	ldrh	r3, [r7, #28]
 8012582:	9301      	str	r3, [sp, #4]
 8012584:	8b3b      	ldrh	r3, [r7, #24]
 8012586:	9300      	str	r3, [sp, #0]
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	687a      	ldr	r2, [r7, #4]
 801258c:	68b9      	ldr	r1, [r7, #8]
 801258e:	f7ff ffd3 	bl	8012538 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012592:	4a04      	ldr	r2, [pc, #16]	; (80125a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	601a      	str	r2, [r3, #0]
    }
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	4618      	mov	r0, r3
 801259c:	3710      	adds	r7, #16
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	080280d4 	.word	0x080280d4

080125a8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	4a04      	ldr	r2, [pc, #16]	; (80125c4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	601a      	str	r2, [r3, #0]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4618      	mov	r0, r3
 80125ba:	370c      	adds	r7, #12
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr
 80125c4:	080280bc 	.word	0x080280bc

080125c8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7ff ffe8 	bl	80125a8 <_ZN8touchgfx15TouchControllerC1Ev>
 80125d8:	4a03      	ldr	r2, [pc, #12]	; (80125e8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	601a      	str	r2, [r3, #0]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4618      	mov	r0, r3
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	080280a4 	.word	0x080280a4

080125ec <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 80125ec:	b590      	push	{r4, r7, lr}
 80125ee:	b085      	sub	sp, #20
 80125f0:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80125f2:	f7fd ffb3 	bl	801055c <_ZN14BitmapDatabase11getInstanceEv>
 80125f6:	4604      	mov	r4, r0
 80125f8:	f7fd ffba 	bl	8010570 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80125fc:	4603      	mov	r3, r0
 80125fe:	4619      	mov	r1, r3
 8012600:	2300      	movs	r3, #0
 8012602:	9300      	str	r3, [sp, #0]
 8012604:	2300      	movs	r3, #0
 8012606:	2200      	movs	r2, #0
 8012608:	4620      	mov	r0, r4
 801260a:	f007 f835 	bl	8019678 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801260e:	4809      	ldr	r0, [pc, #36]	; (8012634 <touchgfx_init+0x48>)
 8012610:	f7ff fd28 	bl	8012064 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8012614:	2000      	movs	r0, #0
 8012616:	f7fe f8d7 	bl	80107c8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801261a:	4807      	ldr	r0, [pc, #28]	; (8012638 <touchgfx_init+0x4c>)
 801261c:	f006 ff94 	bl	8019548 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8012620:	f7ff feb6 	bl	8012390 <_ZN12FrontendHeap11getInstanceEv>
 8012624:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8012626:	4805      	ldr	r0, [pc, #20]	; (801263c <touchgfx_init+0x50>)
 8012628:	f7fe fe24 	bl	8011274 <_ZN11TouchGFXHAL10initializeEv>
}
 801262c:	bf00      	nop
 801262e:	370c      	adds	r7, #12
 8012630:	46bd      	mov	sp, r7
 8012632:	bd90      	pop	{r4, r7, pc}
 8012634:	2004e08c 	.word	0x2004e08c
 8012638:	2002581c 	.word	0x2002581c
 801263c:	2004e090 	.word	0x2004e090

08012640 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8012640:	b480      	push	{r7}
 8012642:	af00      	add	r7, sp, #0
}
 8012644:	bf00      	nop
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
	...

08012650 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	4a11      	ldr	r2, [pc, #68]	; (80126a0 <_ZN12FrontendHeapD1Ev+0x50>)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	601a      	str	r2, [r3, #0]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012664:	3310      	adds	r3, #16
 8012666:	4618      	mov	r0, r3
 8012668:	f7fe f940 	bl	80108ec <_ZN19FrontendApplicationD1Ev>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8012672:	3310      	adds	r3, #16
 8012674:	4618      	mov	r0, r3
 8012676:	f000 f827 	bl	80126c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	332c      	adds	r3, #44	; 0x2c
 801267e:	4618      	mov	r0, r3
 8012680:	f000 f844 	bl	801270c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	3314      	adds	r3, #20
 8012688:	4618      	mov	r0, r3
 801268a:	f000 f863 	bl	8012754 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff fea9 	bl	80123e8 <_ZN16FrontendHeapBaseD1Ev>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	4618      	mov	r0, r3
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}
 80126a0:	08028224 	.word	0x08028224

080126a4 <_ZN12FrontendHeapD0Ev>:
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7ff ffcf 	bl	8012650 <_ZN12FrontendHeapD1Ev>
 80126b2:	f241 2128 	movw	r1, #4648	; 0x1228
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f013 f8b2 	bl	8025820 <_ZdlPvj>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	4618      	mov	r0, r3
 80126c0:	3708      	adds	r7, #8
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
	...

080126c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	4a05      	ldr	r2, [pc, #20]	; (80126e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	4618      	mov	r0, r3
 80126da:	f000 fab9 	bl	8012c50 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	08028238 	.word	0x08028238

080126ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7ff ffe7 	bl	80126c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80126fa:	215c      	movs	r1, #92	; 0x5c
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f013 f88f 	bl	8025820 <_ZdlPvj>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4618      	mov	r0, r3
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	4a05      	ldr	r2, [pc, #20]	; (801272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	601a      	str	r2, [r3, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4618      	mov	r0, r3
 801271e:	f000 fa97 	bl	8012c50 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	4618      	mov	r0, r3
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	0802826c 	.word	0x0802826c

08012730 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7ff ffe7 	bl	801270c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801273e:	f241 0144 	movw	r1, #4164	; 0x1044
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f013 f86c 	bl	8025820 <_ZdlPvj>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4618      	mov	r0, r3
 801274c:	3708      	adds	r7, #8
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}
	...

08012754 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	4a05      	ldr	r2, [pc, #20]	; (8012774 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	601a      	str	r2, [r3, #0]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	4618      	mov	r0, r3
 8012766:	f000 fa73 	bl	8012c50 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	4618      	mov	r0, r3
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}
 8012774:	080282a0 	.word	0x080282a0

08012778 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f7ff ffe7 	bl	8012754 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012786:	2118      	movs	r1, #24
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f013 f849 	bl	8025820 <_ZdlPvj>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4618      	mov	r0, r3
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
 80127a0:	4a05      	ldr	r2, [pc, #20]	; (80127b8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	601a      	str	r2, [r3, #0]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7ff fcab 	bl	8012104 <_ZN8touchgfx3LCDD1Ev>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	4618      	mov	r0, r3
 80127b2:	3708      	adds	r7, #8
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}
 80127b8:	08028dc8 	.word	0x08028dc8

080127bc <_ZN8touchgfx8LCD16bppD0Ev>:
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7ff ffe7 	bl	8012798 <_ZN8touchgfx8LCD16bppD1Ev>
 80127ca:	2178      	movs	r1, #120	; 0x78
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f013 f827 	bl	8025820 <_ZdlPvj>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	4618      	mov	r0, r3
 80127d6:	3708      	adds	r7, #8
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}

080127dc <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 80127dc:	b580      	push	{r7, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	af02      	add	r7, sp, #8
 80127e2:	6078      	str	r0, [r7, #4]
 80127e4:	6039      	str	r1, [r7, #0]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d118      	bne.n	801281e <_Z41__static_initialization_and_destruction_0ii+0x42>
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d113      	bne.n	801281e <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 80127f6:	4817      	ldr	r0, [pc, #92]	; (8012854 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80127f8:	f7ff fee6 	bl	80125c8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80127fc:	4816      	ldr	r0, [pc, #88]	; (8012858 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80127fe:	f7ff f8a5 	bl	801194c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8012802:	4816      	ldr	r0, [pc, #88]	; (801285c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012804:	f00a f838 	bl	801c878 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 8012808:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801280c:	9301      	str	r3, [sp, #4]
 801280e:	23f0      	movs	r3, #240	; 0xf0
 8012810:	9300      	str	r3, [sp, #0]
 8012812:	4b10      	ldr	r3, [pc, #64]	; (8012854 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8012814:	4a11      	ldr	r2, [pc, #68]	; (801285c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012816:	4910      	ldr	r1, [pc, #64]	; (8012858 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012818:	4811      	ldr	r0, [pc, #68]	; (8012860 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801281a:	f7ff fea9 	bl	8012570 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d113      	bne.n	801284c <_Z41__static_initialization_and_destruction_0ii+0x70>
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801282a:	4293      	cmp	r3, r2
 801282c:	d10e      	bne.n	801284c <_Z41__static_initialization_and_destruction_0ii+0x70>
 801282e:	480c      	ldr	r0, [pc, #48]	; (8012860 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012830:	f7fe fe44 	bl	80114bc <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8012834:	480b      	ldr	r0, [pc, #44]	; (8012864 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012836:	f7fa fa69 	bl	800cd0c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 801283a:	4808      	ldr	r0, [pc, #32]	; (801285c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801283c:	f7ff ffac 	bl	8012798 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8012840:	4805      	ldr	r0, [pc, #20]	; (8012858 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012842:	f7ff f8ad 	bl	80119a0 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8012846:	4803      	ldr	r0, [pc, #12]	; (8012854 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8012848:	f7fe fad0 	bl	8010dec <_ZN20STM32TouchControllerD1Ev>
}
 801284c:	bf00      	nop
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	2004d270 	.word	0x2004d270
 8012858:	2004d274 	.word	0x2004d274
 801285c:	2004e014 	.word	0x2004e014
 8012860:	2004e090 	.word	0x2004e090
 8012864:	2002581c 	.word	0x2002581c

08012868 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8012868:	b480      	push	{r7}
 801286a:	b083      	sub	sp, #12
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8012870:	2301      	movs	r3, #1
    }
 8012872:	4618      	mov	r0, r3
 8012874:	370c      	adds	r7, #12
 8012876:	46bd      	mov	sp, r7
 8012878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287c:	4770      	bx	lr

0801287e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 801287e:	b480      	push	{r7}
 8012880:	b083      	sub	sp, #12
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8012886:	2354      	movs	r3, #84	; 0x54
    }
 8012888:	4618      	mov	r0, r3
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr

08012894 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	460b      	mov	r3, r1
 801289e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80128a0:	887b      	ldrh	r3, [r7, #2]
 80128a2:	2254      	movs	r2, #84	; 0x54
 80128a4:	fb02 f303 	mul.w	r3, r2, r3
 80128a8:	3308      	adds	r3, #8
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	4413      	add	r3, r2
    }
 80128ae:	4618      	mov	r0, r3
 80128b0:	370c      	adds	r7, #12
 80128b2:	46bd      	mov	sp, r7
 80128b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b8:	4770      	bx	lr

080128ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80128ba:	b480      	push	{r7}
 80128bc:	b083      	sub	sp, #12
 80128be:	af00      	add	r7, sp, #0
 80128c0:	6078      	str	r0, [r7, #4]
 80128c2:	460b      	mov	r3, r1
 80128c4:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80128c6:	887b      	ldrh	r3, [r7, #2]
 80128c8:	2254      	movs	r2, #84	; 0x54
 80128ca:	fb02 f303 	mul.w	r3, r2, r3
 80128ce:	3308      	adds	r3, #8
 80128d0:	687a      	ldr	r2, [r7, #4]
 80128d2:	4413      	add	r3, r2
    }
 80128d4:	4618      	mov	r0, r3
 80128d6:	370c      	adds	r7, #12
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr

080128e0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80128e8:	2301      	movs	r3, #1
    }
 80128ea:	4618      	mov	r0, r3
 80128ec:	370c      	adds	r7, #12
 80128ee:	46bd      	mov	sp, r7
 80128f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f4:	4770      	bx	lr

080128f6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80128f6:	b480      	push	{r7}
 80128f8:	b083      	sub	sp, #12
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80128fe:	f241 033c 	movw	r3, #4156	; 0x103c
    }
 8012902:	4618      	mov	r0, r3
 8012904:	370c      	adds	r7, #12
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr

0801290e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801290e:	b480      	push	{r7}
 8012910:	b083      	sub	sp, #12
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	460b      	mov	r3, r1
 8012918:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801291a:	887b      	ldrh	r3, [r7, #2]
 801291c:	f241 023c 	movw	r2, #4156	; 0x103c
 8012920:	fb02 f303 	mul.w	r3, r2, r3
 8012924:	3308      	adds	r3, #8
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	4413      	add	r3, r2
    }
 801292a:	4618      	mov	r0, r3
 801292c:	370c      	adds	r7, #12
 801292e:	46bd      	mov	sp, r7
 8012930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012934:	4770      	bx	lr

08012936 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012936:	b480      	push	{r7}
 8012938:	b083      	sub	sp, #12
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
 801293e:	460b      	mov	r3, r1
 8012940:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012942:	887b      	ldrh	r3, [r7, #2]
 8012944:	f241 023c 	movw	r2, #4156	; 0x103c
 8012948:	fb02 f303 	mul.w	r3, r2, r3
 801294c:	3308      	adds	r3, #8
 801294e:	687a      	ldr	r2, [r7, #4]
 8012950:	4413      	add	r3, r2
    }
 8012952:	4618      	mov	r0, r3
 8012954:	370c      	adds	r7, #12
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr

0801295e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801295e:	b480      	push	{r7}
 8012960:	b083      	sub	sp, #12
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012966:	2301      	movs	r3, #1
    }
 8012968:	4618      	mov	r0, r3
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801297c:	2310      	movs	r3, #16
    }
 801297e:	4618      	mov	r0, r3
 8012980:	370c      	adds	r7, #12
 8012982:	46bd      	mov	sp, r7
 8012984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012988:	4770      	bx	lr

0801298a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801298a:	b480      	push	{r7}
 801298c:	b083      	sub	sp, #12
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
 8012992:	460b      	mov	r3, r1
 8012994:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012996:	887b      	ldrh	r3, [r7, #2]
 8012998:	011b      	lsls	r3, r3, #4
 801299a:	3308      	adds	r3, #8
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	4413      	add	r3, r2
    }
 80129a0:	4618      	mov	r0, r3
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr

080129ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	460b      	mov	r3, r1
 80129b6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80129b8:	887b      	ldrh	r3, [r7, #2]
 80129ba:	011b      	lsls	r3, r3, #4
 80129bc:	3308      	adds	r3, #8
 80129be:	687a      	ldr	r2, [r7, #4]
 80129c0:	4413      	add	r3, r2
    }
 80129c2:	4618      	mov	r0, r3
 80129c4:	370c      	adds	r7, #12
 80129c6:	46bd      	mov	sp, r7
 80129c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129cc:	4770      	bx	lr

080129ce <_GLOBAL__sub_I_touchgfx_init>:
 80129ce:	b580      	push	{r7, lr}
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80129d6:	2001      	movs	r0, #1
 80129d8:	f7ff ff00 	bl	80127dc <_Z41__static_initialization_and_destruction_0ii>
 80129dc:	bd80      	pop	{r7, pc}

080129de <_GLOBAL__sub_D_touchgfx_init>:
 80129de:	b580      	push	{r7, lr}
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80129e6:	2000      	movs	r0, #0
 80129e8:	f7ff fef8 	bl	80127dc <_Z41__static_initialization_and_destruction_0ii>
 80129ec:	bd80      	pop	{r7, pc}
	...

080129f0 <__NVIC_EnableIRQ>:
{
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	4603      	mov	r3, r0
 80129f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80129fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	db0b      	blt.n	8012a1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012a02:	79fb      	ldrb	r3, [r7, #7]
 8012a04:	f003 021f 	and.w	r2, r3, #31
 8012a08:	4907      	ldr	r1, [pc, #28]	; (8012a28 <__NVIC_EnableIRQ+0x38>)
 8012a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a0e:	095b      	lsrs	r3, r3, #5
 8012a10:	2001      	movs	r0, #1
 8012a12:	fa00 f202 	lsl.w	r2, r0, r2
 8012a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012a1a:	bf00      	nop
 8012a1c:	370c      	adds	r7, #12
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a24:	4770      	bx	lr
 8012a26:	bf00      	nop
 8012a28:	e000e100 	.word	0xe000e100

08012a2c <__NVIC_DisableIRQ>:
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	b083      	sub	sp, #12
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	4603      	mov	r3, r0
 8012a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	db12      	blt.n	8012a64 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012a3e:	79fb      	ldrb	r3, [r7, #7]
 8012a40:	f003 021f 	and.w	r2, r3, #31
 8012a44:	490a      	ldr	r1, [pc, #40]	; (8012a70 <__NVIC_DisableIRQ+0x44>)
 8012a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a4a:	095b      	lsrs	r3, r3, #5
 8012a4c:	2001      	movs	r0, #1
 8012a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8012a52:	3320      	adds	r3, #32
 8012a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012a58:	f3bf 8f4f 	dsb	sy
}
 8012a5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012a5e:	f3bf 8f6f 	isb	sy
}
 8012a62:	bf00      	nop
}
 8012a64:	bf00      	nop
 8012a66:	370c      	adds	r7, #12
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6e:	4770      	bx	lr
 8012a70:	e000e100 	.word	0xe000e100

08012a74 <__NVIC_SetPriority>:
{
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	6039      	str	r1, [r7, #0]
 8012a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	db0a      	blt.n	8012a9e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	b2da      	uxtb	r2, r3
 8012a8c:	490c      	ldr	r1, [pc, #48]	; (8012ac0 <__NVIC_SetPriority+0x4c>)
 8012a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a92:	0112      	lsls	r2, r2, #4
 8012a94:	b2d2      	uxtb	r2, r2
 8012a96:	440b      	add	r3, r1
 8012a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012a9c:	e00a      	b.n	8012ab4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	b2da      	uxtb	r2, r3
 8012aa2:	4908      	ldr	r1, [pc, #32]	; (8012ac4 <__NVIC_SetPriority+0x50>)
 8012aa4:	79fb      	ldrb	r3, [r7, #7]
 8012aa6:	f003 030f 	and.w	r3, r3, #15
 8012aaa:	3b04      	subs	r3, #4
 8012aac:	0112      	lsls	r2, r2, #4
 8012aae:	b2d2      	uxtb	r2, r2
 8012ab0:	440b      	add	r3, r1
 8012ab2:	761a      	strb	r2, [r3, #24]
}
 8012ab4:	bf00      	nop
 8012ab6:	370c      	adds	r7, #12
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr
 8012ac0:	e000e100 	.word	0xe000e100
 8012ac4:	e000ed00 	.word	0xe000ed00

08012ac8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8012ac8:	b5b0      	push	{r4, r5, r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f000 fbbb 	bl	801324e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8012ad8:	687d      	ldr	r5, [r7, #4]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	3364      	adds	r3, #100	; 0x64
 8012ae0:	681c      	ldr	r4, [r3, #0]
 8012ae2:	f004 f995 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	4619      	mov	r1, r3
 8012aea:	4628      	mov	r0, r5
 8012aec:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	3388      	adds	r3, #136	; 0x88
 8012af6:	681c      	ldr	r4, [r3, #0]
 8012af8:	2300      	movs	r3, #0
 8012afa:	2200      	movs	r2, #0
 8012afc:	4902      	ldr	r1, [pc, #8]	; (8012b08 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8012afe:	47a0      	blx	r4
}
 8012b00:	bf00      	nop
 8012b02:	3708      	adds	r7, #8
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bdb0      	pop	{r4, r5, r7, pc}
 8012b08:	20025900 	.word	0x20025900

08012b0c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8012b14:	2109      	movs	r1, #9
 8012b16:	2076      	movs	r0, #118	; 0x76
 8012b18:	f7ff ffac 	bl	8012a74 <__NVIC_SetPriority>
}
 8012b1c:	bf00      	nop
 8012b1e:	3708      	adds	r7, #8
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8012b2c:	2076      	movs	r0, #118	; 0x76
 8012b2e:	f7ff ff5f 	bl	80129f0 <__NVIC_EnableIRQ>
}
 8012b32:	bf00      	nop
 8012b34:	3708      	adds	r7, #8
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b082      	sub	sp, #8
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012b42:	2076      	movs	r0, #118	; 0x76
 8012b44:	f7ff ff72 	bl	8012a2c <__NVIC_DisableIRQ>
}
 8012b48:	bf00      	nop
 8012b4a:	3708      	adds	r7, #8
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8012b50:	b480      	push	{r7}
 8012b52:	b083      	sub	sp, #12
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
}
 8012b58:	bf00      	nop
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f000 fb54 	bl	801321c <_ZN8touchgfx3HAL10beginFrameEv>
 8012b74:	4603      	mov	r3, r0
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3708      	adds	r7, #8
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}

08012b7e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8012b7e:	b580      	push	{r7, lr}
 8012b80:	b082      	sub	sp, #8
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f000 fb53 	bl	8013234 <_ZN8touchgfx3HAL8endFrameEv>
}
 8012b8e:	bf00      	nop
 8012b90:	3708      	adds	r7, #8
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
	...

08012b98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8012ba0:	4b03      	ldr	r3, [pc, #12]	; (8012bb0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	370c      	adds	r7, #12
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop
 8012bb0:	20025900 	.word	0x20025900

08012bb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	b083      	sub	sp, #12
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8012bbe:	bf00      	nop
 8012bc0:	370c      	adds	r7, #12
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc8:	4770      	bx	lr

08012bca <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012bca:	b580      	push	{r7, lr}
 8012bcc:	b082      	sub	sp, #8
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	6078      	str	r0, [r7, #4]
 8012bd2:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6839      	ldr	r1, [r7, #0]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f000 fae9 	bl	80131b0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8012bde:	bf00      	nop
 8012be0:	3708      	adds	r7, #8
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}

08012be6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8012be6:	b580      	push	{r7, lr}
 8012be8:	b084      	sub	sp, #16
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	60f8      	str	r0, [r7, #12]
 8012bee:	60b9      	str	r1, [r7, #8]
 8012bf0:	607a      	str	r2, [r7, #4]
 8012bf2:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8012bf4:	68f8      	ldr	r0, [r7, #12]
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	68b9      	ldr	r1, [r7, #8]
 8012bfc:	f000 fc41 	bl	8013482 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8012c00:	4603      	mov	r3, r0
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3710      	adds	r7, #16
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012c0a:	8880      	ldrh	r0, [r0, #4]
 8012c0c:	4770      	bx	lr

08012c0e <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012c0e:	b570      	push	{r4, r5, r6, lr}
 8012c10:	6803      	ldr	r3, [r0, #0]
 8012c12:	4605      	mov	r5, r0
 8012c14:	460c      	mov	r4, r1
 8012c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c18:	2100      	movs	r1, #0
 8012c1a:	4798      	blx	r3
 8012c1c:	682b      	ldr	r3, [r5, #0]
 8012c1e:	4606      	mov	r6, r0
 8012c20:	6a1b      	ldr	r3, [r3, #32]
 8012c22:	4628      	mov	r0, r5
 8012c24:	4798      	blx	r3
 8012c26:	1ba4      	subs	r4, r4, r6
 8012c28:	b2a4      	uxth	r4, r4
 8012c2a:	fbb4 f0f0 	udiv	r0, r4, r0
 8012c2e:	bd70      	pop	{r4, r5, r6, pc}

08012c30 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012c30:	2300      	movs	r3, #0
 8012c32:	8083      	strh	r3, [r0, #4]
 8012c34:	4770      	bx	lr

08012c36 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012c36:	b510      	push	{r4, lr}
 8012c38:	4604      	mov	r4, r0
 8012c3a:	6803      	ldr	r3, [r0, #0]
 8012c3c:	8881      	ldrh	r1, [r0, #4]
 8012c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c40:	4798      	blx	r3
 8012c42:	88a3      	ldrh	r3, [r4, #4]
 8012c44:	3301      	adds	r3, #1
 8012c46:	80a3      	strh	r3, [r4, #4]
 8012c48:	bd10      	pop	{r4, pc}

08012c4a <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012c4a:	6803      	ldr	r3, [r0, #0]
 8012c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4e:	4718      	bx	r3

08012c50 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012c50:	4770      	bx	lr
	...

08012c54 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012c54:	4a02      	ldr	r2, [pc, #8]	; (8012c60 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012c56:	6002      	str	r2, [r0, #0]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	8082      	strh	r2, [r0, #4]
 8012c5c:	4770      	bx	lr
 8012c5e:	bf00      	nop
 8012c60:	080283d0 	.word	0x080283d0

08012c64 <_ZN8touchgfx9Container13getFirstChildEv>:
 8012c64:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012c66:	4770      	bx	lr

08012c68 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012c68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c6a:	2000      	movs	r0, #0
 8012c6c:	b12b      	cbz	r3, 8012c7a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012c6e:	b920      	cbnz	r0, 8012c7a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012c70:	1a5a      	subs	r2, r3, r1
 8012c72:	4250      	negs	r0, r2
 8012c74:	4150      	adcs	r0, r2
 8012c76:	699b      	ldr	r3, [r3, #24]
 8012c78:	e7f8      	b.n	8012c6c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012c7a:	4770      	bx	lr

08012c7c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	6148      	str	r0, [r1, #20]
 8012c80:	618b      	str	r3, [r1, #24]
 8012c82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c84:	b913      	cbnz	r3, 8012c8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012c86:	6281      	str	r1, [r0, #40]	; 0x28
 8012c88:	4770      	bx	lr
 8012c8a:	4613      	mov	r3, r2
 8012c8c:	699a      	ldr	r2, [r3, #24]
 8012c8e:	2a00      	cmp	r2, #0
 8012c90:	d1fb      	bne.n	8012c8a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012c92:	6199      	str	r1, [r3, #24]
 8012c94:	4770      	bx	lr

08012c96 <_ZN8touchgfx9Container9removeAllEv>:
 8012c96:	2200      	movs	r2, #0
 8012c98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c9a:	b123      	cbz	r3, 8012ca6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012c9c:	6999      	ldr	r1, [r3, #24]
 8012c9e:	6281      	str	r1, [r0, #40]	; 0x28
 8012ca0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012ca4:	e7f8      	b.n	8012c98 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012ca6:	4770      	bx	lr

08012ca8 <_ZN8touchgfx9Container6unlinkEv>:
 8012ca8:	2300      	movs	r3, #0
 8012caa:	6283      	str	r3, [r0, #40]	; 0x28
 8012cac:	4770      	bx	lr

08012cae <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012cae:	2200      	movs	r2, #0
 8012cb0:	8002      	strh	r2, [r0, #0]
 8012cb2:	8042      	strh	r2, [r0, #2]
 8012cb4:	8082      	strh	r2, [r0, #4]
 8012cb6:	80c2      	strh	r2, [r0, #6]
 8012cb8:	4770      	bx	lr

08012cba <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012cba:	b570      	push	{r4, r5, r6, lr}
 8012cbc:	460d      	mov	r5, r1
 8012cbe:	4616      	mov	r6, r2
 8012cc0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012cc2:	b13c      	cbz	r4, 8012cd4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012cc4:	6823      	ldr	r3, [r4, #0]
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cca:	4632      	mov	r2, r6
 8012ccc:	4629      	mov	r1, r5
 8012cce:	4798      	blx	r3
 8012cd0:	69a4      	ldr	r4, [r4, #24]
 8012cd2:	e7f6      	b.n	8012cc2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012cd4:	bd70      	pop	{r4, r5, r6, pc}

08012cd6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012cd6:	b538      	push	{r3, r4, r5, lr}
 8012cd8:	460d      	mov	r5, r1
 8012cda:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012cdc:	b134      	cbz	r4, 8012cec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012cde:	682b      	ldr	r3, [r5, #0]
 8012ce0:	4621      	mov	r1, r4
 8012ce2:	689b      	ldr	r3, [r3, #8]
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	4798      	blx	r3
 8012ce8:	69a4      	ldr	r4, [r4, #24]
 8012cea:	e7f7      	b.n	8012cdc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012cec:	bd38      	pop	{r3, r4, r5, pc}

08012cee <_ZNK8touchgfx9Container17invalidateContentEv>:
 8012cee:	b510      	push	{r4, lr}
 8012cf0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012cf2:	b12c      	cbz	r4, 8012d00 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8012cf4:	6823      	ldr	r3, [r4, #0]
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	699b      	ldr	r3, [r3, #24]
 8012cfa:	4798      	blx	r3
 8012cfc:	69a4      	ldr	r4, [r4, #24]
 8012cfe:	e7f8      	b.n	8012cf2 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8012d00:	bd10      	pop	{r4, pc}

08012d02 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012d02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012d04:	b19b      	cbz	r3, 8012d2e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012d06:	428b      	cmp	r3, r1
 8012d08:	d109      	bne.n	8012d1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	699a      	ldr	r2, [r3, #24]
 8012d0e:	6159      	str	r1, [r3, #20]
 8012d10:	6282      	str	r2, [r0, #40]	; 0x28
 8012d12:	b902      	cbnz	r2, 8012d16 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012d14:	4770      	bx	lr
 8012d16:	6199      	str	r1, [r3, #24]
 8012d18:	4770      	bx	lr
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	b13a      	cbz	r2, 8012d2e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012d1e:	699a      	ldr	r2, [r3, #24]
 8012d20:	428a      	cmp	r2, r1
 8012d22:	d1fa      	bne.n	8012d1a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012d24:	698a      	ldr	r2, [r1, #24]
 8012d26:	619a      	str	r2, [r3, #24]
 8012d28:	2300      	movs	r3, #0
 8012d2a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012d2e:	4770      	bx	lr

08012d30 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012d30:	b410      	push	{r4}
 8012d32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012d34:	4604      	mov	r4, r0
 8012d36:	b92b      	cbnz	r3, 8012d44 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012d38:	6803      	ldr	r3, [r0, #0]
 8012d3a:	4611      	mov	r1, r2
 8012d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d42:	4718      	bx	r3
 8012d44:	b941      	cbnz	r1, 8012d58 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012d46:	6193      	str	r3, [r2, #24]
 8012d48:	6282      	str	r2, [r0, #40]	; 0x28
 8012d4a:	6154      	str	r4, [r2, #20]
 8012d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d50:	4770      	bx	lr
 8012d52:	4603      	mov	r3, r0
 8012d54:	2800      	cmp	r0, #0
 8012d56:	d0f9      	beq.n	8012d4c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012d58:	4299      	cmp	r1, r3
 8012d5a:	6998      	ldr	r0, [r3, #24]
 8012d5c:	d1f9      	bne.n	8012d52 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012d5e:	6190      	str	r0, [r2, #24]
 8012d60:	618a      	str	r2, [r1, #24]
 8012d62:	e7f2      	b.n	8012d4a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012d64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d68:	461f      	mov	r7, r3
 8012d6a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012d6e:	460d      	mov	r5, r1
 8012d70:	4616      	mov	r6, r2
 8012d72:	b103      	cbz	r3, 8012d76 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012d74:	6038      	str	r0, [r7, #0]
 8012d76:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012d78:	b314      	cbz	r4, 8012dc0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012d7a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012d7e:	b1eb      	cbz	r3, 8012dbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d80:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012d84:	428d      	cmp	r5, r1
 8012d86:	db19      	blt.n	8012dbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d88:	8923      	ldrh	r3, [r4, #8]
 8012d8a:	b289      	uxth	r1, r1
 8012d8c:	440b      	add	r3, r1
 8012d8e:	b21b      	sxth	r3, r3
 8012d90:	429d      	cmp	r5, r3
 8012d92:	da13      	bge.n	8012dbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d94:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012d98:	4296      	cmp	r6, r2
 8012d9a:	db0f      	blt.n	8012dbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d9c:	8963      	ldrh	r3, [r4, #10]
 8012d9e:	b292      	uxth	r2, r2
 8012da0:	4413      	add	r3, r2
 8012da2:	b21b      	sxth	r3, r3
 8012da4:	429e      	cmp	r6, r3
 8012da6:	da09      	bge.n	8012dbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012da8:	6823      	ldr	r3, [r4, #0]
 8012daa:	1ab2      	subs	r2, r6, r2
 8012dac:	1a69      	subs	r1, r5, r1
 8012dae:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8012db2:	b212      	sxth	r2, r2
 8012db4:	463b      	mov	r3, r7
 8012db6:	b209      	sxth	r1, r1
 8012db8:	4620      	mov	r0, r4
 8012dba:	47c0      	blx	r8
 8012dbc:	69a4      	ldr	r4, [r4, #24]
 8012dbe:	e7db      	b.n	8012d78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012dc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc8:	4c6c      	ldr	r4, [pc, #432]	; (8012f7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8012dca:	b0a1      	sub	sp, #132	; 0x84
 8012dcc:	6824      	ldr	r4, [r4, #0]
 8012dce:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8012dd0:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8012dd4:	2400      	movs	r4, #0
 8012dd6:	802c      	strh	r4, [r5, #0]
 8012dd8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8012dda:	4606      	mov	r6, r0
 8012ddc:	802c      	strh	r4, [r5, #0]
 8012dde:	601c      	str	r4, [r3, #0]
 8012de0:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012de4:	9303      	str	r3, [sp, #12]
 8012de6:	f7ff ffbd 	bl	8012d64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012dea:	f1b9 0f03 	cmp.w	r9, #3
 8012dee:	f340 80bf 	ble.w	8012f70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8012df2:	4631      	mov	r1, r6
 8012df4:	a80c      	add	r0, sp, #48	; 0x30
 8012df6:	f005 f83d 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012dfa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012dfe:	9306      	str	r3, [sp, #24]
 8012e00:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012e04:	9307      	str	r3, [sp, #28]
 8012e06:	9b03      	ldr	r3, [sp, #12]
 8012e08:	f8d3 a000 	ldr.w	sl, [r3]
 8012e0c:	f1ba 0f00 	cmp.w	sl, #0
 8012e10:	f000 80b1 	beq.w	8012f76 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8012e14:	4651      	mov	r1, sl
 8012e16:	a810      	add	r0, sp, #64	; 0x40
 8012e18:	f005 f82c 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012e1c:	2002      	movs	r0, #2
 8012e1e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8012e22:	9b01      	ldr	r3, [sp, #4]
 8012e24:	fb91 f1f0 	sdiv	r1, r1, r0
 8012e28:	9a06      	ldr	r2, [sp, #24]
 8012e2a:	189d      	adds	r5, r3, r2
 8012e2c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8012e30:	9a07      	ldr	r2, [sp, #28]
 8012e32:	4419      	add	r1, r3
 8012e34:	9b02      	ldr	r3, [sp, #8]
 8012e36:	1a6d      	subs	r5, r5, r1
 8012e38:	4413      	add	r3, r2
 8012e3a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012e3e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012e42:	fb92 f2f0 	sdiv	r2, r2, r0
 8012e46:	440a      	add	r2, r1
 8012e48:	1a9b      	subs	r3, r3, r2
 8012e4a:	435b      	muls	r3, r3
 8012e4c:	fb05 3505 	mla	r5, r5, r5, r3
 8012e50:	4f4b      	ldr	r7, [pc, #300]	; (8012f80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012e52:	ac10      	add	r4, sp, #64	; 0x40
 8012e54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e58:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e5c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e60:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012e68:	2303      	movs	r3, #3
 8012e6a:	f1b9 0f0c 	cmp.w	r9, #12
 8012e6e:	bfda      	itte	le
 8012e70:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012e74:	fb92 f8f3 	sdivle	r8, r2, r3
 8012e78:	4698      	movgt	r8, r3
 8012e7a:	2400      	movs	r4, #0
 8012e7c:	f8cd 9000 	str.w	r9, [sp]
 8012e80:	1c63      	adds	r3, r4, #1
 8012e82:	9308      	str	r3, [sp, #32]
 8012e84:	9b00      	ldr	r3, [sp, #0]
 8012e86:	f04f 0b00 	mov.w	fp, #0
 8012e8a:	fb93 f3f8 	sdiv	r3, r3, r8
 8012e8e:	f004 0401 	and.w	r4, r4, #1
 8012e92:	aa10      	add	r2, sp, #64	; 0x40
 8012e94:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	3404      	adds	r4, #4
 8012e9c:	9304      	str	r3, [sp, #16]
 8012e9e:	9a04      	ldr	r2, [sp, #16]
 8012ea0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012ea4:	fb13 f302 	smulbb	r3, r3, r2
 8012ea8:	9a01      	ldr	r2, [sp, #4]
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	1899      	adds	r1, r3, r2
 8012eae:	9305      	str	r3, [sp, #20]
 8012eb0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012eb4:	b209      	sxth	r1, r1
 8012eb6:	4299      	cmp	r1, r3
 8012eb8:	db4d      	blt.n	8012f56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012eba:	8932      	ldrh	r2, [r6, #8]
 8012ebc:	4413      	add	r3, r2
 8012ebe:	b21b      	sxth	r3, r3
 8012ec0:	4299      	cmp	r1, r3
 8012ec2:	da48      	bge.n	8012f56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012ec4:	9b04      	ldr	r3, [sp, #16]
 8012ec6:	6827      	ldr	r7, [r4, #0]
 8012ec8:	fb17 f703 	smulbb	r7, r7, r3
 8012ecc:	9b02      	ldr	r3, [sp, #8]
 8012ece:	b2bf      	uxth	r7, r7
 8012ed0:	18fa      	adds	r2, r7, r3
 8012ed2:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012ed6:	b212      	sxth	r2, r2
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	db3c      	blt.n	8012f56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012edc:	8970      	ldrh	r0, [r6, #10]
 8012ede:	4403      	add	r3, r0
 8012ee0:	b21b      	sxth	r3, r3
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	da37      	bge.n	8012f56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	4630      	mov	r0, r6
 8012eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8012eec:	ab0b      	add	r3, sp, #44	; 0x2c
 8012eee:	f7ff ff39 	bl	8012d64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ef4:	b37a      	cbz	r2, 8012f56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012ef6:	4552      	cmp	r2, sl
 8012ef8:	d02d      	beq.n	8012f56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8012efa:	4611      	mov	r1, r2
 8012efc:	a80e      	add	r0, sp, #56	; 0x38
 8012efe:	9209      	str	r2, [sp, #36]	; 0x24
 8012f00:	f004 ffb8 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012f04:	f04f 0e02 	mov.w	lr, #2
 8012f08:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8012f0c:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8012f10:	fb91 f1fe 	sdiv	r1, r1, lr
 8012f14:	fb9c fcfe 	sdiv	ip, ip, lr
 8012f18:	9a06      	ldr	r2, [sp, #24]
 8012f1a:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8012f1e:	9b01      	ldr	r3, [sp, #4]
 8012f20:	4401      	add	r1, r0
 8012f22:	4413      	add	r3, r2
 8012f24:	1a58      	subs	r0, r3, r1
 8012f26:	9a07      	ldr	r2, [sp, #28]
 8012f28:	9b02      	ldr	r3, [sp, #8]
 8012f2a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012f2e:	4413      	add	r3, r2
 8012f30:	448c      	add	ip, r1
 8012f32:	eba3 030c 	sub.w	r3, r3, ip
 8012f36:	435b      	muls	r3, r3
 8012f38:	fb00 3300 	mla	r3, r0, r0, r3
 8012f3c:	42ab      	cmp	r3, r5
 8012f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f40:	d208      	bcs.n	8012f54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8012f42:	461d      	mov	r5, r3
 8012f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f46:	9803      	ldr	r0, [sp, #12]
 8012f48:	6001      	str	r1, [r0, #0]
 8012f4a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012f4c:	9805      	ldr	r0, [sp, #20]
 8012f4e:	8008      	strh	r0, [r1, #0]
 8012f50:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012f52:	800f      	strh	r7, [r1, #0]
 8012f54:	4692      	mov	sl, r2
 8012f56:	f10b 0b01 	add.w	fp, fp, #1
 8012f5a:	f1bb 0f04 	cmp.w	fp, #4
 8012f5e:	f104 0408 	add.w	r4, r4, #8
 8012f62:	d19c      	bne.n	8012e9e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8012f64:	9b00      	ldr	r3, [sp, #0]
 8012f66:	9c08      	ldr	r4, [sp, #32]
 8012f68:	444b      	add	r3, r9
 8012f6a:	4544      	cmp	r4, r8
 8012f6c:	9300      	str	r3, [sp, #0]
 8012f6e:	d187      	bne.n	8012e80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8012f70:	b021      	add	sp, #132	; 0x84
 8012f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f76:	f04f 35ff 	mov.w	r5, #4294967295
 8012f7a:	e769      	b.n	8012e50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012f7c:	2004e118 	.word	0x2004e118
 8012f80:	08027908 	.word	0x08027908

08012f84 <_ZN8touchgfx4RectaNERKS0_>:
 8012f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f88:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012f8c:	888c      	ldrh	r4, [r1, #4]
 8012f8e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012f92:	443c      	add	r4, r7
 8012f94:	b2a4      	uxth	r4, r4
 8012f96:	fa0f f884 	sxth.w	r8, r4
 8012f9a:	45c1      	cmp	r9, r8
 8012f9c:	da2f      	bge.n	8012ffe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f9e:	8882      	ldrh	r2, [r0, #4]
 8012fa0:	444a      	add	r2, r9
 8012fa2:	b292      	uxth	r2, r2
 8012fa4:	fa0f fe82 	sxth.w	lr, r2
 8012fa8:	4577      	cmp	r7, lr
 8012faa:	da28      	bge.n	8012ffe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012fac:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012fb0:	88cb      	ldrh	r3, [r1, #6]
 8012fb2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012fb6:	442b      	add	r3, r5
 8012fb8:	b21b      	sxth	r3, r3
 8012fba:	429e      	cmp	r6, r3
 8012fbc:	da1f      	bge.n	8012ffe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012fbe:	88c3      	ldrh	r3, [r0, #6]
 8012fc0:	4433      	add	r3, r6
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	fa0f fc83 	sxth.w	ip, r3
 8012fc8:	4565      	cmp	r5, ip
 8012fca:	da18      	bge.n	8012ffe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012fcc:	454f      	cmp	r7, r9
 8012fce:	bfb8      	it	lt
 8012fd0:	464f      	movlt	r7, r9
 8012fd2:	42b5      	cmp	r5, r6
 8012fd4:	bfb8      	it	lt
 8012fd6:	4635      	movlt	r5, r6
 8012fd8:	45f0      	cmp	r8, lr
 8012fda:	bfd8      	it	le
 8012fdc:	4622      	movle	r2, r4
 8012fde:	1bd2      	subs	r2, r2, r7
 8012fe0:	8082      	strh	r2, [r0, #4]
 8012fe2:	884a      	ldrh	r2, [r1, #2]
 8012fe4:	88c9      	ldrh	r1, [r1, #6]
 8012fe6:	8007      	strh	r7, [r0, #0]
 8012fe8:	440a      	add	r2, r1
 8012fea:	b292      	uxth	r2, r2
 8012fec:	b211      	sxth	r1, r2
 8012fee:	458c      	cmp	ip, r1
 8012ff0:	bfa8      	it	ge
 8012ff2:	4613      	movge	r3, r2
 8012ff4:	1b5b      	subs	r3, r3, r5
 8012ff6:	80c3      	strh	r3, [r0, #6]
 8012ff8:	8045      	strh	r5, [r0, #2]
 8012ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ffe:	2300      	movs	r3, #0
 8013000:	8003      	strh	r3, [r0, #0]
 8013002:	8043      	strh	r3, [r0, #2]
 8013004:	8083      	strh	r3, [r0, #4]
 8013006:	80c3      	strh	r3, [r0, #6]
 8013008:	e7f7      	b.n	8012ffa <_ZN8touchgfx4RectaNERKS0_+0x76>

0801300a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801300a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801300e:	2b00      	cmp	r3, #0
 8013010:	dd06      	ble.n	8013020 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8013012:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013016:	2800      	cmp	r0, #0
 8013018:	bfcc      	ite	gt
 801301a:	2000      	movgt	r0, #0
 801301c:	2001      	movle	r0, #1
 801301e:	4770      	bx	lr
 8013020:	2001      	movs	r0, #1
 8013022:	4770      	bx	lr

08013024 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013024:	2300      	movs	r3, #0
 8013026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302a:	4604      	mov	r4, r0
 801302c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801302e:	8003      	strh	r3, [r0, #0]
 8013030:	8043      	strh	r3, [r0, #2]
 8013032:	8083      	strh	r3, [r0, #4]
 8013034:	80c3      	strh	r3, [r0, #6]
 8013036:	2d00      	cmp	r5, #0
 8013038:	d040      	beq.n	80130bc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801303a:	1d28      	adds	r0, r5, #4
 801303c:	f7ff ffe5 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013040:	b988      	cbnz	r0, 8013066 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013042:	4620      	mov	r0, r4
 8013044:	f7ff ffe1 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013048:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801304c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013050:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013054:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8013058:	b138      	cbz	r0, 801306a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801305a:	8022      	strh	r2, [r4, #0]
 801305c:	8063      	strh	r3, [r4, #2]
 801305e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013062:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013066:	69ad      	ldr	r5, [r5, #24]
 8013068:	e7e5      	b.n	8013036 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801306a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801306e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013072:	4290      	cmp	r0, r2
 8013074:	4607      	mov	r7, r0
 8013076:	bfa8      	it	ge
 8013078:	4617      	movge	r7, r2
 801307a:	4299      	cmp	r1, r3
 801307c:	460e      	mov	r6, r1
 801307e:	bfa8      	it	ge
 8013080:	461e      	movge	r6, r3
 8013082:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8013086:	4472      	add	r2, lr
 8013088:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801308c:	4440      	add	r0, r8
 801308e:	4471      	add	r1, lr
 8013090:	4463      	add	r3, ip
 8013092:	b200      	sxth	r0, r0
 8013094:	b212      	sxth	r2, r2
 8013096:	b209      	sxth	r1, r1
 8013098:	b21b      	sxth	r3, r3
 801309a:	4290      	cmp	r0, r2
 801309c:	bfac      	ite	ge
 801309e:	ebc7 0200 	rsbge	r2, r7, r0
 80130a2:	ebc7 0202 	rsblt	r2, r7, r2
 80130a6:	4299      	cmp	r1, r3
 80130a8:	bfac      	ite	ge
 80130aa:	ebc6 0301 	rsbge	r3, r6, r1
 80130ae:	ebc6 0303 	rsblt	r3, r6, r3
 80130b2:	8027      	strh	r7, [r4, #0]
 80130b4:	8066      	strh	r6, [r4, #2]
 80130b6:	80a2      	strh	r2, [r4, #4]
 80130b8:	80e3      	strh	r3, [r4, #6]
 80130ba:	e7d4      	b.n	8013066 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80130bc:	4620      	mov	r0, r4
 80130be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130c2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80130c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80130c6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80130ca:	b383      	cbz	r3, 801312e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80130cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80130ce:	b374      	cbz	r4, 801312e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80130d0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80130d4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80130d8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80130dc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80130e0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80130e4:	b303      	cbz	r3, 8013128 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80130e6:	4668      	mov	r0, sp
 80130e8:	1d21      	adds	r1, r4, #4
 80130ea:	f8ad 5000 	strh.w	r5, [sp]
 80130ee:	f8ad 6002 	strh.w	r6, [sp, #2]
 80130f2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80130f6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80130fa:	f7ff ff43 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 80130fe:	4668      	mov	r0, sp
 8013100:	f7ff ff83 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013104:	b980      	cbnz	r0, 8013128 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013106:	f8bd 3000 	ldrh.w	r3, [sp]
 801310a:	88a2      	ldrh	r2, [r4, #4]
 801310c:	4669      	mov	r1, sp
 801310e:	1a9b      	subs	r3, r3, r2
 8013110:	f8ad 3000 	strh.w	r3, [sp]
 8013114:	88e2      	ldrh	r2, [r4, #6]
 8013116:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801311a:	4620      	mov	r0, r4
 801311c:	1a9b      	subs	r3, r3, r2
 801311e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013122:	6823      	ldr	r3, [r4, #0]
 8013124:	689b      	ldr	r3, [r3, #8]
 8013126:	4798      	blx	r3
 8013128:	69a4      	ldr	r4, [r4, #24]
 801312a:	2c00      	cmp	r4, #0
 801312c:	d1d8      	bne.n	80130e0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801312e:	b002      	add	sp, #8
 8013130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013134 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013134:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013136:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801313a:	460d      	mov	r5, r1
 801313c:	4616      	mov	r6, r2
 801313e:	b323      	cbz	r3, 801318a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013140:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013142:	b314      	cbz	r4, 801318a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013144:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013148:	b1eb      	cbz	r3, 8013186 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801314a:	466b      	mov	r3, sp
 801314c:	6828      	ldr	r0, [r5, #0]
 801314e:	6869      	ldr	r1, [r5, #4]
 8013150:	c303      	stmia	r3!, {r0, r1}
 8013152:	4668      	mov	r0, sp
 8013154:	1d21      	adds	r1, r4, #4
 8013156:	f7ff ff15 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 801315a:	4668      	mov	r0, sp
 801315c:	f7ff ff55 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013160:	b988      	cbnz	r0, 8013186 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013162:	f8bd 3000 	ldrh.w	r3, [sp]
 8013166:	88a2      	ldrh	r2, [r4, #4]
 8013168:	4669      	mov	r1, sp
 801316a:	1a9b      	subs	r3, r3, r2
 801316c:	f8ad 3000 	strh.w	r3, [sp]
 8013170:	88e2      	ldrh	r2, [r4, #6]
 8013172:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013176:	4620      	mov	r0, r4
 8013178:	1a9b      	subs	r3, r3, r2
 801317a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801317e:	6823      	ldr	r3, [r4, #0]
 8013180:	4632      	mov	r2, r6
 8013182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013184:	4798      	blx	r3
 8013186:	69a4      	ldr	r4, [r4, #24]
 8013188:	e7db      	b.n	8013142 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801318a:	b002      	add	sp, #8
 801318c:	bd70      	pop	{r4, r5, r6, pc}

0801318e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801318e:	b513      	push	{r0, r1, r4, lr}
 8013190:	6803      	ldr	r3, [r0, #0]
 8013192:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8013196:	2300      	movs	r3, #0
 8013198:	e9cd 3300 	strd	r3, r3, [sp]
 801319c:	466b      	mov	r3, sp
 801319e:	47a0      	blx	r4
 80131a0:	b002      	add	sp, #8
 80131a2:	bd10      	pop	{r4, pc}

080131a4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80131a4:	2301      	movs	r3, #1
 80131a6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80131aa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80131ae:	4770      	bx	lr

080131b0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80131b0:	2301      	movs	r3, #1
 80131b2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80131b6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80131ba:	4770      	bx	lr

080131bc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80131bc:	2201      	movs	r2, #1
 80131be:	6843      	ldr	r3, [r0, #4]
 80131c0:	725a      	strb	r2, [r3, #9]
 80131c2:	6840      	ldr	r0, [r0, #4]
 80131c4:	6803      	ldr	r3, [r0, #0]
 80131c6:	691b      	ldr	r3, [r3, #16]
 80131c8:	4718      	bx	r3

080131ca <_ZN8touchgfx3HAL8flushDMAEv>:
 80131ca:	6840      	ldr	r0, [r0, #4]
 80131cc:	6803      	ldr	r3, [r0, #0]
 80131ce:	689b      	ldr	r3, [r3, #8]
 80131d0:	4718      	bx	r3

080131d2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80131d2:	b530      	push	{r4, r5, lr}
 80131d4:	b08b      	sub	sp, #44	; 0x2c
 80131d6:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80131da:	6804      	ldr	r4, [r0, #0]
 80131dc:	9509      	str	r5, [sp, #36]	; 0x24
 80131de:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80131e2:	9508      	str	r5, [sp, #32]
 80131e4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80131e8:	9507      	str	r5, [sp, #28]
 80131ea:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80131ee:	9506      	str	r5, [sp, #24]
 80131f0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80131f4:	9505      	str	r5, [sp, #20]
 80131f6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80131fa:	9504      	str	r5, [sp, #16]
 80131fc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8013200:	9503      	str	r5, [sp, #12]
 8013202:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013206:	9502      	str	r5, [sp, #8]
 8013208:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801320c:	e9cd 3500 	strd	r3, r5, [sp]
 8013210:	4613      	mov	r3, r2
 8013212:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8013214:	2200      	movs	r2, #0
 8013216:	47a0      	blx	r4
 8013218:	b00b      	add	sp, #44	; 0x2c
 801321a:	bd30      	pop	{r4, r5, pc}

0801321c <_ZN8touchgfx3HAL10beginFrameEv>:
 801321c:	4b04      	ldr	r3, [pc, #16]	; (8013230 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	b123      	cbz	r3, 801322c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013222:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8013226:	f080 0001 	eor.w	r0, r0, #1
 801322a:	4770      	bx	lr
 801322c:	2001      	movs	r0, #1
 801322e:	4770      	bx	lr
 8013230:	2004e116 	.word	0x2004e116

08013234 <_ZN8touchgfx3HAL8endFrameEv>:
 8013234:	b510      	push	{r4, lr}
 8013236:	4604      	mov	r4, r0
 8013238:	6840      	ldr	r0, [r0, #4]
 801323a:	6803      	ldr	r3, [r0, #0]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	4798      	blx	r3
 8013240:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8013244:	b113      	cbz	r3, 801324c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013246:	2301      	movs	r3, #1
 8013248:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801324c:	bd10      	pop	{r4, pc}

0801324e <_ZN8touchgfx3HAL10initializeEv>:
 801324e:	b510      	push	{r4, lr}
 8013250:	4604      	mov	r4, r0
 8013252:	f7fe f955 	bl	8011500 <_ZN8touchgfx10OSWrappers10initializeEv>
 8013256:	6860      	ldr	r0, [r4, #4]
 8013258:	6803      	ldr	r3, [r0, #0]
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	4798      	blx	r3
 801325e:	68e0      	ldr	r0, [r4, #12]
 8013260:	6803      	ldr	r3, [r0, #0]
 8013262:	689b      	ldr	r3, [r3, #8]
 8013264:	4798      	blx	r3
 8013266:	6823      	ldr	r3, [r4, #0]
 8013268:	4620      	mov	r0, r4
 801326a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801326e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013270:	4718      	bx	r3

08013272 <_ZN8touchgfx3HAL9taskEntryEv>:
 8013272:	4604      	mov	r4, r0
 8013274:	b508      	push	{r3, lr}
 8013276:	6803      	ldr	r3, [r0, #0]
 8013278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801327c:	4798      	blx	r3
 801327e:	6823      	ldr	r3, [r4, #0]
 8013280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013282:	4620      	mov	r0, r4
 8013284:	4798      	blx	r3
 8013286:	f7fe fa41 	bl	801170c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801328a:	6823      	ldr	r3, [r4, #0]
 801328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801328e:	e7f8      	b.n	8013282 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08013290 <_ZN8touchgfx3HAL4tickEv>:
 8013290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013292:	6803      	ldr	r3, [r0, #0]
 8013294:	4604      	mov	r4, r0
 8013296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801329a:	4798      	blx	r3
 801329c:	4d59      	ldr	r5, [pc, #356]	; (8013404 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801329e:	2800      	cmp	r0, #0
 80132a0:	f000 8095 	beq.w	80133ce <_ZN8touchgfx3HAL4tickEv+0x13e>
 80132a4:	2600      	movs	r6, #0
 80132a6:	2001      	movs	r0, #1
 80132a8:	f7fd fdc2 	bl	8010e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80132ac:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80132b0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80132b4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80132b8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80132bc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80132c0:	b133      	cbz	r3, 80132d0 <_ZN8touchgfx3HAL4tickEv+0x40>
 80132c2:	6823      	ldr	r3, [r4, #0]
 80132c4:	4620      	mov	r0, r4
 80132c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80132ca:	4798      	blx	r3
 80132cc:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80132d0:	2601      	movs	r6, #1
 80132d2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80132d6:	6862      	ldr	r2, [r4, #4]
 80132d8:	f083 0301 	eor.w	r3, r3, #1
 80132dc:	7253      	strb	r3, [r2, #9]
 80132de:	702e      	strb	r6, [r5, #0]
 80132e0:	f003 fd96 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 80132e4:	6803      	ldr	r3, [r0, #0]
 80132e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132e8:	4798      	blx	r3
 80132ea:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80132ee:	b90b      	cbnz	r3, 80132f4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80132f0:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80132f4:	f003 fd8c 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 80132f8:	6803      	ldr	r3, [r0, #0]
 80132fa:	695b      	ldr	r3, [r3, #20]
 80132fc:	4798      	blx	r3
 80132fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013300:	6803      	ldr	r3, [r0, #0]
 8013302:	691b      	ldr	r3, [r3, #16]
 8013304:	4798      	blx	r3
 8013306:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801330a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801330e:	3b01      	subs	r3, #1
 8013310:	b2db      	uxtb	r3, r3
 8013312:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013316:	b10a      	cbz	r2, 801331c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8013318:	2b00      	cmp	r3, #0
 801331a:	d1eb      	bne.n	80132f4 <_ZN8touchgfx3HAL4tickEv+0x64>
 801331c:	4a3a      	ldr	r2, [pc, #232]	; (8013408 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801331e:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8013322:	7813      	ldrb	r3, [r2, #0]
 8013324:	3301      	adds	r3, #1
 8013326:	b25b      	sxtb	r3, r3
 8013328:	4299      	cmp	r1, r3
 801332a:	7013      	strb	r3, [r2, #0]
 801332c:	dc10      	bgt.n	8013350 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801332e:	2300      	movs	r3, #0
 8013330:	68e0      	ldr	r0, [r4, #12]
 8013332:	7013      	strb	r3, [r2, #0]
 8013334:	6803      	ldr	r3, [r0, #0]
 8013336:	aa03      	add	r2, sp, #12
 8013338:	68db      	ldr	r3, [r3, #12]
 801333a:	a902      	add	r1, sp, #8
 801333c:	4798      	blx	r3
 801333e:	6823      	ldr	r3, [r4, #0]
 8013340:	2800      	cmp	r0, #0
 8013342:	d050      	beq.n	80133e6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8013344:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013348:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801334c:	4620      	mov	r0, r4
 801334e:	4798      	blx	r3
 8013350:	2300      	movs	r3, #0
 8013352:	6960      	ldr	r0, [r4, #20]
 8013354:	f88d 3007 	strb.w	r3, [sp, #7]
 8013358:	b158      	cbz	r0, 8013372 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801335a:	6803      	ldr	r3, [r0, #0]
 801335c:	f10d 0107 	add.w	r1, sp, #7
 8013360:	68db      	ldr	r3, [r3, #12]
 8013362:	4798      	blx	r3
 8013364:	b128      	cbz	r0, 8013372 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013366:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013368:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801336c:	6803      	ldr	r3, [r0, #0]
 801336e:	68db      	ldr	r3, [r3, #12]
 8013370:	4798      	blx	r3
 8013372:	f104 001c 	add.w	r0, r4, #28
 8013376:	f011 fe8f 	bl	8025098 <_ZN8touchgfx8Gestures4tickEv>
 801337a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801337e:	b30b      	cbz	r3, 80133c4 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013380:	6920      	ldr	r0, [r4, #16]
 8013382:	6803      	ldr	r3, [r0, #0]
 8013384:	691b      	ldr	r3, [r3, #16]
 8013386:	4798      	blx	r3
 8013388:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801338a:	4606      	mov	r6, r0
 801338c:	b903      	cbnz	r3, 8013390 <_ZN8touchgfx3HAL4tickEv+0x100>
 801338e:	6720      	str	r0, [r4, #112]	; 0x70
 8013390:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013392:	4a1e      	ldr	r2, [pc, #120]	; (801340c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013394:	1af3      	subs	r3, r6, r3
 8013396:	4293      	cmp	r3, r2
 8013398:	d914      	bls.n	80133c4 <_ZN8touchgfx3HAL4tickEv+0x134>
 801339a:	6920      	ldr	r0, [r4, #16]
 801339c:	6803      	ldr	r3, [r0, #0]
 801339e:	699b      	ldr	r3, [r3, #24]
 80133a0:	4798      	blx	r3
 80133a2:	2264      	movs	r2, #100	; 0x64
 80133a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80133a6:	1af3      	subs	r3, r6, r3
 80133a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80133ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80133b0:	2800      	cmp	r0, #0
 80133b2:	dc1d      	bgt.n	80133f0 <_ZN8touchgfx3HAL4tickEv+0x160>
 80133b4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80133b8:	6920      	ldr	r0, [r4, #16]
 80133ba:	2100      	movs	r1, #0
 80133bc:	6803      	ldr	r3, [r0, #0]
 80133be:	69db      	ldr	r3, [r3, #28]
 80133c0:	4798      	blx	r3
 80133c2:	6726      	str	r6, [r4, #112]	; 0x70
 80133c4:	f003 fd24 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 80133c8:	6803      	ldr	r3, [r0, #0]
 80133ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133cc:	4798      	blx	r3
 80133ce:	6823      	ldr	r3, [r4, #0]
 80133d0:	4620      	mov	r0, r4
 80133d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80133d6:	4798      	blx	r3
 80133d8:	2001      	movs	r0, #1
 80133da:	f7fd fd45 	bl	8010e68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80133de:	2300      	movs	r3, #0
 80133e0:	702b      	strb	r3, [r5, #0]
 80133e2:	b004      	add	sp, #16
 80133e4:	bd70      	pop	{r4, r5, r6, pc}
 80133e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80133ea:	4620      	mov	r0, r4
 80133ec:	4798      	blx	r3
 80133ee:	e7af      	b.n	8013350 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80133f0:	2863      	cmp	r0, #99	; 0x63
 80133f2:	bfcb      	itete	gt
 80133f4:	2300      	movgt	r3, #0
 80133f6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80133fa:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80133fe:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8013402:	e7d9      	b.n	80133b8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8013404:	2004e11c 	.word	0x2004e11c
 8013408:	2004e11d 	.word	0x2004e11d
 801340c:	05f5e100 	.word	0x05f5e100

08013410 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013410:	f7fe b90e 	b.w	8011630 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013414 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013414:	6581      	str	r1, [r0, #88]	; 0x58
 8013416:	301c      	adds	r0, #28
 8013418:	f011 be3c 	b.w	8025094 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801341c <_ZN8touchgfx3HAL5touchEll>:
 801341c:	b530      	push	{r4, r5, lr}
 801341e:	4604      	mov	r4, r0
 8013420:	b087      	sub	sp, #28
 8013422:	a804      	add	r0, sp, #16
 8013424:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013428:	f003 fa78 	bl	801691c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801342c:	9b04      	ldr	r3, [sp, #16]
 801342e:	a906      	add	r1, sp, #24
 8013430:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013434:	9b05      	ldr	r3, [sp, #20]
 8013436:	a803      	add	r0, sp, #12
 8013438:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801343c:	f003 fac0 	bl	80169c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013440:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013444:	f104 001c 	add.w	r0, r4, #28
 8013448:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801344c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013450:	b189      	cbz	r1, 8013476 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013452:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8013456:	9300      	str	r3, [sp, #0]
 8013458:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801345c:	4613      	mov	r3, r2
 801345e:	462a      	mov	r2, r5
 8013460:	f011 fe28 	bl	80250b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013464:	b128      	cbz	r0, 8013472 <_ZN8touchgfx3HAL5touchEll+0x56>
 8013466:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801346a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801346c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013470:	6623      	str	r3, [r4, #96]	; 0x60
 8013472:	b007      	add	sp, #28
 8013474:	bd30      	pop	{r4, r5, pc}
 8013476:	f011 fe5d 	bl	8025134 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801347a:	2301      	movs	r3, #1
 801347c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013480:	e7f1      	b.n	8013466 <_ZN8touchgfx3HAL5touchEll+0x4a>

08013482 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013482:	b510      	push	{r4, lr}
 8013484:	2b00      	cmp	r3, #0
 8013486:	d046      	beq.n	8013516 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013488:	ea81 0002 	eor.w	r0, r1, r2
 801348c:	07c4      	lsls	r4, r0, #31
 801348e:	d508      	bpl.n	80134a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013490:	440b      	add	r3, r1
 8013492:	3a01      	subs	r2, #1
 8013494:	428b      	cmp	r3, r1
 8013496:	d93e      	bls.n	8013516 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013498:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801349c:	f801 0b01 	strb.w	r0, [r1], #1
 80134a0:	e7f8      	b.n	8013494 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80134a2:	07d0      	lsls	r0, r2, #31
 80134a4:	bf42      	ittt	mi
 80134a6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80134aa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80134ae:	f801 0b01 	strbmi.w	r0, [r1], #1
 80134b2:	2b01      	cmp	r3, #1
 80134b4:	d911      	bls.n	80134da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80134b6:	ea81 0402 	eor.w	r4, r1, r2
 80134ba:	07a4      	lsls	r4, r4, #30
 80134bc:	4610      	mov	r0, r2
 80134be:	d022      	beq.n	8013506 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80134c0:	f023 0401 	bic.w	r4, r3, #1
 80134c4:	440c      	add	r4, r1
 80134c6:	428c      	cmp	r4, r1
 80134c8:	4602      	mov	r2, r0
 80134ca:	d904      	bls.n	80134d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80134cc:	8812      	ldrh	r2, [r2, #0]
 80134ce:	3002      	adds	r0, #2
 80134d0:	f821 2b02 	strh.w	r2, [r1], #2
 80134d4:	e7f7      	b.n	80134c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80134d6:	f003 0301 	and.w	r3, r3, #1
 80134da:	f023 0003 	bic.w	r0, r3, #3
 80134de:	4408      	add	r0, r1
 80134e0:	4288      	cmp	r0, r1
 80134e2:	4614      	mov	r4, r2
 80134e4:	d904      	bls.n	80134f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80134e6:	6824      	ldr	r4, [r4, #0]
 80134e8:	3204      	adds	r2, #4
 80134ea:	f841 4b04 	str.w	r4, [r1], #4
 80134ee:	e7f7      	b.n	80134e0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80134f0:	f003 0303 	and.w	r3, r3, #3
 80134f4:	440b      	add	r3, r1
 80134f6:	3a01      	subs	r2, #1
 80134f8:	428b      	cmp	r3, r1
 80134fa:	d90c      	bls.n	8013516 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80134fc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013500:	f801 0b01 	strb.w	r0, [r1], #1
 8013504:	e7f8      	b.n	80134f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8013506:	0790      	lsls	r0, r2, #30
 8013508:	d0e7      	beq.n	80134da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801350a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801350e:	3b02      	subs	r3, #2
 8013510:	f821 0b02 	strh.w	r0, [r1], #2
 8013514:	e7e1      	b.n	80134da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013516:	2001      	movs	r0, #1
 8013518:	bd10      	pop	{r4, pc}

0801351a <_ZN8touchgfx3HAL7noTouchEv>:
 801351a:	b510      	push	{r4, lr}
 801351c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8013520:	4604      	mov	r4, r0
 8013522:	b153      	cbz	r3, 801353a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013524:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8013528:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801352c:	2101      	movs	r1, #1
 801352e:	301c      	adds	r0, #28
 8013530:	f011 fe00 	bl	8025134 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013534:	2300      	movs	r3, #0
 8013536:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801353a:	bd10      	pop	{r4, pc}

0801353c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801353c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013540:	4604      	mov	r4, r0
 8013542:	2000      	movs	r0, #0
 8013544:	b085      	sub	sp, #20
 8013546:	ad04      	add	r5, sp, #16
 8013548:	f845 0d04 	str.w	r0, [r5, #-4]!
 801354c:	69a0      	ldr	r0, [r4, #24]
 801354e:	4699      	mov	r9, r3
 8013550:	6806      	ldr	r6, [r0, #0]
 8013552:	9501      	str	r5, [sp, #4]
 8013554:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8013558:	460f      	mov	r7, r1
 801355a:	9500      	str	r5, [sp, #0]
 801355c:	6835      	ldr	r5, [r6, #0]
 801355e:	4690      	mov	r8, r2
 8013560:	47a8      	blx	r5
 8013562:	4d10      	ldr	r5, [pc, #64]	; (80135a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013564:	4606      	mov	r6, r0
 8013566:	f8a5 9000 	strh.w	r9, [r5]
 801356a:	f7fa f93f 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 801356e:	6803      	ldr	r3, [r0, #0]
 8013570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013572:	4798      	blx	r3
 8013574:	b128      	cbz	r0, 8013582 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013576:	2801      	cmp	r0, #1
 8013578:	d00b      	beq.n	8013592 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801357a:	4630      	mov	r0, r6
 801357c:	b005      	add	sp, #20
 801357e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013582:	882b      	ldrh	r3, [r5, #0]
 8013584:	fb08 7203 	mla	r2, r8, r3, r7
 8013588:	9b03      	ldr	r3, [sp, #12]
 801358a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801358e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013590:	e7f3      	b.n	801357a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013592:	882a      	ldrh	r2, [r5, #0]
 8013594:	9b03      	ldr	r3, [sp, #12]
 8013596:	fb08 7202 	mla	r2, r8, r2, r7
 801359a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801359e:	1a9a      	subs	r2, r3, r2
 80135a0:	63e2      	str	r2, [r4, #60]	; 0x3c
 80135a2:	e7ea      	b.n	801357a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80135a4:	2004e112 	.word	0x2004e112

080135a8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80135a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135aa:	b08b      	sub	sp, #44	; 0x2c
 80135ac:	4617      	mov	r7, r2
 80135ae:	4604      	mov	r4, r0
 80135b0:	460e      	mov	r6, r1
 80135b2:	461d      	mov	r5, r3
 80135b4:	f7fa f91a 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 80135b8:	6803      	ldr	r3, [r0, #0]
 80135ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135bc:	4798      	blx	r3
 80135be:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80135c2:	9007      	str	r0, [sp, #28]
 80135c4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80135c8:	4b0d      	ldr	r3, [pc, #52]	; (8013600 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80135ca:	6822      	ldr	r2, [r4, #0]
 80135cc:	881b      	ldrh	r3, [r3, #0]
 80135ce:	4631      	mov	r1, r6
 80135d0:	9306      	str	r3, [sp, #24]
 80135d2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80135d6:	4620      	mov	r0, r4
 80135d8:	9305      	str	r3, [sp, #20]
 80135da:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80135de:	9304      	str	r3, [sp, #16]
 80135e0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80135e4:	9303      	str	r3, [sp, #12]
 80135e6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80135ea:	9302      	str	r3, [sp, #8]
 80135ec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80135f0:	e9cd 5300 	strd	r5, r3, [sp]
 80135f4:	463b      	mov	r3, r7
 80135f6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80135f8:	2200      	movs	r2, #0
 80135fa:	47a8      	blx	r5
 80135fc:	b00b      	add	sp, #44	; 0x2c
 80135fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013600:	2004e112 	.word	0x2004e112

08013604 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013608:	4698      	mov	r8, r3
 801360a:	6803      	ldr	r3, [r0, #0]
 801360c:	b08b      	sub	sp, #44	; 0x2c
 801360e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8013610:	4b14      	ldr	r3, [pc, #80]	; (8013664 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8013612:	4617      	mov	r7, r2
 8013614:	f8b3 9000 	ldrh.w	r9, [r3]
 8013618:	460e      	mov	r6, r1
 801361a:	4604      	mov	r4, r0
 801361c:	f7fa f8e6 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8013620:	6803      	ldr	r3, [r0, #0]
 8013622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013624:	4798      	blx	r3
 8013626:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801362a:	2200      	movs	r2, #0
 801362c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013630:	2302      	movs	r3, #2
 8013632:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8013636:	2301      	movs	r3, #1
 8013638:	9305      	str	r3, [sp, #20]
 801363a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801363e:	4631      	mov	r1, r6
 8013640:	9304      	str	r3, [sp, #16]
 8013642:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013646:	4620      	mov	r0, r4
 8013648:	9303      	str	r3, [sp, #12]
 801364a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801364e:	9302      	str	r3, [sp, #8]
 8013650:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013654:	e9cd 8300 	strd	r8, r3, [sp]
 8013658:	463b      	mov	r3, r7
 801365a:	47a8      	blx	r5
 801365c:	b00b      	add	sp, #44	; 0x2c
 801365e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013662:	bf00      	nop
 8013664:	2004e112 	.word	0x2004e112

08013668 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801366c:	4698      	mov	r8, r3
 801366e:	6803      	ldr	r3, [r0, #0]
 8013670:	b087      	sub	sp, #28
 8013672:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8013674:	4b10      	ldr	r3, [pc, #64]	; (80136b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8013676:	460e      	mov	r6, r1
 8013678:	f8b3 9000 	ldrh.w	r9, [r3]
 801367c:	4617      	mov	r7, r2
 801367e:	4604      	mov	r4, r0
 8013680:	f7fa f8b4 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8013684:	6803      	ldr	r3, [r0, #0]
 8013686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013688:	4798      	blx	r3
 801368a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801368e:	f8cd 900c 	str.w	r9, [sp, #12]
 8013692:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8013696:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801369a:	463a      	mov	r2, r7
 801369c:	9302      	str	r3, [sp, #8]
 801369e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80136a2:	4631      	mov	r1, r6
 80136a4:	9301      	str	r3, [sp, #4]
 80136a6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80136aa:	4620      	mov	r0, r4
 80136ac:	9300      	str	r3, [sp, #0]
 80136ae:	4643      	mov	r3, r8
 80136b0:	47a8      	blx	r5
 80136b2:	b007      	add	sp, #28
 80136b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136b8:	2004e112 	.word	0x2004e112

080136bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80136bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c0:	4604      	mov	r4, r0
 80136c2:	b08f      	sub	sp, #60	; 0x3c
 80136c4:	4610      	mov	r0, r2
 80136c6:	460d      	mov	r5, r1
 80136c8:	4691      	mov	r9, r2
 80136ca:	461e      	mov	r6, r3
 80136cc:	f005 ff54 	bl	8019578 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80136d0:	2800      	cmp	r0, #0
 80136d2:	f000 809d 	beq.w	8013810 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	4620      	mov	r0, r4
 80136da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136dc:	4798      	blx	r3
 80136de:	6823      	ldr	r3, [r4, #0]
 80136e0:	f8df b190 	ldr.w	fp, [pc, #400]	; 8013874 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80136e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136e6:	4620      	mov	r0, r4
 80136e8:	4798      	blx	r3
 80136ea:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8013878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80136ee:	f8bb 3000 	ldrh.w	r3, [fp]
 80136f2:	4f5d      	ldr	r7, [pc, #372]	; (8013868 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80136f4:	9301      	str	r3, [sp, #4]
 80136f6:	f8ba 3000 	ldrh.w	r3, [sl]
 80136fa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80136fe:	9302      	str	r3, [sp, #8]
 8013700:	883b      	ldrh	r3, [r7, #0]
 8013702:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8013706:	9303      	str	r3, [sp, #12]
 8013708:	4b58      	ldr	r3, [pc, #352]	; (801386c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801370a:	4640      	mov	r0, r8
 801370c:	881a      	ldrh	r2, [r3, #0]
 801370e:	9305      	str	r3, [sp, #20]
 8013710:	9204      	str	r2, [sp, #16]
 8013712:	f005 ffc5 	bl	80196a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013716:	8038      	strh	r0, [r7, #0]
 8013718:	4640      	mov	r0, r8
 801371a:	f005 fff5 	bl	8019708 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801371e:	9b05      	ldr	r3, [sp, #20]
 8013720:	b280      	uxth	r0, r0
 8013722:	8018      	strh	r0, [r3, #0]
 8013724:	4b52      	ldr	r3, [pc, #328]	; (8013870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d174      	bne.n	8013816 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801372c:	883b      	ldrh	r3, [r7, #0]
 801372e:	f8aa 0000 	strh.w	r0, [sl]
 8013732:	f8ab 3000 	strh.w	r3, [fp]
 8013736:	4648      	mov	r0, r9
 8013738:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801373c:	f005 ff1c 	bl	8019578 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013740:	2200      	movs	r2, #0
 8013742:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8013746:	4611      	mov	r1, r2
 8013748:	4628      	mov	r0, r5
 801374a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801374e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8013752:	f7f9 ff48 	bl	800d5e6 <_ZN8touchgfx8Drawable5setXYEss>
 8013756:	2301      	movs	r3, #1
 8013758:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801375c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8013760:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013764:	2b00      	cmp	r3, #0
 8013766:	dd5c      	ble.n	8013822 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013768:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801376c:	2b00      	cmp	r3, #0
 801376e:	dd58      	ble.n	8013822 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013770:	462a      	mov	r2, r5
 8013772:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013776:	ab0a      	add	r3, sp, #40	; 0x28
 8013778:	6851      	ldr	r1, [r2, #4]
 801377a:	c303      	stmia	r3!, {r0, r1}
 801377c:	4631      	mov	r1, r6
 801377e:	a80a      	add	r0, sp, #40	; 0x28
 8013780:	f7ff fc00 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 8013784:	2100      	movs	r1, #0
 8013786:	4b38      	ldr	r3, [pc, #224]	; (8013868 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013788:	910c      	str	r1, [sp, #48]	; 0x30
 801378a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801378e:	4b37      	ldr	r3, [pc, #220]	; (801386c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013790:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013798:	aa0a      	add	r2, sp, #40	; 0x28
 801379a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801379e:	ab08      	add	r3, sp, #32
 80137a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80137a8:	4618      	mov	r0, r3
 80137aa:	a90c      	add	r1, sp, #48	; 0x30
 80137ac:	f7ff fbea 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 80137b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d13c      	bne.n	8013830 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80137b6:	2000      	movs	r0, #0
 80137b8:	2600      	movs	r6, #0
 80137ba:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80137be:	696b      	ldr	r3, [r5, #20]
 80137c0:	682a      	ldr	r2, [r5, #0]
 80137c2:	616e      	str	r6, [r5, #20]
 80137c4:	9305      	str	r3, [sp, #20]
 80137c6:	6892      	ldr	r2, [r2, #8]
 80137c8:	a908      	add	r1, sp, #32
 80137ca:	4628      	mov	r0, r5
 80137cc:	4790      	blx	r2
 80137ce:	9b05      	ldr	r3, [sp, #20]
 80137d0:	4652      	mov	r2, sl
 80137d2:	616b      	str	r3, [r5, #20]
 80137d4:	4649      	mov	r1, r9
 80137d6:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80137da:	4628      	mov	r0, r5
 80137dc:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80137e0:	f7f9 ff01 	bl	800d5e6 <_ZN8touchgfx8Drawable5setXYEss>
 80137e4:	9a01      	ldr	r2, [sp, #4]
 80137e6:	4b23      	ldr	r3, [pc, #140]	; (8013874 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80137e8:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80137ec:	801a      	strh	r2, [r3, #0]
 80137ee:	9a02      	ldr	r2, [sp, #8]
 80137f0:	4b21      	ldr	r3, [pc, #132]	; (8013878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80137f2:	4620      	mov	r0, r4
 80137f4:	801a      	strh	r2, [r3, #0]
 80137f6:	9a03      	ldr	r2, [sp, #12]
 80137f8:	4b1b      	ldr	r3, [pc, #108]	; (8013868 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80137fa:	801a      	strh	r2, [r3, #0]
 80137fc:	4b1b      	ldr	r3, [pc, #108]	; (801386c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80137fe:	9a04      	ldr	r2, [sp, #16]
 8013800:	801a      	strh	r2, [r3, #0]
 8013802:	6823      	ldr	r3, [r4, #0]
 8013804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013806:	4798      	blx	r3
 8013808:	6823      	ldr	r3, [r4, #0]
 801380a:	4620      	mov	r0, r4
 801380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801380e:	4798      	blx	r3
 8013810:	b00f      	add	sp, #60	; 0x3c
 8013812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013816:	883b      	ldrh	r3, [r7, #0]
 8013818:	f8ab 0000 	strh.w	r0, [fp]
 801381c:	f8aa 3000 	strh.w	r3, [sl]
 8013820:	e789      	b.n	8013736 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8013822:	462a      	mov	r2, r5
 8013824:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013828:	ab0a      	add	r3, sp, #40	; 0x28
 801382a:	6851      	ldr	r1, [r2, #4]
 801382c:	c303      	stmia	r3!, {r0, r1}
 801382e:	e7a9      	b.n	8013784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8013830:	a807      	add	r0, sp, #28
 8013832:	f006 f8a5 	bl	8019980 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013836:	4606      	mov	r6, r0
 8013838:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801383a:	6803      	ldr	r3, [r0, #0]
 801383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801383e:	4798      	blx	r3
 8013840:	4286      	cmp	r6, r0
 8013842:	d1b8      	bne.n	80137b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8013844:	f7f9 ffd2 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8013848:	6803      	ldr	r3, [r0, #0]
 801384a:	4606      	mov	r6, r0
 801384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801384e:	a807      	add	r0, sp, #28
 8013850:	9305      	str	r3, [sp, #20]
 8013852:	f006 f895 	bl	8019980 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013856:	9b05      	ldr	r3, [sp, #20]
 8013858:	4601      	mov	r1, r0
 801385a:	4630      	mov	r0, r6
 801385c:	4798      	blx	r3
 801385e:	f080 0001 	eor.w	r0, r0, #1
 8013862:	b2c0      	uxtb	r0, r0
 8013864:	e7a8      	b.n	80137b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8013866:	bf00      	nop
 8013868:	2004e10c 	.word	0x2004e10c
 801386c:	2004e10e 	.word	0x2004e10e
 8013870:	2004e110 	.word	0x2004e110
 8013874:	2004e112 	.word	0x2004e112
 8013878:	2004e114 	.word	0x2004e114

0801387c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801387c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013880:	461d      	mov	r5, r3
 8013882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013886:	2400      	movs	r4, #0
 8013888:	b08a      	sub	sp, #40	; 0x28
 801388a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801388e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013892:	4690      	mov	r8, r2
 8013894:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013898:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801389c:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80138a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80138a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80138a8:	4607      	mov	r7, r0
 80138aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80138ae:	9404      	str	r4, [sp, #16]
 80138b0:	f88d 4020 	strb.w	r4, [sp, #32]
 80138b4:	f7fd fc30 	bl	8011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80138b8:	fb06 8505 	mla	r5, r6, r5, r8
 80138bc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	9505      	str	r5, [sp, #20]
 80138c4:	f8ad 601e 	strh.w	r6, [sp, #30]
 80138c8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80138cc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80138d0:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80138d4:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80138d8:	6803      	ldr	r3, [r0, #0]
 80138da:	a901      	add	r1, sp, #4
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	4798      	blx	r3
 80138e0:	b00a      	add	sp, #40	; 0x28
 80138e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138e6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80138e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138ea:	2400      	movs	r4, #0
 80138ec:	461d      	mov	r5, r3
 80138ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80138f2:	4691      	mov	r9, r2
 80138f4:	b08b      	sub	sp, #44	; 0x2c
 80138f6:	4688      	mov	r8, r1
 80138f8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80138fc:	4607      	mov	r7, r0
 80138fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013902:	9404      	str	r4, [sp, #16]
 8013904:	f7fd fc08 	bl	8011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013908:	fb06 9505 	mla	r5, r6, r5, r9
 801390c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013910:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013914:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013918:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	9505      	str	r5, [sp, #20]
 8013920:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013924:	f8ad 401c 	strh.w	r4, [sp, #28]
 8013928:	f8ad 601e 	strh.w	r6, [sp, #30]
 801392c:	f8cd 8010 	str.w	r8, [sp, #16]
 8013930:	f8ad 4020 	strh.w	r4, [sp, #32]
 8013934:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8013938:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801393c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8013940:	6803      	ldr	r3, [r0, #0]
 8013942:	a901      	add	r1, sp, #4
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	4798      	blx	r3
 8013948:	b00b      	add	sp, #44	; 0x2c
 801394a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013950 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8013950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013954:	4698      	mov	r8, r3
 8013956:	2300      	movs	r3, #0
 8013958:	b08a      	sub	sp, #40	; 0x28
 801395a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801395e:	4606      	mov	r6, r0
 8013960:	2d0b      	cmp	r5, #11
 8013962:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8013966:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801396a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801396e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8013972:	9304      	str	r3, [sp, #16]
 8013974:	d137      	bne.n	80139e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8013976:	2380      	movs	r3, #128	; 0x80
 8013978:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801397c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013980:	f88d 0020 	strb.w	r0, [sp, #32]
 8013984:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013988:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801398c:	4630      	mov	r0, r6
 801398e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013992:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013996:	9203      	str	r2, [sp, #12]
 8013998:	f8ad 301c 	strh.w	r3, [sp, #28]
 801399c:	f7fd fbbc 	bl	8011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80139a0:	2c0b      	cmp	r4, #11
 80139a2:	bf8c      	ite	hi
 80139a4:	2100      	movhi	r1, #0
 80139a6:	4b1b      	ldrls	r3, [pc, #108]	; (8013a14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80139a8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80139ac:	bf98      	it	ls
 80139ae:	5d19      	ldrbls	r1, [r3, r4]
 80139b0:	fb02 8307 	mla	r3, r2, r7, r8
 80139b4:	10c9      	asrs	r1, r1, #3
 80139b6:	fb01 0003 	mla	r0, r1, r3, r0
 80139ba:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80139be:	9005      	str	r0, [sp, #20]
 80139c0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80139c4:	2300      	movs	r3, #0
 80139c6:	6870      	ldr	r0, [r6, #4]
 80139c8:	f8ad 701e 	strh.w	r7, [sp, #30]
 80139cc:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80139d0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80139d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80139d8:	6803      	ldr	r3, [r0, #0]
 80139da:	a901      	add	r1, sp, #4
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	4798      	blx	r3
 80139e0:	b00a      	add	sp, #40	; 0x28
 80139e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139e6:	2d02      	cmp	r5, #2
 80139e8:	d109      	bne.n	80139fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80139ea:	28ff      	cmp	r0, #255	; 0xff
 80139ec:	d105      	bne.n	80139fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80139ee:	f1bc 0f00 	cmp.w	ip, #0
 80139f2:	bf14      	ite	ne
 80139f4:	2340      	movne	r3, #64	; 0x40
 80139f6:	2320      	moveq	r3, #32
 80139f8:	e7be      	b.n	8013978 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80139fa:	2340      	movs	r3, #64	; 0x40
 80139fc:	e7bc      	b.n	8013978 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80139fe:	28ff      	cmp	r0, #255	; 0xff
 8013a00:	d105      	bne.n	8013a0e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8013a02:	f1bc 0f00 	cmp.w	ip, #0
 8013a06:	bf14      	ite	ne
 8013a08:	2304      	movne	r3, #4
 8013a0a:	2301      	moveq	r3, #1
 8013a0c:	e7b4      	b.n	8013978 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013a0e:	2304      	movs	r3, #4
 8013a10:	e7b2      	b.n	8013978 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013a12:	bf00      	nop
 8013a14:	0802848c 	.word	0x0802848c

08013a18 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8013a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a1c:	b08b      	sub	sp, #44	; 0x2c
 8013a1e:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8013a22:	461d      	mov	r5, r3
 8013a24:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013a28:	bf14      	ite	ne
 8013a2a:	2308      	movne	r3, #8
 8013a2c:	2302      	moveq	r3, #2
 8013a2e:	2400      	movs	r4, #0
 8013a30:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8013a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a38:	4688      	mov	r8, r1
 8013a3a:	4693      	mov	fp, r2
 8013a3c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8013a40:	9404      	str	r4, [sp, #16]
 8013a42:	4607      	mov	r7, r0
 8013a44:	f7fd fb68 	bl	8011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a48:	2e0b      	cmp	r6, #11
 8013a4a:	bf98      	it	ls
 8013a4c:	4b15      	ldrls	r3, [pc, #84]	; (8013aa4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8013a4e:	fb05 b50a 	mla	r5, r5, sl, fp
 8013a52:	bf98      	it	ls
 8013a54:	5d9c      	ldrbls	r4, [r3, r6]
 8013a56:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013a5a:	10e4      	asrs	r4, r4, #3
 8013a5c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013a60:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013a64:	fb04 0405 	mla	r4, r4, r5, r0
 8013a68:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	9405      	str	r4, [sp, #20]
 8013a76:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013a7a:	f8ad a01e 	strh.w	sl, [sp, #30]
 8013a7e:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a82:	f88d 9020 	strb.w	r9, [sp, #32]
 8013a86:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8013a8a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013a8e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8013a92:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8013a96:	6803      	ldr	r3, [r0, #0]
 8013a98:	a901      	add	r1, sp, #4
 8013a9a:	685b      	ldr	r3, [r3, #4]
 8013a9c:	4798      	blx	r3
 8013a9e:	b00b      	add	sp, #44	; 0x2c
 8013aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aa4:	0802848c 	.word	0x0802848c

08013aa8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aac:	461e      	mov	r6, r3
 8013aae:	4b0a      	ldr	r3, [pc, #40]	; (8013ad8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013ab0:	460f      	mov	r7, r1
 8013ab2:	881d      	ldrh	r5, [r3, #0]
 8013ab4:	4690      	mov	r8, r2
 8013ab6:	f7f9 fe99 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8013aba:	6803      	ldr	r3, [r0, #0]
 8013abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013abe:	4798      	blx	r3
 8013ac0:	280b      	cmp	r0, #11
 8013ac2:	bf8e      	itee	hi
 8013ac4:	2400      	movhi	r4, #0
 8013ac6:	4b05      	ldrls	r3, [pc, #20]	; (8013adc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013ac8:	5c1c      	ldrbls	r4, [r3, r0]
 8013aca:	fb08 7005 	mla	r0, r8, r5, r7
 8013ace:	10e4      	asrs	r4, r4, #3
 8013ad0:	fb04 6000 	mla	r0, r4, r0, r6
 8013ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad8:	2004e112 	.word	0x2004e112
 8013adc:	0802848c 	.word	0x0802848c

08013ae0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ae2:	2500      	movs	r5, #0
 8013ae4:	b08b      	sub	sp, #44	; 0x2c
 8013ae6:	461f      	mov	r7, r3
 8013ae8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013aec:	4604      	mov	r4, r0
 8013aee:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013af2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013af6:	4616      	mov	r6, r2
 8013af8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013afc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013b00:	9504      	str	r5, [sp, #16]
 8013b02:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013b06:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013b0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013b0e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013b12:	f88d 3020 	strb.w	r3, [sp, #32]
 8013b16:	f7fd faff 	bl	8011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013b1a:	463a      	mov	r2, r7
 8013b1c:	4631      	mov	r1, r6
 8013b1e:	4603      	mov	r3, r0
 8013b20:	4620      	mov	r0, r4
 8013b22:	f7ff ffc1 	bl	8013aa8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013b26:	4b0e      	ldr	r3, [pc, #56]	; (8013b60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8013b28:	9005      	str	r0, [sp, #20]
 8013b2a:	881b      	ldrh	r3, [r3, #0]
 8013b2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013b30:	f7f9 fe5c 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8013b34:	6803      	ldr	r3, [r0, #0]
 8013b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b38:	4798      	blx	r3
 8013b3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013b3c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8013b40:	9304      	str	r3, [sp, #16]
 8013b42:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013b46:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8013b4a:	6860      	ldr	r0, [r4, #4]
 8013b4c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8013b50:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8013b54:	6803      	ldr	r3, [r0, #0]
 8013b56:	a901      	add	r1, sp, #4
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	4798      	blx	r3
 8013b5c:	b00b      	add	sp, #44	; 0x2c
 8013b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b60:	2004e112 	.word	0x2004e112

08013b64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b66:	b08d      	sub	sp, #52	; 0x34
 8013b68:	466b      	mov	r3, sp
 8013b6a:	e883 0006 	stmia.w	r3, {r1, r2}
 8013b6e:	2300      	movs	r3, #0
 8013b70:	2501      	movs	r5, #1
 8013b72:	9306      	str	r3, [sp, #24]
 8013b74:	6803      	ldr	r3, [r0, #0]
 8013b76:	9503      	str	r5, [sp, #12]
 8013b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b7a:	4604      	mov	r4, r0
 8013b7c:	f8bd 6000 	ldrh.w	r6, [sp]
 8013b80:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013b84:	4798      	blx	r3
 8013b86:	463a      	mov	r2, r7
 8013b88:	4631      	mov	r1, r6
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	f7ff ff8b 	bl	8013aa8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013b92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013b94:	9004      	str	r0, [sp, #16]
 8013b96:	9307      	str	r3, [sp, #28]
 8013b98:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013b9c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013ba0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013ba4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013ba8:	4b0e      	ldr	r3, [pc, #56]	; (8013be4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013baa:	881b      	ldrh	r3, [r3, #0]
 8013bac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013bb0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013bb4:	f7f9 fe1a 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8013bb8:	6803      	ldr	r3, [r0, #0]
 8013bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bbc:	4798      	blx	r3
 8013bbe:	23ff      	movs	r3, #255	; 0xff
 8013bc0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013bc4:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013bc8:	6860      	ldr	r0, [r4, #4]
 8013bca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013bce:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013bd2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013bd6:	6803      	ldr	r3, [r0, #0]
 8013bd8:	a903      	add	r1, sp, #12
 8013bda:	685b      	ldr	r3, [r3, #4]
 8013bdc:	4798      	blx	r3
 8013bde:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013be0:	b00d      	add	sp, #52	; 0x34
 8013be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013be4:	2004e112 	.word	0x2004e112

08013be8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bec:	b08c      	sub	sp, #48	; 0x30
 8013bee:	466d      	mov	r5, sp
 8013bf0:	461e      	mov	r6, r3
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	e885 0006 	stmia.w	r5, {r1, r2}
 8013bf8:	2501      	movs	r5, #1
 8013bfa:	9306      	str	r3, [sp, #24]
 8013bfc:	6803      	ldr	r3, [r0, #0]
 8013bfe:	9503      	str	r5, [sp, #12]
 8013c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c02:	4604      	mov	r4, r0
 8013c04:	f8bd 7000 	ldrh.w	r7, [sp]
 8013c08:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013c0c:	4798      	blx	r3
 8013c0e:	4642      	mov	r2, r8
 8013c10:	4639      	mov	r1, r7
 8013c12:	4603      	mov	r3, r0
 8013c14:	4620      	mov	r0, r4
 8013c16:	f7ff ff47 	bl	8013aa8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013c1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013c1e:	9004      	str	r0, [sp, #16]
 8013c20:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013c24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013c28:	9607      	str	r6, [sp, #28]
 8013c2a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013c2e:	4b10      	ldr	r3, [pc, #64]	; (8013c70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013c30:	881b      	ldrh	r3, [r3, #0]
 8013c32:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013c36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c38:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013c3c:	f7f9 fdd6 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8013c40:	6803      	ldr	r3, [r0, #0]
 8013c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c44:	4798      	blx	r3
 8013c46:	23ff      	movs	r3, #255	; 0xff
 8013c48:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013c4c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013c50:	6860      	ldr	r0, [r4, #4]
 8013c52:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013c56:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013c5a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013c5e:	6803      	ldr	r3, [r0, #0]
 8013c60:	a903      	add	r1, sp, #12
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	4798      	blx	r3
 8013c66:	4630      	mov	r0, r6
 8013c68:	b00c      	add	sp, #48	; 0x30
 8013c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c6e:	bf00      	nop
 8013c70:	2004e112 	.word	0x2004e112

08013c74 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c76:	b085      	sub	sp, #20
 8013c78:	ac02      	add	r4, sp, #8
 8013c7a:	e884 0006 	stmia.w	r4, {r1, r2}
 8013c7e:	4605      	mov	r5, r0
 8013c80:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013c84:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013c88:	f7fd fa46 	bl	8011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013c8c:	463a      	mov	r2, r7
 8013c8e:	4603      	mov	r3, r0
 8013c90:	4631      	mov	r1, r6
 8013c92:	4628      	mov	r0, r5
 8013c94:	f7ff ff08 	bl	8013aa8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013c98:	4a05      	ldr	r2, [pc, #20]	; (8013cb0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013c9a:	682b      	ldr	r3, [r5, #0]
 8013c9c:	8812      	ldrh	r2, [r2, #0]
 8013c9e:	9200      	str	r2, [sp, #0]
 8013ca0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8013ca2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	4628      	mov	r0, r5
 8013caa:	47b0      	blx	r6
 8013cac:	b005      	add	sp, #20
 8013cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cb0:	2004e112 	.word	0x2004e112

08013cb4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013cb4:	b570      	push	{r4, r5, r6, lr}
 8013cb6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8013cba:	4604      	mov	r4, r0
 8013cbc:	b19b      	cbz	r3, 8013ce6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013cbe:	2002      	movs	r0, #2
 8013cc0:	f7fd f8ee 	bl	8010ea0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013cca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8013cce:	6823      	ldr	r3, [r4, #0]
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8013cd6:	f7fd fa1f 	bl	8011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013cda:	462b      	mov	r3, r5
 8013cdc:	4601      	mov	r1, r0
 8013cde:	4620      	mov	r0, r4
 8013ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ce4:	4718      	bx	r3
 8013ce6:	bd70      	pop	{r4, r5, r6, pc}

08013ce8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013ce8:	b538      	push	{r3, r4, r5, lr}
 8013cea:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8013cee:	4604      	mov	r4, r0
 8013cf0:	428b      	cmp	r3, r1
 8013cf2:	460d      	mov	r5, r1
 8013cf4:	d006      	beq.n	8013d04 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013cf6:	6803      	ldr	r3, [r0, #0]
 8013cf8:	b929      	cbnz	r1, 8013d06 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013cfa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013cfe:	4798      	blx	r3
 8013d00:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8013d04:	bd38      	pop	{r3, r4, r5, pc}
 8013d06:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013d0a:	e7f8      	b.n	8013cfe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013d0c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013d0c:	b510      	push	{r4, lr}
 8013d0e:	4b0d      	ldr	r3, [pc, #52]	; (8013d44 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013d10:	4604      	mov	r4, r0
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	b95b      	cbnz	r3, 8013d2e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013d16:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013d1a:	2b02      	cmp	r3, #2
 8013d1c:	d007      	beq.n	8013d2e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013d1e:	6840      	ldr	r0, [r0, #4]
 8013d20:	f000 f926 	bl	8013f70 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013d24:	b118      	cbz	r0, 8013d2e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013d26:	6862      	ldr	r2, [r4, #4]
 8013d28:	7a53      	ldrb	r3, [r2, #9]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d0fc      	beq.n	8013d28 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013d2e:	f7fd fc5f 	bl	80115f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013d32:	4620      	mov	r0, r4
 8013d34:	2100      	movs	r1, #0
 8013d36:	f7ff ffd7 	bl	8013ce8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f7fd f9ec 	bl	8011118 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013d40:	bd10      	pop	{r4, pc}
 8013d42:	bf00      	nop
 8013d44:	2004e116 	.word	0x2004e116

08013d48 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8013d48:	b570      	push	{r4, r5, r6, lr}
 8013d4a:	4604      	mov	r4, r0
 8013d4c:	6803      	ldr	r3, [r0, #0]
 8013d4e:	b919      	cbnz	r1, 8013d58 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8013d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d56:	4718      	bx	r3
 8013d58:	2200      	movs	r2, #0
 8013d5a:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8013d5e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8013d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d64:	4798      	blx	r3
 8013d66:	4605      	mov	r5, r0
 8013d68:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	2101      	movs	r1, #1
 8013d70:	f7ff ffba 	bl	8013ce8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013d74:	4628      	mov	r0, r5
 8013d76:	bd70      	pop	{r4, r5, r6, pc}

08013d78 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013d78:	4770      	bx	lr

08013d7a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013d7a:	2000      	movs	r0, #0
 8013d7c:	4770      	bx	lr

08013d7e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013d7e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013d82:	1a13      	subs	r3, r2, r0
 8013d84:	4258      	negs	r0, r3
 8013d86:	4158      	adcs	r0, r3
 8013d88:	4770      	bx	lr

08013d8a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013d8a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013d8e:	1a9b      	subs	r3, r3, r2
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	bfdc      	itt	le
 8013d94:	6882      	ldrle	r2, [r0, #8]
 8013d96:	189b      	addle	r3, r3, r2
 8013d98:	2b01      	cmp	r3, #1
 8013d9a:	bfcc      	ite	gt
 8013d9c:	2000      	movgt	r0, #0
 8013d9e:	2001      	movle	r0, #1
 8013da0:	4770      	bx	lr

08013da2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013da2:	6902      	ldr	r2, [r0, #16]
 8013da4:	6843      	ldr	r3, [r0, #4]
 8013da6:	2024      	movs	r0, #36	; 0x24
 8013da8:	fb00 3002 	mla	r0, r0, r2, r3
 8013dac:	4770      	bx	lr

08013dae <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013dae:	6803      	ldr	r3, [r0, #0]
 8013db0:	691b      	ldr	r3, [r3, #16]
 8013db2:	4718      	bx	r3

08013db4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013db4:	2301      	movs	r3, #1
 8013db6:	b570      	push	{r4, r5, r6, lr}
 8013db8:	7203      	strb	r3, [r0, #8]
 8013dba:	4604      	mov	r4, r0
 8013dbc:	6840      	ldr	r0, [r0, #4]
 8013dbe:	6803      	ldr	r3, [r0, #0]
 8013dc0:	699b      	ldr	r3, [r3, #24]
 8013dc2:	4798      	blx	r3
 8013dc4:	6803      	ldr	r3, [r0, #0]
 8013dc6:	4605      	mov	r5, r0
 8013dc8:	2b40      	cmp	r3, #64	; 0x40
 8013dca:	d00c      	beq.n	8013de6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013dcc:	d810      	bhi.n	8013df0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013dce:	2b04      	cmp	r3, #4
 8013dd0:	d01d      	beq.n	8013e0e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013dd2:	d804      	bhi.n	8013dde <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013dd4:	2b01      	cmp	r3, #1
 8013dd6:	d006      	beq.n	8013de6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013dd8:	2b02      	cmp	r3, #2
 8013dda:	d02c      	beq.n	8013e36 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013ddc:	bd70      	pop	{r4, r5, r6, pc}
 8013dde:	2b08      	cmp	r3, #8
 8013de0:	d01d      	beq.n	8013e1e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013de2:	2b20      	cmp	r3, #32
 8013de4:	d1fa      	bne.n	8013ddc <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013de6:	6823      	ldr	r3, [r4, #0]
 8013de8:	4620      	mov	r0, r4
 8013dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dec:	4798      	blx	r3
 8013dee:	e013      	b.n	8013e18 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013df4:	d0f7      	beq.n	8013de6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013df6:	d804      	bhi.n	8013e02 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013df8:	2b80      	cmp	r3, #128	; 0x80
 8013dfa:	d0f4      	beq.n	8013de6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e00:	e7f0      	b.n	8013de4 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013e06:	d0ee      	beq.n	8013de6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e0c:	e7e5      	b.n	8013dda <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013e0e:	6823      	ldr	r3, [r4, #0]
 8013e10:	7f01      	ldrb	r1, [r0, #28]
 8013e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e14:	4620      	mov	r0, r4
 8013e16:	4798      	blx	r3
 8013e18:	6823      	ldr	r3, [r4, #0]
 8013e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e1c:	e006      	b.n	8013e2c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013e1e:	6823      	ldr	r3, [r4, #0]
 8013e20:	7f01      	ldrb	r1, [r0, #28]
 8013e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e24:	4620      	mov	r0, r4
 8013e26:	4798      	blx	r3
 8013e28:	6823      	ldr	r3, [r4, #0]
 8013e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e2c:	4629      	mov	r1, r5
 8013e2e:	4620      	mov	r0, r4
 8013e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e34:	4718      	bx	r3
 8013e36:	6823      	ldr	r3, [r4, #0]
 8013e38:	4620      	mov	r0, r4
 8013e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e3c:	4798      	blx	r3
 8013e3e:	e7f3      	b.n	8013e28 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013e40 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013e40:	4770      	bx	lr

08013e42 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013e42:	4770      	bx	lr

08013e44 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013e44:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013e48:	1ad2      	subs	r2, r2, r3
 8013e4a:	2a00      	cmp	r2, #0
 8013e4c:	b510      	push	{r4, lr}
 8013e4e:	bfdc      	itt	le
 8013e50:	6884      	ldrle	r4, [r0, #8]
 8013e52:	1912      	addle	r2, r2, r4
 8013e54:	2a01      	cmp	r2, #1
 8013e56:	dd16      	ble.n	8013e86 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013e58:	2424      	movs	r4, #36	; 0x24
 8013e5a:	6842      	ldr	r2, [r0, #4]
 8013e5c:	fb04 2303 	mla	r3, r4, r3, r2
 8013e60:	f101 0220 	add.w	r2, r1, #32
 8013e64:	f851 4b04 	ldr.w	r4, [r1], #4
 8013e68:	4291      	cmp	r1, r2
 8013e6a:	f843 4b04 	str.w	r4, [r3], #4
 8013e6e:	d1f9      	bne.n	8013e64 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013e70:	780a      	ldrb	r2, [r1, #0]
 8013e72:	701a      	strb	r2, [r3, #0]
 8013e74:	68c3      	ldr	r3, [r0, #12]
 8013e76:	6882      	ldr	r2, [r0, #8]
 8013e78:	3301      	adds	r3, #1
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	bfd8      	it	le
 8013e7e:	1a9b      	suble	r3, r3, r2
 8013e80:	f3bf 8f5b 	dmb	ish
 8013e84:	60c3      	str	r3, [r0, #12]
 8013e86:	bd10      	pop	{r4, pc}

08013e88 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013e88:	6903      	ldr	r3, [r0, #16]
 8013e8a:	6882      	ldr	r2, [r0, #8]
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	bfd8      	it	le
 8013e92:	1a9b      	suble	r3, r3, r2
 8013e94:	f3bf 8f5b 	dmb	ish
 8013e98:	6103      	str	r3, [r0, #16]
 8013e9a:	4770      	bx	lr

08013e9c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013e9c:	b570      	push	{r4, r5, r6, lr}
 8013e9e:	4604      	mov	r4, r0
 8013ea0:	460e      	mov	r6, r1
 8013ea2:	6860      	ldr	r0, [r4, #4]
 8013ea4:	6803      	ldr	r3, [r0, #0]
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	4798      	blx	r3
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	d1f9      	bne.n	8013ea2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013eae:	4d0d      	ldr	r5, [pc, #52]	; (8013ee4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013eb0:	6828      	ldr	r0, [r5, #0]
 8013eb2:	6803      	ldr	r3, [r0, #0]
 8013eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013eb6:	4798      	blx	r3
 8013eb8:	f7fd fbdc 	bl	8011674 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013ebc:	6828      	ldr	r0, [r5, #0]
 8013ebe:	2101      	movs	r1, #1
 8013ec0:	f7ff ff12 	bl	8013ce8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013ec4:	6860      	ldr	r0, [r4, #4]
 8013ec6:	4631      	mov	r1, r6
 8013ec8:	6803      	ldr	r3, [r0, #0]
 8013eca:	689b      	ldr	r3, [r3, #8]
 8013ecc:	4798      	blx	r3
 8013ece:	6823      	ldr	r3, [r4, #0]
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed4:	4798      	blx	r3
 8013ed6:	6828      	ldr	r0, [r5, #0]
 8013ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013edc:	6803      	ldr	r3, [r0, #0]
 8013ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ee0:	4718      	bx	r3
 8013ee2:	bf00      	nop
 8013ee4:	2004e118 	.word	0x2004e118

08013ee8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013ee8:	b508      	push	{r3, lr}
 8013eea:	f7fd fb81 	bl	80115f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013ef2:	f7fd bb9d 	b.w	8011630 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013ef6 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013ef6:	b510      	push	{r4, lr}
 8013ef8:	4604      	mov	r4, r0
 8013efa:	6840      	ldr	r0, [r0, #4]
 8013efc:	6803      	ldr	r3, [r0, #0]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	4798      	blx	r3
 8013f02:	b948      	cbnz	r0, 8013f18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013f04:	7a63      	ldrb	r3, [r4, #9]
 8013f06:	b13b      	cbz	r3, 8013f18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013f08:	7a23      	ldrb	r3, [r4, #8]
 8013f0a:	b92b      	cbnz	r3, 8013f18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013f0c:	6823      	ldr	r3, [r4, #0]
 8013f0e:	4620      	mov	r0, r4
 8013f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f16:	4718      	bx	r3
 8013f18:	bd10      	pop	{r4, pc}

08013f1a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013f1a:	b570      	push	{r4, r5, r6, lr}
 8013f1c:	4604      	mov	r4, r0
 8013f1e:	6840      	ldr	r0, [r0, #4]
 8013f20:	6803      	ldr	r3, [r0, #0]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	4798      	blx	r3
 8013f26:	4605      	mov	r5, r0
 8013f28:	b930      	cbnz	r0, 8013f38 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013f2a:	7a23      	ldrb	r3, [r4, #8]
 8013f2c:	b123      	cbz	r3, 8013f38 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013f2e:	6860      	ldr	r0, [r4, #4]
 8013f30:	6803      	ldr	r3, [r0, #0]
 8013f32:	695b      	ldr	r3, [r3, #20]
 8013f34:	4798      	blx	r3
 8013f36:	7225      	strb	r5, [r4, #8]
 8013f38:	6860      	ldr	r0, [r4, #4]
 8013f3a:	6803      	ldr	r3, [r0, #0]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	4798      	blx	r3
 8013f40:	b928      	cbnz	r0, 8013f4e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013f42:	6823      	ldr	r3, [r4, #0]
 8013f44:	4620      	mov	r0, r4
 8013f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f4c:	4718      	bx	r3
 8013f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f52:	f7fd bb9b 	b.w	801168c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013f58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013f58:	6082      	str	r2, [r0, #8]
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	b510      	push	{r4, lr}
 8013f5e:	4c03      	ldr	r4, [pc, #12]	; (8013f6c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013f60:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013f64:	e9c0 4100 	strd	r4, r1, [r0]
 8013f68:	bd10      	pop	{r4, pc}
 8013f6a:	bf00      	nop
 8013f6c:	080285c8 	.word	0x080285c8

08013f70 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013f70:	6840      	ldr	r0, [r0, #4]
 8013f72:	6803      	ldr	r3, [r0, #0]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	4718      	bx	r3

08013f78 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8013f78:	b508      	push	{r3, lr}
 8013f7a:	4b05      	ldr	r3, [pc, #20]	; (8013f90 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8013f7c:	6818      	ldr	r0, [r3, #0]
 8013f7e:	6803      	ldr	r3, [r0, #0]
 8013f80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013f84:	4798      	blx	r3
 8013f86:	1e43      	subs	r3, r0, #1
 8013f88:	4258      	negs	r0, r3
 8013f8a:	4158      	adcs	r0, r3
 8013f8c:	bd08      	pop	{r3, pc}
 8013f8e:	bf00      	nop
 8013f90:	2004e118 	.word	0x2004e118

08013f94 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8013f94:	b430      	push	{r4, r5}
 8013f96:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8013f9a:	8a02      	ldrh	r2, [r0, #16]
 8013f9c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8013fa0:	9202      	str	r2, [sp, #8]
 8013fa2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013fa6:	68c2      	ldr	r2, [r0, #12]
 8013fa8:	4629      	mov	r1, r5
 8013faa:	4620      	mov	r0, r4
 8013fac:	bc30      	pop	{r4, r5}
 8013fae:	f7fd bfe5 	b.w	8011f7c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08013fb2 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8013fb2:	f7fd bfcb 	b.w	8011f4c <_ZN8touchgfx5paint6rgb5658tearDownEv>

08013fb6 <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8013fbc:	cb03      	ldmia	r3!, {r0, r1}
 8013fbe:	6010      	str	r0, [r2, #0]
 8013fc0:	6051      	str	r1, [r2, #4]
 8013fc2:	4610      	mov	r0, r2
 8013fc4:	4770      	bx	lr

08013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8013fc6:	b507      	push	{r0, r1, r2, lr}
 8013fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013fcc:	ab01      	add	r3, sp, #4
 8013fce:	6809      	ldr	r1, [r1, #0]
 8013fd0:	6800      	ldr	r0, [r0, #0]
 8013fd2:	f004 f856 	bl	8018082 <_ZN8touchgfx6muldivElllRl>
 8013fd6:	b003      	add	sp, #12
 8013fd8:	f85d fb04 	ldr.w	pc, [sp], #4

08013fdc <_ZN8touchgfx7CWRUtil4sineEi>:
 8013fdc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8013fe0:	fb90 f2f3 	sdiv	r2, r0, r3
 8013fe4:	fb02 0013 	mls	r0, r2, r3, r0
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	bfb8      	it	lt
 8013fec:	18c0      	addlt	r0, r0, r3
 8013fee:	285a      	cmp	r0, #90	; 0x5a
 8013ff0:	4b09      	ldr	r3, [pc, #36]	; (8014018 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8013ff2:	dc02      	bgt.n	8013ffa <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8013ff4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013ff8:	4770      	bx	lr
 8013ffa:	28b4      	cmp	r0, #180	; 0xb4
 8013ffc:	dc02      	bgt.n	8014004 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8013ffe:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8014002:	e7f7      	b.n	8013ff4 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8014004:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8014008:	bfd4      	ite	le
 801400a:	38b4      	suble	r0, #180	; 0xb4
 801400c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8014010:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014014:	4240      	negs	r0, r0
 8014016:	4770      	bx	lr
 8014018:	0802862c 	.word	0x0802862c

0801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 801401c:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8014020:	fb90 f2f3 	sdiv	r2, r0, r3
 8014024:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014026:	fb02 0013 	mls	r0, r2, r3, r0
 801402a:	2800      	cmp	r0, #0
 801402c:	bfb8      	it	lt
 801402e:	18c0      	addlt	r0, r0, r3
 8014030:	1144      	asrs	r4, r0, #5
 8014032:	f000 061f 	and.w	r6, r0, #31
 8014036:	4620      	mov	r0, r4
 8014038:	f7ff ffd0 	bl	8013fdc <_ZN8touchgfx7CWRUtil4sineEi>
 801403c:	4605      	mov	r5, r0
 801403e:	b90e      	cbnz	r6, 8014044 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8014040:	b002      	add	sp, #8
 8014042:	bd70      	pop	{r4, r5, r6, pc}
 8014044:	1c60      	adds	r0, r4, #1
 8014046:	f7ff ffc9 	bl	8013fdc <_ZN8touchgfx7CWRUtil4sineEi>
 801404a:	ab01      	add	r3, sp, #4
 801404c:	2220      	movs	r2, #32
 801404e:	4631      	mov	r1, r6
 8014050:	1b40      	subs	r0, r0, r5
 8014052:	f004 f816 	bl	8018082 <_ZN8touchgfx6muldivElllRl>
 8014056:	4428      	add	r0, r5
 8014058:	e7f2      	b.n	8014040 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

0801405a <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 801405a:	b507      	push	{r0, r1, r2, lr}
 801405c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014060:	ab01      	add	r3, sp, #4
 8014062:	0140      	lsls	r0, r0, #5
 8014064:	f004 f80d 	bl	8018082 <_ZN8touchgfx6muldivElllRl>
 8014068:	2320      	movs	r3, #32
 801406a:	fb90 f0f3 	sdiv	r0, r0, r3
 801406e:	b003      	add	sp, #12
 8014070:	f85d fb04 	ldr.w	pc, [sp], #4

08014074 <_ZN8touchgfx13AbstractShapeC1Ev>:
 8014074:	b510      	push	{r4, lr}
 8014076:	4604      	mov	r4, r0
 8014078:	f000 fe28 	bl	8014ccc <_ZN8touchgfx12CanvasWidgetC1Ev>
 801407c:	4b07      	ldr	r3, [pc, #28]	; (801409c <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 801407e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014082:	6023      	str	r3, [r4, #0]
 8014084:	2300      	movs	r3, #0
 8014086:	e9c4 220e 	strd	r2, r2, [r4, #56]	; 0x38
 801408a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801408e:	6363      	str	r3, [r4, #52]	; 0x34
 8014090:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 8014094:	60a3      	str	r3, [r4, #8]
 8014096:	4620      	mov	r0, r4
 8014098:	bd10      	pop	{r4, pc}
 801409a:	bf00      	nop
 801409c:	080286ec 	.word	0x080286ec

080140a0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 80140a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140a4:	2500      	movs	r5, #0
 80140a6:	6803      	ldr	r3, [r0, #0]
 80140a8:	b087      	sub	sp, #28
 80140aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140ac:	4604      	mov	r4, r0
 80140ae:	4798      	blx	r3
 80140b0:	462e      	mov	r6, r5
 80140b2:	46a8      	mov	r8, r5
 80140b4:	462f      	mov	r7, r5
 80140b6:	46a9      	mov	r9, r5
 80140b8:	9000      	str	r0, [sp, #0]
 80140ba:	9b00      	ldr	r3, [sp, #0]
 80140bc:	429d      	cmp	r5, r3
 80140be:	da7d      	bge.n	80141bc <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x11c>
 80140c0:	6823      	ldr	r3, [r4, #0]
 80140c2:	4629      	mov	r1, r5
 80140c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80140c6:	4620      	mov	r0, r4
 80140c8:	4798      	blx	r3
 80140ca:	6823      	ldr	r3, [r4, #0]
 80140cc:	4682      	mov	sl, r0
 80140ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80140d0:	4629      	mov	r1, r5
 80140d2:	4620      	mov	r0, r4
 80140d4:	4798      	blx	r3
 80140d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80140d8:	4683      	mov	fp, r0
 80140da:	4650      	mov	r0, sl
 80140dc:	f7ff ffbd 	bl	801405a <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80140e0:	9002      	str	r0, [sp, #8]
 80140e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80140e4:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80140e8:	f7ff ff98 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80140ec:	a903      	add	r1, sp, #12
 80140ee:	9003      	str	r0, [sp, #12]
 80140f0:	a802      	add	r0, sp, #8
 80140f2:	f7ff ff68 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80140f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80140f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80140fa:	4402      	add	r2, r0
 80140fc:	4658      	mov	r0, fp
 80140fe:	9201      	str	r2, [sp, #4]
 8014100:	f7ff ffab 	bl	801405a <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014104:	9004      	str	r0, [sp, #16]
 8014106:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014108:	f7ff ff88 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801410c:	a905      	add	r1, sp, #20
 801410e:	9005      	str	r0, [sp, #20]
 8014110:	a804      	add	r0, sp, #16
 8014112:	f7ff ff58 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014116:	9a01      	ldr	r2, [sp, #4]
 8014118:	1a12      	subs	r2, r2, r0
 801411a:	b125      	cbz	r5, 8014126 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x86>
 801411c:	2320      	movs	r3, #32
 801411e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014122:	429f      	cmp	r7, r3
 8014124:	da03      	bge.n	801412e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8e>
 8014126:	2720      	movs	r7, #32
 8014128:	fb92 f7f7 	sdiv	r7, r2, r7
 801412c:	b125      	cbz	r5, 8014138 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x98>
 801412e:	2320      	movs	r3, #32
 8014130:	fb92 f3f3 	sdiv	r3, r2, r3
 8014134:	4599      	cmp	r9, r3
 8014136:	dd03      	ble.n	8014140 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa0>
 8014138:	f04f 0920 	mov.w	r9, #32
 801413c:	fb92 f9f9 	sdiv	r9, r2, r9
 8014140:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014142:	4658      	mov	r0, fp
 8014144:	9201      	str	r2, [sp, #4]
 8014146:	f7ff ff88 	bl	801405a <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801414a:	9002      	str	r0, [sp, #8]
 801414c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801414e:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014152:	f7ff ff63 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014156:	a903      	add	r1, sp, #12
 8014158:	9003      	str	r0, [sp, #12]
 801415a:	a802      	add	r0, sp, #8
 801415c:	f7ff ff33 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014160:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014162:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014164:	eb00 0b03 	add.w	fp, r0, r3
 8014168:	4650      	mov	r0, sl
 801416a:	f7ff ff76 	bl	801405a <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801416e:	9004      	str	r0, [sp, #16]
 8014170:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014172:	f7ff ff53 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014176:	a905      	add	r1, sp, #20
 8014178:	9005      	str	r0, [sp, #20]
 801417a:	a804      	add	r0, sp, #16
 801417c:	f7ff ff23 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014180:	9a01      	ldr	r2, [sp, #4]
 8014182:	eb00 030b 	add.w	r3, r0, fp
 8014186:	b125      	cbz	r5, 8014192 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf2>
 8014188:	2120      	movs	r1, #32
 801418a:	fb93 f1f1 	sdiv	r1, r3, r1
 801418e:	428e      	cmp	r6, r1
 8014190:	da03      	bge.n	801419a <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfa>
 8014192:	2620      	movs	r6, #32
 8014194:	fb93 f6f6 	sdiv	r6, r3, r6
 8014198:	b125      	cbz	r5, 80141a4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x104>
 801419a:	2120      	movs	r1, #32
 801419c:	fb93 f1f1 	sdiv	r1, r3, r1
 80141a0:	4588      	cmp	r8, r1
 80141a2:	dd03      	ble.n	80141ac <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x10c>
 80141a4:	f04f 0820 	mov.w	r8, #32
 80141a8:	fb93 f8f8 	sdiv	r8, r3, r8
 80141ac:	6821      	ldr	r1, [r4, #0]
 80141ae:	4620      	mov	r0, r4
 80141b0:	f8d1 a080 	ldr.w	sl, [r1, #128]	; 0x80
 80141b4:	4629      	mov	r1, r5
 80141b6:	47d0      	blx	sl
 80141b8:	3501      	adds	r5, #1
 80141ba:	e77e      	b.n	80140ba <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 80141bc:	3701      	adds	r7, #1
 80141be:	3601      	adds	r6, #1
 80141c0:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
 80141c4:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
 80141c8:	eba7 0909 	sub.w	r9, r7, r9
 80141cc:	eba6 0808 	sub.w	r8, r6, r8
 80141d0:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 80141d4:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 80141d8:	b007      	add	sp, #28
 80141da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080141e0 <_ZN8touchgfx6CanvasD1Ev>:
 80141e0:	b510      	push	{r4, lr}
 80141e2:	4604      	mov	r4, r0
 80141e4:	4b03      	ldr	r3, [pc, #12]	; (80141f4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80141e6:	f840 3b20 	str.w	r3, [r0], #32
 80141ea:	f000 fed9 	bl	8014fa0 <_ZN8touchgfx7OutlineD1Ev>
 80141ee:	4620      	mov	r0, r4
 80141f0:	bd10      	pop	{r4, pc}
 80141f2:	bf00      	nop
 80141f4:	08028624 	.word	0x08028624

080141f8 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 80141f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141fa:	4604      	mov	r4, r0
 80141fc:	b09d      	sub	sp, #116	; 0x74
 80141fe:	460a      	mov	r2, r1
 8014200:	4601      	mov	r1, r0
 8014202:	4668      	mov	r0, sp
 8014204:	f011 f8e4 	bl	80253d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014208:	6823      	ldr	r3, [r4, #0]
 801420a:	4620      	mov	r0, r4
 801420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801420e:	4798      	blx	r3
 8014210:	4606      	mov	r6, r0
 8014212:	2800      	cmp	r0, #0
 8014214:	d037      	beq.n	8014286 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x8e>
 8014216:	6823      	ldr	r3, [r4, #0]
 8014218:	2100      	movs	r1, #0
 801421a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801421e:	4620      	mov	r0, r4
 8014220:	4798      	blx	r3
 8014222:	6823      	ldr	r3, [r4, #0]
 8014224:	4605      	mov	r5, r0
 8014226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801422a:	2100      	movs	r1, #0
 801422c:	4620      	mov	r0, r4
 801422e:	4798      	blx	r3
 8014230:	4629      	mov	r1, r5
 8014232:	4602      	mov	r2, r0
 8014234:	4668      	mov	r0, sp
 8014236:	f011 faa1 	bl	802577c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801423a:	2501      	movs	r5, #1
 801423c:	42b5      	cmp	r5, r6
 801423e:	da17      	bge.n	8014270 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x78>
 8014240:	6823      	ldr	r3, [r4, #0]
 8014242:	4629      	mov	r1, r5
 8014244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014248:	4620      	mov	r0, r4
 801424a:	4798      	blx	r3
 801424c:	6823      	ldr	r3, [r4, #0]
 801424e:	4607      	mov	r7, r0
 8014250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014254:	4629      	mov	r1, r5
 8014256:	4620      	mov	r0, r4
 8014258:	4798      	blx	r3
 801425a:	4639      	mov	r1, r7
 801425c:	4602      	mov	r2, r0
 801425e:	4668      	mov	r0, sp
 8014260:	f011 f964 	bl	802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014264:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014268:	429a      	cmp	r2, r3
 801426a:	d80e      	bhi.n	801428a <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x92>
 801426c:	3501      	adds	r5, #1
 801426e:	e7e5      	b.n	801423c <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x44>
 8014270:	21ff      	movs	r1, #255	; 0xff
 8014272:	4668      	mov	r0, sp
 8014274:	f011 f9d6 	bl	8025624 <_ZN8touchgfx6Canvas6renderEh>
 8014278:	4604      	mov	r4, r0
 801427a:	4668      	mov	r0, sp
 801427c:	f7ff ffb0 	bl	80141e0 <_ZN8touchgfx6CanvasD1Ev>
 8014280:	4620      	mov	r0, r4
 8014282:	b01d      	add	sp, #116	; 0x74
 8014284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014286:	2401      	movs	r4, #1
 8014288:	e7f7      	b.n	801427a <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 801428a:	2400      	movs	r4, #0
 801428c:	e7f5      	b.n	801427a <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>

0801428e <_ZN8touchgfx6CanvasD0Ev>:
 801428e:	b510      	push	{r4, lr}
 8014290:	4604      	mov	r4, r0
 8014292:	f7ff ffa5 	bl	80141e0 <_ZN8touchgfx6CanvasD1Ev>
 8014296:	4620      	mov	r0, r4
 8014298:	2170      	movs	r1, #112	; 0x70
 801429a:	f011 fac1 	bl	8025820 <_ZdlPvj>
 801429e:	4620      	mov	r0, r4
 80142a0:	bd10      	pop	{r4, pc}

080142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 80142a2:	b508      	push	{r3, lr}
 80142a4:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80142a8:	f7ff feb8 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80142ac:	bd08      	pop	{r3, pc}
	...

080142b0 <_ZN8touchgfx6CircleC1Ev>:
 80142b0:	b510      	push	{r4, lr}
 80142b2:	4604      	mov	r4, r0
 80142b4:	f000 fd0a 	bl	8014ccc <_ZN8touchgfx12CanvasWidgetC1Ev>
 80142b8:	4b08      	ldr	r3, [pc, #32]	; (80142dc <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80142ba:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80142be:	6023      	str	r3, [r4, #0]
 80142c0:	2300      	movs	r3, #0
 80142c2:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 80142c6:	f24b 4205 	movw	r2, #46085	; 0xb405
 80142ca:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80142ce:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80142d2:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 80142d6:	60a3      	str	r3, [r4, #8]
 80142d8:	4620      	mov	r0, r4
 80142da:	bd10      	pop	{r4, pc}
 80142dc:	08028780 	.word	0x08028780

080142e0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80142e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e4:	4680      	mov	r8, r0
 80142e6:	4610      	mov	r0, r2
 80142e8:	428a      	cmp	r2, r1
 80142ea:	bfa8      	it	ge
 80142ec:	460a      	movge	r2, r1
 80142ee:	4699      	mov	r9, r3
 80142f0:	bfac      	ite	ge
 80142f2:	4603      	movge	r3, r0
 80142f4:	460b      	movlt	r3, r1
 80142f6:	1a99      	subs	r1, r3, r2
 80142f8:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 80142fc:	bfa4      	itt	ge
 80142fe:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8014302:	2200      	movge	r2, #0
 8014304:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 8014308:	b085      	sub	sp, #20
 801430a:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 801430e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014310:	9300      	str	r3, [sp, #0]
 8014312:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 8014316:	f102 0b01 	add.w	fp, r2, #1
 801431a:	2c00      	cmp	r4, #0
 801431c:	f040 80af 	bne.w	801447e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19e>
 8014320:	4610      	mov	r0, r2
 8014322:	9201      	str	r2, [sp, #4]
 8014324:	f7ff fe7a 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014328:	a903      	add	r1, sp, #12
 801432a:	9003      	str	r0, [sp, #12]
 801432c:	4650      	mov	r0, sl
 801432e:	f7ff fe4a 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014332:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8014336:	9a01      	ldr	r2, [sp, #4]
 8014338:	4408      	add	r0, r1
 801433a:	f8d9 1000 	ldr.w	r1, [r9]
 801433e:	4281      	cmp	r1, r0
 8014340:	bfc8      	it	gt
 8014342:	f8c9 0000 	strgt.w	r0, [r9]
 8014346:	6839      	ldr	r1, [r7, #0]
 8014348:	4288      	cmp	r0, r1
 801434a:	bfc8      	it	gt
 801434c:	6038      	strgt	r0, [r7, #0]
 801434e:	4610      	mov	r0, r2
 8014350:	f7ff ffa7 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014354:	a903      	add	r1, sp, #12
 8014356:	9003      	str	r0, [sp, #12]
 8014358:	4650      	mov	r0, sl
 801435a:	f7ff fe34 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801435e:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8014362:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014366:	1a10      	subs	r0, r2, r0
 8014368:	6832      	ldr	r2, [r6, #0]
 801436a:	4282      	cmp	r2, r0
 801436c:	bfc8      	it	gt
 801436e:	6030      	strgt	r0, [r6, #0]
 8014370:	682a      	ldr	r2, [r5, #0]
 8014372:	4290      	cmp	r0, r2
 8014374:	fb9b f2f1 	sdiv	r2, fp, r1
 8014378:	fb01 b212 	mls	r2, r1, r2, fp
 801437c:	eba1 0202 	sub.w	r2, r1, r2
 8014380:	bfc8      	it	gt
 8014382:	6028      	strgt	r0, [r5, #0]
 8014384:	fb92 f0f1 	sdiv	r0, r2, r1
 8014388:	fb01 2210 	mls	r2, r1, r0, r2
 801438c:	4493      	add	fp, r2
 801438e:	9b00      	ldr	r3, [sp, #0]
 8014390:	455b      	cmp	r3, fp
 8014392:	db2a      	blt.n	80143ea <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x10a>
 8014394:	4658      	mov	r0, fp
 8014396:	f7ff fe41 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801439a:	a903      	add	r1, sp, #12
 801439c:	9003      	str	r0, [sp, #12]
 801439e:	4650      	mov	r0, sl
 80143a0:	f7ff fe11 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80143a4:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80143a8:	4410      	add	r0, r2
 80143aa:	f8d9 2000 	ldr.w	r2, [r9]
 80143ae:	4282      	cmp	r2, r0
 80143b0:	bfc8      	it	gt
 80143b2:	f8c9 0000 	strgt.w	r0, [r9]
 80143b6:	683a      	ldr	r2, [r7, #0]
 80143b8:	4290      	cmp	r0, r2
 80143ba:	bfc8      	it	gt
 80143bc:	6038      	strgt	r0, [r7, #0]
 80143be:	4658      	mov	r0, fp
 80143c0:	f7ff ff6f 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80143c4:	a903      	add	r1, sp, #12
 80143c6:	9003      	str	r0, [sp, #12]
 80143c8:	4650      	mov	r0, sl
 80143ca:	f7ff fdfc 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80143ce:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80143d2:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 80143d6:	1a10      	subs	r0, r2, r0
 80143d8:	6832      	ldr	r2, [r6, #0]
 80143da:	4282      	cmp	r2, r0
 80143dc:	bfc8      	it	gt
 80143de:	6030      	strgt	r0, [r6, #0]
 80143e0:	682a      	ldr	r2, [r5, #0]
 80143e2:	4290      	cmp	r0, r2
 80143e4:	bfc8      	it	gt
 80143e6:	6028      	strgt	r0, [r5, #0]
 80143e8:	e7d1      	b.n	801438e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xae>
 80143ea:	9b00      	ldr	r3, [sp, #0]
 80143ec:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 80143f0:	455b      	cmp	r3, fp
 80143f2:	dd27      	ble.n	8014444 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x164>
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7ff fe11 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80143fa:	a903      	add	r1, sp, #12
 80143fc:	9003      	str	r0, [sp, #12]
 80143fe:	4650      	mov	r0, sl
 8014400:	f7ff fde1 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014404:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014408:	4410      	add	r0, r2
 801440a:	f8d9 2000 	ldr.w	r2, [r9]
 801440e:	4282      	cmp	r2, r0
 8014410:	bfc8      	it	gt
 8014412:	f8c9 0000 	strgt.w	r0, [r9]
 8014416:	683a      	ldr	r2, [r7, #0]
 8014418:	4290      	cmp	r0, r2
 801441a:	bfc8      	it	gt
 801441c:	6038      	strgt	r0, [r7, #0]
 801441e:	9800      	ldr	r0, [sp, #0]
 8014420:	f7ff ff3f 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014424:	a903      	add	r1, sp, #12
 8014426:	9003      	str	r0, [sp, #12]
 8014428:	4650      	mov	r0, sl
 801442a:	f7ff fdcc 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801442e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014432:	1a10      	subs	r0, r2, r0
 8014434:	6832      	ldr	r2, [r6, #0]
 8014436:	4282      	cmp	r2, r0
 8014438:	bfc8      	it	gt
 801443a:	6030      	strgt	r0, [r6, #0]
 801443c:	682a      	ldr	r2, [r5, #0]
 801443e:	4290      	cmp	r0, r2
 8014440:	bfc8      	it	gt
 8014442:	6028      	strgt	r0, [r5, #0]
 8014444:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014448:	f8d9 1000 	ldr.w	r1, [r9]
 801444c:	4291      	cmp	r1, r2
 801444e:	bfc8      	it	gt
 8014450:	f8c9 2000 	strgt.w	r2, [r9]
 8014454:	683a      	ldr	r2, [r7, #0]
 8014456:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 801445a:	429a      	cmp	r2, r3
 801445c:	bfb8      	it	lt
 801445e:	603b      	strlt	r3, [r7, #0]
 8014460:	6832      	ldr	r2, [r6, #0]
 8014462:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8014466:	429a      	cmp	r2, r3
 8014468:	bfc8      	it	gt
 801446a:	6033      	strgt	r3, [r6, #0]
 801446c:	682a      	ldr	r2, [r5, #0]
 801446e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8014472:	429a      	cmp	r2, r3
 8014474:	da00      	bge.n	8014478 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 8014476:	602b      	str	r3, [r5, #0]
 8014478:	b005      	add	sp, #20
 801447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801447e:	2002      	movs	r0, #2
 8014480:	3401      	adds	r4, #1
 8014482:	fb94 f4f0 	sdiv	r4, r4, r0
 8014486:	4610      	mov	r0, r2
 8014488:	9201      	str	r2, [sp, #4]
 801448a:	f7ff fdc7 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801448e:	a903      	add	r1, sp, #12
 8014490:	9003      	str	r0, [sp, #12]
 8014492:	4650      	mov	r0, sl
 8014494:	f7ff fd97 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014498:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 801449c:	9a01      	ldr	r2, [sp, #4]
 801449e:	4408      	add	r0, r1
 80144a0:	f8d9 1000 	ldr.w	r1, [r9]
 80144a4:	1b03      	subs	r3, r0, r4
 80144a6:	4299      	cmp	r1, r3
 80144a8:	bfc8      	it	gt
 80144aa:	f8c9 3000 	strgt.w	r3, [r9]
 80144ae:	6839      	ldr	r1, [r7, #0]
 80144b0:	4420      	add	r0, r4
 80144b2:	428b      	cmp	r3, r1
 80144b4:	bfc8      	it	gt
 80144b6:	603b      	strgt	r3, [r7, #0]
 80144b8:	f8d9 1000 	ldr.w	r1, [r9]
 80144bc:	4281      	cmp	r1, r0
 80144be:	bfc8      	it	gt
 80144c0:	f8c9 0000 	strgt.w	r0, [r9]
 80144c4:	6839      	ldr	r1, [r7, #0]
 80144c6:	4288      	cmp	r0, r1
 80144c8:	bfc8      	it	gt
 80144ca:	6038      	strgt	r0, [r7, #0]
 80144cc:	4610      	mov	r0, r2
 80144ce:	f7ff fee8 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80144d2:	a903      	add	r1, sp, #12
 80144d4:	9003      	str	r0, [sp, #12]
 80144d6:	4650      	mov	r0, sl
 80144d8:	f7ff fd75 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80144dc:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80144e0:	1a10      	subs	r0, r2, r0
 80144e2:	6832      	ldr	r2, [r6, #0]
 80144e4:	1b01      	subs	r1, r0, r4
 80144e6:	428a      	cmp	r2, r1
 80144e8:	bfc8      	it	gt
 80144ea:	6031      	strgt	r1, [r6, #0]
 80144ec:	682a      	ldr	r2, [r5, #0]
 80144ee:	4420      	add	r0, r4
 80144f0:	4291      	cmp	r1, r2
 80144f2:	bfc8      	it	gt
 80144f4:	6029      	strgt	r1, [r5, #0]
 80144f6:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80144fa:	6832      	ldr	r2, [r6, #0]
 80144fc:	4282      	cmp	r2, r0
 80144fe:	bfc8      	it	gt
 8014500:	6030      	strgt	r0, [r6, #0]
 8014502:	682a      	ldr	r2, [r5, #0]
 8014504:	4290      	cmp	r0, r2
 8014506:	fb9b f2f1 	sdiv	r2, fp, r1
 801450a:	fb01 b212 	mls	r2, r1, r2, fp
 801450e:	eba1 0202 	sub.w	r2, r1, r2
 8014512:	bfc8      	it	gt
 8014514:	6028      	strgt	r0, [r5, #0]
 8014516:	fb92 f0f1 	sdiv	r0, r2, r1
 801451a:	fb01 2210 	mls	r2, r1, r0, r2
 801451e:	4493      	add	fp, r2
 8014520:	9b00      	ldr	r3, [sp, #0]
 8014522:	455b      	cmp	r3, fp
 8014524:	db40      	blt.n	80145a8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c8>
 8014526:	4658      	mov	r0, fp
 8014528:	f7ff fd78 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801452c:	a903      	add	r1, sp, #12
 801452e:	9003      	str	r0, [sp, #12]
 8014530:	4650      	mov	r0, sl
 8014532:	f7ff fd48 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014536:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801453a:	4410      	add	r0, r2
 801453c:	f8d9 2000 	ldr.w	r2, [r9]
 8014540:	1b01      	subs	r1, r0, r4
 8014542:	428a      	cmp	r2, r1
 8014544:	bfc8      	it	gt
 8014546:	f8c9 1000 	strgt.w	r1, [r9]
 801454a:	683a      	ldr	r2, [r7, #0]
 801454c:	4420      	add	r0, r4
 801454e:	4291      	cmp	r1, r2
 8014550:	bfc8      	it	gt
 8014552:	6039      	strgt	r1, [r7, #0]
 8014554:	f8d9 2000 	ldr.w	r2, [r9]
 8014558:	4282      	cmp	r2, r0
 801455a:	bfc8      	it	gt
 801455c:	f8c9 0000 	strgt.w	r0, [r9]
 8014560:	683a      	ldr	r2, [r7, #0]
 8014562:	4290      	cmp	r0, r2
 8014564:	bfc8      	it	gt
 8014566:	6038      	strgt	r0, [r7, #0]
 8014568:	4658      	mov	r0, fp
 801456a:	f7ff fe9a 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801456e:	a903      	add	r1, sp, #12
 8014570:	9003      	str	r0, [sp, #12]
 8014572:	4650      	mov	r0, sl
 8014574:	f7ff fd27 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014578:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801457c:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 8014580:	1a10      	subs	r0, r2, r0
 8014582:	6832      	ldr	r2, [r6, #0]
 8014584:	1b01      	subs	r1, r0, r4
 8014586:	428a      	cmp	r2, r1
 8014588:	bfc8      	it	gt
 801458a:	6031      	strgt	r1, [r6, #0]
 801458c:	682a      	ldr	r2, [r5, #0]
 801458e:	4420      	add	r0, r4
 8014590:	4291      	cmp	r1, r2
 8014592:	bfc8      	it	gt
 8014594:	6029      	strgt	r1, [r5, #0]
 8014596:	6832      	ldr	r2, [r6, #0]
 8014598:	4282      	cmp	r2, r0
 801459a:	bfc8      	it	gt
 801459c:	6030      	strgt	r0, [r6, #0]
 801459e:	682a      	ldr	r2, [r5, #0]
 80145a0:	4290      	cmp	r0, r2
 80145a2:	bfc8      	it	gt
 80145a4:	6028      	strgt	r0, [r5, #0]
 80145a6:	e7bb      	b.n	8014520 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x240>
 80145a8:	9b00      	ldr	r3, [sp, #0]
 80145aa:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 80145ae:	455b      	cmp	r3, fp
 80145b0:	f77f af62 	ble.w	8014478 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7ff fd31 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80145ba:	a903      	add	r1, sp, #12
 80145bc:	9003      	str	r0, [sp, #12]
 80145be:	4650      	mov	r0, sl
 80145c0:	f7ff fd01 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80145c4:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80145c8:	4410      	add	r0, r2
 80145ca:	f8d9 2000 	ldr.w	r2, [r9]
 80145ce:	1b01      	subs	r1, r0, r4
 80145d0:	428a      	cmp	r2, r1
 80145d2:	bfc8      	it	gt
 80145d4:	f8c9 1000 	strgt.w	r1, [r9]
 80145d8:	683a      	ldr	r2, [r7, #0]
 80145da:	4420      	add	r0, r4
 80145dc:	4291      	cmp	r1, r2
 80145de:	bfc8      	it	gt
 80145e0:	6039      	strgt	r1, [r7, #0]
 80145e2:	f8d9 2000 	ldr.w	r2, [r9]
 80145e6:	4282      	cmp	r2, r0
 80145e8:	bfc8      	it	gt
 80145ea:	f8c9 0000 	strgt.w	r0, [r9]
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	4298      	cmp	r0, r3
 80145f2:	bfc8      	it	gt
 80145f4:	6038      	strgt	r0, [r7, #0]
 80145f6:	9800      	ldr	r0, [sp, #0]
 80145f8:	f7ff fe53 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80145fc:	a903      	add	r1, sp, #12
 80145fe:	9003      	str	r0, [sp, #12]
 8014600:	4650      	mov	r0, sl
 8014602:	f7ff fce0 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014606:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 801460a:	6832      	ldr	r2, [r6, #0]
 801460c:	1a18      	subs	r0, r3, r0
 801460e:	1b03      	subs	r3, r0, r4
 8014610:	429a      	cmp	r2, r3
 8014612:	bfc8      	it	gt
 8014614:	6033      	strgt	r3, [r6, #0]
 8014616:	682a      	ldr	r2, [r5, #0]
 8014618:	4404      	add	r4, r0
 801461a:	4293      	cmp	r3, r2
 801461c:	bfc8      	it	gt
 801461e:	602b      	strgt	r3, [r5, #0]
 8014620:	6833      	ldr	r3, [r6, #0]
 8014622:	42a3      	cmp	r3, r4
 8014624:	bfc8      	it	gt
 8014626:	6034      	strgt	r4, [r6, #0]
 8014628:	682b      	ldr	r3, [r5, #0]
 801462a:	429c      	cmp	r4, r3
 801462c:	bfc8      	it	gt
 801462e:	602c      	strgt	r4, [r5, #0]
 8014630:	e722      	b.n	8014478 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>

08014632 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8014632:	b530      	push	{r4, r5, lr}
 8014634:	4604      	mov	r4, r0
 8014636:	4608      	mov	r0, r1
 8014638:	2500      	movs	r5, #0
 801463a:	4611      	mov	r1, r2
 801463c:	461a      	mov	r2, r3
 801463e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014642:	b089      	sub	sp, #36	; 0x24
 8014644:	015b      	lsls	r3, r3, #5
 8014646:	9304      	str	r3, [sp, #16]
 8014648:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801464c:	9505      	str	r5, [sp, #20]
 801464e:	015b      	lsls	r3, r3, #5
 8014650:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8014654:	2520      	movs	r5, #32
 8014656:	ab07      	add	r3, sp, #28
 8014658:	9302      	str	r3, [sp, #8]
 801465a:	ab06      	add	r3, sp, #24
 801465c:	9301      	str	r3, [sp, #4]
 801465e:	ab05      	add	r3, sp, #20
 8014660:	9300      	str	r3, [sp, #0]
 8014662:	ab04      	add	r3, sp, #16
 8014664:	f7ff fe3c 	bl	80142e0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8014668:	9a04      	ldr	r2, [sp, #16]
 801466a:	9805      	ldr	r0, [sp, #20]
 801466c:	fb92 f2f5 	sdiv	r2, r2, r5
 8014670:	fb90 f0f5 	sdiv	r0, r0, r5
 8014674:	9b06      	ldr	r3, [sp, #24]
 8014676:	9907      	ldr	r1, [sp, #28]
 8014678:	b292      	uxth	r2, r2
 801467a:	fb93 f3f5 	sdiv	r3, r3, r5
 801467e:	fb91 f1f5 	sdiv	r1, r1, r5
 8014682:	3002      	adds	r0, #2
 8014684:	1a80      	subs	r0, r0, r2
 8014686:	80a0      	strh	r0, [r4, #4]
 8014688:	4620      	mov	r0, r4
 801468a:	b29b      	uxth	r3, r3
 801468c:	3102      	adds	r1, #2
 801468e:	1ac9      	subs	r1, r1, r3
 8014690:	3a01      	subs	r2, #1
 8014692:	3b01      	subs	r3, #1
 8014694:	8022      	strh	r2, [r4, #0]
 8014696:	8063      	strh	r3, [r4, #2]
 8014698:	80e1      	strh	r1, [r4, #6]
 801469a:	b009      	add	sp, #36	; 0x24
 801469c:	bd30      	pop	{r4, r5, pc}

0801469e <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801469e:	b510      	push	{r4, lr}
 80146a0:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 80146a4:	4604      	mov	r4, r0
 80146a6:	f7ff ffc4 	bl	8014632 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80146aa:	4620      	mov	r0, r4
 80146ac:	bd10      	pop	{r4, pc}

080146ae <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 80146ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b2:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 80146b6:	42b5      	cmp	r5, r6
 80146b8:	bfde      	ittt	le
 80146ba:	4633      	movle	r3, r6
 80146bc:	462e      	movle	r6, r5
 80146be:	461d      	movle	r5, r3
 80146c0:	2220      	movs	r2, #32
 80146c2:	1bab      	subs	r3, r5, r6
 80146c4:	468b      	mov	fp, r1
 80146c6:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 80146ca:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 80146ce:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80146d0:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80146d4:	b0ab      	sub	sp, #172	; 0xac
 80146d6:	4604      	mov	r4, r0
 80146d8:	bfa4      	itt	ge
 80146da:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 80146de:	2600      	movge	r6, #0
 80146e0:	fb99 f9f2 	sdiv	r9, r9, r2
 80146e4:	fb9a faf2 	sdiv	sl, sl, r2
 80146e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80146ea:	2900      	cmp	r1, #0
 80146ec:	f000 80f4 	beq.w	80148d8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 80146f0:	f9bb 0000 	ldrsh.w	r0, [fp]
 80146f4:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 80146f8:	eba9 0700 	sub.w	r7, r9, r0
 80146fc:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 8014700:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 8014704:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 8014708:	ebaa 0802 	sub.w	r8, sl, r2
 801470c:	4407      	add	r7, r0
 801470e:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 8014712:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 8014716:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 801471a:	b23f      	sxth	r7, r7
 801471c:	4490      	add	r8, r2
 801471e:	2202      	movs	r2, #2
 8014720:	fb91 f1f2 	sdiv	r1, r1, r2
 8014724:	eba9 0707 	sub.w	r7, r9, r7
 8014728:	fa0f f888 	sxth.w	r8, r8
 801472c:	ebaa 0808 	sub.w	r8, sl, r8
 8014730:	2f00      	cmp	r7, #0
 8014732:	bfb8      	it	lt
 8014734:	427f      	neglt	r7, r7
 8014736:	f1b8 0f00 	cmp.w	r8, #0
 801473a:	bfb8      	it	lt
 801473c:	f1c8 0800 	rsblt	r8, r8, #0
 8014740:	45bc      	cmp	ip, r7
 8014742:	bfcc      	ite	gt
 8014744:	f10c 0701 	addgt.w	r7, ip, #1
 8014748:	3701      	addle	r7, #1
 801474a:	4540      	cmp	r0, r8
 801474c:	bfc8      	it	gt
 801474e:	f100 0801 	addgt.w	r8, r0, #1
 8014752:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8014756:	eba3 0301 	sub.w	r3, r3, r1
 801475a:	f100 0001 	add.w	r0, r0, #1
 801475e:	ea4f 0060 	mov.w	r0, r0, asr #1
 8014762:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8014766:	bfd8      	it	le
 8014768:	f108 0801 	addle.w	r8, r8, #1
 801476c:	9201      	str	r2, [sp, #4]
 801476e:	930d      	str	r3, [sp, #52]	; 0x34
 8014770:	f7ff fc34 	bl	8013fdc <_ZN8touchgfx7CWRUtil4sineEi>
 8014774:	a92a      	add	r1, sp, #168	; 0xa8
 8014776:	f841 0d70 	str.w	r0, [r1, #-112]!
 801477a:	a80d      	add	r0, sp, #52	; 0x34
 801477c:	f7ff fc23 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014780:	f04f 0c20 	mov.w	ip, #32
 8014784:	fb90 f0fc 	sdiv	r0, r0, ip
 8014788:	fb08 f808 	mul.w	r8, r8, r8
 801478c:	4340      	muls	r0, r0
 801478e:	fb07 8707 	mla	r7, r7, r7, r8
 8014792:	4287      	cmp	r7, r0
 8014794:	9a01      	ldr	r2, [sp, #4]
 8014796:	da04      	bge.n	80147a2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf4>
 8014798:	2401      	movs	r4, #1
 801479a:	4620      	mov	r0, r4
 801479c:	b02b      	add	sp, #172	; 0xac
 801479e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80147a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80147a6:	fb91 f3f2 	sdiv	r3, r1, r2
 80147aa:	4403      	add	r3, r0
 80147ac:	fb93 f3fc 	sdiv	r3, r3, ip
 80147b0:	f9bb 1000 	ldrsh.w	r1, [fp]
 80147b4:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 80147b8:	3301      	adds	r3, #1
 80147ba:	440a      	add	r2, r1
 80147bc:	b212      	sxth	r2, r2
 80147be:	454a      	cmp	r2, r9
 80147c0:	bfa8      	it	ge
 80147c2:	464a      	movge	r2, r9
 80147c4:	428a      	cmp	r2, r1
 80147c6:	bfac      	ite	ge
 80147c8:	eba9 0902 	subge.w	r9, r9, r2
 80147cc:	eba9 0901 	sublt.w	r9, r9, r1
 80147d0:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 80147d4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80147d8:	435b      	muls	r3, r3
 80147da:	440a      	add	r2, r1
 80147dc:	b212      	sxth	r2, r2
 80147de:	4552      	cmp	r2, sl
 80147e0:	bfa8      	it	ge
 80147e2:	4652      	movge	r2, sl
 80147e4:	428a      	cmp	r2, r1
 80147e6:	bfac      	ite	ge
 80147e8:	ebaa 0a02 	subge.w	sl, sl, r2
 80147ec:	ebaa 0a01 	sublt.w	sl, sl, r1
 80147f0:	fb0a fa0a 	mul.w	sl, sl, sl
 80147f4:	fb09 a909 	mla	r9, r9, r9, sl
 80147f8:	4599      	cmp	r9, r3
 80147fa:	dccd      	bgt.n	8014798 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 80147fc:	465a      	mov	r2, fp
 80147fe:	4621      	mov	r1, r4
 8014800:	a80e      	add	r0, sp, #56	; 0x38
 8014802:	f010 fde5 	bl	80253d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014806:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801480a:	9209      	str	r2, [sp, #36]	; 0x24
 801480c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8014810:	930a      	str	r3, [sp, #40]	; 0x28
 8014812:	dd07      	ble.n	8014824 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8014814:	2102      	movs	r1, #2
 8014816:	fb93 f3f1 	sdiv	r3, r3, r1
 801481a:	4413      	add	r3, r2
 801481c:	930a      	str	r3, [sp, #40]	; 0x28
 801481e:	fb93 f3f1 	sdiv	r3, r3, r1
 8014822:	9309      	str	r3, [sp, #36]	; 0x24
 8014824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014828:	4630      	mov	r0, r6
 801482a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801482e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014830:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 8014834:	f7ff fbf2 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014838:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 801483c:	f849 0d74 	str.w	r0, [r9, #-116]!
 8014840:	4649      	mov	r1, r9
 8014842:	a80b      	add	r0, sp, #44	; 0x2c
 8014844:	f7ff fbbf 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014848:	f04f 0a02 	mov.w	sl, #2
 801484c:	fb90 f0fa 	sdiv	r0, r0, sl
 8014850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014852:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8014856:	eb00 0b03 	add.w	fp, r0, r3
 801485a:	4630      	mov	r0, r6
 801485c:	f7ff fd21 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014860:	f848 0d78 	str.w	r0, [r8, #-120]!
 8014864:	4641      	mov	r1, r8
 8014866:	a80b      	add	r0, sp, #44	; 0x2c
 8014868:	f7ff fbad 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801486c:	fb90 f0fa 	sdiv	r0, r0, sl
 8014870:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014872:	4659      	mov	r1, fp
 8014874:	1a12      	subs	r2, r2, r0
 8014876:	017f      	lsls	r7, r7, #5
 8014878:	a80e      	add	r0, sp, #56	; 0x38
 801487a:	f010 ff7f 	bl	802577c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801487e:	f106 0a20 	add.w	sl, r6, #32
 8014882:	bb67      	cbnz	r7, 80148de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 8014884:	46b3      	mov	fp, r6
 8014886:	45aa      	cmp	sl, r5
 8014888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801488a:	dc33      	bgt.n	80148f4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x246>
 801488c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801488e:	4650      	mov	r0, sl
 8014890:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8014894:	920b      	str	r2, [sp, #44]	; 0x2c
 8014896:	f7ff fbc1 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801489a:	4641      	mov	r1, r8
 801489c:	900c      	str	r0, [sp, #48]	; 0x30
 801489e:	a80b      	add	r0, sp, #44	; 0x2c
 80148a0:	f7ff fb91 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80148a4:	2302      	movs	r3, #2
 80148a6:	fb90 f0f3 	sdiv	r0, r0, r3
 80148aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80148ac:	eb00 0b02 	add.w	fp, r0, r2
 80148b0:	4650      	mov	r0, sl
 80148b2:	f7ff fcf6 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80148b6:	4649      	mov	r1, r9
 80148b8:	900d      	str	r0, [sp, #52]	; 0x34
 80148ba:	a80b      	add	r0, sp, #44	; 0x2c
 80148bc:	f7ff fb83 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80148c0:	2302      	movs	r3, #2
 80148c2:	fb90 f0f3 	sdiv	r0, r0, r3
 80148c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80148c8:	4659      	mov	r1, fp
 80148ca:	1a12      	subs	r2, r2, r0
 80148cc:	a80e      	add	r0, sp, #56	; 0x38
 80148ce:	46d3      	mov	fp, sl
 80148d0:	f010 fe2c 	bl	802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80148d4:	44ba      	add	sl, r7
 80148d6:	e7d6      	b.n	8014886 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d8>
 80148d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80148dc:	e768      	b.n	80147b0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x102>
 80148de:	fb9a f2f7 	sdiv	r2, sl, r7
 80148e2:	fb07 a212 	mls	r2, r7, r2, sl
 80148e6:	1aba      	subs	r2, r7, r2
 80148e8:	fb92 f1f7 	sdiv	r1, r2, r7
 80148ec:	fb07 2211 	mls	r2, r7, r1, r2
 80148f0:	4492      	add	sl, r2
 80148f2:	e7c7      	b.n	8014884 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d6>
 80148f4:	455d      	cmp	r5, fp
 80148f6:	dd23      	ble.n	8014940 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x292>
 80148f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148fa:	4628      	mov	r0, r5
 80148fc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8014900:	920b      	str	r2, [sp, #44]	; 0x2c
 8014902:	f7ff fb8b 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014906:	4641      	mov	r1, r8
 8014908:	900c      	str	r0, [sp, #48]	; 0x30
 801490a:	a80b      	add	r0, sp, #44	; 0x2c
 801490c:	f7ff fb5b 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014910:	f04f 0a02 	mov.w	sl, #2
 8014914:	fb90 f0fa 	sdiv	r0, r0, sl
 8014918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801491a:	4403      	add	r3, r0
 801491c:	4628      	mov	r0, r5
 801491e:	9301      	str	r3, [sp, #4]
 8014920:	f7ff fcbf 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014924:	4649      	mov	r1, r9
 8014926:	900d      	str	r0, [sp, #52]	; 0x34
 8014928:	a80b      	add	r0, sp, #44	; 0x2c
 801492a:	f7ff fb4c 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801492e:	fb90 f0fa 	sdiv	r0, r0, sl
 8014932:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014934:	9b01      	ldr	r3, [sp, #4]
 8014936:	1a12      	subs	r2, r2, r0
 8014938:	4619      	mov	r1, r3
 801493a:	a80e      	add	r0, sp, #56	; 0x38
 801493c:	f010 fdf6 	bl	802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014942:	b98b      	cbnz	r3, 8014968 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8014944:	1bad      	subs	r5, r5, r6
 8014946:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 801494a:	da04      	bge.n	8014956 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 801494c:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 8014950:	a80e      	add	r0, sp, #56	; 0x38
 8014952:	f010 fdeb 	bl	802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014956:	21ff      	movs	r1, #255	; 0xff
 8014958:	a80e      	add	r0, sp, #56	; 0x38
 801495a:	f010 fe63 	bl	8025624 <_ZN8touchgfx6Canvas6renderEh>
 801495e:	4604      	mov	r4, r0
 8014960:	a80e      	add	r0, sp, #56	; 0x38
 8014962:	f7ff fc3d 	bl	80141e0 <_ZN8touchgfx6CanvasD1Ev>
 8014966:	e718      	b.n	801479a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xec>
 8014968:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 801496c:	429a      	cmp	r2, r3
 801496e:	f200 8107 	bhi.w	8014b80 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d2>
 8014972:	1bab      	subs	r3, r5, r6
 8014974:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8014978:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801497c:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8014980:	9301      	str	r3, [sp, #4]
 8014982:	da43      	bge.n	8014a0c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 8014984:	4628      	mov	r0, r5
 8014986:	f7ff fb49 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801498a:	4649      	mov	r1, r9
 801498c:	900d      	str	r0, [sp, #52]	; 0x34
 801498e:	a809      	add	r0, sp, #36	; 0x24
 8014990:	f7ff fb19 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014994:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014996:	18c3      	adds	r3, r0, r3
 8014998:	4628      	mov	r0, r5
 801499a:	9303      	str	r3, [sp, #12]
 801499c:	f7ff fc81 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80149a0:	4649      	mov	r1, r9
 80149a2:	900d      	str	r0, [sp, #52]	; 0x34
 80149a4:	a809      	add	r0, sp, #36	; 0x24
 80149a6:	f7ff fb0e 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80149aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80149ac:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 80149b0:	1a1b      	subs	r3, r3, r0
 80149b2:	9302      	str	r3, [sp, #8]
 80149b4:	9204      	str	r2, [sp, #16]
 80149b6:	eb05 030a 	add.w	r3, r5, sl
 80149ba:	9a04      	ldr	r2, [sp, #16]
 80149bc:	4293      	cmp	r3, r2
 80149be:	da25      	bge.n	8014a0c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 80149c0:	4618      	mov	r0, r3
 80149c2:	9306      	str	r3, [sp, #24]
 80149c4:	f7ff fb2a 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80149c8:	4649      	mov	r1, r9
 80149ca:	900d      	str	r0, [sp, #52]	; 0x34
 80149cc:	a80a      	add	r0, sp, #40	; 0x28
 80149ce:	f7ff fafa 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80149d2:	2202      	movs	r2, #2
 80149d4:	fb90 f0f2 	sdiv	r0, r0, r2
 80149d8:	9b03      	ldr	r3, [sp, #12]
 80149da:	9207      	str	r2, [sp, #28]
 80149dc:	18c3      	adds	r3, r0, r3
 80149de:	9305      	str	r3, [sp, #20]
 80149e0:	9b06      	ldr	r3, [sp, #24]
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7ff fc5d 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80149e8:	a92a      	add	r1, sp, #168	; 0xa8
 80149ea:	f841 0d78 	str.w	r0, [r1, #-120]!
 80149ee:	a80a      	add	r0, sp, #40	; 0x28
 80149f0:	f7ff fae9 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80149f4:	9a07      	ldr	r2, [sp, #28]
 80149f6:	9b02      	ldr	r3, [sp, #8]
 80149f8:	fb90 f2f2 	sdiv	r2, r0, r2
 80149fc:	9905      	ldr	r1, [sp, #20]
 80149fe:	1a9a      	subs	r2, r3, r2
 8014a00:	a80e      	add	r0, sp, #56	; 0x38
 8014a02:	f010 fd93 	bl	802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014a06:	9b06      	ldr	r3, [sp, #24]
 8014a08:	4453      	add	r3, sl
 8014a0a:	e7d6      	b.n	80149ba <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x30c>
 8014a0c:	455d      	cmp	r5, fp
 8014a0e:	dd25      	ble.n	8014a5c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ae>
 8014a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a14:	4628      	mov	r0, r5
 8014a16:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8014a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a1c:	f7ff fafe 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a20:	4641      	mov	r1, r8
 8014a22:	900c      	str	r0, [sp, #48]	; 0x30
 8014a24:	a80b      	add	r0, sp, #44	; 0x2c
 8014a26:	f7ff face 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a2a:	2202      	movs	r2, #2
 8014a2c:	fb90 f0f2 	sdiv	r0, r0, r2
 8014a30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014a32:	9202      	str	r2, [sp, #8]
 8014a34:	eb00 0903 	add.w	r9, r0, r3
 8014a38:	4628      	mov	r0, r5
 8014a3a:	f7ff fc32 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014a3e:	a92a      	add	r1, sp, #168	; 0xa8
 8014a40:	f841 0d74 	str.w	r0, [r1, #-116]!
 8014a44:	a80b      	add	r0, sp, #44	; 0x2c
 8014a46:	f7ff fabe 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a4a:	9a02      	ldr	r2, [sp, #8]
 8014a4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014a4e:	fb90 f2f2 	sdiv	r2, r0, r2
 8014a52:	4649      	mov	r1, r9
 8014a54:	1a9a      	subs	r2, r3, r2
 8014a56:	a80e      	add	r0, sp, #56	; 0x38
 8014a58:	f010 fd68 	bl	802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014a5c:	46d9      	mov	r9, fp
 8014a5e:	2502      	movs	r5, #2
 8014a60:	45b1      	cmp	r9, r6
 8014a62:	db25      	blt.n	8014ab0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x402>
 8014a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a68:	4648      	mov	r0, r9
 8014a6a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8014a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a70:	f7ff fad4 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a74:	4641      	mov	r1, r8
 8014a76:	900c      	str	r0, [sp, #48]	; 0x30
 8014a78:	a80b      	add	r0, sp, #44	; 0x2c
 8014a7a:	f7ff faa4 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a7e:	fb90 f0f5 	sdiv	r0, r0, r5
 8014a82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014a84:	eb00 0b03 	add.w	fp, r0, r3
 8014a88:	4648      	mov	r0, r9
 8014a8a:	f7ff fc0a 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014a8e:	a90d      	add	r1, sp, #52	; 0x34
 8014a90:	900d      	str	r0, [sp, #52]	; 0x34
 8014a92:	a80b      	add	r0, sp, #44	; 0x2c
 8014a94:	f7ff fa97 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a98:	fb90 f0f5 	sdiv	r0, r0, r5
 8014a9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014a9e:	4659      	mov	r1, fp
 8014aa0:	1a12      	subs	r2, r2, r0
 8014aa2:	a80e      	add	r0, sp, #56	; 0x38
 8014aa4:	46cb      	mov	fp, r9
 8014aa6:	f010 fd41 	bl	802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014aaa:	eba9 0907 	sub.w	r9, r9, r7
 8014aae:	e7d7      	b.n	8014a60 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b2>
 8014ab0:	455e      	cmp	r6, fp
 8014ab2:	da22      	bge.n	8014afa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44c>
 8014ab4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ab8:	4630      	mov	r0, r6
 8014aba:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8014abe:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ac0:	f7ff faac 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014ac4:	4641      	mov	r1, r8
 8014ac6:	900c      	str	r0, [sp, #48]	; 0x30
 8014ac8:	a80b      	add	r0, sp, #44	; 0x2c
 8014aca:	f7ff fa7c 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ace:	2502      	movs	r5, #2
 8014ad0:	fb90 f0f5 	sdiv	r0, r0, r5
 8014ad4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014ad6:	4407      	add	r7, r0
 8014ad8:	4630      	mov	r0, r6
 8014ada:	f7ff fbe2 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014ade:	a92a      	add	r1, sp, #168	; 0xa8
 8014ae0:	f841 0d74 	str.w	r0, [r1, #-116]!
 8014ae4:	a80b      	add	r0, sp, #44	; 0x2c
 8014ae6:	f7ff fa6e 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014aea:	fb90 f0f5 	sdiv	r0, r0, r5
 8014aee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014af0:	4639      	mov	r1, r7
 8014af2:	1a12      	subs	r2, r2, r0
 8014af4:	a80e      	add	r0, sp, #56	; 0x38
 8014af6:	f010 fd19 	bl	802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014afa:	9b01      	ldr	r3, [sp, #4]
 8014afc:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014b00:	f6bf af29 	bge.w	8014956 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8014b04:	4630      	mov	r0, r6
 8014b06:	f7ff fa89 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014b0a:	ad2a      	add	r5, sp, #168	; 0xa8
 8014b0c:	f845 0d74 	str.w	r0, [r5, #-116]!
 8014b10:	4629      	mov	r1, r5
 8014b12:	a809      	add	r0, sp, #36	; 0x24
 8014b14:	f7ff fa57 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014b18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014b1a:	f04f 0b02 	mov.w	fp, #2
 8014b1e:	eb00 0903 	add.w	r9, r0, r3
 8014b22:	4630      	mov	r0, r6
 8014b24:	f7ff fbbd 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014b28:	4629      	mov	r1, r5
 8014b2a:	900d      	str	r0, [sp, #52]	; 0x34
 8014b2c:	a809      	add	r0, sp, #36	; 0x24
 8014b2e:	f7ff fa4a 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014b32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014b34:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 8014b38:	eba3 0800 	sub.w	r8, r3, r0
 8014b3c:	4454      	add	r4, sl
 8014b3e:	42b4      	cmp	r4, r6
 8014b40:	f6bf af09 	bge.w	8014956 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8014b44:	4620      	mov	r0, r4
 8014b46:	f7ff fa69 	bl	801401c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014b4a:	4629      	mov	r1, r5
 8014b4c:	900d      	str	r0, [sp, #52]	; 0x34
 8014b4e:	a80a      	add	r0, sp, #40	; 0x28
 8014b50:	f7ff fa39 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014b54:	fb90 f0fb 	sdiv	r0, r0, fp
 8014b58:	eb00 0709 	add.w	r7, r0, r9
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	f7ff fba0 	bl	80142a2 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014b62:	a90c      	add	r1, sp, #48	; 0x30
 8014b64:	900c      	str	r0, [sp, #48]	; 0x30
 8014b66:	a80a      	add	r0, sp, #40	; 0x28
 8014b68:	f7ff fa2d 	bl	8013fc6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014b6c:	fb90 f2fb 	sdiv	r2, r0, fp
 8014b70:	4639      	mov	r1, r7
 8014b72:	eba8 0202 	sub.w	r2, r8, r2
 8014b76:	a80e      	add	r0, sp, #56	; 0x38
 8014b78:	f010 fcd8 	bl	802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014b7c:	4454      	add	r4, sl
 8014b7e:	e7de      	b.n	8014b3e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x490>
 8014b80:	2400      	movs	r4, #0
 8014b82:	e6ed      	b.n	8014960 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

08014b84 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8014b84:	2200      	movs	r2, #0
 8014b86:	b510      	push	{r4, lr}
 8014b88:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8014b8c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8014b90:	8002      	strh	r2, [r0, #0]
 8014b92:	8042      	strh	r2, [r0, #2]
 8014b94:	8084      	strh	r4, [r0, #4]
 8014b96:	80c1      	strh	r1, [r0, #6]
 8014b98:	bd10      	pop	{r4, pc}
	...

08014b9c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8014b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014b9e:	6803      	ldr	r3, [r0, #0]
 8014ba0:	460d      	mov	r5, r1
 8014ba2:	4604      	mov	r4, r0
 8014ba4:	4601      	mov	r1, r0
 8014ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ba8:	a802      	add	r0, sp, #8
 8014baa:	4798      	blx	r3
 8014bac:	466b      	mov	r3, sp
 8014bae:	6828      	ldr	r0, [r5, #0]
 8014bb0:	6869      	ldr	r1, [r5, #4]
 8014bb2:	c303      	stmia	r3!, {r0, r1}
 8014bb4:	4668      	mov	r0, sp
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	f7fe f9e4 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 8014bbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014bbe:	b1a8      	cbz	r0, 8014bec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014bc0:	6803      	ldr	r3, [r0, #0]
 8014bc2:	1d21      	adds	r1, r4, #4
 8014bc4:	68db      	ldr	r3, [r3, #12]
 8014bc6:	4798      	blx	r3
 8014bc8:	b180      	cbz	r0, 8014bec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014bca:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	dd0c      	ble.n	8014bec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014bd2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8014bd6:	2d00      	cmp	r5, #0
 8014bd8:	dd08      	ble.n	8014bec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8014bda:	4a2d      	ldr	r2, [pc, #180]	; (8014c90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8014bdc:	7812      	ldrb	r2, [r2, #0]
 8014bde:	b13a      	cbz	r2, 8014bf0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8014be0:	2a01      	cmp	r2, #1
 8014be2:	d02d      	beq.n	8014c40 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8014be4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014be6:	6803      	ldr	r3, [r0, #0]
 8014be8:	691b      	ldr	r3, [r3, #16]
 8014bea:	4798      	blx	r3
 8014bec:	b004      	add	sp, #16
 8014bee:	bd70      	pop	{r4, r5, r6, pc}
 8014bf0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014bf4:	441d      	add	r5, r3
 8014bf6:	b2ad      	uxth	r5, r5
 8014bf8:	b22e      	sxth	r6, r5
 8014bfa:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8014bfe:	42b3      	cmp	r3, r6
 8014c00:	daf0      	bge.n	8014be4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014c02:	6823      	ldr	r3, [r4, #0]
 8014c04:	4669      	mov	r1, sp
 8014c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c08:	4620      	mov	r0, r4
 8014c0a:	4798      	blx	r3
 8014c0c:	b940      	cbnz	r0, 8014c20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8014c0e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d004      	beq.n	8014c20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8014c16:	3301      	adds	r3, #1
 8014c18:	105b      	asrs	r3, r3, #1
 8014c1a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014c1e:	e7f0      	b.n	8014c02 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8014c20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014c24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014c28:	4413      	add	r3, r2
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	441a      	add	r2, r3
 8014c2e:	b212      	sxth	r2, r2
 8014c30:	4296      	cmp	r6, r2
 8014c32:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014c36:	dae0      	bge.n	8014bfa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8014c38:	1aeb      	subs	r3, r5, r3
 8014c3a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014c3e:	e7dc      	b.n	8014bfa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8014c40:	f8bd 5000 	ldrh.w	r5, [sp]
 8014c44:	441d      	add	r5, r3
 8014c46:	b2ad      	uxth	r5, r5
 8014c48:	b22e      	sxth	r6, r5
 8014c4a:	f9bd 3000 	ldrsh.w	r3, [sp]
 8014c4e:	42b3      	cmp	r3, r6
 8014c50:	dac8      	bge.n	8014be4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014c52:	6823      	ldr	r3, [r4, #0]
 8014c54:	4669      	mov	r1, sp
 8014c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c58:	4620      	mov	r0, r4
 8014c5a:	4798      	blx	r3
 8014c5c:	b940      	cbnz	r0, 8014c70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8014c5e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d004      	beq.n	8014c70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8014c66:	3301      	adds	r3, #1
 8014c68:	105b      	asrs	r3, r3, #1
 8014c6a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014c6e:	e7f0      	b.n	8014c52 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8014c70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014c74:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c78:	4413      	add	r3, r2
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	441a      	add	r2, r3
 8014c7e:	b212      	sxth	r2, r2
 8014c80:	4296      	cmp	r6, r2
 8014c82:	f8ad 3000 	strh.w	r3, [sp]
 8014c86:	dae0      	bge.n	8014c4a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8014c88:	1aeb      	subs	r3, r5, r3
 8014c8a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014c8e:	e7dc      	b.n	8014c4a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8014c90:	2004e110 	.word	0x2004e110

08014c94 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8014c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c96:	6803      	ldr	r3, [r0, #0]
 8014c98:	4604      	mov	r4, r0
 8014c9a:	4601      	mov	r1, r0
 8014c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c9e:	4668      	mov	r0, sp
 8014ca0:	4798      	blx	r3
 8014ca2:	2100      	movs	r1, #0
 8014ca4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8014ca8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014cac:	9102      	str	r1, [sp, #8]
 8014cae:	4668      	mov	r0, sp
 8014cb0:	a902      	add	r1, sp, #8
 8014cb2:	f8ad 200c 	strh.w	r2, [sp, #12]
 8014cb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014cba:	f7fe f963 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 8014cbe:	6823      	ldr	r3, [r4, #0]
 8014cc0:	4669      	mov	r1, sp
 8014cc2:	691b      	ldr	r3, [r3, #16]
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	4798      	blx	r3
 8014cc8:	b004      	add	sp, #16
 8014cca:	bd10      	pop	{r4, pc}

08014ccc <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8014ccc:	2101      	movs	r1, #1
 8014cce:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8014cd2:	490b      	ldr	r1, [pc, #44]	; (8014d00 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	6001      	str	r1, [r0, #0]
 8014cd8:	21ff      	movs	r1, #255	; 0xff
 8014cda:	8082      	strh	r2, [r0, #4]
 8014cdc:	80c2      	strh	r2, [r0, #6]
 8014cde:	8102      	strh	r2, [r0, #8]
 8014ce0:	8142      	strh	r2, [r0, #10]
 8014ce2:	8182      	strh	r2, [r0, #12]
 8014ce4:	81c2      	strh	r2, [r0, #14]
 8014ce6:	8202      	strh	r2, [r0, #16]
 8014ce8:	8242      	strh	r2, [r0, #18]
 8014cea:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014cee:	61c2      	str	r2, [r0, #28]
 8014cf0:	8402      	strh	r2, [r0, #32]
 8014cf2:	8442      	strh	r2, [r0, #34]	; 0x22
 8014cf4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014cf8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8014cfc:	6282      	str	r2, [r0, #40]	; 0x28
 8014cfe:	4770      	bx	lr
 8014d00:	080287f8 	.word	0x080287f8

08014d04 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8014d04:	b508      	push	{r3, lr}
 8014d06:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8014d0a:	b10b      	cbz	r3, 8014d10 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8014d0c:	f7f8 fbe8 	bl	800d4e0 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8014d10:	bd08      	pop	{r3, pc}

08014d12 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8014d12:	6803      	ldr	r3, [r0, #0]
 8014d14:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8014d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014d1a:	4718      	bx	r3

08014d1c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8014d1c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8014d20:	b510      	push	{r4, lr}
 8014d22:	2bff      	cmp	r3, #255	; 0xff
 8014d24:	d104      	bne.n	8014d30 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8014d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d2a:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d105      	bne.n	8014d3c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8014d30:	2300      	movs	r3, #0
 8014d32:	8003      	strh	r3, [r0, #0]
 8014d34:	8043      	strh	r3, [r0, #2]
 8014d36:	8083      	strh	r3, [r0, #4]
 8014d38:	80c3      	strh	r3, [r0, #6]
 8014d3a:	bd10      	pop	{r4, pc}
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8014d42:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8014d46:	8003      	strh	r3, [r0, #0]
 8014d48:	8043      	strh	r3, [r0, #2]
 8014d4a:	8084      	strh	r4, [r0, #4]
 8014d4c:	80c2      	strh	r2, [r0, #6]
 8014d4e:	e7f4      	b.n	8014d3a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08014d50 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8014d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d54:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8014d58:	b087      	sub	sp, #28
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	4689      	mov	r9, r1
 8014d5e:	b363      	cbz	r3, 8014dba <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8014d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d64:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8014d66:	429a      	cmp	r2, r3
 8014d68:	d027      	beq.n	8014dba <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8014d6a:	ad06      	add	r5, sp, #24
 8014d6c:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8014d70:	4628      	mov	r0, r5
 8014d72:	f004 fc95 	bl	80196a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014d76:	2700      	movs	r7, #0
 8014d78:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014d7c:	a904      	add	r1, sp, #16
 8014d7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014d82:	6823      	ldr	r3, [r4, #0]
 8014d84:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	9704      	str	r7, [sp, #16]
 8014d8e:	4798      	blx	r3
 8014d90:	f7f8 fd2c 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8014d94:	6803      	ldr	r3, [r0, #0]
 8014d96:	4606      	mov	r6, r0
 8014d98:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8014d9c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8014d9e:	4628      	mov	r0, r5
 8014da0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014da4:	f004 fd68 	bl	8019878 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014da8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014dac:	4601      	mov	r1, r0
 8014dae:	9300      	str	r3, [sp, #0]
 8014db0:	9701      	str	r7, [sp, #4]
 8014db2:	464b      	mov	r3, r9
 8014db4:	aa04      	add	r2, sp, #16
 8014db6:	4630      	mov	r0, r6
 8014db8:	47c0      	blx	r8
 8014dba:	b007      	add	sp, #28
 8014dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014dc0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8014dc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014dc2:	460d      	mov	r5, r1
 8014dc4:	2100      	movs	r1, #0
 8014dc6:	4604      	mov	r4, r0
 8014dc8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014dcc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8014dd0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014dd4:	6803      	ldr	r3, [r0, #0]
 8014dd6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ddc:	9100      	str	r1, [sp, #0]
 8014dde:	4669      	mov	r1, sp
 8014de0:	4798      	blx	r3
 8014de2:	4621      	mov	r1, r4
 8014de4:	a802      	add	r0, sp, #8
 8014de6:	f003 f845 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014dea:	f7f8 fcff 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8014dee:	6803      	ldr	r3, [r0, #0]
 8014df0:	aa02      	add	r2, sp, #8
 8014df2:	695e      	ldr	r6, [r3, #20]
 8014df4:	4669      	mov	r1, sp
 8014df6:	462b      	mov	r3, r5
 8014df8:	47b0      	blx	r6
 8014dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	bf08      	it	eq
 8014e02:	461d      	moveq	r5, r3
 8014e04:	84e5      	strh	r5, [r4, #38]	; 0x26
 8014e06:	b004      	add	sp, #16
 8014e08:	bd70      	pop	{r4, r5, r6, pc}
	...

08014e0c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	8082      	strh	r2, [r0, #4]
 8014e10:	80c2      	strh	r2, [r0, #6]
 8014e12:	8102      	strh	r2, [r0, #8]
 8014e14:	8142      	strh	r2, [r0, #10]
 8014e16:	8182      	strh	r2, [r0, #12]
 8014e18:	81c2      	strh	r2, [r0, #14]
 8014e1a:	8202      	strh	r2, [r0, #16]
 8014e1c:	8242      	strh	r2, [r0, #18]
 8014e1e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014e22:	61c2      	str	r2, [r0, #28]
 8014e24:	8402      	strh	r2, [r0, #32]
 8014e26:	8442      	strh	r2, [r0, #34]	; 0x22
 8014e28:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8014e32:	4a04      	ldr	r2, [pc, #16]	; (8014e44 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8014e34:	6002      	str	r2, [r0, #0]
 8014e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e3a:	84c2      	strh	r2, [r0, #38]	; 0x26
 8014e3c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop
 8014e44:	08028870 	.word	0x08028870

08014e48 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014e48:	2300      	movs	r3, #0
 8014e4a:	8083      	strh	r3, [r0, #4]
 8014e4c:	80c3      	strh	r3, [r0, #6]
 8014e4e:	8003      	strh	r3, [r0, #0]
 8014e50:	8043      	strh	r3, [r0, #2]
 8014e52:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8014e56:	2bff      	cmp	r3, #255	; 0xff
 8014e58:	bf01      	itttt	eq
 8014e5a:	890b      	ldrheq	r3, [r1, #8]
 8014e5c:	8083      	strheq	r3, [r0, #4]
 8014e5e:	894b      	ldrheq	r3, [r1, #10]
 8014e60:	80c3      	strheq	r3, [r0, #6]
 8014e62:	4770      	bx	lr

08014e64 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8014e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e66:	4604      	mov	r4, r0
 8014e68:	466b      	mov	r3, sp
 8014e6a:	6808      	ldr	r0, [r1, #0]
 8014e6c:	6849      	ldr	r1, [r1, #4]
 8014e6e:	c303      	stmia	r3!, {r0, r1}
 8014e70:	6823      	ldr	r3, [r4, #0]
 8014e72:	4669      	mov	r1, sp
 8014e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e76:	4620      	mov	r0, r4
 8014e78:	4798      	blx	r3
 8014e7a:	4b08      	ldr	r3, [pc, #32]	; (8014e9c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014e82:	b10a      	cbz	r2, 8014e88 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8014e84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014e86:	b900      	cbnz	r0, 8014e8a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8014e88:	6898      	ldr	r0, [r3, #8]
 8014e8a:	6803      	ldr	r3, [r0, #0]
 8014e8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014e8e:	6a1d      	ldr	r5, [r3, #32]
 8014e90:	4669      	mov	r1, sp
 8014e92:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014e96:	47a8      	blx	r5
 8014e98:	b003      	add	sp, #12
 8014e9a:	bd30      	pop	{r4, r5, pc}
 8014e9c:	2004e118 	.word	0x2004e118

08014ea0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8014ea0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8014ea4:	b12a      	cbz	r2, 8014eb2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014ea6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8014eaa:	b112      	cbz	r2, 8014eb2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014eac:	6803      	ldr	r3, [r0, #0]
 8014eae:	695b      	ldr	r3, [r3, #20]
 8014eb0:	4718      	bx	r3
 8014eb2:	4770      	bx	lr

08014eb4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8014eb4:	b570      	push	{r4, r5, r6, lr}
 8014eb6:	880b      	ldrh	r3, [r1, #0]
 8014eb8:	4604      	mov	r4, r0
 8014eba:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014ebc:	4608      	mov	r0, r1
 8014ebe:	460d      	mov	r5, r1
 8014ec0:	f004 fbee 	bl	80196a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014ec4:	4606      	mov	r6, r0
 8014ec6:	4628      	mov	r0, r5
 8014ec8:	f004 fc1e 	bl	8019708 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014ecc:	4605      	mov	r5, r0
 8014ece:	6823      	ldr	r3, [r4, #0]
 8014ed0:	4631      	mov	r1, r6
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ed6:	4798      	blx	r3
 8014ed8:	6823      	ldr	r3, [r4, #0]
 8014eda:	4629      	mov	r1, r5
 8014edc:	4620      	mov	r0, r4
 8014ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ee4:	4718      	bx	r3

08014ee6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014ee6:	b510      	push	{r4, lr}
 8014ee8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8014eec:	4604      	mov	r4, r0
 8014eee:	2bff      	cmp	r3, #255	; 0xff
 8014ef0:	d006      	beq.n	8014f00 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	8003      	strh	r3, [r0, #0]
 8014ef6:	8043      	strh	r3, [r0, #2]
 8014ef8:	8083      	strh	r3, [r0, #4]
 8014efa:	80c3      	strh	r3, [r0, #6]
 8014efc:	4620      	mov	r0, r4
 8014efe:	bd10      	pop	{r4, pc}
 8014f00:	3126      	adds	r1, #38	; 0x26
 8014f02:	f004 fc35 	bl	8019770 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014f06:	e7f9      	b.n	8014efc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08014f08 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8014f08:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8014f0c:	b12a      	cbz	r2, 8014f1a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014f0e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8014f12:	b112      	cbz	r2, 8014f1a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014f14:	6803      	ldr	r3, [r0, #0]
 8014f16:	695b      	ldr	r3, [r3, #20]
 8014f18:	4718      	bx	r3
 8014f1a:	4770      	bx	lr

08014f1c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f20:	4604      	mov	r4, r0
 8014f22:	2500      	movs	r5, #0
 8014f24:	f854 3b26 	ldr.w	r3, [r4], #38
 8014f28:	b088      	sub	sp, #32
 8014f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f2c:	460f      	mov	r7, r1
 8014f2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014f32:	a904      	add	r1, sp, #16
 8014f34:	4606      	mov	r6, r0
 8014f36:	4798      	blx	r3
 8014f38:	4620      	mov	r0, r4
 8014f3a:	f004 fbb1 	bl	80196a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014f3e:	4680      	mov	r8, r0
 8014f40:	4620      	mov	r0, r4
 8014f42:	f004 fbe1 	bl	8019708 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014f46:	9506      	str	r5, [sp, #24]
 8014f48:	ad06      	add	r5, sp, #24
 8014f4a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014f4e:	4639      	mov	r1, r7
 8014f50:	4628      	mov	r0, r5
 8014f52:	f8ad 801c 	strh.w	r8, [sp, #28]
 8014f56:	f7fe f815 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 8014f5a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	dd19      	ble.n	8014f96 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014f62:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	dd15      	ble.n	8014f96 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014f6a:	4b0c      	ldr	r3, [pc, #48]	; (8014f9c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014f72:	b10a      	cbz	r2, 8014f78 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8014f74:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014f76:	b900      	cbnz	r0, 8014f7a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8014f78:	6898      	ldr	r0, [r3, #8]
 8014f7a:	2701      	movs	r7, #1
 8014f7c:	6801      	ldr	r1, [r0, #0]
 8014f7e:	9702      	str	r7, [sp, #8]
 8014f80:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8014f84:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014f88:	e9cd 5600 	strd	r5, r6, [sp]
 8014f8c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014f90:	688d      	ldr	r5, [r1, #8]
 8014f92:	4621      	mov	r1, r4
 8014f94:	47a8      	blx	r5
 8014f96:	b008      	add	sp, #32
 8014f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f9c:	2004e118 	.word	0x2004e118

08014fa0 <_ZN8touchgfx7OutlineD1Ev>:
 8014fa0:	4770      	bx	lr

08014fa2 <_ZN8touchgfx7OutlineD0Ev>:
 8014fa2:	b510      	push	{r4, lr}
 8014fa4:	4604      	mov	r4, r0
 8014fa6:	2130      	movs	r1, #48	; 0x30
 8014fa8:	f010 fc3a 	bl	8025820 <_ZdlPvj>
 8014fac:	4620      	mov	r0, r4
 8014fae:	bd10      	pop	{r4, pc}

08014fb0 <_ZN8touchgfx7Outline5resetEv>:
 8014fb0:	b510      	push	{r4, lr}
 8014fb2:	4604      	mov	r4, r0
 8014fb4:	f000 fe8a 	bl	8015ccc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8014fb8:	60e0      	str	r0, [r4, #12]
 8014fba:	f000 fe8d 	bl	8015cd8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014fc4:	68e3      	ldr	r3, [r4, #12]
 8014fc6:	08c0      	lsrs	r0, r0, #3
 8014fc8:	3801      	subs	r0, #1
 8014fca:	6123      	str	r3, [r4, #16]
 8014fcc:	6060      	str	r0, [r4, #4]
 8014fce:	60a2      	str	r2, [r4, #8]
 8014fd0:	8019      	strh	r1, [r3, #0]
 8014fd2:	8059      	strh	r1, [r3, #2]
 8014fd4:	809a      	strh	r2, [r3, #4]
 8014fd6:	80da      	strh	r2, [r3, #6]
 8014fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fda:	f023 0301 	bic.w	r3, r3, #1
 8014fde:	f043 0302 	orr.w	r3, r3, #2
 8014fe2:	6263      	str	r3, [r4, #36]	; 0x24
 8014fe4:	bd10      	pop	{r4, pc}
	...

08014fe8 <_ZN8touchgfx7OutlineC1Ev>:
 8014fe8:	4b0a      	ldr	r3, [pc, #40]	; (8015014 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8014fea:	b510      	push	{r4, lr}
 8014fec:	6003      	str	r3, [r0, #0]
 8014fee:	2300      	movs	r3, #0
 8014ff0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8014ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ff8:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014ffc:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8015000:	6243      	str	r3, [r0, #36]	; 0x24
 8015002:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015006:	4604      	mov	r4, r0
 8015008:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801500c:	f7ff ffd0 	bl	8014fb0 <_ZN8touchgfx7Outline5resetEv>
 8015010:	4620      	mov	r0, r4
 8015012:	bd10      	pop	{r4, pc}
 8015014:	080289b4 	.word	0x080289b4

08015018 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8015018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801501c:	b093      	sub	sp, #76	; 0x4c
 801501e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015020:	9305      	str	r3, [sp, #20]
 8015022:	f004 051f 	and.w	r5, r4, #31
 8015026:	1153      	asrs	r3, r2, #5
 8015028:	9504      	str	r5, [sp, #16]
 801502a:	1156      	asrs	r6, r2, #5
 801502c:	1165      	asrs	r5, r4, #5
 801502e:	9303      	str	r3, [sp, #12]
 8015030:	42ae      	cmp	r6, r5
 8015032:	ea4f 1364 	mov.w	r3, r4, asr #5
 8015036:	9306      	str	r3, [sp, #24]
 8015038:	f002 031f 	and.w	r3, r2, #31
 801503c:	f040 80f8 	bne.w	8015230 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8015040:	9c04      	ldr	r4, [sp, #16]
 8015042:	9a05      	ldr	r2, [sp, #20]
 8015044:	42a3      	cmp	r3, r4
 8015046:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801504a:	6902      	ldr	r2, [r0, #16]
 801504c:	d125      	bne.n	801509a <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 801504e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015052:	459e      	cmp	lr, r3
 8015054:	d103      	bne.n	801505e <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 8015056:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801505a:	429e      	cmp	r6, r3
 801505c:	d035      	beq.n	80150ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801505e:	88d1      	ldrh	r1, [r2, #6]
 8015060:	8893      	ldrh	r3, [r2, #4]
 8015062:	430b      	orrs	r3, r1
 8015064:	d010      	beq.n	8015088 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015066:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801506a:	2b00      	cmp	r3, #0
 801506c:	db0c      	blt.n	8015088 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801506e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015070:	428b      	cmp	r3, r1
 8015072:	da09      	bge.n	8015088 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015074:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015078:	428b      	cmp	r3, r1
 801507a:	bf38      	it	cc
 801507c:	3208      	addcc	r2, #8
 801507e:	f103 0301 	add.w	r3, r3, #1
 8015082:	bf38      	it	cc
 8015084:	6102      	strcc	r2, [r0, #16]
 8015086:	6083      	str	r3, [r0, #8]
 8015088:	6903      	ldr	r3, [r0, #16]
 801508a:	9a03      	ldr	r2, [sp, #12]
 801508c:	f8a3 e000 	strh.w	lr, [r3]
 8015090:	805a      	strh	r2, [r3, #2]
 8015092:	2200      	movs	r2, #0
 8015094:	809a      	strh	r2, [r3, #4]
 8015096:	80da      	strh	r2, [r3, #6]
 8015098:	e017      	b.n	80150ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801509a:	9c05      	ldr	r4, [sp, #20]
 801509c:	114e      	asrs	r6, r1, #5
 801509e:	f004 041f 	and.w	r4, r4, #31
 80150a2:	9402      	str	r4, [sp, #8]
 80150a4:	9c04      	ldr	r4, [sp, #16]
 80150a6:	4576      	cmp	r6, lr
 80150a8:	f001 0c1f 	and.w	ip, r1, #31
 80150ac:	eba4 0403 	sub.w	r4, r4, r3
 80150b0:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80150b4:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80150b8:	d10a      	bne.n	80150d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 80150ba:	9b02      	ldr	r3, [sp, #8]
 80150bc:	44a0      	add	r8, r4
 80150be:	449c      	add	ip, r3
 80150c0:	fb04 a40c 	mla	r4, r4, ip, sl
 80150c4:	f8a2 8004 	strh.w	r8, [r2, #4]
 80150c8:	80d4      	strh	r4, [r2, #6]
 80150ca:	b013      	add	sp, #76	; 0x4c
 80150cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d0:	9d05      	ldr	r5, [sp, #20]
 80150d2:	1a69      	subs	r1, r5, r1
 80150d4:	bf5b      	ittet	pl
 80150d6:	f1cc 0520 	rsbpl	r5, ip, #32
 80150da:	436c      	mulpl	r4, r5
 80150dc:	2500      	movmi	r5, #0
 80150de:	2520      	movpl	r5, #32
 80150e0:	bf44      	itt	mi
 80150e2:	fb04 f40c 	mulmi.w	r4, r4, ip
 80150e6:	4249      	negmi	r1, r1
 80150e8:	9501      	str	r5, [sp, #4]
 80150ea:	fb94 f5f1 	sdiv	r5, r4, r1
 80150ee:	bf54      	ite	pl
 80150f0:	f04f 0901 	movpl.w	r9, #1
 80150f4:	f04f 39ff 	movmi.w	r9, #4294967295
 80150f8:	fb01 4415 	mls	r4, r1, r5, r4
 80150fc:	9f01      	ldr	r7, [sp, #4]
 80150fe:	2c00      	cmp	r4, #0
 8015100:	bfb8      	it	lt
 8015102:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015106:	44bc      	add	ip, r7
 8015108:	fb05 ac0c 	mla	ip, r5, ip, sl
 801510c:	44a8      	add	r8, r5
 801510e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015112:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015116:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801511a:	bfb8      	it	lt
 801511c:	1864      	addlt	r4, r4, r1
 801511e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8015122:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8015126:	444e      	add	r6, r9
 8015128:	ea58 0202 	orrs.w	r2, r8, r2
 801512c:	d011      	beq.n	8015152 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801512e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8015132:	f1b8 0f00 	cmp.w	r8, #0
 8015136:	db0c      	blt.n	8015152 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015138:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801513a:	4590      	cmp	r8, r2
 801513c:	da09      	bge.n	8015152 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801513e:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8015142:	4590      	cmp	r8, r2
 8015144:	bf3c      	itt	cc
 8015146:	f10c 0208 	addcc.w	r2, ip, #8
 801514a:	6102      	strcc	r2, [r0, #16]
 801514c:	f108 0201 	add.w	r2, r8, #1
 8015150:	6082      	str	r2, [r0, #8]
 8015152:	2700      	movs	r7, #0
 8015154:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015158:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801515c:	45b6      	cmp	lr, r6
 801515e:	f8ac 6000 	strh.w	r6, [ip]
 8015162:	f8ac 2002 	strh.w	r2, [ip, #2]
 8015166:	f8ac 7004 	strh.w	r7, [ip, #4]
 801516a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801516e:	442b      	add	r3, r5
 8015170:	d04d      	beq.n	801520e <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8015172:	9f04      	ldr	r7, [sp, #16]
 8015174:	f04f 0a00 	mov.w	sl, #0
 8015178:	1aff      	subs	r7, r7, r3
 801517a:	443d      	add	r5, r7
 801517c:	016d      	lsls	r5, r5, #5
 801517e:	fb95 f8f1 	sdiv	r8, r5, r1
 8015182:	fb01 5518 	mls	r5, r1, r8, r5
 8015186:	2d00      	cmp	r5, #0
 8015188:	bfb8      	it	lt
 801518a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801518e:	f108 0701 	add.w	r7, r8, #1
 8015192:	bfb8      	it	lt
 8015194:	186d      	addlt	r5, r5, r1
 8015196:	1a64      	subs	r4, r4, r1
 8015198:	9703      	str	r7, [sp, #12]
 801519a:	1964      	adds	r4, r4, r5
 801519c:	bf48      	it	mi
 801519e:	4647      	movmi	r7, r8
 80151a0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80151a4:	bf58      	it	pl
 80151a6:	9f03      	ldrpl	r7, [sp, #12]
 80151a8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80151ac:	443b      	add	r3, r7
 80151ae:	44bb      	add	fp, r7
 80151b0:	f8ac b004 	strh.w	fp, [ip, #4]
 80151b4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80151b8:	bf58      	it	pl
 80151ba:	1a64      	subpl	r4, r4, r1
 80151bc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80151c0:	f8ac b006 	strh.w	fp, [ip, #6]
 80151c4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80151c8:	444e      	add	r6, r9
 80151ca:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80151ce:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80151d2:	ea5b 0707 	orrs.w	r7, fp, r7
 80151d6:	d011      	beq.n	80151fc <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80151d8:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80151dc:	f1bb 0f00 	cmp.w	fp, #0
 80151e0:	db0c      	blt.n	80151fc <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80151e2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80151e4:	45bb      	cmp	fp, r7
 80151e6:	da09      	bge.n	80151fc <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80151e8:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80151ec:	45bb      	cmp	fp, r7
 80151ee:	bf3c      	itt	cc
 80151f0:	f10c 0708 	addcc.w	r7, ip, #8
 80151f4:	6107      	strcc	r7, [r0, #16]
 80151f6:	f10b 0701 	add.w	r7, fp, #1
 80151fa:	6087      	str	r7, [r0, #8]
 80151fc:	6907      	ldr	r7, [r0, #16]
 80151fe:	45b6      	cmp	lr, r6
 8015200:	803e      	strh	r6, [r7, #0]
 8015202:	807a      	strh	r2, [r7, #2]
 8015204:	f8a7 a004 	strh.w	sl, [r7, #4]
 8015208:	f8a7 a006 	strh.w	sl, [r7, #6]
 801520c:	d1c5      	bne.n	801519a <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 801520e:	9a04      	ldr	r2, [sp, #16]
 8015210:	1ad3      	subs	r3, r2, r3
 8015212:	6902      	ldr	r2, [r0, #16]
 8015214:	8891      	ldrh	r1, [r2, #4]
 8015216:	88d6      	ldrh	r6, [r2, #6]
 8015218:	4419      	add	r1, r3
 801521a:	8091      	strh	r1, [r2, #4]
 801521c:	9902      	ldr	r1, [sp, #8]
 801521e:	f101 0c20 	add.w	ip, r1, #32
 8015222:	9901      	ldr	r1, [sp, #4]
 8015224:	ebac 0c01 	sub.w	ip, ip, r1
 8015228:	fb03 630c 	mla	r3, r3, ip, r6
 801522c:	80d3      	strh	r3, [r2, #6]
 801522e:	e74c      	b.n	80150ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015230:	9d05      	ldr	r5, [sp, #20]
 8015232:	1aa2      	subs	r2, r4, r2
 8015234:	eba5 0501 	sub.w	r5, r5, r1
 8015238:	9508      	str	r5, [sp, #32]
 801523a:	9202      	str	r2, [sp, #8]
 801523c:	f140 8128 	bpl.w	8015490 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8015240:	9a03      	ldr	r2, [sp, #12]
 8015242:	2a00      	cmp	r2, #0
 8015244:	f6ff af41 	blt.w	80150ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015248:	f04f 34ff 	mov.w	r4, #4294967295
 801524c:	9a02      	ldr	r2, [sp, #8]
 801524e:	940b      	str	r4, [sp, #44]	; 0x2c
 8015250:	4252      	negs	r2, r2
 8015252:	9202      	str	r2, [sp, #8]
 8015254:	9a06      	ldr	r2, [sp, #24]
 8015256:	2400      	movs	r4, #0
 8015258:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801525c:	9206      	str	r2, [sp, #24]
 801525e:	462a      	mov	r2, r5
 8015260:	435a      	muls	r2, r3
 8015262:	9401      	str	r4, [sp, #4]
 8015264:	9c02      	ldr	r4, [sp, #8]
 8015266:	9d02      	ldr	r5, [sp, #8]
 8015268:	fb92 f4f4 	sdiv	r4, r2, r4
 801526c:	fb05 2214 	mls	r2, r5, r4, r2
 8015270:	2a00      	cmp	r2, #0
 8015272:	9207      	str	r2, [sp, #28]
 8015274:	bfbc      	itt	lt
 8015276:	1952      	addlt	r2, r2, r5
 8015278:	9207      	strlt	r2, [sp, #28]
 801527a:	9a01      	ldr	r2, [sp, #4]
 801527c:	bfb8      	it	lt
 801527e:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015282:	eb04 0901 	add.w	r9, r4, r1
 8015286:	429a      	cmp	r2, r3
 8015288:	ea4f 1669 	mov.w	r6, r9, asr #5
 801528c:	6905      	ldr	r5, [r0, #16]
 801528e:	f040 8112 	bne.w	80154b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8015292:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015296:	429e      	cmp	r6, r3
 8015298:	d104      	bne.n	80152a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 801529a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801529e:	9a03      	ldr	r2, [sp, #12]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d01b      	beq.n	80152dc <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80152a4:	88ea      	ldrh	r2, [r5, #6]
 80152a6:	88ab      	ldrh	r3, [r5, #4]
 80152a8:	4313      	orrs	r3, r2
 80152aa:	d010      	beq.n	80152ce <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80152ac:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80152b0:	2a00      	cmp	r2, #0
 80152b2:	db0c      	blt.n	80152ce <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80152b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80152b6:	429a      	cmp	r2, r3
 80152b8:	da09      	bge.n	80152ce <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80152ba:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80152be:	429a      	cmp	r2, r3
 80152c0:	bf38      	it	cc
 80152c2:	3508      	addcc	r5, #8
 80152c4:	f102 0201 	add.w	r2, r2, #1
 80152c8:	bf38      	it	cc
 80152ca:	6105      	strcc	r5, [r0, #16]
 80152cc:	6082      	str	r2, [r0, #8]
 80152ce:	6903      	ldr	r3, [r0, #16]
 80152d0:	9a03      	ldr	r2, [sp, #12]
 80152d2:	801e      	strh	r6, [r3, #0]
 80152d4:	805a      	strh	r2, [r3, #2]
 80152d6:	2200      	movs	r2, #0
 80152d8:	809a      	strh	r2, [r3, #4]
 80152da:	80da      	strh	r2, [r3, #6]
 80152dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152de:	9a03      	ldr	r2, [sp, #12]
 80152e0:	6901      	ldr	r1, [r0, #16]
 80152e2:	441a      	add	r2, r3
 80152e4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80152e8:	42b3      	cmp	r3, r6
 80152ea:	d103      	bne.n	80152f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 80152ec:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d01a      	beq.n	801532a <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 80152f4:	88cc      	ldrh	r4, [r1, #6]
 80152f6:	888b      	ldrh	r3, [r1, #4]
 80152f8:	4323      	orrs	r3, r4
 80152fa:	d010      	beq.n	801531e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80152fc:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015300:	2c00      	cmp	r4, #0
 8015302:	db0c      	blt.n	801531e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015304:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015306:	429c      	cmp	r4, r3
 8015308:	da09      	bge.n	801531e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801530a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801530e:	429c      	cmp	r4, r3
 8015310:	bf38      	it	cc
 8015312:	3108      	addcc	r1, #8
 8015314:	f104 0401 	add.w	r4, r4, #1
 8015318:	bf38      	it	cc
 801531a:	6101      	strcc	r1, [r0, #16]
 801531c:	6084      	str	r4, [r0, #8]
 801531e:	2100      	movs	r1, #0
 8015320:	6903      	ldr	r3, [r0, #16]
 8015322:	801e      	strh	r6, [r3, #0]
 8015324:	805a      	strh	r2, [r3, #2]
 8015326:	8099      	strh	r1, [r3, #4]
 8015328:	80d9      	strh	r1, [r3, #6]
 801532a:	9b06      	ldr	r3, [sp, #24]
 801532c:	4293      	cmp	r3, r2
 801532e:	f000 8082 	beq.w	8015436 <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8015332:	9b08      	ldr	r3, [sp, #32]
 8015334:	9902      	ldr	r1, [sp, #8]
 8015336:	015b      	lsls	r3, r3, #5
 8015338:	fb93 f1f1 	sdiv	r1, r3, r1
 801533c:	9c02      	ldr	r4, [sp, #8]
 801533e:	9103      	str	r1, [sp, #12]
 8015340:	fb04 3311 	mls	r3, r4, r1, r3
 8015344:	2b00      	cmp	r3, #0
 8015346:	9308      	str	r3, [sp, #32]
 8015348:	da04      	bge.n	8015354 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 801534a:	1e4b      	subs	r3, r1, #1
 801534c:	9303      	str	r3, [sp, #12]
 801534e:	9b08      	ldr	r3, [sp, #32]
 8015350:	4423      	add	r3, r4
 8015352:	9308      	str	r3, [sp, #32]
 8015354:	464f      	mov	r7, r9
 8015356:	2600      	movs	r6, #0
 8015358:	9b07      	ldr	r3, [sp, #28]
 801535a:	9902      	ldr	r1, [sp, #8]
 801535c:	1a5b      	subs	r3, r3, r1
 801535e:	9307      	str	r3, [sp, #28]
 8015360:	9b01      	ldr	r3, [sp, #4]
 8015362:	f1c3 0320 	rsb	r3, r3, #32
 8015366:	930e      	str	r3, [sp, #56]	; 0x38
 8015368:	990e      	ldr	r1, [sp, #56]	; 0x38
 801536a:	9b01      	ldr	r3, [sp, #4]
 801536c:	1a5b      	subs	r3, r3, r1
 801536e:	930a      	str	r3, [sp, #40]	; 0x28
 8015370:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8015374:	185b      	adds	r3, r3, r1
 8015376:	bf58      	it	pl
 8015378:	9902      	ldrpl	r1, [sp, #8]
 801537a:	9307      	str	r3, [sp, #28]
 801537c:	bf5d      	ittte	pl
 801537e:	1a5b      	subpl	r3, r3, r1
 8015380:	9307      	strpl	r3, [sp, #28]
 8015382:	9b03      	ldrpl	r3, [sp, #12]
 8015384:	9903      	ldrmi	r1, [sp, #12]
 8015386:	bf58      	it	pl
 8015388:	1c59      	addpl	r1, r3, #1
 801538a:	4489      	add	r9, r1
 801538c:	2a00      	cmp	r2, #0
 801538e:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8015392:	db2e      	blt.n	80153f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015394:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015396:	4293      	cmp	r3, r2
 8015398:	dd2b      	ble.n	80153f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801539a:	9c01      	ldr	r4, [sp, #4]
 801539c:	6905      	ldr	r5, [r0, #16]
 801539e:	46a0      	mov	r8, r4
 80153a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80153a2:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80153a6:	45a0      	cmp	r8, r4
 80153a8:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80153ac:	f040 8150 	bne.w	8015650 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 80153b0:	f9b5 1000 	ldrsh.w	r1, [r5]
 80153b4:	4551      	cmp	r1, sl
 80153b6:	d103      	bne.n	80153c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 80153b8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80153bc:	4291      	cmp	r1, r2
 80153be:	d018      	beq.n	80153f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80153c0:	ea5c 010e 	orrs.w	r1, ip, lr
 80153c4:	d00f      	beq.n	80153e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80153c6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80153ca:	2900      	cmp	r1, #0
 80153cc:	db0b      	blt.n	80153e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80153ce:	428b      	cmp	r3, r1
 80153d0:	dd09      	ble.n	80153e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80153d2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80153d6:	4299      	cmp	r1, r3
 80153d8:	bf38      	it	cc
 80153da:	3508      	addcc	r5, #8
 80153dc:	f101 0101 	add.w	r1, r1, #1
 80153e0:	bf38      	it	cc
 80153e2:	6105      	strcc	r5, [r0, #16]
 80153e4:	6081      	str	r1, [r0, #8]
 80153e6:	6903      	ldr	r3, [r0, #16]
 80153e8:	f8a3 a000 	strh.w	sl, [r3]
 80153ec:	805a      	strh	r2, [r3, #2]
 80153ee:	809e      	strh	r6, [r3, #4]
 80153f0:	80de      	strh	r6, [r3, #6]
 80153f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153f4:	6901      	ldr	r1, [r0, #16]
 80153f6:	441a      	add	r2, r3
 80153f8:	88cc      	ldrh	r4, [r1, #6]
 80153fa:	888b      	ldrh	r3, [r1, #4]
 80153fc:	4323      	orrs	r3, r4
 80153fe:	d010      	beq.n	8015422 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015400:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015404:	2c00      	cmp	r4, #0
 8015406:	db0c      	blt.n	8015422 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015408:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801540a:	429c      	cmp	r4, r3
 801540c:	da09      	bge.n	8015422 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801540e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015412:	429c      	cmp	r4, r3
 8015414:	bf38      	it	cc
 8015416:	3108      	addcc	r1, #8
 8015418:	f104 0401 	add.w	r4, r4, #1
 801541c:	bf38      	it	cc
 801541e:	6101      	strcc	r1, [r0, #16]
 8015420:	6084      	str	r4, [r0, #8]
 8015422:	6903      	ldr	r3, [r0, #16]
 8015424:	464f      	mov	r7, r9
 8015426:	f8a3 a000 	strh.w	sl, [r3]
 801542a:	805a      	strh	r2, [r3, #2]
 801542c:	809e      	strh	r6, [r3, #4]
 801542e:	80de      	strh	r6, [r3, #6]
 8015430:	9b06      	ldr	r3, [sp, #24]
 8015432:	4293      	cmp	r3, r2
 8015434:	d19c      	bne.n	8015370 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8015436:	9b01      	ldr	r3, [sp, #4]
 8015438:	6907      	ldr	r7, [r0, #16]
 801543a:	f1c3 0620 	rsb	r6, r3, #32
 801543e:	9b05      	ldr	r3, [sp, #20]
 8015440:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8015444:	9b04      	ldr	r3, [sp, #16]
 8015446:	429e      	cmp	r6, r3
 8015448:	f040 81cc 	bne.w	80157e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 801544c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015450:	459e      	cmp	lr, r3
 8015452:	d104      	bne.n	801545e <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8015454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015458:	429a      	cmp	r2, r3
 801545a:	f43f ae36 	beq.w	80150ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801545e:	88f9      	ldrh	r1, [r7, #6]
 8015460:	88bb      	ldrh	r3, [r7, #4]
 8015462:	430b      	orrs	r3, r1
 8015464:	d010      	beq.n	8015488 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015466:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801546a:	2b00      	cmp	r3, #0
 801546c:	db0c      	blt.n	8015488 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801546e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015470:	428b      	cmp	r3, r1
 8015472:	da09      	bge.n	8015488 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015474:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015478:	428b      	cmp	r3, r1
 801547a:	bf38      	it	cc
 801547c:	3708      	addcc	r7, #8
 801547e:	f103 0301 	add.w	r3, r3, #1
 8015482:	bf38      	it	cc
 8015484:	6107      	strcc	r7, [r0, #16]
 8015486:	6083      	str	r3, [r0, #8]
 8015488:	6903      	ldr	r3, [r0, #16]
 801548a:	f8a3 e000 	strh.w	lr, [r3]
 801548e:	e5ff      	b.n	8015090 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8015490:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015492:	9c03      	ldr	r4, [sp, #12]
 8015494:	42a2      	cmp	r2, r4
 8015496:	f6ff ae18 	blt.w	80150ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801549a:	9c06      	ldr	r4, [sp, #24]
 801549c:	42a2      	cmp	r2, r4
 801549e:	bfb8      	it	lt
 80154a0:	3201      	addlt	r2, #1
 80154a2:	9c08      	ldr	r4, [sp, #32]
 80154a4:	bfb8      	it	lt
 80154a6:	9206      	strlt	r2, [sp, #24]
 80154a8:	f1c3 0220 	rsb	r2, r3, #32
 80154ac:	4362      	muls	r2, r4
 80154ae:	2401      	movs	r4, #1
 80154b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80154b2:	2420      	movs	r4, #32
 80154b4:	e6d5      	b.n	8015262 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 80154b6:	f009 021f 	and.w	r2, r9, #31
 80154ba:	ea4f 1861 	mov.w	r8, r1, asr #5
 80154be:	920c      	str	r2, [sp, #48]	; 0x30
 80154c0:	9a01      	ldr	r2, [sp, #4]
 80154c2:	45b0      	cmp	r8, r6
 80154c4:	f001 011f 	and.w	r1, r1, #31
 80154c8:	eba2 0203 	sub.w	r2, r2, r3
 80154cc:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80154d0:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80154d4:	d108      	bne.n	80154e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 80154d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154d8:	4496      	add	lr, r2
 80154da:	4419      	add	r1, r3
 80154dc:	fb02 a101 	mla	r1, r2, r1, sl
 80154e0:	f8a5 e004 	strh.w	lr, [r5, #4]
 80154e4:	80e9      	strh	r1, [r5, #6]
 80154e6:	e6f9      	b.n	80152dc <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80154e8:	2c00      	cmp	r4, #0
 80154ea:	f2c0 80aa 	blt.w	8015642 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 80154ee:	2701      	movs	r7, #1
 80154f0:	970a      	str	r7, [sp, #40]	; 0x28
 80154f2:	2720      	movs	r7, #32
 80154f4:	f1c1 0c20 	rsb	ip, r1, #32
 80154f8:	fb02 f20c 	mul.w	r2, r2, ip
 80154fc:	fb92 fcf4 	sdiv	ip, r2, r4
 8015500:	fb04 221c 	mls	r2, r4, ip, r2
 8015504:	9709      	str	r7, [sp, #36]	; 0x24
 8015506:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015508:	2a00      	cmp	r2, #0
 801550a:	bfb8      	it	lt
 801550c:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8015510:	4439      	add	r1, r7
 8015512:	fb0c a101 	mla	r1, ip, r1, sl
 8015516:	44e6      	add	lr, ip
 8015518:	80e9      	strh	r1, [r5, #6]
 801551a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801551c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8015520:	eb08 0501 	add.w	r5, r8, r1
 8015524:	6901      	ldr	r1, [r0, #16]
 8015526:	bfb8      	it	lt
 8015528:	1912      	addlt	r2, r2, r4
 801552a:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801552e:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8015532:	ea58 070e 	orrs.w	r7, r8, lr
 8015536:	d010      	beq.n	801555a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8015538:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801553c:	f1be 0f00 	cmp.w	lr, #0
 8015540:	db0b      	blt.n	801555a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8015542:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015544:	45be      	cmp	lr, r7
 8015546:	da08      	bge.n	801555a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8015548:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801554c:	45be      	cmp	lr, r7
 801554e:	bf3c      	itt	cc
 8015550:	3108      	addcc	r1, #8
 8015552:	6101      	strcc	r1, [r0, #16]
 8015554:	f10e 0101 	add.w	r1, lr, #1
 8015558:	6081      	str	r1, [r0, #8]
 801555a:	f04f 0e00 	mov.w	lr, #0
 801555e:	6901      	ldr	r1, [r0, #16]
 8015560:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8015564:	42ae      	cmp	r6, r5
 8015566:	800d      	strh	r5, [r1, #0]
 8015568:	f8a1 8002 	strh.w	r8, [r1, #2]
 801556c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8015570:	f8a1 e006 	strh.w	lr, [r1, #6]
 8015574:	4463      	add	r3, ip
 8015576:	d055      	beq.n	8015624 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 8015578:	9901      	ldr	r1, [sp, #4]
 801557a:	1b12      	subs	r2, r2, r4
 801557c:	1ac9      	subs	r1, r1, r3
 801557e:	4461      	add	r1, ip
 8015580:	0149      	lsls	r1, r1, #5
 8015582:	fb91 fef4 	sdiv	lr, r1, r4
 8015586:	fb04 111e 	mls	r1, r4, lr, r1
 801558a:	2900      	cmp	r1, #0
 801558c:	bfb8      	it	lt
 801558e:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8015592:	f10e 0701 	add.w	r7, lr, #1
 8015596:	bfb8      	it	lt
 8015598:	1909      	addlt	r1, r1, r4
 801559a:	970d      	str	r7, [sp, #52]	; 0x34
 801559c:	1852      	adds	r2, r2, r1
 801559e:	bf48      	it	mi
 80155a0:	46f4      	movmi	ip, lr
 80155a2:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80155a6:	bf58      	it	pl
 80155a8:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 80155ac:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80155b0:	4463      	add	r3, ip
 80155b2:	44e3      	add	fp, ip
 80155b4:	f8aa b004 	strh.w	fp, [sl, #4]
 80155b8:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80155bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80155be:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80155c2:	f8aa b006 	strh.w	fp, [sl, #6]
 80155c6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80155ca:	bf58      	it	pl
 80155cc:	1b12      	subpl	r2, r2, r4
 80155ce:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80155d2:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80155d6:	443d      	add	r5, r7
 80155d8:	ea5b 070a 	orrs.w	r7, fp, sl
 80155dc:	d014      	beq.n	8015608 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 80155de:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80155e2:	f1ba 0f00 	cmp.w	sl, #0
 80155e6:	db0f      	blt.n	8015608 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 80155e8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80155ea:	45ba      	cmp	sl, r7
 80155ec:	da0c      	bge.n	8015608 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 80155ee:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80155f2:	45ba      	cmp	sl, r7
 80155f4:	bf38      	it	cc
 80155f6:	f10c 0c08 	addcc.w	ip, ip, #8
 80155fa:	f10a 0a01 	add.w	sl, sl, #1
 80155fe:	bf38      	it	cc
 8015600:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8015604:	f8c0 a008 	str.w	sl, [r0, #8]
 8015608:	f04f 0700 	mov.w	r7, #0
 801560c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015610:	42ae      	cmp	r6, r5
 8015612:	f8ac 5000 	strh.w	r5, [ip]
 8015616:	f8ac 8002 	strh.w	r8, [ip, #2]
 801561a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801561e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015622:	d1bb      	bne.n	801559c <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8015624:	6904      	ldr	r4, [r0, #16]
 8015626:	9a01      	ldr	r2, [sp, #4]
 8015628:	990c      	ldr	r1, [sp, #48]	; 0x30
 801562a:	1ad3      	subs	r3, r2, r3
 801562c:	88a2      	ldrh	r2, [r4, #4]
 801562e:	3120      	adds	r1, #32
 8015630:	441a      	add	r2, r3
 8015632:	80a2      	strh	r2, [r4, #4]
 8015634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015636:	1a89      	subs	r1, r1, r2
 8015638:	88e2      	ldrh	r2, [r4, #6]
 801563a:	fb03 2301 	mla	r3, r3, r1, r2
 801563e:	80e3      	strh	r3, [r4, #6]
 8015640:	e64c      	b.n	80152dc <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8015642:	f04f 37ff 	mov.w	r7, #4294967295
 8015646:	434a      	muls	r2, r1
 8015648:	970a      	str	r7, [sp, #40]	; 0x28
 801564a:	4264      	negs	r4, r4
 801564c:	2700      	movs	r7, #0
 801564e:	e755      	b.n	80154fc <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8015650:	ea4f 1867 	mov.w	r8, r7, asr #5
 8015654:	f009 031f 	and.w	r3, r9, #31
 8015658:	45d0      	cmp	r8, sl
 801565a:	f007 071f 	and.w	r7, r7, #31
 801565e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015660:	fa1f fc8c 	uxth.w	ip, ip
 8015664:	fa1f fe8e 	uxth.w	lr, lr
 8015668:	d10a      	bne.n	8015680 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 801566a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801566c:	449c      	add	ip, r3
 801566e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015670:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015674:	441f      	add	r7, r3
 8015676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015678:	fb03 e707 	mla	r7, r3, r7, lr
 801567c:	80ef      	strh	r7, [r5, #6]
 801567e:	e6b8      	b.n	80153f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015680:	2900      	cmp	r1, #0
 8015682:	f2c0 80a7 	blt.w	80157d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8015686:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015688:	f1c7 0320 	rsb	r3, r7, #32
 801568c:	4363      	muls	r3, r4
 801568e:	2401      	movs	r4, #1
 8015690:	940d      	str	r4, [sp, #52]	; 0x34
 8015692:	2420      	movs	r4, #32
 8015694:	940c      	str	r4, [sp, #48]	; 0x30
 8015696:	fb93 f4f1 	sdiv	r4, r3, r1
 801569a:	fb01 3b14 	mls	fp, r1, r4, r3
 801569e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156a0:	f1bb 0f00 	cmp.w	fp, #0
 80156a4:	bfb8      	it	lt
 80156a6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80156aa:	441f      	add	r7, r3
 80156ac:	fb04 e707 	mla	r7, r4, r7, lr
 80156b0:	44a4      	add	ip, r4
 80156b2:	f8a5 c004 	strh.w	ip, [r5, #4]
 80156b6:	80ef      	strh	r7, [r5, #6]
 80156b8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80156bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156be:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80156c2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80156c6:	bfb8      	it	lt
 80156c8:	448b      	addlt	fp, r1
 80156ca:	eb08 0503 	add.w	r5, r8, r3
 80156ce:	ea5e 0307 	orrs.w	r3, lr, r7
 80156d2:	d011      	beq.n	80156f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80156d4:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80156d8:	f1be 0f00 	cmp.w	lr, #0
 80156dc:	db0c      	blt.n	80156f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80156de:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80156e0:	45be      	cmp	lr, r7
 80156e2:	da09      	bge.n	80156f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80156e4:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80156e8:	45be      	cmp	lr, r7
 80156ea:	bf3c      	itt	cc
 80156ec:	f10c 0708 	addcc.w	r7, ip, #8
 80156f0:	6107      	strcc	r7, [r0, #16]
 80156f2:	f10e 0701 	add.w	r7, lr, #1
 80156f6:	6087      	str	r7, [r0, #8]
 80156f8:	6907      	ldr	r7, [r0, #16]
 80156fa:	b213      	sxth	r3, r2
 80156fc:	9310      	str	r3, [sp, #64]	; 0x40
 80156fe:	807b      	strh	r3, [r7, #2]
 8015700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015702:	4555      	cmp	r5, sl
 8015704:	803d      	strh	r5, [r7, #0]
 8015706:	80be      	strh	r6, [r7, #4]
 8015708:	80fe      	strh	r6, [r7, #6]
 801570a:	eb04 0c03 	add.w	ip, r4, r3
 801570e:	d050      	beq.n	80157b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8015710:	9b01      	ldr	r3, [sp, #4]
 8015712:	eba3 070c 	sub.w	r7, r3, ip
 8015716:	443c      	add	r4, r7
 8015718:	0164      	lsls	r4, r4, #5
 801571a:	fb94 f8f1 	sdiv	r8, r4, r1
 801571e:	fb01 4418 	mls	r4, r1, r8, r4
 8015722:	2c00      	cmp	r4, #0
 8015724:	bfb8      	it	lt
 8015726:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801572a:	ebab 0301 	sub.w	r3, fp, r1
 801572e:	f108 0701 	add.w	r7, r8, #1
 8015732:	bfb8      	it	lt
 8015734:	1864      	addlt	r4, r4, r1
 8015736:	9309      	str	r3, [sp, #36]	; 0x24
 8015738:	9711      	str	r7, [sp, #68]	; 0x44
 801573a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801573c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015740:	191b      	adds	r3, r3, r4
 8015742:	bf4c      	ite	mi
 8015744:	4647      	movmi	r7, r8
 8015746:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8015748:	f8be b004 	ldrh.w	fp, [lr, #4]
 801574c:	44bc      	add	ip, r7
 801574e:	44bb      	add	fp, r7
 8015750:	f8ae b004 	strh.w	fp, [lr, #4]
 8015754:	f8be b006 	ldrh.w	fp, [lr, #6]
 8015758:	9309      	str	r3, [sp, #36]	; 0x24
 801575a:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801575e:	f8ae b006 	strh.w	fp, [lr, #6]
 8015762:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015764:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015768:	443d      	add	r5, r7
 801576a:	f8be b006 	ldrh.w	fp, [lr, #6]
 801576e:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8015772:	bf5c      	itt	pl
 8015774:	1a5b      	subpl	r3, r3, r1
 8015776:	9309      	strpl	r3, [sp, #36]	; 0x24
 8015778:	ea5b 0307 	orrs.w	r3, fp, r7
 801577c:	d011      	beq.n	80157a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801577e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8015782:	f1bb 0f00 	cmp.w	fp, #0
 8015786:	db0c      	blt.n	80157a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8015788:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801578a:	45bb      	cmp	fp, r7
 801578c:	da09      	bge.n	80157a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801578e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015792:	45bb      	cmp	fp, r7
 8015794:	bf3c      	itt	cc
 8015796:	f10e 0708 	addcc.w	r7, lr, #8
 801579a:	6107      	strcc	r7, [r0, #16]
 801579c:	f10b 0701 	add.w	r7, fp, #1
 80157a0:	6087      	str	r7, [r0, #8]
 80157a2:	6907      	ldr	r7, [r0, #16]
 80157a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157a6:	4555      	cmp	r5, sl
 80157a8:	803d      	strh	r5, [r7, #0]
 80157aa:	807b      	strh	r3, [r7, #2]
 80157ac:	80be      	strh	r6, [r7, #4]
 80157ae:	80fe      	strh	r6, [r7, #6]
 80157b0:	d1c3      	bne.n	801573a <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 80157b2:	9b01      	ldr	r3, [sp, #4]
 80157b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80157b6:	eba3 0c0c 	sub.w	ip, r3, ip
 80157ba:	6903      	ldr	r3, [r0, #16]
 80157bc:	3720      	adds	r7, #32
 80157be:	8899      	ldrh	r1, [r3, #4]
 80157c0:	4461      	add	r1, ip
 80157c2:	8099      	strh	r1, [r3, #4]
 80157c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80157c6:	1a7f      	subs	r7, r7, r1
 80157c8:	88d9      	ldrh	r1, [r3, #6]
 80157ca:	fb0c 1c07 	mla	ip, ip, r7, r1
 80157ce:	f8a3 c006 	strh.w	ip, [r3, #6]
 80157d2:	e60e      	b.n	80153f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80157d4:	f04f 34ff 	mov.w	r4, #4294967295
 80157d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157da:	940d      	str	r4, [sp, #52]	; 0x34
 80157dc:	437b      	muls	r3, r7
 80157de:	4249      	negs	r1, r1
 80157e0:	2400      	movs	r4, #0
 80157e2:	e757      	b.n	8015694 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 80157e4:	9905      	ldr	r1, [sp, #20]
 80157e6:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80157ea:	f001 011f 	and.w	r1, r1, #31
 80157ee:	9102      	str	r1, [sp, #8]
 80157f0:	9904      	ldr	r1, [sp, #16]
 80157f2:	45f3      	cmp	fp, lr
 80157f4:	f009 0c1f 	and.w	ip, r9, #31
 80157f8:	eba1 0406 	sub.w	r4, r1, r6
 80157fc:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8015800:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8015804:	d108      	bne.n	8015818 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8015806:	9b02      	ldr	r3, [sp, #8]
 8015808:	44a0      	add	r8, r4
 801580a:	449c      	add	ip, r3
 801580c:	fb04 a40c 	mla	r4, r4, ip, sl
 8015810:	f8a7 8004 	strh.w	r8, [r7, #4]
 8015814:	80fc      	strh	r4, [r7, #6]
 8015816:	e458      	b.n	80150ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015818:	9905      	ldr	r1, [sp, #20]
 801581a:	ebb1 0109 	subs.w	r1, r1, r9
 801581e:	bf5b      	ittet	pl
 8015820:	f1cc 0520 	rsbpl	r5, ip, #32
 8015824:	436c      	mulpl	r4, r5
 8015826:	2500      	movmi	r5, #0
 8015828:	2520      	movpl	r5, #32
 801582a:	bf44      	itt	mi
 801582c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015830:	4249      	negmi	r1, r1
 8015832:	9501      	str	r5, [sp, #4]
 8015834:	fb94 f5f1 	sdiv	r5, r4, r1
 8015838:	bf54      	ite	pl
 801583a:	f04f 0901 	movpl.w	r9, #1
 801583e:	f04f 39ff 	movmi.w	r9, #4294967295
 8015842:	fb01 4415 	mls	r4, r1, r5, r4
 8015846:	9b01      	ldr	r3, [sp, #4]
 8015848:	2c00      	cmp	r4, #0
 801584a:	bfb8      	it	lt
 801584c:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015850:	449c      	add	ip, r3
 8015852:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015856:	44a8      	add	r8, r5
 8015858:	f8a7 8004 	strh.w	r8, [r7, #4]
 801585c:	f8a7 c006 	strh.w	ip, [r7, #6]
 8015860:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015864:	bfb8      	it	lt
 8015866:	1864      	addlt	r4, r4, r1
 8015868:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801586c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015870:	eb0b 0309 	add.w	r3, fp, r9
 8015874:	ea58 0707 	orrs.w	r7, r8, r7
 8015878:	d011      	beq.n	801589e <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801587a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801587e:	f1b8 0f00 	cmp.w	r8, #0
 8015882:	db0c      	blt.n	801589e <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8015884:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015886:	45b8      	cmp	r8, r7
 8015888:	da09      	bge.n	801589e <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801588a:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801588e:	45b8      	cmp	r8, r7
 8015890:	bf3c      	itt	cc
 8015892:	f10c 0708 	addcc.w	r7, ip, #8
 8015896:	6107      	strcc	r7, [r0, #16]
 8015898:	f108 0701 	add.w	r7, r8, #1
 801589c:	6087      	str	r7, [r0, #8]
 801589e:	f04f 0c00 	mov.w	ip, #0
 80158a2:	6907      	ldr	r7, [r0, #16]
 80158a4:	b212      	sxth	r2, r2
 80158a6:	459e      	cmp	lr, r3
 80158a8:	803b      	strh	r3, [r7, #0]
 80158aa:	807a      	strh	r2, [r7, #2]
 80158ac:	f8a7 c004 	strh.w	ip, [r7, #4]
 80158b0:	f8a7 c006 	strh.w	ip, [r7, #6]
 80158b4:	442e      	add	r6, r5
 80158b6:	d04d      	beq.n	8015954 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 80158b8:	9f04      	ldr	r7, [sp, #16]
 80158ba:	f04f 0a00 	mov.w	sl, #0
 80158be:	1bbf      	subs	r7, r7, r6
 80158c0:	443d      	add	r5, r7
 80158c2:	016d      	lsls	r5, r5, #5
 80158c4:	fb95 f8f1 	sdiv	r8, r5, r1
 80158c8:	fb01 5518 	mls	r5, r1, r8, r5
 80158cc:	4565      	cmp	r5, ip
 80158ce:	bfb8      	it	lt
 80158d0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80158d4:	f108 0701 	add.w	r7, r8, #1
 80158d8:	bfb8      	it	lt
 80158da:	186d      	addlt	r5, r5, r1
 80158dc:	1a64      	subs	r4, r4, r1
 80158de:	9703      	str	r7, [sp, #12]
 80158e0:	1964      	adds	r4, r4, r5
 80158e2:	bf48      	it	mi
 80158e4:	4647      	movmi	r7, r8
 80158e6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80158ea:	bf58      	it	pl
 80158ec:	9f03      	ldrpl	r7, [sp, #12]
 80158ee:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80158f2:	443e      	add	r6, r7
 80158f4:	44bb      	add	fp, r7
 80158f6:	f8ac b004 	strh.w	fp, [ip, #4]
 80158fa:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80158fe:	bf58      	it	pl
 8015900:	1a64      	subpl	r4, r4, r1
 8015902:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015906:	f8ac b006 	strh.w	fp, [ip, #6]
 801590a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801590e:	444b      	add	r3, r9
 8015910:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015914:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015918:	ea5b 0707 	orrs.w	r7, fp, r7
 801591c:	d011      	beq.n	8015942 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801591e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8015922:	f1bb 0f00 	cmp.w	fp, #0
 8015926:	db0c      	blt.n	8015942 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8015928:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801592a:	45bb      	cmp	fp, r7
 801592c:	da09      	bge.n	8015942 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801592e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015932:	45bb      	cmp	fp, r7
 8015934:	bf3c      	itt	cc
 8015936:	f10c 0708 	addcc.w	r7, ip, #8
 801593a:	6107      	strcc	r7, [r0, #16]
 801593c:	f10b 0701 	add.w	r7, fp, #1
 8015940:	6087      	str	r7, [r0, #8]
 8015942:	6907      	ldr	r7, [r0, #16]
 8015944:	459e      	cmp	lr, r3
 8015946:	803b      	strh	r3, [r7, #0]
 8015948:	807a      	strh	r2, [r7, #2]
 801594a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801594e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8015952:	d1c5      	bne.n	80158e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8015954:	9b04      	ldr	r3, [sp, #16]
 8015956:	1b9e      	subs	r6, r3, r6
 8015958:	6903      	ldr	r3, [r0, #16]
 801595a:	889a      	ldrh	r2, [r3, #4]
 801595c:	4432      	add	r2, r6
 801595e:	809a      	strh	r2, [r3, #4]
 8015960:	9a02      	ldr	r2, [sp, #8]
 8015962:	f102 0c20 	add.w	ip, r2, #32
 8015966:	9a01      	ldr	r2, [sp, #4]
 8015968:	ebac 0c02 	sub.w	ip, ip, r2
 801596c:	88da      	ldrh	r2, [r3, #6]
 801596e:	fb06 260c 	mla	r6, r6, ip, r2
 8015972:	80de      	strh	r6, [r3, #6]
 8015974:	f7ff bba9 	b.w	80150ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

08015978 <_ZN8touchgfx7Outline6lineToEii>:
 8015978:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801597a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801597c:	079b      	lsls	r3, r3, #30
 801597e:	460e      	mov	r6, r1
 8015980:	4615      	mov	r5, r2
 8015982:	d511      	bpl.n	80159a8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8015984:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8015988:	ea86 0701 	eor.w	r7, r6, r1
 801598c:	ea85 0302 	eor.w	r3, r5, r2
 8015990:	433b      	orrs	r3, r7
 8015992:	d009      	beq.n	80159a8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8015994:	4633      	mov	r3, r6
 8015996:	9500      	str	r5, [sp, #0]
 8015998:	f7ff fb3e 	bl	8015018 <_ZN8touchgfx7Outline10renderLineEiiii>
 801599c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801599e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80159a2:	f043 0301 	orr.w	r3, r3, #1
 80159a6:	6243      	str	r3, [r0, #36]	; 0x24
 80159a8:	b003      	add	sp, #12
 80159aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080159ac <_ZN8touchgfx7Outline6moveToEii>:
 80159ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80159b0:	4615      	mov	r5, r2
 80159b2:	079a      	lsls	r2, r3, #30
 80159b4:	4604      	mov	r4, r0
 80159b6:	460e      	mov	r6, r1
 80159b8:	d401      	bmi.n	80159be <_ZN8touchgfx7Outline6moveToEii+0x12>
 80159ba:	f7ff faf9 	bl	8014fb0 <_ZN8touchgfx7Outline5resetEv>
 80159be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80159c0:	07db      	lsls	r3, r3, #31
 80159c2:	d504      	bpl.n	80159ce <_ZN8touchgfx7Outline6moveToEii+0x22>
 80159c4:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80159c8:	4620      	mov	r0, r4
 80159ca:	f7ff ffd5 	bl	8015978 <_ZN8touchgfx7Outline6lineToEii>
 80159ce:	6923      	ldr	r3, [r4, #16]
 80159d0:	1170      	asrs	r0, r6, #5
 80159d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80159d6:	1169      	asrs	r1, r5, #5
 80159d8:	4290      	cmp	r0, r2
 80159da:	d103      	bne.n	80159e4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80159dc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80159e0:	4291      	cmp	r1, r2
 80159e2:	d01a      	beq.n	8015a1a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80159e4:	88df      	ldrh	r7, [r3, #6]
 80159e6:	889a      	ldrh	r2, [r3, #4]
 80159e8:	433a      	orrs	r2, r7
 80159ea:	d010      	beq.n	8015a0e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80159ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80159f0:	2a00      	cmp	r2, #0
 80159f2:	db0c      	blt.n	8015a0e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80159f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80159f6:	42ba      	cmp	r2, r7
 80159f8:	da09      	bge.n	8015a0e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80159fa:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80159fe:	42ba      	cmp	r2, r7
 8015a00:	bf38      	it	cc
 8015a02:	3308      	addcc	r3, #8
 8015a04:	f102 0201 	add.w	r2, r2, #1
 8015a08:	bf38      	it	cc
 8015a0a:	6123      	strcc	r3, [r4, #16]
 8015a0c:	60a2      	str	r2, [r4, #8]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	6923      	ldr	r3, [r4, #16]
 8015a12:	8018      	strh	r0, [r3, #0]
 8015a14:	8059      	strh	r1, [r3, #2]
 8015a16:	809a      	strh	r2, [r3, #4]
 8015a18:	80da      	strh	r2, [r3, #6]
 8015a1a:	6166      	str	r6, [r4, #20]
 8015a1c:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015a20:	6225      	str	r5, [r4, #32]
 8015a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015a24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8015a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a28:	b0d0      	sub	sp, #320	; 0x140
 8015a2a:	466c      	mov	r4, sp
 8015a2c:	4627      	mov	r7, r4
 8015a2e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8015a32:	1a0d      	subs	r5, r1, r0
 8015a34:	2d48      	cmp	r5, #72	; 0x48
 8015a36:	f100 0308 	add.w	r3, r0, #8
 8015a3a:	f340 80d5 	ble.w	8015be8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8015a3e:	112d      	asrs	r5, r5, #4
 8015a40:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8015a44:	6816      	ldr	r6, [r2, #0]
 8015a46:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015a4a:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8015a4e:	6006      	str	r6, [r0, #0]
 8015a50:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8015a54:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8015a58:	6856      	ldr	r6, [r2, #4]
 8015a5a:	6046      	str	r6, [r0, #4]
 8015a5c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8015a60:	f8a2 8002 	strh.w	r8, [r2, #2]
 8015a64:	f8a2 e004 	strh.w	lr, [r2, #4]
 8015a68:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015a6c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8015a70:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8015a74:	f1a1 0208 	sub.w	r2, r1, #8
 8015a78:	4565      	cmp	r5, ip
 8015a7a:	db06      	blt.n	8015a8a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8015a7c:	d119      	bne.n	8015ab2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8015a7e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8015a82:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8015a86:	42ae      	cmp	r6, r5
 8015a88:	dd13      	ble.n	8015ab2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8015a8a:	460e      	mov	r6, r1
 8015a8c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8015a90:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8015a94:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8015a98:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8015a9c:	601d      	str	r5, [r3, #0]
 8015a9e:	6875      	ldr	r5, [r6, #4]
 8015aa0:	605d      	str	r5, [r3, #4]
 8015aa2:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015aa6:	f821 cc06 	strh.w	ip, [r1, #-6]
 8015aaa:	f821 8c04 	strh.w	r8, [r1, #-4]
 8015aae:	f821 ec02 	strh.w	lr, [r1, #-2]
 8015ab2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015ab6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8015aba:	42ae      	cmp	r6, r5
 8015abc:	db06      	blt.n	8015acc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8015abe:	d116      	bne.n	8015aee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8015ac0:	f9b0 c000 	ldrsh.w	ip, [r0]
 8015ac4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8015ac8:	45ac      	cmp	ip, r5
 8015aca:	da10      	bge.n	8015aee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8015acc:	681d      	ldr	r5, [r3, #0]
 8015ace:	f9b0 8000 	ldrsh.w	r8, [r0]
 8015ad2:	6005      	str	r5, [r0, #0]
 8015ad4:	685d      	ldr	r5, [r3, #4]
 8015ad6:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8015ada:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8015ade:	f8a0 8008 	strh.w	r8, [r0, #8]
 8015ae2:	6045      	str	r5, [r0, #4]
 8015ae4:	8146      	strh	r6, [r0, #10]
 8015ae6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8015aea:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015aee:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8015af2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015af6:	4565      	cmp	r5, ip
 8015af8:	db06      	blt.n	8015b08 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8015afa:	d119      	bne.n	8015b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015afc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8015b00:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015b04:	42ae      	cmp	r6, r5
 8015b06:	da13      	bge.n	8015b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015b08:	460e      	mov	r6, r1
 8015b0a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8015b0e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015b12:	6005      	str	r5, [r0, #0]
 8015b14:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8015b18:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8015b1c:	6875      	ldr	r5, [r6, #4]
 8015b1e:	6045      	str	r5, [r0, #4]
 8015b20:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015b24:	f821 cc06 	strh.w	ip, [r1, #-6]
 8015b28:	f821 8c04 	strh.w	r8, [r1, #-4]
 8015b2c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8015b30:	3308      	adds	r3, #8
 8015b32:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8015b36:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015b3a:	45e6      	cmp	lr, ip
 8015b3c:	dbf8      	blt.n	8015b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015b3e:	d105      	bne.n	8015b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015b40:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015b44:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015b48:	42ae      	cmp	r6, r5
 8015b4a:	dbf1      	blt.n	8015b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015b4c:	4615      	mov	r5, r2
 8015b4e:	3a08      	subs	r2, #8
 8015b50:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8015b54:	45b4      	cmp	ip, r6
 8015b56:	dbf9      	blt.n	8015b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015b58:	d105      	bne.n	8015b66 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8015b5a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8015b5e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8015b62:	45b0      	cmp	r8, r6
 8015b64:	dbf2      	blt.n	8015b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015b66:	4293      	cmp	r3, r2
 8015b68:	f1a5 0608 	sub.w	r6, r5, #8
 8015b6c:	d816      	bhi.n	8015b9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8015b6e:	f8d6 c000 	ldr.w	ip, [r6]
 8015b72:	f9b3 a000 	ldrsh.w	sl, [r3]
 8015b76:	f8c3 c000 	str.w	ip, [r3]
 8015b7a:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8015b7e:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8015b82:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8015b86:	f8c3 c004 	str.w	ip, [r3, #4]
 8015b8a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8015b8e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8015b92:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015b96:	f825 8c02 	strh.w	r8, [r5, #-2]
 8015b9a:	e7c9      	b.n	8015b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015b9c:	f8d6 e000 	ldr.w	lr, [r6]
 8015ba0:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015ba4:	f8c0 e000 	str.w	lr, [r0]
 8015ba8:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8015bac:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8015bb0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015bb4:	1a16      	subs	r6, r2, r0
 8015bb6:	f8c0 e004 	str.w	lr, [r0, #4]
 8015bba:	f825 ac08 	strh.w	sl, [r5, #-8]
 8015bbe:	f825 cc06 	strh.w	ip, [r5, #-6]
 8015bc2:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015bc6:	f825 8c02 	strh.w	r8, [r5, #-2]
 8015bca:	1acd      	subs	r5, r1, r3
 8015bcc:	10ed      	asrs	r5, r5, #3
 8015bce:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8015bd2:	bfb5      	itete	lt
 8015bd4:	e9c4 0200 	strdlt	r0, r2, [r4]
 8015bd8:	e9c4 3100 	strdge	r3, r1, [r4]
 8015bdc:	460a      	movlt	r2, r1
 8015bde:	4603      	movge	r3, r0
 8015be0:	3408      	adds	r4, #8
 8015be2:	4618      	mov	r0, r3
 8015be4:	4611      	mov	r1, r2
 8015be6:	e724      	b.n	8015a32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015be8:	4299      	cmp	r1, r3
 8015bea:	d928      	bls.n	8015c3e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8015bec:	f1a3 0210 	sub.w	r2, r3, #16
 8015bf0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8015bf4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8015bf8:	45ac      	cmp	ip, r5
 8015bfa:	db06      	blt.n	8015c0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8015bfc:	d11d      	bne.n	8015c3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8015bfe:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8015c02:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8015c06:	42ae      	cmp	r6, r5
 8015c08:	da17      	bge.n	8015c3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8015c0a:	4615      	mov	r5, r2
 8015c0c:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8015c10:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8015c14:	6116      	str	r6, [r2, #16]
 8015c16:	686e      	ldr	r6, [r5, #4]
 8015c18:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8015c1c:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8015c20:	42a8      	cmp	r0, r5
 8015c22:	6156      	str	r6, [r2, #20]
 8015c24:	f8a2 9008 	strh.w	r9, [r2, #8]
 8015c28:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8015c2c:	f8a2 800c 	strh.w	r8, [r2, #12]
 8015c30:	f8a2 e00e 	strh.w	lr, [r2, #14]
 8015c34:	f1a2 0208 	sub.w	r2, r2, #8
 8015c38:	d1da      	bne.n	8015bf0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8015c3a:	3308      	adds	r3, #8
 8015c3c:	e7d4      	b.n	8015be8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8015c3e:	42bc      	cmp	r4, r7
 8015c40:	d903      	bls.n	8015c4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 8015c42:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8015c46:	3c08      	subs	r4, #8
 8015c48:	e6f3      	b.n	8015a32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015c4a:	b050      	add	sp, #320	; 0x140
 8015c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015c50 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8015c50:	b510      	push	{r4, lr}
 8015c52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015c54:	4604      	mov	r4, r0
 8015c56:	07da      	lsls	r2, r3, #31
 8015c58:	d507      	bpl.n	8015c6a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8015c5a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8015c5e:	f7ff fe8b 	bl	8015978 <_ZN8touchgfx7Outline6lineToEii>
 8015c62:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015c64:	f023 0301 	bic.w	r3, r3, #1
 8015c68:	6243      	str	r3, [r0, #36]	; 0x24
 8015c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c6c:	079b      	lsls	r3, r3, #30
 8015c6e:	d521      	bpl.n	8015cb4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8015c70:	6923      	ldr	r3, [r4, #16]
 8015c72:	88d9      	ldrh	r1, [r3, #6]
 8015c74:	889a      	ldrh	r2, [r3, #4]
 8015c76:	430a      	orrs	r2, r1
 8015c78:	d010      	beq.n	8015c9c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015c7a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015c7e:	2a00      	cmp	r2, #0
 8015c80:	db0c      	blt.n	8015c9c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015c82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015c84:	428a      	cmp	r2, r1
 8015c86:	da09      	bge.n	8015c9c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015c88:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8015c8c:	4291      	cmp	r1, r2
 8015c8e:	bf88      	it	hi
 8015c90:	3308      	addhi	r3, #8
 8015c92:	f102 0201 	add.w	r2, r2, #1
 8015c96:	bf88      	it	hi
 8015c98:	6123      	strhi	r3, [r4, #16]
 8015c9a:	60a2      	str	r2, [r4, #8]
 8015c9c:	68a1      	ldr	r1, [r4, #8]
 8015c9e:	b129      	cbz	r1, 8015cac <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015ca0:	6863      	ldr	r3, [r4, #4]
 8015ca2:	4299      	cmp	r1, r3
 8015ca4:	d802      	bhi.n	8015cac <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015ca6:	68e0      	ldr	r0, [r4, #12]
 8015ca8:	f7ff febc 	bl	8015a24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8015cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cae:	f023 0302 	bic.w	r3, r3, #2
 8015cb2:	6263      	str	r3, [r4, #36]	; 0x24
 8015cb4:	68e0      	ldr	r0, [r4, #12]
 8015cb6:	bd10      	pop	{r4, pc}

08015cb8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8015cb8:	4b02      	ldr	r3, [pc, #8]	; (8015cc4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8015cba:	6018      	str	r0, [r3, #0]
 8015cbc:	4b02      	ldr	r3, [pc, #8]	; (8015cc8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8015cbe:	6019      	str	r1, [r3, #0]
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	2004e120 	.word	0x2004e120
 8015cc8:	2004e124 	.word	0x2004e124

08015ccc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8015ccc:	4b01      	ldr	r3, [pc, #4]	; (8015cd4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8015cce:	6818      	ldr	r0, [r3, #0]
 8015cd0:	4770      	bx	lr
 8015cd2:	bf00      	nop
 8015cd4:	2004e120 	.word	0x2004e120

08015cd8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8015cd8:	4b01      	ldr	r3, [pc, #4]	; (8015ce0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8015cda:	6818      	ldr	r0, [r3, #0]
 8015cdc:	4770      	bx	lr
 8015cde:	bf00      	nop
 8015ce0:	2004e124 	.word	0x2004e124

08015ce4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015ce4:	b510      	push	{r4, lr}
 8015ce6:	6803      	ldr	r3, [r0, #0]
 8015ce8:	460c      	mov	r4, r1
 8015cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cec:	4798      	blx	r3
 8015cee:	1b03      	subs	r3, r0, r4
 8015cf0:	4258      	negs	r0, r3
 8015cf2:	4158      	adcs	r0, r3
 8015cf4:	bd10      	pop	{r4, pc}
	...

08015cf8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015cf8:	4b01      	ldr	r3, [pc, #4]	; (8015d00 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8015cfa:	6019      	str	r1, [r3, #0]
 8015cfc:	4770      	bx	lr
 8015cfe:	bf00      	nop
 8015d00:	2004e128 	.word	0x2004e128

08015d04 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d08:	4696      	mov	lr, r2
 8015d0a:	4614      	mov	r4, r2
 8015d0c:	4605      	mov	r5, r0
 8015d0e:	460e      	mov	r6, r1
 8015d10:	461f      	mov	r7, r3
 8015d12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d16:	b097      	sub	sp, #92	; 0x5c
 8015d18:	f10d 0c1c 	add.w	ip, sp, #28
 8015d1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d20:	f8de 3000 	ldr.w	r3, [lr]
 8015d24:	f104 0e14 	add.w	lr, r4, #20
 8015d28:	f8cc 3000 	str.w	r3, [ip]
 8015d2c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015d30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d38:	f8de 3000 	ldr.w	r3, [lr]
 8015d3c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015d40:	f8cc 3000 	str.w	r3, [ip]
 8015d44:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015d48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d50:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8015d54:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8015d58:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8015d5c:	f8de 3000 	ldr.w	r3, [lr]
 8015d60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d62:	f8cc 3000 	str.w	r3, [ip]
 8015d66:	9201      	str	r2, [sp, #4]
 8015d68:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015d6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015d6e:	682b      	ldr	r3, [r5, #0]
 8015d70:	9200      	str	r2, [sp, #0]
 8015d72:	f8cd 8008 	str.w	r8, [sp, #8]
 8015d76:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8015d7a:	aa07      	add	r2, sp, #28
 8015d7c:	463b      	mov	r3, r7
 8015d7e:	4631      	mov	r1, r6
 8015d80:	4628      	mov	r0, r5
 8015d82:	47d8      	blx	fp
 8015d84:	46a6      	mov	lr, r4
 8015d86:	f10d 0c1c 	add.w	ip, sp, #28
 8015d8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d92:	f8de 3000 	ldr.w	r3, [lr]
 8015d96:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015d9a:	f8cc 3000 	str.w	r3, [ip]
 8015d9e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015da2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015da6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015daa:	f8de 3000 	ldr.w	r3, [lr]
 8015dae:	343c      	adds	r4, #60	; 0x3c
 8015db0:	f8cc 3000 	str.w	r3, [ip]
 8015db4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015dba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015dbe:	6823      	ldr	r3, [r4, #0]
 8015dc0:	4631      	mov	r1, r6
 8015dc2:	f8cc 3000 	str.w	r3, [ip]
 8015dc6:	682b      	ldr	r3, [r5, #0]
 8015dc8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015dce:	f8cd 8008 	str.w	r8, [sp, #8]
 8015dd2:	9201      	str	r2, [sp, #4]
 8015dd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015dd6:	4628      	mov	r0, r5
 8015dd8:	9200      	str	r2, [sp, #0]
 8015dda:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8015ddc:	aa07      	add	r2, sp, #28
 8015dde:	463b      	mov	r3, r7
 8015de0:	47a0      	blx	r4
 8015de2:	b017      	add	sp, #92	; 0x5c
 8015de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015de8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015de8:	2000      	movs	r0, #0
 8015dea:	4770      	bx	lr

08015dec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df0:	b08d      	sub	sp, #52	; 0x34
 8015df2:	4688      	mov	r8, r1
 8015df4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015df6:	f8d3 c000 	ldr.w	ip, [r3]
 8015dfa:	680f      	ldr	r7, [r1, #0]
 8015dfc:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8015e00:	eba7 070c 	sub.w	r7, r7, ip
 8015e04:	42bc      	cmp	r4, r7
 8015e06:	bfa8      	it	ge
 8015e08:	463c      	movge	r4, r7
 8015e0a:	ee07 4a90 	vmov	s15, r4
 8015e0e:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8015e12:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015e16:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8015e1a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8015e1e:	edd3 6a07 	vldr	s13, [r3, #28]
 8015e22:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015e26:	ee65 4a24 	vmul.f32	s9, s10, s9
 8015e2a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015e2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e32:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8015e36:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8015e3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015e3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015e40:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8015e44:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015e48:	f9ba 1000 	ldrsh.w	r1, [sl]
 8015e4c:	eb09 0e0c 	add.w	lr, r9, ip
 8015e50:	4571      	cmp	r1, lr
 8015e52:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015e56:	ee32 1a05 	vadd.f32	s2, s4, s10
 8015e5a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8015e5e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015e62:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015e66:	f340 808c 	ble.w	8015f82 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8015e6a:	eba1 060e 	sub.w	r6, r1, lr
 8015e6e:	fb96 f5f4 	sdiv	r5, r6, r4
 8015e72:	ee07 5a10 	vmov	s14, r5
 8015e76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e7a:	2d00      	cmp	r5, #0
 8015e7c:	fb04 6615 	mls	r6, r4, r5, r6
 8015e80:	eea7 0a04 	vfma.f32	s0, s14, s8
 8015e84:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015e88:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015e8c:	dd12      	ble.n	8015eb4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8015e8e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8015e92:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8015e9e:	bf14      	ite	ne
 8015ea0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015ea4:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015ea8:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015eac:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015eb0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015eb4:	fb05 f204 	mul.w	r2, r5, r4
 8015eb8:	1abf      	subs	r7, r7, r2
 8015eba:	4494      	add	ip, r2
 8015ebc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015ec0:	4411      	add	r1, r2
 8015ec2:	eb09 020c 	add.w	r2, r9, ip
 8015ec6:	443a      	add	r2, r7
 8015ec8:	b209      	sxth	r1, r1
 8015eca:	428a      	cmp	r2, r1
 8015ecc:	bfc4      	itt	gt
 8015ece:	eba1 0209 	subgt.w	r2, r1, r9
 8015ed2:	eba2 070c 	subgt.w	r7, r2, ip
 8015ed6:	2f00      	cmp	r7, #0
 8015ed8:	dd50      	ble.n	8015f7c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015eda:	fb97 f1f4 	sdiv	r1, r7, r4
 8015ede:	fb04 7211 	mls	r2, r4, r1, r7
 8015ee2:	b90a      	cbnz	r2, 8015ee8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015ee4:	4622      	mov	r2, r4
 8015ee6:	3901      	subs	r1, #1
 8015ee8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015eec:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015ef0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015ef4:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015ef8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015efc:	ee17 7a90 	vmov	r7, s15
 8015f00:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015f04:	eef0 6a42 	vmov.f32	s13, s4
 8015f08:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015f0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015f10:	ee17 ca90 	vmov	ip, s15
 8015f14:	eeb0 7a61 	vmov.f32	s14, s3
 8015f18:	6840      	ldr	r0, [r0, #4]
 8015f1a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8015f1e:	f8d0 a000 	ldr.w	sl, [r0]
 8015f22:	900b      	str	r0, [sp, #44]	; 0x2c
 8015f24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015f26:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015f2a:	9008      	str	r0, [sp, #32]
 8015f2c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015f2e:	695b      	ldr	r3, [r3, #20]
 8015f30:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015f34:	fb9c fcf4 	sdiv	ip, ip, r4
 8015f38:	445b      	add	r3, fp
 8015f3a:	9307      	str	r3, [sp, #28]
 8015f3c:	ee16 3a90 	vmov	r3, s13
 8015f40:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015f44:	fb0c 3306 	mla	r3, ip, r6, r3
 8015f48:	fb97 f7f4 	sdiv	r7, r7, r4
 8015f4c:	9302      	str	r3, [sp, #8]
 8015f4e:	ee17 3a10 	vmov	r3, s14
 8015f52:	2900      	cmp	r1, #0
 8015f54:	bfcc      	ite	gt
 8015f56:	46a1      	movgt	r9, r4
 8015f58:	4691      	movle	r9, r2
 8015f5a:	44b6      	add	lr, r6
 8015f5c:	fb04 e505 	mla	r5, r4, r5, lr
 8015f60:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015f64:	fb07 3706 	mla	r7, r7, r6, r3
 8015f68:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015f6c:	e9cd 4700 	strd	r4, r7, [sp]
 8015f70:	eba9 0306 	sub.w	r3, r9, r6
 8015f74:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015f78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015f7a:	47a0      	blx	r4
 8015f7c:	b00d      	add	sp, #52	; 0x34
 8015f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f82:	2500      	movs	r5, #0
 8015f84:	462e      	mov	r6, r5
 8015f86:	e799      	b.n	8015ebc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015f88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f8c:	461d      	mov	r5, r3
 8015f8e:	b0db      	sub	sp, #364	; 0x16c
 8015f90:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8015f94:	910f      	str	r1, [sp, #60]	; 0x3c
 8015f96:	930a      	str	r3, [sp, #40]	; 0x28
 8015f98:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8015f9c:	9009      	str	r0, [sp, #36]	; 0x24
 8015f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fa0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8015fa4:	4614      	mov	r4, r2
 8015fa6:	9310      	str	r3, [sp, #64]	; 0x40
 8015fa8:	6803      	ldr	r3, [r0, #0]
 8015faa:	4629      	mov	r1, r5
 8015fac:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8015fae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015fb2:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8015fb6:	47b8      	blx	r7
 8015fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fba:	6058      	str	r0, [r3, #4]
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	f000 83a1 	beq.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015fc2:	ed94 7a02 	vldr	s14, [r4, #8]
 8015fc6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fce:	682b      	ldr	r3, [r5, #0]
 8015fd0:	9314      	str	r3, [sp, #80]	; 0x50
 8015fd2:	686b      	ldr	r3, [r5, #4]
 8015fd4:	9315      	str	r3, [sp, #84]	; 0x54
 8015fd6:	4bc1      	ldr	r3, [pc, #772]	; (80162dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015fd8:	7819      	ldrb	r1, [r3, #0]
 8015fda:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015fde:	2900      	cmp	r1, #0
 8015fe0:	bf16      	itet	ne
 8015fe2:	4619      	movne	r1, r3
 8015fe4:	4611      	moveq	r1, r2
 8015fe6:	4613      	movne	r3, r2
 8015fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fec:	9116      	str	r1, [sp, #88]	; 0x58
 8015fee:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8015ff2:	f240 8387 	bls.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ff6:	ed94 7a07 	vldr	s14, [r4, #28]
 8015ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016002:	f240 837f 	bls.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016006:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801600a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801600e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016012:	f240 8377 	bls.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016016:	6822      	ldr	r2, [r4, #0]
 8016018:	4bb1      	ldr	r3, [pc, #708]	; (80162e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801601a:	429a      	cmp	r2, r3
 801601c:	f2c0 8372 	blt.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016020:	49b0      	ldr	r1, [pc, #704]	; (80162e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016022:	6963      	ldr	r3, [r4, #20]
 8016024:	428a      	cmp	r2, r1
 8016026:	f300 836d 	bgt.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801602a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801602e:	48ae      	ldr	r0, [pc, #696]	; (80162e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016030:	33ff      	adds	r3, #255	; 0xff
 8016032:	4283      	cmp	r3, r0
 8016034:	f200 8366 	bhi.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016038:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801603a:	4dac      	ldr	r5, [pc, #688]	; (80162ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801603c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016040:	33ff      	adds	r3, #255	; 0xff
 8016042:	42ab      	cmp	r3, r5
 8016044:	f200 835e 	bhi.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016048:	6862      	ldr	r2, [r4, #4]
 801604a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801604e:	33ff      	adds	r3, #255	; 0xff
 8016050:	4283      	cmp	r3, r0
 8016052:	f200 8357 	bhi.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016056:	69a1      	ldr	r1, [r4, #24]
 8016058:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801605c:	33ff      	adds	r3, #255	; 0xff
 801605e:	4283      	cmp	r3, r0
 8016060:	f200 8350 	bhi.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016066:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801606a:	30ff      	adds	r0, #255	; 0xff
 801606c:	42a8      	cmp	r0, r5
 801606e:	f200 8349 	bhi.w	8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016072:	428a      	cmp	r2, r1
 8016074:	f280 8110 	bge.w	8016298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016078:	429a      	cmp	r2, r3
 801607a:	f300 8119 	bgt.w	80162b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801607e:	4299      	cmp	r1, r3
 8016080:	f280 811d 	bge.w	80162be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016084:	2502      	movs	r5, #2
 8016086:	2701      	movs	r7, #1
 8016088:	46a9      	mov	r9, r5
 801608a:	46b8      	mov	r8, r7
 801608c:	f04f 0a00 	mov.w	sl, #0
 8016090:	4621      	mov	r1, r4
 8016092:	a849      	add	r0, sp, #292	; 0x124
 8016094:	f003 f83a 	bl	801910c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016098:	4622      	mov	r2, r4
 801609a:	4653      	mov	r3, sl
 801609c:	a949      	add	r1, sp, #292	; 0x124
 801609e:	f8cd 9000 	str.w	r9, [sp]
 80160a2:	a819      	add	r0, sp, #100	; 0x64
 80160a4:	f003 f964 	bl	8019370 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80160a8:	4622      	mov	r2, r4
 80160aa:	4653      	mov	r3, sl
 80160ac:	a949      	add	r1, sp, #292	; 0x124
 80160ae:	f8cd 8000 	str.w	r8, [sp]
 80160b2:	a829      	add	r0, sp, #164	; 0xa4
 80160b4:	f003 f95c 	bl	8019370 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80160b8:	4643      	mov	r3, r8
 80160ba:	4622      	mov	r2, r4
 80160bc:	a949      	add	r1, sp, #292	; 0x124
 80160be:	f8cd 9000 	str.w	r9, [sp]
 80160c2:	a839      	add	r0, sp, #228	; 0xe4
 80160c4:	f003 f954 	bl	8019370 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80160c8:	42af      	cmp	r7, r5
 80160ca:	bfb5      	itete	lt
 80160cc:	2300      	movlt	r3, #0
 80160ce:	2301      	movge	r3, #1
 80160d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80160d2:	930e      	strge	r3, [sp, #56]	; 0x38
 80160d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160d6:	af12      	add	r7, sp, #72	; 0x48
 80160d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80160dc:	bfb9      	ittee	lt
 80160de:	ad29      	addlt	r5, sp, #164	; 0xa4
 80160e0:	ac19      	addlt	r4, sp, #100	; 0x64
 80160e2:	ad19      	addge	r5, sp, #100	; 0x64
 80160e4:	ac29      	addge	r4, sp, #164	; 0xa4
 80160e6:	e887 0003 	stmia.w	r7, {r0, r1}
 80160ea:	b928      	cbnz	r0, 80160f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80160ec:	4b80      	ldr	r3, [pc, #512]	; (80162f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80160ee:	6818      	ldr	r0, [r3, #0]
 80160f0:	6803      	ldr	r3, [r0, #0]
 80160f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160f4:	4798      	blx	r3
 80160f6:	6038      	str	r0, [r7, #0]
 80160f8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80160fa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80160fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016102:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016104:	930c      	str	r3, [sp, #48]	; 0x30
 8016106:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016108:	6963      	ldr	r3, [r4, #20]
 801610a:	440b      	add	r3, r1
 801610c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016110:	4408      	add	r0, r1
 8016112:	b200      	sxth	r0, r0
 8016114:	4283      	cmp	r3, r0
 8016116:	900d      	str	r0, [sp, #52]	; 0x34
 8016118:	f280 80dd 	bge.w	80162d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801611c:	428b      	cmp	r3, r1
 801611e:	da08      	bge.n	8016132 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016120:	2a00      	cmp	r2, #0
 8016122:	dd06      	ble.n	8016132 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016124:	1acb      	subs	r3, r1, r3
 8016126:	429a      	cmp	r2, r3
 8016128:	f2c0 80e4 	blt.w	80162f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801612c:	2b00      	cmp	r3, #0
 801612e:	f300 80e2 	bgt.w	80162f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016132:	6967      	ldr	r7, [r4, #20]
 8016134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016136:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801613a:	443b      	add	r3, r7
 801613c:	461f      	mov	r7, r3
 801613e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016140:	1bdf      	subs	r7, r3, r7
 8016142:	4297      	cmp	r7, r2
 8016144:	bfa8      	it	ge
 8016146:	4617      	movge	r7, r2
 8016148:	2f00      	cmp	r7, #0
 801614a:	f340 8166 	ble.w	801641a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801614e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016150:	6829      	ldr	r1, [r5, #0]
 8016152:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016156:	f9bb 3000 	ldrsh.w	r3, [fp]
 801615a:	4411      	add	r1, r2
 801615c:	4299      	cmp	r1, r3
 801615e:	6820      	ldr	r0, [r4, #0]
 8016160:	dd1a      	ble.n	8016198 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016162:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016166:	4402      	add	r2, r0
 8016168:	440b      	add	r3, r1
 801616a:	b21b      	sxth	r3, r3
 801616c:	429a      	cmp	r2, r3
 801616e:	dc13      	bgt.n	8016198 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016170:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016174:	a912      	add	r1, sp, #72	; 0x48
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	9206      	str	r2, [sp, #24]
 801617a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801617c:	9500      	str	r5, [sp, #0]
 801617e:	9205      	str	r2, [sp, #20]
 8016180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016182:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016184:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016188:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801618a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801618e:	aa49      	add	r2, sp, #292	; 0x124
 8016190:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016194:	4623      	mov	r3, r4
 8016196:	47c8      	blx	r9
 8016198:	e9d4 2300 	ldrd	r2, r3, [r4]
 801619c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80161a0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80161a4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80161a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80161ac:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80161b0:	ed94 6a08 	vldr	s12, [r4, #32]
 80161b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80161b8:	edd4 6a07 	vldr	s13, [r4, #28]
 80161bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80161c0:	441a      	add	r2, r3
 80161c2:	6963      	ldr	r3, [r4, #20]
 80161c4:	68a1      	ldr	r1, [r4, #8]
 80161c6:	3301      	adds	r3, #1
 80161c8:	6163      	str	r3, [r4, #20]
 80161ca:	69a3      	ldr	r3, [r4, #24]
 80161cc:	6022      	str	r2, [r4, #0]
 80161ce:	3b01      	subs	r3, #1
 80161d0:	61a3      	str	r3, [r4, #24]
 80161d2:	6923      	ldr	r3, [r4, #16]
 80161d4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80161d8:	440b      	add	r3, r1
 80161da:	68e1      	ldr	r1, [r4, #12]
 80161dc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80161e0:	428b      	cmp	r3, r1
 80161e2:	edc4 6a07 	vstr	s13, [r4, #28]
 80161e6:	6123      	str	r3, [r4, #16]
 80161e8:	db15      	blt.n	8016216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80161ea:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80161ee:	ee76 6a26 	vadd.f32	s13, s12, s13
 80161f2:	edc4 6a07 	vstr	s13, [r4, #28]
 80161f6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80161fa:	ee36 7a87 	vadd.f32	s14, s13, s14
 80161fe:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016202:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016206:	ee77 7a27 	vadd.f32	s15, s14, s15
 801620a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801620e:	3201      	adds	r2, #1
 8016210:	1a5b      	subs	r3, r3, r1
 8016212:	6022      	str	r2, [r4, #0]
 8016214:	6123      	str	r3, [r4, #16]
 8016216:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801621a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801621e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016222:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016226:	ee37 7a27 	vadd.f32	s14, s14, s15
 801622a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801622e:	ed95 6a08 	vldr	s12, [r5, #32]
 8016232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016236:	edd5 6a07 	vldr	s13, [r5, #28]
 801623a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801623e:	441a      	add	r2, r3
 8016240:	696b      	ldr	r3, [r5, #20]
 8016242:	68a9      	ldr	r1, [r5, #8]
 8016244:	3301      	adds	r3, #1
 8016246:	616b      	str	r3, [r5, #20]
 8016248:	69ab      	ldr	r3, [r5, #24]
 801624a:	602a      	str	r2, [r5, #0]
 801624c:	3b01      	subs	r3, #1
 801624e:	61ab      	str	r3, [r5, #24]
 8016250:	692b      	ldr	r3, [r5, #16]
 8016252:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016256:	440b      	add	r3, r1
 8016258:	68e9      	ldr	r1, [r5, #12]
 801625a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801625e:	428b      	cmp	r3, r1
 8016260:	edc5 6a07 	vstr	s13, [r5, #28]
 8016264:	612b      	str	r3, [r5, #16]
 8016266:	db15      	blt.n	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016268:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801626c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016270:	edc5 6a07 	vstr	s13, [r5, #28]
 8016274:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016278:	ee36 7a87 	vadd.f32	s14, s13, s14
 801627c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016280:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016288:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801628c:	3201      	adds	r2, #1
 801628e:	1a5b      	subs	r3, r3, r1
 8016290:	602a      	str	r2, [r5, #0]
 8016292:	612b      	str	r3, [r5, #16]
 8016294:	3f01      	subs	r7, #1
 8016296:	e757      	b.n	8016148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016298:	4299      	cmp	r1, r3
 801629a:	dc13      	bgt.n	80162c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801629c:	429a      	cmp	r2, r3
 801629e:	da14      	bge.n	80162ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80162a0:	2502      	movs	r5, #2
 80162a2:	2703      	movs	r7, #3
 80162a4:	46a9      	mov	r9, r5
 80162a6:	f04f 0800 	mov.w	r8, #0
 80162aa:	f04f 0a01 	mov.w	sl, #1
 80162ae:	e6ef      	b.n	8016090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80162b0:	2501      	movs	r5, #1
 80162b2:	2700      	movs	r7, #0
 80162b4:	46a9      	mov	r9, r5
 80162b6:	46b8      	mov	r8, r7
 80162b8:	f04f 0a02 	mov.w	sl, #2
 80162bc:	e6e8      	b.n	8016090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80162be:	2501      	movs	r5, #1
 80162c0:	2702      	movs	r7, #2
 80162c2:	e6e1      	b.n	8016088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80162c4:	2500      	movs	r5, #0
 80162c6:	2701      	movs	r7, #1
 80162c8:	e7f4      	b.n	80162b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80162ca:	2702      	movs	r7, #2
 80162cc:	2503      	movs	r5, #3
 80162ce:	f04f 0900 	mov.w	r9, #0
 80162d2:	46b8      	mov	r8, r7
 80162d4:	e7e9      	b.n	80162aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80162d6:	4613      	mov	r3, r2
 80162d8:	e728      	b.n	801612c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80162da:	bf00      	nop
 80162dc:	2004e110 	.word	0x2004e110
 80162e0:	fffd8f01 	.word	0xfffd8f01
 80162e4:	00027100 	.word	0x00027100
 80162e8:	0004e1ff 	.word	0x0004e1ff
 80162ec:	0004e1fe 	.word	0x0004e1fe
 80162f0:	2004e118 	.word	0x2004e118
 80162f4:	4613      	mov	r3, r2
 80162f6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80162fa:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80162fe:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016302:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016306:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801630a:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801630e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016312:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016316:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801631a:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801631e:	469e      	mov	lr, r3
 8016320:	469c      	mov	ip, r3
 8016322:	f04f 0900 	mov.w	r9, #0
 8016326:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016328:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801632a:	9111      	str	r1, [sp, #68]	; 0x44
 801632c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016330:	f1bc 0f00 	cmp.w	ip, #0
 8016334:	d147      	bne.n	80163c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016336:	eb03 0c07 	add.w	ip, r3, r7
 801633a:	1ad7      	subs	r7, r2, r3
 801633c:	f1b9 0f00 	cmp.w	r9, #0
 8016340:	d009      	beq.n	8016356 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016342:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016346:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801634a:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801634e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016352:	9029      	str	r0, [sp, #164]	; 0xa4
 8016354:	912d      	str	r1, [sp, #180]	; 0xb4
 8016356:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801635a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801635e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016362:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016366:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801636a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801636e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016372:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016376:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801637a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801637e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016382:	f04f 0800 	mov.w	r8, #0
 8016386:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016388:	9111      	str	r1, [sp, #68]	; 0x44
 801638a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801638e:	f1be 0f00 	cmp.w	lr, #0
 8016392:	d031      	beq.n	80163f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016394:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016396:	4450      	add	r0, sl
 8016398:	4431      	add	r1, r6
 801639a:	4549      	cmp	r1, r9
 801639c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80163a0:	ee37 7a04 	vadd.f32	s14, s14, s8
 80163a4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80163a8:	db08      	blt.n	80163bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80163aa:	ee77 7a85 	vadd.f32	s15, s15, s10
 80163ae:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80163b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80163b6:	3001      	adds	r0, #1
 80163b8:	eba1 0109 	sub.w	r1, r1, r9
 80163bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80163c0:	f04f 0801 	mov.w	r8, #1
 80163c4:	e7e3      	b.n	801638e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80163c6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80163c8:	4450      	add	r0, sl
 80163ca:	4431      	add	r1, r6
 80163cc:	4541      	cmp	r1, r8
 80163ce:	ee37 7a24 	vadd.f32	s14, s14, s9
 80163d2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80163d6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80163da:	db08      	blt.n	80163ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80163dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80163e0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80163e4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80163e8:	3001      	adds	r0, #1
 80163ea:	eba1 0108 	sub.w	r1, r1, r8
 80163ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80163f2:	f04f 0901 	mov.w	r9, #1
 80163f6:	e79b      	b.n	8016330 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80163f8:	449c      	add	ip, r3
 80163fa:	1aff      	subs	r7, r7, r3
 80163fc:	f1b8 0f00 	cmp.w	r8, #0
 8016400:	d009      	beq.n	8016416 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016402:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016406:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801640a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801640e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016412:	9019      	str	r0, [sp, #100]	; 0x64
 8016414:	911d      	str	r1, [sp, #116]	; 0x74
 8016416:	1ad2      	subs	r2, r2, r3
 8016418:	e68b      	b.n	8016132 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801641a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801641c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801641e:	2b00      	cmp	r3, #0
 8016420:	f000 80d1 	beq.w	80165c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016424:	ad19      	add	r5, sp, #100	; 0x64
 8016426:	ac39      	add	r4, sp, #228	; 0xe4
 8016428:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801642a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801642e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016432:	930c      	str	r3, [sp, #48]	; 0x30
 8016434:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016436:	6963      	ldr	r3, [r4, #20]
 8016438:	440b      	add	r3, r1
 801643a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801643e:	4408      	add	r0, r1
 8016440:	b200      	sxth	r0, r0
 8016442:	4283      	cmp	r3, r0
 8016444:	900d      	str	r0, [sp, #52]	; 0x34
 8016446:	f280 80c1 	bge.w	80165cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801644a:	428b      	cmp	r3, r1
 801644c:	da08      	bge.n	8016460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801644e:	2a00      	cmp	r2, #0
 8016450:	dd06      	ble.n	8016460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016452:	1acb      	subs	r3, r1, r3
 8016454:	429a      	cmp	r2, r3
 8016456:	f2c0 80bb 	blt.w	80165d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801645a:	2b00      	cmp	r3, #0
 801645c:	f300 80b9 	bgt.w	80165d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016460:	6967      	ldr	r7, [r4, #20]
 8016462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016464:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016468:	443b      	add	r3, r7
 801646a:	461f      	mov	r7, r3
 801646c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801646e:	1bdf      	subs	r7, r3, r7
 8016470:	4297      	cmp	r7, r2
 8016472:	bfa8      	it	ge
 8016474:	4617      	movge	r7, r2
 8016476:	2f00      	cmp	r7, #0
 8016478:	f340 813c 	ble.w	80166f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801647c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801647e:	6829      	ldr	r1, [r5, #0]
 8016480:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016484:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016488:	4411      	add	r1, r2
 801648a:	4299      	cmp	r1, r3
 801648c:	6820      	ldr	r0, [r4, #0]
 801648e:	dd1a      	ble.n	80164c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016490:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016494:	4402      	add	r2, r0
 8016496:	440b      	add	r3, r1
 8016498:	b21b      	sxth	r3, r3
 801649a:	429a      	cmp	r2, r3
 801649c:	dc13      	bgt.n	80164c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801649e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80164a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164a2:	a912      	add	r1, sp, #72	; 0x48
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	9206      	str	r2, [sp, #24]
 80164a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80164aa:	9500      	str	r5, [sp, #0]
 80164ac:	9205      	str	r2, [sp, #20]
 80164ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164b2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80164b6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80164b8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80164bc:	aa49      	add	r2, sp, #292	; 0x124
 80164be:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80164c2:	4623      	mov	r3, r4
 80164c4:	47c8      	blx	r9
 80164c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80164ca:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80164ce:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80164d2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80164d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80164da:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80164de:	ed94 6a08 	vldr	s12, [r4, #32]
 80164e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80164e6:	edd4 6a07 	vldr	s13, [r4, #28]
 80164ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 80164ee:	441a      	add	r2, r3
 80164f0:	6963      	ldr	r3, [r4, #20]
 80164f2:	68a1      	ldr	r1, [r4, #8]
 80164f4:	3301      	adds	r3, #1
 80164f6:	6163      	str	r3, [r4, #20]
 80164f8:	69a3      	ldr	r3, [r4, #24]
 80164fa:	6022      	str	r2, [r4, #0]
 80164fc:	3b01      	subs	r3, #1
 80164fe:	61a3      	str	r3, [r4, #24]
 8016500:	6923      	ldr	r3, [r4, #16]
 8016502:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016506:	440b      	add	r3, r1
 8016508:	68e1      	ldr	r1, [r4, #12]
 801650a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801650e:	428b      	cmp	r3, r1
 8016510:	edc4 6a07 	vstr	s13, [r4, #28]
 8016514:	6123      	str	r3, [r4, #16]
 8016516:	db15      	blt.n	8016544 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016518:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801651c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016520:	edc4 6a07 	vstr	s13, [r4, #28]
 8016524:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016528:	ee36 7a87 	vadd.f32	s14, s13, s14
 801652c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016530:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016538:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801653c:	3201      	adds	r2, #1
 801653e:	1a5b      	subs	r3, r3, r1
 8016540:	6022      	str	r2, [r4, #0]
 8016542:	6123      	str	r3, [r4, #16]
 8016544:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016548:	e9d5 2300 	ldrd	r2, r3, [r5]
 801654c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016550:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016558:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801655c:	ed95 6a08 	vldr	s12, [r5, #32]
 8016560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016564:	edd5 6a07 	vldr	s13, [r5, #28]
 8016568:	ee76 6a86 	vadd.f32	s13, s13, s12
 801656c:	441a      	add	r2, r3
 801656e:	696b      	ldr	r3, [r5, #20]
 8016570:	68a9      	ldr	r1, [r5, #8]
 8016572:	3301      	adds	r3, #1
 8016574:	616b      	str	r3, [r5, #20]
 8016576:	69ab      	ldr	r3, [r5, #24]
 8016578:	602a      	str	r2, [r5, #0]
 801657a:	3b01      	subs	r3, #1
 801657c:	61ab      	str	r3, [r5, #24]
 801657e:	692b      	ldr	r3, [r5, #16]
 8016580:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016584:	440b      	add	r3, r1
 8016586:	68e9      	ldr	r1, [r5, #12]
 8016588:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801658c:	428b      	cmp	r3, r1
 801658e:	edc5 6a07 	vstr	s13, [r5, #28]
 8016592:	612b      	str	r3, [r5, #16]
 8016594:	db15      	blt.n	80165c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016596:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801659a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801659e:	edc5 6a07 	vstr	s13, [r5, #28]
 80165a2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80165a6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80165aa:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80165ae:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80165b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165b6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80165ba:	3201      	adds	r2, #1
 80165bc:	1a5b      	subs	r3, r3, r1
 80165be:	602a      	str	r2, [r5, #0]
 80165c0:	612b      	str	r3, [r5, #16]
 80165c2:	3f01      	subs	r7, #1
 80165c4:	e757      	b.n	8016476 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80165c6:	ad39      	add	r5, sp, #228	; 0xe4
 80165c8:	ac19      	add	r4, sp, #100	; 0x64
 80165ca:	e72d      	b.n	8016428 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80165cc:	4613      	mov	r3, r2
 80165ce:	e744      	b.n	801645a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80165d0:	4613      	mov	r3, r2
 80165d2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80165d6:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80165da:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80165de:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80165e2:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80165e6:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80165ea:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80165ee:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80165f2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80165f6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80165fa:	469e      	mov	lr, r3
 80165fc:	461f      	mov	r7, r3
 80165fe:	f04f 0900 	mov.w	r9, #0
 8016602:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016604:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016608:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801660a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801660e:	960e      	str	r6, [sp, #56]	; 0x38
 8016610:	2f00      	cmp	r7, #0
 8016612:	d146      	bne.n	80166a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016614:	449c      	add	ip, r3
 8016616:	1ad7      	subs	r7, r2, r3
 8016618:	f1b9 0f00 	cmp.w	r9, #0
 801661c:	d009      	beq.n	8016632 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801661e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8016622:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8016626:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801662a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801662e:	9039      	str	r0, [sp, #228]	; 0xe4
 8016630:	913d      	str	r1, [sp, #244]	; 0xf4
 8016632:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016636:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801663a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801663e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016642:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016646:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801664a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801664e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016652:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016656:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801665a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801665e:	f04f 0800 	mov.w	r8, #0
 8016662:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016664:	910e      	str	r1, [sp, #56]	; 0x38
 8016666:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801666a:	f1be 0f00 	cmp.w	lr, #0
 801666e:	d030      	beq.n	80166d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016670:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016672:	4450      	add	r0, sl
 8016674:	4431      	add	r1, r6
 8016676:	4549      	cmp	r1, r9
 8016678:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801667c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016680:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016684:	db08      	blt.n	8016698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016686:	ee77 7a85 	vadd.f32	s15, s15, s10
 801668a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801668e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016692:	3001      	adds	r0, #1
 8016694:	eba1 0109 	sub.w	r1, r1, r9
 8016698:	f10e 3eff 	add.w	lr, lr, #4294967295
 801669c:	f04f 0801 	mov.w	r8, #1
 80166a0:	e7e3      	b.n	801666a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80166a2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80166a4:	4450      	add	r0, sl
 80166a6:	4431      	add	r1, r6
 80166a8:	4541      	cmp	r1, r8
 80166aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80166ae:	ee77 7a84 	vadd.f32	s15, s15, s8
 80166b2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80166b6:	db08      	blt.n	80166ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80166b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80166bc:	ee37 7a25 	vadd.f32	s14, s14, s11
 80166c0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80166c4:	3001      	adds	r0, #1
 80166c6:	eba1 0108 	sub.w	r1, r1, r8
 80166ca:	3f01      	subs	r7, #1
 80166cc:	f04f 0901 	mov.w	r9, #1
 80166d0:	e79e      	b.n	8016610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80166d2:	449c      	add	ip, r3
 80166d4:	1aff      	subs	r7, r7, r3
 80166d6:	f1b8 0f00 	cmp.w	r8, #0
 80166da:	d009      	beq.n	80166f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80166dc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80166e0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80166e4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80166e8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80166ec:	9019      	str	r0, [sp, #100]	; 0x64
 80166ee:	911d      	str	r1, [sp, #116]	; 0x74
 80166f0:	1ad2      	subs	r2, r2, r3
 80166f2:	e6b5      	b.n	8016460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80166f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	b923      	cbnz	r3, 8016704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80166fa:	4b04      	ldr	r3, [pc, #16]	; (801670c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80166fc:	6818      	ldr	r0, [r3, #0]
 80166fe:	6803      	ldr	r3, [r0, #0]
 8016700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016702:	4798      	blx	r3
 8016704:	b05b      	add	sp, #364	; 0x16c
 8016706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801670a:	bf00      	nop
 801670c:	2004e118 	.word	0x2004e118

08016710 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016710:	2b03      	cmp	r3, #3
 8016712:	d818      	bhi.n	8016746 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016714:	e8df f003 	tbb	[pc, r3]
 8016718:	130d0602 	.word	0x130d0602
 801671c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016720:	1850      	adds	r0, r2, r1
 8016722:	4770      	bx	lr
 8016724:	8803      	ldrh	r3, [r0, #0]
 8016726:	8880      	ldrh	r0, [r0, #4]
 8016728:	4418      	add	r0, r3
 801672a:	b200      	sxth	r0, r0
 801672c:	1a80      	subs	r0, r0, r2
 801672e:	3801      	subs	r0, #1
 8016730:	4770      	bx	lr
 8016732:	8803      	ldrh	r3, [r0, #0]
 8016734:	8880      	ldrh	r0, [r0, #4]
 8016736:	4418      	add	r0, r3
 8016738:	b200      	sxth	r0, r0
 801673a:	1a40      	subs	r0, r0, r1
 801673c:	e7f7      	b.n	801672e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801673e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016742:	4410      	add	r0, r2
 8016744:	4770      	bx	lr
 8016746:	2000      	movs	r0, #0
 8016748:	4770      	bx	lr

0801674a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801674a:	2b03      	cmp	r3, #3
 801674c:	d817      	bhi.n	801677e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801674e:	e8df f003 	tbb	[pc, r3]
 8016752:	0602      	.short	0x0602
 8016754:	1009      	.short	0x1009
 8016756:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801675a:	1850      	adds	r0, r2, r1
 801675c:	4770      	bx	lr
 801675e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016762:	e7fa      	b.n	801675a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016764:	8843      	ldrh	r3, [r0, #2]
 8016766:	88c0      	ldrh	r0, [r0, #6]
 8016768:	4418      	add	r0, r3
 801676a:	b200      	sxth	r0, r0
 801676c:	1a80      	subs	r0, r0, r2
 801676e:	3801      	subs	r0, #1
 8016770:	4770      	bx	lr
 8016772:	8843      	ldrh	r3, [r0, #2]
 8016774:	88c0      	ldrh	r0, [r0, #6]
 8016776:	4418      	add	r0, r3
 8016778:	b200      	sxth	r0, r0
 801677a:	1a40      	subs	r0, r0, r1
 801677c:	e7f7      	b.n	801676e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801677e:	2000      	movs	r0, #0
 8016780:	4770      	bx	lr
	...

08016784 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016784:	2200      	movs	r2, #0
 8016786:	4b01      	ldr	r3, [pc, #4]	; (801678c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016788:	601a      	str	r2, [r3, #0]
 801678a:	4770      	bx	lr
 801678c:	2004e128 	.word	0x2004e128

08016790 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016790:	4603      	mov	r3, r0
 8016792:	b1c8      	cbz	r0, 80167c8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016794:	0c02      	lsrs	r2, r0, #16
 8016796:	0412      	lsls	r2, r2, #16
 8016798:	b9a2      	cbnz	r2, 80167c4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801679a:	0403      	lsls	r3, r0, #16
 801679c:	2010      	movs	r0, #16
 801679e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80167a2:	bf04      	itt	eq
 80167a4:	021b      	lsleq	r3, r3, #8
 80167a6:	3008      	addeq	r0, #8
 80167a8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80167ac:	bf04      	itt	eq
 80167ae:	011b      	lsleq	r3, r3, #4
 80167b0:	3004      	addeq	r0, #4
 80167b2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80167b6:	bf04      	itt	eq
 80167b8:	009b      	lsleq	r3, r3, #2
 80167ba:	3002      	addeq	r0, #2
 80167bc:	2b00      	cmp	r3, #0
 80167be:	db04      	blt.n	80167ca <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80167c0:	3001      	adds	r0, #1
 80167c2:	4770      	bx	lr
 80167c4:	2000      	movs	r0, #0
 80167c6:	e7ea      	b.n	801679e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80167c8:	2020      	movs	r0, #32
 80167ca:	4770      	bx	lr

080167cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80167cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167d0:	b087      	sub	sp, #28
 80167d2:	4681      	mov	r9, r0
 80167d4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80167d8:	4610      	mov	r0, r2
 80167da:	4698      	mov	r8, r3
 80167dc:	460d      	mov	r5, r1
 80167de:	b981      	cbnz	r1, 8016802 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80167e0:	b14b      	cbz	r3, 80167f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80167e2:	460b      	mov	r3, r1
 80167e4:	e9cd 4700 	strd	r4, r7, [sp]
 80167e8:	464a      	mov	r2, r9
 80167ea:	4641      	mov	r1, r8
 80167ec:	f7ff ffee 	bl	80167cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80167f0:	b007      	add	sp, #28
 80167f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f6:	f04f 33ff 	mov.w	r3, #4294967295
 80167fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80167fe:	603b      	str	r3, [r7, #0]
 8016800:	e7f6      	b.n	80167f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016802:	fa32 fa01 	lsrs.w	sl, r2, r1
 8016806:	d107      	bne.n	8016818 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8016808:	fb09 f602 	mul.w	r6, r9, r2
 801680c:	fbb6 f0f4 	udiv	r0, r6, r4
 8016810:	fb04 6610 	mls	r6, r4, r0, r6
 8016814:	603e      	str	r6, [r7, #0]
 8016816:	e7eb      	b.n	80167f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016818:	fa09 fb01 	lsl.w	fp, r9, r1
 801681c:	fbbb f3f4 	udiv	r3, fp, r4
 8016820:	2601      	movs	r6, #1
 8016822:	9302      	str	r3, [sp, #8]
 8016824:	408e      	lsls	r6, r1
 8016826:	fb0a f303 	mul.w	r3, sl, r3
 801682a:	3e01      	subs	r6, #1
 801682c:	4016      	ands	r6, r2
 801682e:	4630      	mov	r0, r6
 8016830:	9303      	str	r3, [sp, #12]
 8016832:	f7ff ffad 	bl	8016790 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016836:	464a      	mov	r2, r9
 8016838:	460b      	mov	r3, r1
 801683a:	e9cd 4700 	strd	r4, r7, [sp]
 801683e:	4601      	mov	r1, r0
 8016840:	4630      	mov	r0, r6
 8016842:	f7ff ffc3 	bl	80167cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016846:	9b02      	ldr	r3, [sp, #8]
 8016848:	4606      	mov	r6, r0
 801684a:	fb04 bb13 	mls	fp, r4, r3, fp
 801684e:	4658      	mov	r0, fp
 8016850:	eb05 0108 	add.w	r1, r5, r8
 8016854:	f7ff ff9c 	bl	8016790 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016858:	ab05      	add	r3, sp, #20
 801685a:	e9cd 4300 	strd	r4, r3, [sp]
 801685e:	465a      	mov	r2, fp
 8016860:	4603      	mov	r3, r0
 8016862:	4650      	mov	r0, sl
 8016864:	f7ff ffb2 	bl	80167cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016868:	6839      	ldr	r1, [r7, #0]
 801686a:	9a05      	ldr	r2, [sp, #20]
 801686c:	9b03      	ldr	r3, [sp, #12]
 801686e:	4411      	add	r1, r2
 8016870:	fbb1 f2f4 	udiv	r2, r1, r4
 8016874:	fb04 1412 	mls	r4, r4, r2, r1
 8016878:	18d3      	adds	r3, r2, r3
 801687a:	441e      	add	r6, r3
 801687c:	4430      	add	r0, r6
 801687e:	603c      	str	r4, [r7, #0]
 8016880:	e7b6      	b.n	80167f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08016882 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016886:	b085      	sub	sp, #20
 8016888:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801688a:	f1b0 0900 	subs.w	r9, r0, #0
 801688e:	461d      	mov	r5, r3
 8016890:	bfbf      	itttt	lt
 8016892:	6823      	ldrlt	r3, [r4, #0]
 8016894:	f1c9 0900 	rsblt	r9, r9, #0
 8016898:	425b      	neglt	r3, r3
 801689a:	6023      	strlt	r3, [r4, #0]
 801689c:	bfb4      	ite	lt
 801689e:	f04f 36ff 	movlt.w	r6, #4294967295
 80168a2:	2601      	movge	r6, #1
 80168a4:	2a00      	cmp	r2, #0
 80168a6:	4617      	mov	r7, r2
 80168a8:	da04      	bge.n	80168b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80168aa:	6823      	ldr	r3, [r4, #0]
 80168ac:	4257      	negs	r7, r2
 80168ae:	425b      	negs	r3, r3
 80168b0:	4276      	negs	r6, r6
 80168b2:	6023      	str	r3, [r4, #0]
 80168b4:	2d00      	cmp	r5, #0
 80168b6:	4638      	mov	r0, r7
 80168b8:	bfba      	itte	lt
 80168ba:	426d      	neglt	r5, r5
 80168bc:	f04f 38ff 	movlt.w	r8, #4294967295
 80168c0:	f04f 0801 	movge.w	r8, #1
 80168c4:	f7ff ff64 	bl	8016790 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80168c8:	ab03      	add	r3, sp, #12
 80168ca:	e9cd 5300 	strd	r5, r3, [sp]
 80168ce:	463a      	mov	r2, r7
 80168d0:	4603      	mov	r3, r0
 80168d2:	4648      	mov	r0, r9
 80168d4:	f7ff ff7a 	bl	80167cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80168d8:	6823      	ldr	r3, [r4, #0]
 80168da:	9a03      	ldr	r2, [sp, #12]
 80168dc:	4546      	cmp	r6, r8
 80168de:	441a      	add	r2, r3
 80168e0:	fb92 f3f5 	sdiv	r3, r2, r5
 80168e4:	4418      	add	r0, r3
 80168e6:	fb05 2313 	mls	r3, r5, r3, r2
 80168ea:	bf18      	it	ne
 80168ec:	4240      	negne	r0, r0
 80168ee:	1c72      	adds	r2, r6, #1
 80168f0:	6023      	str	r3, [r4, #0]
 80168f2:	d105      	bne.n	8016900 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	f1c3 0200 	rsb	r2, r3, #0
 80168fa:	db0b      	blt.n	8016914 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80168fc:	6022      	str	r2, [r4, #0]
 80168fe:	e006      	b.n	801690e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016900:	2e01      	cmp	r6, #1
 8016902:	d104      	bne.n	801690e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016904:	2b00      	cmp	r3, #0
 8016906:	da02      	bge.n	801690e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016908:	442b      	add	r3, r5
 801690a:	3801      	subs	r0, #1
 801690c:	6023      	str	r3, [r4, #0]
 801690e:	b005      	add	sp, #20
 8016910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016914:	3801      	subs	r0, #1
 8016916:	1b52      	subs	r2, r2, r5
 8016918:	e7f0      	b.n	80168fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801691c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801691c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016920:	4c1c      	ldr	r4, [pc, #112]	; (8016994 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016922:	4605      	mov	r5, r0
 8016924:	69a3      	ldr	r3, [r4, #24]
 8016926:	6807      	ldr	r7, [r0, #0]
 8016928:	b92b      	cbnz	r3, 8016936 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801692a:	6840      	ldr	r0, [r0, #4]
 801692c:	e9c5 7000 	strd	r7, r0, [r5]
 8016930:	b004      	add	sp, #16
 8016932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016936:	f04f 0802 	mov.w	r8, #2
 801693a:	fb93 f1f8 	sdiv	r1, r3, r8
 801693e:	68a2      	ldr	r2, [r4, #8]
 8016940:	ae04      	add	r6, sp, #16
 8016942:	440a      	add	r2, r1
 8016944:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016948:	69e1      	ldr	r1, [r4, #28]
 801694a:	463a      	mov	r2, r7
 801694c:	9600      	str	r6, [sp, #0]
 801694e:	6820      	ldr	r0, [r4, #0]
 8016950:	f7ff ff97 	bl	8016882 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016954:	69a3      	ldr	r3, [r4, #24]
 8016956:	4607      	mov	r7, r0
 8016958:	686a      	ldr	r2, [r5, #4]
 801695a:	6a21      	ldr	r1, [r4, #32]
 801695c:	9600      	str	r6, [sp, #0]
 801695e:	6860      	ldr	r0, [r4, #4]
 8016960:	f7ff ff8f 	bl	8016882 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016964:	69a3      	ldr	r3, [r4, #24]
 8016966:	6962      	ldr	r2, [r4, #20]
 8016968:	fb93 f8f8 	sdiv	r8, r3, r8
 801696c:	4442      	add	r2, r8
 801696e:	9203      	str	r2, [sp, #12]
 8016970:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016972:	682a      	ldr	r2, [r5, #0]
 8016974:	4407      	add	r7, r0
 8016976:	9600      	str	r6, [sp, #0]
 8016978:	68e0      	ldr	r0, [r4, #12]
 801697a:	f7ff ff82 	bl	8016882 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801697e:	9600      	str	r6, [sp, #0]
 8016980:	4680      	mov	r8, r0
 8016982:	69a3      	ldr	r3, [r4, #24]
 8016984:	686a      	ldr	r2, [r5, #4]
 8016986:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016988:	6920      	ldr	r0, [r4, #16]
 801698a:	f7ff ff7a 	bl	8016882 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801698e:	4440      	add	r0, r8
 8016990:	e7cc      	b.n	801692c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016992:	bf00      	nop
 8016994:	2004e12c 	.word	0x2004e12c

08016998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016998:	4b07      	ldr	r3, [pc, #28]	; (80169b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	2b01      	cmp	r3, #1
 801699e:	d109      	bne.n	80169b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80169a0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80169a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80169a8:	8003      	strh	r3, [r0, #0]
 80169aa:	4b04      	ldr	r3, [pc, #16]	; (80169bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80169ac:	881b      	ldrh	r3, [r3, #0]
 80169ae:	3b01      	subs	r3, #1
 80169b0:	1a9b      	subs	r3, r3, r2
 80169b2:	800b      	strh	r3, [r1, #0]
 80169b4:	4770      	bx	lr
 80169b6:	bf00      	nop
 80169b8:	2004e110 	.word	0x2004e110
 80169bc:	2004e10c 	.word	0x2004e10c

080169c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80169c0:	b510      	push	{r4, lr}
 80169c2:	4b07      	ldr	r3, [pc, #28]	; (80169e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80169c4:	781b      	ldrb	r3, [r3, #0]
 80169c6:	2b01      	cmp	r3, #1
 80169c8:	d108      	bne.n	80169dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80169ca:	4b06      	ldr	r3, [pc, #24]	; (80169e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80169cc:	880c      	ldrh	r4, [r1, #0]
 80169ce:	881b      	ldrh	r3, [r3, #0]
 80169d0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80169d4:	3b01      	subs	r3, #1
 80169d6:	1b1b      	subs	r3, r3, r4
 80169d8:	8003      	strh	r3, [r0, #0]
 80169da:	800a      	strh	r2, [r1, #0]
 80169dc:	bd10      	pop	{r4, pc}
 80169de:	bf00      	nop
 80169e0:	2004e110 	.word	0x2004e110
 80169e4:	2004e10c 	.word	0x2004e10c

080169e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80169e8:	b510      	push	{r4, lr}
 80169ea:	4b0a      	ldr	r3, [pc, #40]	; (8016a14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80169ec:	781b      	ldrb	r3, [r3, #0]
 80169ee:	2b01      	cmp	r3, #1
 80169f0:	d10e      	bne.n	8016a10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80169f2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80169f6:	8843      	ldrh	r3, [r0, #2]
 80169f8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80169fc:	18ca      	adds	r2, r1, r3
 80169fe:	4b06      	ldr	r3, [pc, #24]	; (8016a18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016a00:	8044      	strh	r4, [r0, #2]
 8016a02:	881b      	ldrh	r3, [r3, #0]
 8016a04:	1a9b      	subs	r3, r3, r2
 8016a06:	8003      	strh	r3, [r0, #0]
 8016a08:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016a0c:	8081      	strh	r1, [r0, #4]
 8016a0e:	80c3      	strh	r3, [r0, #6]
 8016a10:	bd10      	pop	{r4, pc}
 8016a12:	bf00      	nop
 8016a14:	2004e110 	.word	0x2004e110
 8016a18:	2004e10c 	.word	0x2004e10c

08016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016a1c:	4b08      	ldr	r3, [pc, #32]	; (8016a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016a1e:	781b      	ldrb	r3, [r3, #0]
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d10c      	bne.n	8016a3e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016a24:	8803      	ldrh	r3, [r0, #0]
 8016a26:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016a2a:	8842      	ldrh	r2, [r0, #2]
 8016a2c:	8002      	strh	r2, [r0, #0]
 8016a2e:	185a      	adds	r2, r3, r1
 8016a30:	4b04      	ldr	r3, [pc, #16]	; (8016a44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016a32:	881b      	ldrh	r3, [r3, #0]
 8016a34:	1a9b      	subs	r3, r3, r2
 8016a36:	8043      	strh	r3, [r0, #2]
 8016a38:	88c3      	ldrh	r3, [r0, #6]
 8016a3a:	80c1      	strh	r1, [r0, #6]
 8016a3c:	8083      	strh	r3, [r0, #4]
 8016a3e:	4770      	bx	lr
 8016a40:	2004e110 	.word	0x2004e110
 8016a44:	2004e10c 	.word	0x2004e10c

08016a48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016a48:	b510      	push	{r4, lr}
 8016a4a:	4b07      	ldr	r3, [pc, #28]	; (8016a68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	2b01      	cmp	r3, #1
 8016a50:	d108      	bne.n	8016a64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016a52:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016a56:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016a5a:	8003      	strh	r3, [r0, #0]
 8016a5c:	8893      	ldrh	r3, [r2, #4]
 8016a5e:	3b01      	subs	r3, #1
 8016a60:	1b1b      	subs	r3, r3, r4
 8016a62:	800b      	strh	r3, [r1, #0]
 8016a64:	bd10      	pop	{r4, pc}
 8016a66:	bf00      	nop
 8016a68:	2004e110 	.word	0x2004e110

08016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016a6c:	b510      	push	{r4, lr}
 8016a6e:	4b0a      	ldr	r3, [pc, #40]	; (8016a98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016a70:	460a      	mov	r2, r1
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	2b01      	cmp	r3, #1
 8016a76:	d10d      	bne.n	8016a94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016a78:	8881      	ldrh	r1, [r0, #4]
 8016a7a:	8803      	ldrh	r3, [r0, #0]
 8016a7c:	440b      	add	r3, r1
 8016a7e:	4601      	mov	r1, r0
 8016a80:	3b01      	subs	r3, #1
 8016a82:	f821 3b02 	strh.w	r3, [r1], #2
 8016a86:	f7ff ffdf 	bl	8016a48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016a8a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016a8e:	88c2      	ldrh	r2, [r0, #6]
 8016a90:	80c3      	strh	r3, [r0, #6]
 8016a92:	8082      	strh	r2, [r0, #4]
 8016a94:	bd10      	pop	{r4, pc}
 8016a96:	bf00      	nop
 8016a98:	2004e110 	.word	0x2004e110

08016a9c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	b570      	push	{r4, r5, r6, lr}
 8016aa0:	4c0a      	ldr	r4, [pc, #40]	; (8016acc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016aa2:	4605      	mov	r5, r0
 8016aa4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8016aa8:	6820      	ldr	r0, [r4, #0]
 8016aaa:	460e      	mov	r6, r1
 8016aac:	b110      	cbz	r0, 8016ab4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8016aae:	6803      	ldr	r3, [r0, #0]
 8016ab0:	695b      	ldr	r3, [r3, #20]
 8016ab2:	4798      	blx	r3
 8016ab4:	6026      	str	r6, [r4, #0]
 8016ab6:	6833      	ldr	r3, [r6, #0]
 8016ab8:	4630      	mov	r0, r6
 8016aba:	68db      	ldr	r3, [r3, #12]
 8016abc:	4798      	blx	r3
 8016abe:	682b      	ldr	r3, [r5, #0]
 8016ac0:	4628      	mov	r0, r5
 8016ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ac8:	4718      	bx	r3
 8016aca:	bf00      	nop
 8016acc:	2004e15c 	.word	0x2004e15c

08016ad0 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016ad0:	2100      	movs	r1, #0
 8016ad2:	4b06      	ldr	r3, [pc, #24]	; (8016aec <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016ad4:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8016ad8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016adc:	4b04      	ldr	r3, [pc, #16]	; (8016af0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016ade:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8016ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ae6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8016aea:	4770      	bx	lr
 8016aec:	2004e10c 	.word	0x2004e10c
 8016af0:	2004e10e 	.word	0x2004e10e

08016af4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016af4:	4b03      	ldr	r3, [pc, #12]	; (8016b04 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016af6:	6818      	ldr	r0, [r3, #0]
 8016af8:	b110      	cbz	r0, 8016b00 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016afa:	6803      	ldr	r3, [r0, #0]
 8016afc:	699b      	ldr	r3, [r3, #24]
 8016afe:	4718      	bx	r3
 8016b00:	4770      	bx	lr
 8016b02:	bf00      	nop
 8016b04:	2004e15c 	.word	0x2004e15c

08016b08 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016b08:	4770      	bx	lr
	...

08016b0c <_ZN8touchgfx11Application4drawEv>:
 8016b0c:	b507      	push	{r0, r1, r2, lr}
 8016b0e:	2100      	movs	r1, #0
 8016b10:	4b08      	ldr	r3, [pc, #32]	; (8016b34 <_ZN8touchgfx11Application4drawEv+0x28>)
 8016b12:	9100      	str	r1, [sp, #0]
 8016b14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016b18:	4b07      	ldr	r3, [pc, #28]	; (8016b38 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016b1a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b22:	4669      	mov	r1, sp
 8016b24:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016b28:	6803      	ldr	r3, [r0, #0]
 8016b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b2c:	4798      	blx	r3
 8016b2e:	b003      	add	sp, #12
 8016b30:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b34:	2004e10c 	.word	0x2004e10c
 8016b38:	2004e10e 	.word	0x2004e10e

08016b3c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016b3c:	4b03      	ldr	r3, [pc, #12]	; (8016b4c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016b3e:	6818      	ldr	r0, [r3, #0]
 8016b40:	b110      	cbz	r0, 8016b48 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016b42:	6803      	ldr	r3, [r0, #0]
 8016b44:	69db      	ldr	r3, [r3, #28]
 8016b46:	4718      	bx	r3
 8016b48:	4770      	bx	lr
 8016b4a:	bf00      	nop
 8016b4c:	2004e15c 	.word	0x2004e15c

08016b50 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016b50:	4b03      	ldr	r3, [pc, #12]	; (8016b60 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016b52:	6818      	ldr	r0, [r3, #0]
 8016b54:	b110      	cbz	r0, 8016b5c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016b56:	6803      	ldr	r3, [r0, #0]
 8016b58:	6a1b      	ldr	r3, [r3, #32]
 8016b5a:	4718      	bx	r3
 8016b5c:	4770      	bx	lr
 8016b5e:	bf00      	nop
 8016b60:	2004e15c 	.word	0x2004e15c

08016b64 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016b64:	2300      	movs	r3, #0
 8016b66:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8016b6a:	4770      	bx	lr

08016b6c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016b6c:	4b03      	ldr	r3, [pc, #12]	; (8016b7c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016b6e:	6818      	ldr	r0, [r3, #0]
 8016b70:	b110      	cbz	r0, 8016b78 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016b72:	6803      	ldr	r3, [r0, #0]
 8016b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b76:	4718      	bx	r3
 8016b78:	4770      	bx	lr
 8016b7a:	bf00      	nop
 8016b7c:	2004e15c 	.word	0x2004e15c

08016b80 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016b80:	b570      	push	{r4, r5, r6, lr}
 8016b82:	4d32      	ldr	r5, [pc, #200]	; (8016c4c <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8016b84:	4604      	mov	r4, r0
 8016b86:	6828      	ldr	r0, [r5, #0]
 8016b88:	b140      	cbz	r0, 8016b9c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016b8a:	7a03      	ldrb	r3, [r0, #8]
 8016b8c:	b933      	cbnz	r3, 8016b9c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016b8e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8016b92:	6803      	ldr	r3, [r0, #0]
 8016b94:	689b      	ldr	r3, [r3, #8]
 8016b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b9a:	4718      	bx	r3
 8016b9c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8016ba0:	b97b      	cbnz	r3, 8016bc2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016ba2:	b170      	cbz	r0, 8016bc2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016ba4:	7a03      	ldrb	r3, [r0, #8]
 8016ba6:	b163      	cbz	r3, 8016bc2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016ba8:	4b29      	ldr	r3, [pc, #164]	; (8016c50 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8016baa:	6818      	ldr	r0, [r3, #0]
 8016bac:	b110      	cbz	r0, 8016bb4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016bae:	6803      	ldr	r3, [r0, #0]
 8016bb0:	691b      	ldr	r3, [r3, #16]
 8016bb2:	4798      	blx	r3
 8016bb4:	6828      	ldr	r0, [r5, #0]
 8016bb6:	6803      	ldr	r3, [r0, #0]
 8016bb8:	68db      	ldr	r3, [r3, #12]
 8016bba:	4798      	blx	r3
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8016bc2:	2500      	movs	r5, #0
 8016bc4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8016bc8:	42a8      	cmp	r0, r5
 8016bca:	dd0c      	ble.n	8016be6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8016bcc:	1963      	adds	r3, r4, r5
 8016bce:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8016bd2:	b132      	cbz	r2, 8016be2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8016bd4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016bd8:	4413      	add	r3, r2
 8016bda:	6858      	ldr	r0, [r3, #4]
 8016bdc:	6803      	ldr	r3, [r0, #0]
 8016bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016be0:	4798      	blx	r3
 8016be2:	3501      	adds	r5, #1
 8016be4:	e7ee      	b.n	8016bc4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8016be6:	2300      	movs	r3, #0
 8016be8:	461a      	mov	r2, r3
 8016bea:	4298      	cmp	r0, r3
 8016bec:	d015      	beq.n	8016c1a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8016bee:	18e1      	adds	r1, r4, r3
 8016bf0:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8016bf4:	b16d      	cbz	r5, 8016c12 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d00a      	beq.n	8016c10 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8016bfa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8016bfe:	4431      	add	r1, r6
 8016c00:	684e      	ldr	r6, [r1, #4]
 8016c02:	b291      	uxth	r1, r2
 8016c04:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8016c08:	604e      	str	r6, [r1, #4]
 8016c0a:	18a1      	adds	r1, r4, r2
 8016c0c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8016c10:	3201      	adds	r2, #1
 8016c12:	3301      	adds	r3, #1
 8016c14:	e7e9      	b.n	8016bea <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8016c16:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8016c1a:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8016c1e:	4295      	cmp	r5, r2
 8016c20:	dd0d      	ble.n	8016c3e <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8016c22:	1e6b      	subs	r3, r5, #1
 8016c24:	b29b      	uxth	r3, r3
 8016c26:	4618      	mov	r0, r3
 8016c28:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8016c2c:	3104      	adds	r1, #4
 8016c2e:	4285      	cmp	r5, r0
 8016c30:	ddf1      	ble.n	8016c16 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8016c32:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8016c36:	3001      	adds	r0, #1
 8016c38:	f841 6c04 	str.w	r6, [r1, #-4]
 8016c3c:	e7f7      	b.n	8016c2e <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8016c3e:	4b04      	ldr	r3, [pc, #16]	; (8016c50 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8016c40:	6818      	ldr	r0, [r3, #0]
 8016c42:	b110      	cbz	r0, 8016c4a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8016c44:	6803      	ldr	r3, [r0, #0]
 8016c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c48:	e7a5      	b.n	8016b96 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016c4a:	bd70      	pop	{r4, r5, r6, pc}
 8016c4c:	2004e160 	.word	0x2004e160
 8016c50:	2004e15c 	.word	0x2004e15c

08016c54 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016c54:	b510      	push	{r4, lr}
 8016c56:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016c5a:	888a      	ldrh	r2, [r1, #4]
 8016c5c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016c60:	4422      	add	r2, r4
 8016c62:	b212      	sxth	r2, r2
 8016c64:	4293      	cmp	r3, r2
 8016c66:	da15      	bge.n	8016c94 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016c68:	8882      	ldrh	r2, [r0, #4]
 8016c6a:	4413      	add	r3, r2
 8016c6c:	b21b      	sxth	r3, r3
 8016c6e:	429c      	cmp	r4, r3
 8016c70:	da10      	bge.n	8016c94 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016c72:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016c76:	88c9      	ldrh	r1, [r1, #6]
 8016c78:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016c7c:	4419      	add	r1, r3
 8016c7e:	b209      	sxth	r1, r1
 8016c80:	428a      	cmp	r2, r1
 8016c82:	da07      	bge.n	8016c94 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016c84:	88c0      	ldrh	r0, [r0, #6]
 8016c86:	4410      	add	r0, r2
 8016c88:	b200      	sxth	r0, r0
 8016c8a:	4283      	cmp	r3, r0
 8016c8c:	bfac      	ite	ge
 8016c8e:	2000      	movge	r0, #0
 8016c90:	2001      	movlt	r0, #1
 8016c92:	bd10      	pop	{r4, pc}
 8016c94:	2000      	movs	r0, #0
 8016c96:	e7fc      	b.n	8016c92 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016c98 <_ZN8touchgfx4Rect10restrictToEss>:
 8016c98:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016c9c:	b510      	push	{r4, lr}
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	da04      	bge.n	8016cac <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016ca2:	8884      	ldrh	r4, [r0, #4]
 8016ca4:	4423      	add	r3, r4
 8016ca6:	8083      	strh	r3, [r0, #4]
 8016ca8:	2300      	movs	r3, #0
 8016caa:	8003      	strh	r3, [r0, #0]
 8016cac:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016cb0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016cb4:	1b09      	subs	r1, r1, r4
 8016cb6:	428b      	cmp	r3, r1
 8016cb8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016cbc:	bfc8      	it	gt
 8016cbe:	8081      	strhgt	r1, [r0, #4]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	da04      	bge.n	8016cce <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016cc4:	88c1      	ldrh	r1, [r0, #6]
 8016cc6:	440b      	add	r3, r1
 8016cc8:	80c3      	strh	r3, [r0, #6]
 8016cca:	2300      	movs	r3, #0
 8016ccc:	8043      	strh	r3, [r0, #2]
 8016cce:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016cd2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016cd6:	1a52      	subs	r2, r2, r1
 8016cd8:	4293      	cmp	r3, r2
 8016cda:	bfc8      	it	gt
 8016cdc:	80c2      	strhgt	r2, [r0, #6]
 8016cde:	bd10      	pop	{r4, pc}

08016ce0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016ce0:	b510      	push	{r4, lr}
 8016ce2:	460c      	mov	r4, r1
 8016ce4:	4b0f      	ldr	r3, [pc, #60]	; (8016d24 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016cec:	4b0e      	ldr	r3, [pc, #56]	; (8016d28 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016cee:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016cf2:	f7ff ffd1 	bl	8016c98 <_ZN8touchgfx4Rect10restrictToEss>
 8016cf6:	4b0d      	ldr	r3, [pc, #52]	; (8016d2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016cf8:	6818      	ldr	r0, [r3, #0]
 8016cfa:	b190      	cbz	r0, 8016d22 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016cfc:	6803      	ldr	r3, [r0, #0]
 8016cfe:	4621      	mov	r1, r4
 8016d00:	689b      	ldr	r3, [r3, #8]
 8016d02:	4798      	blx	r3
 8016d04:	4b0a      	ldr	r3, [pc, #40]	; (8016d30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016d06:	6818      	ldr	r0, [r3, #0]
 8016d08:	b118      	cbz	r0, 8016d12 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016d0a:	6803      	ldr	r3, [r0, #0]
 8016d0c:	4621      	mov	r1, r4
 8016d0e:	689b      	ldr	r3, [r3, #8]
 8016d10:	4798      	blx	r3
 8016d12:	4b08      	ldr	r3, [pc, #32]	; (8016d34 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016d14:	4621      	mov	r1, r4
 8016d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d1a:	6818      	ldr	r0, [r3, #0]
 8016d1c:	6803      	ldr	r3, [r0, #0]
 8016d1e:	69db      	ldr	r3, [r3, #28]
 8016d20:	4718      	bx	r3
 8016d22:	bd10      	pop	{r4, pc}
 8016d24:	2004e10e 	.word	0x2004e10e
 8016d28:	2004e10c 	.word	0x2004e10c
 8016d2c:	2004e15c 	.word	0x2004e15c
 8016d30:	2004e158 	.word	0x2004e158
 8016d34:	2004e118 	.word	0x2004e118

08016d38 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d3a:	4606      	mov	r6, r0
 8016d3c:	4608      	mov	r0, r1
 8016d3e:	460f      	mov	r7, r1
 8016d40:	f7fc f963 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d44:	b9e8      	cbnz	r0, 8016d82 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016d46:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016d4a:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016d4e:	42a5      	cmp	r5, r4
 8016d50:	db17      	blt.n	8016d82 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016d52:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016d56:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	db11      	blt.n	8016d82 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016d5e:	88b9      	ldrh	r1, [r7, #4]
 8016d60:	440d      	add	r5, r1
 8016d62:	88b1      	ldrh	r1, [r6, #4]
 8016d64:	b22d      	sxth	r5, r5
 8016d66:	440c      	add	r4, r1
 8016d68:	b224      	sxth	r4, r4
 8016d6a:	42a5      	cmp	r5, r4
 8016d6c:	dc09      	bgt.n	8016d82 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016d6e:	88f8      	ldrh	r0, [r7, #6]
 8016d70:	4410      	add	r0, r2
 8016d72:	88f2      	ldrh	r2, [r6, #6]
 8016d74:	b200      	sxth	r0, r0
 8016d76:	4413      	add	r3, r2
 8016d78:	b21b      	sxth	r3, r3
 8016d7a:	4298      	cmp	r0, r3
 8016d7c:	bfcc      	ite	gt
 8016d7e:	2000      	movgt	r0, #0
 8016d80:	2001      	movle	r0, #1
 8016d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016d84 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d86:	4604      	mov	r4, r0
 8016d88:	4608      	mov	r0, r1
 8016d8a:	460d      	mov	r5, r1
 8016d8c:	f7fc f93d 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d90:	b978      	cbnz	r0, 8016db2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016d92:	4620      	mov	r0, r4
 8016d94:	f7fc f939 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d98:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016d9c:	b150      	cbz	r0, 8016db4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016d9e:	8026      	strh	r6, [r4, #0]
 8016da0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016da4:	8063      	strh	r3, [r4, #2]
 8016da6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016daa:	80a3      	strh	r3, [r4, #4]
 8016dac:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016db0:	80e3      	strh	r3, [r4, #6]
 8016db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016db4:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016db8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016dbc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016dc0:	42b1      	cmp	r1, r6
 8016dc2:	460f      	mov	r7, r1
 8016dc4:	bfa8      	it	ge
 8016dc6:	4637      	movge	r7, r6
 8016dc8:	4293      	cmp	r3, r2
 8016dca:	4618      	mov	r0, r3
 8016dcc:	bfa8      	it	ge
 8016dce:	4610      	movge	r0, r2
 8016dd0:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016dd4:	88ed      	ldrh	r5, [r5, #6]
 8016dd6:	4466      	add	r6, ip
 8016dd8:	442a      	add	r2, r5
 8016dda:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016dde:	88e5      	ldrh	r5, [r4, #6]
 8016de0:	4461      	add	r1, ip
 8016de2:	442b      	add	r3, r5
 8016de4:	b236      	sxth	r6, r6
 8016de6:	b209      	sxth	r1, r1
 8016de8:	b212      	sxth	r2, r2
 8016dea:	b21b      	sxth	r3, r3
 8016dec:	428e      	cmp	r6, r1
 8016dee:	bfac      	ite	ge
 8016df0:	ebc7 0106 	rsbge	r1, r7, r6
 8016df4:	ebc7 0101 	rsblt	r1, r7, r1
 8016df8:	429a      	cmp	r2, r3
 8016dfa:	bfac      	ite	ge
 8016dfc:	ebc0 0202 	rsbge	r2, r0, r2
 8016e00:	ebc0 0203 	rsblt	r2, r0, r3
 8016e04:	8027      	strh	r7, [r4, #0]
 8016e06:	8060      	strh	r0, [r4, #2]
 8016e08:	80a1      	strh	r1, [r4, #4]
 8016e0a:	80e2      	strh	r2, [r4, #6]
 8016e0c:	e7d1      	b.n	8016db2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016e10 <_ZN8touchgfx11Application11getInstanceEv>:
 8016e10:	4b01      	ldr	r3, [pc, #4]	; (8016e18 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016e12:	6818      	ldr	r0, [r3, #0]
 8016e14:	4770      	bx	lr
 8016e16:	bf00      	nop
 8016e18:	2004e16c 	.word	0x2004e16c

08016e1c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8016e22:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8016e26:	30a8      	adds	r0, #168	; 0xa8
 8016e28:	f802 3b01 	strb.w	r3, [r2], #1
 8016e2c:	4282      	cmp	r2, r0
 8016e2e:	d1fb      	bne.n	8016e28 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8016e30:	4770      	bx	lr

08016e32 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016e32:	4603      	mov	r3, r0
 8016e34:	2200      	movs	r2, #0
 8016e36:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016e3a:	801a      	strh	r2, [r3, #0]
 8016e3c:	805a      	strh	r2, [r3, #2]
 8016e3e:	809a      	strh	r2, [r3, #4]
 8016e40:	80da      	strh	r2, [r3, #6]
 8016e42:	3308      	adds	r3, #8
 8016e44:	428b      	cmp	r3, r1
 8016e46:	d1f8      	bne.n	8016e3a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016e48:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016e4c:	4770      	bx	lr
	...

08016e50 <_ZN8touchgfx11ApplicationC1Ev>:
 8016e50:	b570      	push	{r4, r5, r6, lr}
 8016e52:	2500      	movs	r5, #0
 8016e54:	4604      	mov	r4, r0
 8016e56:	4b18      	ldr	r3, [pc, #96]	; (8016eb8 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8016e58:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8016e5c:	6003      	str	r3, [r0, #0]
 8016e5e:	30a8      	adds	r0, #168	; 0xa8
 8016e60:	f7ff ffe7 	bl	8016e32 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016e64:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8016e68:	f7ff ffe3 	bl	8016e32 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016e6c:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8016e70:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8016e74:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8016e78:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8016e7c:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8016e80:	490e      	ldr	r1, [pc, #56]	; (8016ebc <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8016e82:	480f      	ldr	r0, [pc, #60]	; (8016ec0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8016e84:	f00e f8b4 	bl	8024ff0 <CRC_Lock>
 8016e88:	4e0e      	ldr	r6, [pc, #56]	; (8016ec4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8016e8a:	4b0f      	ldr	r3, [pc, #60]	; (8016ec8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016e8c:	b158      	cbz	r0, 8016ea6 <_ZN8touchgfx11ApplicationC1Ev+0x56>
 8016e8e:	801d      	strh	r5, [r3, #0]
 8016e90:	2300      	movs	r3, #0
 8016e92:	4a0e      	ldr	r2, [pc, #56]	; (8016ecc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016e94:	4620      	mov	r0, r4
 8016e96:	6013      	str	r3, [r2, #0]
 8016e98:	4a0d      	ldr	r2, [pc, #52]	; (8016ed0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016e9a:	6033      	str	r3, [r6, #0]
 8016e9c:	6013      	str	r3, [r2, #0]
 8016e9e:	f7ff ffbd 	bl	8016e1c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8016ea2:	4620      	mov	r0, r4
 8016ea4:	bd70      	pop	{r4, r5, r6, pc}
 8016ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016eaa:	2002      	movs	r0, #2
 8016eac:	801a      	strh	r2, [r3, #0]
 8016eae:	6030      	str	r0, [r6, #0]
 8016eb0:	f001 fa9e 	bl	80183f0 <_ZN8touchgfx6Screen4drawEv>
 8016eb4:	e7ec      	b.n	8016e90 <_ZN8touchgfx11ApplicationC1Ev+0x40>
 8016eb6:	bf00      	nop
 8016eb8:	08028a1c 	.word	0x08028a1c
 8016ebc:	b5e8b5cd 	.word	0xb5e8b5cd
 8016ec0:	f407a5c2 	.word	0xf407a5c2
 8016ec4:	2004e15c 	.word	0x2004e15c
 8016ec8:	20025820 	.word	0x20025820
 8016ecc:	2004e16c 	.word	0x2004e16c
 8016ed0:	2004e160 	.word	0x2004e160

08016ed4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016ed4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016ed8:	b510      	push	{r4, lr}
 8016eda:	3b01      	subs	r3, #1
 8016edc:	b29b      	uxth	r3, r3
 8016ede:	428b      	cmp	r3, r1
 8016ee0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8016ee4:	d908      	bls.n	8016ef8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016ee6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016eea:	681a      	ldr	r2, [r3, #0]
 8016eec:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016ef0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016ef4:	685a      	ldr	r2, [r3, #4]
 8016ef6:	6062      	str	r2, [r4, #4]
 8016ef8:	bd10      	pop	{r4, pc}
	...

08016efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f00:	4b94      	ldr	r3, [pc, #592]	; (8017154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8016f02:	b08f      	sub	sp, #60	; 0x3c
 8016f04:	ac0a      	add	r4, sp, #40	; 0x28
 8016f06:	e884 0006 	stmia.w	r4, {r1, r2}
 8016f0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f0e:	4b92      	ldr	r3, [pc, #584]	; (8017158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8016f10:	4683      	mov	fp, r0
 8016f12:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016f16:	4620      	mov	r0, r4
 8016f18:	f7ff febe 	bl	8016c98 <_ZN8touchgfx4Rect10restrictToEss>
 8016f1c:	4620      	mov	r0, r4
 8016f1e:	f7fc f874 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f22:	2800      	cmp	r0, #0
 8016f24:	d16a      	bne.n	8016ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016f26:	9403      	str	r4, [sp, #12]
 8016f28:	2400      	movs	r4, #0
 8016f2a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8016f2e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8016f32:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8016f36:	9301      	str	r3, [sp, #4]
 8016f38:	36a0      	adds	r6, #160	; 0xa0
 8016f3a:	42a5      	cmp	r5, r4
 8016f3c:	d00d      	beq.n	8016f5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8016f3e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8016f42:	9803      	ldr	r0, [sp, #12]
 8016f44:	f7ff fef8 	bl	8016d38 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016f48:	b128      	cbz	r0, 8016f56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8016f4a:	1e69      	subs	r1, r5, #1
 8016f4c:	1b09      	subs	r1, r1, r4
 8016f4e:	b289      	uxth	r1, r1
 8016f50:	9801      	ldr	r0, [sp, #4]
 8016f52:	f7ff ffbf 	bl	8016ed4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016f56:	3401      	adds	r4, #1
 8016f58:	e7ef      	b.n	8016f3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8016f5a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8016f5e:	1e7b      	subs	r3, r7, #1
 8016f60:	9302      	str	r3, [sp, #8]
 8016f62:	9704      	str	r7, [sp, #16]
 8016f64:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8016f68:	2400      	movs	r4, #0
 8016f6a:	4655      	mov	r5, sl
 8016f6c:	4626      	mov	r6, r4
 8016f6e:	9705      	str	r7, [sp, #20]
 8016f70:	9b05      	ldr	r3, [sp, #20]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d078      	beq.n	8017068 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8016f76:	9903      	ldr	r1, [sp, #12]
 8016f78:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016f7c:	f7ff fe6a 	bl	8016c54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016f80:	b360      	cbz	r0, 8016fdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016f82:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8016f86:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8016f8a:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8016f8e:	45e6      	cmp	lr, ip
 8016f90:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8016f94:	db35      	blt.n	8017002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016f96:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016f9a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8016f9e:	4472      	add	r2, lr
 8016fa0:	4463      	add	r3, ip
 8016fa2:	b212      	sxth	r2, r2
 8016fa4:	b21b      	sxth	r3, r3
 8016fa6:	429a      	cmp	r2, r3
 8016fa8:	dc2b      	bgt.n	8017002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016faa:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016fae:	fa1f f288 	uxth.w	r2, r8
 8016fb2:	4413      	add	r3, r2
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	45c1      	cmp	r9, r8
 8016fb8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016fbc:	fa0f fe83 	sxth.w	lr, r3
 8016fc0:	fa1f fc89 	uxth.w	ip, r9
 8016fc4:	db0f      	blt.n	8016fe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8016fc6:	eba3 030c 	sub.w	r3, r3, ip
 8016fca:	1ac9      	subs	r1, r1, r3
 8016fcc:	b209      	sxth	r1, r1
 8016fce:	2900      	cmp	r1, #0
 8016fd0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016fd4:	dd12      	ble.n	8016ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016fd6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8016fda:	4604      	mov	r4, r0
 8016fdc:	9b05      	ldr	r3, [sp, #20]
 8016fde:	3d08      	subs	r5, #8
 8016fe0:	3b01      	subs	r3, #1
 8016fe2:	9305      	str	r3, [sp, #20]
 8016fe4:	e7c4      	b.n	8016f70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8016fe6:	4461      	add	r1, ip
 8016fe8:	b209      	sxth	r1, r1
 8016fea:	4571      	cmp	r1, lr
 8016fec:	dc3a      	bgt.n	8017064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016fee:	eba2 020c 	sub.w	r2, r2, ip
 8016ff2:	b212      	sxth	r2, r2
 8016ff4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8016ff8:	2a00      	cmp	r2, #0
 8016ffa:	dcee      	bgt.n	8016fda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016ffc:	b00f      	add	sp, #60	; 0x3c
 8016ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017002:	45c1      	cmp	r9, r8
 8017004:	db2e      	blt.n	8017064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017006:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801700a:	4499      	add	r9, r3
 801700c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017010:	fa0f f989 	sxth.w	r9, r9
 8017014:	4498      	add	r8, r3
 8017016:	fa0f f888 	sxth.w	r8, r8
 801701a:	45c1      	cmp	r9, r8
 801701c:	dc22      	bgt.n	8017064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801701e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017022:	fa1f f28c 	uxth.w	r2, ip
 8017026:	4413      	add	r3, r2
 8017028:	b29b      	uxth	r3, r3
 801702a:	45e6      	cmp	lr, ip
 801702c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017030:	fa1f f88e 	uxth.w	r8, lr
 8017034:	fa0f f983 	sxth.w	r9, r3
 8017038:	db0a      	blt.n	8017050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801703a:	eba3 0308 	sub.w	r3, r3, r8
 801703e:	1ac9      	subs	r1, r1, r3
 8017040:	b209      	sxth	r1, r1
 8017042:	2900      	cmp	r1, #0
 8017044:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017048:	ddd8      	ble.n	8016ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801704a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801704e:	e7c4      	b.n	8016fda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017050:	4441      	add	r1, r8
 8017052:	b209      	sxth	r1, r1
 8017054:	4549      	cmp	r1, r9
 8017056:	dc05      	bgt.n	8017064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017058:	eba2 0208 	sub.w	r2, r2, r8
 801705c:	b212      	sxth	r2, r2
 801705e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017062:	e7c9      	b.n	8016ff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8017064:	4606      	mov	r6, r0
 8017066:	e7b9      	b.n	8016fdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017068:	2c00      	cmp	r4, #0
 801706a:	f47f af7d 	bne.w	8016f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801706e:	2e00      	cmp	r6, #0
 8017070:	f000 81e2 	beq.w	8017438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017074:	4655      	mov	r5, sl
 8017076:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801707a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801707e:	b2b9      	uxth	r1, r7
 8017080:	9105      	str	r1, [sp, #20]
 8017082:	9805      	ldr	r0, [sp, #20]
 8017084:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017088:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801708c:	4401      	add	r1, r0
 801708e:	b2b3      	uxth	r3, r6
 8017090:	b289      	uxth	r1, r1
 8017092:	441a      	add	r2, r3
 8017094:	9106      	str	r1, [sp, #24]
 8017096:	b292      	uxth	r2, r2
 8017098:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801709c:	fa0f f882 	sxth.w	r8, r2
 80170a0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80170a4:	9b04      	ldr	r3, [sp, #16]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d058      	beq.n	801715c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 80170aa:	9903      	ldr	r1, [sp, #12]
 80170ac:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80170b0:	f7ff fdd0 	bl	8016c54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80170b4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80170b8:	b1d8      	cbz	r0, 80170f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80170ba:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80170be:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80170c2:	4576      	cmp	r6, lr
 80170c4:	dc26      	bgt.n	8017114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80170c6:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80170ca:	44f4      	add	ip, lr
 80170cc:	fa0f fc8c 	sxth.w	ip, ip
 80170d0:	45e0      	cmp	r8, ip
 80170d2:	db1f      	blt.n	8017114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80170d4:	428f      	cmp	r7, r1
 80170d6:	fa1f fc81 	uxth.w	ip, r1
 80170da:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80170de:	dc0f      	bgt.n	8017100 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 80170e0:	9806      	ldr	r0, [sp, #24]
 80170e2:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80170e6:	eba0 0c0c 	sub.w	ip, r0, ip
 80170ea:	eba1 010c 	sub.w	r1, r1, ip
 80170ee:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80170f2:	4620      	mov	r0, r4
 80170f4:	9904      	ldr	r1, [sp, #16]
 80170f6:	3d08      	subs	r5, #8
 80170f8:	3901      	subs	r1, #1
 80170fa:	9104      	str	r1, [sp, #16]
 80170fc:	4604      	mov	r4, r0
 80170fe:	e7cf      	b.n	80170a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8017100:	4461      	add	r1, ip
 8017102:	b209      	sxth	r1, r1
 8017104:	4549      	cmp	r1, r9
 8017106:	dcf5      	bgt.n	80170f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017108:	9905      	ldr	r1, [sp, #20]
 801710a:	eba1 0c0c 	sub.w	ip, r1, ip
 801710e:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8017112:	e7ee      	b.n	80170f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017114:	428f      	cmp	r7, r1
 8017116:	dced      	bgt.n	80170f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017118:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801711c:	4461      	add	r1, ip
 801711e:	b209      	sxth	r1, r1
 8017120:	4589      	cmp	r9, r1
 8017122:	dbe7      	blt.n	80170f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017124:	4576      	cmp	r6, lr
 8017126:	fa1f fc8e 	uxth.w	ip, lr
 801712a:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801712e:	dc08      	bgt.n	8017142 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8017130:	eba2 0c0c 	sub.w	ip, r2, ip
 8017134:	eba1 010c 	sub.w	r1, r1, ip
 8017138:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801713c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8017140:	e7d7      	b.n	80170f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017142:	4461      	add	r1, ip
 8017144:	b209      	sxth	r1, r1
 8017146:	4588      	cmp	r8, r1
 8017148:	dbd4      	blt.n	80170f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801714a:	eba3 0c0c 	sub.w	ip, r3, ip
 801714e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8017152:	e7ce      	b.n	80170f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017154:	2004e10e 	.word	0x2004e10e
 8017158:	2004e10c 	.word	0x2004e10c
 801715c:	2c00      	cmp	r4, #0
 801715e:	f000 816b 	beq.w	8017438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017162:	9b02      	ldr	r3, [sp, #8]
 8017164:	3301      	adds	r3, #1
 8017166:	f000 8167 	beq.w	8017438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801716a:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801716e:	4621      	mov	r1, r4
 8017170:	9803      	ldr	r0, [sp, #12]
 8017172:	f7ff fde1 	bl	8016d38 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017176:	b120      	cbz	r0, 8017182 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8017178:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801717c:	9801      	ldr	r0, [sp, #4]
 801717e:	f7ff fea9 	bl	8016ed4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017182:	9903      	ldr	r1, [sp, #12]
 8017184:	4620      	mov	r0, r4
 8017186:	f7ff fd65 	bl	8016c54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801718a:	2800      	cmp	r0, #0
 801718c:	f000 809b 	beq.w	80172c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8017190:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8017194:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8017198:	b281      	uxth	r1, r0
 801719a:	eb01 0c03 	add.w	ip, r1, r3
 801719e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80171a2:	fa1f f98c 	uxth.w	r9, ip
 80171a6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80171aa:	9309      	str	r3, [sp, #36]	; 0x24
 80171ac:	b2ab      	uxth	r3, r5
 80171ae:	eb03 040c 	add.w	r4, r3, ip
 80171b2:	b2a4      	uxth	r4, r4
 80171b4:	9405      	str	r4, [sp, #20]
 80171b6:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80171ba:	4285      	cmp	r5, r0
 80171bc:	9404      	str	r4, [sp, #16]
 80171be:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80171c2:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 80171c6:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 80171ca:	f340 809a 	ble.w	8017302 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 80171ce:	1a5b      	subs	r3, r3, r1
 80171d0:	b29b      	uxth	r3, r3
 80171d2:	4596      	cmp	lr, r2
 80171d4:	fa0f f589 	sxth.w	r5, r9
 80171d8:	b21e      	sxth	r6, r3
 80171da:	dd2e      	ble.n	801723a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 80171dc:	9f02      	ldr	r7, [sp, #8]
 80171de:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80171e2:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80171e6:	9f04      	ldr	r7, [sp, #16]
 80171e8:	fa1f fe8e 	uxth.w	lr, lr
 80171ec:	1b7f      	subs	r7, r7, r5
 80171ee:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 80171f2:	b292      	uxth	r2, r2
 80171f4:	ebae 0102 	sub.w	r1, lr, r2
 80171f8:	4486      	add	lr, r0
 80171fa:	442a      	add	r2, r5
 80171fc:	b289      	uxth	r1, r1
 80171fe:	fa0f fe8e 	sxth.w	lr, lr
 8017202:	b212      	sxth	r2, r2
 8017204:	b20c      	sxth	r4, r1
 8017206:	ebae 0202 	sub.w	r2, lr, r2
 801720a:	4367      	muls	r7, r4
 801720c:	4372      	muls	r2, r6
 801720e:	4297      	cmp	r7, r2
 8017210:	db09      	blt.n	8017226 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8017212:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8017216:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801721a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801721e:	449c      	add	ip, r3
 8017220:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017224:	e680      	b.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017226:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801722a:	4401      	add	r1, r0
 801722c:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8017230:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017234:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017238:	e676      	b.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801723a:	9f04      	ldr	r7, [sp, #16]
 801723c:	42bd      	cmp	r5, r7
 801723e:	da27      	bge.n	8017290 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8017240:	9902      	ldr	r1, [sp, #8]
 8017242:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017246:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801724a:	eb04 010e 	add.w	r1, r4, lr
 801724e:	fa1f f881 	uxth.w	r8, r1
 8017252:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8017256:	fa0f f988 	sxth.w	r9, r8
 801725a:	4411      	add	r1, r2
 801725c:	eba1 0108 	sub.w	r1, r1, r8
 8017260:	b289      	uxth	r1, r1
 8017262:	fa0f f881 	sxth.w	r8, r1
 8017266:	eba2 020e 	sub.w	r2, r2, lr
 801726a:	1b7f      	subs	r7, r7, r5
 801726c:	4372      	muls	r2, r6
 801726e:	fb08 f707 	mul.w	r7, r8, r7
 8017272:	42ba      	cmp	r2, r7
 8017274:	dc06      	bgt.n	8017284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017276:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801727a:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801727e:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8017282:	e7ca      	b.n	801721a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017284:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8017288:	4421      	add	r1, r4
 801728a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801728e:	e64b      	b.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017290:	9d05      	ldr	r5, [sp, #20]
 8017292:	2c06      	cmp	r4, #6
 8017294:	eba9 0505 	sub.w	r5, r9, r5
 8017298:	b2ad      	uxth	r5, r5
 801729a:	fa0f fe85 	sxth.w	lr, r5
 801729e:	d818      	bhi.n	80172d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 80172a0:	9b04      	ldr	r3, [sp, #16]
 80172a2:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 80172a6:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80172aa:	1c63      	adds	r3, r4, #1
 80172ac:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 80172b0:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80172b4:	9b01      	ldr	r3, [sp, #4]
 80172b6:	9d01      	ldr	r5, [sp, #4]
 80172b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80172bc:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 80172c0:	805a      	strh	r2, [r3, #2]
 80172c2:	809e      	strh	r6, [r3, #4]
 80172c4:	80d9      	strh	r1, [r3, #6]
 80172c6:	9b02      	ldr	r3, [sp, #8]
 80172c8:	f1aa 0a08 	sub.w	sl, sl, #8
 80172cc:	3b01      	subs	r3, #1
 80172ce:	9302      	str	r3, [sp, #8]
 80172d0:	e747      	b.n	8017162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 80172d2:	9a02      	ldr	r2, [sp, #8]
 80172d4:	45b6      	cmp	lr, r6
 80172d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80172da:	db0d      	blt.n	80172f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 80172dc:	449c      	add	ip, r3
 80172de:	fa1f fc8c 	uxth.w	ip, ip
 80172e2:	445a      	add	r2, fp
 80172e4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80172e8:	448c      	add	ip, r1
 80172ea:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 80172ee:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 80172f2:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 80172f6:	e617      	b.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80172f8:	445a      	add	r2, fp
 80172fa:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 80172fe:	44ac      	add	ip, r5
 8017300:	e78e      	b.n	8017220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017302:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8017306:	fa1f f18e 	uxth.w	r1, lr
 801730a:	eb01 0806 	add.w	r8, r1, r6
 801730e:	b293      	uxth	r3, r2
 8017310:	fa1f f888 	uxth.w	r8, r8
 8017314:	9306      	str	r3, [sp, #24]
 8017316:	fa0f f388 	sxth.w	r3, r8
 801731a:	9307      	str	r3, [sp, #28]
 801731c:	9f06      	ldr	r7, [sp, #24]
 801731e:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8017322:	4596      	cmp	lr, r2
 8017324:	443b      	add	r3, r7
 8017326:	b29b      	uxth	r3, r3
 8017328:	9308      	str	r3, [sp, #32]
 801732a:	da25      	bge.n	8017378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801732c:	9905      	ldr	r1, [sp, #20]
 801732e:	eba3 0308 	sub.w	r3, r3, r8
 8017332:	eba9 0401 	sub.w	r4, r9, r1
 8017336:	b2a4      	uxth	r4, r4
 8017338:	b29b      	uxth	r3, r3
 801733a:	fa0f f984 	sxth.w	r9, r4
 801733e:	b219      	sxth	r1, r3
 8017340:	eba2 020e 	sub.w	r2, r2, lr
 8017344:	1b40      	subs	r0, r0, r5
 8017346:	fb09 f202 	mul.w	r2, r9, r2
 801734a:	4348      	muls	r0, r1
 801734c:	4282      	cmp	r2, r0
 801734e:	9a02      	ldr	r2, [sp, #8]
 8017350:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017354:	445a      	add	r2, fp
 8017356:	dc06      	bgt.n	8017366 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8017358:	9b07      	ldr	r3, [sp, #28]
 801735a:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801735e:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8017362:	44a4      	add	ip, r4
 8017364:	e75c      	b.n	8017220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017366:	9904      	ldr	r1, [sp, #16]
 8017368:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801736c:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8017370:	4433      	add	r3, r6
 8017372:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017376:	e5d7      	b.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017378:	9f06      	ldr	r7, [sp, #24]
 801737a:	9b04      	ldr	r3, [sp, #16]
 801737c:	1bc9      	subs	r1, r1, r7
 801737e:	fa0f f789 	sxth.w	r7, r9
 8017382:	b289      	uxth	r1, r1
 8017384:	429f      	cmp	r7, r3
 8017386:	fa0f fe81 	sxth.w	lr, r1
 801738a:	dd23      	ble.n	80173d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 801738c:	9a05      	ldr	r2, [sp, #20]
 801738e:	1b40      	subs	r0, r0, r5
 8017390:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017394:	eba9 0202 	sub.w	r2, r9, r2
 8017398:	9d07      	ldr	r5, [sp, #28]
 801739a:	b292      	uxth	r2, r2
 801739c:	eba5 0a03 	sub.w	sl, r5, r3
 80173a0:	b214      	sxth	r4, r2
 80173a2:	fb0e f000 	mul.w	r0, lr, r0
 80173a6:	fb04 fa0a 	mul.w	sl, r4, sl
 80173aa:	9b02      	ldr	r3, [sp, #8]
 80173ac:	4550      	cmp	r0, sl
 80173ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80173b2:	445b      	add	r3, fp
 80173b4:	db03      	blt.n	80173be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 80173b6:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 80173ba:	4494      	add	ip, r2
 80173bc:	e730      	b.n	8017220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80173be:	9a04      	ldr	r2, [sp, #16]
 80173c0:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 80173c4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80173c8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80173cc:	4431      	add	r1, r6
 80173ce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80173d2:	e75a      	b.n	801728a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 80173d4:	9b08      	ldr	r3, [sp, #32]
 80173d6:	2c06      	cmp	r4, #6
 80173d8:	eba3 0308 	sub.w	r3, r3, r8
 80173dc:	b29b      	uxth	r3, r3
 80173de:	b21d      	sxth	r5, r3
 80173e0:	d813      	bhi.n	801740a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 80173e2:	9b07      	ldr	r3, [sp, #28]
 80173e4:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 80173e8:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80173ec:	1c63      	adds	r3, r4, #1
 80173ee:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80173f2:	9b01      	ldr	r3, [sp, #4]
 80173f4:	9901      	ldr	r1, [sp, #4]
 80173f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80173fa:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 80173fe:	805a      	strh	r2, [r3, #2]
 8017400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017402:	f8a3 e006 	strh.w	lr, [r3, #6]
 8017406:	809a      	strh	r2, [r3, #4]
 8017408:	e75d      	b.n	80172c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801740a:	9802      	ldr	r0, [sp, #8]
 801740c:	4575      	cmp	r5, lr
 801740e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8017412:	db0d      	blt.n	8017430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8017414:	4431      	add	r1, r6
 8017416:	9b06      	ldr	r3, [sp, #24]
 8017418:	b289      	uxth	r1, r1
 801741a:	4458      	add	r0, fp
 801741c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017420:	4419      	add	r1, r3
 8017422:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017426:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801742a:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801742e:	e57b      	b.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017430:	4458      	add	r0, fp
 8017432:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8017436:	e79b      	b.n	8017370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8017438:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801743c:	2e07      	cmp	r6, #7
 801743e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017442:	d812      	bhi.n	801746a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56e>
 8017444:	1c75      	adds	r5, r6, #1
 8017446:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801744a:	9d01      	ldr	r5, [sp, #4]
 801744c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017450:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8017454:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8017458:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801745c:	442c      	add	r4, r5
 801745e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8017462:	8061      	strh	r1, [r4, #2]
 8017464:	80a2      	strh	r2, [r4, #4]
 8017466:	80e3      	strh	r3, [r4, #6]
 8017468:	e5c8      	b.n	8016ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801746a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801746e:	f04f 37ff 	mov.w	r7, #4294967295
 8017472:	2500      	movs	r5, #0
 8017474:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017478:	3e01      	subs	r6, #1
 801747a:	445c      	add	r4, fp
 801747c:	9305      	str	r3, [sp, #20]
 801747e:	1e72      	subs	r2, r6, #1
 8017480:	4691      	mov	r9, r2
 8017482:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8017486:	9302      	str	r3, [sp, #8]
 8017488:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801748c:	9304      	str	r3, [sp, #16]
 801748e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8017492:	f1b9 3fff 	cmp.w	r9, #4294967295
 8017496:	bf16      	itet	ne
 8017498:	9905      	ldrne	r1, [sp, #20]
 801749a:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801749e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80174a2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80174a6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80174aa:	6818      	ldr	r0, [r3, #0]
 80174ac:	fb18 f801 	smulbb	r8, r8, r1
 80174b0:	6859      	ldr	r1, [r3, #4]
 80174b2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80174b6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80174ba:	4671      	mov	r1, lr
 80174bc:	a80c      	add	r0, sp, #48	; 0x30
 80174be:	9207      	str	r2, [sp, #28]
 80174c0:	9306      	str	r3, [sp, #24]
 80174c2:	f7ff fc5f 	bl	8016d84 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80174c6:	f04f 0c08 	mov.w	ip, #8
 80174ca:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80174ce:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80174d2:	9b04      	ldr	r3, [sp, #16]
 80174d4:	9a02      	ldr	r2, [sp, #8]
 80174d6:	fb10 f001 	smulbb	r0, r0, r1
 80174da:	fb02 8803 	mla	r8, r2, r3, r8
 80174de:	eba0 0108 	sub.w	r1, r0, r8
 80174e2:	fb90 f0fc 	sdiv	r0, r0, ip
 80174e6:	4288      	cmp	r0, r1
 80174e8:	dc20      	bgt.n	801752c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 80174ea:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80174ee:	4551      	cmp	r1, sl
 80174f0:	da03      	bge.n	80174fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 80174f2:	b1d9      	cbz	r1, 801752c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 80174f4:	468a      	mov	sl, r1
 80174f6:	464f      	mov	r7, r9
 80174f8:	4635      	mov	r5, r6
 80174fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80174fe:	f119 0f02 	cmn.w	r9, #2
 8017502:	d1c6      	bne.n	8017492 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 8017504:	4616      	mov	r6, r2
 8017506:	3201      	adds	r2, #1
 8017508:	f1a4 0408 	sub.w	r4, r4, #8
 801750c:	d1b7      	bne.n	801747e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x582>
 801750e:	9b01      	ldr	r3, [sp, #4]
 8017510:	b2ac      	uxth	r4, r5
 8017512:	00ed      	lsls	r5, r5, #3
 8017514:	1958      	adds	r0, r3, r5
 8017516:	1c7b      	adds	r3, r7, #1
 8017518:	d10b      	bne.n	8017532 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 801751a:	4601      	mov	r1, r0
 801751c:	9803      	ldr	r0, [sp, #12]
 801751e:	f7ff fc31 	bl	8016d84 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017522:	4621      	mov	r1, r4
 8017524:	9801      	ldr	r0, [sp, #4]
 8017526:	f7ff fcd5 	bl	8016ed4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801752a:	e4fd      	b.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801752c:	464f      	mov	r7, r9
 801752e:	4635      	mov	r5, r6
 8017530:	e7ed      	b.n	801750e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 8017532:	9b01      	ldr	r3, [sp, #4]
 8017534:	00ff      	lsls	r7, r7, #3
 8017536:	19d9      	adds	r1, r3, r7
 8017538:	f7ff fc24 	bl	8016d84 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801753c:	9b03      	ldr	r3, [sp, #12]
 801753e:	445f      	add	r7, fp
 8017540:	cb03      	ldmia	r3!, {r0, r1}
 8017542:	445d      	add	r5, fp
 8017544:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8017548:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801754c:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8017550:	9b03      	ldr	r3, [sp, #12]
 8017552:	6869      	ldr	r1, [r5, #4]
 8017554:	c303      	stmia	r3!, {r0, r1}
 8017556:	e7e4      	b.n	8017522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

08017558 <_ZN8touchgfx11Application10invalidateEv>:
 8017558:	2100      	movs	r1, #0
 801755a:	4b09      	ldr	r3, [pc, #36]	; (8017580 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801755c:	b082      	sub	sp, #8
 801755e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017562:	4b08      	ldr	r3, [pc, #32]	; (8017584 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8017564:	9100      	str	r1, [sp, #0]
 8017566:	f9b3 3000 	ldrsh.w	r3, [r3]
 801756a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801756e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017572:	ab02      	add	r3, sp, #8
 8017574:	e913 0006 	ldmdb	r3, {r1, r2}
 8017578:	b002      	add	sp, #8
 801757a:	f7ff bcbf 	b.w	8016efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801757e:	bf00      	nop
 8017580:	2004e10c 	.word	0x2004e10c
 8017584:	2004e10e 	.word	0x2004e10e

08017588 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8017588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801758c:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8017590:	b09b      	sub	sp, #108	; 0x6c
 8017592:	4604      	mov	r4, r0
 8017594:	4630      	mov	r0, r6
 8017596:	f7fb fd38 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 801759a:	4605      	mov	r5, r0
 801759c:	b940      	cbnz	r0, 80175b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801759e:	e896 0006 	ldmia.w	r6, {r1, r2}
 80175a2:	4620      	mov	r0, r4
 80175a4:	f7ff fcaa 	bl	8016efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80175a8:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80175ac:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80175b0:	4bc9      	ldr	r3, [pc, #804]	; (80178d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d03e      	beq.n	8017636 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80175b8:	4dc8      	ldr	r5, [pc, #800]	; (80178dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80175ba:	4628      	mov	r0, r5
 80175bc:	f7fb fd25 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 80175c0:	4606      	mov	r6, r0
 80175c2:	2800      	cmp	r0, #0
 80175c4:	d137      	bne.n	8017636 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80175c6:	4628      	mov	r0, r5
 80175c8:	f7ff fa0e 	bl	80169e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80175cc:	6829      	ldr	r1, [r5, #0]
 80175ce:	686a      	ldr	r2, [r5, #4]
 80175d0:	4620      	mov	r0, r4
 80175d2:	f7ff fc93 	bl	8016efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80175d6:	802e      	strh	r6, [r5, #0]
 80175d8:	806e      	strh	r6, [r5, #2]
 80175da:	80ae      	strh	r6, [r5, #4]
 80175dc:	80ee      	strh	r6, [r5, #6]
 80175de:	ae09      	add	r6, sp, #36	; 0x24
 80175e0:	4630      	mov	r0, r6
 80175e2:	f7ff fc26 	bl	8016e32 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80175e6:	4abe      	ldr	r2, [pc, #760]	; (80178e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80175e8:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80175ec:	8815      	ldrh	r5, [r2, #0]
 80175ee:	9202      	str	r2, [sp, #8]
 80175f0:	462b      	mov	r3, r5
 80175f2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80175f6:	429f      	cmp	r7, r3
 80175f8:	d924      	bls.n	8017644 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 80175fa:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80175fe:	2907      	cmp	r1, #7
 8017600:	d816      	bhi.n	8017630 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8017602:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8017606:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801760a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801760e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8017612:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8017616:	1c4a      	adds	r2, r1, #1
 8017618:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801761c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8017620:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8017624:	f8a2 9002 	strh.w	r9, [r2, #2]
 8017628:	f8a2 e004 	strh.w	lr, [r2, #4]
 801762c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017630:	3301      	adds	r3, #1
 8017632:	b29b      	uxth	r3, r3
 8017634:	e7df      	b.n	80175f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8017636:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801763a:	2b00      	cmp	r3, #0
 801763c:	d1cf      	bne.n	80175de <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801763e:	b01b      	add	sp, #108	; 0x6c
 8017640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017644:	462f      	mov	r7, r5
 8017646:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801764a:	42bb      	cmp	r3, r7
 801764c:	d90b      	bls.n	8017666 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801764e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8017652:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8017656:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801765a:	4620      	mov	r0, r4
 801765c:	3701      	adds	r7, #1
 801765e:	f7ff fc4d 	bl	8016efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017662:	b2bf      	uxth	r7, r7
 8017664:	e7ef      	b.n	8017646 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8017666:	4a9f      	ldr	r2, [pc, #636]	; (80178e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8017668:	6813      	ldr	r3, [r2, #0]
 801766a:	4690      	mov	r8, r2
 801766c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017670:	2b01      	cmp	r3, #1
 8017672:	f040 80e6 	bne.w	8017842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 8017676:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801767a:	4629      	mov	r1, r5
 801767c:	2500      	movs	r5, #0
 801767e:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8017682:	33aa      	adds	r3, #170	; 0xaa
 8017684:	428f      	cmp	r7, r1
 8017686:	f103 0308 	add.w	r3, r3, #8
 801768a:	dd0a      	ble.n	80176a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801768c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8017690:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8017694:	3101      	adds	r1, #1
 8017696:	4402      	add	r2, r0
 8017698:	b212      	sxth	r2, r2
 801769a:	4295      	cmp	r5, r2
 801769c:	bfb8      	it	lt
 801769e:	4615      	movlt	r5, r2
 80176a0:	e7f0      	b.n	8017684 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80176a2:	4b91      	ldr	r3, [pc, #580]	; (80178e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80176a4:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80178e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 80176a8:	881b      	ldrh	r3, [r3, #0]
 80176aa:	46d8      	mov	r8, fp
 80176ac:	2b0f      	cmp	r3, #15
 80176ae:	bf88      	it	hi
 80176b0:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80176b4:	f04f 0300 	mov.w	r3, #0
 80176b8:	bf98      	it	ls
 80176ba:	f04f 0a01 	movls.w	sl, #1
 80176be:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80176c2:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80176c6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80176ca:	4438      	add	r0, r7
 80176cc:	b207      	sxth	r7, r0
 80176ce:	f8db 0000 	ldr.w	r0, [fp]
 80176d2:	42bd      	cmp	r5, r7
 80176d4:	6803      	ldr	r3, [r0, #0]
 80176d6:	f340 8084 	ble.w	80177e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80176da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80176de:	4798      	blx	r3
 80176e0:	eb07 030a 	add.w	r3, r7, sl
 80176e4:	4298      	cmp	r0, r3
 80176e6:	da07      	bge.n	80176f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 80176e8:	4285      	cmp	r5, r0
 80176ea:	dd05      	ble.n	80176f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 80176ec:	4287      	cmp	r7, r0
 80176ee:	dd6d      	ble.n	80177cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80176f0:	2f00      	cmp	r7, #0
 80176f2:	dd6b      	ble.n	80177cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80176f4:	4628      	mov	r0, r5
 80176f6:	e004      	b.n	8017702 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 80176f8:	4287      	cmp	r7, r0
 80176fa:	dcfb      	bgt.n	80176f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80176fc:	42a8      	cmp	r0, r5
 80176fe:	bfa8      	it	ge
 8017700:	4628      	movge	r0, r5
 8017702:	2200      	movs	r2, #0
 8017704:	4b79      	ldr	r3, [pc, #484]	; (80178ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8017706:	1bc0      	subs	r0, r0, r7
 8017708:	f9b3 3000 	ldrsh.w	r3, [r3]
 801770c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017710:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017714:	9b02      	ldr	r3, [sp, #8]
 8017716:	f8ad 2014 	strh.w	r2, [sp, #20]
 801771a:	881f      	ldrh	r7, [r3, #0]
 801771c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017720:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017724:	42bb      	cmp	r3, r7
 8017726:	d9cc      	bls.n	80176c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8017728:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801772c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017730:	ab07      	add	r3, sp, #28
 8017732:	6851      	ldr	r1, [r2, #4]
 8017734:	c303      	stmia	r3!, {r0, r1}
 8017736:	a905      	add	r1, sp, #20
 8017738:	a807      	add	r0, sp, #28
 801773a:	f7ff fa8b 	bl	8016c54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801773e:	2800      	cmp	r0, #0
 8017740:	d04c      	beq.n	80177dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 8017742:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8017746:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801774a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801774e:	4686      	mov	lr, r0
 8017750:	4290      	cmp	r0, r2
 8017752:	4448      	add	r0, r9
 8017754:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8017758:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801775c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017760:	bfb8      	it	lt
 8017762:	4696      	movlt	lr, r2
 8017764:	444a      	add	r2, r9
 8017766:	4299      	cmp	r1, r3
 8017768:	b280      	uxth	r0, r0
 801776a:	b292      	uxth	r2, r2
 801776c:	468c      	mov	ip, r1
 801776e:	9303      	str	r3, [sp, #12]
 8017770:	bfb8      	it	lt
 8017772:	469c      	movlt	ip, r3
 8017774:	fa0f f982 	sxth.w	r9, r2
 8017778:	b203      	sxth	r3, r0
 801777a:	454b      	cmp	r3, r9
 801777c:	bfb8      	it	lt
 801777e:	4602      	movlt	r2, r0
 8017780:	eba2 020e 	sub.w	r2, r2, lr
 8017784:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017788:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801778c:	9b03      	ldr	r3, [sp, #12]
 801778e:	4411      	add	r1, r2
 8017790:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017794:	b289      	uxth	r1, r1
 8017796:	4413      	add	r3, r2
 8017798:	b29b      	uxth	r3, r3
 801779a:	b208      	sxth	r0, r1
 801779c:	b21a      	sxth	r2, r3
 801779e:	4290      	cmp	r0, r2
 80177a0:	bfb8      	it	lt
 80177a2:	460b      	movlt	r3, r1
 80177a4:	eba3 030c 	sub.w	r3, r3, ip
 80177a8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80177ac:	f8ad e01c 	strh.w	lr, [sp, #28]
 80177b0:	f8ad c01e 	strh.w	ip, [sp, #30]
 80177b4:	a807      	add	r0, sp, #28
 80177b6:	f7fb fc28 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 80177ba:	b920      	cbnz	r0, 80177c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80177bc:	6823      	ldr	r3, [r4, #0]
 80177be:	a907      	add	r1, sp, #28
 80177c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177c2:	4620      	mov	r0, r4
 80177c4:	4798      	blx	r3
 80177c6:	3701      	adds	r7, #1
 80177c8:	b2bf      	uxth	r7, r7
 80177ca:	e7a9      	b.n	8017720 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 80177cc:	f8d8 0000 	ldr.w	r0, [r8]
 80177d0:	2101      	movs	r1, #1
 80177d2:	6803      	ldr	r3, [r0, #0]
 80177d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80177d8:	4798      	blx	r3
 80177da:	e772      	b.n	80176c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80177dc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80177e0:	e7e8      	b.n	80177b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 80177e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177e4:	4798      	blx	r3
 80177e6:	4b42      	ldr	r3, [pc, #264]	; (80178f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 80177e8:	781b      	ldrb	r3, [r3, #0]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	f43f af27 	beq.w	801763e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80177f0:	2300      	movs	r3, #0
 80177f2:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 80177f6:	9b02      	ldr	r3, [sp, #8]
 80177f8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80177fc:	881b      	ldrh	r3, [r3, #0]
 80177fe:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8017802:	429d      	cmp	r5, r3
 8017804:	f67f af1b 	bls.w	801763e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8017808:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801780c:	2907      	cmp	r1, #7
 801780e:	d815      	bhi.n	801783c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8017810:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8017814:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8017818:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801781c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8017820:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8017824:	1c4a      	adds	r2, r1, #1
 8017826:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801782a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801782e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8017832:	f8a2 e002 	strh.w	lr, [r2, #2]
 8017836:	f8a2 c004 	strh.w	ip, [r2, #4]
 801783a:	80d7      	strh	r7, [r2, #6]
 801783c:	3301      	adds	r3, #1
 801783e:	b29b      	uxth	r3, r3
 8017840:	e7df      	b.n	8017802 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 8017842:	2b02      	cmp	r3, #2
 8017844:	f040 8136 	bne.w	8017ab4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8017848:	4b2a      	ldr	r3, [pc, #168]	; (80178f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 801784a:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	2b01      	cmp	r3, #1
 8017852:	f000 809c 	beq.w	801798e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8017856:	9b02      	ldr	r3, [sp, #8]
 8017858:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801785c:	f8b3 b000 	ldrh.w	fp, [r3]
 8017860:	f10b 0b01 	add.w	fp, fp, #1
 8017864:	fa1f fb8b 	uxth.w	fp, fp
 8017868:	2a00      	cmp	r2, #0
 801786a:	d0bc      	beq.n	80177e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801786c:	4659      	mov	r1, fp
 801786e:	f04f 0800 	mov.w	r8, #0
 8017872:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8017876:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801787a:	441d      	add	r5, r3
 801787c:	b22d      	sxth	r5, r5
 801787e:	b28b      	uxth	r3, r1
 8017880:	429a      	cmp	r2, r3
 8017882:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8017886:	f240 80c1 	bls.w	8017a0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 801788a:	4427      	add	r7, r4
 801788c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8017890:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8017894:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8017898:	4608      	mov	r0, r1
 801789a:	4563      	cmp	r3, ip
 801789c:	f340 80a3 	ble.w	80179e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80178a0:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 80178a4:	4465      	add	r5, ip
 80178a6:	b22d      	sxth	r5, r5
 80178a8:	429d      	cmp	r5, r3
 80178aa:	bfa8      	it	ge
 80178ac:	461d      	movge	r5, r3
 80178ae:	3101      	adds	r1, #1
 80178b0:	4680      	mov	r8, r0
 80178b2:	e7e4      	b.n	801787e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80178b4:	d10b      	bne.n	80178ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 80178b6:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80178ba:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80178be:	458c      	cmp	ip, r1
 80178c0:	bfb4      	ite	lt
 80178c2:	469c      	movlt	ip, r3
 80178c4:	46bc      	movge	ip, r7
 80178c6:	4572      	cmp	r2, lr
 80178c8:	bfb8      	it	lt
 80178ca:	4672      	movlt	r2, lr
 80178cc:	e088      	b.n	80179e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80178ce:	428a      	cmp	r2, r1
 80178d0:	bfb8      	it	lt
 80178d2:	460a      	movlt	r2, r1
 80178d4:	46bc      	mov	ip, r7
 80178d6:	e083      	b.n	80179e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80178d8:	2004e158 	.word	0x2004e158
 80178dc:	2004e164 	.word	0x2004e164
 80178e0:	20025820 	.word	0x20025820
 80178e4:	2004e118 	.word	0x2004e118
 80178e8:	2004e10e 	.word	0x2004e10e
 80178ec:	2004e10c 	.word	0x2004e10c
 80178f0:	2004e116 	.word	0x2004e116
 80178f4:	2004e110 	.word	0x2004e110
 80178f8:	1961      	adds	r1, r4, r5
 80178fa:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80178fe:	ab07      	add	r3, sp, #28
 8017900:	6849      	ldr	r1, [r1, #4]
 8017902:	c303      	stmia	r3!, {r0, r1}
 8017904:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017908:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801790c:	2b13      	cmp	r3, #19
 801790e:	bfd8      	it	le
 8017910:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017914:	440b      	add	r3, r1
 8017916:	1a9b      	subs	r3, r3, r2
 8017918:	a807      	add	r0, sp, #28
 801791a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801791e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017922:	f7ff f87b 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017926:	a807      	add	r0, sp, #28
 8017928:	f7fb fb6f 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 801792c:	bb78      	cbnz	r0, 801798e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801792e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8017932:	f8d8 0000 	ldr.w	r0, [r8]
 8017936:	f1bc 0f14 	cmp.w	ip, #20
 801793a:	bfa8      	it	ge
 801793c:	f04f 0c14 	movge.w	ip, #20
 8017940:	f8d0 e000 	ldr.w	lr, [r0]
 8017944:	fa1f fc8c 	uxth.w	ip, ip
 8017948:	f8cd c000 	str.w	ip, [sp]
 801794c:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8017950:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017954:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017958:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801795c:	47d0      	blx	sl
 801795e:	4682      	mov	sl, r0
 8017960:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017964:	a807      	add	r0, sp, #28
 8017966:	f7ff f83f 	bl	80169e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801796a:	6823      	ldr	r3, [r4, #0]
 801796c:	4620      	mov	r0, r4
 801796e:	4425      	add	r5, r4
 8017970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017972:	a907      	add	r1, sp, #28
 8017974:	4798      	blx	r3
 8017976:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801797a:	eba0 000a 	sub.w	r0, r0, sl
 801797e:	b200      	sxth	r0, r0
 8017980:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8017984:	b918      	cbnz	r0, 801798e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8017986:	b2b9      	uxth	r1, r7
 8017988:	4648      	mov	r0, r9
 801798a:	f7ff faa3 	bl	8016ed4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801798e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8017992:	f1bb 0f00 	cmp.w	fp, #0
 8017996:	f43f af26 	beq.w	80177e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801799a:	2700      	movs	r7, #0
 801799c:	9b02      	ldr	r3, [sp, #8]
 801799e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80179a2:	881b      	ldrh	r3, [r3, #0]
 80179a4:	3301      	adds	r3, #1
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	b299      	uxth	r1, r3
 80179aa:	458b      	cmp	fp, r1
 80179ac:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 80179b0:	d9a2      	bls.n	80178f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 80179b2:	4425      	add	r5, r4
 80179b4:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80179b8:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80179bc:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80179c0:	4408      	add	r0, r1
 80179c2:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80179c6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80179ca:	b200      	sxth	r0, r0
 80179cc:	4471      	add	r1, lr
 80179ce:	b209      	sxth	r1, r1
 80179d0:	4288      	cmp	r0, r1
 80179d2:	469c      	mov	ip, r3
 80179d4:	f6bf af6e 	bge.w	80178b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 80179d8:	4586      	cmp	lr, r0
 80179da:	4672      	mov	r2, lr
 80179dc:	bfb8      	it	lt
 80179de:	4602      	movlt	r2, r0
 80179e0:	3301      	adds	r3, #1
 80179e2:	4667      	mov	r7, ip
 80179e4:	e7e0      	b.n	80179a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 80179e6:	d10c      	bne.n	8017a02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 80179e8:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 80179ec:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 80179f0:	4287      	cmp	r7, r0
 80179f2:	bfb4      	ite	lt
 80179f4:	4608      	movlt	r0, r1
 80179f6:	4640      	movge	r0, r8
 80179f8:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 80179fc:	443b      	add	r3, r7
 80179fe:	b21b      	sxth	r3, r3
 8017a00:	e752      	b.n	80178a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8017a02:	4565      	cmp	r5, ip
 8017a04:	bfa8      	it	ge
 8017a06:	4665      	movge	r5, ip
 8017a08:	4640      	mov	r0, r8
 8017a0a:	e750      	b.n	80178ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8017a0c:	eb09 0007 	add.w	r0, r9, r7
 8017a10:	4427      	add	r7, r4
 8017a12:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8017a16:	9203      	str	r2, [sp, #12]
 8017a18:	f1ba 0f13 	cmp.w	sl, #19
 8017a1c:	bfde      	ittt	le
 8017a1e:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8017a22:	4455      	addle	r5, sl
 8017a24:	b22d      	sxthle	r5, r5
 8017a26:	f7fb faf0 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a2a:	9a03      	ldr	r2, [sp, #12]
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	f47f af1b 	bne.w	8017868 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 8017a32:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8017a36:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017a3a:	1aad      	subs	r5, r5, r2
 8017a3c:	2d14      	cmp	r5, #20
 8017a3e:	bfa8      	it	ge
 8017a40:	2514      	movge	r5, #20
 8017a42:	4828      	ldr	r0, [pc, #160]	; (8017ae4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8017a44:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8017a48:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8017a4c:	6800      	ldr	r0, [r0, #0]
 8017a4e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017a52:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017a56:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017a5a:	f8d0 c000 	ldr.w	ip, [r0]
 8017a5e:	b2ad      	uxth	r5, r5
 8017a60:	fa1f fa8a 	uxth.w	sl, sl
 8017a64:	4555      	cmp	r5, sl
 8017a66:	bf94      	ite	ls
 8017a68:	9500      	strls	r5, [sp, #0]
 8017a6a:	f8cd a000 	strhi.w	sl, [sp]
 8017a6e:	b292      	uxth	r2, r2
 8017a70:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8017a74:	b29b      	uxth	r3, r3
 8017a76:	b289      	uxth	r1, r1
 8017a78:	47a8      	blx	r5
 8017a7a:	6823      	ldr	r3, [r4, #0]
 8017a7c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a82:	a907      	add	r1, sp, #28
 8017a84:	4620      	mov	r0, r4
 8017a86:	4798      	blx	r3
 8017a88:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017a8c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8017a90:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8017a94:	1a5b      	subs	r3, r3, r1
 8017a96:	440a      	add	r2, r1
 8017a98:	b21b      	sxth	r3, r3
 8017a9a:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8017a9e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	f47f aed7 	bne.w	8017856 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8017aa8:	fa1f f188 	uxth.w	r1, r8
 8017aac:	4648      	mov	r0, r9
 8017aae:	f7ff fa11 	bl	8016ed4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017ab2:	e6d0      	b.n	8017856 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8017ab4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017ab8:	42ab      	cmp	r3, r5
 8017aba:	f67f ae94 	bls.w	80177e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8017abe:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8017ac2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017ac6:	ab07      	add	r3, sp, #28
 8017ac8:	6851      	ldr	r1, [r2, #4]
 8017aca:	c303      	stmia	r3!, {r0, r1}
 8017acc:	a807      	add	r0, sp, #28
 8017ace:	f7fb fa9c 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ad2:	b920      	cbnz	r0, 8017ade <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8017ad4:	6823      	ldr	r3, [r4, #0]
 8017ad6:	a907      	add	r1, sp, #28
 8017ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ada:	4620      	mov	r0, r4
 8017adc:	4798      	blx	r3
 8017ade:	3501      	adds	r5, #1
 8017ae0:	b2ad      	uxth	r5, r5
 8017ae2:	e7e7      	b.n	8017ab4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8017ae4:	2004e118 	.word	0x2004e118

08017ae8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017ae8:	2200      	movs	r2, #0
 8017aea:	4b03      	ldr	r3, [pc, #12]	; (8017af8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017aec:	801a      	strh	r2, [r3, #0]
 8017aee:	805a      	strh	r2, [r3, #2]
 8017af0:	809a      	strh	r2, [r3, #4]
 8017af2:	80da      	strh	r2, [r3, #6]
 8017af4:	4770      	bx	lr
 8017af6:	bf00      	nop
 8017af8:	2004e164 	.word	0x2004e164

08017afc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b00:	4606      	mov	r6, r0
 8017b02:	b09d      	sub	sp, #116	; 0x74
 8017b04:	a803      	add	r0, sp, #12
 8017b06:	4614      	mov	r4, r2
 8017b08:	468a      	mov	sl, r1
 8017b0a:	461d      	mov	r5, r3
 8017b0c:	f000 fe1d 	bl	801874a <_ZN8touchgfx12TextProviderC1Ev>
 8017b10:	6833      	ldr	r3, [r6, #0]
 8017b12:	4630      	mov	r0, r6
 8017b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b16:	4798      	blx	r3
 8017b18:	6833      	ldr	r3, [r6, #0]
 8017b1a:	4607      	mov	r7, r0
 8017b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b1e:	4630      	mov	r0, r6
 8017b20:	4798      	blx	r3
 8017b22:	462a      	mov	r2, r5
 8017b24:	2500      	movs	r5, #0
 8017b26:	9000      	str	r0, [sp, #0]
 8017b28:	4621      	mov	r1, r4
 8017b2a:	463b      	mov	r3, r7
 8017b2c:	a803      	add	r0, sp, #12
 8017b2e:	f000 fe5f 	bl	80187f0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017b32:	462c      	mov	r4, r5
 8017b34:	46a9      	mov	r9, r5
 8017b36:	46a8      	mov	r8, r5
 8017b38:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	9302      	str	r3, [sp, #8]
 8017b40:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017b44:	429c      	cmp	r4, r3
 8017b46:	d002      	beq.n	8017b4e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017b48:	455c      	cmp	r4, fp
 8017b4a:	bf18      	it	ne
 8017b4c:	4625      	movne	r5, r4
 8017b4e:	ab02      	add	r3, sp, #8
 8017b50:	4632      	mov	r2, r6
 8017b52:	4651      	mov	r1, sl
 8017b54:	a803      	add	r0, sp, #12
 8017b56:	f001 f93b 	bl	8018dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	b108      	cbz	r0, 8017b62 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017b5e:	280a      	cmp	r0, #10
 8017b60:	d10a      	bne.n	8017b78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017b62:	45c1      	cmp	r9, r8
 8017b64:	bf38      	it	cc
 8017b66:	46c1      	movcc	r9, r8
 8017b68:	f04f 0800 	mov.w	r8, #0
 8017b6c:	2c00      	cmp	r4, #0
 8017b6e:	d1e5      	bne.n	8017b3c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017b70:	4648      	mov	r0, r9
 8017b72:	b01d      	add	sp, #116	; 0x74
 8017b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b78:	9a02      	ldr	r2, [sp, #8]
 8017b7a:	2a00      	cmp	r2, #0
 8017b7c:	d0de      	beq.n	8017b3c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017b7e:	7b57      	ldrb	r7, [r2, #13]
 8017b80:	6833      	ldr	r3, [r6, #0]
 8017b82:	007f      	lsls	r7, r7, #1
 8017b84:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017b88:	7a97      	ldrb	r7, [r2, #10]
 8017b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b8c:	4307      	orrs	r7, r0
 8017b8e:	4629      	mov	r1, r5
 8017b90:	4630      	mov	r0, r6
 8017b92:	8894      	ldrh	r4, [r2, #4]
 8017b94:	4798      	blx	r3
 8017b96:	4438      	add	r0, r7
 8017b98:	4480      	add	r8, r0
 8017b9a:	fa1f f888 	uxth.w	r8, r8
 8017b9e:	e7e5      	b.n	8017b6c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017ba0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017ba0:	b508      	push	{r3, lr}
 8017ba2:	6803      	ldr	r3, [r0, #0]
 8017ba4:	68db      	ldr	r3, [r3, #12]
 8017ba6:	4798      	blx	r3
 8017ba8:	b128      	cbz	r0, 8017bb6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017baa:	7b43      	ldrb	r3, [r0, #13]
 8017bac:	7a80      	ldrb	r0, [r0, #10]
 8017bae:	005b      	lsls	r3, r3, #1
 8017bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017bb4:	4318      	orrs	r0, r3
 8017bb6:	bd08      	pop	{r3, pc}

08017bb8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017bb8:	b40e      	push	{r1, r2, r3}
 8017bba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bbc:	4605      	mov	r5, r0
 8017bbe:	b09e      	sub	sp, #120	; 0x78
 8017bc0:	ab23      	add	r3, sp, #140	; 0x8c
 8017bc2:	f853 4b04 	ldr.w	r4, [r3], #4
 8017bc6:	a805      	add	r0, sp, #20
 8017bc8:	9303      	str	r3, [sp, #12]
 8017bca:	f000 fdbe 	bl	801874a <_ZN8touchgfx12TextProviderC1Ev>
 8017bce:	682b      	ldr	r3, [r5, #0]
 8017bd0:	4628      	mov	r0, r5
 8017bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bd4:	4798      	blx	r3
 8017bd6:	682b      	ldr	r3, [r5, #0]
 8017bd8:	4606      	mov	r6, r0
 8017bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017bdc:	4628      	mov	r0, r5
 8017bde:	4798      	blx	r3
 8017be0:	4621      	mov	r1, r4
 8017be2:	2400      	movs	r4, #0
 8017be4:	4633      	mov	r3, r6
 8017be6:	9000      	str	r0, [sp, #0]
 8017be8:	9a03      	ldr	r2, [sp, #12]
 8017bea:	ae1e      	add	r6, sp, #120	; 0x78
 8017bec:	a805      	add	r0, sp, #20
 8017bee:	f000 fdff 	bl	80187f0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017bf2:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017bf6:	4633      	mov	r3, r6
 8017bf8:	462a      	mov	r2, r5
 8017bfa:	4621      	mov	r1, r4
 8017bfc:	a805      	add	r0, sp, #20
 8017bfe:	f001 f8e7 	bl	8018dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017c02:	b1f0      	cbz	r0, 8017c42 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8017c04:	280a      	cmp	r0, #10
 8017c06:	d018      	beq.n	8017c3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8017c08:	9f04      	ldr	r7, [sp, #16]
 8017c0a:	b1b7      	cbz	r7, 8017c3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8017c0c:	7b78      	ldrb	r0, [r7, #13]
 8017c0e:	7a3b      	ldrb	r3, [r7, #8]
 8017c10:	00c1      	lsls	r1, r0, #3
 8017c12:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017c16:	4319      	orrs	r1, r3
 8017c18:	0643      	lsls	r3, r0, #25
 8017c1a:	bf44      	itt	mi
 8017c1c:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017c20:	b219      	sxthmi	r1, r3
 8017c22:	0100      	lsls	r0, r0, #4
 8017c24:	79fb      	ldrb	r3, [r7, #7]
 8017c26:	88aa      	ldrh	r2, [r5, #4]
 8017c28:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017c2c:	4303      	orrs	r3, r0
 8017c2e:	4413      	add	r3, r2
 8017c30:	1a5b      	subs	r3, r3, r1
 8017c32:	b29b      	uxth	r3, r3
 8017c34:	42a3      	cmp	r3, r4
 8017c36:	bfc8      	it	gt
 8017c38:	b21c      	sxthgt	r4, r3
 8017c3a:	4633      	mov	r3, r6
 8017c3c:	462a      	mov	r2, r5
 8017c3e:	2100      	movs	r1, #0
 8017c40:	e7dc      	b.n	8017bfc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017c42:	b2a0      	uxth	r0, r4
 8017c44:	b01e      	add	sp, #120	; 0x78
 8017c46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017c4a:	b003      	add	sp, #12
 8017c4c:	4770      	bx	lr

08017c4e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017c4e:	b40e      	push	{r1, r2, r3}
 8017c50:	b570      	push	{r4, r5, r6, lr}
 8017c52:	4604      	mov	r4, r0
 8017c54:	b09d      	sub	sp, #116	; 0x74
 8017c56:	ab21      	add	r3, sp, #132	; 0x84
 8017c58:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c5c:	a803      	add	r0, sp, #12
 8017c5e:	9302      	str	r3, [sp, #8]
 8017c60:	f000 fd73 	bl	801874a <_ZN8touchgfx12TextProviderC1Ev>
 8017c64:	6823      	ldr	r3, [r4, #0]
 8017c66:	4620      	mov	r0, r4
 8017c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c6a:	4798      	blx	r3
 8017c6c:	6823      	ldr	r3, [r4, #0]
 8017c6e:	4606      	mov	r6, r0
 8017c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017c72:	4620      	mov	r0, r4
 8017c74:	4798      	blx	r3
 8017c76:	4633      	mov	r3, r6
 8017c78:	9000      	str	r0, [sp, #0]
 8017c7a:	9a02      	ldr	r2, [sp, #8]
 8017c7c:	4629      	mov	r1, r5
 8017c7e:	a803      	add	r0, sp, #12
 8017c80:	f000 fdb6 	bl	80187f0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017c84:	a803      	add	r0, sp, #12
 8017c86:	f001 f925 	bl	8018ed4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017c8a:	2401      	movs	r4, #1
 8017c8c:	b2a3      	uxth	r3, r4
 8017c8e:	b140      	cbz	r0, 8017ca2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8017c90:	280a      	cmp	r0, #10
 8017c92:	bf08      	it	eq
 8017c94:	3301      	addeq	r3, #1
 8017c96:	a803      	add	r0, sp, #12
 8017c98:	bf08      	it	eq
 8017c9a:	b21c      	sxtheq	r4, r3
 8017c9c:	f001 f91a 	bl	8018ed4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017ca0:	e7f4      	b.n	8017c8c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	b01d      	add	sp, #116	; 0x74
 8017ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017caa:	b003      	add	sp, #12
 8017cac:	4770      	bx	lr

08017cae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017cae:	b40e      	push	{r1, r2, r3}
 8017cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cb2:	4604      	mov	r4, r0
 8017cb4:	b09e      	sub	sp, #120	; 0x78
 8017cb6:	ab23      	add	r3, sp, #140	; 0x8c
 8017cb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8017cbc:	a805      	add	r0, sp, #20
 8017cbe:	9303      	str	r3, [sp, #12]
 8017cc0:	f000 fd43 	bl	801874a <_ZN8touchgfx12TextProviderC1Ev>
 8017cc4:	6823      	ldr	r3, [r4, #0]
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cca:	4798      	blx	r3
 8017ccc:	6823      	ldr	r3, [r4, #0]
 8017cce:	4606      	mov	r6, r0
 8017cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	4798      	blx	r3
 8017cd6:	4633      	mov	r3, r6
 8017cd8:	4629      	mov	r1, r5
 8017cda:	9000      	str	r0, [sp, #0]
 8017cdc:	9a03      	ldr	r2, [sp, #12]
 8017cde:	a805      	add	r0, sp, #20
 8017ce0:	f000 fd86 	bl	80187f0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017ce4:	2100      	movs	r1, #0
 8017ce6:	ad1e      	add	r5, sp, #120	; 0x78
 8017ce8:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017cec:	462b      	mov	r3, r5
 8017cee:	4622      	mov	r2, r4
 8017cf0:	a805      	add	r0, sp, #20
 8017cf2:	f001 f86d 	bl	8018dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017cf6:	26ff      	movs	r6, #255	; 0xff
 8017cf8:	b1d8      	cbz	r0, 8017d32 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8017cfa:	280a      	cmp	r0, #10
 8017cfc:	d012      	beq.n	8017d24 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017cfe:	9804      	ldr	r0, [sp, #16]
 8017d00:	b180      	cbz	r0, 8017d24 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017d02:	7b47      	ldrb	r7, [r0, #13]
 8017d04:	7922      	ldrb	r2, [r4, #4]
 8017d06:	00fb      	lsls	r3, r7, #3
 8017d08:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017d0c:	7a03      	ldrb	r3, [r0, #8]
 8017d0e:	430b      	orrs	r3, r1
 8017d10:	0679      	lsls	r1, r7, #25
 8017d12:	bf44      	itt	mi
 8017d14:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017d18:	b21b      	sxthmi	r3, r3
 8017d1a:	1ad3      	subs	r3, r2, r3
 8017d1c:	b2db      	uxtb	r3, r3
 8017d1e:	429e      	cmp	r6, r3
 8017d20:	bf28      	it	cs
 8017d22:	461e      	movcs	r6, r3
 8017d24:	462b      	mov	r3, r5
 8017d26:	4622      	mov	r2, r4
 8017d28:	2100      	movs	r1, #0
 8017d2a:	a805      	add	r0, sp, #20
 8017d2c:	f001 f850 	bl	8018dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017d30:	e7e2      	b.n	8017cf8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8017d32:	4630      	mov	r0, r6
 8017d34:	b01e      	add	sp, #120	; 0x78
 8017d36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017d3a:	b003      	add	sp, #12
 8017d3c:	4770      	bx	lr

08017d3e <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017d3e:	b513      	push	{r0, r1, r4, lr}
 8017d40:	2400      	movs	r4, #0
 8017d42:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017d46:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017d4a:	6803      	ldr	r3, [r0, #0]
 8017d4c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017d50:	9400      	str	r4, [sp, #0]
 8017d52:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017d56:	691b      	ldr	r3, [r3, #16]
 8017d58:	4669      	mov	r1, sp
 8017d5a:	4798      	blx	r3
 8017d5c:	b002      	add	sp, #8
 8017d5e:	bd10      	pop	{r4, pc}

08017d60 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	460c      	mov	r4, r1
 8017d64:	4605      	mov	r5, r0
 8017d66:	680b      	ldr	r3, [r1, #0]
 8017d68:	68db      	ldr	r3, [r3, #12]
 8017d6a:	4798      	blx	r3
 8017d6c:	6823      	ldr	r3, [r4, #0]
 8017d6e:	4620      	mov	r0, r4
 8017d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d72:	4629      	mov	r1, r5
 8017d74:	4798      	blx	r3
 8017d76:	4628      	mov	r0, r5
 8017d78:	bd38      	pop	{r3, r4, r5, pc}

08017d7a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017d7a:	b410      	push	{r4}
 8017d7c:	880a      	ldrh	r2, [r1, #0]
 8017d7e:	8884      	ldrh	r4, [r0, #4]
 8017d80:	4422      	add	r2, r4
 8017d82:	800a      	strh	r2, [r1, #0]
 8017d84:	88c4      	ldrh	r4, [r0, #6]
 8017d86:	884a      	ldrh	r2, [r1, #2]
 8017d88:	4422      	add	r2, r4
 8017d8a:	804a      	strh	r2, [r1, #2]
 8017d8c:	6940      	ldr	r0, [r0, #20]
 8017d8e:	b120      	cbz	r0, 8017d9a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017d90:	6803      	ldr	r3, [r0, #0]
 8017d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d98:	4718      	bx	r3
 8017d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d9e:	4770      	bx	lr

08017da0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017da0:	b570      	push	{r4, r5, r6, lr}
 8017da2:	460c      	mov	r4, r1
 8017da4:	8882      	ldrh	r2, [r0, #4]
 8017da6:	880b      	ldrh	r3, [r1, #0]
 8017da8:	4605      	mov	r5, r0
 8017daa:	4413      	add	r3, r2
 8017dac:	800b      	strh	r3, [r1, #0]
 8017dae:	88c2      	ldrh	r2, [r0, #6]
 8017db0:	884b      	ldrh	r3, [r1, #2]
 8017db2:	4413      	add	r3, r2
 8017db4:	804b      	strh	r3, [r1, #2]
 8017db6:	1d01      	adds	r1, r0, #4
 8017db8:	4620      	mov	r0, r4
 8017dba:	f7fb f8e3 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 8017dbe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	dd0b      	ble.n	8017dde <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017dc6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	dd07      	ble.n	8017dde <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017dce:	6968      	ldr	r0, [r5, #20]
 8017dd0:	b128      	cbz	r0, 8017dde <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017dd2:	6803      	ldr	r3, [r0, #0]
 8017dd4:	4621      	mov	r1, r4
 8017dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ddc:	4718      	bx	r3
 8017dde:	bd70      	pop	{r4, r5, r6, pc}

08017de0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017de0:	b570      	push	{r4, r5, r6, lr}
 8017de2:	460c      	mov	r4, r1
 8017de4:	8882      	ldrh	r2, [r0, #4]
 8017de6:	880b      	ldrh	r3, [r1, #0]
 8017de8:	4605      	mov	r5, r0
 8017dea:	4413      	add	r3, r2
 8017dec:	800b      	strh	r3, [r1, #0]
 8017dee:	88c2      	ldrh	r2, [r0, #6]
 8017df0:	884b      	ldrh	r3, [r1, #2]
 8017df2:	4413      	add	r3, r2
 8017df4:	804b      	strh	r3, [r1, #2]
 8017df6:	1d01      	adds	r1, r0, #4
 8017df8:	4620      	mov	r0, r4
 8017dfa:	f7fb f8c3 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 8017dfe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	dd18      	ble.n	8017e38 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017e06:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	dd14      	ble.n	8017e38 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017e0e:	6968      	ldr	r0, [r5, #20]
 8017e10:	b128      	cbz	r0, 8017e1e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017e12:	6803      	ldr	r3, [r0, #0]
 8017e14:	4621      	mov	r1, r4
 8017e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e1a:	691b      	ldr	r3, [r3, #16]
 8017e1c:	4718      	bx	r3
 8017e1e:	4b07      	ldr	r3, [pc, #28]	; (8017e3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	3304      	adds	r3, #4
 8017e24:	429d      	cmp	r5, r3
 8017e26:	d107      	bne.n	8017e38 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017e28:	f7fe fff2 	bl	8016e10 <_ZN8touchgfx11Application11getInstanceEv>
 8017e2c:	6821      	ldr	r1, [r4, #0]
 8017e2e:	6862      	ldr	r2, [r4, #4]
 8017e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e34:	f7ff b862 	b.w	8016efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017e38:	bd70      	pop	{r4, r5, r6, pc}
 8017e3a:	bf00      	nop
 8017e3c:	2004e15c 	.word	0x2004e15c

08017e40 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017e40:	b570      	push	{r4, r5, r6, lr}
 8017e42:	4604      	mov	r4, r0
 8017e44:	4616      	mov	r6, r2
 8017e46:	460d      	mov	r5, r1
 8017e48:	b901      	cbnz	r1, 8017e4c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017e4a:	b192      	cbz	r2, 8017e72 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017e4c:	6823      	ldr	r3, [r4, #0]
 8017e4e:	4620      	mov	r0, r4
 8017e50:	699b      	ldr	r3, [r3, #24]
 8017e52:	4798      	blx	r3
 8017e54:	88e2      	ldrh	r2, [r4, #6]
 8017e56:	88a1      	ldrh	r1, [r4, #4]
 8017e58:	4432      	add	r2, r6
 8017e5a:	4429      	add	r1, r5
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	b212      	sxth	r2, r2
 8017e60:	b209      	sxth	r1, r1
 8017e62:	f7f5 fbc0 	bl	800d5e6 <_ZN8touchgfx8Drawable5setXYEss>
 8017e66:	6823      	ldr	r3, [r4, #0]
 8017e68:	4620      	mov	r0, r4
 8017e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e6e:	699b      	ldr	r3, [r3, #24]
 8017e70:	4718      	bx	r3
 8017e72:	bd70      	pop	{r4, r5, r6, pc}

08017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017e74:	b510      	push	{r4, lr}
 8017e76:	2300      	movs	r3, #0
 8017e78:	4604      	mov	r4, r0
 8017e7a:	4608      	mov	r0, r1
 8017e7c:	8023      	strh	r3, [r4, #0]
 8017e7e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017e82:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017e86:	8063      	strh	r3, [r4, #2]
 8017e88:	6803      	ldr	r3, [r0, #0]
 8017e8a:	80a1      	strh	r1, [r4, #4]
 8017e8c:	80e2      	strh	r2, [r4, #6]
 8017e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e90:	4621      	mov	r1, r4
 8017e92:	4798      	blx	r3
 8017e94:	4620      	mov	r0, r4
 8017e96:	bd10      	pop	{r4, pc}

08017e98 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8017e98:	b530      	push	{r4, r5, lr}
 8017e9a:	8083      	strh	r3, [r0, #4]
 8017e9c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017ea0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8017ea4:	7183      	strb	r3, [r0, #6]
 8017ea6:	79c3      	ldrb	r3, [r0, #7]
 8017ea8:	6101      	str	r1, [r0, #16]
 8017eaa:	f365 0306 	bfi	r3, r5, #0, #7
 8017eae:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8017eb2:	8282      	strh	r2, [r0, #20]
 8017eb4:	f365 13c7 	bfi	r3, r5, #7, #1
 8017eb8:	71c3      	strb	r3, [r0, #7]
 8017eba:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8017ebe:	7203      	strb	r3, [r0, #8]
 8017ec0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8017ec4:	7243      	strb	r3, [r0, #9]
 8017ec6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017eca:	8143      	strh	r3, [r0, #10]
 8017ecc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8017ed0:	8183      	strh	r3, [r0, #12]
 8017ed2:	4b01      	ldr	r3, [pc, #4]	; (8017ed8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8017ed4:	6003      	str	r3, [r0, #0]
 8017ed6:	bd30      	pop	{r4, r5, pc}
 8017ed8:	08028ad0 	.word	0x08028ad0

08017edc <_ZNK8touchgfx9ConstFont4findEt>:
 8017edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ede:	6904      	ldr	r4, [r0, #16]
 8017ee0:	b3bc      	cbz	r4, 8017f52 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017ee2:	88a3      	ldrh	r3, [r4, #4]
 8017ee4:	8a82      	ldrh	r2, [r0, #20]
 8017ee6:	1acb      	subs	r3, r1, r3
 8017ee8:	f102 32ff 	add.w	r2, r2, #4294967295
 8017eec:	d431      	bmi.n	8017f52 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017eee:	4293      	cmp	r3, r2
 8017ef0:	dd0c      	ble.n	8017f0c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8017ef2:	230e      	movs	r3, #14
 8017ef4:	fb03 4302 	mla	r3, r3, r2, r4
 8017ef8:	889b      	ldrh	r3, [r3, #4]
 8017efa:	1a5b      	subs	r3, r3, r1
 8017efc:	1ad3      	subs	r3, r2, r3
 8017efe:	429a      	cmp	r2, r3
 8017f00:	db27      	blt.n	8017f52 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	bfbc      	itt	lt
 8017f06:	2302      	movlt	r3, #2
 8017f08:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017f0c:	2500      	movs	r5, #0
 8017f0e:	260e      	movs	r6, #14
 8017f10:	4295      	cmp	r5, r2
 8017f12:	dc1e      	bgt.n	8017f52 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f14:	fb06 4003 	mla	r0, r6, r3, r4
 8017f18:	8887      	ldrh	r7, [r0, #4]
 8017f1a:	42b9      	cmp	r1, r7
 8017f1c:	d01a      	beq.n	8017f54 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017f1e:	d20d      	bcs.n	8017f3c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017f20:	1e5a      	subs	r2, r3, #1
 8017f22:	4295      	cmp	r5, r2
 8017f24:	dc15      	bgt.n	8017f52 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f26:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8017f2a:	1a5b      	subs	r3, r3, r1
 8017f2c:	1ad3      	subs	r3, r2, r3
 8017f2e:	429a      	cmp	r2, r3
 8017f30:	db0f      	blt.n	8017f52 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f32:	429d      	cmp	r5, r3
 8017f34:	ddec      	ble.n	8017f10 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017f36:	1953      	adds	r3, r2, r5
 8017f38:	105b      	asrs	r3, r3, #1
 8017f3a:	e7e9      	b.n	8017f10 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017f3c:	1c5d      	adds	r5, r3, #1
 8017f3e:	42aa      	cmp	r2, r5
 8017f40:	db07      	blt.n	8017f52 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f42:	8a43      	ldrh	r3, [r0, #18]
 8017f44:	1acb      	subs	r3, r1, r3
 8017f46:	442b      	add	r3, r5
 8017f48:	429d      	cmp	r5, r3
 8017f4a:	dc02      	bgt.n	8017f52 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017f4c:	429a      	cmp	r2, r3
 8017f4e:	dadf      	bge.n	8017f10 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017f50:	e7f1      	b.n	8017f36 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8017f52:	2000      	movs	r0, #0
 8017f54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f56 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8017f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f58:	4604      	mov	r4, r0
 8017f5a:	4617      	mov	r7, r2
 8017f5c:	461e      	mov	r6, r3
 8017f5e:	b911      	cbnz	r1, 8017f66 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017f60:	2500      	movs	r5, #0
 8017f62:	4628      	mov	r0, r5
 8017f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f66:	290a      	cmp	r1, #10
 8017f68:	d0fa      	beq.n	8017f60 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017f6a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017f6e:	4291      	cmp	r1, r2
 8017f70:	d0f6      	beq.n	8017f60 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017f72:	f242 020b 	movw	r2, #8203	; 0x200b
 8017f76:	4291      	cmp	r1, r2
 8017f78:	d0f2      	beq.n	8017f60 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017f7a:	f7ff ffaf 	bl	8017edc <_ZNK8touchgfx9ConstFont4findEt>
 8017f7e:	4605      	mov	r5, r0
 8017f80:	b950      	cbnz	r0, 8017f98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8017f82:	6823      	ldr	r3, [r4, #0]
 8017f84:	4620      	mov	r0, r4
 8017f86:	691b      	ldr	r3, [r3, #16]
 8017f88:	4798      	blx	r3
 8017f8a:	4601      	mov	r1, r0
 8017f8c:	4620      	mov	r0, r4
 8017f8e:	f7ff ffa5 	bl	8017edc <_ZNK8touchgfx9ConstFont4findEt>
 8017f92:	4605      	mov	r5, r0
 8017f94:	2800      	cmp	r0, #0
 8017f96:	d0e3      	beq.n	8017f60 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017f98:	6823      	ldr	r3, [r4, #0]
 8017f9a:	4629      	mov	r1, r5
 8017f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	4798      	blx	r3
 8017fa2:	6038      	str	r0, [r7, #0]
 8017fa4:	6823      	ldr	r3, [r4, #0]
 8017fa6:	4620      	mov	r0, r4
 8017fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017faa:	4798      	blx	r3
 8017fac:	7030      	strb	r0, [r6, #0]
 8017fae:	e7d8      	b.n	8017f62 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08017fb0 <_ZN8touchgfx4clzuEm>:
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	b1c8      	cbz	r0, 8017fe8 <_ZN8touchgfx4clzuEm+0x38>
 8017fb4:	0c02      	lsrs	r2, r0, #16
 8017fb6:	0412      	lsls	r2, r2, #16
 8017fb8:	b9a2      	cbnz	r2, 8017fe4 <_ZN8touchgfx4clzuEm+0x34>
 8017fba:	0403      	lsls	r3, r0, #16
 8017fbc:	2010      	movs	r0, #16
 8017fbe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017fc2:	bf04      	itt	eq
 8017fc4:	021b      	lsleq	r3, r3, #8
 8017fc6:	3008      	addeq	r0, #8
 8017fc8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017fcc:	bf04      	itt	eq
 8017fce:	011b      	lsleq	r3, r3, #4
 8017fd0:	3004      	addeq	r0, #4
 8017fd2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017fd6:	bf04      	itt	eq
 8017fd8:	009b      	lsleq	r3, r3, #2
 8017fda:	3002      	addeq	r0, #2
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	db04      	blt.n	8017fea <_ZN8touchgfx4clzuEm+0x3a>
 8017fe0:	3001      	adds	r0, #1
 8017fe2:	4770      	bx	lr
 8017fe4:	2000      	movs	r0, #0
 8017fe6:	e7ea      	b.n	8017fbe <_ZN8touchgfx4clzuEm+0xe>
 8017fe8:	2020      	movs	r0, #32
 8017fea:	4770      	bx	lr

08017fec <_ZN8touchgfx7muldivuEmmmRm>:
 8017fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ff0:	4680      	mov	r8, r0
 8017ff2:	460f      	mov	r7, r1
 8017ff4:	4615      	mov	r5, r2
 8017ff6:	461e      	mov	r6, r3
 8017ff8:	f7ff ffda 	bl	8017fb0 <_ZN8touchgfx4clzuEm>
 8017ffc:	b998      	cbnz	r0, 8018026 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8017ffe:	4608      	mov	r0, r1
 8018000:	f7ff ffd6 	bl	8017fb0 <_ZN8touchgfx4clzuEm>
 8018004:	2800      	cmp	r0, #0
 8018006:	dd08      	ble.n	801801a <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8018008:	4633      	mov	r3, r6
 801800a:	462a      	mov	r2, r5
 801800c:	4641      	mov	r1, r8
 801800e:	4638      	mov	r0, r7
 8018010:	f7ff ffec 	bl	8017fec <_ZN8touchgfx7muldivuEmmmRm>
 8018014:	b003      	add	sp, #12
 8018016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801801a:	f04f 33ff 	mov.w	r3, #4294967295
 801801e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018022:	6033      	str	r3, [r6, #0]
 8018024:	e7f6      	b.n	8018014 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018026:	fa31 f900 	lsrs.w	r9, r1, r0
 801802a:	fb01 f308 	mul.w	r3, r1, r8
 801802e:	d105      	bne.n	801803c <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8018030:	fbb3 f0f5 	udiv	r0, r3, r5
 8018034:	fb05 3510 	mls	r5, r5, r0, r3
 8018038:	6035      	str	r5, [r6, #0]
 801803a:	e7eb      	b.n	8018014 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801803c:	2301      	movs	r3, #1
 801803e:	fa08 fb00 	lsl.w	fp, r8, r0
 8018042:	fa03 f000 	lsl.w	r0, r3, r0
 8018046:	3801      	subs	r0, #1
 8018048:	462a      	mov	r2, r5
 801804a:	4633      	mov	r3, r6
 801804c:	4641      	mov	r1, r8
 801804e:	4038      	ands	r0, r7
 8018050:	f7ff ffcc 	bl	8017fec <_ZN8touchgfx7muldivuEmmmRm>
 8018054:	fbbb faf5 	udiv	sl, fp, r5
 8018058:	462a      	mov	r2, r5
 801805a:	4607      	mov	r7, r0
 801805c:	ab01      	add	r3, sp, #4
 801805e:	fb05 b11a 	mls	r1, r5, sl, fp
 8018062:	4648      	mov	r0, r9
 8018064:	f7ff ffc2 	bl	8017fec <_ZN8touchgfx7muldivuEmmmRm>
 8018068:	9b01      	ldr	r3, [sp, #4]
 801806a:	6832      	ldr	r2, [r6, #0]
 801806c:	fb09 f40a 	mul.w	r4, r9, sl
 8018070:	441a      	add	r2, r3
 8018072:	fbb2 f3f5 	udiv	r3, r2, r5
 8018076:	441c      	add	r4, r3
 8018078:	443c      	add	r4, r7
 801807a:	4420      	add	r0, r4
 801807c:	fb05 2513 	mls	r5, r5, r3, r2
 8018080:	e7da      	b.n	8018038 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08018082 <_ZN8touchgfx6muldivElllRl>:
 8018082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018084:	2800      	cmp	r0, #0
 8018086:	bfb6      	itet	lt
 8018088:	f04f 34ff 	movlt.w	r4, #4294967295
 801808c:	2401      	movge	r4, #1
 801808e:	4240      	neglt	r0, r0
 8018090:	2900      	cmp	r1, #0
 8018092:	bfbc      	itt	lt
 8018094:	4249      	neglt	r1, r1
 8018096:	4264      	neglt	r4, r4
 8018098:	2a00      	cmp	r2, #0
 801809a:	bfb6      	itet	lt
 801809c:	4265      	neglt	r5, r4
 801809e:	4625      	movge	r5, r4
 80180a0:	4252      	neglt	r2, r2
 80180a2:	4288      	cmp	r0, r1
 80180a4:	461e      	mov	r6, r3
 80180a6:	bfc2      	ittt	gt
 80180a8:	4603      	movgt	r3, r0
 80180aa:	4608      	movgt	r0, r1
 80180ac:	4619      	movgt	r1, r3
 80180ae:	ab01      	add	r3, sp, #4
 80180b0:	f7ff ff9c 	bl	8017fec <_ZN8touchgfx7muldivuEmmmRm>
 80180b4:	9b01      	ldr	r3, [sp, #4]
 80180b6:	4368      	muls	r0, r5
 80180b8:	435c      	muls	r4, r3
 80180ba:	6034      	str	r4, [r6, #0]
 80180bc:	b002      	add	sp, #8
 80180be:	bd70      	pop	{r4, r5, r6, pc}

080180c0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80180c0:	2000      	movs	r0, #0
 80180c2:	4770      	bx	lr

080180c4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80180c4:	2001      	movs	r0, #1
 80180c6:	4770      	bx	lr

080180c8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80180c8:	2002      	movs	r0, #2
 80180ca:	4770      	bx	lr

080180cc <_ZN8touchgfx12GestureEventD1Ev>:
 80180cc:	4770      	bx	lr

080180ce <_ZN8touchgfx9DragEventD1Ev>:
 80180ce:	4770      	bx	lr

080180d0 <_ZN8touchgfx10ClickEventD1Ev>:
 80180d0:	4770      	bx	lr

080180d2 <_ZN8touchgfx10ClickEventD0Ev>:
 80180d2:	b510      	push	{r4, lr}
 80180d4:	4604      	mov	r4, r0
 80180d6:	210c      	movs	r1, #12
 80180d8:	f00d fba2 	bl	8025820 <_ZdlPvj>
 80180dc:	4620      	mov	r0, r4
 80180de:	bd10      	pop	{r4, pc}

080180e0 <_ZN8touchgfx9DragEventD0Ev>:
 80180e0:	b510      	push	{r4, lr}
 80180e2:	4604      	mov	r4, r0
 80180e4:	2110      	movs	r1, #16
 80180e6:	f00d fb9b 	bl	8025820 <_ZdlPvj>
 80180ea:	4620      	mov	r0, r4
 80180ec:	bd10      	pop	{r4, pc}

080180ee <_ZN8touchgfx12GestureEventD0Ev>:
 80180ee:	b510      	push	{r4, lr}
 80180f0:	4604      	mov	r4, r0
 80180f2:	210c      	movs	r1, #12
 80180f4:	f00d fb94 	bl	8025820 <_ZdlPvj>
 80180f8:	4620      	mov	r0, r4
 80180fa:	bd10      	pop	{r4, pc}

080180fc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80180fc:	b530      	push	{r4, r5, lr}
 80180fe:	460d      	mov	r5, r1
 8018100:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018102:	b087      	sub	sp, #28
 8018104:	4604      	mov	r4, r0
 8018106:	b301      	cbz	r1, 801814a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018108:	a801      	add	r0, sp, #4
 801810a:	f7ff feb3 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801810e:	892a      	ldrh	r2, [r5, #8]
 8018110:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018114:	7928      	ldrb	r0, [r5, #4]
 8018116:	1ad2      	subs	r2, r2, r3
 8018118:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801811a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801811e:	441a      	add	r2, r3
 8018120:	896b      	ldrh	r3, [r5, #10]
 8018122:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018126:	f88d 0010 	strb.w	r0, [sp, #16]
 801812a:	1b5b      	subs	r3, r3, r5
 801812c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801812e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018130:	442b      	add	r3, r5
 8018132:	4d07      	ldr	r5, [pc, #28]	; (8018150 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018134:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018138:	9503      	str	r5, [sp, #12]
 801813a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801813e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018142:	6803      	ldr	r3, [r0, #0]
 8018144:	a903      	add	r1, sp, #12
 8018146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018148:	4798      	blx	r3
 801814a:	b007      	add	sp, #28
 801814c:	bd30      	pop	{r4, r5, pc}
 801814e:	bf00      	nop
 8018150:	08028b50 	.word	0x08028b50

08018154 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018158:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801815a:	b08a      	sub	sp, #40	; 0x28
 801815c:	4604      	mov	r4, r0
 801815e:	460d      	mov	r5, r1
 8018160:	b113      	cbz	r3, 8018168 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018162:	790b      	ldrb	r3, [r1, #4]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d044      	beq.n	80181f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018168:	f104 0804 	add.w	r8, r4, #4
 801816c:	4641      	mov	r1, r8
 801816e:	a803      	add	r0, sp, #12
 8018170:	f7ff fe80 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018174:	792b      	ldrb	r3, [r5, #4]
 8018176:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801817a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801817e:	b983      	cbnz	r3, 80181a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018180:	892a      	ldrh	r2, [r5, #8]
 8018182:	88e9      	ldrh	r1, [r5, #6]
 8018184:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018188:	1b92      	subs	r2, r2, r6
 801818a:	1bc9      	subs	r1, r1, r7
 801818c:	9301      	str	r3, [sp, #4]
 801818e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8018192:	9300      	str	r3, [sp, #0]
 8018194:	b212      	sxth	r2, r2
 8018196:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801819a:	b209      	sxth	r1, r1
 801819c:	4640      	mov	r0, r8
 801819e:	f7fa fe11 	bl	8012dc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80181a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80181a4:	b329      	cbz	r1, 80181f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80181a6:	a805      	add	r0, sp, #20
 80181a8:	f7ff fe64 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181ac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80181b0:	792b      	ldrb	r3, [r5, #4]
 80181b2:	1abf      	subs	r7, r7, r2
 80181b4:	88ea      	ldrh	r2, [r5, #6]
 80181b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80181b8:	4417      	add	r7, r2
 80181ba:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80181bc:	f88d 3020 	strb.w	r3, [sp, #32]
 80181c0:	4417      	add	r7, r2
 80181c2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80181c6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80181ca:	1ab6      	subs	r6, r6, r2
 80181cc:	892a      	ldrh	r2, [r5, #8]
 80181ce:	a907      	add	r1, sp, #28
 80181d0:	4416      	add	r6, r2
 80181d2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80181d4:	4416      	add	r6, r2
 80181d6:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80181da:	2600      	movs	r6, #0
 80181dc:	4a06      	ldr	r2, [pc, #24]	; (80181f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80181de:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80181e2:	9207      	str	r2, [sp, #28]
 80181e4:	6803      	ldr	r3, [r0, #0]
 80181e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181e8:	4798      	blx	r3
 80181ea:	792b      	ldrb	r3, [r5, #4]
 80181ec:	b10b      	cbz	r3, 80181f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80181ee:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80181f2:	b00a      	add	sp, #40	; 0x28
 80181f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181f8:	08028b28 	.word	0x08028b28

080181fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80181fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018200:	460c      	mov	r4, r1
 8018202:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018204:	b088      	sub	sp, #32
 8018206:	4605      	mov	r5, r0
 8018208:	2900      	cmp	r1, #0
 801820a:	d06d      	beq.n	80182e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801820c:	4668      	mov	r0, sp
 801820e:	f7ff fe31 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018212:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018214:	88e3      	ldrh	r3, [r4, #6]
 8018216:	f9bd 8000 	ldrsh.w	r8, [sp]
 801821a:	440b      	add	r3, r1
 801821c:	b21b      	sxth	r3, r3
 801821e:	4543      	cmp	r3, r8
 8018220:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018224:	db31      	blt.n	801828a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018226:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801822a:	44c4      	add	ip, r8
 801822c:	fa0f fc8c 	sxth.w	ip, ip
 8018230:	4563      	cmp	r3, ip
 8018232:	da2a      	bge.n	801828a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018234:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8018236:	8926      	ldrh	r6, [r4, #8]
 8018238:	4416      	add	r6, r2
 801823a:	b236      	sxth	r6, r6
 801823c:	42be      	cmp	r6, r7
 801823e:	db24      	blt.n	801828a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018240:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018244:	4438      	add	r0, r7
 8018246:	b200      	sxth	r0, r0
 8018248:	4286      	cmp	r6, r0
 801824a:	da1e      	bge.n	801828a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801824c:	8963      	ldrh	r3, [r4, #10]
 801824e:	4419      	add	r1, r3
 8018250:	b209      	sxth	r1, r1
 8018252:	4541      	cmp	r1, r8
 8018254:	db08      	blt.n	8018268 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018256:	4561      	cmp	r1, ip
 8018258:	da06      	bge.n	8018268 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801825a:	89a3      	ldrh	r3, [r4, #12]
 801825c:	441a      	add	r2, r3
 801825e:	b212      	sxth	r2, r2
 8018260:	42ba      	cmp	r2, r7
 8018262:	db01      	blt.n	8018268 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018264:	4282      	cmp	r2, r0
 8018266:	db10      	blt.n	801828a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018268:	4b21      	ldr	r3, [pc, #132]	; (80182f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801826a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801826c:	9304      	str	r3, [sp, #16]
 801826e:	2302      	movs	r3, #2
 8018270:	f88d 3014 	strb.w	r3, [sp, #20]
 8018274:	2300      	movs	r3, #0
 8018276:	f8ad 3016 	strh.w	r3, [sp, #22]
 801827a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801827e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018282:	6803      	ldr	r3, [r0, #0]
 8018284:	a904      	add	r1, sp, #16
 8018286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018288:	4798      	blx	r3
 801828a:	1d29      	adds	r1, r5, #4
 801828c:	a802      	add	r0, sp, #8
 801828e:	f7ff fdf1 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018292:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018296:	88e0      	ldrh	r0, [r4, #6]
 8018298:	eba3 0808 	sub.w	r8, r3, r8
 801829c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80182a0:	7921      	ldrb	r1, [r4, #4]
 80182a2:	1bdf      	subs	r7, r3, r7
 80182a4:	b2bb      	uxth	r3, r7
 80182a6:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80182aa:	fa1f f888 	uxth.w	r8, r8
 80182ae:	8922      	ldrh	r2, [r4, #8]
 80182b0:	8967      	ldrh	r7, [r4, #10]
 80182b2:	89a4      	ldrh	r4, [r4, #12]
 80182b4:	4440      	add	r0, r8
 80182b6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80182b8:	4460      	add	r0, ip
 80182ba:	441a      	add	r2, r3
 80182bc:	44b8      	add	r8, r7
 80182be:	4423      	add	r3, r4
 80182c0:	4c0c      	ldr	r4, [pc, #48]	; (80182f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80182c2:	f8ad 0016 	strh.w	r0, [sp, #22]
 80182c6:	4433      	add	r3, r6
 80182c8:	4432      	add	r2, r6
 80182ca:	44e0      	add	r8, ip
 80182cc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80182ce:	f88d 1014 	strb.w	r1, [sp, #20]
 80182d2:	9404      	str	r4, [sp, #16]
 80182d4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80182d8:	f8ad 801a 	strh.w	r8, [sp, #26]
 80182dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80182e0:	6803      	ldr	r3, [r0, #0]
 80182e2:	a904      	add	r1, sp, #16
 80182e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182e6:	4798      	blx	r3
 80182e8:	b008      	add	sp, #32
 80182ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ee:	bf00      	nop
 80182f0:	08028b28 	.word	0x08028b28
 80182f4:	08028b3c 	.word	0x08028b3c

080182f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80182f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182fa:	4604      	mov	r4, r0
 80182fc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018300:	3201      	adds	r2, #1
 8018302:	d112      	bne.n	801832a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018304:	2500      	movs	r5, #0
 8018306:	9500      	str	r5, [sp, #0]
 8018308:	466d      	mov	r5, sp
 801830a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801830e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018312:	6803      	ldr	r3, [r0, #0]
 8018314:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018318:	f8ad 2006 	strh.w	r2, [sp, #6]
 801831c:	4629      	mov	r1, r5
 801831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018320:	4798      	blx	r3
 8018322:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018326:	e884 0003 	stmia.w	r4, {r0, r1}
 801832a:	4620      	mov	r0, r4
 801832c:	b003      	add	sp, #12
 801832e:	bd30      	pop	{r4, r5, pc}

08018330 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018330:	b513      	push	{r0, r1, r4, lr}
 8018332:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018336:	4604      	mov	r4, r0
 8018338:	3301      	adds	r3, #1
 801833a:	d109      	bne.n	8018350 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801833c:	4601      	mov	r1, r0
 801833e:	4668      	mov	r0, sp
 8018340:	f7ff fd98 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018344:	f8bd 3000 	ldrh.w	r3, [sp]
 8018348:	8423      	strh	r3, [r4, #32]
 801834a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801834e:	8463      	strh	r3, [r4, #34]	; 0x22
 8018350:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018354:	b002      	add	sp, #8
 8018356:	bd10      	pop	{r4, pc}

08018358 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018358:	b513      	push	{r0, r1, r4, lr}
 801835a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801835e:	4604      	mov	r4, r0
 8018360:	3301      	adds	r3, #1
 8018362:	d109      	bne.n	8018378 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018364:	4601      	mov	r1, r0
 8018366:	4668      	mov	r0, sp
 8018368:	f7ff fd84 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801836c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018370:	8423      	strh	r3, [r4, #32]
 8018372:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018376:	8463      	strh	r3, [r4, #34]	; 0x22
 8018378:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801837c:	b002      	add	sp, #8
 801837e:	bd10      	pop	{r4, pc}

08018380 <_ZN8touchgfx6ScreenC1Ev>:
 8018380:	b570      	push	{r4, r5, r6, lr}
 8018382:	4605      	mov	r5, r0
 8018384:	4b16      	ldr	r3, [pc, #88]	; (80183e0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018386:	2101      	movs	r1, #1
 8018388:	f845 3b04 	str.w	r3, [r5], #4
 801838c:	2300      	movs	r3, #0
 801838e:	4604      	mov	r4, r0
 8018390:	8103      	strh	r3, [r0, #8]
 8018392:	8143      	strh	r3, [r0, #10]
 8018394:	8183      	strh	r3, [r0, #12]
 8018396:	81c3      	strh	r3, [r0, #14]
 8018398:	8203      	strh	r3, [r0, #16]
 801839a:	8243      	strh	r3, [r0, #18]
 801839c:	8283      	strh	r3, [r0, #20]
 801839e:	82c3      	strh	r3, [r0, #22]
 80183a0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80183a4:	6203      	str	r3, [r0, #32]
 80183a6:	8483      	strh	r3, [r0, #36]	; 0x24
 80183a8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80183aa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80183ae:	4a0d      	ldr	r2, [pc, #52]	; (80183e4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80183b0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80183b4:	6343      	str	r3, [r0, #52]	; 0x34
 80183b6:	4b0c      	ldr	r3, [pc, #48]	; (80183e8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80183b8:	6042      	str	r2, [r0, #4]
 80183ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80183be:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80183c0:	4a0a      	ldr	r2, [pc, #40]	; (80183ec <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80183c2:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80183c6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80183ca:	f9b2 1000 	ldrsh.w	r1, [r2]
 80183ce:	4628      	mov	r0, r5
 80183d0:	4798      	blx	r3
 80183d2:	6863      	ldr	r3, [r4, #4]
 80183d4:	4628      	mov	r0, r5
 80183d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80183d8:	4631      	mov	r1, r6
 80183da:	4798      	blx	r3
 80183dc:	4620      	mov	r0, r4
 80183de:	bd70      	pop	{r4, r5, r6, pc}
 80183e0:	08028b64 	.word	0x08028b64
 80183e4:	08028404 	.word	0x08028404
 80183e8:	2004e10e 	.word	0x2004e10e
 80183ec:	2004e10c 	.word	0x2004e10c

080183f0 <_ZN8touchgfx6Screen4drawEv>:
 80183f0:	b507      	push	{r0, r1, r2, lr}
 80183f2:	2100      	movs	r1, #0
 80183f4:	4b08      	ldr	r3, [pc, #32]	; (8018418 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80183f6:	9100      	str	r1, [sp, #0]
 80183f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80183fc:	4b07      	ldr	r3, [pc, #28]	; (801841c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80183fe:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018406:	4669      	mov	r1, sp
 8018408:	f8ad 3006 	strh.w	r3, [sp, #6]
 801840c:	6803      	ldr	r3, [r0, #0]
 801840e:	689b      	ldr	r3, [r3, #8]
 8018410:	4798      	blx	r3
 8018412:	b003      	add	sp, #12
 8018414:	f85d fb04 	ldr.w	pc, [sp], #4
 8018418:	2004e10c 	.word	0x2004e10c
 801841c:	2004e10e 	.word	0x2004e10e

08018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018424:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018428:	b089      	sub	sp, #36	; 0x24
 801842a:	2b00      	cmp	r3, #0
 801842c:	4680      	mov	r8, r0
 801842e:	460c      	mov	r4, r1
 8018430:	4615      	mov	r5, r2
 8018432:	dd0e      	ble.n	8018452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018434:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018438:	2b00      	cmp	r3, #0
 801843a:	dd0a      	ble.n	8018452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801843c:	4628      	mov	r0, r5
 801843e:	f7ff ff5b 	bl	80182f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018442:	4621      	mov	r1, r4
 8018444:	f7fe fc06 	bl	8016c54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018448:	69eb      	ldr	r3, [r5, #28]
 801844a:	b928      	cbnz	r0, 8018458 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801844c:	461d      	mov	r5, r3
 801844e:	2b00      	cmp	r3, #0
 8018450:	d1f4      	bne.n	801843c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018452:	b009      	add	sp, #36	; 0x24
 8018454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018458:	ae04      	add	r6, sp, #16
 801845a:	2b00      	cmp	r3, #0
 801845c:	f000 80b5 	beq.w	80185ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018460:	682b      	ldr	r3, [r5, #0]
 8018462:	4629      	mov	r1, r5
 8018464:	68db      	ldr	r3, [r3, #12]
 8018466:	a802      	add	r0, sp, #8
 8018468:	4798      	blx	r3
 801846a:	4628      	mov	r0, r5
 801846c:	f7ff ff60 	bl	8018330 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018470:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8018474:	4407      	add	r7, r0
 8018476:	4628      	mov	r0, r5
 8018478:	f7ff ff6e 	bl	8018358 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801847c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018480:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018484:	4418      	add	r0, r3
 8018486:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801848a:	4621      	mov	r1, r4
 801848c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018490:	b23f      	sxth	r7, r7
 8018492:	4630      	mov	r0, r6
 8018494:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018498:	f8ad 3016 	strh.w	r3, [sp, #22]
 801849c:	f8ad 7010 	strh.w	r7, [sp, #16]
 80184a0:	f7fa fd70 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 80184a4:	4628      	mov	r0, r5
 80184a6:	f7ff ff27 	bl	80182f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80184aa:	4602      	mov	r2, r0
 80184ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 80184b0:	ab06      	add	r3, sp, #24
 80184b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80184b6:	4611      	mov	r1, r2
 80184b8:	4618      	mov	r0, r3
 80184ba:	f7fa fd63 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 80184be:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80184c2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80184c6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80184ca:	4299      	cmp	r1, r3
 80184cc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80184d0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80184d4:	d10b      	bne.n	80184ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80184d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80184da:	4552      	cmp	r2, sl
 80184dc:	d107      	bne.n	80184ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80184de:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80184e2:	455a      	cmp	r2, fp
 80184e4:	d103      	bne.n	80184ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80184e6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80184ea:	454a      	cmp	r2, r9
 80184ec:	d06d      	beq.n	80185ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80184ee:	f1bb 0f00 	cmp.w	fp, #0
 80184f2:	dd65      	ble.n	80185c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80184f4:	f1b9 0f00 	cmp.w	r9, #0
 80184f8:	dd62      	ble.n	80185c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80184fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80184fe:	fa1f f08a 	uxth.w	r0, sl
 8018502:	4552      	cmp	r2, sl
 8018504:	9000      	str	r0, [sp, #0]
 8018506:	da12      	bge.n	801852e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018508:	9301      	str	r3, [sp, #4]
 801850a:	9b00      	ldr	r3, [sp, #0]
 801850c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018510:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018514:	1a9a      	subs	r2, r3, r2
 8018516:	f8ad 1010 	strh.w	r1, [sp, #16]
 801851a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801851e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018522:	69ea      	ldr	r2, [r5, #28]
 8018524:	4631      	mov	r1, r6
 8018526:	4640      	mov	r0, r8
 8018528:	f7ff ff7a 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801852c:	9b01      	ldr	r3, [sp, #4]
 801852e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018532:	b29f      	uxth	r7, r3
 8018534:	429a      	cmp	r2, r3
 8018536:	da0d      	bge.n	8018554 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018538:	f8ad 2010 	strh.w	r2, [sp, #16]
 801853c:	1aba      	subs	r2, r7, r2
 801853e:	f8ad a012 	strh.w	sl, [sp, #18]
 8018542:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018546:	f8ad 9016 	strh.w	r9, [sp, #22]
 801854a:	69ea      	ldr	r2, [r5, #28]
 801854c:	4631      	mov	r1, r6
 801854e:	4640      	mov	r0, r8
 8018550:	f7ff ff66 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018554:	8822      	ldrh	r2, [r4, #0]
 8018556:	88a3      	ldrh	r3, [r4, #4]
 8018558:	445f      	add	r7, fp
 801855a:	4413      	add	r3, r2
 801855c:	b29b      	uxth	r3, r3
 801855e:	b2bf      	uxth	r7, r7
 8018560:	b23a      	sxth	r2, r7
 8018562:	b219      	sxth	r1, r3
 8018564:	4291      	cmp	r1, r2
 8018566:	dd0d      	ble.n	8018584 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018568:	1bdb      	subs	r3, r3, r7
 801856a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801856e:	f8ad a012 	strh.w	sl, [sp, #18]
 8018572:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018576:	f8ad 9016 	strh.w	r9, [sp, #22]
 801857a:	69ea      	ldr	r2, [r5, #28]
 801857c:	4631      	mov	r1, r6
 801857e:	4640      	mov	r0, r8
 8018580:	f7ff ff4e 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018584:	88e2      	ldrh	r2, [r4, #6]
 8018586:	8863      	ldrh	r3, [r4, #2]
 8018588:	4413      	add	r3, r2
 801858a:	9a00      	ldr	r2, [sp, #0]
 801858c:	b29b      	uxth	r3, r3
 801858e:	444a      	add	r2, r9
 8018590:	fa1f f982 	uxth.w	r9, r2
 8018594:	fa0f f289 	sxth.w	r2, r9
 8018598:	b219      	sxth	r1, r3
 801859a:	428a      	cmp	r2, r1
 801859c:	da15      	bge.n	80185ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801859e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80185a2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80185a6:	eba3 0309 	sub.w	r3, r3, r9
 80185aa:	f8ad 1014 	strh.w	r1, [sp, #20]
 80185ae:	f8ad 0010 	strh.w	r0, [sp, #16]
 80185b2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80185b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80185ba:	69ea      	ldr	r2, [r5, #28]
 80185bc:	4631      	mov	r1, r6
 80185be:	e001      	b.n	80185c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80185c0:	4621      	mov	r1, r4
 80185c2:	69ea      	ldr	r2, [r5, #28]
 80185c4:	4640      	mov	r0, r8
 80185c6:	f7ff ff2b 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80185ca:	4628      	mov	r0, r5
 80185cc:	f7ff fe94 	bl	80182f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80185d0:	4633      	mov	r3, r6
 80185d2:	4602      	mov	r2, r0
 80185d4:	6861      	ldr	r1, [r4, #4]
 80185d6:	6820      	ldr	r0, [r4, #0]
 80185d8:	c303      	stmia	r3!, {r0, r1}
 80185da:	4611      	mov	r1, r2
 80185dc:	4630      	mov	r0, r6
 80185de:	f7fa fcd1 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 80185e2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	f77f af33 	ble.w	8018452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80185ec:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	f77f af2e 	ble.w	8018452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80185f6:	4628      	mov	r0, r5
 80185f8:	f7ff fe9a 	bl	8018330 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80185fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018600:	1a18      	subs	r0, r3, r0
 8018602:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018606:	4628      	mov	r0, r5
 8018608:	f7ff fea6 	bl	8018358 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801860c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018610:	4631      	mov	r1, r6
 8018612:	1a18      	subs	r0, r3, r0
 8018614:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018618:	682b      	ldr	r3, [r5, #0]
 801861a:	4628      	mov	r0, r5
 801861c:	689b      	ldr	r3, [r3, #8]
 801861e:	4798      	blx	r3
 8018620:	e717      	b.n	8018452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018622 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018622:	b570      	push	{r4, r5, r6, lr}
 8018624:	2300      	movs	r3, #0
 8018626:	460c      	mov	r4, r1
 8018628:	b086      	sub	sp, #24
 801862a:	1d06      	adds	r6, r0, #4
 801862c:	4631      	mov	r1, r6
 801862e:	4605      	mov	r5, r0
 8018630:	a802      	add	r0, sp, #8
 8018632:	9301      	str	r3, [sp, #4]
 8018634:	f7ff fc1e 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018638:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801863c:	8822      	ldrh	r2, [r4, #0]
 801863e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018642:	1ad2      	subs	r2, r2, r3
 8018644:	8863      	ldrh	r3, [r4, #2]
 8018646:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801864a:	1a5b      	subs	r3, r3, r1
 801864c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018650:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018654:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018658:	f8ad 1016 	strh.w	r1, [sp, #22]
 801865c:	aa01      	add	r2, sp, #4
 801865e:	a904      	add	r1, sp, #16
 8018660:	4630      	mov	r0, r6
 8018662:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018666:	f7fa fd65 	bl	8013134 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801866a:	9a01      	ldr	r2, [sp, #4]
 801866c:	b11a      	cbz	r2, 8018676 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801866e:	4621      	mov	r1, r4
 8018670:	4628      	mov	r0, r5
 8018672:	f7ff fed5 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018676:	b006      	add	sp, #24
 8018678:	bd70      	pop	{r4, r5, r6, pc}

0801867a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801867a:	b530      	push	{r4, r5, lr}
 801867c:	4602      	mov	r2, r0
 801867e:	b085      	sub	sp, #20
 8018680:	460d      	mov	r5, r1
 8018682:	466b      	mov	r3, sp
 8018684:	4604      	mov	r4, r0
 8018686:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801868a:	6851      	ldr	r1, [r2, #4]
 801868c:	c303      	stmia	r3!, {r0, r1}
 801868e:	4629      	mov	r1, r5
 8018690:	4668      	mov	r0, sp
 8018692:	f7fa fc77 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 8018696:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801869a:	b12b      	cbz	r3, 80186a8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801869c:	4669      	mov	r1, sp
 801869e:	4620      	mov	r0, r4
 80186a0:	f7ff ffbf 	bl	8018622 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80186a4:	b005      	add	sp, #20
 80186a6:	bd30      	pop	{r4, r5, pc}
 80186a8:	3404      	adds	r4, #4
 80186aa:	4621      	mov	r1, r4
 80186ac:	a802      	add	r0, sp, #8
 80186ae:	f7ff fbe1 	bl	8017e74 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80186b6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80186ba:	4669      	mov	r1, sp
 80186bc:	1a9b      	subs	r3, r3, r2
 80186be:	f8ad 3000 	strh.w	r3, [sp]
 80186c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80186c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80186ca:	4620      	mov	r0, r4
 80186cc:	1a9b      	subs	r3, r3, r2
 80186ce:	f8ad 3002 	strh.w	r3, [sp, #2]
 80186d2:	f7fa fcf6 	bl	80130c2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80186d6:	e7e5      	b.n	80186a4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080186d8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80186d8:	460b      	mov	r3, r1
 80186da:	680a      	ldr	r2, [r1, #0]
 80186dc:	1d01      	adds	r1, r0, #4
 80186de:	6992      	ldr	r2, [r2, #24]
 80186e0:	4618      	mov	r0, r3
 80186e2:	4710      	bx	r2

080186e4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 80186e4:	4298      	cmp	r0, r3
 80186e6:	d200      	bcs.n	80186ea <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 80186e8:	b913      	cbnz	r3, 80186f0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 80186ea:	440a      	add	r2, r1
 80186ec:	b210      	sxth	r0, r2
 80186ee:	4770      	bx	lr
 80186f0:	ee07 0a90 	vmov	s15, r0
 80186f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80186f8:	ee07 3a90 	vmov	s15, r3
 80186fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018708:	ee07 2a90 	vmov	s15, r2
 801870c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018710:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018714:	ee67 5a07 	vmul.f32	s11, s14, s14
 8018718:	ee07 1a90 	vmov	s15, r1
 801871c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018724:	eee6 7a26 	vfma.f32	s15, s12, s13
 8018728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801872c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018734:	bfcc      	ite	gt
 8018736:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801873a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801873e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018742:	ee17 3a90 	vmov	r3, s15
 8018746:	b218      	sxth	r0, r3
 8018748:	4770      	bx	lr

0801874a <_ZN8touchgfx12TextProviderC1Ev>:
 801874a:	b538      	push	{r3, r4, r5, lr}
 801874c:	2500      	movs	r5, #0
 801874e:	2302      	movs	r3, #2
 8018750:	4604      	mov	r4, r0
 8018752:	e9c0 5500 	strd	r5, r5, [r0]
 8018756:	7403      	strb	r3, [r0, #16]
 8018758:	6145      	str	r5, [r0, #20]
 801875a:	7605      	strb	r5, [r0, #24]
 801875c:	83c5      	strh	r5, [r0, #30]
 801875e:	8405      	strh	r5, [r0, #32]
 8018760:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018762:	8705      	strh	r5, [r0, #56]	; 0x38
 8018764:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8018766:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801876a:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801876e:	220e      	movs	r2, #14
 8018770:	4629      	mov	r1, r5
 8018772:	304c      	adds	r0, #76	; 0x4c
 8018774:	f00d f8fe 	bl	8025974 <memset>
 8018778:	2301      	movs	r3, #1
 801877a:	4620      	mov	r0, r4
 801877c:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8018780:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018784:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8018788:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801878c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8018790:	f7f8 f80e 	bl	80107b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018794:	4620      	mov	r0, r4
 8018796:	bd38      	pop	{r3, r4, r5, pc}

08018798 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018798:	b530      	push	{r4, r5, lr}
 801879a:	2500      	movs	r5, #0
 801879c:	2401      	movs	r4, #1
 801879e:	6843      	ldr	r3, [r0, #4]
 80187a0:	b913      	cbnz	r3, 80187a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80187a2:	6803      	ldr	r3, [r0, #0]
 80187a4:	b313      	cbz	r3, 80187ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80187a6:	6043      	str	r3, [r0, #4]
 80187a8:	7e03      	ldrb	r3, [r0, #24]
 80187aa:	b143      	cbz	r3, 80187be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80187ac:	6943      	ldr	r3, [r0, #20]
 80187ae:	b12b      	cbz	r3, 80187bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80187b0:	881a      	ldrh	r2, [r3, #0]
 80187b2:	b11a      	cbz	r2, 80187bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80187b4:	1c9a      	adds	r2, r3, #2
 80187b6:	6142      	str	r2, [r0, #20]
 80187b8:	8818      	ldrh	r0, [r3, #0]
 80187ba:	bd30      	pop	{r4, r5, pc}
 80187bc:	7605      	strb	r5, [r0, #24]
 80187be:	6843      	ldr	r3, [r0, #4]
 80187c0:	8819      	ldrh	r1, [r3, #0]
 80187c2:	b199      	cbz	r1, 80187ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80187c4:	1c9a      	adds	r2, r3, #2
 80187c6:	2902      	cmp	r1, #2
 80187c8:	6042      	str	r2, [r0, #4]
 80187ca:	d1f5      	bne.n	80187b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80187cc:	7c03      	ldrb	r3, [r0, #16]
 80187ce:	2b01      	cmp	r3, #1
 80187d0:	d8e5      	bhi.n	801879e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187d2:	1c5a      	adds	r2, r3, #1
 80187d4:	7402      	strb	r2, [r0, #16]
 80187d6:	3302      	adds	r3, #2
 80187d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80187dc:	6143      	str	r3, [r0, #20]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d0dd      	beq.n	801879e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187e2:	881b      	ldrh	r3, [r3, #0]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d0da      	beq.n	801879e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187e8:	7604      	strb	r4, [r0, #24]
 80187ea:	e7d8      	b.n	801879e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187ec:	2000      	movs	r0, #0
 80187ee:	e7e4      	b.n	80187ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080187f0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80187f0:	6001      	str	r1, [r0, #0]
 80187f2:	2100      	movs	r1, #0
 80187f4:	b430      	push	{r4, r5}
 80187f6:	6041      	str	r1, [r0, #4]
 80187f8:	6815      	ldr	r5, [r2, #0]
 80187fa:	6085      	str	r5, [r0, #8]
 80187fc:	6852      	ldr	r2, [r2, #4]
 80187fe:	6443      	str	r3, [r0, #68]	; 0x44
 8018800:	9b02      	ldr	r3, [sp, #8]
 8018802:	60c2      	str	r2, [r0, #12]
 8018804:	7401      	strb	r1, [r0, #16]
 8018806:	6141      	str	r1, [r0, #20]
 8018808:	7601      	strb	r1, [r0, #24]
 801880a:	8701      	strh	r1, [r0, #56]	; 0x38
 801880c:	8401      	strh	r1, [r0, #32]
 801880e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018812:	6483      	str	r3, [r0, #72]	; 0x48
 8018814:	bc30      	pop	{r4, r5}
 8018816:	f7f7 bfcb 	b.w	80107b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801881a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801881a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801881c:	4605      	mov	r5, r0
 801881e:	4608      	mov	r0, r1
 8018820:	b1e9      	cbz	r1, 801885e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8018822:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8018826:	460b      	mov	r3, r1
 8018828:	4622      	mov	r2, r4
 801882a:	f101 0708 	add.w	r7, r1, #8
 801882e:	4626      	mov	r6, r4
 8018830:	6818      	ldr	r0, [r3, #0]
 8018832:	6859      	ldr	r1, [r3, #4]
 8018834:	3308      	adds	r3, #8
 8018836:	c603      	stmia	r6!, {r0, r1}
 8018838:	42bb      	cmp	r3, r7
 801883a:	4634      	mov	r4, r6
 801883c:	d1f7      	bne.n	801882e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801883e:	6818      	ldr	r0, [r3, #0]
 8018840:	6030      	str	r0, [r6, #0]
 8018842:	4610      	mov	r0, r2
 8018844:	889b      	ldrh	r3, [r3, #4]
 8018846:	80b3      	strh	r3, [r6, #4]
 8018848:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801884c:	015b      	lsls	r3, r3, #5
 801884e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018852:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8018856:	430b      	orrs	r3, r1
 8018858:	425b      	negs	r3, r3
 801885a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801885e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018860 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018860:	b538      	push	{r3, r4, r5, lr}
 8018862:	460c      	mov	r4, r1
 8018864:	6811      	ldr	r1, [r2, #0]
 8018866:	4610      	mov	r0, r2
 8018868:	68cd      	ldr	r5, [r1, #12]
 801886a:	4619      	mov	r1, r3
 801886c:	47a8      	blx	r5
 801886e:	2800      	cmp	r0, #0
 8018870:	bf08      	it	eq
 8018872:	4620      	moveq	r0, r4
 8018874:	bd38      	pop	{r3, r4, r5, pc}
	...

08018878 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801887a:	4604      	mov	r4, r0
 801887c:	4615      	mov	r5, r2
 801887e:	4608      	mov	r0, r1
 8018880:	b93a      	cbnz	r2, 8018892 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018882:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018886:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801888a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801888e:	4628      	mov	r0, r5
 8018890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018892:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8018896:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801889a:	8893      	ldrh	r3, [r2, #4]
 801889c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80188a0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80188a4:	79ee      	ldrb	r6, [r5, #7]
 80188a6:	4316      	orrs	r6, r2
 80188a8:	19da      	adds	r2, r3, r7
 80188aa:	b291      	uxth	r1, r2
 80188ac:	291d      	cmp	r1, #29
 80188ae:	b2b7      	uxth	r7, r6
 80188b0:	d879      	bhi.n	80189a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80188b2:	2201      	movs	r2, #1
 80188b4:	408a      	lsls	r2, r1
 80188b6:	4974      	ldr	r1, [pc, #464]	; (8018a88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 80188b8:	10f6      	asrs	r6, r6, #3
 80188ba:	420a      	tst	r2, r1
 80188bc:	d12d      	bne.n	801891a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 80188be:	f412 7f60 	tst.w	r2, #896	; 0x380
 80188c2:	d070      	beq.n	80189a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80188c4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80188c8:	462b      	mov	r3, r5
 80188ca:	f105 0e08 	add.w	lr, r5, #8
 80188ce:	4615      	mov	r5, r2
 80188d0:	4694      	mov	ip, r2
 80188d2:	6818      	ldr	r0, [r3, #0]
 80188d4:	6859      	ldr	r1, [r3, #4]
 80188d6:	3308      	adds	r3, #8
 80188d8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80188dc:	4573      	cmp	r3, lr
 80188de:	4662      	mov	r2, ip
 80188e0:	d1f6      	bne.n	80188d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80188e2:	6818      	ldr	r0, [r3, #0]
 80188e4:	f8cc 0000 	str.w	r0, [ip]
 80188e8:	889b      	ldrh	r3, [r3, #4]
 80188ea:	f8ac 3004 	strh.w	r3, [ip, #4]
 80188ee:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80188f2:	b2b3      	uxth	r3, r6
 80188f4:	1aca      	subs	r2, r1, r3
 80188f6:	b292      	uxth	r2, r2
 80188f8:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80188fc:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8018900:	10d2      	asrs	r2, r2, #3
 8018902:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8018906:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801890a:	4302      	orrs	r2, r0
 801890c:	1bcf      	subs	r7, r1, r7
 801890e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8018912:	1afb      	subs	r3, r7, r3
 8018914:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018918:	e7b9      	b.n	801888e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801891a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801891c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018920:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8018922:	f640 6333 	movw	r3, #3635	; 0xe33
 8018926:	4299      	cmp	r1, r3
 8018928:	d110      	bne.n	801894c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 801892a:	6803      	ldr	r3, [r0, #0]
 801892c:	68db      	ldr	r3, [r3, #12]
 801892e:	4798      	blx	r3
 8018930:	7b41      	ldrb	r1, [r0, #13]
 8018932:	00cb      	lsls	r3, r1, #3
 8018934:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018938:	7a03      	ldrb	r3, [r0, #8]
 801893a:	0648      	lsls	r0, r1, #25
 801893c:	ea43 0302 	orr.w	r3, r3, r2
 8018940:	bf44      	itt	mi
 8018942:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018946:	b21b      	sxthmi	r3, r3
 8018948:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801894c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8018950:	462a      	mov	r2, r5
 8018952:	443b      	add	r3, r7
 8018954:	4433      	add	r3, r6
 8018956:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801895a:	f105 0c08 	add.w	ip, r5, #8
 801895e:	4635      	mov	r5, r6
 8018960:	b29b      	uxth	r3, r3
 8018962:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018966:	4637      	mov	r7, r6
 8018968:	6810      	ldr	r0, [r2, #0]
 801896a:	6851      	ldr	r1, [r2, #4]
 801896c:	3208      	adds	r2, #8
 801896e:	c703      	stmia	r7!, {r0, r1}
 8018970:	4562      	cmp	r2, ip
 8018972:	463e      	mov	r6, r7
 8018974:	d1f7      	bne.n	8018966 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 8018976:	6810      	ldr	r0, [r2, #0]
 8018978:	6038      	str	r0, [r7, #0]
 801897a:	8892      	ldrh	r2, [r2, #4]
 801897c:	80ba      	strh	r2, [r7, #4]
 801897e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018982:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018986:	10db      	asrs	r3, r3, #3
 8018988:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801898c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018990:	4313      	orrs	r3, r2
 8018992:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018996:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801899a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801899e:	1a9b      	subs	r3, r3, r2
 80189a0:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80189a4:	e773      	b.n	801888e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80189a6:	f640 611b 	movw	r1, #3611	; 0xe1b
 80189aa:	f023 0204 	bic.w	r2, r3, #4
 80189ae:	428a      	cmp	r2, r1
 80189b0:	d003      	beq.n	80189ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 80189b2:	f640 621d 	movw	r2, #3613	; 0xe1d
 80189b6:	4293      	cmp	r3, r2
 80189b8:	d120      	bne.n	80189fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 80189ba:	3b01      	subs	r3, #1
 80189bc:	4602      	mov	r2, r0
 80189be:	b29b      	uxth	r3, r3
 80189c0:	4629      	mov	r1, r5
 80189c2:	4620      	mov	r0, r4
 80189c4:	f7ff ff4c 	bl	8018860 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80189c8:	7b41      	ldrb	r1, [r0, #13]
 80189ca:	00cb      	lsls	r3, r1, #3
 80189cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80189d0:	7a03      	ldrb	r3, [r0, #8]
 80189d2:	0649      	lsls	r1, r1, #25
 80189d4:	ea43 0302 	orr.w	r3, r3, r2
 80189d8:	bf44      	itt	mi
 80189da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80189de:	b21b      	sxthmi	r3, r3
 80189e0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80189e4:	7b6b      	ldrb	r3, [r5, #13]
 80189e6:	7aaa      	ldrb	r2, [r5, #10]
 80189e8:	005b      	lsls	r3, r3, #1
 80189ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80189ee:	4313      	orrs	r3, r2
 80189f0:	115a      	asrs	r2, r3, #5
 80189f2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80189f6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80189fa:	e036      	b.n	8018a6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80189fc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018a00:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018a04:	7a2a      	ldrb	r2, [r5, #8]
 8018a06:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018a0a:	ea42 0201 	orr.w	r2, r2, r1
 8018a0e:	f640 6109 	movw	r1, #3593	; 0xe09
 8018a12:	bf1c      	itt	ne
 8018a14:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8018a18:	b212      	sxthne	r2, r2
 8018a1a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018a1e:	f023 0210 	bic.w	r2, r3, #16
 8018a22:	428a      	cmp	r2, r1
 8018a24:	d003      	beq.n	8018a2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 8018a26:	f640 6213 	movw	r2, #3603	; 0xe13
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d12a      	bne.n	8018a84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 8018a2e:	7b6e      	ldrb	r6, [r5, #13]
 8018a30:	4629      	mov	r1, r5
 8018a32:	0076      	lsls	r6, r6, #1
 8018a34:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018a38:	7aae      	ldrb	r6, [r5, #10]
 8018a3a:	4316      	orrs	r6, r2
 8018a3c:	f640 6213 	movw	r2, #3603	; 0xe13
 8018a40:	4293      	cmp	r3, r2
 8018a42:	bf18      	it	ne
 8018a44:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018a48:	4602      	mov	r2, r0
 8018a4a:	bf14      	ite	ne
 8018a4c:	b29b      	uxthne	r3, r3
 8018a4e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018a52:	4620      	mov	r0, r4
 8018a54:	f7ff ff04 	bl	8018860 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018a58:	7b43      	ldrb	r3, [r0, #13]
 8018a5a:	7a82      	ldrb	r2, [r0, #10]
 8018a5c:	005b      	lsls	r3, r3, #1
 8018a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a62:	4313      	orrs	r3, r2
 8018a64:	1af6      	subs	r6, r6, r3
 8018a66:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8018a6a:	7b69      	ldrb	r1, [r5, #13]
 8018a6c:	00cb      	lsls	r3, r1, #3
 8018a6e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018a72:	7a2b      	ldrb	r3, [r5, #8]
 8018a74:	4313      	orrs	r3, r2
 8018a76:	064a      	lsls	r2, r1, #25
 8018a78:	bf44      	itt	mi
 8018a7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a7e:	b21b      	sxthmi	r3, r3
 8018a80:	1bdb      	subs	r3, r3, r7
 8018a82:	e747      	b.n	8018914 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 8018a84:	2300      	movs	r3, #0
 8018a86:	e7b6      	b.n	80189f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 8018a88:	3fc00079 	.word	0x3fc00079

08018a8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a90:	4604      	mov	r4, r0
 8018a92:	b942      	cbnz	r2, 8018aa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018a98:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018a9c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8018aa0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018aa4:	e047      	b.n	8018b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018aa6:	7b51      	ldrb	r1, [r2, #13]
 8018aa8:	8893      	ldrh	r3, [r2, #4]
 8018aaa:	010d      	lsls	r5, r1, #4
 8018aac:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8018ab0:	79d5      	ldrb	r5, [r2, #7]
 8018ab2:	4305      	orrs	r5, r0
 8018ab4:	2d04      	cmp	r5, #4
 8018ab6:	bfcc      	ite	gt
 8018ab8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018abc:	f04f 0e01 	movle.w	lr, #1
 8018ac0:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018ac4:	f200 80ab 	bhi.w	8018c1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018ac8:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018acc:	4283      	cmp	r3, r0
 8018ace:	d216      	bcs.n	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018ad0:	f240 605b 	movw	r0, #1627	; 0x65b
 8018ad4:	4283      	cmp	r3, r0
 8018ad6:	d859      	bhi.n	8018b8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018ad8:	f240 6057 	movw	r0, #1623	; 0x657
 8018adc:	4283      	cmp	r3, r0
 8018ade:	d20e      	bcs.n	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018ae0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018ae4:	d24a      	bcs.n	8018b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018ae6:	f240 604e 	movw	r0, #1614	; 0x64e
 8018aea:	4283      	cmp	r3, r0
 8018aec:	d207      	bcs.n	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018aee:	f240 601a 	movw	r0, #1562	; 0x61a
 8018af2:	4283      	cmp	r3, r0
 8018af4:	d02a      	beq.n	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018af6:	d821      	bhi.n	8018b3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018af8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018afc:	d35b      	bcc.n	8018bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018afe:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8018b02:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018b06:	f040 80d0 	bne.w	8018caa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018b0a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8018b0e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018b12:	f040 80ca 	bne.w	8018caa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018b16:	00cb      	lsls	r3, r1, #3
 8018b18:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018b1c:	7a13      	ldrb	r3, [r2, #8]
 8018b1e:	0649      	lsls	r1, r1, #25
 8018b20:	ea43 0300 	orr.w	r3, r3, r0
 8018b24:	bf44      	itt	mi
 8018b26:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b2a:	b21b      	sxthmi	r3, r3
 8018b2c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018b30:	1b5d      	subs	r5, r3, r5
 8018b32:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018b36:	4610      	mov	r0, r2
 8018b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b3c:	f240 604b 	movw	r0, #1611	; 0x64b
 8018b40:	4283      	cmp	r3, r0
 8018b42:	d338      	bcc.n	8018bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018b44:	f240 604c 	movw	r0, #1612	; 0x64c
 8018b48:	4283      	cmp	r3, r0
 8018b4a:	d9d8      	bls.n	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b4c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8018b50:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8018b54:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018b58:	f040 80f2 	bne.w	8018d40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8018b5c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018b60:	f040 80ee 	bne.w	8018d40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8018b64:	00cb      	lsls	r3, r1, #3
 8018b66:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018b6a:	7a13      	ldrb	r3, [r2, #8]
 8018b6c:	064e      	lsls	r6, r1, #25
 8018b6e:	ea43 0300 	orr.w	r3, r3, r0
 8018b72:	bf44      	itt	mi
 8018b74:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b78:	b21b      	sxthmi	r3, r3
 8018b7a:	e7d9      	b.n	8018b30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018b7c:	f240 6054 	movw	r0, #1620	; 0x654
 8018b80:	4283      	cmp	r3, r0
 8018b82:	d8e3      	bhi.n	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b84:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018b88:	d9e0      	bls.n	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b8a:	e7b8      	b.n	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b8c:	f240 6074 	movw	r0, #1652	; 0x674
 8018b90:	4283      	cmp	r3, r0
 8018b92:	d0b4      	beq.n	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b94:	d82d      	bhi.n	8018bf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018b96:	f240 605e 	movw	r0, #1630	; 0x65e
 8018b9a:	4283      	cmp	r3, r0
 8018b9c:	d804      	bhi.n	8018ba8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018b9e:	f240 605d 	movw	r0, #1629	; 0x65d
 8018ba2:	4283      	cmp	r3, r0
 8018ba4:	d3d2      	bcc.n	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018ba6:	e7aa      	b.n	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018ba8:	f240 605f 	movw	r0, #1631	; 0x65f
 8018bac:	4283      	cmp	r3, r0
 8018bae:	d0cd      	beq.n	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018bb0:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018bb4:	d0a3      	beq.n	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018bb6:	00cb      	lsls	r3, r1, #3
 8018bb8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018bbc:	7a13      	ldrb	r3, [r2, #8]
 8018bbe:	0649      	lsls	r1, r1, #25
 8018bc0:	ea43 0300 	orr.w	r3, r3, r0
 8018bc4:	bf44      	itt	mi
 8018bc6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018bca:	b21b      	sxthmi	r3, r3
 8018bcc:	1b5d      	subs	r5, r3, r5
 8018bce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018bd2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018bd6:	7b53      	ldrb	r3, [r2, #13]
 8018bd8:	015b      	lsls	r3, r3, #5
 8018bda:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018bde:	7993      	ldrb	r3, [r2, #6]
 8018be0:	430b      	orrs	r3, r1
 8018be2:	2105      	movs	r1, #5
 8018be4:	005b      	lsls	r3, r3, #1
 8018be6:	fb93 f3f1 	sdiv	r3, r3, r1
 8018bea:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018bee:	440b      	add	r3, r1
 8018bf0:	e756      	b.n	8018aa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018bf2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018bf6:	4283      	cmp	r3, r0
 8018bf8:	d809      	bhi.n	8018c0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018bfa:	f240 60df 	movw	r0, #1759	; 0x6df
 8018bfe:	4283      	cmp	r3, r0
 8018c00:	f4bf af7d 	bcs.w	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c04:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018c08:	2b05      	cmp	r3, #5
 8018c0a:	d8d4      	bhi.n	8018bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018c0c:	e777      	b.n	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c0e:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8018c12:	4283      	cmp	r3, r0
 8018c14:	d09a      	beq.n	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c16:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018c1a:	4283      	cmp	r3, r0
 8018c1c:	e7ca      	b.n	8018bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018c1e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8018c22:	d22b      	bcs.n	8018c7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8018c24:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018c28:	4283      	cmp	r3, r0
 8018c2a:	d28f      	bcs.n	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c2c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018c30:	4283      	cmp	r3, r0
 8018c32:	d816      	bhi.n	8018c62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018c34:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018c38:	4283      	cmp	r3, r0
 8018c3a:	f4bf af60 	bcs.w	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c3e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018c42:	4283      	cmp	r3, r0
 8018c44:	d80a      	bhi.n	8018c5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8018c46:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018c4a:	4283      	cmp	r3, r0
 8018c4c:	f4bf af57 	bcs.w	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c50:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018c54:	4283      	cmp	r3, r0
 8018c56:	f43f af79 	beq.w	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c5a:	e7ac      	b.n	8018bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018c5c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018c60:	e7f8      	b.n	8018c54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018c62:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018c66:	4283      	cmp	r3, r0
 8018c68:	d802      	bhi.n	8018c70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018c6a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018c6e:	e798      	b.n	8018ba2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018c70:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018c74:	4283      	cmp	r3, r0
 8018c76:	f47f af42 	bne.w	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c7a:	e767      	b.n	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c7c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018c80:	4283      	cmp	r3, r0
 8018c82:	f43f af63 	beq.w	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c86:	d802      	bhi.n	8018c8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018c88:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018c8c:	e7f2      	b.n	8018c74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018c8e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018c92:	4283      	cmp	r3, r0
 8018c94:	d805      	bhi.n	8018ca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018c96:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018c9a:	4283      	cmp	r3, r0
 8018c9c:	f4ff af2f 	bcc.w	8018afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018ca0:	e754      	b.n	8018b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018ca2:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018ca6:	4283      	cmp	r3, r0
 8018ca8:	e7af      	b.n	8018c0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018caa:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018cae:	4617      	mov	r7, r2
 8018cb0:	4666      	mov	r6, ip
 8018cb2:	f102 0808 	add.w	r8, r2, #8
 8018cb6:	46e6      	mov	lr, ip
 8018cb8:	6838      	ldr	r0, [r7, #0]
 8018cba:	6879      	ldr	r1, [r7, #4]
 8018cbc:	3708      	adds	r7, #8
 8018cbe:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018cc2:	4547      	cmp	r7, r8
 8018cc4:	46f4      	mov	ip, lr
 8018cc6:	d1f6      	bne.n	8018cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018cc8:	6838      	ldr	r0, [r7, #0]
 8018cca:	f8ce 0000 	str.w	r0, [lr]
 8018cce:	88b9      	ldrh	r1, [r7, #4]
 8018cd0:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018cd4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018cd8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018cdc:	d009      	beq.n	8018cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8018cde:	7b51      	ldrb	r1, [r2, #13]
 8018ce0:	7992      	ldrb	r2, [r2, #6]
 8018ce2:	0149      	lsls	r1, r1, #5
 8018ce4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018ce8:	4311      	orrs	r1, r2
 8018cea:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018cee:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018cf2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018cf6:	b2ad      	uxth	r5, r5
 8018cf8:	d00d      	beq.n	8018d16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8018cfa:	442b      	add	r3, r5
 8018cfc:	b29b      	uxth	r3, r3
 8018cfe:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018d02:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018d06:	10db      	asrs	r3, r3, #3
 8018d08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018d0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018d10:	4313      	orrs	r3, r2
 8018d12:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018d16:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018d1a:	00cb      	lsls	r3, r1, #3
 8018d1c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018d20:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018d24:	064f      	lsls	r7, r1, #25
 8018d26:	ea43 0302 	orr.w	r3, r3, r2
 8018d2a:	bf44      	itt	mi
 8018d2c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018d30:	b21b      	sxthmi	r3, r3
 8018d32:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018d36:	1b5b      	subs	r3, r3, r5
 8018d38:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018d3c:	4632      	mov	r2, r6
 8018d3e:	e6fa      	b.n	8018b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018d40:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018d44:	4617      	mov	r7, r2
 8018d46:	4666      	mov	r6, ip
 8018d48:	f102 0908 	add.w	r9, r2, #8
 8018d4c:	46e0      	mov	r8, ip
 8018d4e:	6838      	ldr	r0, [r7, #0]
 8018d50:	6879      	ldr	r1, [r7, #4]
 8018d52:	3708      	adds	r7, #8
 8018d54:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018d58:	454f      	cmp	r7, r9
 8018d5a:	46c4      	mov	ip, r8
 8018d5c:	d1f6      	bne.n	8018d4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8018d5e:	6838      	ldr	r0, [r7, #0]
 8018d60:	f8c8 0000 	str.w	r0, [r8]
 8018d64:	88b9      	ldrh	r1, [r7, #4]
 8018d66:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018d6a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018d6e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018d72:	d009      	beq.n	8018d88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8018d74:	7b51      	ldrb	r1, [r2, #13]
 8018d76:	7992      	ldrb	r2, [r2, #6]
 8018d78:	0149      	lsls	r1, r1, #5
 8018d7a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018d7e:	4311      	orrs	r1, r2
 8018d80:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018d84:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018d88:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018d8c:	d00e      	beq.n	8018dac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8018d8e:	eba3 030e 	sub.w	r3, r3, lr
 8018d92:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018d96:	b29b      	uxth	r3, r3
 8018d98:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018d9c:	10db      	asrs	r3, r3, #3
 8018d9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018da2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018da6:	4313      	orrs	r3, r2
 8018da8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018dac:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018db0:	00cb      	lsls	r3, r1, #3
 8018db2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018db6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018dba:	0648      	lsls	r0, r1, #25
 8018dbc:	ea43 0302 	orr.w	r3, r3, r2
 8018dc0:	bf44      	itt	mi
 8018dc2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018dc6:	b21b      	sxthmi	r3, r3
 8018dc8:	1b5d      	subs	r5, r3, r5
 8018dca:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018dce:	e7b5      	b.n	8018d3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08018dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dd4:	461e      	mov	r6, r3
 8018dd6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018dd8:	4604      	mov	r4, r0
 8018dda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018dde:	4617      	mov	r7, r2
 8018de0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018de4:	f7f7 fc3e 	bl	8010664 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018de8:	4605      	mov	r5, r0
 8018dea:	b918      	cbnz	r0, 8018df4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018dec:	6030      	str	r0, [r6, #0]
 8018dee:	4628      	mov	r0, r5
 8018df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018df4:	683b      	ldr	r3, [r7, #0]
 8018df6:	4601      	mov	r1, r0
 8018df8:	68db      	ldr	r3, [r3, #12]
 8018dfa:	4638      	mov	r0, r7
 8018dfc:	4798      	blx	r3
 8018dfe:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018e06:	4602      	mov	r2, r0
 8018e08:	6030      	str	r0, [r6, #0]
 8018e0a:	d213      	bcs.n	8018e34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8018e0c:	4643      	mov	r3, r8
 8018e0e:	4639      	mov	r1, r7
 8018e10:	4620      	mov	r0, r4
 8018e12:	f7ff fe3b 	bl	8018a8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018e16:	6030      	str	r0, [r6, #0]
 8018e18:	6833      	ldr	r3, [r6, #0]
 8018e1a:	b143      	cbz	r3, 8018e2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8018e1c:	7b5a      	ldrb	r2, [r3, #13]
 8018e1e:	7a9b      	ldrb	r3, [r3, #10]
 8018e20:	0052      	lsls	r2, r2, #1
 8018e22:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018e26:	4313      	orrs	r3, r2
 8018e28:	bf0c      	ite	eq
 8018e2a:	2301      	moveq	r3, #1
 8018e2c:	2300      	movne	r3, #0
 8018e2e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8018e32:	e7dc      	b.n	8018dee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8018e34:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018e38:	b29b      	uxth	r3, r3
 8018e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8018e3c:	d804      	bhi.n	8018e48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018e3e:	4639      	mov	r1, r7
 8018e40:	4620      	mov	r0, r4
 8018e42:	f7ff fd19 	bl	8018878 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018e46:	e7e6      	b.n	8018e16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018e48:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d0e3      	beq.n	8018e18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018e50:	f640 1302 	movw	r3, #2306	; 0x902
 8018e54:	429d      	cmp	r5, r3
 8018e56:	d1df      	bne.n	8018e18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018e58:	4601      	mov	r1, r0
 8018e5a:	4620      	mov	r0, r4
 8018e5c:	f7ff fcdd 	bl	801881a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018e60:	e7d9      	b.n	8018e16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08018e62 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018e62:	b510      	push	{r4, lr}
 8018e64:	4604      	mov	r4, r0
 8018e66:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8018e6a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018e6c:	b1f1      	cbz	r1, 8018eac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8018e6e:	2b0a      	cmp	r3, #10
 8018e70:	d02f      	beq.n	8018ed2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8018e72:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8018e74:	3901      	subs	r1, #1
 8018e76:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018e7a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8018e7c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8018e80:	1c51      	adds	r1, r2, #1
 8018e82:	b289      	uxth	r1, r1
 8018e84:	2901      	cmp	r1, #1
 8018e86:	bf84      	itt	hi
 8018e88:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018e8c:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8018e8e:	f103 0201 	add.w	r2, r3, #1
 8018e92:	8722      	strh	r2, [r4, #56]	; 0x38
 8018e94:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018e96:	bf98      	it	ls
 8018e98:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8018e9a:	4413      	add	r3, r2
 8018e9c:	b29b      	uxth	r3, r3
 8018e9e:	2b09      	cmp	r3, #9
 8018ea0:	bf88      	it	hi
 8018ea2:	3b0a      	subhi	r3, #10
 8018ea4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018ea8:	8458      	strh	r0, [r3, #34]	; 0x22
 8018eaa:	e7dc      	b.n	8018e66 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018eac:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018eae:	2b0a      	cmp	r3, #10
 8018eb0:	d00f      	beq.n	8018ed2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	f7ff fc70 	bl	8018798 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018eb8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018eba:	1c5a      	adds	r2, r3, #1
 8018ebc:	8722      	strh	r2, [r4, #56]	; 0x38
 8018ebe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018ec0:	4413      	add	r3, r2
 8018ec2:	b29b      	uxth	r3, r3
 8018ec4:	2b09      	cmp	r3, #9
 8018ec6:	bf88      	it	hi
 8018ec8:	3b0a      	subhi	r3, #10
 8018eca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018ece:	8458      	strh	r0, [r3, #34]	; 0x22
 8018ed0:	e7ec      	b.n	8018eac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8018ed2:	bd10      	pop	{r4, pc}

08018ed4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018ed4:	b538      	push	{r3, r4, r5, lr}
 8018ed6:	4604      	mov	r4, r0
 8018ed8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018eda:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018ede:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8018ee0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8018ee2:	3a01      	subs	r2, #1
 8018ee4:	8702      	strh	r2, [r0, #56]	; 0x38
 8018ee6:	1c5a      	adds	r2, r3, #1
 8018ee8:	b292      	uxth	r2, r2
 8018eea:	2a09      	cmp	r2, #9
 8018eec:	bf86      	itte	hi
 8018eee:	3b09      	subhi	r3, #9
 8018ef0:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018ef2:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8018ef4:	f7ff ffb5 	bl	8018e62 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018ef8:	8c23      	ldrh	r3, [r4, #32]
 8018efa:	2b01      	cmp	r3, #1
 8018efc:	bf9c      	itt	ls
 8018efe:	3301      	addls	r3, #1
 8018f00:	8423      	strhls	r3, [r4, #32]
 8018f02:	8be3      	ldrh	r3, [r4, #30]
 8018f04:	b90b      	cbnz	r3, 8018f0a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8018f06:	2302      	movs	r3, #2
 8018f08:	83e3      	strh	r3, [r4, #30]
 8018f0a:	8be3      	ldrh	r3, [r4, #30]
 8018f0c:	4628      	mov	r0, r5
 8018f0e:	3b01      	subs	r3, #1
 8018f10:	b29b      	uxth	r3, r3
 8018f12:	83e3      	strh	r3, [r4, #30]
 8018f14:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018f18:	8365      	strh	r5, [r4, #26]
 8018f1a:	bd38      	pop	{r3, r4, r5, pc}

08018f1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018f1c:	428a      	cmp	r2, r1
 8018f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f22:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8018f24:	d931      	bls.n	8018f8a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8018f26:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8018f28:	1a54      	subs	r4, r2, r1
 8018f2a:	19ee      	adds	r6, r5, r7
 8018f2c:	3e01      	subs	r6, #1
 8018f2e:	fa1f fe84 	uxth.w	lr, r4
 8018f32:	b2b4      	uxth	r4, r6
 8018f34:	eba4 090e 	sub.w	r9, r4, lr
 8018f38:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8018f3c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8018f40:	fa1f f989 	uxth.w	r9, r9
 8018f44:	2c09      	cmp	r4, #9
 8018f46:	4626      	mov	r6, r4
 8018f48:	bf88      	it	hi
 8018f4a:	f1a4 060a 	subhi.w	r6, r4, #10
 8018f4e:	f1bc 0f00 	cmp.w	ip, #0
 8018f52:	bf08      	it	eq
 8018f54:	f04f 0c02 	moveq.w	ip, #2
 8018f58:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018f5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018f60:	3c01      	subs	r4, #1
 8018f62:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8018f66:	fa1f fc8c 	uxth.w	ip, ip
 8018f6a:	b2a4      	uxth	r4, r4
 8018f6c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018f70:	454c      	cmp	r4, r9
 8018f72:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8018f76:	d1e5      	bne.n	8018f44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8018f78:	eba5 050e 	sub.w	r5, r5, lr
 8018f7c:	eb0e 0408 	add.w	r4, lr, r8
 8018f80:	8705      	strh	r5, [r0, #56]	; 0x38
 8018f82:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8018f86:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8018f8a:	250a      	movs	r5, #10
 8018f8c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8018f8e:	1a64      	subs	r4, r4, r1
 8018f90:	4439      	add	r1, r7
 8018f92:	b289      	uxth	r1, r1
 8018f94:	2909      	cmp	r1, #9
 8018f96:	bf88      	it	hi
 8018f98:	390a      	subhi	r1, #10
 8018f9a:	8704      	strh	r4, [r0, #56]	; 0x38
 8018f9c:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018f9e:	b18a      	cbz	r2, 8018fc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8018fa0:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8018fa2:	3a01      	subs	r2, #1
 8018fa4:	3101      	adds	r1, #1
 8018fa6:	b292      	uxth	r2, r2
 8018fa8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018fac:	8701      	strh	r1, [r0, #56]	; 0x38
 8018fae:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018fb0:	b901      	cbnz	r1, 8018fb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8018fb2:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018fb4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018fb6:	3901      	subs	r1, #1
 8018fb8:	b289      	uxth	r1, r1
 8018fba:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018fbc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018fc0:	844c      	strh	r4, [r1, #34]	; 0x22
 8018fc2:	e7ec      	b.n	8018f9e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8018fc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fc8:	f7ff bf4b 	b.w	8018e62 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018fcc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018fcc:	b570      	push	{r4, r5, r6, lr}
 8018fce:	2500      	movs	r5, #0
 8018fd0:	4295      	cmp	r5, r2
 8018fd2:	d011      	beq.n	8018ff8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018fd4:	8bc4      	ldrh	r4, [r0, #30]
 8018fd6:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018fda:	4414      	add	r4, r2
 8018fdc:	3c01      	subs	r4, #1
 8018fde:	1b64      	subs	r4, r4, r5
 8018fe0:	b2a4      	uxth	r4, r4
 8018fe2:	2c01      	cmp	r4, #1
 8018fe4:	bf88      	it	hi
 8018fe6:	3c02      	subhi	r4, #2
 8018fe8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018fec:	8b64      	ldrh	r4, [r4, #26]
 8018fee:	42b4      	cmp	r4, r6
 8018ff0:	d117      	bne.n	8019022 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018ff2:	3501      	adds	r5, #1
 8018ff4:	b2ad      	uxth	r5, r5
 8018ff6:	e7eb      	b.n	8018fd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018ff8:	2400      	movs	r4, #0
 8018ffa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018ffe:	4413      	add	r3, r2
 8019000:	b2a2      	uxth	r2, r4
 8019002:	429a      	cmp	r2, r3
 8019004:	da0f      	bge.n	8019026 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019006:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019008:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801900c:	4432      	add	r2, r6
 801900e:	b292      	uxth	r2, r2
 8019010:	2a09      	cmp	r2, #9
 8019012:	bf88      	it	hi
 8019014:	3a0a      	subhi	r2, #10
 8019016:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801901a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801901c:	3401      	adds	r4, #1
 801901e:	42aa      	cmp	r2, r5
 8019020:	d0ee      	beq.n	8019000 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019022:	2000      	movs	r0, #0
 8019024:	bd70      	pop	{r4, r5, r6, pc}
 8019026:	2001      	movs	r0, #1
 8019028:	e7fc      	b.n	8019024 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801902a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801902a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801902e:	4605      	mov	r5, r0
 8019030:	4616      	mov	r6, r2
 8019032:	1c8c      	adds	r4, r1, #2
 8019034:	8809      	ldrh	r1, [r1, #0]
 8019036:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801903a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801903e:	42b3      	cmp	r3, r6
 8019040:	d124      	bne.n	801908c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019042:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019046:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801904a:	f001 070f 	and.w	r7, r1, #15
 801904e:	f8cd 8000 	str.w	r8, [sp]
 8019052:	464b      	mov	r3, r9
 8019054:	4652      	mov	r2, sl
 8019056:	4621      	mov	r1, r4
 8019058:	4628      	mov	r0, r5
 801905a:	f7ff ffb7 	bl	8018fcc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801905e:	4683      	mov	fp, r0
 8019060:	b168      	cbz	r0, 801907e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019062:	eb0a 0109 	add.w	r1, sl, r9
 8019066:	4441      	add	r1, r8
 8019068:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801906c:	463a      	mov	r2, r7
 801906e:	4649      	mov	r1, r9
 8019070:	4628      	mov	r0, r5
 8019072:	f7ff ff53 	bl	8018f1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019076:	4658      	mov	r0, fp
 8019078:	b003      	add	sp, #12
 801907a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801907e:	eb07 010a 	add.w	r1, r7, sl
 8019082:	4449      	add	r1, r9
 8019084:	4441      	add	r1, r8
 8019086:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801908a:	e7d2      	b.n	8019032 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801908c:	f04f 0b00 	mov.w	fp, #0
 8019090:	e7f1      	b.n	8019076 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019092 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019092:	b570      	push	{r4, r5, r6, lr}
 8019094:	8810      	ldrh	r0, [r2, #0]
 8019096:	4298      	cmp	r0, r3
 8019098:	d817      	bhi.n	80190ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801909a:	1e48      	subs	r0, r1, #1
 801909c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80190a0:	4298      	cmp	r0, r3
 80190a2:	d312      	bcc.n	80190ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80190a4:	2400      	movs	r4, #0
 80190a6:	428c      	cmp	r4, r1
 80190a8:	d20f      	bcs.n	80190ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80190aa:	1860      	adds	r0, r4, r1
 80190ac:	1040      	asrs	r0, r0, #1
 80190ae:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80190b2:	0085      	lsls	r5, r0, #2
 80190b4:	42b3      	cmp	r3, r6
 80190b6:	d902      	bls.n	80190be <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80190b8:	3001      	adds	r0, #1
 80190ba:	b284      	uxth	r4, r0
 80190bc:	e7f3      	b.n	80190a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80190be:	d201      	bcs.n	80190c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80190c0:	b281      	uxth	r1, r0
 80190c2:	e7f0      	b.n	80190a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80190c4:	442a      	add	r2, r5
 80190c6:	8850      	ldrh	r0, [r2, #2]
 80190c8:	bd70      	pop	{r4, r5, r6, pc}
 80190ca:	2000      	movs	r0, #0
 80190cc:	e7fc      	b.n	80190c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080190ce <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80190ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190d2:	4604      	mov	r4, r0
 80190d4:	260b      	movs	r6, #11
 80190d6:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80190d8:	886f      	ldrh	r7, [r5, #2]
 80190da:	087f      	lsrs	r7, r7, #1
 80190dc:	3e01      	subs	r6, #1
 80190de:	d013      	beq.n	8019108 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80190e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80190e2:	462a      	mov	r2, r5
 80190e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80190e8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80190ec:	4639      	mov	r1, r7
 80190ee:	4643      	mov	r3, r8
 80190f0:	4620      	mov	r0, r4
 80190f2:	f7ff ffce 	bl	8019092 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80190f6:	b138      	cbz	r0, 8019108 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80190f8:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80190fc:	4642      	mov	r2, r8
 80190fe:	4620      	mov	r0, r4
 8019100:	f7ff ff93 	bl	801902a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019104:	2800      	cmp	r0, #0
 8019106:	d1e9      	bne.n	80190dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801910c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801910c:	b570      	push	{r4, r5, r6, lr}
 801910e:	694a      	ldr	r2, [r1, #20]
 8019110:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019112:	684b      	ldr	r3, [r1, #4]
 8019114:	1b54      	subs	r4, r2, r5
 8019116:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019118:	f000 8107 	beq.w	801932a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801911c:	1b9b      	subs	r3, r3, r6
 801911e:	d003      	beq.n	8019128 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019120:	2210      	movs	r2, #16
 8019122:	4363      	muls	r3, r4
 8019124:	fb93 f3f2 	sdiv	r3, r3, r2
 8019128:	680c      	ldr	r4, [r1, #0]
 801912a:	698a      	ldr	r2, [r1, #24]
 801912c:	1b65      	subs	r5, r4, r5
 801912e:	f000 80fe 	beq.w	801932e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8019132:	1b92      	subs	r2, r2, r6
 8019134:	d003      	beq.n	801913e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019136:	2410      	movs	r4, #16
 8019138:	436a      	muls	r2, r5
 801913a:	fb92 f2f4 	sdiv	r2, r2, r4
 801913e:	1a9b      	subs	r3, r3, r2
 8019140:	ee07 3a90 	vmov	s15, r3
 8019144:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801936c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8019148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801914c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019150:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019154:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019158:	460a      	mov	r2, r1
 801915a:	eeb1 6a43 	vneg.f32	s12, s6
 801915e:	4603      	mov	r3, r0
 8019160:	f100 040c 	add.w	r4, r0, #12
 8019164:	edd2 7a02 	vldr	s15, [r2, #8]
 8019168:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801916c:	ece3 6a01 	vstmia	r3!, {s13}
 8019170:	edd2 7a03 	vldr	s15, [r2, #12]
 8019174:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019178:	edc3 7a02 	vstr	s15, [r3, #8]
 801917c:	edd2 7a04 	vldr	s15, [r2, #16]
 8019180:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019184:	429c      	cmp	r4, r3
 8019186:	edc3 7a05 	vstr	s15, [r3, #20]
 801918a:	f102 0214 	add.w	r2, r2, #20
 801918e:	d1e9      	bne.n	8019164 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019190:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019192:	698b      	ldr	r3, [r1, #24]
 8019194:	edd0 4a02 	vldr	s9, [r0, #8]
 8019198:	1a9b      	subs	r3, r3, r2
 801919a:	ee07 3a90 	vmov	s15, r3
 801919e:	684b      	ldr	r3, [r1, #4]
 80191a0:	edd0 3a00 	vldr	s7, [r0]
 80191a4:	1a9b      	subs	r3, r3, r2
 80191a6:	edd0 6a01 	vldr	s13, [r0, #4]
 80191aa:	ee07 3a10 	vmov	s14, r3
 80191ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191b2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80191b6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80191ba:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80191be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191c2:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80191c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80191ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80191ce:	ee67 7a83 	vmul.f32	s15, s15, s6
 80191d2:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80191d6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80191d8:	694a      	ldr	r2, [r1, #20]
 80191da:	ed90 5a05 	vldr	s10, [r0, #20]
 80191de:	1b13      	subs	r3, r2, r4
 80191e0:	ee07 3a10 	vmov	s14, r3
 80191e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80191ec:	680b      	ldr	r3, [r1, #0]
 80191ee:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80191f2:	1b1b      	subs	r3, r3, r4
 80191f4:	ee07 3a10 	vmov	s14, r3
 80191f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019200:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019204:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019208:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801920c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801920e:	698b      	ldr	r3, [r1, #24]
 8019210:	ed90 2a03 	vldr	s4, [r0, #12]
 8019214:	1a9b      	subs	r3, r3, r2
 8019216:	ee06 3a90 	vmov	s13, r3
 801921a:	684b      	ldr	r3, [r1, #4]
 801921c:	edd0 5a04 	vldr	s11, [r0, #16]
 8019220:	1a9b      	subs	r3, r3, r2
 8019222:	ee07 3a10 	vmov	s14, r3
 8019226:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801922a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801922e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019232:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801923a:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801923e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019242:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019246:	ee66 6a83 	vmul.f32	s13, s13, s6
 801924a:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801924e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019250:	694a      	ldr	r2, [r1, #20]
 8019252:	ed90 1a07 	vldr	s2, [r0, #28]
 8019256:	1b13      	subs	r3, r2, r4
 8019258:	ee07 3a10 	vmov	s14, r3
 801925c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019260:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019264:	680b      	ldr	r3, [r1, #0]
 8019266:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801926a:	1b1b      	subs	r3, r3, r4
 801926c:	ee07 3a10 	vmov	s14, r3
 8019270:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019274:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019278:	eea5 5a87 	vfma.f32	s10, s11, s14
 801927c:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019280:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019284:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019286:	698b      	ldr	r3, [r1, #24]
 8019288:	edd0 5a08 	vldr	s11, [r0, #32]
 801928c:	1a9b      	subs	r3, r3, r2
 801928e:	ee07 3a10 	vmov	s14, r3
 8019292:	684b      	ldr	r3, [r1, #4]
 8019294:	edd0 2a06 	vldr	s5, [r0, #24]
 8019298:	1a9b      	subs	r3, r3, r2
 801929a:	ee01 3a90 	vmov	s3, r3
 801929e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80192a2:	ee31 1a65 	vsub.f32	s2, s2, s11
 80192a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80192aa:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80192ae:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80192b2:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80192b6:	ee61 1a84 	vmul.f32	s3, s3, s8
 80192ba:	eea1 7a21 	vfma.f32	s14, s2, s3
 80192be:	ee27 7a03 	vmul.f32	s14, s14, s6
 80192c2:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80192c6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80192c8:	694a      	ldr	r2, [r1, #20]
 80192ca:	1b13      	subs	r3, r2, r4
 80192cc:	ee03 3a10 	vmov	s6, r3
 80192d0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80192d4:	ee23 3a04 	vmul.f32	s6, s6, s8
 80192d8:	680b      	ldr	r3, [r1, #0]
 80192da:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80192de:	1b1b      	subs	r3, r3, r4
 80192e0:	ee03 3a10 	vmov	s6, r3
 80192e4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80192e8:	ee23 4a04 	vmul.f32	s8, s6, s8
 80192ec:	eee1 5a04 	vfma.f32	s11, s2, s8
 80192f0:	ee25 6a86 	vmul.f32	s12, s11, s12
 80192f4:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80192f8:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80192fc:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019304:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8019308:	dd13      	ble.n	8019332 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801930a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801930e:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019312:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801931a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801931e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019320:	dd15      	ble.n	801934e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019326:	6403      	str	r3, [r0, #64]	; 0x40
 8019328:	bd70      	pop	{r4, r5, r6, pc}
 801932a:	4623      	mov	r3, r4
 801932c:	e6fc      	b.n	8019128 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801932e:	462a      	mov	r2, r5
 8019330:	e705      	b.n	801913e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019332:	d502      	bpl.n	801933a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8019334:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019338:	e7e9      	b.n	801930e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801933a:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801933e:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019342:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801934a:	dade      	bge.n	801930a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801934c:	e7f2      	b.n	8019334 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801934e:	d502      	bpl.n	8019356 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8019350:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019354:	e7e7      	b.n	8019326 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8019356:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801935a:	eee3 4a86 	vfma.f32	s9, s7, s12
 801935e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019366:	dadc      	bge.n	8019322 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8019368:	e7f2      	b.n	8019350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801936a:	bf00      	nop
 801936c:	3d800000 	.word	0x3d800000

08019370 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019374:	2714      	movs	r7, #20
 8019376:	435f      	muls	r7, r3
 8019378:	eb02 0c07 	add.w	ip, r2, r7
 801937c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019380:	f115 0e0f 	adds.w	lr, r5, #15
 8019384:	f100 80a2 	bmi.w	80194cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019388:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801938c:	2614      	movs	r6, #20
 801938e:	9c08      	ldr	r4, [sp, #32]
 8019390:	f8c0 e014 	str.w	lr, [r0, #20]
 8019394:	4366      	muls	r6, r4
 8019396:	eb02 0806 	add.w	r8, r2, r6
 801939a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801939e:	f115 040f 	adds.w	r4, r5, #15
 80193a2:	f100 809f 	bmi.w	80194e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80193a6:	1124      	asrs	r4, r4, #4
 80193a8:	eba4 040e 	sub.w	r4, r4, lr
 80193ac:	6184      	str	r4, [r0, #24]
 80193ae:	2c00      	cmp	r4, #0
 80193b0:	f000 808a 	beq.w	80194c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80193b4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80193b8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80193bc:	5995      	ldr	r5, [r2, r6]
 80193be:	eba4 0809 	sub.w	r8, r4, r9
 80193c2:	59d4      	ldr	r4, [r2, r7]
 80193c4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80193c8:	eba5 0a04 	sub.w	sl, r5, r4
 80193cc:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80193d0:	fb0e fe05 	mul.w	lr, lr, r5
 80193d4:	fb0a ee19 	mls	lr, sl, r9, lr
 80193d8:	fb08 e404 	mla	r4, r8, r4, lr
 80193dc:	3c01      	subs	r4, #1
 80193de:	19a4      	adds	r4, r4, r6
 80193e0:	f100 808c 	bmi.w	80194fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80193e4:	fb94 fef6 	sdiv	lr, r4, r6
 80193e8:	fb06 441e 	mls	r4, r6, lr, r4
 80193ec:	f8c0 e000 	str.w	lr, [r0]
 80193f0:	6104      	str	r4, [r0, #16]
 80193f2:	2d00      	cmp	r5, #0
 80193f4:	f2c0 8095 	blt.w	8019522 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80193f8:	fb95 f4f6 	sdiv	r4, r5, r6
 80193fc:	fb06 5514 	mls	r5, r6, r4, r5
 8019400:	6044      	str	r4, [r0, #4]
 8019402:	6085      	str	r5, [r0, #8]
 8019404:	60c6      	str	r6, [r0, #12]
 8019406:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801940a:	6945      	ldr	r5, [r0, #20]
 801940c:	59d2      	ldr	r2, [r2, r7]
 801940e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019412:	ee07 4a10 	vmov	s14, r4
 8019416:	6804      	ldr	r4, [r0, #0]
 8019418:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8019544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801941c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019420:	ee07 2a90 	vmov	s15, r2
 8019424:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801942c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019430:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019434:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801943c:	edd3 6a00 	vldr	s13, [r3]
 8019440:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019444:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8019448:	eee6 6a27 	vfma.f32	s13, s12, s15
 801944c:	edc0 6a07 	vstr	s13, [r0, #28]
 8019450:	edd0 6a01 	vldr	s13, [r0, #4]
 8019454:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8019458:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801945c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019460:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019464:	ed80 6a08 	vstr	s12, [r0, #32]
 8019468:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801946a:	6242      	str	r2, [r0, #36]	; 0x24
 801946c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8019470:	ed93 6a03 	vldr	s12, [r3, #12]
 8019474:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019478:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801947c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019480:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8019484:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019488:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801948c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019490:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8019494:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019496:	6302      	str	r2, [r0, #48]	; 0x30
 8019498:	ed93 6a06 	vldr	s12, [r3, #24]
 801949c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80194a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80194a4:	eeb0 7a46 	vmov.f32	s14, s12
 80194a8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80194ac:	eea6 7a27 	vfma.f32	s14, s12, s15
 80194b0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80194b4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80194b8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80194bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80194c0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80194c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80194c6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80194c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194cc:	2410      	movs	r4, #16
 80194ce:	f1c5 0501 	rsb	r5, r5, #1
 80194d2:	f015 050f 	ands.w	r5, r5, #15
 80194d6:	fb9e fef4 	sdiv	lr, lr, r4
 80194da:	bf18      	it	ne
 80194dc:	2501      	movne	r5, #1
 80194de:	ebae 0e05 	sub.w	lr, lr, r5
 80194e2:	e753      	b.n	801938c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80194e4:	f04f 0910 	mov.w	r9, #16
 80194e8:	f1c5 0501 	rsb	r5, r5, #1
 80194ec:	f015 050f 	ands.w	r5, r5, #15
 80194f0:	fb94 f4f9 	sdiv	r4, r4, r9
 80194f4:	bf18      	it	ne
 80194f6:	2501      	movne	r5, #1
 80194f8:	1b64      	subs	r4, r4, r5
 80194fa:	e755      	b.n	80193a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80194fc:	4264      	negs	r4, r4
 80194fe:	fb94 fef6 	sdiv	lr, r4, r6
 8019502:	fb06 441e 	mls	r4, r6, lr, r4
 8019506:	f1ce 0800 	rsb	r8, lr, #0
 801950a:	f8c0 8000 	str.w	r8, [r0]
 801950e:	6104      	str	r4, [r0, #16]
 8019510:	2c00      	cmp	r4, #0
 8019512:	f43f af6e 	beq.w	80193f2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8019516:	ea6f 0e0e 	mvn.w	lr, lr
 801951a:	1b34      	subs	r4, r6, r4
 801951c:	f8c0 e000 	str.w	lr, [r0]
 8019520:	e766      	b.n	80193f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8019522:	426d      	negs	r5, r5
 8019524:	fb95 f4f6 	sdiv	r4, r5, r6
 8019528:	fb06 5514 	mls	r5, r6, r4, r5
 801952c:	f1c4 0e00 	rsb	lr, r4, #0
 8019530:	f8c0 e004 	str.w	lr, [r0, #4]
 8019534:	6085      	str	r5, [r0, #8]
 8019536:	2d00      	cmp	r5, #0
 8019538:	f43f af64 	beq.w	8019404 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801953c:	43e4      	mvns	r4, r4
 801953e:	1b75      	subs	r5, r6, r5
 8019540:	6044      	str	r4, [r0, #4]
 8019542:	e75e      	b.n	8019402 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019544:	3d800000 	.word	0x3d800000

08019548 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019548:	4b01      	ldr	r3, [pc, #4]	; (8019550 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801954a:	6018      	str	r0, [r3, #0]
 801954c:	4770      	bx	lr
 801954e:	bf00      	nop
 8019550:	2004e180 	.word	0x2004e180

08019554 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019554:	4b06      	ldr	r3, [pc, #24]	; (8019570 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019556:	881a      	ldrh	r2, [r3, #0]
 8019558:	4282      	cmp	r2, r0
 801955a:	d807      	bhi.n	801956c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801955c:	4b05      	ldr	r3, [pc, #20]	; (8019574 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801955e:	881b      	ldrh	r3, [r3, #0]
 8019560:	4413      	add	r3, r2
 8019562:	4298      	cmp	r0, r3
 8019564:	bfac      	ite	ge
 8019566:	2000      	movge	r0, #0
 8019568:	2001      	movlt	r0, #1
 801956a:	4770      	bx	lr
 801956c:	2000      	movs	r0, #0
 801956e:	4770      	bx	lr
 8019570:	2004e1a0 	.word	0x2004e1a0
 8019574:	2004e1a4 	.word	0x2004e1a4

08019578 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019578:	b508      	push	{r3, lr}
 801957a:	4601      	mov	r1, r0
 801957c:	f7ff ffea 	bl	8019554 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019580:	b118      	cbz	r0, 801958a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019582:	4b02      	ldr	r3, [pc, #8]	; (801958c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801958a:	bd08      	pop	{r3, pc}
 801958c:	2004e184 	.word	0x2004e184

08019590 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019592:	4c24      	ldr	r4, [pc, #144]	; (8019624 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019594:	6823      	ldr	r3, [r4, #0]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d042      	beq.n	8019620 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801959a:	4a23      	ldr	r2, [pc, #140]	; (8019628 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801959c:	4d23      	ldr	r5, [pc, #140]	; (801962c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801959e:	8811      	ldrh	r1, [r2, #0]
 80195a0:	f8b5 c000 	ldrh.w	ip, [r5]
 80195a4:	4822      	ldr	r0, [pc, #136]	; (8019630 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80195a6:	4461      	add	r1, ip
 80195a8:	1c4a      	adds	r2, r1, #1
 80195aa:	f022 0201 	bic.w	r2, r2, #1
 80195ae:	008f      	lsls	r7, r1, #2
 80195b0:	0412      	lsls	r2, r2, #16
 80195b2:	19de      	adds	r6, r3, r7
 80195b4:	0c12      	lsrs	r2, r2, #16
 80195b6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80195ba:	6006      	str	r6, [r0, #0]
 80195bc:	4e1d      	ldr	r6, [pc, #116]	; (8019634 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80195be:	19da      	adds	r2, r3, r7
 80195c0:	6032      	str	r2, [r6, #0]
 80195c2:	220e      	movs	r2, #14
 80195c4:	fb02 f20c 	mul.w	r2, r2, ip
 80195c8:	3203      	adds	r2, #3
 80195ca:	f022 0203 	bic.w	r2, r2, #3
 80195ce:	443a      	add	r2, r7
 80195d0:	4f19      	ldr	r7, [pc, #100]	; (8019638 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80195d2:	4413      	add	r3, r2
 80195d4:	603b      	str	r3, [r7, #0]
 80195d6:	2300      	movs	r3, #0
 80195d8:	4f18      	ldr	r7, [pc, #96]	; (801963c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80195da:	469c      	mov	ip, r3
 80195dc:	803b      	strh	r3, [r7, #0]
 80195de:	4f18      	ldr	r7, [pc, #96]	; (8019640 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80195e0:	683f      	ldr	r7, [r7, #0]
 80195e2:	1aba      	subs	r2, r7, r2
 80195e4:	4f17      	ldr	r7, [pc, #92]	; (8019644 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80195e6:	603a      	str	r2, [r7, #0]
 80195e8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80195ec:	4a16      	ldr	r2, [pc, #88]	; (8019648 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80195ee:	8013      	strh	r3, [r2, #0]
 80195f0:	428b      	cmp	r3, r1
 80195f2:	d10d      	bne.n	8019610 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80195f4:	2300      	movs	r3, #0
 80195f6:	240e      	movs	r4, #14
 80195f8:	882d      	ldrh	r5, [r5, #0]
 80195fa:	6830      	ldr	r0, [r6, #0]
 80195fc:	429d      	cmp	r5, r3
 80195fe:	d90f      	bls.n	8019620 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019600:	fb04 0203 	mla	r2, r4, r3, r0
 8019604:	7b11      	ldrb	r1, [r2, #12]
 8019606:	3301      	adds	r3, #1
 8019608:	f36f 1145 	bfc	r1, #5, #1
 801960c:	7311      	strb	r1, [r2, #12]
 801960e:	e7f5      	b.n	80195fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019610:	6822      	ldr	r2, [r4, #0]
 8019612:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019616:	6802      	ldr	r2, [r0, #0]
 8019618:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801961c:	3301      	adds	r3, #1
 801961e:	e7e7      	b.n	80195f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019622:	bf00      	nop
 8019624:	2004e184 	.word	0x2004e184
 8019628:	2004e1a0 	.word	0x2004e1a0
 801962c:	2004e1a4 	.word	0x2004e1a4
 8019630:	2004e198 	.word	0x2004e198
 8019634:	2004e188 	.word	0x2004e188
 8019638:	2004e190 	.word	0x2004e190
 801963c:	2004e1a2 	.word	0x2004e1a2
 8019640:	2004e18c 	.word	0x2004e18c
 8019644:	2004e19c 	.word	0x2004e19c
 8019648:	2004e194 	.word	0x2004e194

0801964c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801964c:	4b06      	ldr	r3, [pc, #24]	; (8019668 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	b943      	cbnz	r3, 8019664 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019652:	b139      	cbz	r1, 8019664 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019654:	4b05      	ldr	r3, [pc, #20]	; (801966c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019656:	801a      	strh	r2, [r3, #0]
 8019658:	4b05      	ldr	r3, [pc, #20]	; (8019670 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801965a:	6019      	str	r1, [r3, #0]
 801965c:	4b05      	ldr	r3, [pc, #20]	; (8019674 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801965e:	6018      	str	r0, [r3, #0]
 8019660:	f7ff bf96 	b.w	8019590 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019664:	4770      	bx	lr
 8019666:	bf00      	nop
 8019668:	2004e190 	.word	0x2004e190
 801966c:	2004e1a4 	.word	0x2004e1a4
 8019670:	2004e18c 	.word	0x2004e18c
 8019674:	2004e184 	.word	0x2004e184

08019678 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019678:	b470      	push	{r4, r5, r6}
 801967a:	4c07      	ldr	r4, [pc, #28]	; (8019698 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801967c:	4605      	mov	r5, r0
 801967e:	6826      	ldr	r6, [r4, #0]
 8019680:	4610      	mov	r0, r2
 8019682:	9a03      	ldr	r2, [sp, #12]
 8019684:	b936      	cbnz	r6, 8019694 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019686:	6025      	str	r5, [r4, #0]
 8019688:	4c04      	ldr	r4, [pc, #16]	; (801969c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801968a:	8021      	strh	r1, [r4, #0]
 801968c:	bc70      	pop	{r4, r5, r6}
 801968e:	4619      	mov	r1, r3
 8019690:	f7ff bfdc 	b.w	801964c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019694:	bc70      	pop	{r4, r5, r6}
 8019696:	4770      	bx	lr
 8019698:	2004e1a8 	.word	0x2004e1a8
 801969c:	2004e1a0 	.word	0x2004e1a0

080196a0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80196a0:	4a12      	ldr	r2, [pc, #72]	; (80196ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80196a2:	8803      	ldrh	r3, [r0, #0]
 80196a4:	8812      	ldrh	r2, [r2, #0]
 80196a6:	4293      	cmp	r3, r2
 80196a8:	d207      	bcs.n	80196ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80196aa:	2114      	movs	r1, #20
 80196ac:	4a10      	ldr	r2, [pc, #64]	; (80196f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80196ae:	6812      	ldr	r2, [r2, #0]
 80196b0:	fb01 2303 	mla	r3, r1, r3, r2
 80196b4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80196b8:	4770      	bx	lr
 80196ba:	490e      	ldr	r1, [pc, #56]	; (80196f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80196bc:	8809      	ldrh	r1, [r1, #0]
 80196be:	4411      	add	r1, r2
 80196c0:	428b      	cmp	r3, r1
 80196c2:	da04      	bge.n	80196ce <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80196c4:	1a9b      	subs	r3, r3, r2
 80196c6:	4a0c      	ldr	r2, [pc, #48]	; (80196f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80196c8:	210e      	movs	r1, #14
 80196ca:	6812      	ldr	r2, [r2, #0]
 80196cc:	e7f0      	b.n	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80196ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80196d2:	4293      	cmp	r3, r2
 80196d4:	d108      	bne.n	80196e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80196d6:	4b09      	ldr	r3, [pc, #36]	; (80196fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80196d8:	781b      	ldrb	r3, [r3, #0]
 80196da:	b91b      	cbnz	r3, 80196e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80196dc:	4b08      	ldr	r3, [pc, #32]	; (8019700 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80196de:	f9b3 0000 	ldrsh.w	r0, [r3]
 80196e2:	4770      	bx	lr
 80196e4:	4b07      	ldr	r3, [pc, #28]	; (8019704 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80196e6:	e7fa      	b.n	80196de <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80196e8:	2000      	movs	r0, #0
 80196ea:	4770      	bx	lr
 80196ec:	2004e1a0 	.word	0x2004e1a0
 80196f0:	2004e1a8 	.word	0x2004e1a8
 80196f4:	2004e1a4 	.word	0x2004e1a4
 80196f8:	2004e188 	.word	0x2004e188
 80196fc:	2004e110 	.word	0x2004e110
 8019700:	2004e112 	.word	0x2004e112
 8019704:	2004e114 	.word	0x2004e114

08019708 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019708:	4a12      	ldr	r2, [pc, #72]	; (8019754 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801970a:	8803      	ldrh	r3, [r0, #0]
 801970c:	8812      	ldrh	r2, [r2, #0]
 801970e:	4293      	cmp	r3, r2
 8019710:	d207      	bcs.n	8019722 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8019712:	2114      	movs	r1, #20
 8019714:	4a10      	ldr	r2, [pc, #64]	; (8019758 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019716:	6812      	ldr	r2, [r2, #0]
 8019718:	fb01 2303 	mla	r3, r1, r3, r2
 801971c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8019720:	4770      	bx	lr
 8019722:	490e      	ldr	r1, [pc, #56]	; (801975c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019724:	8809      	ldrh	r1, [r1, #0]
 8019726:	4411      	add	r1, r2
 8019728:	428b      	cmp	r3, r1
 801972a:	da04      	bge.n	8019736 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801972c:	1a9b      	subs	r3, r3, r2
 801972e:	4a0c      	ldr	r2, [pc, #48]	; (8019760 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019730:	210e      	movs	r1, #14
 8019732:	6812      	ldr	r2, [r2, #0]
 8019734:	e7f0      	b.n	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8019736:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801973a:	4293      	cmp	r3, r2
 801973c:	d108      	bne.n	8019750 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801973e:	4b09      	ldr	r3, [pc, #36]	; (8019764 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019740:	781b      	ldrb	r3, [r3, #0]
 8019742:	b91b      	cbnz	r3, 801974c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8019744:	4b08      	ldr	r3, [pc, #32]	; (8019768 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019746:	f9b3 0000 	ldrsh.w	r0, [r3]
 801974a:	4770      	bx	lr
 801974c:	4b07      	ldr	r3, [pc, #28]	; (801976c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801974e:	e7fa      	b.n	8019746 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019750:	2000      	movs	r0, #0
 8019752:	4770      	bx	lr
 8019754:	2004e1a0 	.word	0x2004e1a0
 8019758:	2004e1a8 	.word	0x2004e1a8
 801975c:	2004e1a4 	.word	0x2004e1a4
 8019760:	2004e188 	.word	0x2004e188
 8019764:	2004e110 	.word	0x2004e110
 8019768:	2004e114 	.word	0x2004e114
 801976c:	2004e112 	.word	0x2004e112

08019770 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019770:	b510      	push	{r4, lr}
 8019772:	4a1f      	ldr	r2, [pc, #124]	; (80197f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8019774:	880b      	ldrh	r3, [r1, #0]
 8019776:	8812      	ldrh	r2, [r2, #0]
 8019778:	4293      	cmp	r3, r2
 801977a:	d213      	bcs.n	80197a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801977c:	2114      	movs	r1, #20
 801977e:	4a1d      	ldr	r2, [pc, #116]	; (80197f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8019780:	6812      	ldr	r2, [r2, #0]
 8019782:	fb01 2303 	mla	r3, r1, r3, r2
 8019786:	8a1a      	ldrh	r2, [r3, #16]
 8019788:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801978c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019790:	8a5b      	ldrh	r3, [r3, #18]
 8019792:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019796:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801979a:	8004      	strh	r4, [r0, #0]
 801979c:	8041      	strh	r1, [r0, #2]
 801979e:	8082      	strh	r2, [r0, #4]
 80197a0:	80c3      	strh	r3, [r0, #6]
 80197a2:	e00e      	b.n	80197c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80197a4:	4914      	ldr	r1, [pc, #80]	; (80197f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80197a6:	8809      	ldrh	r1, [r1, #0]
 80197a8:	4411      	add	r1, r2
 80197aa:	428b      	cmp	r3, r1
 80197ac:	da0a      	bge.n	80197c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80197ae:	210e      	movs	r1, #14
 80197b0:	1a9b      	subs	r3, r3, r2
 80197b2:	4a12      	ldr	r2, [pc, #72]	; (80197fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80197b4:	6812      	ldr	r2, [r2, #0]
 80197b6:	fb01 2303 	mla	r3, r1, r3, r2
 80197ba:	681a      	ldr	r2, [r3, #0]
 80197bc:	6002      	str	r2, [r0, #0]
 80197be:	685a      	ldr	r2, [r3, #4]
 80197c0:	6042      	str	r2, [r0, #4]
 80197c2:	bd10      	pop	{r4, pc}
 80197c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80197c8:	4293      	cmp	r3, r2
 80197ca:	d10b      	bne.n	80197e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 80197cc:	4b0c      	ldr	r3, [pc, #48]	; (8019800 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80197ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 80197d2:	4b0c      	ldr	r3, [pc, #48]	; (8019804 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80197d4:	8081      	strh	r1, [r0, #4]
 80197d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80197da:	2300      	movs	r3, #0
 80197dc:	80c2      	strh	r2, [r0, #6]
 80197de:	8003      	strh	r3, [r0, #0]
 80197e0:	8043      	strh	r3, [r0, #2]
 80197e2:	e7ee      	b.n	80197c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80197e4:	2300      	movs	r3, #0
 80197e6:	8003      	strh	r3, [r0, #0]
 80197e8:	8043      	strh	r3, [r0, #2]
 80197ea:	8083      	strh	r3, [r0, #4]
 80197ec:	e7d8      	b.n	80197a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80197ee:	bf00      	nop
 80197f0:	2004e1a0 	.word	0x2004e1a0
 80197f4:	2004e1a8 	.word	0x2004e1a8
 80197f8:	2004e1a4 	.word	0x2004e1a4
 80197fc:	2004e188 	.word	0x2004e188
 8019800:	2004e10c 	.word	0x2004e10c
 8019804:	2004e10e 	.word	0x2004e10e

08019808 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019808:	4a17      	ldr	r2, [pc, #92]	; (8019868 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801980a:	8803      	ldrh	r3, [r0, #0]
 801980c:	8812      	ldrh	r2, [r2, #0]
 801980e:	4293      	cmp	r3, r2
 8019810:	d213      	bcs.n	801983a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8019812:	2114      	movs	r1, #20
 8019814:	4a15      	ldr	r2, [pc, #84]	; (801986c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019816:	6812      	ldr	r2, [r2, #0]
 8019818:	fb01 2303 	mla	r3, r1, r3, r2
 801981c:	8a1a      	ldrh	r2, [r3, #16]
 801981e:	8919      	ldrh	r1, [r3, #8]
 8019820:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019824:	428a      	cmp	r2, r1
 8019826:	db1d      	blt.n	8019864 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019828:	8a58      	ldrh	r0, [r3, #18]
 801982a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801982e:	895b      	ldrh	r3, [r3, #10]
 8019830:	4298      	cmp	r0, r3
 8019832:	bfac      	ite	ge
 8019834:	2000      	movge	r0, #0
 8019836:	2001      	movlt	r0, #1
 8019838:	4770      	bx	lr
 801983a:	490d      	ldr	r1, [pc, #52]	; (8019870 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801983c:	8809      	ldrh	r1, [r1, #0]
 801983e:	4411      	add	r1, r2
 8019840:	428b      	cmp	r3, r1
 8019842:	da0d      	bge.n	8019860 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8019844:	210e      	movs	r1, #14
 8019846:	1a9b      	subs	r3, r3, r2
 8019848:	4a0a      	ldr	r2, [pc, #40]	; (8019874 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801984a:	6812      	ldr	r2, [r2, #0]
 801984c:	fb01 2303 	mla	r3, r1, r3, r2
 8019850:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8019854:	891a      	ldrh	r2, [r3, #8]
 8019856:	4291      	cmp	r1, r2
 8019858:	db04      	blt.n	8019864 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801985a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801985e:	e7e6      	b.n	801982e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8019860:	2000      	movs	r0, #0
 8019862:	4770      	bx	lr
 8019864:	2001      	movs	r0, #1
 8019866:	4770      	bx	lr
 8019868:	2004e1a0 	.word	0x2004e1a0
 801986c:	2004e1a8 	.word	0x2004e1a8
 8019870:	2004e1a4 	.word	0x2004e1a4
 8019874:	2004e188 	.word	0x2004e188

08019878 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019878:	4a12      	ldr	r2, [pc, #72]	; (80198c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801987a:	8803      	ldrh	r3, [r0, #0]
 801987c:	8811      	ldrh	r1, [r2, #0]
 801987e:	428b      	cmp	r3, r1
 8019880:	d20b      	bcs.n	801989a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8019882:	4a11      	ldr	r2, [pc, #68]	; (80198c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019884:	6812      	ldr	r2, [r2, #0]
 8019886:	b112      	cbz	r2, 801988e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019888:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801988c:	b9c0      	cbnz	r0, 80198c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801988e:	4a0f      	ldr	r2, [pc, #60]	; (80198cc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019890:	6811      	ldr	r1, [r2, #0]
 8019892:	2214      	movs	r2, #20
 8019894:	4353      	muls	r3, r2
 8019896:	58c8      	ldr	r0, [r1, r3]
 8019898:	4770      	bx	lr
 801989a:	4a0d      	ldr	r2, [pc, #52]	; (80198d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801989c:	8812      	ldrh	r2, [r2, #0]
 801989e:	440a      	add	r2, r1
 80198a0:	4293      	cmp	r3, r2
 80198a2:	da04      	bge.n	80198ae <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80198a4:	4a08      	ldr	r2, [pc, #32]	; (80198c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80198a6:	6812      	ldr	r2, [r2, #0]
 80198a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80198ac:	4770      	bx	lr
 80198ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80198b2:	4293      	cmp	r3, r2
 80198b4:	d103      	bne.n	80198be <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80198b6:	4b07      	ldr	r3, [pc, #28]	; (80198d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80198bc:	4770      	bx	lr
 80198be:	2000      	movs	r0, #0
 80198c0:	4770      	bx	lr
 80198c2:	bf00      	nop
 80198c4:	2004e1a0 	.word	0x2004e1a0
 80198c8:	2004e184 	.word	0x2004e184
 80198cc:	2004e1a8 	.word	0x2004e1a8
 80198d0:	2004e1a4 	.word	0x2004e1a4
 80198d4:	2004e118 	.word	0x2004e118

080198d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80198d8:	4b24      	ldr	r3, [pc, #144]	; (801996c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80198da:	8802      	ldrh	r2, [r0, #0]
 80198dc:	8818      	ldrh	r0, [r3, #0]
 80198de:	4282      	cmp	r2, r0
 80198e0:	d221      	bcs.n	8019926 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80198e2:	4b23      	ldr	r3, [pc, #140]	; (8019970 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80198e4:	6819      	ldr	r1, [r3, #0]
 80198e6:	2314      	movs	r3, #20
 80198e8:	fb03 1302 	mla	r3, r3, r2, r1
 80198ec:	6858      	ldr	r0, [r3, #4]
 80198ee:	2800      	cmp	r0, #0
 80198f0:	d03a      	beq.n	8019968 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80198f2:	4920      	ldr	r1, [pc, #128]	; (8019974 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80198f4:	6809      	ldr	r1, [r1, #0]
 80198f6:	2900      	cmp	r1, #0
 80198f8:	d036      	beq.n	8019968 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80198fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80198fe:	2900      	cmp	r1, #0
 8019900:	d032      	beq.n	8019968 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019902:	891a      	ldrh	r2, [r3, #8]
 8019904:	8958      	ldrh	r0, [r3, #10]
 8019906:	4350      	muls	r0, r2
 8019908:	7c5a      	ldrb	r2, [r3, #17]
 801990a:	7cdb      	ldrb	r3, [r3, #19]
 801990c:	0952      	lsrs	r2, r2, #5
 801990e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019912:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019916:	2b0b      	cmp	r3, #11
 8019918:	bf18      	it	ne
 801991a:	0040      	lslne	r0, r0, #1
 801991c:	3003      	adds	r0, #3
 801991e:	f020 0003 	bic.w	r0, r0, #3
 8019922:	4408      	add	r0, r1
 8019924:	4770      	bx	lr
 8019926:	4b14      	ldr	r3, [pc, #80]	; (8019978 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019928:	881b      	ldrh	r3, [r3, #0]
 801992a:	4403      	add	r3, r0
 801992c:	429a      	cmp	r2, r3
 801992e:	da1a      	bge.n	8019966 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019930:	210e      	movs	r1, #14
 8019932:	4b12      	ldr	r3, [pc, #72]	; (801997c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019934:	1a10      	subs	r0, r2, r0
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	fb01 3000 	mla	r0, r1, r0, r3
 801993c:	7b03      	ldrb	r3, [r0, #12]
 801993e:	f003 031f 	and.w	r3, r3, #31
 8019942:	2b0b      	cmp	r3, #11
 8019944:	d10b      	bne.n	801995e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8019946:	8903      	ldrh	r3, [r0, #8]
 8019948:	8940      	ldrh	r0, [r0, #10]
 801994a:	4358      	muls	r0, r3
 801994c:	4b09      	ldr	r3, [pc, #36]	; (8019974 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801994e:	3003      	adds	r0, #3
 8019950:	6819      	ldr	r1, [r3, #0]
 8019952:	f020 0303 	bic.w	r3, r0, #3
 8019956:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801995a:	4418      	add	r0, r3
 801995c:	4770      	bx	lr
 801995e:	2b0d      	cmp	r3, #13
 8019960:	d101      	bne.n	8019966 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019962:	300d      	adds	r0, #13
 8019964:	4770      	bx	lr
 8019966:	2000      	movs	r0, #0
 8019968:	4770      	bx	lr
 801996a:	bf00      	nop
 801996c:	2004e1a0 	.word	0x2004e1a0
 8019970:	2004e1a8 	.word	0x2004e1a8
 8019974:	2004e184 	.word	0x2004e184
 8019978:	2004e1a4 	.word	0x2004e1a4
 801997c:	2004e188 	.word	0x2004e188

08019980 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019980:	b510      	push	{r4, lr}
 8019982:	4a17      	ldr	r2, [pc, #92]	; (80199e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019984:	8803      	ldrh	r3, [r0, #0]
 8019986:	8812      	ldrh	r2, [r2, #0]
 8019988:	4293      	cmp	r3, r2
 801998a:	d20c      	bcs.n	80199a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801998c:	2114      	movs	r1, #20
 801998e:	4a15      	ldr	r2, [pc, #84]	; (80199e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019990:	6812      	ldr	r2, [r2, #0]
 8019992:	fb01 2303 	mla	r3, r1, r3, r2
 8019996:	7c58      	ldrb	r0, [r3, #17]
 8019998:	0942      	lsrs	r2, r0, #5
 801999a:	7cd8      	ldrb	r0, [r3, #19]
 801999c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80199a0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80199a4:	bd10      	pop	{r4, pc}
 80199a6:	4910      	ldr	r1, [pc, #64]	; (80199e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80199a8:	8809      	ldrh	r1, [r1, #0]
 80199aa:	4411      	add	r1, r2
 80199ac:	428b      	cmp	r3, r1
 80199ae:	da09      	bge.n	80199c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80199b0:	210e      	movs	r1, #14
 80199b2:	1a9b      	subs	r3, r3, r2
 80199b4:	4a0d      	ldr	r2, [pc, #52]	; (80199ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80199b6:	6812      	ldr	r2, [r2, #0]
 80199b8:	fb01 2303 	mla	r3, r1, r3, r2
 80199bc:	7b18      	ldrb	r0, [r3, #12]
 80199be:	f000 001f 	and.w	r0, r0, #31
 80199c2:	e7ef      	b.n	80199a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80199c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80199c8:	4293      	cmp	r3, r2
 80199ca:	d106      	bne.n	80199da <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80199cc:	f7f3 ff0e 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 80199d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199d4:	6803      	ldr	r3, [r0, #0]
 80199d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199d8:	4718      	bx	r3
 80199da:	2000      	movs	r0, #0
 80199dc:	e7e2      	b.n	80199a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80199de:	bf00      	nop
 80199e0:	2004e1a0 	.word	0x2004e1a0
 80199e4:	2004e1a8 	.word	0x2004e1a8
 80199e8:	2004e1a4 	.word	0x2004e1a4
 80199ec:	2004e188 	.word	0x2004e188

080199f0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80199f0:	2010      	movs	r0, #16
 80199f2:	4770      	bx	lr

080199f4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80199f4:	2000      	movs	r0, #0
 80199f6:	4770      	bx	lr

080199f8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80199f8:	4b02      	ldr	r3, [pc, #8]	; (8019a04 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80199fa:	8818      	ldrh	r0, [r3, #0]
 80199fc:	0040      	lsls	r0, r0, #1
 80199fe:	b280      	uxth	r0, r0
 8019a00:	4770      	bx	lr
 8019a02:	bf00      	nop
 8019a04:	2004e112 	.word	0x2004e112

08019a08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019a08:	2bff      	cmp	r3, #255	; 0xff
 8019a0a:	d050      	beq.n	8019aae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019a0c:	2a0b      	cmp	r2, #11
 8019a0e:	d04a      	beq.n	8019aa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019a10:	d80e      	bhi.n	8019a30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8019a12:	2a03      	cmp	r2, #3
 8019a14:	d03f      	beq.n	8019a96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019a16:	d804      	bhi.n	8019a22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a18:	2a01      	cmp	r2, #1
 8019a1a:	d03e      	beq.n	8019a9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019a1c:	d93f      	bls.n	8019a9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019a1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019a20:	4770      	bx	lr
 8019a22:	2a09      	cmp	r2, #9
 8019a24:	d03f      	beq.n	8019aa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019a26:	d83c      	bhi.n	8019aa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019a28:	2a08      	cmp	r2, #8
 8019a2a:	d03a      	beq.n	8019aa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019a2c:	2000      	movs	r0, #0
 8019a2e:	4770      	bx	lr
 8019a30:	2a2f      	cmp	r2, #47	; 0x2f
 8019a32:	d024      	beq.n	8019a7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019a34:	d80d      	bhi.n	8019a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8019a36:	2a2d      	cmp	r2, #45	; 0x2d
 8019a38:	d014      	beq.n	8019a64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019a3a:	d826      	bhi.n	8019a8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019a3c:	2a2c      	cmp	r2, #44	; 0x2c
 8019a3e:	d1f5      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a40:	684b      	ldr	r3, [r1, #4]
 8019a42:	781b      	ldrb	r3, [r3, #0]
 8019a44:	2b01      	cmp	r3, #1
 8019a46:	d018      	beq.n	8019a7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019a48:	d323      	bcc.n	8019a92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019a4a:	2b02      	cmp	r3, #2
 8019a4c:	d1ee      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a4e:	6880      	ldr	r0, [r0, #8]
 8019a50:	4770      	bx	lr
 8019a52:	2a31      	cmp	r2, #49	; 0x31
 8019a54:	d004      	beq.n	8019a60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8019a56:	d328      	bcc.n	8019aaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019a58:	2a32      	cmp	r2, #50	; 0x32
 8019a5a:	d026      	beq.n	8019aaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019a5c:	2a33      	cmp	r2, #51	; 0x33
 8019a5e:	d1e5      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a60:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8019a62:	4770      	bx	lr
 8019a64:	684b      	ldr	r3, [r1, #4]
 8019a66:	781b      	ldrb	r3, [r3, #0]
 8019a68:	2b01      	cmp	r3, #1
 8019a6a:	d004      	beq.n	8019a76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a6c:	d30b      	bcc.n	8019a86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019a6e:	2b02      	cmp	r3, #2
 8019a70:	d1dc      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a72:	6900      	ldr	r0, [r0, #16]
 8019a74:	4770      	bx	lr
 8019a76:	6a00      	ldr	r0, [r0, #32]
 8019a78:	4770      	bx	lr
 8019a7a:	6980      	ldr	r0, [r0, #24]
 8019a7c:	4770      	bx	lr
 8019a7e:	684b      	ldr	r3, [r1, #4]
 8019a80:	781b      	ldrb	r3, [r3, #0]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d1d2      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a86:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019a88:	4770      	bx	lr
 8019a8a:	684b      	ldr	r3, [r1, #4]
 8019a8c:	781b      	ldrb	r3, [r3, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d1cc      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a92:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019a94:	4770      	bx	lr
 8019a96:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019a98:	4770      	bx	lr
 8019a9a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019a9c:	4770      	bx	lr
 8019a9e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019aa0:	4770      	bx	lr
 8019aa2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019aa4:	4770      	bx	lr
 8019aa6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019aa8:	4770      	bx	lr
 8019aaa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019aac:	4770      	bx	lr
 8019aae:	2a0b      	cmp	r2, #11
 8019ab0:	d049      	beq.n	8019b46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019ab2:	d80e      	bhi.n	8019ad2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019ab4:	2a03      	cmp	r2, #3
 8019ab6:	d040      	beq.n	8019b3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019ab8:	d804      	bhi.n	8019ac4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019aba:	2a01      	cmp	r2, #1
 8019abc:	d03f      	beq.n	8019b3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8019abe:	d940      	bls.n	8019b42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019ac0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019ac2:	4770      	bx	lr
 8019ac4:	2a09      	cmp	r2, #9
 8019ac6:	d03e      	beq.n	8019b46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019ac8:	d801      	bhi.n	8019ace <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019aca:	2a08      	cmp	r2, #8
 8019acc:	d1ae      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019ace:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019ad0:	4770      	bx	lr
 8019ad2:	2a2f      	cmp	r2, #47	; 0x2f
 8019ad4:	d024      	beq.n	8019b20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019ad6:	d80d      	bhi.n	8019af4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019ad8:	2a2d      	cmp	r2, #45	; 0x2d
 8019ada:	d014      	beq.n	8019b06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019adc:	d826      	bhi.n	8019b2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8019ade:	2a2c      	cmp	r2, #44	; 0x2c
 8019ae0:	d1a4      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019ae2:	684b      	ldr	r3, [r1, #4]
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	2b01      	cmp	r3, #1
 8019ae8:	d018      	beq.n	8019b1c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019aea:	d324      	bcc.n	8019b36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019aec:	2b02      	cmp	r3, #2
 8019aee:	d19d      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019af0:	68c0      	ldr	r0, [r0, #12]
 8019af2:	4770      	bx	lr
 8019af4:	2a31      	cmp	r2, #49	; 0x31
 8019af6:	d004      	beq.n	8019b02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019af8:	d327      	bcc.n	8019b4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019afa:	2a32      	cmp	r2, #50	; 0x32
 8019afc:	d025      	beq.n	8019b4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019afe:	2a33      	cmp	r2, #51	; 0x33
 8019b00:	d194      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b02:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019b04:	4770      	bx	lr
 8019b06:	684b      	ldr	r3, [r1, #4]
 8019b08:	781b      	ldrb	r3, [r3, #0]
 8019b0a:	2b01      	cmp	r3, #1
 8019b0c:	d004      	beq.n	8019b18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8019b0e:	d30b      	bcc.n	8019b28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8019b10:	2b02      	cmp	r3, #2
 8019b12:	d18b      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b14:	6940      	ldr	r0, [r0, #20]
 8019b16:	4770      	bx	lr
 8019b18:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019b1a:	4770      	bx	lr
 8019b1c:	69c0      	ldr	r0, [r0, #28]
 8019b1e:	4770      	bx	lr
 8019b20:	684b      	ldr	r3, [r1, #4]
 8019b22:	781b      	ldrb	r3, [r3, #0]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d181      	bne.n	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b28:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019b2a:	4770      	bx	lr
 8019b2c:	684b      	ldr	r3, [r1, #4]
 8019b2e:	781b      	ldrb	r3, [r3, #0]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	f47f af7b 	bne.w	8019a2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b36:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019b38:	4770      	bx	lr
 8019b3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019b3c:	4770      	bx	lr
 8019b3e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019b40:	4770      	bx	lr
 8019b42:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019b44:	4770      	bx	lr
 8019b46:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8019b48:	4770      	bx	lr
 8019b4a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8019b4c:	4770      	bx	lr

08019b4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b52:	b087      	sub	sp, #28
 8019b54:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019b56:	9101      	str	r1, [sp, #4]
 8019b58:	9205      	str	r2, [sp, #20]
 8019b5a:	6841      	ldr	r1, [r0, #4]
 8019b5c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019b60:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019b64:	9202      	str	r2, [sp, #8]
 8019b66:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019b6a:	fb01 2404 	mla	r4, r1, r4, r2
 8019b6e:	6802      	ldr	r2, [r0, #0]
 8019b70:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019b74:	f8de 2000 	ldr.w	r2, [lr]
 8019b78:	9203      	str	r2, [sp, #12]
 8019b7a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019b7e:	3204      	adds	r2, #4
 8019b80:	9204      	str	r2, [sp, #16]
 8019b82:	9a02      	ldr	r2, [sp, #8]
 8019b84:	43d6      	mvns	r6, r2
 8019b86:	b2f6      	uxtb	r6, r6
 8019b88:	9a01      	ldr	r2, [sp, #4]
 8019b8a:	2a00      	cmp	r2, #0
 8019b8c:	dc03      	bgt.n	8019b96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019b8e:	9a05      	ldr	r2, [sp, #20]
 8019b90:	2a00      	cmp	r2, #0
 8019b92:	f340 8129 	ble.w	8019de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019b96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019b98:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019b9c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019ba0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ba2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019ba6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	dd0e      	ble.n	8019bcc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019bae:	1408      	asrs	r0, r1, #16
 8019bb0:	d405      	bmi.n	8019bbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bb2:	4560      	cmp	r0, ip
 8019bb4:	da03      	bge.n	8019bbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bb6:	1410      	asrs	r0, r2, #16
 8019bb8:	d401      	bmi.n	8019bbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bba:	42b8      	cmp	r0, r7
 8019bbc:	db07      	blt.n	8019bce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019bbe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019bc0:	3b01      	subs	r3, #1
 8019bc2:	4401      	add	r1, r0
 8019bc4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019bc6:	3402      	adds	r4, #2
 8019bc8:	4402      	add	r2, r0
 8019bca:	e7ee      	b.n	8019baa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019bcc:	d071      	beq.n	8019cb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019bce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019bd0:	1e58      	subs	r0, r3, #1
 8019bd2:	fb05 1500 	mla	r5, r5, r0, r1
 8019bd6:	142d      	asrs	r5, r5, #16
 8019bd8:	d45f      	bmi.n	8019c9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bda:	4565      	cmp	r5, ip
 8019bdc:	da5d      	bge.n	8019c9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bde:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019be0:	fb05 2000 	mla	r0, r5, r0, r2
 8019be4:	1400      	asrs	r0, r0, #16
 8019be6:	d458      	bmi.n	8019c9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019be8:	42b8      	cmp	r0, r7
 8019bea:	da56      	bge.n	8019c9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bec:	4699      	mov	r9, r3
 8019bee:	46a2      	mov	sl, r4
 8019bf0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8019bf4:	f1b9 0f00 	cmp.w	r9, #0
 8019bf8:	dd57      	ble.n	8019caa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019bfa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019bfe:	9803      	ldr	r0, [sp, #12]
 8019c00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019c04:	fb07 000c 	mla	r0, r7, ip, r0
 8019c08:	140d      	asrs	r5, r1, #16
 8019c0a:	5d40      	ldrb	r0, [r0, r5]
 8019c0c:	9d04      	ldr	r5, [sp, #16]
 8019c0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c12:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019c16:	f8ba 5000 	ldrh.w	r5, [sl]
 8019c1a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019c1e:	122f      	asrs	r7, r5, #8
 8019c20:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019c24:	fb17 f706 	smulbb	r7, r7, r6
 8019c28:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019c2c:	00ed      	lsls	r5, r5, #3
 8019c2e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8019c32:	b2ed      	uxtb	r5, r5
 8019c34:	fb18 f806 	smulbb	r8, r8, r6
 8019c38:	fb15 f506 	smulbb	r5, r5, r6
 8019c3c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019c40:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019c44:	10c7      	asrs	r7, r0, #3
 8019c46:	00c0      	lsls	r0, r0, #3
 8019c48:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019c4c:	b2c0      	uxtb	r0, r0
 8019c4e:	fb07 870b 	mla	r7, r7, fp, r8
 8019c52:	fb00 500b 	mla	r0, r0, fp, r5
 8019c56:	fa1f fc8c 	uxth.w	ip, ip
 8019c5a:	b280      	uxth	r0, r0
 8019c5c:	b2bf      	uxth	r7, r7
 8019c5e:	f10c 0501 	add.w	r5, ip, #1
 8019c62:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019c66:	f107 0801 	add.w	r8, r7, #1
 8019c6a:	1c45      	adds	r5, r0, #1
 8019c6c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019c70:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019c74:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019c76:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019c7a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019c7e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019c82:	ea45 0c0c 	orr.w	ip, r5, ip
 8019c86:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019c8a:	4401      	add	r1, r0
 8019c8c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019c8e:	ea4c 0c08 	orr.w	ip, ip, r8
 8019c92:	f82a cb02 	strh.w	ip, [sl], #2
 8019c96:	4402      	add	r2, r0
 8019c98:	e7ac      	b.n	8019bf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019c9a:	f04f 0800 	mov.w	r8, #0
 8019c9e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8019ca2:	eb03 0008 	add.w	r0, r3, r8
 8019ca6:	2800      	cmp	r0, #0
 8019ca8:	dc41      	bgt.n	8019d2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019caa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019cae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019cb2:	9b01      	ldr	r3, [sp, #4]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	f340 8097 	ble.w	8019de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019cbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019cc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019cca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019cce:	eef0 6a62 	vmov.f32	s13, s5
 8019cd2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019cda:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019cde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019ce2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ce6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019cea:	eef0 6a43 	vmov.f32	s13, s6
 8019cee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019cf2:	ee12 2a90 	vmov	r2, s5
 8019cf6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019cfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019cfc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d00:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d04:	ee13 2a10 	vmov	r2, s6
 8019d08:	9313      	str	r3, [sp, #76]	; 0x4c
 8019d0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d0c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d14:	9314      	str	r3, [sp, #80]	; 0x50
 8019d16:	9b01      	ldr	r3, [sp, #4]
 8019d18:	9a05      	ldr	r2, [sp, #20]
 8019d1a:	3b01      	subs	r3, #1
 8019d1c:	9301      	str	r3, [sp, #4]
 8019d1e:	eeb0 3a67 	vmov.f32	s6, s15
 8019d22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d24:	eef0 2a47 	vmov.f32	s5, s14
 8019d28:	bf08      	it	eq
 8019d2a:	4613      	moveq	r3, r2
 8019d2c:	e72c      	b.n	8019b88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019d2e:	140f      	asrs	r7, r1, #16
 8019d30:	d453      	bmi.n	8019dda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d32:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019d36:	42bd      	cmp	r5, r7
 8019d38:	dd4f      	ble.n	8019dda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d3a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019d3e:	d44c      	bmi.n	8019dda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d40:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019d44:	4560      	cmp	r0, ip
 8019d46:	dd48      	ble.n	8019dda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d48:	9803      	ldr	r0, [sp, #12]
 8019d4a:	b22d      	sxth	r5, r5
 8019d4c:	fb0c 0505 	mla	r5, ip, r5, r0
 8019d50:	5de8      	ldrb	r0, [r5, r7]
 8019d52:	9d04      	ldr	r5, [sp, #16]
 8019d54:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019d58:	f06f 0501 	mvn.w	r5, #1
 8019d5c:	fb05 fb08 	mul.w	fp, r5, r8
 8019d60:	f834 500b 	ldrh.w	r5, [r4, fp]
 8019d64:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019d68:	122f      	asrs	r7, r5, #8
 8019d6a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019d6e:	fb17 f706 	smulbb	r7, r7, r6
 8019d72:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019d76:	00ed      	lsls	r5, r5, #3
 8019d78:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019d7c:	b2ed      	uxtb	r5, r5
 8019d7e:	fb19 f906 	smulbb	r9, r9, r6
 8019d82:	fb15 f506 	smulbb	r5, r5, r6
 8019d86:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019d8a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019d8e:	10c7      	asrs	r7, r0, #3
 8019d90:	00c0      	lsls	r0, r0, #3
 8019d92:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019d96:	b2c0      	uxtb	r0, r0
 8019d98:	fb07 970a 	mla	r7, r7, sl, r9
 8019d9c:	fb00 500a 	mla	r0, r0, sl, r5
 8019da0:	fa1f fc8c 	uxth.w	ip, ip
 8019da4:	b2bf      	uxth	r7, r7
 8019da6:	b280      	uxth	r0, r0
 8019da8:	f10c 0501 	add.w	r5, ip, #1
 8019dac:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019db0:	f107 0901 	add.w	r9, r7, #1
 8019db4:	1c45      	adds	r5, r0, #1
 8019db6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019dba:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019dbe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019dc2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019dc6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019dca:	ea45 0c0c 	orr.w	ip, r5, ip
 8019dce:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019dd2:	ea4c 0c09 	orr.w	ip, ip, r9
 8019dd6:	f824 c00b 	strh.w	ip, [r4, fp]
 8019dda:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019ddc:	f108 38ff 	add.w	r8, r8, #4294967295
 8019de0:	4401      	add	r1, r0
 8019de2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019de4:	4402      	add	r2, r0
 8019de6:	e75c      	b.n	8019ca2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019de8:	b007      	add	sp, #28
 8019dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019dee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019df6:	b085      	sub	sp, #20
 8019df8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019dfa:	4693      	mov	fp, r2
 8019dfc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019e00:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8019e04:	6870      	ldr	r0, [r6, #4]
 8019e06:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019e08:	fb00 2404 	mla	r4, r0, r4, r2
 8019e0c:	6832      	ldr	r2, [r6, #0]
 8019e0e:	9100      	str	r1, [sp, #0]
 8019e10:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019e14:	682a      	ldr	r2, [r5, #0]
 8019e16:	9201      	str	r2, [sp, #4]
 8019e18:	686a      	ldr	r2, [r5, #4]
 8019e1a:	3204      	adds	r2, #4
 8019e1c:	9202      	str	r2, [sp, #8]
 8019e1e:	9a00      	ldr	r2, [sp, #0]
 8019e20:	2a00      	cmp	r2, #0
 8019e22:	dc03      	bgt.n	8019e2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019e24:	f1bb 0f00 	cmp.w	fp, #0
 8019e28:	f340 80a0 	ble.w	8019f6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019e2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e2e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019e32:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019e36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019e38:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019e3c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	dd0c      	ble.n	8019e5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019e44:	1406      	asrs	r6, r0, #16
 8019e46:	d405      	bmi.n	8019e54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e48:	454e      	cmp	r6, r9
 8019e4a:	da03      	bge.n	8019e54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e4c:	1416      	asrs	r6, r2, #16
 8019e4e:	d401      	bmi.n	8019e54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e50:	4546      	cmp	r6, r8
 8019e52:	db05      	blt.n	8019e60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019e54:	4470      	add	r0, lr
 8019e56:	4462      	add	r2, ip
 8019e58:	3b01      	subs	r3, #1
 8019e5a:	3402      	adds	r4, #2
 8019e5c:	e7f0      	b.n	8019e40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019e5e:	d00f      	beq.n	8019e80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019e60:	1e5e      	subs	r6, r3, #1
 8019e62:	fb0e 0706 	mla	r7, lr, r6, r0
 8019e66:	143f      	asrs	r7, r7, #16
 8019e68:	d541      	bpl.n	8019eee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8019e6a:	4698      	mov	r8, r3
 8019e6c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019e70:	9603      	str	r6, [sp, #12]
 8019e72:	f1b8 0f00 	cmp.w	r8, #0
 8019e76:	dc59      	bgt.n	8019f2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019e78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019e80:	9b00      	ldr	r3, [sp, #0]
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	dd72      	ble.n	8019f6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019e86:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e8e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019e92:	eeb0 6a62 	vmov.f32	s12, s5
 8019e96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ea2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019ea6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019eaa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019eae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019eb2:	eeb0 6a43 	vmov.f32	s12, s6
 8019eb6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019eba:	ee12 2a90 	vmov	r2, s5
 8019ebe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ec4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ec8:	fb92 fef3 	sdiv	lr, r2, r3
 8019ecc:	ee13 2a10 	vmov	r2, s6
 8019ed0:	fb92 fcf3 	sdiv	ip, r2, r3
 8019ed4:	9b00      	ldr	r3, [sp, #0]
 8019ed6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019eda:	3b01      	subs	r3, #1
 8019edc:	9300      	str	r3, [sp, #0]
 8019ede:	eeb0 3a67 	vmov.f32	s6, s15
 8019ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ee4:	eef0 2a47 	vmov.f32	s5, s14
 8019ee8:	bf08      	it	eq
 8019eea:	465b      	moveq	r3, fp
 8019eec:	e797      	b.n	8019e1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019eee:	454f      	cmp	r7, r9
 8019ef0:	dabb      	bge.n	8019e6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019ef2:	fb0c 2606 	mla	r6, ip, r6, r2
 8019ef6:	1436      	asrs	r6, r6, #16
 8019ef8:	d4b7      	bmi.n	8019e6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019efa:	4546      	cmp	r6, r8
 8019efc:	dab5      	bge.n	8019e6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019efe:	461e      	mov	r6, r3
 8019f00:	46a0      	mov	r8, r4
 8019f02:	2e00      	cmp	r6, #0
 8019f04:	ddb8      	ble.n	8019e78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019f06:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8019f0a:	9901      	ldr	r1, [sp, #4]
 8019f0c:	1417      	asrs	r7, r2, #16
 8019f0e:	fb0a 1707 	mla	r7, sl, r7, r1
 8019f12:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019f16:	f817 7009 	ldrb.w	r7, [r7, r9]
 8019f1a:	9902      	ldr	r1, [sp, #8]
 8019f1c:	4470      	add	r0, lr
 8019f1e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019f22:	4462      	add	r2, ip
 8019f24:	f828 7b02 	strh.w	r7, [r8], #2
 8019f28:	3e01      	subs	r6, #1
 8019f2a:	e7ea      	b.n	8019f02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019f2c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019f30:	d417      	bmi.n	8019f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f32:	68ae      	ldr	r6, [r5, #8]
 8019f34:	454e      	cmp	r6, r9
 8019f36:	dd14      	ble.n	8019f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f38:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019f3c:	d411      	bmi.n	8019f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f3e:	68ef      	ldr	r7, [r5, #12]
 8019f40:	4557      	cmp	r7, sl
 8019f42:	dd0e      	ble.n	8019f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f44:	f06f 0101 	mvn.w	r1, #1
 8019f48:	9f01      	ldr	r7, [sp, #4]
 8019f4a:	b236      	sxth	r6, r6
 8019f4c:	fb0a 7606 	mla	r6, sl, r6, r7
 8019f50:	9f02      	ldr	r7, [sp, #8]
 8019f52:	f816 6009 	ldrb.w	r6, [r6, r9]
 8019f56:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8019f5a:	fb01 f608 	mul.w	r6, r1, r8
 8019f5e:	9903      	ldr	r1, [sp, #12]
 8019f60:	538f      	strh	r7, [r1, r6]
 8019f62:	4470      	add	r0, lr
 8019f64:	4462      	add	r2, ip
 8019f66:	f108 38ff 	add.w	r8, r8, #4294967295
 8019f6a:	e782      	b.n	8019e72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019f6c:	b005      	add	sp, #20
 8019f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f76:	b087      	sub	sp, #28
 8019f78:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019f7a:	9102      	str	r1, [sp, #8]
 8019f7c:	9205      	str	r2, [sp, #20]
 8019f7e:	6861      	ldr	r1, [r4, #4]
 8019f80:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019f84:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019f88:	9203      	str	r2, [sp, #12]
 8019f8a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019f8e:	fb01 2000 	mla	r0, r1, r0, r2
 8019f92:	6822      	ldr	r2, [r4, #0]
 8019f94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019f98:	9200      	str	r2, [sp, #0]
 8019f9a:	f8dc 2000 	ldr.w	r2, [ip]
 8019f9e:	9204      	str	r2, [sp, #16]
 8019fa0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019fa4:	3204      	adds	r2, #4
 8019fa6:	9201      	str	r2, [sp, #4]
 8019fa8:	9a03      	ldr	r2, [sp, #12]
 8019faa:	43d5      	mvns	r5, r2
 8019fac:	b2ed      	uxtb	r5, r5
 8019fae:	9a02      	ldr	r2, [sp, #8]
 8019fb0:	2a00      	cmp	r2, #0
 8019fb2:	dc03      	bgt.n	8019fbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019fb4:	9a05      	ldr	r2, [sp, #20]
 8019fb6:	2a00      	cmp	r2, #0
 8019fb8:	f340 812c 	ble.w	801a214 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019fbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019fbe:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019fc2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019fc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019fc8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019fcc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	dd10      	ble.n	8019ff6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019fd4:	140c      	asrs	r4, r1, #16
 8019fd6:	d405      	bmi.n	8019fe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fd8:	4574      	cmp	r4, lr
 8019fda:	da03      	bge.n	8019fe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fdc:	1414      	asrs	r4, r2, #16
 8019fde:	d401      	bmi.n	8019fe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fe0:	42bc      	cmp	r4, r7
 8019fe2:	db09      	blt.n	8019ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019fe4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019fe6:	9800      	ldr	r0, [sp, #0]
 8019fe8:	4421      	add	r1, r4
 8019fea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019fec:	3002      	adds	r0, #2
 8019fee:	4422      	add	r2, r4
 8019ff0:	3b01      	subs	r3, #1
 8019ff2:	9000      	str	r0, [sp, #0]
 8019ff4:	e7ec      	b.n	8019fd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019ff6:	d071      	beq.n	801a0dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8019ff8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019ffa:	1e5c      	subs	r4, r3, #1
 8019ffc:	fb06 1604 	mla	r6, r6, r4, r1
 801a000:	1436      	asrs	r6, r6, #16
 801a002:	d45d      	bmi.n	801a0c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a004:	4576      	cmp	r6, lr
 801a006:	da5b      	bge.n	801a0c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a008:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a00a:	fb06 2404 	mla	r4, r6, r4, r2
 801a00e:	1424      	asrs	r4, r4, #16
 801a010:	d456      	bmi.n	801a0c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a012:	42bc      	cmp	r4, r7
 801a014:	da54      	bge.n	801a0c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a016:	4698      	mov	r8, r3
 801a018:	f8dd 9000 	ldr.w	r9, [sp]
 801a01c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a020:	f1b8 0f00 	cmp.w	r8, #0
 801a024:	dd54      	ble.n	801a0d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a026:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a02a:	9804      	ldr	r0, [sp, #16]
 801a02c:	1414      	asrs	r4, r2, #16
 801a02e:	fb07 0404 	mla	r4, r7, r4, r0
 801a032:	140e      	asrs	r6, r1, #16
 801a034:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a038:	9801      	ldr	r0, [sp, #4]
 801a03a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a03e:	eb00 0b0e 	add.w	fp, r0, lr
 801a042:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a046:	f8b9 4000 	ldrh.w	r4, [r9]
 801a04a:	fb16 f60a 	smulbb	r6, r6, sl
 801a04e:	1227      	asrs	r7, r4, #8
 801a050:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a054:	fb07 6705 	mla	r7, r7, r5, r6
 801a058:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a05c:	10e6      	asrs	r6, r4, #3
 801a05e:	00e4      	lsls	r4, r4, #3
 801a060:	b2e4      	uxtb	r4, r4
 801a062:	fb1b fb0a 	smulbb	fp, fp, sl
 801a066:	fb14 f405 	smulbb	r4, r4, r5
 801a06a:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a06e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a072:	fb06 b605 	mla	r6, r6, r5, fp
 801a076:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a07a:	b2bf      	uxth	r7, r7
 801a07c:	b2b6      	uxth	r6, r6
 801a07e:	fa1f fe8e 	uxth.w	lr, lr
 801a082:	1c7c      	adds	r4, r7, #1
 801a084:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a088:	f106 0b01 	add.w	fp, r6, #1
 801a08c:	f10e 0401 	add.w	r4, lr, #1
 801a090:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a092:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a096:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a09a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a09e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a0a2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a0a6:	4327      	orrs	r7, r4
 801a0a8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a0ac:	4401      	add	r1, r0
 801a0ae:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a0b0:	ea47 070b 	orr.w	r7, r7, fp
 801a0b4:	f829 7b02 	strh.w	r7, [r9], #2
 801a0b8:	4402      	add	r2, r0
 801a0ba:	f108 38ff 	add.w	r8, r8, #4294967295
 801a0be:	e7af      	b.n	801a020 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a0c0:	f04f 0e00 	mov.w	lr, #0
 801a0c4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a0c8:	eb03 040e 	add.w	r4, r3, lr
 801a0cc:	2c00      	cmp	r4, #0
 801a0ce:	dc43      	bgt.n	801a158 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a0d0:	9a00      	ldr	r2, [sp, #0]
 801a0d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a0d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a0da:	9300      	str	r3, [sp, #0]
 801a0dc:	9b02      	ldr	r3, [sp, #8]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	f340 8098 	ble.w	801a214 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a0e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a0e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a0ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a0f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a0f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a0f8:	eef0 6a62 	vmov.f32	s13, s5
 801a0fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a100:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a104:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a108:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a10c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a110:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a114:	eef0 6a43 	vmov.f32	s13, s6
 801a118:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a11c:	ee12 2a90 	vmov	r2, s5
 801a120:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a126:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a12a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a12e:	ee13 2a10 	vmov	r2, s6
 801a132:	9313      	str	r3, [sp, #76]	; 0x4c
 801a134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a136:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a13a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a13e:	9314      	str	r3, [sp, #80]	; 0x50
 801a140:	9b02      	ldr	r3, [sp, #8]
 801a142:	9a05      	ldr	r2, [sp, #20]
 801a144:	3b01      	subs	r3, #1
 801a146:	9302      	str	r3, [sp, #8]
 801a148:	eeb0 3a67 	vmov.f32	s6, s15
 801a14c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a14e:	eef0 2a47 	vmov.f32	s5, s14
 801a152:	bf08      	it	eq
 801a154:	4613      	moveq	r3, r2
 801a156:	e72a      	b.n	8019fae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a158:	140f      	asrs	r7, r1, #16
 801a15a:	d454      	bmi.n	801a206 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a15c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a160:	42be      	cmp	r6, r7
 801a162:	dd50      	ble.n	801a206 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a164:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a168:	d44d      	bmi.n	801a206 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a16a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a16e:	4544      	cmp	r4, r8
 801a170:	dd49      	ble.n	801a206 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a172:	f06f 0001 	mvn.w	r0, #1
 801a176:	9c04      	ldr	r4, [sp, #16]
 801a178:	b236      	sxth	r6, r6
 801a17a:	fb08 4606 	mla	r6, r8, r6, r4
 801a17e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a182:	9c01      	ldr	r4, [sp, #4]
 801a184:	fb00 fa0e 	mul.w	sl, r0, lr
 801a188:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a18c:	eb04 0b08 	add.w	fp, r4, r8
 801a190:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a194:	9800      	ldr	r0, [sp, #0]
 801a196:	fb16 f609 	smulbb	r6, r6, r9
 801a19a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a19e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a1a2:	1227      	asrs	r7, r4, #8
 801a1a4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a1a8:	fb07 6705 	mla	r7, r7, r5, r6
 801a1ac:	10e6      	asrs	r6, r4, #3
 801a1ae:	00e4      	lsls	r4, r4, #3
 801a1b0:	b2e4      	uxtb	r4, r4
 801a1b2:	fb1b fb09 	smulbb	fp, fp, r9
 801a1b6:	9801      	ldr	r0, [sp, #4]
 801a1b8:	fb14 f405 	smulbb	r4, r4, r5
 801a1bc:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a1c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a1c4:	fb06 b605 	mla	r6, r6, r5, fp
 801a1c8:	fb08 4809 	mla	r8, r8, r9, r4
 801a1cc:	b2bf      	uxth	r7, r7
 801a1ce:	b2b6      	uxth	r6, r6
 801a1d0:	fa1f f888 	uxth.w	r8, r8
 801a1d4:	1c7c      	adds	r4, r7, #1
 801a1d6:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a1da:	f106 0b01 	add.w	fp, r6, #1
 801a1de:	f108 0401 	add.w	r4, r8, #1
 801a1e2:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801a1e6:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a1ea:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a1ee:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a1f2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a1f6:	4327      	orrs	r7, r4
 801a1f8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a1fc:	9800      	ldr	r0, [sp, #0]
 801a1fe:	ea47 070b 	orr.w	r7, r7, fp
 801a202:	f820 700a 	strh.w	r7, [r0, sl]
 801a206:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a208:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a20c:	4401      	add	r1, r0
 801a20e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a210:	4402      	add	r2, r0
 801a212:	e759      	b.n	801a0c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a214:	b007      	add	sp, #28
 801a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a21c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a21c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a224:	b085      	sub	sp, #20
 801a226:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a228:	9203      	str	r2, [sp, #12]
 801a22a:	6870      	ldr	r0, [r6, #4]
 801a22c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a230:	fb00 2404 	mla	r4, r0, r4, r2
 801a234:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a236:	6832      	ldr	r2, [r6, #0]
 801a238:	686f      	ldr	r7, [r5, #4]
 801a23a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a23e:	682a      	ldr	r2, [r5, #0]
 801a240:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801a244:	9101      	str	r1, [sp, #4]
 801a246:	9202      	str	r2, [sp, #8]
 801a248:	3704      	adds	r7, #4
 801a24a:	9a01      	ldr	r2, [sp, #4]
 801a24c:	2a00      	cmp	r2, #0
 801a24e:	dc03      	bgt.n	801a258 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a250:	9a03      	ldr	r2, [sp, #12]
 801a252:	2a00      	cmp	r2, #0
 801a254:	f340 80cc 	ble.w	801a3f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a258:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a25a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a25e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a262:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a264:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a268:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	dd0d      	ble.n	801a28c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a270:	1406      	asrs	r6, r0, #16
 801a272:	d405      	bmi.n	801a280 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a274:	454e      	cmp	r6, r9
 801a276:	da03      	bge.n	801a280 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a278:	1416      	asrs	r6, r2, #16
 801a27a:	d401      	bmi.n	801a280 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a27c:	4546      	cmp	r6, r8
 801a27e:	db06      	blt.n	801a28e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a280:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a282:	4460      	add	r0, ip
 801a284:	4432      	add	r2, r6
 801a286:	3b01      	subs	r3, #1
 801a288:	3402      	adds	r4, #2
 801a28a:	e7ef      	b.n	801a26c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a28c:	d00f      	beq.n	801a2ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a28e:	1e5e      	subs	r6, r3, #1
 801a290:	fb0c 0e06 	mla	lr, ip, r6, r0
 801a294:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a298:	d543      	bpl.n	801a322 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801a29a:	4698      	mov	r8, r3
 801a29c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801a2a0:	f1b8 0f00 	cmp.w	r8, #0
 801a2a4:	dc71      	bgt.n	801a38a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801a2a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a2aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a2ae:	9b01      	ldr	r3, [sp, #4]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	f340 809d 	ble.w	801a3f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a2b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a2ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a2be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a2c2:	eeb0 6a62 	vmov.f32	s12, s5
 801a2c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a2d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a2da:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a2de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a2e2:	eeb0 6a43 	vmov.f32	s12, s6
 801a2e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a2ea:	ee12 2a90 	vmov	r2, s5
 801a2ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a2f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2f8:	fb92 fcf3 	sdiv	ip, r2, r3
 801a2fc:	ee13 2a10 	vmov	r2, s6
 801a300:	fb92 f3f3 	sdiv	r3, r2, r3
 801a304:	9312      	str	r3, [sp, #72]	; 0x48
 801a306:	9b01      	ldr	r3, [sp, #4]
 801a308:	9a03      	ldr	r2, [sp, #12]
 801a30a:	3b01      	subs	r3, #1
 801a30c:	9301      	str	r3, [sp, #4]
 801a30e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a314:	eeb0 3a67 	vmov.f32	s6, s15
 801a318:	bf08      	it	eq
 801a31a:	4613      	moveq	r3, r2
 801a31c:	eef0 2a47 	vmov.f32	s5, s14
 801a320:	e793      	b.n	801a24a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a322:	45ce      	cmp	lr, r9
 801a324:	dab9      	bge.n	801a29a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a326:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a328:	fb01 2606 	mla	r6, r1, r6, r2
 801a32c:	1436      	asrs	r6, r6, #16
 801a32e:	d4b4      	bmi.n	801a29a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a330:	4546      	cmp	r6, r8
 801a332:	dab2      	bge.n	801a29a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a334:	4698      	mov	r8, r3
 801a336:	46a2      	mov	sl, r4
 801a338:	f1b8 0f00 	cmp.w	r8, #0
 801a33c:	ddb3      	ble.n	801a2a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a33e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a342:	9902      	ldr	r1, [sp, #8]
 801a344:	1416      	asrs	r6, r2, #16
 801a346:	fb09 1606 	mla	r6, r9, r6, r1
 801a34a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801a34e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801a352:	4929      	ldr	r1, [pc, #164]	; (801a3f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801a354:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a358:	eb07 0b0e 	add.w	fp, r7, lr
 801a35c:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801a360:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a364:	00f6      	lsls	r6, r6, #3
 801a366:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a36a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a36e:	ea49 0606 	orr.w	r6, r9, r6
 801a372:	f817 900e 	ldrb.w	r9, [r7, lr]
 801a376:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a378:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801a37c:	f82a 6b02 	strh.w	r6, [sl], #2
 801a380:	4460      	add	r0, ip
 801a382:	440a      	add	r2, r1
 801a384:	f108 38ff 	add.w	r8, r8, #4294967295
 801a388:	e7d6      	b.n	801a338 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a38a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a38e:	d429      	bmi.n	801a3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a390:	68ae      	ldr	r6, [r5, #8]
 801a392:	454e      	cmp	r6, r9
 801a394:	dd26      	ble.n	801a3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a396:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a39a:	d423      	bmi.n	801a3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a39c:	68e9      	ldr	r1, [r5, #12]
 801a39e:	4559      	cmp	r1, fp
 801a3a0:	dd20      	ble.n	801a3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a3a2:	9902      	ldr	r1, [sp, #8]
 801a3a4:	fa0f fe86 	sxth.w	lr, r6
 801a3a8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a3ac:	f06f 0101 	mvn.w	r1, #1
 801a3b0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a3b4:	fb01 f908 	mul.w	r9, r1, r8
 801a3b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a3bc:	eb07 060e 	add.w	r6, r7, lr
 801a3c0:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a3c4:	7876      	ldrb	r6, [r6, #1]
 801a3c6:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a3ca:	00f6      	lsls	r6, r6, #3
 801a3cc:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a3d0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a3d4:	ea4b 0606 	orr.w	r6, fp, r6
 801a3d8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a3dc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a3e0:	f82a 6009 	strh.w	r6, [sl, r9]
 801a3e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a3e6:	4460      	add	r0, ip
 801a3e8:	440a      	add	r2, r1
 801a3ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801a3ee:	e757      	b.n	801a2a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a3f0:	b005      	add	sp, #20
 801a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3f6:	bf00      	nop
 801a3f8:	fffff800 	.word	0xfffff800

0801a3fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a3fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a404:	b087      	sub	sp, #28
 801a406:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a408:	468b      	mov	fp, r1
 801a40a:	9204      	str	r2, [sp, #16]
 801a40c:	6841      	ldr	r1, [r0, #4]
 801a40e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a412:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a416:	9205      	str	r2, [sp, #20]
 801a418:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a41c:	fb01 2404 	mla	r4, r1, r4, r2
 801a420:	6802      	ldr	r2, [r0, #0]
 801a422:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a426:	f8dc 2000 	ldr.w	r2, [ip]
 801a42a:	9201      	str	r2, [sp, #4]
 801a42c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a430:	3204      	adds	r2, #4
 801a432:	9202      	str	r2, [sp, #8]
 801a434:	f1bb 0f00 	cmp.w	fp, #0
 801a438:	dc03      	bgt.n	801a442 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a43a:	9a04      	ldr	r2, [sp, #16]
 801a43c:	2a00      	cmp	r2, #0
 801a43e:	f340 8138 	ble.w	801a6b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a442:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a444:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a448:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a44c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a44e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a452:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a456:	2b00      	cmp	r3, #0
 801a458:	dd0e      	ble.n	801a478 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a45a:	1402      	asrs	r2, r0, #16
 801a45c:	d405      	bmi.n	801a46a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a45e:	42ba      	cmp	r2, r7
 801a460:	da03      	bge.n	801a46a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a462:	140a      	asrs	r2, r1, #16
 801a464:	d401      	bmi.n	801a46a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a466:	42b2      	cmp	r2, r6
 801a468:	db07      	blt.n	801a47a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a46a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a46c:	3b01      	subs	r3, #1
 801a46e:	4410      	add	r0, r2
 801a470:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a472:	3402      	adds	r4, #2
 801a474:	4411      	add	r1, r2
 801a476:	e7ee      	b.n	801a456 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a478:	d019      	beq.n	801a4ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a47a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a47c:	1e5a      	subs	r2, r3, #1
 801a47e:	fb05 0502 	mla	r5, r5, r2, r0
 801a482:	142d      	asrs	r5, r5, #16
 801a484:	d409      	bmi.n	801a49a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a486:	42bd      	cmp	r5, r7
 801a488:	da07      	bge.n	801a49a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a48a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a48c:	fb05 1202 	mla	r2, r5, r2, r1
 801a490:	1412      	asrs	r2, r2, #16
 801a492:	d402      	bmi.n	801a49a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a494:	42b2      	cmp	r2, r6
 801a496:	f2c0 80ac 	blt.w	801a5f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a49a:	f04f 0e00 	mov.w	lr, #0
 801a49e:	eb03 020e 	add.w	r2, r3, lr
 801a4a2:	2a00      	cmp	r2, #0
 801a4a4:	dc3e      	bgt.n	801a524 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a4a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a4aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a4ae:	f1bb 0f00 	cmp.w	fp, #0
 801a4b2:	f340 80fe 	ble.w	801a6b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a4b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a4ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a4be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a4c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a4c6:	eeb0 6a62 	vmov.f32	s12, s5
 801a4ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a4d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a4d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a4de:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a4e2:	eeb0 6a43 	vmov.f32	s12, s6
 801a4e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a4ea:	ee12 2a90 	vmov	r2, s5
 801a4ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a4f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a4f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a4fc:	ee13 2a10 	vmov	r2, s6
 801a500:	9313      	str	r3, [sp, #76]	; 0x4c
 801a502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a504:	f1bb 0b01 	subs.w	fp, fp, #1
 801a508:	fb92 f3f3 	sdiv	r3, r2, r3
 801a50c:	9a04      	ldr	r2, [sp, #16]
 801a50e:	9314      	str	r3, [sp, #80]	; 0x50
 801a510:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a516:	eeb0 3a67 	vmov.f32	s6, s15
 801a51a:	bf08      	it	eq
 801a51c:	4613      	moveq	r3, r2
 801a51e:	eef0 2a47 	vmov.f32	s5, s14
 801a522:	e787      	b.n	801a434 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a524:	1406      	asrs	r6, r0, #16
 801a526:	d45d      	bmi.n	801a5e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a528:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a52c:	42b5      	cmp	r5, r6
 801a52e:	dd59      	ble.n	801a5e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a530:	140f      	asrs	r7, r1, #16
 801a532:	d457      	bmi.n	801a5e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a534:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a538:	42ba      	cmp	r2, r7
 801a53a:	dd53      	ble.n	801a5e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a53c:	9a01      	ldr	r2, [sp, #4]
 801a53e:	b22d      	sxth	r5, r5
 801a540:	fb07 2505 	mla	r5, r7, r5, r2
 801a544:	5daa      	ldrb	r2, [r5, r6]
 801a546:	9d02      	ldr	r5, [sp, #8]
 801a548:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a54c:	0e2e      	lsrs	r6, r5, #24
 801a54e:	d049      	beq.n	801a5e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a550:	f06f 0201 	mvn.w	r2, #1
 801a554:	fb02 f20e 	mul.w	r2, r2, lr
 801a558:	f834 8002 	ldrh.w	r8, [r4, r2]
 801a55c:	9203      	str	r2, [sp, #12]
 801a55e:	9a05      	ldr	r2, [sp, #20]
 801a560:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a564:	4356      	muls	r6, r2
 801a566:	1c72      	adds	r2, r6, #1
 801a568:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a56c:	1212      	asrs	r2, r2, #8
 801a56e:	fa1f f982 	uxth.w	r9, r2
 801a572:	43d2      	mvns	r2, r2
 801a574:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a578:	fb16 f609 	smulbb	r6, r6, r9
 801a57c:	b2ed      	uxtb	r5, r5
 801a57e:	ea4f 2728 	mov.w	r7, r8, asr #8
 801a582:	fb15 f509 	smulbb	r5, r5, r9
 801a586:	b2d2      	uxtb	r2, r2
 801a588:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a58c:	fb07 6702 	mla	r7, r7, r2, r6
 801a590:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a594:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a598:	fb1a fa09 	smulbb	sl, sl, r9
 801a59c:	fa5f f888 	uxtb.w	r8, r8
 801a5a0:	fb08 5502 	mla	r5, r8, r2, r5
 801a5a4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a5a8:	fb06 a602 	mla	r6, r6, r2, sl
 801a5ac:	b2bf      	uxth	r7, r7
 801a5ae:	b2ad      	uxth	r5, r5
 801a5b0:	1c7a      	adds	r2, r7, #1
 801a5b2:	f105 0a01 	add.w	sl, r5, #1
 801a5b6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a5ba:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a5be:	b2b6      	uxth	r6, r6
 801a5c0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a5c4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a5c8:	ea4a 0707 	orr.w	r7, sl, r7
 801a5cc:	f106 0a01 	add.w	sl, r6, #1
 801a5d0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a5d4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a5d8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a5dc:	9a03      	ldr	r2, [sp, #12]
 801a5de:	ea47 070a 	orr.w	r7, r7, sl
 801a5e2:	52a7      	strh	r7, [r4, r2]
 801a5e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a5e6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a5ea:	4410      	add	r0, r2
 801a5ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5ee:	4411      	add	r1, r2
 801a5f0:	e755      	b.n	801a49e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a5f2:	f04f 0800 	mov.w	r8, #0
 801a5f6:	eba3 0208 	sub.w	r2, r3, r8
 801a5fa:	2a00      	cmp	r2, #0
 801a5fc:	f77f af53 	ble.w	801a4a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a600:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801a604:	9f01      	ldr	r7, [sp, #4]
 801a606:	140a      	asrs	r2, r1, #16
 801a608:	fb06 7202 	mla	r2, r6, r2, r7
 801a60c:	1405      	asrs	r5, r0, #16
 801a60e:	5d52      	ldrb	r2, [r2, r5]
 801a610:	9d02      	ldr	r5, [sp, #8]
 801a612:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a616:	0e2e      	lsrs	r6, r5, #24
 801a618:	d044      	beq.n	801a6a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801a61a:	9a05      	ldr	r2, [sp, #20]
 801a61c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801a620:	4356      	muls	r6, r2
 801a622:	1c72      	adds	r2, r6, #1
 801a624:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a628:	1212      	asrs	r2, r2, #8
 801a62a:	fa1f f982 	uxth.w	r9, r2
 801a62e:	43d2      	mvns	r2, r2
 801a630:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a634:	fb16 f609 	smulbb	r6, r6, r9
 801a638:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a63c:	b2ed      	uxtb	r5, r5
 801a63e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a642:	fb15 f509 	smulbb	r5, r5, r9
 801a646:	b2d2      	uxtb	r2, r2
 801a648:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a64c:	fb07 6702 	mla	r7, r7, r2, r6
 801a650:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a654:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a658:	fb1a fa09 	smulbb	sl, sl, r9
 801a65c:	fa5f fe8e 	uxtb.w	lr, lr
 801a660:	fb0e 5502 	mla	r5, lr, r2, r5
 801a664:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a668:	fb06 a602 	mla	r6, r6, r2, sl
 801a66c:	b2bf      	uxth	r7, r7
 801a66e:	b2ad      	uxth	r5, r5
 801a670:	1c7a      	adds	r2, r7, #1
 801a672:	f105 0a01 	add.w	sl, r5, #1
 801a676:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a67a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a67e:	b2b6      	uxth	r6, r6
 801a680:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a684:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a688:	ea4a 0707 	orr.w	r7, sl, r7
 801a68c:	f106 0a01 	add.w	sl, r6, #1
 801a690:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a694:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a698:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a69c:	ea47 070a 	orr.w	r7, r7, sl
 801a6a0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a6a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a6a6:	f108 0801 	add.w	r8, r8, #1
 801a6aa:	4410      	add	r0, r2
 801a6ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a6ae:	4411      	add	r1, r2
 801a6b0:	e7a1      	b.n	801a5f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801a6b2:	b007      	add	sp, #28
 801a6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a6b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c0:	b085      	sub	sp, #20
 801a6c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a6c4:	468b      	mov	fp, r1
 801a6c6:	6841      	ldr	r1, [r0, #4]
 801a6c8:	9203      	str	r2, [sp, #12]
 801a6ca:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a6ce:	fb01 2404 	mla	r4, r1, r4, r2
 801a6d2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a6d6:	6802      	ldr	r2, [r0, #0]
 801a6d8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a6dc:	f8de 2000 	ldr.w	r2, [lr]
 801a6e0:	9200      	str	r2, [sp, #0]
 801a6e2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a6e6:	3204      	adds	r2, #4
 801a6e8:	9201      	str	r2, [sp, #4]
 801a6ea:	f1bb 0f00 	cmp.w	fp, #0
 801a6ee:	dc03      	bgt.n	801a6f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a6f0:	9a03      	ldr	r2, [sp, #12]
 801a6f2:	2a00      	cmp	r2, #0
 801a6f4:	f340 8153 	ble.w	801a99e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a6f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a6fa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a6fe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a702:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a704:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a708:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	dd0e      	ble.n	801a72e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a710:	1408      	asrs	r0, r1, #16
 801a712:	d405      	bmi.n	801a720 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a714:	42b8      	cmp	r0, r7
 801a716:	da03      	bge.n	801a720 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a718:	1410      	asrs	r0, r2, #16
 801a71a:	d401      	bmi.n	801a720 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a71c:	42b0      	cmp	r0, r6
 801a71e:	db07      	blt.n	801a730 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a720:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a722:	3b01      	subs	r3, #1
 801a724:	4401      	add	r1, r0
 801a726:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a728:	3402      	adds	r4, #2
 801a72a:	4402      	add	r2, r0
 801a72c:	e7ee      	b.n	801a70c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a72e:	d017      	beq.n	801a760 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a730:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a732:	1e58      	subs	r0, r3, #1
 801a734:	fb05 1500 	mla	r5, r5, r0, r1
 801a738:	142d      	asrs	r5, r5, #16
 801a73a:	d409      	bmi.n	801a750 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a73c:	42bd      	cmp	r5, r7
 801a73e:	da07      	bge.n	801a750 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a740:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a742:	fb05 2000 	mla	r0, r5, r0, r2
 801a746:	1400      	asrs	r0, r0, #16
 801a748:	d402      	bmi.n	801a750 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a74a:	42b0      	cmp	r0, r6
 801a74c:	f2c0 80bc 	blt.w	801a8c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801a750:	2600      	movs	r6, #0
 801a752:	1998      	adds	r0, r3, r6
 801a754:	2800      	cmp	r0, #0
 801a756:	dc3e      	bgt.n	801a7d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a758:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a75c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a760:	f1bb 0f00 	cmp.w	fp, #0
 801a764:	f340 811b 	ble.w	801a99e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a768:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a76c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a770:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a774:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a778:	eeb0 6a62 	vmov.f32	s12, s5
 801a77c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a780:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a784:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a788:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a78c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a790:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a794:	eeb0 6a43 	vmov.f32	s12, s6
 801a798:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a79c:	ee12 2a90 	vmov	r2, s5
 801a7a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a7a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7ae:	ee13 2a10 	vmov	r2, s6
 801a7b2:	9311      	str	r3, [sp, #68]	; 0x44
 801a7b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7b6:	f1bb 0b01 	subs.w	fp, fp, #1
 801a7ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7be:	9a03      	ldr	r2, [sp, #12]
 801a7c0:	9312      	str	r3, [sp, #72]	; 0x48
 801a7c2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a7c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7c8:	eeb0 3a67 	vmov.f32	s6, s15
 801a7cc:	bf08      	it	eq
 801a7ce:	4613      	moveq	r3, r2
 801a7d0:	eef0 2a47 	vmov.f32	s5, s14
 801a7d4:	e789      	b.n	801a6ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a7d6:	140f      	asrs	r7, r1, #16
 801a7d8:	d426      	bmi.n	801a828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7da:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a7de:	42bd      	cmp	r5, r7
 801a7e0:	dd22      	ble.n	801a828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7e2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a7e6:	d41f      	bmi.n	801a828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7e8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a7ec:	4560      	cmp	r0, ip
 801a7ee:	dd1b      	ble.n	801a828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7f0:	9800      	ldr	r0, [sp, #0]
 801a7f2:	b22d      	sxth	r5, r5
 801a7f4:	fb0c 0505 	mla	r5, ip, r5, r0
 801a7f8:	5de8      	ldrb	r0, [r5, r7]
 801a7fa:	9d01      	ldr	r5, [sp, #4]
 801a7fc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a800:	0e07      	lsrs	r7, r0, #24
 801a802:	2fff      	cmp	r7, #255	; 0xff
 801a804:	d116      	bne.n	801a834 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a806:	f06f 0501 	mvn.w	r5, #1
 801a80a:	fb05 f706 	mul.w	r7, r5, r6
 801a80e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a812:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a816:	0945      	lsrs	r5, r0, #5
 801a818:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a81c:	ea4c 0505 	orr.w	r5, ip, r5
 801a820:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a824:	4305      	orrs	r5, r0
 801a826:	53e5      	strh	r5, [r4, r7]
 801a828:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a82a:	3e01      	subs	r6, #1
 801a82c:	4401      	add	r1, r0
 801a82e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a830:	4402      	add	r2, r0
 801a832:	e78e      	b.n	801a752 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a834:	b2fd      	uxtb	r5, r7
 801a836:	2f00      	cmp	r7, #0
 801a838:	d0f6      	beq.n	801a828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a83a:	f06f 0701 	mvn.w	r7, #1
 801a83e:	fa1f f985 	uxth.w	r9, r5
 801a842:	43ed      	mvns	r5, r5
 801a844:	4377      	muls	r7, r6
 801a846:	f834 8007 	ldrh.w	r8, [r4, r7]
 801a84a:	9702      	str	r7, [sp, #8]
 801a84c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a850:	fb17 f709 	smulbb	r7, r7, r9
 801a854:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a858:	b2c0      	uxtb	r0, r0
 801a85a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a85e:	fb10 f009 	smulbb	r0, r0, r9
 801a862:	b2ed      	uxtb	r5, r5
 801a864:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a868:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a86c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a870:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a874:	fb1a fa09 	smulbb	sl, sl, r9
 801a878:	fa5f f888 	uxtb.w	r8, r8
 801a87c:	fb08 0005 	mla	r0, r8, r5, r0
 801a880:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a884:	fb07 a705 	mla	r7, r7, r5, sl
 801a888:	b280      	uxth	r0, r0
 801a88a:	fa1f fc8c 	uxth.w	ip, ip
 801a88e:	f100 0a01 	add.w	sl, r0, #1
 801a892:	f10c 0501 	add.w	r5, ip, #1
 801a896:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a89a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a89e:	b2bf      	uxth	r7, r7
 801a8a0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a8a4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a8a8:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a8ac:	f107 0a01 	add.w	sl, r7, #1
 801a8b0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a8b4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a8b8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a8bc:	9802      	ldr	r0, [sp, #8]
 801a8be:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a8c2:	f824 c000 	strh.w	ip, [r4, r0]
 801a8c6:	e7af      	b.n	801a828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a8c8:	f04f 0800 	mov.w	r8, #0
 801a8cc:	eba3 0008 	sub.w	r0, r3, r8
 801a8d0:	2800      	cmp	r0, #0
 801a8d2:	f77f af41 	ble.w	801a758 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a8d6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a8da:	9f00      	ldr	r7, [sp, #0]
 801a8dc:	1410      	asrs	r0, r2, #16
 801a8de:	fb06 7000 	mla	r0, r6, r0, r7
 801a8e2:	140d      	asrs	r5, r1, #16
 801a8e4:	5d40      	ldrb	r0, [r0, r5]
 801a8e6:	9d01      	ldr	r5, [sp, #4]
 801a8e8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801a8ec:	0e2e      	lsrs	r6, r5, #24
 801a8ee:	2eff      	cmp	r6, #255	; 0xff
 801a8f0:	d112      	bne.n	801a918 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801a8f2:	482c      	ldr	r0, [pc, #176]	; (801a9a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801a8f4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801a8f8:	0968      	lsrs	r0, r5, #5
 801a8fa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a8fe:	4330      	orrs	r0, r6
 801a900:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a904:	4328      	orrs	r0, r5
 801a906:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801a90a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a90c:	f108 0801 	add.w	r8, r8, #1
 801a910:	4401      	add	r1, r0
 801a912:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a914:	4402      	add	r2, r0
 801a916:	e7d9      	b.n	801a8cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a918:	b2f0      	uxtb	r0, r6
 801a91a:	2e00      	cmp	r6, #0
 801a91c:	d0f5      	beq.n	801a90a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a91e:	fa1f f980 	uxth.w	r9, r0
 801a922:	43c0      	mvns	r0, r0
 801a924:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a928:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a92c:	fb16 f609 	smulbb	r6, r6, r9
 801a930:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a934:	b2ed      	uxtb	r5, r5
 801a936:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a93a:	fb15 f509 	smulbb	r5, r5, r9
 801a93e:	b2c0      	uxtb	r0, r0
 801a940:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a944:	fb07 6700 	mla	r7, r7, r0, r6
 801a948:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a94c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a950:	fb1a fa09 	smulbb	sl, sl, r9
 801a954:	fa5f fc8c 	uxtb.w	ip, ip
 801a958:	fb0c 5500 	mla	r5, ip, r0, r5
 801a95c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a960:	fb06 a600 	mla	r6, r6, r0, sl
 801a964:	b2bf      	uxth	r7, r7
 801a966:	b2ad      	uxth	r5, r5
 801a968:	1c78      	adds	r0, r7, #1
 801a96a:	f105 0a01 	add.w	sl, r5, #1
 801a96e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801a972:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a976:	b2b6      	uxth	r6, r6
 801a978:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a97c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a980:	ea4a 0707 	orr.w	r7, sl, r7
 801a984:	f106 0a01 	add.w	sl, r6, #1
 801a988:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a98c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a990:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a994:	ea47 070a 	orr.w	r7, r7, sl
 801a998:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a99c:	e7b5      	b.n	801a90a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a99e:	b005      	add	sp, #20
 801a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9a4:	fffff800 	.word	0xfffff800

0801a9a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b0:	b087      	sub	sp, #28
 801a9b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a9b4:	468b      	mov	fp, r1
 801a9b6:	9204      	str	r2, [sp, #16]
 801a9b8:	6861      	ldr	r1, [r4, #4]
 801a9ba:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a9be:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a9c2:	9205      	str	r2, [sp, #20]
 801a9c4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a9c8:	fb01 2000 	mla	r0, r1, r0, r2
 801a9cc:	6822      	ldr	r2, [r4, #0]
 801a9ce:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a9d2:	f8de 2000 	ldr.w	r2, [lr]
 801a9d6:	9201      	str	r2, [sp, #4]
 801a9d8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a9dc:	9202      	str	r2, [sp, #8]
 801a9de:	f1bb 0f00 	cmp.w	fp, #0
 801a9e2:	dc03      	bgt.n	801a9ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a9e4:	9a04      	ldr	r2, [sp, #16]
 801a9e6:	2a00      	cmp	r2, #0
 801a9e8:	f340 8142 	ble.w	801ac70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a9ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a9ee:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a9f2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a9f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a9f8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a9fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	dd0e      	ble.n	801aa22 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801aa04:	140c      	asrs	r4, r1, #16
 801aa06:	d405      	bmi.n	801aa14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa08:	42bc      	cmp	r4, r7
 801aa0a:	da03      	bge.n	801aa14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa0c:	1414      	asrs	r4, r2, #16
 801aa0e:	d401      	bmi.n	801aa14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa10:	42b4      	cmp	r4, r6
 801aa12:	db07      	blt.n	801aa24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aa14:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aa16:	3b01      	subs	r3, #1
 801aa18:	4421      	add	r1, r4
 801aa1a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aa1c:	3002      	adds	r0, #2
 801aa1e:	4422      	add	r2, r4
 801aa20:	e7ee      	b.n	801aa00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801aa22:	d019      	beq.n	801aa58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aa24:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801aa26:	1e5c      	subs	r4, r3, #1
 801aa28:	fb05 1504 	mla	r5, r5, r4, r1
 801aa2c:	142d      	asrs	r5, r5, #16
 801aa2e:	d409      	bmi.n	801aa44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa30:	42bd      	cmp	r5, r7
 801aa32:	da07      	bge.n	801aa44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa34:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801aa36:	fb05 2404 	mla	r4, r5, r4, r2
 801aa3a:	1424      	asrs	r4, r4, #16
 801aa3c:	d402      	bmi.n	801aa44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa3e:	42b4      	cmp	r4, r6
 801aa40:	f2c0 80b1 	blt.w	801aba6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801aa44:	f04f 0800 	mov.w	r8, #0
 801aa48:	eb03 0408 	add.w	r4, r3, r8
 801aa4c:	2c00      	cmp	r4, #0
 801aa4e:	dc3e      	bgt.n	801aace <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801aa50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aa58:	f1bb 0f00 	cmp.w	fp, #0
 801aa5c:	f340 8108 	ble.w	801ac70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801aa60:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aa64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aa68:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aa6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa70:	eeb0 6a62 	vmov.f32	s12, s5
 801aa74:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa78:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa88:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801aa8c:	eeb0 6a43 	vmov.f32	s12, s6
 801aa90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa94:	ee12 2a90 	vmov	r2, s5
 801aa98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aaa2:	fb92 f3f3 	sdiv	r3, r2, r3
 801aaa6:	ee13 2a10 	vmov	r2, s6
 801aaaa:	9313      	str	r3, [sp, #76]	; 0x4c
 801aaac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aaae:	f1bb 0b01 	subs.w	fp, fp, #1
 801aab2:	fb92 f3f3 	sdiv	r3, r2, r3
 801aab6:	9a04      	ldr	r2, [sp, #16]
 801aab8:	9314      	str	r3, [sp, #80]	; 0x50
 801aaba:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801aabe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aac0:	eeb0 3a67 	vmov.f32	s6, s15
 801aac4:	bf08      	it	eq
 801aac6:	4613      	moveq	r3, r2
 801aac8:	eef0 2a47 	vmov.f32	s5, s14
 801aacc:	e787      	b.n	801a9de <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801aace:	140e      	asrs	r6, r1, #16
 801aad0:	d462      	bmi.n	801ab98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aad2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801aad6:	42b5      	cmp	r5, r6
 801aad8:	dd5e      	ble.n	801ab98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aada:	1417      	asrs	r7, r2, #16
 801aadc:	d45c      	bmi.n	801ab98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aade:	f8de 400c 	ldr.w	r4, [lr, #12]
 801aae2:	42bc      	cmp	r4, r7
 801aae4:	dd58      	ble.n	801ab98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aae6:	b22d      	sxth	r5, r5
 801aae8:	fb07 6505 	mla	r5, r7, r5, r6
 801aaec:	9c02      	ldr	r4, [sp, #8]
 801aaee:	5d66      	ldrb	r6, [r4, r5]
 801aaf0:	2e00      	cmp	r6, #0
 801aaf2:	d051      	beq.n	801ab98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aaf4:	9c01      	ldr	r4, [sp, #4]
 801aaf6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801aafa:	f06f 0401 	mvn.w	r4, #1
 801aafe:	fb04 f408 	mul.w	r4, r4, r8
 801ab02:	5b05      	ldrh	r5, [r0, r4]
 801ab04:	9403      	str	r4, [sp, #12]
 801ab06:	9c05      	ldr	r4, [sp, #20]
 801ab08:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ab0c:	4366      	muls	r6, r4
 801ab0e:	1c74      	adds	r4, r6, #1
 801ab10:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ab14:	1224      	asrs	r4, r4, #8
 801ab16:	b2a7      	uxth	r7, r4
 801ab18:	43e4      	mvns	r4, r4
 801ab1a:	122e      	asrs	r6, r5, #8
 801ab1c:	b2e4      	uxtb	r4, r4
 801ab1e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ab22:	fb16 f604 	smulbb	r6, r6, r4
 801ab26:	00ed      	lsls	r5, r5, #3
 801ab28:	b2ed      	uxtb	r5, r5
 801ab2a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801ab2e:	fb15 f504 	smulbb	r5, r5, r4
 801ab32:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ab36:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ab3a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ab3e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801ab42:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ab46:	fb1a fa04 	smulbb	sl, sl, r4
 801ab4a:	fa5f f989 	uxtb.w	r9, r9
 801ab4e:	fb09 5507 	mla	r5, r9, r7, r5
 801ab52:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ab56:	fb06 a607 	mla	r6, r6, r7, sl
 801ab5a:	fa1f fc8c 	uxth.w	ip, ip
 801ab5e:	b2ad      	uxth	r5, r5
 801ab60:	f10c 0401 	add.w	r4, ip, #1
 801ab64:	f105 0a01 	add.w	sl, r5, #1
 801ab68:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ab6c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ab70:	b2b6      	uxth	r6, r6
 801ab72:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ab76:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ab7a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ab7e:	f106 0a01 	add.w	sl, r6, #1
 801ab82:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ab86:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ab8a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ab8e:	9c03      	ldr	r4, [sp, #12]
 801ab90:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ab94:	f820 c004 	strh.w	ip, [r0, r4]
 801ab98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ab9a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ab9e:	4421      	add	r1, r4
 801aba0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aba2:	4422      	add	r2, r4
 801aba4:	e750      	b.n	801aa48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801aba6:	f04f 0900 	mov.w	r9, #0
 801abaa:	eba3 0409 	sub.w	r4, r3, r9
 801abae:	2c00      	cmp	r4, #0
 801abb0:	f77f af4e 	ble.w	801aa50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801abb4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801abb8:	140d      	asrs	r5, r1, #16
 801abba:	1414      	asrs	r4, r2, #16
 801abbc:	fb06 5404 	mla	r4, r6, r4, r5
 801abc0:	9d02      	ldr	r5, [sp, #8]
 801abc2:	5d2e      	ldrb	r6, [r5, r4]
 801abc4:	2e00      	cmp	r6, #0
 801abc6:	d04c      	beq.n	801ac62 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801abc8:	9d01      	ldr	r5, [sp, #4]
 801abca:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801abce:	9c05      	ldr	r4, [sp, #20]
 801abd0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801abd4:	4366      	muls	r6, r4
 801abd6:	1c74      	adds	r4, r6, #1
 801abd8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801abdc:	1224      	asrs	r4, r4, #8
 801abde:	b2a7      	uxth	r7, r4
 801abe0:	43e4      	mvns	r4, r4
 801abe2:	122e      	asrs	r6, r5, #8
 801abe4:	b2e4      	uxtb	r4, r4
 801abe6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801abea:	fb16 f604 	smulbb	r6, r6, r4
 801abee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801abf2:	00ed      	lsls	r5, r5, #3
 801abf4:	b2ed      	uxtb	r5, r5
 801abf6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801abfa:	fb15 f504 	smulbb	r5, r5, r4
 801abfe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac02:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ac06:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ac0a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ac0e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ac12:	fb1a fa04 	smulbb	sl, sl, r4
 801ac16:	fa5f f888 	uxtb.w	r8, r8
 801ac1a:	fb08 5507 	mla	r5, r8, r7, r5
 801ac1e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ac22:	fb06 a607 	mla	r6, r6, r7, sl
 801ac26:	fa1f fc8c 	uxth.w	ip, ip
 801ac2a:	b2ad      	uxth	r5, r5
 801ac2c:	f10c 0401 	add.w	r4, ip, #1
 801ac30:	f105 0a01 	add.w	sl, r5, #1
 801ac34:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ac38:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ac3c:	b2b6      	uxth	r6, r6
 801ac3e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ac42:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ac46:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ac4a:	f106 0a01 	add.w	sl, r6, #1
 801ac4e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ac52:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ac56:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ac5a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ac5e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801ac62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac64:	f109 0901 	add.w	r9, r9, #1
 801ac68:	4421      	add	r1, r4
 801ac6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac6c:	4422      	add	r2, r4
 801ac6e:	e79c      	b.n	801abaa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ac70:	b007      	add	sp, #28
 801ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ac7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac7e:	b085      	sub	sp, #20
 801ac80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac82:	468b      	mov	fp, r1
 801ac84:	6861      	ldr	r1, [r4, #4]
 801ac86:	9203      	str	r2, [sp, #12]
 801ac88:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801ac8c:	fb01 2000 	mla	r0, r1, r0, r2
 801ac90:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801ac94:	6822      	ldr	r2, [r4, #0]
 801ac96:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ac9a:	f8d8 2000 	ldr.w	r2, [r8]
 801ac9e:	9200      	str	r2, [sp, #0]
 801aca0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801aca4:	9201      	str	r2, [sp, #4]
 801aca6:	f1bb 0f00 	cmp.w	fp, #0
 801acaa:	dc03      	bgt.n	801acb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801acac:	9a03      	ldr	r2, [sp, #12]
 801acae:	2a00      	cmp	r2, #0
 801acb0:	f340 8146 	ble.w	801af40 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801acb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801acb6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801acba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801acbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801acc0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801acc4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801acc8:	2b00      	cmp	r3, #0
 801acca:	dd0e      	ble.n	801acea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801accc:	140c      	asrs	r4, r1, #16
 801acce:	d405      	bmi.n	801acdc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801acd0:	42bc      	cmp	r4, r7
 801acd2:	da03      	bge.n	801acdc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801acd4:	1414      	asrs	r4, r2, #16
 801acd6:	d401      	bmi.n	801acdc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801acd8:	42b4      	cmp	r4, r6
 801acda:	db07      	blt.n	801acec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801acdc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801acde:	3b01      	subs	r3, #1
 801ace0:	4421      	add	r1, r4
 801ace2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ace4:	3002      	adds	r0, #2
 801ace6:	4422      	add	r2, r4
 801ace8:	e7ee      	b.n	801acc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801acea:	d017      	beq.n	801ad1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801acec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801acee:	1e5c      	subs	r4, r3, #1
 801acf0:	fb05 1504 	mla	r5, r5, r4, r1
 801acf4:	142d      	asrs	r5, r5, #16
 801acf6:	d409      	bmi.n	801ad0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801acf8:	42bd      	cmp	r5, r7
 801acfa:	da07      	bge.n	801ad0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801acfc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801acfe:	fb05 2404 	mla	r4, r5, r4, r2
 801ad02:	1424      	asrs	r4, r4, #16
 801ad04:	d402      	bmi.n	801ad0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ad06:	42b4      	cmp	r4, r6
 801ad08:	f2c0 80b3 	blt.w	801ae72 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ad0c:	2600      	movs	r6, #0
 801ad0e:	199c      	adds	r4, r3, r6
 801ad10:	2c00      	cmp	r4, #0
 801ad12:	dc3e      	bgt.n	801ad92 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ad14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad18:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ad1c:	f1bb 0f00 	cmp.w	fp, #0
 801ad20:	f340 810e 	ble.w	801af40 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ad24:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad2c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ad30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad34:	eeb0 6a62 	vmov.f32	s12, s5
 801ad38:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad40:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ad4c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ad50:	eeb0 6a43 	vmov.f32	s12, s6
 801ad54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ad58:	ee12 2a90 	vmov	r2, s5
 801ad5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ad60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad66:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad6a:	ee13 2a10 	vmov	r2, s6
 801ad6e:	9311      	str	r3, [sp, #68]	; 0x44
 801ad70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad72:	f1bb 0b01 	subs.w	fp, fp, #1
 801ad76:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad7a:	9a03      	ldr	r2, [sp, #12]
 801ad7c:	9312      	str	r3, [sp, #72]	; 0x48
 801ad7e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ad82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad84:	eeb0 3a67 	vmov.f32	s6, s15
 801ad88:	bf08      	it	eq
 801ad8a:	4613      	moveq	r3, r2
 801ad8c:	eef0 2a47 	vmov.f32	s5, s14
 801ad90:	e789      	b.n	801aca6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ad92:	140f      	asrs	r7, r1, #16
 801ad94:	d418      	bmi.n	801adc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad96:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ad9a:	42bd      	cmp	r5, r7
 801ad9c:	dd14      	ble.n	801adc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad9e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ada2:	d411      	bmi.n	801adc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ada4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ada8:	4564      	cmp	r4, ip
 801adaa:	dd0d      	ble.n	801adc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801adac:	b22d      	sxth	r5, r5
 801adae:	fb0c 7505 	mla	r5, ip, r5, r7
 801adb2:	9c01      	ldr	r4, [sp, #4]
 801adb4:	5d64      	ldrb	r4, [r4, r5]
 801adb6:	2cff      	cmp	r4, #255	; 0xff
 801adb8:	d10c      	bne.n	801add4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801adba:	9c00      	ldr	r4, [sp, #0]
 801adbc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801adc0:	f06f 0401 	mvn.w	r4, #1
 801adc4:	4374      	muls	r4, r6
 801adc6:	5305      	strh	r5, [r0, r4]
 801adc8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801adca:	3e01      	subs	r6, #1
 801adcc:	4421      	add	r1, r4
 801adce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801add0:	4422      	add	r2, r4
 801add2:	e79c      	b.n	801ad0e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801add4:	2c00      	cmp	r4, #0
 801add6:	d0f7      	beq.n	801adc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801add8:	9f00      	ldr	r7, [sp, #0]
 801adda:	fa1f fc84 	uxth.w	ip, r4
 801adde:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801ade2:	f06f 0501 	mvn.w	r5, #1
 801ade6:	43e4      	mvns	r4, r4
 801ade8:	4375      	muls	r5, r6
 801adea:	9502      	str	r5, [sp, #8]
 801adec:	5b45      	ldrh	r5, [r0, r5]
 801adee:	b2e4      	uxtb	r4, r4
 801adf0:	122f      	asrs	r7, r5, #8
 801adf2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801adf6:	fb17 f704 	smulbb	r7, r7, r4
 801adfa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801adfe:	00ed      	lsls	r5, r5, #3
 801ae00:	b2ed      	uxtb	r5, r5
 801ae02:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801ae06:	fb15 f504 	smulbb	r5, r5, r4
 801ae0a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ae0e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801ae12:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ae16:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801ae1a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ae1e:	fb1a fa04 	smulbb	sl, sl, r4
 801ae22:	fa5f f989 	uxtb.w	r9, r9
 801ae26:	fb09 550c 	mla	r5, r9, ip, r5
 801ae2a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ae2e:	fb07 a70c 	mla	r7, r7, ip, sl
 801ae32:	fa1f fe8e 	uxth.w	lr, lr
 801ae36:	b2ad      	uxth	r5, r5
 801ae38:	f10e 0401 	add.w	r4, lr, #1
 801ae3c:	f105 0a01 	add.w	sl, r5, #1
 801ae40:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801ae44:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ae48:	b2bf      	uxth	r7, r7
 801ae4a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ae4e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ae52:	ea4a 0e0e 	orr.w	lr, sl, lr
 801ae56:	f107 0a01 	add.w	sl, r7, #1
 801ae5a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ae5e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ae62:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ae66:	9c02      	ldr	r4, [sp, #8]
 801ae68:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ae6c:	f820 e004 	strh.w	lr, [r0, r4]
 801ae70:	e7aa      	b.n	801adc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ae72:	f04f 0900 	mov.w	r9, #0
 801ae76:	eba3 0409 	sub.w	r4, r3, r9
 801ae7a:	2c00      	cmp	r4, #0
 801ae7c:	f77f af4a 	ble.w	801ad14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ae80:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ae84:	1414      	asrs	r4, r2, #16
 801ae86:	140d      	asrs	r5, r1, #16
 801ae88:	fb06 5504 	mla	r5, r6, r4, r5
 801ae8c:	9c01      	ldr	r4, [sp, #4]
 801ae8e:	5d64      	ldrb	r4, [r4, r5]
 801ae90:	2cff      	cmp	r4, #255	; 0xff
 801ae92:	d10b      	bne.n	801aeac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ae94:	9c00      	ldr	r4, [sp, #0]
 801ae96:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801ae9a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801ae9e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aea0:	f109 0901 	add.w	r9, r9, #1
 801aea4:	4421      	add	r1, r4
 801aea6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aea8:	4422      	add	r2, r4
 801aeaa:	e7e4      	b.n	801ae76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801aeac:	2c00      	cmp	r4, #0
 801aeae:	d0f6      	beq.n	801ae9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801aeb0:	b2a7      	uxth	r7, r4
 801aeb2:	43e4      	mvns	r4, r4
 801aeb4:	9e00      	ldr	r6, [sp, #0]
 801aeb6:	b2e4      	uxtb	r4, r4
 801aeb8:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801aebc:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801aec0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801aec4:	122e      	asrs	r6, r5, #8
 801aec6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801aeca:	fb16 f604 	smulbb	r6, r6, r4
 801aece:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801aed2:	00ed      	lsls	r5, r5, #3
 801aed4:	b2ed      	uxtb	r5, r5
 801aed6:	fb15 f504 	smulbb	r5, r5, r4
 801aeda:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aede:	fb0c 6c07 	mla	ip, ip, r7, r6
 801aee2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801aee6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801aeea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aeee:	fb1a fa04 	smulbb	sl, sl, r4
 801aef2:	fa5f fe8e 	uxtb.w	lr, lr
 801aef6:	fb0e 5507 	mla	r5, lr, r7, r5
 801aefa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aefe:	fb06 a607 	mla	r6, r6, r7, sl
 801af02:	fa1f fc8c 	uxth.w	ip, ip
 801af06:	b2ad      	uxth	r5, r5
 801af08:	f10c 0401 	add.w	r4, ip, #1
 801af0c:	f105 0a01 	add.w	sl, r5, #1
 801af10:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801af14:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801af18:	b2b6      	uxth	r6, r6
 801af1a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801af1e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801af22:	ea4a 0c0c 	orr.w	ip, sl, ip
 801af26:	f106 0a01 	add.w	sl, r6, #1
 801af2a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801af2e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801af32:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801af36:	ea4c 0c0a 	orr.w	ip, ip, sl
 801af3a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801af3e:	e7ae      	b.n	801ae9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801af40:	b005      	add	sp, #20
 801af42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af46 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801af46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af4a:	b085      	sub	sp, #20
 801af4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801af4e:	9100      	str	r1, [sp, #0]
 801af50:	9203      	str	r2, [sp, #12]
 801af52:	6841      	ldr	r1, [r0, #4]
 801af54:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801af58:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801af5c:	9201      	str	r2, [sp, #4]
 801af5e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801af62:	fb01 2404 	mla	r4, r1, r4, r2
 801af66:	6802      	ldr	r2, [r0, #0]
 801af68:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801af6c:	f8de 2000 	ldr.w	r2, [lr]
 801af70:	9202      	str	r2, [sp, #8]
 801af72:	9a01      	ldr	r2, [sp, #4]
 801af74:	43d6      	mvns	r6, r2
 801af76:	b2f6      	uxtb	r6, r6
 801af78:	9a00      	ldr	r2, [sp, #0]
 801af7a:	2a00      	cmp	r2, #0
 801af7c:	dc03      	bgt.n	801af86 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801af7e:	9a03      	ldr	r2, [sp, #12]
 801af80:	2a00      	cmp	r2, #0
 801af82:	f340 8124 	ble.w	801b1ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801af86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af88:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801af8c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801af90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801af92:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801af96:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	dd0e      	ble.n	801afbc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af9e:	1408      	asrs	r0, r1, #16
 801afa0:	d405      	bmi.n	801afae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801afa2:	4560      	cmp	r0, ip
 801afa4:	da03      	bge.n	801afae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801afa6:	1410      	asrs	r0, r2, #16
 801afa8:	d401      	bmi.n	801afae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801afaa:	42b8      	cmp	r0, r7
 801afac:	db07      	blt.n	801afbe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801afae:	9811      	ldr	r0, [sp, #68]	; 0x44
 801afb0:	3b01      	subs	r3, #1
 801afb2:	4401      	add	r1, r0
 801afb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801afb6:	3402      	adds	r4, #2
 801afb8:	4402      	add	r2, r0
 801afba:	e7ee      	b.n	801af9a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801afbc:	d06e      	beq.n	801b09c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801afbe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801afc0:	1e58      	subs	r0, r3, #1
 801afc2:	fb05 1500 	mla	r5, r5, r0, r1
 801afc6:	142d      	asrs	r5, r5, #16
 801afc8:	d45c      	bmi.n	801b084 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afca:	4565      	cmp	r5, ip
 801afcc:	da5a      	bge.n	801b084 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801afd0:	fb05 2000 	mla	r0, r5, r0, r2
 801afd4:	1400      	asrs	r0, r0, #16
 801afd6:	d455      	bmi.n	801b084 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afd8:	42b8      	cmp	r0, r7
 801afda:	da53      	bge.n	801b084 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afdc:	4699      	mov	r9, r3
 801afde:	46a2      	mov	sl, r4
 801afe0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801afe4:	f1b9 0f00 	cmp.w	r9, #0
 801afe8:	dd54      	ble.n	801b094 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801afea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801afee:	140d      	asrs	r5, r1, #16
 801aff0:	1410      	asrs	r0, r2, #16
 801aff2:	fb07 5000 	mla	r0, r7, r0, r5
 801aff6:	9d02      	ldr	r5, [sp, #8]
 801aff8:	f109 39ff 	add.w	r9, r9, #4294967295
 801affc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b000:	f8ba 5000 	ldrh.w	r5, [sl]
 801b004:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b008:	122f      	asrs	r7, r5, #8
 801b00a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b00e:	fb17 f706 	smulbb	r7, r7, r6
 801b012:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b016:	00ed      	lsls	r5, r5, #3
 801b018:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b01c:	b2ed      	uxtb	r5, r5
 801b01e:	fb18 f806 	smulbb	r8, r8, r6
 801b022:	fb15 f506 	smulbb	r5, r5, r6
 801b026:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b02a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b02e:	10c7      	asrs	r7, r0, #3
 801b030:	00c0      	lsls	r0, r0, #3
 801b032:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b036:	b2c0      	uxtb	r0, r0
 801b038:	fb07 870b 	mla	r7, r7, fp, r8
 801b03c:	fb00 500b 	mla	r0, r0, fp, r5
 801b040:	fa1f fc8c 	uxth.w	ip, ip
 801b044:	b280      	uxth	r0, r0
 801b046:	b2bf      	uxth	r7, r7
 801b048:	f10c 0501 	add.w	r5, ip, #1
 801b04c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b050:	f107 0801 	add.w	r8, r7, #1
 801b054:	1c45      	adds	r5, r0, #1
 801b056:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b05a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b05e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b060:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b064:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b068:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b06c:	ea45 0c0c 	orr.w	ip, r5, ip
 801b070:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b074:	4401      	add	r1, r0
 801b076:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b078:	ea4c 0c08 	orr.w	ip, ip, r8
 801b07c:	f82a cb02 	strh.w	ip, [sl], #2
 801b080:	4402      	add	r2, r0
 801b082:	e7af      	b.n	801afe4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b084:	f04f 0800 	mov.w	r8, #0
 801b088:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b08c:	eb03 0008 	add.w	r0, r3, r8
 801b090:	2800      	cmp	r0, #0
 801b092:	dc41      	bgt.n	801b118 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b094:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b098:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b09c:	9b00      	ldr	r3, [sp, #0]
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	f340 8095 	ble.w	801b1ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b0a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b0a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0b8:	eef0 6a62 	vmov.f32	s13, s5
 801b0bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0d0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b0d4:	eef0 6a43 	vmov.f32	s13, s6
 801b0d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0dc:	ee12 2a90 	vmov	r2, s5
 801b0e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0ee:	ee13 2a10 	vmov	r2, s6
 801b0f2:	9311      	str	r3, [sp, #68]	; 0x44
 801b0f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0f6:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b0fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0fe:	9312      	str	r3, [sp, #72]	; 0x48
 801b100:	9b00      	ldr	r3, [sp, #0]
 801b102:	9a03      	ldr	r2, [sp, #12]
 801b104:	3b01      	subs	r3, #1
 801b106:	9300      	str	r3, [sp, #0]
 801b108:	eeb0 3a67 	vmov.f32	s6, s15
 801b10c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b10e:	eef0 2a47 	vmov.f32	s5, s14
 801b112:	bf08      	it	eq
 801b114:	4613      	moveq	r3, r2
 801b116:	e72f      	b.n	801af78 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b118:	140f      	asrs	r7, r1, #16
 801b11a:	d451      	bmi.n	801b1c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b11c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b120:	42bd      	cmp	r5, r7
 801b122:	dd4d      	ble.n	801b1c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b124:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b128:	d44a      	bmi.n	801b1c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b12a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b12e:	4560      	cmp	r0, ip
 801b130:	dd46      	ble.n	801b1c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b132:	b22d      	sxth	r5, r5
 801b134:	fb0c 7505 	mla	r5, ip, r5, r7
 801b138:	9802      	ldr	r0, [sp, #8]
 801b13a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b13e:	f06f 0501 	mvn.w	r5, #1
 801b142:	fb05 fb08 	mul.w	fp, r5, r8
 801b146:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b14a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b14e:	122f      	asrs	r7, r5, #8
 801b150:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b154:	fb17 f706 	smulbb	r7, r7, r6
 801b158:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b15c:	00ed      	lsls	r5, r5, #3
 801b15e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b162:	b2ed      	uxtb	r5, r5
 801b164:	fb19 f906 	smulbb	r9, r9, r6
 801b168:	fb15 f506 	smulbb	r5, r5, r6
 801b16c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b170:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b174:	10c7      	asrs	r7, r0, #3
 801b176:	00c0      	lsls	r0, r0, #3
 801b178:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b17c:	b2c0      	uxtb	r0, r0
 801b17e:	fb07 970a 	mla	r7, r7, sl, r9
 801b182:	fb00 500a 	mla	r0, r0, sl, r5
 801b186:	fa1f fc8c 	uxth.w	ip, ip
 801b18a:	b2bf      	uxth	r7, r7
 801b18c:	b280      	uxth	r0, r0
 801b18e:	f10c 0501 	add.w	r5, ip, #1
 801b192:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b196:	f107 0901 	add.w	r9, r7, #1
 801b19a:	1c45      	adds	r5, r0, #1
 801b19c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b1a0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b1a4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b1a8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b1ac:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b1b0:	ea45 0c0c 	orr.w	ip, r5, ip
 801b1b4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b1b8:	ea4c 0c09 	orr.w	ip, ip, r9
 801b1bc:	f824 c00b 	strh.w	ip, [r4, fp]
 801b1c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b1c2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b1c6:	4401      	add	r1, r0
 801b1c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b1ca:	4402      	add	r2, r0
 801b1cc:	e75e      	b.n	801b08c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b1ce:	b005      	add	sp, #20
 801b1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b1d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1dc:	b085      	sub	sp, #20
 801b1de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b1e0:	4693      	mov	fp, r2
 801b1e2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b1e6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b1ea:	6870      	ldr	r0, [r6, #4]
 801b1ec:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b1ee:	fb00 2404 	mla	r4, r0, r4, r2
 801b1f2:	6832      	ldr	r2, [r6, #0]
 801b1f4:	9101      	str	r1, [sp, #4]
 801b1f6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b1fa:	682a      	ldr	r2, [r5, #0]
 801b1fc:	9202      	str	r2, [sp, #8]
 801b1fe:	9a01      	ldr	r2, [sp, #4]
 801b200:	2a00      	cmp	r2, #0
 801b202:	dc03      	bgt.n	801b20c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b204:	f1bb 0f00 	cmp.w	fp, #0
 801b208:	f340 809a 	ble.w	801b340 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b20c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b20e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b212:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b216:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b218:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b21c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b220:	2b00      	cmp	r3, #0
 801b222:	dd0c      	ble.n	801b23e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b224:	1406      	asrs	r6, r0, #16
 801b226:	d405      	bmi.n	801b234 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b228:	454e      	cmp	r6, r9
 801b22a:	da03      	bge.n	801b234 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b22c:	1416      	asrs	r6, r2, #16
 801b22e:	d401      	bmi.n	801b234 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b230:	4546      	cmp	r6, r8
 801b232:	db05      	blt.n	801b240 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b234:	4470      	add	r0, lr
 801b236:	4462      	add	r2, ip
 801b238:	3b01      	subs	r3, #1
 801b23a:	3402      	adds	r4, #2
 801b23c:	e7f0      	b.n	801b220 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b23e:	d00f      	beq.n	801b260 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b240:	1e5e      	subs	r6, r3, #1
 801b242:	fb0e 0706 	mla	r7, lr, r6, r0
 801b246:	143f      	asrs	r7, r7, #16
 801b248:	d541      	bpl.n	801b2ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b24a:	4698      	mov	r8, r3
 801b24c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b250:	9603      	str	r6, [sp, #12]
 801b252:	f1b8 0f00 	cmp.w	r8, #0
 801b256:	dc56      	bgt.n	801b306 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801b258:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b25c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b260:	9b01      	ldr	r3, [sp, #4]
 801b262:	2b00      	cmp	r3, #0
 801b264:	dd6c      	ble.n	801b340 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b266:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b26a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b26e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b272:	eeb0 6a62 	vmov.f32	s12, s5
 801b276:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b27a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b27e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b282:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b286:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b28a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b28e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b292:	eeb0 6a43 	vmov.f32	s12, s6
 801b296:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b29a:	ee12 2a90 	vmov	r2, s5
 801b29e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2a8:	fb92 fef3 	sdiv	lr, r2, r3
 801b2ac:	ee13 2a10 	vmov	r2, s6
 801b2b0:	fb92 fcf3 	sdiv	ip, r2, r3
 801b2b4:	9b01      	ldr	r3, [sp, #4]
 801b2b6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b2ba:	3b01      	subs	r3, #1
 801b2bc:	9301      	str	r3, [sp, #4]
 801b2be:	eeb0 3a67 	vmov.f32	s6, s15
 801b2c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2c4:	eef0 2a47 	vmov.f32	s5, s14
 801b2c8:	bf08      	it	eq
 801b2ca:	465b      	moveq	r3, fp
 801b2cc:	e797      	b.n	801b1fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b2ce:	454f      	cmp	r7, r9
 801b2d0:	dabb      	bge.n	801b24a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2d2:	fb0c 2606 	mla	r6, ip, r6, r2
 801b2d6:	1436      	asrs	r6, r6, #16
 801b2d8:	d4b7      	bmi.n	801b24a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2da:	4546      	cmp	r6, r8
 801b2dc:	dab5      	bge.n	801b24a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2de:	461e      	mov	r6, r3
 801b2e0:	46a0      	mov	r8, r4
 801b2e2:	2e00      	cmp	r6, #0
 801b2e4:	ddb8      	ble.n	801b258 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b2e6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b2ea:	1417      	asrs	r7, r2, #16
 801b2ec:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b2f0:	fb0a 9707 	mla	r7, sl, r7, r9
 801b2f4:	9902      	ldr	r1, [sp, #8]
 801b2f6:	4470      	add	r0, lr
 801b2f8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b2fc:	4462      	add	r2, ip
 801b2fe:	f828 7b02 	strh.w	r7, [r8], #2
 801b302:	3e01      	subs	r6, #1
 801b304:	e7ed      	b.n	801b2e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b306:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b30a:	d414      	bmi.n	801b336 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b30c:	68ae      	ldr	r6, [r5, #8]
 801b30e:	454e      	cmp	r6, r9
 801b310:	dd11      	ble.n	801b336 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b312:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b316:	d40e      	bmi.n	801b336 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b318:	68ef      	ldr	r7, [r5, #12]
 801b31a:	4557      	cmp	r7, sl
 801b31c:	dd0b      	ble.n	801b336 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b31e:	f06f 0101 	mvn.w	r1, #1
 801b322:	b236      	sxth	r6, r6
 801b324:	fb0a 9606 	mla	r6, sl, r6, r9
 801b328:	9f02      	ldr	r7, [sp, #8]
 801b32a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b32e:	fb01 f608 	mul.w	r6, r1, r8
 801b332:	9903      	ldr	r1, [sp, #12]
 801b334:	538f      	strh	r7, [r1, r6]
 801b336:	4470      	add	r0, lr
 801b338:	4462      	add	r2, ip
 801b33a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b33e:	e788      	b.n	801b252 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b340:	b005      	add	sp, #20
 801b342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b346 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b34a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b34e:	b087      	sub	sp, #28
 801b350:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b352:	468b      	mov	fp, r1
 801b354:	9203      	str	r2, [sp, #12]
 801b356:	6841      	ldr	r1, [r0, #4]
 801b358:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b35c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b360:	9204      	str	r2, [sp, #16]
 801b362:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b366:	fb01 2505 	mla	r5, r1, r5, r2
 801b36a:	6802      	ldr	r2, [r0, #0]
 801b36c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b370:	f8d9 2000 	ldr.w	r2, [r9]
 801b374:	9201      	str	r2, [sp, #4]
 801b376:	f1bb 0f00 	cmp.w	fp, #0
 801b37a:	dc03      	bgt.n	801b384 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b37c:	9a03      	ldr	r2, [sp, #12]
 801b37e:	2a00      	cmp	r2, #0
 801b380:	f340 8159 	ble.w	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b384:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b386:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b38a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b38e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b390:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b394:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b398:	2b00      	cmp	r3, #0
 801b39a:	dd0e      	ble.n	801b3ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b39c:	1402      	asrs	r2, r0, #16
 801b39e:	d405      	bmi.n	801b3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b3a0:	42ba      	cmp	r2, r7
 801b3a2:	da03      	bge.n	801b3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b3a4:	140a      	asrs	r2, r1, #16
 801b3a6:	d401      	bmi.n	801b3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b3a8:	42b2      	cmp	r2, r6
 801b3aa:	db07      	blt.n	801b3bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b3ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b3ae:	3b01      	subs	r3, #1
 801b3b0:	4410      	add	r0, r2
 801b3b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b3b4:	3502      	adds	r5, #2
 801b3b6:	4411      	add	r1, r2
 801b3b8:	e7ee      	b.n	801b398 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b3ba:	d017      	beq.n	801b3ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b3bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b3be:	1e5a      	subs	r2, r3, #1
 801b3c0:	fb04 0402 	mla	r4, r4, r2, r0
 801b3c4:	1424      	asrs	r4, r4, #16
 801b3c6:	d409      	bmi.n	801b3dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3c8:	42bc      	cmp	r4, r7
 801b3ca:	da07      	bge.n	801b3dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b3ce:	fb04 1202 	mla	r2, r4, r2, r1
 801b3d2:	1412      	asrs	r2, r2, #16
 801b3d4:	d402      	bmi.n	801b3dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3d6:	42b2      	cmp	r2, r6
 801b3d8:	f2c0 80bf 	blt.w	801b55a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b3dc:	2700      	movs	r7, #0
 801b3de:	19da      	adds	r2, r3, r7
 801b3e0:	2a00      	cmp	r2, #0
 801b3e2:	dc3e      	bgt.n	801b462 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b3e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3e8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b3ec:	f1bb 0f00 	cmp.w	fp, #0
 801b3f0:	f340 8121 	ble.w	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b3f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b400:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b404:	eeb0 6a62 	vmov.f32	s12, s5
 801b408:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b40c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b410:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b414:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b418:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b41c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b420:	eeb0 6a43 	vmov.f32	s12, s6
 801b424:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b428:	ee12 2a90 	vmov	r2, s5
 801b42c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b430:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b432:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b436:	fb92 f3f3 	sdiv	r3, r2, r3
 801b43a:	ee13 2a10 	vmov	r2, s6
 801b43e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b442:	f1bb 0b01 	subs.w	fp, fp, #1
 801b446:	fb92 f3f3 	sdiv	r3, r2, r3
 801b44a:	9a03      	ldr	r2, [sp, #12]
 801b44c:	9314      	str	r3, [sp, #80]	; 0x50
 801b44e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b452:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b454:	eeb0 3a67 	vmov.f32	s6, s15
 801b458:	bf08      	it	eq
 801b45a:	4613      	moveq	r3, r2
 801b45c:	eef0 2a47 	vmov.f32	s5, s14
 801b460:	e789      	b.n	801b376 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b462:	1406      	asrs	r6, r0, #16
 801b464:	d42d      	bmi.n	801b4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b466:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b46a:	42b4      	cmp	r4, r6
 801b46c:	dd29      	ble.n	801b4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b46e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801b472:	d426      	bmi.n	801b4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b474:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b478:	4562      	cmp	r2, ip
 801b47a:	dd22      	ble.n	801b4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b47c:	b224      	sxth	r4, r4
 801b47e:	fb0c 6404 	mla	r4, ip, r4, r6
 801b482:	9a01      	ldr	r2, [sp, #4]
 801b484:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801b488:	0e22      	lsrs	r2, r4, #24
 801b48a:	d01a      	beq.n	801b4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b48c:	9e04      	ldr	r6, [sp, #16]
 801b48e:	4372      	muls	r2, r6
 801b490:	1c56      	adds	r6, r2, #1
 801b492:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b496:	1212      	asrs	r2, r2, #8
 801b498:	0a26      	lsrs	r6, r4, #8
 801b49a:	2aff      	cmp	r2, #255	; 0xff
 801b49c:	9605      	str	r6, [sp, #20]
 801b49e:	d116      	bne.n	801b4ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b4a0:	f06f 0201 	mvn.w	r2, #1
 801b4a4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b4a8:	fb02 fc07 	mul.w	ip, r2, r7
 801b4ac:	0962      	lsrs	r2, r4, #5
 801b4ae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b4b2:	f026 0607 	bic.w	r6, r6, #7
 801b4b6:	4316      	orrs	r6, r2
 801b4b8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b4bc:	4326      	orrs	r6, r4
 801b4be:	f825 600c 	strh.w	r6, [r5, ip]
 801b4c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b4c4:	3f01      	subs	r7, #1
 801b4c6:	4410      	add	r0, r2
 801b4c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b4ca:	4411      	add	r1, r2
 801b4cc:	e787      	b.n	801b3de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b4ce:	f06f 0601 	mvn.w	r6, #1
 801b4d2:	fa1f fa82 	uxth.w	sl, r2
 801b4d6:	43d2      	mvns	r2, r2
 801b4d8:	437e      	muls	r6, r7
 801b4da:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801b4de:	f835 8006 	ldrh.w	r8, [r5, r6]
 801b4e2:	fb1c fc0a 	smulbb	ip, ip, sl
 801b4e6:	b2e4      	uxtb	r4, r4
 801b4e8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b4ec:	fb14 f40a 	smulbb	r4, r4, sl
 801b4f0:	b2d2      	uxtb	r2, r2
 801b4f2:	9602      	str	r6, [sp, #8]
 801b4f4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b4f8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b4fc:	fb0e ce02 	mla	lr, lr, r2, ip
 801b500:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b504:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b508:	fb16 f60a 	smulbb	r6, r6, sl
 801b50c:	fa5f f888 	uxtb.w	r8, r8
 801b510:	fb08 4402 	mla	r4, r8, r2, r4
 801b514:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b518:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b51c:	fa1f fe8e 	uxth.w	lr, lr
 801b520:	b2a4      	uxth	r4, r4
 801b522:	f10e 0201 	add.w	r2, lr, #1
 801b526:	1c66      	adds	r6, r4, #1
 801b528:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b52c:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b530:	fa1f fc8c 	uxth.w	ip, ip
 801b534:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b538:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b53c:	ea46 0e0e 	orr.w	lr, r6, lr
 801b540:	f10c 0601 	add.w	r6, ip, #1
 801b544:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b548:	0976      	lsrs	r6, r6, #5
 801b54a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b54e:	9a02      	ldr	r2, [sp, #8]
 801b550:	ea4e 0e06 	orr.w	lr, lr, r6
 801b554:	f825 e002 	strh.w	lr, [r5, r2]
 801b558:	e7b3      	b.n	801b4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b55a:	f04f 0800 	mov.w	r8, #0
 801b55e:	eba3 0208 	sub.w	r2, r3, r8
 801b562:	2a00      	cmp	r2, #0
 801b564:	f77f af3e 	ble.w	801b3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b568:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801b56c:	1404      	asrs	r4, r0, #16
 801b56e:	140a      	asrs	r2, r1, #16
 801b570:	fb06 4202 	mla	r2, r6, r2, r4
 801b574:	9c01      	ldr	r4, [sp, #4]
 801b576:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801b57a:	0e22      	lsrs	r2, r4, #24
 801b57c:	d016      	beq.n	801b5ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b57e:	9e04      	ldr	r6, [sp, #16]
 801b580:	4372      	muls	r2, r6
 801b582:	1c56      	adds	r6, r2, #1
 801b584:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b588:	1212      	asrs	r2, r2, #8
 801b58a:	2aff      	cmp	r2, #255	; 0xff
 801b58c:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801b590:	d113      	bne.n	801b5ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801b592:	0962      	lsrs	r2, r4, #5
 801b594:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b598:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b59c:	f026 0607 	bic.w	r6, r6, #7
 801b5a0:	4316      	orrs	r6, r2
 801b5a2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b5a6:	4326      	orrs	r6, r4
 801b5a8:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801b5ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b5ae:	f108 0801 	add.w	r8, r8, #1
 801b5b2:	4410      	add	r0, r2
 801b5b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b5b6:	4411      	add	r1, r2
 801b5b8:	e7d1      	b.n	801b55e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b5ba:	fa1f fa82 	uxth.w	sl, r2
 801b5be:	43d2      	mvns	r2, r2
 801b5c0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b5c4:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b5c8:	fb17 f70a 	smulbb	r7, r7, sl
 801b5cc:	b2e4      	uxtb	r4, r4
 801b5ce:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b5d2:	fb14 f40a 	smulbb	r4, r4, sl
 801b5d6:	b2d2      	uxtb	r2, r2
 801b5d8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b5dc:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b5e0:	b2f6      	uxtb	r6, r6
 801b5e2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b5e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b5ea:	fb16 f60a 	smulbb	r6, r6, sl
 801b5ee:	fa5f fe8e 	uxtb.w	lr, lr
 801b5f2:	fb0e 4402 	mla	r4, lr, r2, r4
 801b5f6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b5fa:	fb07 6702 	mla	r7, r7, r2, r6
 801b5fe:	fa1f fc8c 	uxth.w	ip, ip
 801b602:	b2a4      	uxth	r4, r4
 801b604:	f10c 0201 	add.w	r2, ip, #1
 801b608:	1c66      	adds	r6, r4, #1
 801b60a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b60e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b612:	b2bf      	uxth	r7, r7
 801b614:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b618:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b61c:	ea46 0c0c 	orr.w	ip, r6, ip
 801b620:	1c7e      	adds	r6, r7, #1
 801b622:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801b626:	0976      	lsrs	r6, r6, #5
 801b628:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b62c:	ea4c 0c06 	orr.w	ip, ip, r6
 801b630:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801b634:	e7ba      	b.n	801b5ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b636:	b007      	add	sp, #28
 801b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b63c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b63c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b644:	b085      	sub	sp, #20
 801b646:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b648:	468b      	mov	fp, r1
 801b64a:	6841      	ldr	r1, [r0, #4]
 801b64c:	9203      	str	r2, [sp, #12]
 801b64e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b652:	fb01 2404 	mla	r4, r1, r4, r2
 801b656:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b65a:	6802      	ldr	r2, [r0, #0]
 801b65c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b660:	f8d8 2000 	ldr.w	r2, [r8]
 801b664:	9201      	str	r2, [sp, #4]
 801b666:	f1bb 0f00 	cmp.w	fp, #0
 801b66a:	dc03      	bgt.n	801b674 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b66c:	9a03      	ldr	r2, [sp, #12]
 801b66e:	2a00      	cmp	r2, #0
 801b670:	f340 814f 	ble.w	801b912 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b674:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b676:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b67a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b67e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b680:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b684:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b688:	2b00      	cmp	r3, #0
 801b68a:	dd0e      	ble.n	801b6aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b68c:	1408      	asrs	r0, r1, #16
 801b68e:	d405      	bmi.n	801b69c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b690:	42b8      	cmp	r0, r7
 801b692:	da03      	bge.n	801b69c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b694:	1410      	asrs	r0, r2, #16
 801b696:	d401      	bmi.n	801b69c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b698:	42b0      	cmp	r0, r6
 801b69a:	db07      	blt.n	801b6ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b69c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b69e:	3b01      	subs	r3, #1
 801b6a0:	4401      	add	r1, r0
 801b6a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b6a4:	3402      	adds	r4, #2
 801b6a6:	4402      	add	r2, r0
 801b6a8:	e7ee      	b.n	801b688 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b6aa:	d017      	beq.n	801b6dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b6ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b6ae:	1e58      	subs	r0, r3, #1
 801b6b0:	fb05 1500 	mla	r5, r5, r0, r1
 801b6b4:	142d      	asrs	r5, r5, #16
 801b6b6:	d409      	bmi.n	801b6cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6b8:	42bd      	cmp	r5, r7
 801b6ba:	da07      	bge.n	801b6cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b6be:	fb05 2000 	mla	r0, r5, r0, r2
 801b6c2:	1400      	asrs	r0, r0, #16
 801b6c4:	d402      	bmi.n	801b6cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6c6:	42b0      	cmp	r0, r6
 801b6c8:	f2c0 80ba 	blt.w	801b840 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b6cc:	2600      	movs	r6, #0
 801b6ce:	1998      	adds	r0, r3, r6
 801b6d0:	2800      	cmp	r0, #0
 801b6d2:	dc3e      	bgt.n	801b752 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b6d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b6d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b6dc:	f1bb 0f00 	cmp.w	fp, #0
 801b6e0:	f340 8117 	ble.w	801b912 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b6e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b6e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b6ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b6f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b6f4:	eeb0 6a62 	vmov.f32	s12, s5
 801b6f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b700:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b704:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b708:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b70c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b710:	eeb0 6a43 	vmov.f32	s12, s6
 801b714:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b718:	ee12 2a90 	vmov	r2, s5
 801b71c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b722:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b726:	fb92 f3f3 	sdiv	r3, r2, r3
 801b72a:	ee13 2a10 	vmov	r2, s6
 801b72e:	9311      	str	r3, [sp, #68]	; 0x44
 801b730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b732:	f1bb 0b01 	subs.w	fp, fp, #1
 801b736:	fb92 f3f3 	sdiv	r3, r2, r3
 801b73a:	9a03      	ldr	r2, [sp, #12]
 801b73c:	9312      	str	r3, [sp, #72]	; 0x48
 801b73e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b744:	eeb0 3a67 	vmov.f32	s6, s15
 801b748:	bf08      	it	eq
 801b74a:	4613      	moveq	r3, r2
 801b74c:	eef0 2a47 	vmov.f32	s5, s14
 801b750:	e789      	b.n	801b666 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b752:	140f      	asrs	r7, r1, #16
 801b754:	d424      	bmi.n	801b7a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b756:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b75a:	42bd      	cmp	r5, r7
 801b75c:	dd20      	ble.n	801b7a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b75e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b762:	d41d      	bmi.n	801b7a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b764:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b768:	4560      	cmp	r0, ip
 801b76a:	dd19      	ble.n	801b7a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b76c:	b22d      	sxth	r5, r5
 801b76e:	fb0c 7505 	mla	r5, ip, r5, r7
 801b772:	9801      	ldr	r0, [sp, #4]
 801b774:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b778:	0e07      	lsrs	r7, r0, #24
 801b77a:	2fff      	cmp	r7, #255	; 0xff
 801b77c:	d116      	bne.n	801b7ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b77e:	f06f 0501 	mvn.w	r5, #1
 801b782:	fb05 f706 	mul.w	r7, r5, r6
 801b786:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801b78a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b78e:	0945      	lsrs	r5, r0, #5
 801b790:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b794:	ea4c 0505 	orr.w	r5, ip, r5
 801b798:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b79c:	4305      	orrs	r5, r0
 801b79e:	53e5      	strh	r5, [r4, r7]
 801b7a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b7a2:	3e01      	subs	r6, #1
 801b7a4:	4401      	add	r1, r0
 801b7a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b7a8:	4402      	add	r2, r0
 801b7aa:	e790      	b.n	801b6ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b7ac:	b2fd      	uxtb	r5, r7
 801b7ae:	2f00      	cmp	r7, #0
 801b7b0:	d0f6      	beq.n	801b7a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b7b2:	f06f 0701 	mvn.w	r7, #1
 801b7b6:	fa1f f985 	uxth.w	r9, r5
 801b7ba:	43ed      	mvns	r5, r5
 801b7bc:	4377      	muls	r7, r6
 801b7be:	f834 e007 	ldrh.w	lr, [r4, r7]
 801b7c2:	9702      	str	r7, [sp, #8]
 801b7c4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b7c8:	fb17 f709 	smulbb	r7, r7, r9
 801b7cc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b7d0:	b2c0      	uxtb	r0, r0
 801b7d2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b7d6:	fb10 f009 	smulbb	r0, r0, r9
 801b7da:	b2ed      	uxtb	r5, r5
 801b7dc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b7e0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b7e4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b7e8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b7ec:	fb1a fa09 	smulbb	sl, sl, r9
 801b7f0:	fa5f fe8e 	uxtb.w	lr, lr
 801b7f4:	fb0e 0005 	mla	r0, lr, r5, r0
 801b7f8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b7fc:	fb07 a705 	mla	r7, r7, r5, sl
 801b800:	b280      	uxth	r0, r0
 801b802:	fa1f fc8c 	uxth.w	ip, ip
 801b806:	f100 0a01 	add.w	sl, r0, #1
 801b80a:	f10c 0501 	add.w	r5, ip, #1
 801b80e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b812:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b816:	b2bf      	uxth	r7, r7
 801b818:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b81c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b820:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b824:	f107 0a01 	add.w	sl, r7, #1
 801b828:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b82c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b830:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b834:	9802      	ldr	r0, [sp, #8]
 801b836:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b83a:	f824 c000 	strh.w	ip, [r4, r0]
 801b83e:	e7af      	b.n	801b7a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b840:	f04f 0e00 	mov.w	lr, #0
 801b844:	eba3 000e 	sub.w	r0, r3, lr
 801b848:	2800      	cmp	r0, #0
 801b84a:	f77f af43 	ble.w	801b6d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b84e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b852:	140d      	asrs	r5, r1, #16
 801b854:	1410      	asrs	r0, r2, #16
 801b856:	fb06 5000 	mla	r0, r6, r0, r5
 801b85a:	9d01      	ldr	r5, [sp, #4]
 801b85c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b860:	0e2e      	lsrs	r6, r5, #24
 801b862:	2eff      	cmp	r6, #255	; 0xff
 801b864:	d112      	bne.n	801b88c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801b866:	482c      	ldr	r0, [pc, #176]	; (801b918 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b868:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b86c:	0968      	lsrs	r0, r5, #5
 801b86e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b872:	4330      	orrs	r0, r6
 801b874:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b878:	4328      	orrs	r0, r5
 801b87a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801b87e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b880:	f10e 0e01 	add.w	lr, lr, #1
 801b884:	4401      	add	r1, r0
 801b886:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b888:	4402      	add	r2, r0
 801b88a:	e7db      	b.n	801b844 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b88c:	b2f0      	uxtb	r0, r6
 801b88e:	2e00      	cmp	r6, #0
 801b890:	d0f5      	beq.n	801b87e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b892:	fa1f f980 	uxth.w	r9, r0
 801b896:	43c0      	mvns	r0, r0
 801b898:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b89c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b8a0:	fb16 f609 	smulbb	r6, r6, r9
 801b8a4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b8a8:	b2ed      	uxtb	r5, r5
 801b8aa:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b8ae:	fb15 f509 	smulbb	r5, r5, r9
 801b8b2:	b2c0      	uxtb	r0, r0
 801b8b4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b8b8:	fb07 6700 	mla	r7, r7, r0, r6
 801b8bc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b8c0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b8c4:	fb1a fa09 	smulbb	sl, sl, r9
 801b8c8:	fa5f fc8c 	uxtb.w	ip, ip
 801b8cc:	fb0c 5500 	mla	r5, ip, r0, r5
 801b8d0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b8d4:	fb06 a600 	mla	r6, r6, r0, sl
 801b8d8:	b2bf      	uxth	r7, r7
 801b8da:	b2ad      	uxth	r5, r5
 801b8dc:	1c78      	adds	r0, r7, #1
 801b8de:	f105 0a01 	add.w	sl, r5, #1
 801b8e2:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b8e6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b8ea:	b2b6      	uxth	r6, r6
 801b8ec:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b8f0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b8f4:	ea4a 0707 	orr.w	r7, sl, r7
 801b8f8:	f106 0a01 	add.w	sl, r6, #1
 801b8fc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b900:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b904:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b908:	ea47 070a 	orr.w	r7, r7, sl
 801b90c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b910:	e7b5      	b.n	801b87e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b912:	b005      	add	sp, #20
 801b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b918:	fffff800 	.word	0xfffff800

0801b91c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b91c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b924:	b087      	sub	sp, #28
 801b926:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b928:	468b      	mov	fp, r1
 801b92a:	9203      	str	r2, [sp, #12]
 801b92c:	6841      	ldr	r1, [r0, #4]
 801b92e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b932:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b936:	9204      	str	r2, [sp, #16]
 801b938:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b93c:	fb01 2404 	mla	r4, r1, r4, r2
 801b940:	6802      	ldr	r2, [r0, #0]
 801b942:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b946:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b94a:	3201      	adds	r2, #1
 801b94c:	f022 0201 	bic.w	r2, r2, #1
 801b950:	9200      	str	r2, [sp, #0]
 801b952:	f8d9 2000 	ldr.w	r2, [r9]
 801b956:	9201      	str	r2, [sp, #4]
 801b958:	f1bb 0f00 	cmp.w	fp, #0
 801b95c:	dc03      	bgt.n	801b966 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b95e:	9a03      	ldr	r2, [sp, #12]
 801b960:	2a00      	cmp	r2, #0
 801b962:	f340 816a 	ble.w	801bc3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b966:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b968:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b96c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b970:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b972:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b976:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	dd0e      	ble.n	801b99c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b97e:	1402      	asrs	r2, r0, #16
 801b980:	d405      	bmi.n	801b98e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b982:	42ba      	cmp	r2, r7
 801b984:	da03      	bge.n	801b98e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b986:	140a      	asrs	r2, r1, #16
 801b988:	d401      	bmi.n	801b98e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b98a:	42b2      	cmp	r2, r6
 801b98c:	db07      	blt.n	801b99e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b98e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b990:	3b01      	subs	r3, #1
 801b992:	4410      	add	r0, r2
 801b994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b996:	3402      	adds	r4, #2
 801b998:	4411      	add	r1, r2
 801b99a:	e7ee      	b.n	801b97a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b99c:	d017      	beq.n	801b9ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b99e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b9a0:	1e5a      	subs	r2, r3, #1
 801b9a2:	fb05 0502 	mla	r5, r5, r2, r0
 801b9a6:	142d      	asrs	r5, r5, #16
 801b9a8:	d409      	bmi.n	801b9be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9aa:	42bd      	cmp	r5, r7
 801b9ac:	da07      	bge.n	801b9be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b9b0:	fb05 1202 	mla	r2, r5, r2, r1
 801b9b4:	1412      	asrs	r2, r2, #16
 801b9b6:	d402      	bmi.n	801b9be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9b8:	42b2      	cmp	r2, r6
 801b9ba:	f2c0 80c8 	blt.w	801bb4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801b9be:	2700      	movs	r7, #0
 801b9c0:	19da      	adds	r2, r3, r7
 801b9c2:	2a00      	cmp	r2, #0
 801b9c4:	dc3e      	bgt.n	801ba44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b9c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9ca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b9ce:	f1bb 0f00 	cmp.w	fp, #0
 801b9d2:	f340 8132 	ble.w	801bc3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b9d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b9e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b9e6:	eeb0 6a62 	vmov.f32	s12, s5
 801b9ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b9f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b9f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b9fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b9fe:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ba02:	eeb0 6a43 	vmov.f32	s12, s6
 801ba06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba0a:	ee12 2a90 	vmov	r2, s5
 801ba0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba18:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba1c:	ee13 2a10 	vmov	r2, s6
 801ba20:	9313      	str	r3, [sp, #76]	; 0x4c
 801ba22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba24:	f1bb 0b01 	subs.w	fp, fp, #1
 801ba28:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba2c:	9a03      	ldr	r2, [sp, #12]
 801ba2e:	9314      	str	r3, [sp, #80]	; 0x50
 801ba30:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ba34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba36:	eeb0 3a67 	vmov.f32	s6, s15
 801ba3a:	bf08      	it	eq
 801ba3c:	4613      	moveq	r3, r2
 801ba3e:	eef0 2a47 	vmov.f32	s5, s14
 801ba42:	e789      	b.n	801b958 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ba44:	1405      	asrs	r5, r0, #16
 801ba46:	d436      	bmi.n	801bab6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba48:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ba4c:	42aa      	cmp	r2, r5
 801ba4e:	dd32      	ble.n	801bab6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba50:	140e      	asrs	r6, r1, #16
 801ba52:	d430      	bmi.n	801bab6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba54:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ba58:	42b2      	cmp	r2, r6
 801ba5a:	dd2c      	ble.n	801bab6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba5c:	9a00      	ldr	r2, [sp, #0]
 801ba5e:	fb06 5502 	mla	r5, r6, r2, r5
 801ba62:	9e01      	ldr	r6, [sp, #4]
 801ba64:	086a      	lsrs	r2, r5, #1
 801ba66:	5cb2      	ldrb	r2, [r6, r2]
 801ba68:	07ee      	lsls	r6, r5, #31
 801ba6a:	bf54      	ite	pl
 801ba6c:	f002 020f 	andpl.w	r2, r2, #15
 801ba70:	1112      	asrmi	r2, r2, #4
 801ba72:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ba76:	b2d2      	uxtb	r2, r2
 801ba78:	b1ea      	cbz	r2, 801bab6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba7a:	9d04      	ldr	r5, [sp, #16]
 801ba7c:	436a      	muls	r2, r5
 801ba7e:	1c55      	adds	r5, r2, #1
 801ba80:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ba84:	4d6e      	ldr	r5, [pc, #440]	; (801bc40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ba86:	1212      	asrs	r2, r2, #8
 801ba88:	682d      	ldr	r5, [r5, #0]
 801ba8a:	2aff      	cmp	r2, #255	; 0xff
 801ba8c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ba90:	9605      	str	r6, [sp, #20]
 801ba92:	d116      	bne.n	801bac2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ba94:	f06f 0201 	mvn.w	r2, #1
 801ba98:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ba9c:	fb02 fc07 	mul.w	ip, r2, r7
 801baa0:	096a      	lsrs	r2, r5, #5
 801baa2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801baa6:	f026 0607 	bic.w	r6, r6, #7
 801baaa:	4316      	orrs	r6, r2
 801baac:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bab0:	432e      	orrs	r6, r5
 801bab2:	f824 600c 	strh.w	r6, [r4, ip]
 801bab6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bab8:	3f01      	subs	r7, #1
 801baba:	4410      	add	r0, r2
 801babc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801babe:	4411      	add	r1, r2
 801bac0:	e77e      	b.n	801b9c0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801bac2:	f06f 0601 	mvn.w	r6, #1
 801bac6:	fa1f fa82 	uxth.w	sl, r2
 801baca:	43d2      	mvns	r2, r2
 801bacc:	437e      	muls	r6, r7
 801bace:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801bad2:	f834 8006 	ldrh.w	r8, [r4, r6]
 801bad6:	fb1c fc0a 	smulbb	ip, ip, sl
 801bada:	b2ed      	uxtb	r5, r5
 801badc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801bae0:	fb15 f50a 	smulbb	r5, r5, sl
 801bae4:	b2d2      	uxtb	r2, r2
 801bae6:	9602      	str	r6, [sp, #8]
 801bae8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801baec:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801baf0:	fb0e ce02 	mla	lr, lr, r2, ip
 801baf4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801baf8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bafc:	fb16 f60a 	smulbb	r6, r6, sl
 801bb00:	fa5f f888 	uxtb.w	r8, r8
 801bb04:	fb08 5502 	mla	r5, r8, r2, r5
 801bb08:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801bb0c:	fb0c 6c02 	mla	ip, ip, r2, r6
 801bb10:	fa1f fe8e 	uxth.w	lr, lr
 801bb14:	b2ad      	uxth	r5, r5
 801bb16:	f10e 0201 	add.w	r2, lr, #1
 801bb1a:	1c6e      	adds	r6, r5, #1
 801bb1c:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bb20:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801bb24:	fa1f fc8c 	uxth.w	ip, ip
 801bb28:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bb2c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801bb30:	ea46 0e0e 	orr.w	lr, r6, lr
 801bb34:	f10c 0601 	add.w	r6, ip, #1
 801bb38:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801bb3c:	0976      	lsrs	r6, r6, #5
 801bb3e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bb42:	9a02      	ldr	r2, [sp, #8]
 801bb44:	ea4e 0e06 	orr.w	lr, lr, r6
 801bb48:	f824 e002 	strh.w	lr, [r4, r2]
 801bb4c:	e7b3      	b.n	801bab6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bb4e:	f04f 0800 	mov.w	r8, #0
 801bb52:	eba3 0208 	sub.w	r2, r3, r8
 801bb56:	2a00      	cmp	r2, #0
 801bb58:	f77f af35 	ble.w	801b9c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801bb5c:	9e00      	ldr	r6, [sp, #0]
 801bb5e:	1402      	asrs	r2, r0, #16
 801bb60:	140d      	asrs	r5, r1, #16
 801bb62:	fb06 2505 	mla	r5, r6, r5, r2
 801bb66:	9e01      	ldr	r6, [sp, #4]
 801bb68:	086a      	lsrs	r2, r5, #1
 801bb6a:	5cb2      	ldrb	r2, [r6, r2]
 801bb6c:	07ed      	lsls	r5, r5, #31
 801bb6e:	bf54      	ite	pl
 801bb70:	f002 020f 	andpl.w	r2, r2, #15
 801bb74:	1112      	asrmi	r2, r2, #4
 801bb76:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bb7a:	b2d2      	uxtb	r2, r2
 801bb7c:	b1c2      	cbz	r2, 801bbb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bb7e:	9d04      	ldr	r5, [sp, #16]
 801bb80:	436a      	muls	r2, r5
 801bb82:	1c55      	adds	r5, r2, #1
 801bb84:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bb88:	4d2d      	ldr	r5, [pc, #180]	; (801bc40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bb8a:	1212      	asrs	r2, r2, #8
 801bb8c:	682e      	ldr	r6, [r5, #0]
 801bb8e:	2aff      	cmp	r2, #255	; 0xff
 801bb90:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801bb94:	d113      	bne.n	801bbbe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bb96:	0972      	lsrs	r2, r6, #5
 801bb98:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801bb9c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bba0:	f025 0507 	bic.w	r5, r5, #7
 801bba4:	4315      	orrs	r5, r2
 801bba6:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bbaa:	4335      	orrs	r5, r6
 801bbac:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801bbb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bbb2:	f108 0801 	add.w	r8, r8, #1
 801bbb6:	4410      	add	r0, r2
 801bbb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bbba:	4411      	add	r1, r2
 801bbbc:	e7c9      	b.n	801bb52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801bbbe:	fa1f fa82 	uxth.w	sl, r2
 801bbc2:	43d2      	mvns	r2, r2
 801bbc4:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801bbc8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801bbcc:	fb17 f70a 	smulbb	r7, r7, sl
 801bbd0:	b2f6      	uxtb	r6, r6
 801bbd2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bbd6:	fb16 f60a 	smulbb	r6, r6, sl
 801bbda:	b2d2      	uxtb	r2, r2
 801bbdc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bbe0:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bbe4:	b2ed      	uxtb	r5, r5
 801bbe6:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bbea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bbee:	fb15 f50a 	smulbb	r5, r5, sl
 801bbf2:	fa5f fe8e 	uxtb.w	lr, lr
 801bbf6:	fb0e 6602 	mla	r6, lr, r2, r6
 801bbfa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bbfe:	fb07 5702 	mla	r7, r7, r2, r5
 801bc02:	fa1f fc8c 	uxth.w	ip, ip
 801bc06:	b2b6      	uxth	r6, r6
 801bc08:	f10c 0201 	add.w	r2, ip, #1
 801bc0c:	1c75      	adds	r5, r6, #1
 801bc0e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bc12:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801bc16:	b2bf      	uxth	r7, r7
 801bc18:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bc1c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bc20:	ea45 0c0c 	orr.w	ip, r5, ip
 801bc24:	1c7d      	adds	r5, r7, #1
 801bc26:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801bc2a:	096d      	lsrs	r5, r5, #5
 801bc2c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bc30:	ea4c 0c05 	orr.w	ip, ip, r5
 801bc34:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801bc38:	e7ba      	b.n	801bbb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bc3a:	b007      	add	sp, #28
 801bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc40:	2004e128 	.word	0x2004e128

0801bc44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc4c:	b087      	sub	sp, #28
 801bc4e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bc50:	9101      	str	r1, [sp, #4]
 801bc52:	6841      	ldr	r1, [r0, #4]
 801bc54:	9205      	str	r2, [sp, #20]
 801bc56:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bc5a:	fb01 2404 	mla	r4, r1, r4, r2
 801bc5e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801bc62:	6802      	ldr	r2, [r0, #0]
 801bc64:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 801bf58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801bc68:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bc6c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bc70:	3201      	adds	r2, #1
 801bc72:	f022 0201 	bic.w	r2, r2, #1
 801bc76:	9202      	str	r2, [sp, #8]
 801bc78:	f8db 2000 	ldr.w	r2, [fp]
 801bc7c:	9203      	str	r2, [sp, #12]
 801bc7e:	9a01      	ldr	r2, [sp, #4]
 801bc80:	2a00      	cmp	r2, #0
 801bc82:	dc03      	bgt.n	801bc8c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bc84:	9a05      	ldr	r2, [sp, #20]
 801bc86:	2a00      	cmp	r2, #0
 801bc88:	f340 8162 	ble.w	801bf50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bc8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bc8e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801bc92:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bc96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc98:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801bc9c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	dd0e      	ble.n	801bcc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bca4:	1402      	asrs	r2, r0, #16
 801bca6:	d405      	bmi.n	801bcb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bca8:	42ba      	cmp	r2, r7
 801bcaa:	da03      	bge.n	801bcb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcac:	140a      	asrs	r2, r1, #16
 801bcae:	d401      	bmi.n	801bcb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcb0:	42b2      	cmp	r2, r6
 801bcb2:	db07      	blt.n	801bcc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bcb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bcb6:	3b01      	subs	r3, #1
 801bcb8:	4410      	add	r0, r2
 801bcba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bcbc:	3402      	adds	r4, #2
 801bcbe:	4411      	add	r1, r2
 801bcc0:	e7ee      	b.n	801bca0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bcc2:	d017      	beq.n	801bcf4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801bcc4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bcc6:	1e5a      	subs	r2, r3, #1
 801bcc8:	fb05 0502 	mla	r5, r5, r2, r0
 801bccc:	142d      	asrs	r5, r5, #16
 801bcce:	d409      	bmi.n	801bce4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bcd0:	42bd      	cmp	r5, r7
 801bcd2:	da07      	bge.n	801bce4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bcd4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bcd6:	fb05 1202 	mla	r2, r5, r2, r1
 801bcda:	1412      	asrs	r2, r2, #16
 801bcdc:	d402      	bmi.n	801bce4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bcde:	42b2      	cmp	r2, r6
 801bce0:	f2c0 80c3 	blt.w	801be6a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801bce4:	2500      	movs	r5, #0
 801bce6:	195a      	adds	r2, r3, r5
 801bce8:	2a00      	cmp	r2, #0
 801bcea:	dc3f      	bgt.n	801bd6c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bcec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bcf0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bcf4:	9b01      	ldr	r3, [sp, #4]
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	f340 812a 	ble.w	801bf50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bcfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bd08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd0c:	eeb0 6a62 	vmov.f32	s12, s5
 801bd10:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd14:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd18:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd20:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd24:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bd28:	eeb0 6a43 	vmov.f32	s12, s6
 801bd2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd30:	ee12 2a90 	vmov	r2, s5
 801bd34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd3e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd42:	ee13 2a10 	vmov	r2, s6
 801bd46:	9313      	str	r3, [sp, #76]	; 0x4c
 801bd48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd4a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bd4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd52:	9314      	str	r3, [sp, #80]	; 0x50
 801bd54:	9b01      	ldr	r3, [sp, #4]
 801bd56:	9a05      	ldr	r2, [sp, #20]
 801bd58:	3b01      	subs	r3, #1
 801bd5a:	9301      	str	r3, [sp, #4]
 801bd5c:	eeb0 3a67 	vmov.f32	s6, s15
 801bd60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd62:	eef0 2a47 	vmov.f32	s5, s14
 801bd66:	bf08      	it	eq
 801bd68:	4613      	moveq	r3, r2
 801bd6a:	e788      	b.n	801bc7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bd6c:	1406      	asrs	r6, r0, #16
 801bd6e:	d42c      	bmi.n	801bdca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd70:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bd74:	42b2      	cmp	r2, r6
 801bd76:	dd28      	ble.n	801bdca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd78:	140f      	asrs	r7, r1, #16
 801bd7a:	d426      	bmi.n	801bdca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd7c:	f8db 200c 	ldr.w	r2, [fp, #12]
 801bd80:	42ba      	cmp	r2, r7
 801bd82:	dd22      	ble.n	801bdca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd84:	9a02      	ldr	r2, [sp, #8]
 801bd86:	fb07 6602 	mla	r6, r7, r2, r6
 801bd8a:	9f03      	ldr	r7, [sp, #12]
 801bd8c:	0872      	lsrs	r2, r6, #1
 801bd8e:	5cba      	ldrb	r2, [r7, r2]
 801bd90:	07f6      	lsls	r6, r6, #31
 801bd92:	bf54      	ite	pl
 801bd94:	f002 020f 	andpl.w	r2, r2, #15
 801bd98:	1112      	asrmi	r2, r2, #4
 801bd9a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bd9e:	b2d2      	uxtb	r2, r2
 801bda0:	2aff      	cmp	r2, #255	; 0xff
 801bda2:	d118      	bne.n	801bdd6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801bda4:	f06f 0601 	mvn.w	r6, #1
 801bda8:	f8d8 2000 	ldr.w	r2, [r8]
 801bdac:	fb06 f705 	mul.w	r7, r6, r5
 801bdb0:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801bdb4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801bdb8:	0956      	lsrs	r6, r2, #5
 801bdba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bdbe:	ea4c 0606 	orr.w	r6, ip, r6
 801bdc2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801bdc6:	4316      	orrs	r6, r2
 801bdc8:	53e6      	strh	r6, [r4, r7]
 801bdca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bdcc:	3d01      	subs	r5, #1
 801bdce:	4410      	add	r0, r2
 801bdd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bdd2:	4411      	add	r1, r2
 801bdd4:	e787      	b.n	801bce6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bdd6:	2a00      	cmp	r2, #0
 801bdd8:	d0f7      	beq.n	801bdca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bdda:	f06f 0601 	mvn.w	r6, #1
 801bdde:	fa1f f982 	uxth.w	r9, r2
 801bde2:	43d2      	mvns	r2, r2
 801bde4:	436e      	muls	r6, r5
 801bde6:	f8d8 c000 	ldr.w	ip, [r8]
 801bdea:	f834 e006 	ldrh.w	lr, [r4, r6]
 801bdee:	9604      	str	r6, [sp, #16]
 801bdf0:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801bdf4:	fb16 f609 	smulbb	r6, r6, r9
 801bdf8:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801bdfc:	fa5f fc8c 	uxtb.w	ip, ip
 801be00:	ea4f 272e 	mov.w	r7, lr, asr #8
 801be04:	fb1c fc09 	smulbb	ip, ip, r9
 801be08:	b2d2      	uxtb	r2, r2
 801be0a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801be0e:	fb07 6702 	mla	r7, r7, r2, r6
 801be12:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801be16:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801be1a:	fb1a fa09 	smulbb	sl, sl, r9
 801be1e:	fa5f fe8e 	uxtb.w	lr, lr
 801be22:	fb0e cc02 	mla	ip, lr, r2, ip
 801be26:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801be2a:	fb06 a602 	mla	r6, r6, r2, sl
 801be2e:	b2bf      	uxth	r7, r7
 801be30:	fa1f fc8c 	uxth.w	ip, ip
 801be34:	1c7a      	adds	r2, r7, #1
 801be36:	f10c 0a01 	add.w	sl, ip, #1
 801be3a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801be3e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801be42:	b2b6      	uxth	r6, r6
 801be44:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801be48:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801be4c:	ea4a 0707 	orr.w	r7, sl, r7
 801be50:	f106 0a01 	add.w	sl, r6, #1
 801be54:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801be58:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801be5c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801be60:	9a04      	ldr	r2, [sp, #16]
 801be62:	ea47 070a 	orr.w	r7, r7, sl
 801be66:	52a7      	strh	r7, [r4, r2]
 801be68:	e7af      	b.n	801bdca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801be6a:	f04f 0e00 	mov.w	lr, #0
 801be6e:	eba3 020e 	sub.w	r2, r3, lr
 801be72:	2a00      	cmp	r2, #0
 801be74:	f77f af3a 	ble.w	801bcec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801be78:	9e02      	ldr	r6, [sp, #8]
 801be7a:	1402      	asrs	r2, r0, #16
 801be7c:	140d      	asrs	r5, r1, #16
 801be7e:	fb06 2505 	mla	r5, r6, r5, r2
 801be82:	9e03      	ldr	r6, [sp, #12]
 801be84:	086a      	lsrs	r2, r5, #1
 801be86:	5cb2      	ldrb	r2, [r6, r2]
 801be88:	07ed      	lsls	r5, r5, #31
 801be8a:	bf54      	ite	pl
 801be8c:	f002 020f 	andpl.w	r2, r2, #15
 801be90:	1112      	asrmi	r2, r2, #4
 801be92:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801be96:	b2d2      	uxtb	r2, r2
 801be98:	2aff      	cmp	r2, #255	; 0xff
 801be9a:	d115      	bne.n	801bec8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801be9c:	f8d8 5000 	ldr.w	r5, [r8]
 801bea0:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801bea4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801bea8:	096a      	lsrs	r2, r5, #5
 801beaa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801beae:	4332      	orrs	r2, r6
 801beb0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801beb4:	432a      	orrs	r2, r5
 801beb6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801beba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bebc:	f10e 0e01 	add.w	lr, lr, #1
 801bec0:	4410      	add	r0, r2
 801bec2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bec4:	4411      	add	r1, r2
 801bec6:	e7d2      	b.n	801be6e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801bec8:	2a00      	cmp	r2, #0
 801beca:	d0f6      	beq.n	801beba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801becc:	fa1f f982 	uxth.w	r9, r2
 801bed0:	43d2      	mvns	r2, r2
 801bed2:	f8d8 7000 	ldr.w	r7, [r8]
 801bed6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801beda:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801bede:	fb15 f509 	smulbb	r5, r5, r9
 801bee2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801bee6:	b2ff      	uxtb	r7, r7
 801bee8:	ea4f 262c 	mov.w	r6, ip, asr #8
 801beec:	fb17 f709 	smulbb	r7, r7, r9
 801bef0:	b2d2      	uxtb	r2, r2
 801bef2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bef6:	fb06 5602 	mla	r6, r6, r2, r5
 801befa:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801befe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bf02:	fb1a fa09 	smulbb	sl, sl, r9
 801bf06:	fa5f fc8c 	uxtb.w	ip, ip
 801bf0a:	fb0c 7702 	mla	r7, ip, r2, r7
 801bf0e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bf12:	fb05 a502 	mla	r5, r5, r2, sl
 801bf16:	b2b6      	uxth	r6, r6
 801bf18:	b2bf      	uxth	r7, r7
 801bf1a:	1c72      	adds	r2, r6, #1
 801bf1c:	f107 0a01 	add.w	sl, r7, #1
 801bf20:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801bf24:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bf28:	b2ad      	uxth	r5, r5
 801bf2a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bf2e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801bf32:	ea4a 0606 	orr.w	r6, sl, r6
 801bf36:	f105 0a01 	add.w	sl, r5, #1
 801bf3a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bf3e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bf42:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bf46:	ea46 060a 	orr.w	r6, r6, sl
 801bf4a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801bf4e:	e7b4      	b.n	801beba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bf50:	b007      	add	sp, #28
 801bf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf56:	bf00      	nop
 801bf58:	2004e128 	.word	0x2004e128

0801bf5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bf5c:	4770      	bx	lr

0801bf5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bf5e:	4770      	bx	lr

0801bf60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bf60:	4770      	bx	lr

0801bf62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bf62:	4770      	bx	lr

0801bf64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf64:	4770      	bx	lr

0801bf66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf66:	4770      	bx	lr

0801bf68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf68:	4770      	bx	lr

0801bf6a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf6a:	4770      	bx	lr

0801bf6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf6c:	4770      	bx	lr

0801bf6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf6e:	4770      	bx	lr

0801bf70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf70:	4770      	bx	lr

0801bf72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf72:	4770      	bx	lr

0801bf74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf74:	4770      	bx	lr

0801bf76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bf76:	4770      	bx	lr

0801bf78 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf78:	4770      	bx	lr

0801bf7a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf7a:	4770      	bx	lr

0801bf7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf7c:	4770      	bx	lr

0801bf7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf7e:	4770      	bx	lr

0801bf80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf80:	4770      	bx	lr

0801bf82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf82:	4770      	bx	lr

0801bf84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf84:	4770      	bx	lr

0801bf86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf86:	4770      	bx	lr

0801bf88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf88:	4770      	bx	lr

0801bf8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bf8a:	4770      	bx	lr

0801bf8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf8c:	4770      	bx	lr

0801bf8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf8e:	4770      	bx	lr

0801bf90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf90:	4770      	bx	lr

0801bf92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bf92:	4770      	bx	lr

0801bf94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801bf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf98:	b088      	sub	sp, #32
 801bf9a:	ac08      	add	r4, sp, #32
 801bf9c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801bfa0:	4606      	mov	r6, r0
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	4688      	mov	r8, r1
 801bfa6:	4691      	mov	r9, r2
 801bfa8:	f7fd fc66 	bl	8019878 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bfac:	6833      	ldr	r3, [r6, #0]
 801bfae:	4605      	mov	r5, r0
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	699f      	ldr	r7, [r3, #24]
 801bfb4:	f7fd fb74 	bl	80196a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bfb8:	4682      	mov	sl, r0
 801bfba:	4620      	mov	r0, r4
 801bfbc:	f7fd fba4 	bl	8019708 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bfc0:	9500      	str	r5, [sp, #0]
 801bfc2:	e9cd a001 	strd	sl, r0, [sp, #4]
 801bfc6:	464b      	mov	r3, r9
 801bfc8:	a806      	add	r0, sp, #24
 801bfca:	4642      	mov	r2, r8
 801bfcc:	4631      	mov	r1, r6
 801bfce:	47b8      	blx	r7
 801bfd0:	4628      	mov	r0, r5
 801bfd2:	b008      	add	sp, #32
 801bfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801bfd8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801bfd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bfdc:	2300      	movs	r3, #0
 801bfde:	9300      	str	r3, [sp, #0]
 801bfe0:	4b3d      	ldr	r3, [pc, #244]	; (801c0d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801bfe2:	781b      	ldrb	r3, [r3, #0]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d137      	bne.n	801c058 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801bfe8:	4a3c      	ldr	r2, [pc, #240]	; (801c0dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801bfea:	f9b2 2000 	ldrsh.w	r2, [r2]
 801bfee:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d132      	bne.n	801c05c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801bff6:	4b3a      	ldr	r3, [pc, #232]	; (801c0e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801bff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bffc:	6808      	ldr	r0, [r1, #0]
 801bffe:	6849      	ldr	r1, [r1, #4]
 801c000:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c004:	ac02      	add	r4, sp, #8
 801c006:	ab02      	add	r3, sp, #8
 801c008:	c303      	stmia	r3!, {r0, r1}
 801c00a:	4669      	mov	r1, sp
 801c00c:	4620      	mov	r0, r4
 801c00e:	f7fa fd2d 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c012:	4668      	mov	r0, sp
 801c014:	f7fa fd02 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c018:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c01c:	f8bd 2000 	ldrh.w	r2, [sp]
 801c020:	4d30      	ldr	r5, [pc, #192]	; (801c0e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801c022:	4413      	add	r3, r2
 801c024:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c028:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c02c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c030:	6828      	ldr	r0, [r5, #0]
 801c032:	4413      	add	r3, r2
 801c034:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c038:	6803      	ldr	r3, [r0, #0]
 801c03a:	462f      	mov	r7, r5
 801c03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c03e:	4798      	blx	r3
 801c040:	f010 0f01 	tst.w	r0, #1
 801c044:	d00c      	beq.n	801c060 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801c046:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c04a:	6828      	ldr	r0, [r5, #0]
 801c04c:	6803      	ldr	r3, [r0, #0]
 801c04e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c050:	4798      	blx	r3
 801c052:	b004      	add	sp, #16
 801c054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c058:	4a21      	ldr	r2, [pc, #132]	; (801c0e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c05a:	e7c6      	b.n	801bfea <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c05c:	4b1f      	ldr	r3, [pc, #124]	; (801c0dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c05e:	e7cb      	b.n	801bff8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c060:	6838      	ldr	r0, [r7, #0]
 801c062:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c066:	6803      	ldr	r3, [r0, #0]
 801c068:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c06e:	4798      	blx	r3
 801c070:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c074:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c078:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801c07c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c080:	fb16 3602 	smlabb	r6, r6, r2, r3
 801c084:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c088:	6838      	ldr	r0, [r7, #0]
 801c08a:	6803      	ldr	r3, [r0, #0]
 801c08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c08e:	4798      	blx	r3
 801c090:	4a12      	ldr	r2, [pc, #72]	; (801c0dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c092:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801c096:	4691      	mov	r9, r2
 801c098:	8813      	ldrh	r3, [r2, #0]
 801c09a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c09e:	435d      	muls	r5, r3
 801c0a0:	fb03 1404 	mla	r4, r3, r4, r1
 801c0a4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c0a8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c0ac:	6838      	ldr	r0, [r7, #0]
 801c0ae:	42ac      	cmp	r4, r5
 801c0b0:	6803      	ldr	r3, [r0, #0]
 801c0b2:	d20e      	bcs.n	801c0d2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801c0b4:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801c0b8:	4632      	mov	r2, r6
 801c0ba:	4643      	mov	r3, r8
 801c0bc:	4621      	mov	r1, r4
 801c0be:	47d0      	blx	sl
 801c0c0:	f8b9 3000 	ldrh.w	r3, [r9]
 801c0c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c0c8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c0cc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c0d0:	e7ec      	b.n	801c0ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0d4:	4798      	blx	r3
 801c0d6:	e7bc      	b.n	801c052 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c0d8:	2004e110 	.word	0x2004e110
 801c0dc:	2004e112 	.word	0x2004e112
 801c0e0:	2004e114 	.word	0x2004e114
 801c0e4:	2004e118 	.word	0x2004e118

0801c0e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ec:	b08b      	sub	sp, #44	; 0x2c
 801c0ee:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801c0f2:	460f      	mov	r7, r1
 801c0f4:	4616      	mov	r6, r2
 801c0f6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c0fa:	f1bb 0f00 	cmp.w	fp, #0
 801c0fe:	d049      	beq.n	801c194 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c100:	6810      	ldr	r0, [r2, #0]
 801c102:	6851      	ldr	r1, [r2, #4]
 801c104:	ad06      	add	r5, sp, #24
 801c106:	c503      	stmia	r5!, {r0, r1}
 801c108:	6818      	ldr	r0, [r3, #0]
 801c10a:	6859      	ldr	r1, [r3, #4]
 801c10c:	ad08      	add	r5, sp, #32
 801c10e:	c503      	stmia	r5!, {r0, r1}
 801c110:	a806      	add	r0, sp, #24
 801c112:	f7fa fc83 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c116:	4631      	mov	r1, r6
 801c118:	a808      	add	r0, sp, #32
 801c11a:	f7fa fca7 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c11e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c122:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c126:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c12a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c12e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c132:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c136:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c13a:	4f60      	ldr	r7, [pc, #384]	; (801c2bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c13c:	440a      	add	r2, r1
 801c13e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c142:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c146:	6838      	ldr	r0, [r7, #0]
 801c148:	4413      	add	r3, r2
 801c14a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c14e:	6803      	ldr	r3, [r0, #0]
 801c150:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c156:	4798      	blx	r3
 801c158:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c15c:	46b9      	mov	r9, r7
 801c15e:	d01c      	beq.n	801c19a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c160:	f010 0f04 	tst.w	r0, #4
 801c164:	d01d      	beq.n	801c1a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c166:	2700      	movs	r7, #0
 801c168:	f8d9 0000 	ldr.w	r0, [r9]
 801c16c:	b2ad      	uxth	r5, r5
 801c16e:	6801      	ldr	r1, [r0, #0]
 801c170:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c174:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c178:	f8cd b00c 	str.w	fp, [sp, #12]
 801c17c:	9402      	str	r4, [sp, #8]
 801c17e:	fa1f f488 	uxth.w	r4, r8
 801c182:	9501      	str	r5, [sp, #4]
 801c184:	9400      	str	r4, [sp, #0]
 801c186:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801c188:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c18c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c190:	4631      	mov	r1, r6
 801c192:	47a0      	blx	r4
 801c194:	b00b      	add	sp, #44	; 0x2c
 801c196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c19a:	b914      	cbnz	r4, 801c1a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c19c:	f010 0f01 	tst.w	r0, #1
 801c1a0:	e7e0      	b.n	801c164 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801c1a2:	f8d9 0000 	ldr.w	r0, [r9]
 801c1a6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c1aa:	6803      	ldr	r3, [r0, #0]
 801c1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1ae:	4798      	blx	r3
 801c1b0:	4b43      	ldr	r3, [pc, #268]	; (801c2c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c1b2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801c1b6:	881a      	ldrh	r2, [r3, #0]
 801c1b8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c1bc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c1c0:	fb02 1404 	mla	r4, r2, r4, r1
 801c1c4:	469a      	mov	sl, r3
 801c1c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c1ca:	fb05 f502 	mul.w	r5, r5, r2
 801c1ce:	d059      	beq.n	801c284 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c1d0:	469e      	mov	lr, r3
 801c1d2:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801c1d6:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c1da:	fa1f f28b 	uxth.w	r2, fp
 801c1de:	fa1f f989 	uxth.w	r9, r9
 801c1e2:	42ac      	cmp	r4, r5
 801c1e4:	d264      	bcs.n	801c2b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c1e6:	eb04 0a07 	add.w	sl, r4, r7
 801c1ea:	4554      	cmp	r4, sl
 801c1ec:	d23d      	bcs.n	801c26a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801c1ee:	8821      	ldrh	r1, [r4, #0]
 801c1f0:	f836 3b02 	ldrh.w	r3, [r6], #2
 801c1f4:	1208      	asrs	r0, r1, #8
 801c1f6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c1fa:	fb10 f009 	smulbb	r0, r0, r9
 801c1fe:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801c202:	00c9      	lsls	r1, r1, #3
 801c204:	b2c9      	uxtb	r1, r1
 801c206:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c20a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c20e:	fb11 f109 	smulbb	r1, r1, r9
 801c212:	fb1b fb09 	smulbb	fp, fp, r9
 801c216:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c21a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c21e:	10d8      	asrs	r0, r3, #3
 801c220:	00db      	lsls	r3, r3, #3
 801c222:	b2db      	uxtb	r3, r3
 801c224:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c228:	fb03 1302 	mla	r3, r3, r2, r1
 801c22c:	fb00 b002 	mla	r0, r0, r2, fp
 801c230:	fa1f fc8c 	uxth.w	ip, ip
 801c234:	f10c 0b01 	add.w	fp, ip, #1
 801c238:	b29b      	uxth	r3, r3
 801c23a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c23e:	b280      	uxth	r0, r0
 801c240:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801c244:	f103 0c01 	add.w	ip, r3, #1
 801c248:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c24c:	1c43      	adds	r3, r0, #1
 801c24e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c252:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c256:	0940      	lsrs	r0, r0, #5
 801c258:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c25c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c260:	ea4c 0c00 	orr.w	ip, ip, r0
 801c264:	f824 cb02 	strh.w	ip, [r4], #2
 801c268:	e7bf      	b.n	801c1ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801c26a:	f8be 3000 	ldrh.w	r3, [lr]
 801c26e:	eba3 0308 	sub.w	r3, r3, r8
 801c272:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c276:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c27a:	eba3 0308 	sub.w	r3, r3, r8
 801c27e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c282:	e7ae      	b.n	801c1e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801c284:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c288:	f8d9 0000 	ldr.w	r0, [r9]
 801c28c:	42ac      	cmp	r4, r5
 801c28e:	6803      	ldr	r3, [r0, #0]
 801c290:	d20e      	bcs.n	801c2b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c292:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801c296:	4632      	mov	r2, r6
 801c298:	463b      	mov	r3, r7
 801c29a:	4621      	mov	r1, r4
 801c29c:	47c0      	blx	r8
 801c29e:	f8ba 3000 	ldrh.w	r3, [sl]
 801c2a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c2a6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c2aa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c2ae:	e7eb      	b.n	801c288 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801c2b0:	4b02      	ldr	r3, [pc, #8]	; (801c2bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c2b2:	6818      	ldr	r0, [r3, #0]
 801c2b4:	6803      	ldr	r3, [r0, #0]
 801c2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2b8:	4798      	blx	r3
 801c2ba:	e76b      	b.n	801c194 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c2bc:	2004e118 	.word	0x2004e118
 801c2c0:	2004e112 	.word	0x2004e112

0801c2c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c2c4:	b510      	push	{r4, lr}
 801c2c6:	4604      	mov	r4, r0
 801c2c8:	2104      	movs	r1, #4
 801c2ca:	f009 faa9 	bl	8025820 <_ZdlPvj>
 801c2ce:	4620      	mov	r0, r4
 801c2d0:	bd10      	pop	{r4, pc}

0801c2d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c2d2:	b510      	push	{r4, lr}
 801c2d4:	4604      	mov	r4, r0
 801c2d6:	2104      	movs	r1, #4
 801c2d8:	f009 faa2 	bl	8025820 <_ZdlPvj>
 801c2dc:	4620      	mov	r0, r4
 801c2de:	bd10      	pop	{r4, pc}

0801c2e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c2e0:	b510      	push	{r4, lr}
 801c2e2:	4604      	mov	r4, r0
 801c2e4:	2104      	movs	r1, #4
 801c2e6:	f009 fa9b 	bl	8025820 <_ZdlPvj>
 801c2ea:	4620      	mov	r0, r4
 801c2ec:	bd10      	pop	{r4, pc}

0801c2ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c2ee:	b510      	push	{r4, lr}
 801c2f0:	4604      	mov	r4, r0
 801c2f2:	2104      	movs	r1, #4
 801c2f4:	f009 fa94 	bl	8025820 <_ZdlPvj>
 801c2f8:	4620      	mov	r0, r4
 801c2fa:	bd10      	pop	{r4, pc}

0801c2fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c2fc:	b510      	push	{r4, lr}
 801c2fe:	4604      	mov	r4, r0
 801c300:	2104      	movs	r1, #4
 801c302:	f009 fa8d 	bl	8025820 <_ZdlPvj>
 801c306:	4620      	mov	r0, r4
 801c308:	bd10      	pop	{r4, pc}

0801c30a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c30a:	b510      	push	{r4, lr}
 801c30c:	4604      	mov	r4, r0
 801c30e:	2104      	movs	r1, #4
 801c310:	f009 fa86 	bl	8025820 <_ZdlPvj>
 801c314:	4620      	mov	r0, r4
 801c316:	bd10      	pop	{r4, pc}

0801c318 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c318:	b510      	push	{r4, lr}
 801c31a:	4604      	mov	r4, r0
 801c31c:	2104      	movs	r1, #4
 801c31e:	f009 fa7f 	bl	8025820 <_ZdlPvj>
 801c322:	4620      	mov	r0, r4
 801c324:	bd10      	pop	{r4, pc}

0801c326 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c326:	b510      	push	{r4, lr}
 801c328:	4604      	mov	r4, r0
 801c32a:	2104      	movs	r1, #4
 801c32c:	f009 fa78 	bl	8025820 <_ZdlPvj>
 801c330:	4620      	mov	r0, r4
 801c332:	bd10      	pop	{r4, pc}

0801c334 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c334:	b510      	push	{r4, lr}
 801c336:	4604      	mov	r4, r0
 801c338:	2104      	movs	r1, #4
 801c33a:	f009 fa71 	bl	8025820 <_ZdlPvj>
 801c33e:	4620      	mov	r0, r4
 801c340:	bd10      	pop	{r4, pc}

0801c342 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c342:	b510      	push	{r4, lr}
 801c344:	4604      	mov	r4, r0
 801c346:	2104      	movs	r1, #4
 801c348:	f009 fa6a 	bl	8025820 <_ZdlPvj>
 801c34c:	4620      	mov	r0, r4
 801c34e:	bd10      	pop	{r4, pc}

0801c350 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c350:	b510      	push	{r4, lr}
 801c352:	4604      	mov	r4, r0
 801c354:	2104      	movs	r1, #4
 801c356:	f009 fa63 	bl	8025820 <_ZdlPvj>
 801c35a:	4620      	mov	r0, r4
 801c35c:	bd10      	pop	{r4, pc}

0801c35e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c35e:	b510      	push	{r4, lr}
 801c360:	4604      	mov	r4, r0
 801c362:	2104      	movs	r1, #4
 801c364:	f009 fa5c 	bl	8025820 <_ZdlPvj>
 801c368:	4620      	mov	r0, r4
 801c36a:	bd10      	pop	{r4, pc}

0801c36c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c36c:	b510      	push	{r4, lr}
 801c36e:	4604      	mov	r4, r0
 801c370:	2104      	movs	r1, #4
 801c372:	f009 fa55 	bl	8025820 <_ZdlPvj>
 801c376:	4620      	mov	r0, r4
 801c378:	bd10      	pop	{r4, pc}

0801c37a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c37a:	b510      	push	{r4, lr}
 801c37c:	4604      	mov	r4, r0
 801c37e:	2104      	movs	r1, #4
 801c380:	f009 fa4e 	bl	8025820 <_ZdlPvj>
 801c384:	4620      	mov	r0, r4
 801c386:	bd10      	pop	{r4, pc}

0801c388 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c388:	b510      	push	{r4, lr}
 801c38a:	4604      	mov	r4, r0
 801c38c:	2104      	movs	r1, #4
 801c38e:	f009 fa47 	bl	8025820 <_ZdlPvj>
 801c392:	4620      	mov	r0, r4
 801c394:	bd10      	pop	{r4, pc}

0801c396 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c396:	b510      	push	{r4, lr}
 801c398:	4604      	mov	r4, r0
 801c39a:	2104      	movs	r1, #4
 801c39c:	f009 fa40 	bl	8025820 <_ZdlPvj>
 801c3a0:	4620      	mov	r0, r4
 801c3a2:	bd10      	pop	{r4, pc}

0801c3a4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c3a4:	b510      	push	{r4, lr}
 801c3a6:	4604      	mov	r4, r0
 801c3a8:	2104      	movs	r1, #4
 801c3aa:	f009 fa39 	bl	8025820 <_ZdlPvj>
 801c3ae:	4620      	mov	r0, r4
 801c3b0:	bd10      	pop	{r4, pc}

0801c3b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c3b2:	b510      	push	{r4, lr}
 801c3b4:	4604      	mov	r4, r0
 801c3b6:	2104      	movs	r1, #4
 801c3b8:	f009 fa32 	bl	8025820 <_ZdlPvj>
 801c3bc:	4620      	mov	r0, r4
 801c3be:	bd10      	pop	{r4, pc}

0801c3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c3c0:	b510      	push	{r4, lr}
 801c3c2:	4604      	mov	r4, r0
 801c3c4:	2104      	movs	r1, #4
 801c3c6:	f009 fa2b 	bl	8025820 <_ZdlPvj>
 801c3ca:	4620      	mov	r0, r4
 801c3cc:	bd10      	pop	{r4, pc}

0801c3ce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c3ce:	b510      	push	{r4, lr}
 801c3d0:	4604      	mov	r4, r0
 801c3d2:	2104      	movs	r1, #4
 801c3d4:	f009 fa24 	bl	8025820 <_ZdlPvj>
 801c3d8:	4620      	mov	r0, r4
 801c3da:	bd10      	pop	{r4, pc}

0801c3dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c3dc:	b510      	push	{r4, lr}
 801c3de:	4604      	mov	r4, r0
 801c3e0:	2104      	movs	r1, #4
 801c3e2:	f009 fa1d 	bl	8025820 <_ZdlPvj>
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	bd10      	pop	{r4, pc}

0801c3ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c3ea:	b510      	push	{r4, lr}
 801c3ec:	4604      	mov	r4, r0
 801c3ee:	2104      	movs	r1, #4
 801c3f0:	f009 fa16 	bl	8025820 <_ZdlPvj>
 801c3f4:	4620      	mov	r0, r4
 801c3f6:	bd10      	pop	{r4, pc}

0801c3f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c3f8:	b510      	push	{r4, lr}
 801c3fa:	4604      	mov	r4, r0
 801c3fc:	2104      	movs	r1, #4
 801c3fe:	f009 fa0f 	bl	8025820 <_ZdlPvj>
 801c402:	4620      	mov	r0, r4
 801c404:	bd10      	pop	{r4, pc}

0801c406 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c406:	b510      	push	{r4, lr}
 801c408:	4604      	mov	r4, r0
 801c40a:	2104      	movs	r1, #4
 801c40c:	f009 fa08 	bl	8025820 <_ZdlPvj>
 801c410:	4620      	mov	r0, r4
 801c412:	bd10      	pop	{r4, pc}

0801c414 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c414:	b510      	push	{r4, lr}
 801c416:	4604      	mov	r4, r0
 801c418:	2104      	movs	r1, #4
 801c41a:	f009 fa01 	bl	8025820 <_ZdlPvj>
 801c41e:	4620      	mov	r0, r4
 801c420:	bd10      	pop	{r4, pc}

0801c422 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c422:	b510      	push	{r4, lr}
 801c424:	4604      	mov	r4, r0
 801c426:	2104      	movs	r1, #4
 801c428:	f009 f9fa 	bl	8025820 <_ZdlPvj>
 801c42c:	4620      	mov	r0, r4
 801c42e:	bd10      	pop	{r4, pc}

0801c430 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c430:	b510      	push	{r4, lr}
 801c432:	4604      	mov	r4, r0
 801c434:	2104      	movs	r1, #4
 801c436:	f009 f9f3 	bl	8025820 <_ZdlPvj>
 801c43a:	4620      	mov	r0, r4
 801c43c:	bd10      	pop	{r4, pc}

0801c43e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c43e:	b510      	push	{r4, lr}
 801c440:	4604      	mov	r4, r0
 801c442:	2104      	movs	r1, #4
 801c444:	f009 f9ec 	bl	8025820 <_ZdlPvj>
 801c448:	4620      	mov	r0, r4
 801c44a:	bd10      	pop	{r4, pc}

0801c44c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801c44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c450:	469b      	mov	fp, r3
 801c452:	4616      	mov	r6, r2
 801c454:	b091      	sub	sp, #68	; 0x44
 801c456:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c45a:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801c45e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c462:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801c466:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801c46a:	4604      	mov	r4, r0
 801c46c:	460d      	mov	r5, r1
 801c46e:	4640      	mov	r0, r8
 801c470:	4659      	mov	r1, fp
 801c472:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c476:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c47a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801c47e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801c482:	f7f6 fd7f 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 801c486:	4631      	mov	r1, r6
 801c488:	4640      	mov	r0, r8
 801c48a:	f7f6 fd7b 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 801c48e:	4b74      	ldr	r3, [pc, #464]	; (801c660 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801c490:	8818      	ldrh	r0, [r3, #0]
 801c492:	4b74      	ldr	r3, [pc, #464]	; (801c664 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801c494:	b202      	sxth	r2, r0
 801c496:	8819      	ldrh	r1, [r3, #0]
 801c498:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c49c:	b20e      	sxth	r6, r1
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	da07      	bge.n	801c4b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801c4a2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801c4a6:	4463      	add	r3, ip
 801c4a8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801c4b2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c4b6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801c4ba:	1ad2      	subs	r2, r2, r3
 801c4bc:	4594      	cmp	ip, r2
 801c4be:	bfc4      	itt	gt
 801c4c0:	1ac2      	subgt	r2, r0, r3
 801c4c2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801c4c6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c4ca:	2a00      	cmp	r2, #0
 801c4cc:	da07      	bge.n	801c4de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801c4ce:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801c4d2:	4462      	add	r2, ip
 801c4d4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801c4d8:	2200      	movs	r2, #0
 801c4da:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c4de:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801c4e2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c4e6:	eba6 060a 	sub.w	r6, r6, sl
 801c4ea:	42b2      	cmp	r2, r6
 801c4ec:	bfc4      	itt	gt
 801c4ee:	eba1 020a 	subgt.w	r2, r1, sl
 801c4f2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801c4f6:	4a5c      	ldr	r2, [pc, #368]	; (801c668 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801c4f8:	7812      	ldrb	r2, [r2, #0]
 801c4fa:	b9a2      	cbnz	r2, 801c526 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801c4fc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c500:	4286      	cmp	r6, r0
 801c502:	4640      	mov	r0, r8
 801c504:	9303      	str	r3, [sp, #12]
 801c506:	bf14      	ite	ne
 801c508:	2600      	movne	r6, #0
 801c50a:	2601      	moveq	r6, #1
 801c50c:	f7f6 fd7d 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c510:	9b03      	ldr	r3, [sp, #12]
 801c512:	b160      	cbz	r0, 801c52e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801c514:	2300      	movs	r3, #0
 801c516:	8023      	strh	r3, [r4, #0]
 801c518:	8063      	strh	r3, [r4, #2]
 801c51a:	80a3      	strh	r3, [r4, #4]
 801c51c:	4620      	mov	r0, r4
 801c51e:	80e3      	strh	r3, [r4, #6]
 801c520:	b011      	add	sp, #68	; 0x44
 801c522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c526:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c52a:	428e      	cmp	r6, r1
 801c52c:	e7e9      	b.n	801c502 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801c52e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c532:	a90e      	add	r1, sp, #56	; 0x38
 801c534:	9205      	str	r2, [sp, #20]
 801c536:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c53a:	900e      	str	r0, [sp, #56]	; 0x38
 801c53c:	9206      	str	r2, [sp, #24]
 801c53e:	f8bb 2000 	ldrh.w	r2, [fp]
 801c542:	a80c      	add	r0, sp, #48	; 0x30
 801c544:	1a9b      	subs	r3, r3, r2
 801c546:	b21b      	sxth	r3, r3
 801c548:	9303      	str	r3, [sp, #12]
 801c54a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801c54e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801c552:	ebaa 0a03 	sub.w	sl, sl, r3
 801c556:	fa0f f38a 	sxth.w	r3, sl
 801c55a:	9304      	str	r3, [sp, #16]
 801c55c:	9b03      	ldr	r3, [sp, #12]
 801c55e:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801c562:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801c566:	9b04      	ldr	r3, [sp, #16]
 801c568:	f8df b104 	ldr.w	fp, [pc, #260]	; 801c670 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c56c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c570:	9b05      	ldr	r3, [sp, #20]
 801c572:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801c576:	9b06      	ldr	r3, [sp, #24]
 801c578:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c57c:	f7fa fa76 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c580:	4640      	mov	r0, r8
 801c582:	f7fa fa4b 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c586:	a80e      	add	r0, sp, #56	; 0x38
 801c588:	f7fa fa48 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c58c:	4b37      	ldr	r3, [pc, #220]	; (801c66c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801c58e:	4628      	mov	r0, r5
 801c590:	881b      	ldrh	r3, [r3, #0]
 801c592:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801c596:	9307      	str	r3, [sp, #28]
 801c598:	682b      	ldr	r3, [r5, #0]
 801c59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c59c:	4798      	blx	r3
 801c59e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801c5a2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c5a6:	4681      	mov	r9, r0
 801c5a8:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801c5ac:	f8db 0000 	ldr.w	r0, [fp]
 801c5b0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801c5b2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c5b6:	6803      	ldr	r3, [r0, #0]
 801c5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5ba:	4798      	blx	r3
 801c5bc:	4607      	mov	r7, r0
 801c5be:	f8db 0000 	ldr.w	r0, [fp]
 801c5c2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c5c6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c5ca:	6803      	ldr	r3, [r0, #0]
 801c5cc:	9109      	str	r1, [sp, #36]	; 0x24
 801c5ce:	9208      	str	r2, [sp, #32]
 801c5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5d2:	4798      	blx	r3
 801c5d4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c5d8:	f010 0f01 	tst.w	r0, #1
 801c5dc:	d012      	beq.n	801c604 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801c5de:	f8db 0000 	ldr.w	r0, [fp]
 801c5e2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c5e6:	6803      	ldr	r3, [r0, #0]
 801c5e8:	9200      	str	r2, [sp, #0]
 801c5ea:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801c5ec:	e898 0006 	ldmia.w	r8, {r1, r2}
 801c5f0:	462b      	mov	r3, r5
 801c5f2:	47b0      	blx	r6
 801c5f4:	9b03      	ldr	r3, [sp, #12]
 801c5f6:	8023      	strh	r3, [r4, #0]
 801c5f8:	9b04      	ldr	r3, [sp, #16]
 801c5fa:	8063      	strh	r3, [r4, #2]
 801c5fc:	9b05      	ldr	r3, [sp, #20]
 801c5fe:	80a3      	strh	r3, [r4, #4]
 801c600:	9b06      	ldr	r3, [sp, #24]
 801c602:	e78b      	b.n	801c51c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801c604:	fb09 f202 	mul.w	r2, r9, r2
 801c608:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801c60c:	440f      	add	r7, r1
 801c60e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c612:	b166      	cbz	r6, 801c62e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c614:	9a07      	ldr	r2, [sp, #28]
 801c616:	4592      	cmp	sl, r2
 801c618:	d109      	bne.n	801c62e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c61a:	f8db 0000 	ldr.w	r0, [fp]
 801c61e:	fb09 f303 	mul.w	r3, r9, r3
 801c622:	6802      	ldr	r2, [r0, #0]
 801c624:	4629      	mov	r1, r5
 801c626:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801c628:	463a      	mov	r2, r7
 801c62a:	47b0      	blx	r6
 801c62c:	e7e2      	b.n	801c5f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c62e:	fb0a f303 	mul.w	r3, sl, r3
 801c632:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801c670 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c636:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801c63a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801c63e:	4545      	cmp	r5, r8
 801c640:	d2d8      	bcs.n	801c5f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c642:	f8db 0000 	ldr.w	r0, [fp]
 801c646:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c64a:	6802      	ldr	r2, [r0, #0]
 801c64c:	4629      	mov	r1, r5
 801c64e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c652:	005b      	lsls	r3, r3, #1
 801c654:	463a      	mov	r2, r7
 801c656:	47d0      	blx	sl
 801c658:	444f      	add	r7, r9
 801c65a:	4435      	add	r5, r6
 801c65c:	e7ef      	b.n	801c63e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801c65e:	bf00      	nop
 801c660:	2004e10c 	.word	0x2004e10c
 801c664:	2004e10e 	.word	0x2004e10e
 801c668:	2004e110 	.word	0x2004e110
 801c66c:	2004e112 	.word	0x2004e112
 801c670:	2004e118 	.word	0x2004e118

0801c674 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c676:	4606      	mov	r6, r0
 801c678:	b087      	sub	sp, #28
 801c67a:	460c      	mov	r4, r1
 801c67c:	4617      	mov	r7, r2
 801c67e:	461d      	mov	r5, r3
 801c680:	b333      	cbz	r3, 801c6d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c682:	4608      	mov	r0, r1
 801c684:	f7f6 fcc1 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c688:	bb10      	cbnz	r0, 801c6d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c68a:	6820      	ldr	r0, [r4, #0]
 801c68c:	6861      	ldr	r1, [r4, #4]
 801c68e:	ab04      	add	r3, sp, #16
 801c690:	4c1b      	ldr	r4, [pc, #108]	; (801c700 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801c692:	c303      	stmia	r3!, {r0, r1}
 801c694:	a804      	add	r0, sp, #16
 801c696:	f7fa f9c1 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c69a:	6820      	ldr	r0, [r4, #0]
 801c69c:	6803      	ldr	r3, [r0, #0]
 801c69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6a0:	4798      	blx	r3
 801c6a2:	2dff      	cmp	r5, #255	; 0xff
 801c6a4:	d016      	beq.n	801c6d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801c6a6:	f010 0f08 	tst.w	r0, #8
 801c6aa:	6820      	ldr	r0, [r4, #0]
 801c6ac:	d015      	beq.n	801c6da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c6ae:	2400      	movs	r4, #0
 801c6b0:	6801      	ldr	r1, [r0, #0]
 801c6b2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801c6b6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c6ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c6be:	9401      	str	r4, [sp, #4]
 801c6c0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c6c4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c6c8:	9400      	str	r4, [sp, #0]
 801c6ca:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801c6cc:	4639      	mov	r1, r7
 801c6ce:	47a0      	blx	r4
 801c6d0:	b007      	add	sp, #28
 801c6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6d4:	f010 0f02 	tst.w	r0, #2
 801c6d8:	e7e7      	b.n	801c6aa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c6da:	6803      	ldr	r3, [r0, #0]
 801c6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6de:	4798      	blx	r3
 801c6e0:	4b08      	ldr	r3, [pc, #32]	; (801c704 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c6e2:	4601      	mov	r1, r0
 801c6e4:	881a      	ldrh	r2, [r3, #0]
 801c6e6:	e9cd 7500 	strd	r7, r5, [sp]
 801c6ea:	6833      	ldr	r3, [r6, #0]
 801c6ec:	4630      	mov	r0, r6
 801c6ee:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c6f0:	ab04      	add	r3, sp, #16
 801c6f2:	47a8      	blx	r5
 801c6f4:	6820      	ldr	r0, [r4, #0]
 801c6f6:	6803      	ldr	r3, [r0, #0]
 801c6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6fa:	4798      	blx	r3
 801c6fc:	e7e8      	b.n	801c6d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c6fe:	bf00      	nop
 801c700:	2004e118 	.word	0x2004e118
 801c704:	2004e112 	.word	0x2004e112

0801c708 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801c708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c70c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801c710:	4688      	mov	r8, r1
 801c712:	4614      	mov	r4, r2
 801c714:	461d      	mov	r5, r3
 801c716:	9e08      	ldr	r6, [sp, #32]
 801c718:	2f00      	cmp	r7, #0
 801c71a:	f000 80a9 	beq.w	801c870 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c71e:	4618      	mov	r0, r3
 801c720:	f7f6 fc73 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c724:	2800      	cmp	r0, #0
 801c726:	f040 80a3 	bne.w	801c870 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c72a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801c72e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c732:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801c736:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801c73a:	fb04 1303 	mla	r3, r4, r3, r1
 801c73e:	4365      	muls	r5, r4
 801c740:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801c744:	2fff      	cmp	r7, #255	; 0xff
 801c746:	eba4 0200 	sub.w	r2, r4, r0
 801c74a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801c74e:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801c752:	d04a      	beq.n	801c7ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801c754:	b2bc      	uxth	r4, r7
 801c756:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801c75a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801c75e:	fa5f f788 	uxtb.w	r7, r8
 801c762:	b2f3      	uxtb	r3, r6
 801c764:	fb0e fe04 	mul.w	lr, lr, r4
 801c768:	4367      	muls	r7, r4
 801c76a:	4363      	muls	r3, r4
 801c76c:	0040      	lsls	r0, r0, #1
 801c76e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801c772:	fa1f fc8c 	uxth.w	ip, ip
 801c776:	42a9      	cmp	r1, r5
 801c778:	d27a      	bcs.n	801c870 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c77a:	eb01 0900 	add.w	r9, r1, r0
 801c77e:	4549      	cmp	r1, r9
 801c780:	d231      	bcs.n	801c7e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801c782:	880a      	ldrh	r2, [r1, #0]
 801c784:	1214      	asrs	r4, r2, #8
 801c786:	10d6      	asrs	r6, r2, #3
 801c788:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801c78c:	00d2      	lsls	r2, r2, #3
 801c78e:	b2d2      	uxtb	r2, r2
 801c790:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801c794:	fb14 f40c 	smulbb	r4, r4, ip
 801c798:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c79c:	fb12 f20c 	smulbb	r2, r2, ip
 801c7a0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c7a4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801c7a8:	4474      	add	r4, lr
 801c7aa:	fb16 f60c 	smulbb	r6, r6, ip
 801c7ae:	b2a4      	uxth	r4, r4
 801c7b0:	441a      	add	r2, r3
 801c7b2:	b292      	uxth	r2, r2
 801c7b4:	f104 0a01 	add.w	sl, r4, #1
 801c7b8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c7bc:	f102 0a01 	add.w	sl, r2, #1
 801c7c0:	443e      	add	r6, r7
 801c7c2:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801c7c6:	b2b6      	uxth	r6, r6
 801c7c8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c7cc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c7d0:	4322      	orrs	r2, r4
 801c7d2:	1c74      	adds	r4, r6, #1
 801c7d4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801c7d8:	0976      	lsrs	r6, r6, #5
 801c7da:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c7de:	4332      	orrs	r2, r6
 801c7e0:	f821 2b02 	strh.w	r2, [r1], #2
 801c7e4:	e7cb      	b.n	801c77e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801c7e6:	4441      	add	r1, r8
 801c7e8:	e7c5      	b.n	801c776 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801c7ea:	4f22      	ldr	r7, [pc, #136]	; (801c874 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801c7ec:	0973      	lsrs	r3, r6, #5
 801c7ee:	ea08 0707 	and.w	r7, r8, r7
 801c7f2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c7f6:	433b      	orrs	r3, r7
 801c7f8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c7fc:	4333      	orrs	r3, r6
 801c7fe:	07e7      	lsls	r7, r4, #31
 801c800:	b29b      	uxth	r3, r3
 801c802:	d50b      	bpl.n	801c81c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801c804:	0040      	lsls	r0, r0, #1
 801c806:	0052      	lsls	r2, r2, #1
 801c808:	42a9      	cmp	r1, r5
 801c80a:	d231      	bcs.n	801c870 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c80c:	180c      	adds	r4, r1, r0
 801c80e:	42a1      	cmp	r1, r4
 801c810:	d202      	bcs.n	801c818 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801c812:	f821 3b02 	strh.w	r3, [r1], #2
 801c816:	e7fa      	b.n	801c80e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801c818:	4411      	add	r1, r2
 801c81a:	e7f5      	b.n	801c808 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801c81c:	078e      	lsls	r6, r1, #30
 801c81e:	d008      	beq.n	801c832 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801c820:	460a      	mov	r2, r1
 801c822:	0066      	lsls	r6, r4, #1
 801c824:	42aa      	cmp	r2, r5
 801c826:	d202      	bcs.n	801c82e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801c828:	8013      	strh	r3, [r2, #0]
 801c82a:	4432      	add	r2, r6
 801c82c:	e7fa      	b.n	801c824 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801c82e:	3102      	adds	r1, #2
 801c830:	3801      	subs	r0, #1
 801c832:	07c2      	lsls	r2, r0, #31
 801c834:	d50b      	bpl.n	801c84e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801c836:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801c83a:	3a01      	subs	r2, #1
 801c83c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801c840:	0066      	lsls	r6, r4, #1
 801c842:	42aa      	cmp	r2, r5
 801c844:	d202      	bcs.n	801c84c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801c846:	8013      	strh	r3, [r2, #0]
 801c848:	4432      	add	r2, r6
 801c84a:	e7fa      	b.n	801c842 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801c84c:	3801      	subs	r0, #1
 801c84e:	b178      	cbz	r0, 801c870 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c850:	1040      	asrs	r0, r0, #1
 801c852:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801c856:	0080      	lsls	r0, r0, #2
 801c858:	0064      	lsls	r4, r4, #1
 801c85a:	42a9      	cmp	r1, r5
 801c85c:	d208      	bcs.n	801c870 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c85e:	460a      	mov	r2, r1
 801c860:	180e      	adds	r6, r1, r0
 801c862:	42b2      	cmp	r2, r6
 801c864:	d202      	bcs.n	801c86c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801c866:	f842 3b04 	str.w	r3, [r2], #4
 801c86a:	e7fa      	b.n	801c862 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801c86c:	4421      	add	r1, r4
 801c86e:	e7f4      	b.n	801c85a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801c870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c874:	00fff800 	.word	0x00fff800

0801c878 <_ZN8touchgfx8LCD16bppC1Ev>:
 801c878:	2200      	movs	r2, #0
 801c87a:	4910      	ldr	r1, [pc, #64]	; (801c8bc <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801c87c:	6042      	str	r2, [r0, #4]
 801c87e:	6001      	str	r1, [r0, #0]
 801c880:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c884:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c888:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c88c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c890:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c894:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c898:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c89c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c8a0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c8a4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c8a8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801c8ac:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801c8b0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801c8b4:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801c8b8:	4770      	bx	lr
 801c8ba:	bf00      	nop
 801c8bc:	08028dc8 	.word	0x08028dc8

0801c8c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8c4:	460d      	mov	r5, r1
 801c8c6:	4604      	mov	r4, r0
 801c8c8:	4699      	mov	r9, r3
 801c8ca:	b08d      	sub	sp, #52	; 0x34
 801c8cc:	6808      	ldr	r0, [r1, #0]
 801c8ce:	6849      	ldr	r1, [r1, #4]
 801c8d0:	ab08      	add	r3, sp, #32
 801c8d2:	c303      	stmia	r3!, {r0, r1}
 801c8d4:	6810      	ldr	r0, [r2, #0]
 801c8d6:	6851      	ldr	r1, [r2, #4]
 801c8d8:	ab0a      	add	r3, sp, #40	; 0x28
 801c8da:	c303      	stmia	r3!, {r0, r1}
 801c8dc:	a808      	add	r0, sp, #32
 801c8de:	f7fa f89d 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c8e2:	4629      	mov	r1, r5
 801c8e4:	a80a      	add	r0, sp, #40	; 0x28
 801c8e6:	f7fa f8c1 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c8ea:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c8ee:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c8f2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c8f6:	4d63      	ldr	r5, [pc, #396]	; (801ca84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801c8f8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c8fc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c900:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c904:	6828      	ldr	r0, [r5, #0]
 801c906:	440a      	add	r2, r1
 801c908:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c90c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c910:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801c914:	4413      	add	r3, r2
 801c916:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c91a:	6803      	ldr	r3, [r0, #0]
 801c91c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c922:	4798      	blx	r3
 801c924:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c928:	d119      	bne.n	801c95e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801c92a:	f010 0f20 	tst.w	r0, #32
 801c92e:	6828      	ldr	r0, [r5, #0]
 801c930:	d018      	beq.n	801c964 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801c932:	2500      	movs	r5, #0
 801c934:	6801      	ldr	r1, [r0, #0]
 801c936:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801c93a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801c93e:	b2b6      	uxth	r6, r6
 801c940:	9502      	str	r5, [sp, #8]
 801c942:	fa1f f588 	uxth.w	r5, r8
 801c946:	9601      	str	r6, [sp, #4]
 801c948:	9500      	str	r5, [sp, #0]
 801c94a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801c94c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c950:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c954:	4621      	mov	r1, r4
 801c956:	47a8      	blx	r5
 801c958:	b00d      	add	sp, #52	; 0x34
 801c95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c95e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c962:	e7e4      	b.n	801c92e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801c964:	6803      	ldr	r3, [r0, #0]
 801c966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c968:	4798      	blx	r3
 801c96a:	4947      	ldr	r1, [pc, #284]	; (801ca88 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801c96c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c970:	468a      	mov	sl, r1
 801c972:	880b      	ldrh	r3, [r1, #0]
 801c974:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801c978:	fb03 5202 	mla	r2, r3, r2, r5
 801c97c:	4373      	muls	r3, r6
 801c97e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c982:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c986:	9307      	str	r3, [sp, #28]
 801c988:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801c98c:	9306      	str	r3, [sp, #24]
 801c98e:	9b07      	ldr	r3, [sp, #28]
 801c990:	4298      	cmp	r0, r3
 801c992:	d270      	bcs.n	801ca76 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801c994:	4621      	mov	r1, r4
 801c996:	9b06      	ldr	r3, [sp, #24]
 801c998:	eb00 0b03 	add.w	fp, r0, r3
 801c99c:	4558      	cmp	r0, fp
 801c99e:	d25d      	bcs.n	801ca5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801c9a0:	f851 4b04 	ldr.w	r4, [r1], #4
 801c9a4:	0e23      	lsrs	r3, r4, #24
 801c9a6:	d014      	beq.n	801c9d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801c9a8:	2bff      	cmp	r3, #255	; 0xff
 801c9aa:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801c9ae:	d112      	bne.n	801c9d6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801c9b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c9b4:	d10f      	bne.n	801c9d6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801c9b6:	0963      	lsrs	r3, r4, #5
 801c9b8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801c9bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c9c0:	f02c 0c07 	bic.w	ip, ip, #7
 801c9c4:	ea43 0c0c 	orr.w	ip, r3, ip
 801c9c8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c9cc:	ea4c 0404 	orr.w	r4, ip, r4
 801c9d0:	8004      	strh	r4, [r0, #0]
 801c9d2:	3002      	adds	r0, #2
 801c9d4:	e7e2      	b.n	801c99c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801c9d6:	fb09 f303 	mul.w	r3, r9, r3
 801c9da:	1c5a      	adds	r2, r3, #1
 801c9dc:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801c9e0:	1212      	asrs	r2, r2, #8
 801c9e2:	b293      	uxth	r3, r2
 801c9e4:	43d2      	mvns	r2, r2
 801c9e6:	8807      	ldrh	r7, [r0, #0]
 801c9e8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801c9ec:	fb1e fe03 	smulbb	lr, lr, r3
 801c9f0:	123e      	asrs	r6, r7, #8
 801c9f2:	fa5f fc8c 	uxtb.w	ip, ip
 801c9f6:	b2e4      	uxtb	r4, r4
 801c9f8:	fb1c fc03 	smulbb	ip, ip, r3
 801c9fc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ca00:	fb14 f403 	smulbb	r4, r4, r3
 801ca04:	b2d2      	uxtb	r2, r2
 801ca06:	10fd      	asrs	r5, r7, #3
 801ca08:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ca0c:	00ff      	lsls	r7, r7, #3
 801ca0e:	fb06 e602 	mla	r6, r6, r2, lr
 801ca12:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ca16:	b2ff      	uxtb	r7, r7
 801ca18:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ca1c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ca20:	fb05 c502 	mla	r5, r5, r2, ip
 801ca24:	fb07 4702 	mla	r7, r7, r2, r4
 801ca28:	b2b6      	uxth	r6, r6
 801ca2a:	f106 0e01 	add.w	lr, r6, #1
 801ca2e:	b2ad      	uxth	r5, r5
 801ca30:	b2bf      	uxth	r7, r7
 801ca32:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ca36:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801ca3a:	f105 0c01 	add.w	ip, r5, #1
 801ca3e:	1c7e      	adds	r6, r7, #1
 801ca40:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ca44:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ca48:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ca4c:	096d      	lsrs	r5, r5, #5
 801ca4e:	ea46 060e 	orr.w	r6, r6, lr
 801ca52:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ca56:	432e      	orrs	r6, r5
 801ca58:	8006      	strh	r6, [r0, #0]
 801ca5a:	e7ba      	b.n	801c9d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ca5c:	f8ba 3000 	ldrh.w	r3, [sl]
 801ca60:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801ca64:	eba3 0308 	sub.w	r3, r3, r8
 801ca68:	eba4 0408 	sub.w	r4, r4, r8
 801ca6c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ca70:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ca74:	e78b      	b.n	801c98e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801ca76:	4b03      	ldr	r3, [pc, #12]	; (801ca84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801ca78:	6818      	ldr	r0, [r3, #0]
 801ca7a:	6803      	ldr	r3, [r0, #0]
 801ca7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca7e:	4798      	blx	r3
 801ca80:	e76a      	b.n	801c958 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801ca82:	bf00      	nop
 801ca84:	2004e118 	.word	0x2004e118
 801ca88:	2004e112 	.word	0x2004e112

0801ca8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801ca8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca90:	b085      	sub	sp, #20
 801ca92:	466d      	mov	r5, sp
 801ca94:	4616      	mov	r6, r2
 801ca96:	460c      	mov	r4, r1
 801ca98:	6810      	ldr	r0, [r2, #0]
 801ca9a:	6851      	ldr	r1, [r2, #4]
 801ca9c:	c503      	stmia	r5!, {r0, r1}
 801ca9e:	6818      	ldr	r0, [r3, #0]
 801caa0:	6859      	ldr	r1, [r3, #4]
 801caa2:	c503      	stmia	r5!, {r0, r1}
 801caa4:	4668      	mov	r0, sp
 801caa6:	f7f9 ffb9 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801caaa:	4631      	mov	r1, r6
 801caac:	a802      	add	r0, sp, #8
 801caae:	f7f9 ffdd 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cab2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801cab6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801caba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801cabe:	4d28      	ldr	r5, [pc, #160]	; (801cb60 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801cac0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cac4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801cac8:	f8bd 1000 	ldrh.w	r1, [sp]
 801cacc:	6828      	ldr	r0, [r5, #0]
 801cace:	440a      	add	r2, r1
 801cad0:	f8ad 2008 	strh.w	r2, [sp, #8]
 801cad4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cad8:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cadc:	4413      	add	r3, r2
 801cade:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cae2:	6803      	ldr	r3, [r0, #0]
 801cae4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801cae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801caea:	4798      	blx	r3
 801caec:	4e1d      	ldr	r6, [pc, #116]	; (801cb64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801caee:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801caf2:	8833      	ldrh	r3, [r6, #0]
 801caf4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801caf8:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801cb68 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801cafc:	fb03 1202 	mla	r2, r3, r2, r1
 801cb00:	fb08 f303 	mul.w	r3, r8, r3
 801cb04:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cb08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cb0c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801cb10:	4298      	cmp	r0, r3
 801cb12:	d21d      	bcs.n	801cb50 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801cb14:	eb00 080c 	add.w	r8, r0, ip
 801cb18:	4540      	cmp	r0, r8
 801cb1a:	d20f      	bcs.n	801cb3c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801cb1c:	f854 1b04 	ldr.w	r1, [r4], #4
 801cb20:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801cb24:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801cb28:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801cb2c:	ea42 0209 	orr.w	r2, r2, r9
 801cb30:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801cb34:	430a      	orrs	r2, r1
 801cb36:	f820 2b02 	strh.w	r2, [r0], #2
 801cb3a:	e7ed      	b.n	801cb18 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801cb3c:	8832      	ldrh	r2, [r6, #0]
 801cb3e:	1bd2      	subs	r2, r2, r7
 801cb40:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cb44:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801cb48:	1bd2      	subs	r2, r2, r7
 801cb4a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801cb4e:	e7df      	b.n	801cb10 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801cb50:	6828      	ldr	r0, [r5, #0]
 801cb52:	6803      	ldr	r3, [r0, #0]
 801cb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb56:	4798      	blx	r3
 801cb58:	b005      	add	sp, #20
 801cb5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb5e:	bf00      	nop
 801cb60:	2004e118 	.word	0x2004e118
 801cb64:	2004e112 	.word	0x2004e112
 801cb68:	fffff800 	.word	0xfffff800

0801cb6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801cb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb70:	460e      	mov	r6, r1
 801cb72:	4604      	mov	r4, r0
 801cb74:	461d      	mov	r5, r3
 801cb76:	b08e      	sub	sp, #56	; 0x38
 801cb78:	6808      	ldr	r0, [r1, #0]
 801cb7a:	6849      	ldr	r1, [r1, #4]
 801cb7c:	ab0a      	add	r3, sp, #40	; 0x28
 801cb7e:	c303      	stmia	r3!, {r0, r1}
 801cb80:	6810      	ldr	r0, [r2, #0]
 801cb82:	6851      	ldr	r1, [r2, #4]
 801cb84:	ab0c      	add	r3, sp, #48	; 0x30
 801cb86:	c303      	stmia	r3!, {r0, r1}
 801cb88:	a80a      	add	r0, sp, #40	; 0x28
 801cb8a:	f7f9 ff47 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cb8e:	4631      	mov	r1, r6
 801cb90:	a80c      	add	r0, sp, #48	; 0x30
 801cb92:	f7f9 ff6b 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cb96:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801cb9a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801cb9e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cba2:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801cd54 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801cba6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cbaa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cbae:	440c      	add	r4, r1
 801cbb0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801cbb4:	f8d8 0000 	ldr.w	r0, [r8]
 801cbb8:	440a      	add	r2, r1
 801cbba:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801cbbe:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801cbc2:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801cbc6:	4413      	add	r3, r2
 801cbc8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cbcc:	6803      	ldr	r3, [r0, #0]
 801cbce:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801cbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbd4:	4798      	blx	r3
 801cbd6:	2dff      	cmp	r5, #255	; 0xff
 801cbd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801cd58 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801cbdc:	d124      	bne.n	801cc28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801cbde:	f010 0f01 	tst.w	r0, #1
 801cbe2:	f8d8 0000 	ldr.w	r0, [r8]
 801cbe6:	d022      	beq.n	801cc2e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801cbe8:	2100      	movs	r1, #0
 801cbea:	f04f 0e01 	mov.w	lr, #1
 801cbee:	f8d0 c000 	ldr.w	ip, [r0]
 801cbf2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801cbf6:	f8cd e018 	str.w	lr, [sp, #24]
 801cbfa:	f8b9 e000 	ldrh.w	lr, [r9]
 801cbfe:	b2b6      	uxth	r6, r6
 801cc00:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801cc04:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cc08:	b2bf      	uxth	r7, r7
 801cc0a:	9102      	str	r1, [sp, #8]
 801cc0c:	9503      	str	r5, [sp, #12]
 801cc0e:	9601      	str	r6, [sp, #4]
 801cc10:	9700      	str	r7, [sp, #0]
 801cc12:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801cc16:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801cc1a:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801cc1e:	4621      	mov	r1, r4
 801cc20:	47a8      	blx	r5
 801cc22:	b00e      	add	sp, #56	; 0x38
 801cc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc28:	f010 0f04 	tst.w	r0, #4
 801cc2c:	e7d9      	b.n	801cbe2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801cc2e:	6803      	ldr	r3, [r0, #0]
 801cc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc32:	4798      	blx	r3
 801cc34:	f8b9 3000 	ldrh.w	r3, [r9]
 801cc38:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801cc3c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801cc40:	435e      	muls	r6, r3
 801cc42:	fb03 1202 	mla	r2, r3, r2, r1
 801cc46:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cc4a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cc4e:	ebac 0c07 	sub.w	ip, ip, r7
 801cc52:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801cc56:	2dff      	cmp	r5, #255	; 0xff
 801cc58:	eba3 0707 	sub.w	r7, r3, r7
 801cc5c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801cc60:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cc64:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801cc68:	d049      	beq.n	801ccfe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801cc6a:	43eb      	mvns	r3, r5
 801cc6c:	fa1f f985 	uxth.w	r9, r5
 801cc70:	b2db      	uxtb	r3, r3
 801cc72:	42b0      	cmp	r0, r6
 801cc74:	d266      	bcs.n	801cd44 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801cc76:	eb00 0a0e 	add.w	sl, r0, lr
 801cc7a:	4550      	cmp	r0, sl
 801cc7c:	4621      	mov	r1, r4
 801cc7e:	f104 0403 	add.w	r4, r4, #3
 801cc82:	d25b      	bcs.n	801cd3c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801cc84:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801cc88:	8802      	ldrh	r2, [r0, #0]
 801cc8a:	fb11 f109 	smulbb	r1, r1, r9
 801cc8e:	ea4f 2822 	mov.w	r8, r2, asr #8
 801cc92:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801cc96:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801cc9a:	fb08 1803 	mla	r8, r8, r3, r1
 801cc9e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801cca2:	10d5      	asrs	r5, r2, #3
 801cca4:	fb11 f109 	smulbb	r1, r1, r9
 801cca8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ccac:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ccb0:	fb05 1503 	mla	r5, r5, r3, r1
 801ccb4:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ccb8:	00d2      	lsls	r2, r2, #3
 801ccba:	fb11 f109 	smulbb	r1, r1, r9
 801ccbe:	b2d2      	uxtb	r2, r2
 801ccc0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ccc4:	fb02 1203 	mla	r2, r2, r3, r1
 801ccc8:	fa1f f888 	uxth.w	r8, r8
 801cccc:	b292      	uxth	r2, r2
 801ccce:	f108 0101 	add.w	r1, r8, #1
 801ccd2:	b2ad      	uxth	r5, r5
 801ccd4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801ccd8:	1c51      	adds	r1, r2, #1
 801ccda:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ccde:	1c69      	adds	r1, r5, #1
 801cce0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801cce4:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801cce8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ccec:	096d      	lsrs	r5, r5, #5
 801ccee:	ea42 0208 	orr.w	r2, r2, r8
 801ccf2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ccf6:	432a      	orrs	r2, r5
 801ccf8:	f820 2b02 	strh.w	r2, [r0], #2
 801ccfc:	e7bd      	b.n	801cc7a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801ccfe:	4a14      	ldr	r2, [pc, #80]	; (801cd50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801cd00:	42b0      	cmp	r0, r6
 801cd02:	d21f      	bcs.n	801cd44 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801cd04:	eb00 050e 	add.w	r5, r0, lr
 801cd08:	42a8      	cmp	r0, r5
 801cd0a:	4621      	mov	r1, r4
 801cd0c:	f104 0403 	add.w	r4, r4, #3
 801cd10:	d210      	bcs.n	801cd34 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801cd12:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801cd16:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801cd1a:	00db      	lsls	r3, r3, #3
 801cd1c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801cd20:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cd24:	430b      	orrs	r3, r1
 801cd26:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801cd2a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801cd2e:	f820 3b02 	strh.w	r3, [r0], #2
 801cd32:	e7e9      	b.n	801cd08 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801cd34:	4438      	add	r0, r7
 801cd36:	eb01 040c 	add.w	r4, r1, ip
 801cd3a:	e7e1      	b.n	801cd00 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801cd3c:	4438      	add	r0, r7
 801cd3e:	eb01 040c 	add.w	r4, r1, ip
 801cd42:	e796      	b.n	801cc72 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801cd44:	4b03      	ldr	r3, [pc, #12]	; (801cd54 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801cd46:	6818      	ldr	r0, [r3, #0]
 801cd48:	6803      	ldr	r3, [r0, #0]
 801cd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd4c:	4798      	blx	r3
 801cd4e:	e768      	b.n	801cc22 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801cd50:	fffff800 	.word	0xfffff800
 801cd54:	2004e118 	.word	0x2004e118
 801cd58:	2004e112 	.word	0x2004e112

0801cd5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801cd5c:	b4f0      	push	{r4, r5, r6, r7}
 801cd5e:	4616      	mov	r6, r2
 801cd60:	2e01      	cmp	r6, #1
 801cd62:	461c      	mov	r4, r3
 801cd64:	460d      	mov	r5, r1
 801cd66:	9a04      	ldr	r2, [sp, #16]
 801cd68:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801cd6c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801cd70:	d012      	beq.n	801cd98 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801cd72:	d303      	bcc.n	801cd7c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801cd74:	2e02      	cmp	r6, #2
 801cd76:	d00a      	beq.n	801cd8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801cd78:	bcf0      	pop	{r4, r5, r6, r7}
 801cd7a:	4770      	bx	lr
 801cd7c:	6805      	ldr	r5, [r0, #0]
 801cd7e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801cd82:	68ed      	ldr	r5, [r5, #12]
 801cd84:	4613      	mov	r3, r2
 801cd86:	46ac      	mov	ip, r5
 801cd88:	4622      	mov	r2, r4
 801cd8a:	bcf0      	pop	{r4, r5, r6, r7}
 801cd8c:	4760      	bx	ip
 801cd8e:	4621      	mov	r1, r4
 801cd90:	4628      	mov	r0, r5
 801cd92:	bcf0      	pop	{r4, r5, r6, r7}
 801cd94:	f7ff bd94 	b.w	801c8c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cd98:	4621      	mov	r1, r4
 801cd9a:	4628      	mov	r0, r5
 801cd9c:	bcf0      	pop	{r4, r5, r6, r7}
 801cd9e:	f7ff bee5 	b.w	801cb6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801cda4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801cda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cda8:	4616      	mov	r6, r2
 801cdaa:	4681      	mov	r9, r0
 801cdac:	b093      	sub	sp, #76	; 0x4c
 801cdae:	6810      	ldr	r0, [r2, #0]
 801cdb0:	4688      	mov	r8, r1
 801cdb2:	6851      	ldr	r1, [r2, #4]
 801cdb4:	ac0e      	add	r4, sp, #56	; 0x38
 801cdb6:	c403      	stmia	r4!, {r0, r1}
 801cdb8:	6818      	ldr	r0, [r3, #0]
 801cdba:	6859      	ldr	r1, [r3, #4]
 801cdbc:	ac10      	add	r4, sp, #64	; 0x40
 801cdbe:	c403      	stmia	r4!, {r0, r1}
 801cdc0:	a80e      	add	r0, sp, #56	; 0x38
 801cdc2:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801cdc6:	f7f9 fe29 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cdca:	4631      	mov	r1, r6
 801cdcc:	a810      	add	r0, sp, #64	; 0x40
 801cdce:	f7f9 fe4d 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cdd2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cdd6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801cdda:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801cdde:	4e62      	ldr	r6, [pc, #392]	; (801cf68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801cde0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cde4:	4489      	add	r9, r1
 801cde6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801cdea:	6830      	ldr	r0, [r6, #0]
 801cdec:	440a      	add	r2, r1
 801cdee:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801cdf2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cdf6:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801cdfa:	4413      	add	r3, r2
 801cdfc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ce00:	6803      	ldr	r3, [r0, #0]
 801ce02:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801ce06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce08:	4798      	blx	r3
 801ce0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801ce0e:	4f57      	ldr	r7, [pc, #348]	; (801cf6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801ce10:	6830      	ldr	r0, [r6, #0]
 801ce12:	d01d      	beq.n	801ce50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801ce14:	2200      	movs	r2, #0
 801ce16:	6801      	ldr	r1, [r0, #0]
 801ce18:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ce1c:	220b      	movs	r2, #11
 801ce1e:	9207      	str	r2, [sp, #28]
 801ce20:	883a      	ldrh	r2, [r7, #0]
 801ce22:	b2a4      	uxth	r4, r4
 801ce24:	9206      	str	r2, [sp, #24]
 801ce26:	2201      	movs	r2, #1
 801ce28:	e9cd a204 	strd	sl, r2, [sp, #16]
 801ce2c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801ce30:	b2ad      	uxth	r5, r5
 801ce32:	9203      	str	r2, [sp, #12]
 801ce34:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ce38:	9502      	str	r5, [sp, #8]
 801ce3a:	9200      	str	r2, [sp, #0]
 801ce3c:	9401      	str	r4, [sp, #4]
 801ce3e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801ce40:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ce44:	4642      	mov	r2, r8
 801ce46:	4649      	mov	r1, r9
 801ce48:	47a0      	blx	r4
 801ce4a:	b013      	add	sp, #76	; 0x4c
 801ce4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce50:	6803      	ldr	r3, [r0, #0]
 801ce52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce54:	4798      	blx	r3
 801ce56:	f04f 0e04 	mov.w	lr, #4
 801ce5a:	883b      	ldrh	r3, [r7, #0]
 801ce5c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ce60:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801ce64:	435d      	muls	r5, r3
 801ce66:	fb03 1202 	mla	r2, r3, r2, r1
 801ce6a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ce6e:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801ce72:	920c      	str	r2, [sp, #48]	; 0x30
 801ce74:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801ce78:	1b12      	subs	r2, r2, r4
 801ce7a:	920d      	str	r2, [sp, #52]	; 0x34
 801ce7c:	0062      	lsls	r2, r4, #1
 801ce7e:	1b1c      	subs	r4, r3, r4
 801ce80:	0063      	lsls	r3, r4, #1
 801ce82:	920a      	str	r2, [sp, #40]	; 0x28
 801ce84:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce88:	4298      	cmp	r0, r3
 801ce8a:	d266      	bcs.n	801cf5a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801ce8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce8e:	eb00 0b03 	add.w	fp, r0, r3
 801ce92:	4558      	cmp	r0, fp
 801ce94:	d25c      	bcs.n	801cf50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801ce96:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ce9a:	fb1e e303 	smlabb	r3, lr, r3, lr
 801ce9e:	f858 2003 	ldr.w	r2, [r8, r3]
 801cea2:	0e11      	lsrs	r1, r2, #24
 801cea4:	d012      	beq.n	801cecc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801cea6:	29ff      	cmp	r1, #255	; 0xff
 801cea8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801ceac:	d110      	bne.n	801ced0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ceae:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ceb2:	d10d      	bne.n	801ced0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ceb4:	0953      	lsrs	r3, r2, #5
 801ceb6:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801ceba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cebe:	f027 0707 	bic.w	r7, r7, #7
 801cec2:	431f      	orrs	r7, r3
 801cec4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801cec8:	433a      	orrs	r2, r7
 801ceca:	8002      	strh	r2, [r0, #0]
 801cecc:	3002      	adds	r0, #2
 801cece:	e7e0      	b.n	801ce92 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801ced0:	fb0a f101 	mul.w	r1, sl, r1
 801ced4:	1c4b      	adds	r3, r1, #1
 801ced6:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801ceda:	121b      	asrs	r3, r3, #8
 801cedc:	b299      	uxth	r1, r3
 801cede:	43db      	mvns	r3, r3
 801cee0:	8806      	ldrh	r6, [r0, #0]
 801cee2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801cee6:	b2d2      	uxtb	r2, r2
 801cee8:	fb1c fc01 	smulbb	ip, ip, r1
 801ceec:	fb12 f201 	smulbb	r2, r2, r1
 801cef0:	1235      	asrs	r5, r6, #8
 801cef2:	10f4      	asrs	r4, r6, #3
 801cef4:	00f6      	lsls	r6, r6, #3
 801cef6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801cefa:	b2f6      	uxtb	r6, r6
 801cefc:	b2ff      	uxtb	r7, r7
 801cefe:	b2db      	uxtb	r3, r3
 801cf00:	fb17 f701 	smulbb	r7, r7, r1
 801cf04:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801cf08:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cf0c:	fb05 c503 	mla	r5, r5, r3, ip
 801cf10:	fb06 2203 	mla	r2, r6, r3, r2
 801cf14:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801cf18:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801cf1c:	fb04 7403 	mla	r4, r4, r3, r7
 801cf20:	b2ad      	uxth	r5, r5
 801cf22:	b292      	uxth	r2, r2
 801cf24:	f105 0c01 	add.w	ip, r5, #1
 801cf28:	1c57      	adds	r7, r2, #1
 801cf2a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cf2e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801cf32:	b2a4      	uxth	r4, r4
 801cf34:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cf38:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801cf3c:	433d      	orrs	r5, r7
 801cf3e:	1c67      	adds	r7, r4, #1
 801cf40:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801cf44:	0964      	lsrs	r4, r4, #5
 801cf46:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801cf4a:	4325      	orrs	r5, r4
 801cf4c:	8005      	strh	r5, [r0, #0]
 801cf4e:	e7bd      	b.n	801cecc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801cf50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf52:	4418      	add	r0, r3
 801cf54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf56:	4499      	add	r9, r3
 801cf58:	e795      	b.n	801ce86 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801cf5a:	4b03      	ldr	r3, [pc, #12]	; (801cf68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801cf5c:	6818      	ldr	r0, [r3, #0]
 801cf5e:	6803      	ldr	r3, [r0, #0]
 801cf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf62:	4798      	blx	r3
 801cf64:	e771      	b.n	801ce4a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801cf66:	bf00      	nop
 801cf68:	2004e118 	.word	0x2004e118
 801cf6c:	2004e112 	.word	0x2004e112

0801cf70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801cf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf74:	b087      	sub	sp, #28
 801cf76:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801cf7a:	4680      	mov	r8, r0
 801cf7c:	460d      	mov	r5, r1
 801cf7e:	4614      	mov	r4, r2
 801cf80:	2e00      	cmp	r6, #0
 801cf82:	f000 80b9 	beq.w	801d0f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801cf86:	6810      	ldr	r0, [r2, #0]
 801cf88:	6851      	ldr	r1, [r2, #4]
 801cf8a:	af02      	add	r7, sp, #8
 801cf8c:	c703      	stmia	r7!, {r0, r1}
 801cf8e:	6818      	ldr	r0, [r3, #0]
 801cf90:	6859      	ldr	r1, [r3, #4]
 801cf92:	af04      	add	r7, sp, #16
 801cf94:	c703      	stmia	r7!, {r0, r1}
 801cf96:	a802      	add	r0, sp, #8
 801cf98:	f7f9 fd40 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf9c:	4621      	mov	r1, r4
 801cf9e:	a804      	add	r0, sp, #16
 801cfa0:	f7f9 fd64 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cfa4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801cfa8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cfac:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801cfb0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801cfb4:	fb14 2103 	smlabb	r1, r4, r3, r2
 801cfb8:	eb08 0401 	add.w	r4, r8, r1
 801cfbc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801cfc0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801cfc4:	440a      	add	r2, r1
 801cfc6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cfca:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cfce:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801cfd2:	4413      	add	r3, r2
 801cfd4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cfd8:	4b49      	ldr	r3, [pc, #292]	; (801d100 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801cfda:	6818      	ldr	r0, [r3, #0]
 801cfdc:	6803      	ldr	r3, [r0, #0]
 801cfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfe0:	4798      	blx	r3
 801cfe2:	4b48      	ldr	r3, [pc, #288]	; (801d104 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801cfe4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801cfe8:	881a      	ldrh	r2, [r3, #0]
 801cfea:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801cfee:	2eff      	cmp	r6, #255	; 0xff
 801cff0:	fb02 c101 	mla	r1, r2, r1, ip
 801cff4:	fb02 f207 	mul.w	r2, r2, r7
 801cff8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801cffc:	f105 0104 	add.w	r1, r5, #4
 801d000:	461d      	mov	r5, r3
 801d002:	d05a      	beq.n	801d0ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801d004:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d008:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d00c:	b2b6      	uxth	r6, r6
 801d00e:	fa1f fe8e 	uxth.w	lr, lr
 801d012:	9301      	str	r3, [sp, #4]
 801d014:	4282      	cmp	r2, r0
 801d016:	d96a      	bls.n	801d0ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d018:	eb00 0b0a 	add.w	fp, r0, sl
 801d01c:	4583      	cmp	fp, r0
 801d01e:	d940      	bls.n	801d0a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801d020:	8805      	ldrh	r5, [r0, #0]
 801d022:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d026:	122f      	asrs	r7, r5, #8
 801d028:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d02c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d030:	fb17 f70e 	smulbb	r7, r7, lr
 801d034:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d038:	00ed      	lsls	r5, r5, #3
 801d03a:	b2ed      	uxtb	r5, r5
 801d03c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d040:	fb15 f50e 	smulbb	r5, r5, lr
 801d044:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d048:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d04c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d050:	10df      	asrs	r7, r3, #3
 801d052:	00db      	lsls	r3, r3, #3
 801d054:	fb19 f90e 	smulbb	r9, r9, lr
 801d058:	b2db      	uxtb	r3, r3
 801d05a:	fb03 5306 	mla	r3, r3, r6, r5
 801d05e:	fa1f fc8c 	uxth.w	ip, ip
 801d062:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d066:	fb07 9706 	mla	r7, r7, r6, r9
 801d06a:	f10c 0901 	add.w	r9, ip, #1
 801d06e:	b29b      	uxth	r3, r3
 801d070:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d074:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d078:	f103 0c01 	add.w	ip, r3, #1
 801d07c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d080:	b2bf      	uxth	r7, r7
 801d082:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d086:	ea4c 0c09 	orr.w	ip, ip, r9
 801d08a:	f107 0901 	add.w	r9, r7, #1
 801d08e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d092:	097f      	lsrs	r7, r7, #5
 801d094:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d098:	ea4c 0c07 	orr.w	ip, ip, r7
 801d09c:	f820 cb02 	strh.w	ip, [r0], #2
 801d0a0:	e7bc      	b.n	801d01c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801d0a2:	9b01      	ldr	r3, [sp, #4]
 801d0a4:	881b      	ldrh	r3, [r3, #0]
 801d0a6:	eba3 0308 	sub.w	r3, r3, r8
 801d0aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d0ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d0b2:	eba3 0308 	sub.w	r3, r3, r8
 801d0b6:	441c      	add	r4, r3
 801d0b8:	e7ac      	b.n	801d014 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801d0ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d0be:	4282      	cmp	r2, r0
 801d0c0:	d915      	bls.n	801d0ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d0c2:	eb00 060a 	add.w	r6, r0, sl
 801d0c6:	4286      	cmp	r6, r0
 801d0c8:	d906      	bls.n	801d0d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801d0ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d0ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d0d2:	f820 3b02 	strh.w	r3, [r0], #2
 801d0d6:	e7f6      	b.n	801d0c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801d0d8:	882b      	ldrh	r3, [r5, #0]
 801d0da:	eba3 0308 	sub.w	r3, r3, r8
 801d0de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d0e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d0e6:	eba3 0308 	sub.w	r3, r3, r8
 801d0ea:	441c      	add	r4, r3
 801d0ec:	e7e7      	b.n	801d0be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801d0ee:	4b04      	ldr	r3, [pc, #16]	; (801d100 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d0f0:	6818      	ldr	r0, [r3, #0]
 801d0f2:	6803      	ldr	r3, [r0, #0]
 801d0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0f6:	4798      	blx	r3
 801d0f8:	b007      	add	sp, #28
 801d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0fe:	bf00      	nop
 801d100:	2004e118 	.word	0x2004e118
 801d104:	2004e112 	.word	0x2004e112

0801d108 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d10c:	b091      	sub	sp, #68	; 0x44
 801d10e:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801d112:	4680      	mov	r8, r0
 801d114:	460f      	mov	r7, r1
 801d116:	4614      	mov	r4, r2
 801d118:	2d00      	cmp	r5, #0
 801d11a:	d051      	beq.n	801d1c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d11c:	6810      	ldr	r0, [r2, #0]
 801d11e:	6851      	ldr	r1, [r2, #4]
 801d120:	ae0c      	add	r6, sp, #48	; 0x30
 801d122:	c603      	stmia	r6!, {r0, r1}
 801d124:	6818      	ldr	r0, [r3, #0]
 801d126:	6859      	ldr	r1, [r3, #4]
 801d128:	ae0e      	add	r6, sp, #56	; 0x38
 801d12a:	c603      	stmia	r6!, {r0, r1}
 801d12c:	a80c      	add	r0, sp, #48	; 0x30
 801d12e:	f7f9 fc75 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d132:	4621      	mov	r1, r4
 801d134:	a80e      	add	r0, sp, #56	; 0x38
 801d136:	f7f9 fc99 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d13a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d13e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d142:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d146:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 801d324 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801d14a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d14e:	eb08 0401 	add.w	r4, r8, r1
 801d152:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d156:	f8d9 0000 	ldr.w	r0, [r9]
 801d15a:	440a      	add	r2, r1
 801d15c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d160:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d164:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801d168:	4413      	add	r3, r2
 801d16a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d16e:	6803      	ldr	r3, [r0, #0]
 801d170:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d176:	4798      	blx	r3
 801d178:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d17c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d328 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801d180:	f8d9 0000 	ldr.w	r0, [r9]
 801d184:	d01f      	beq.n	801d1c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d186:	2200      	movs	r2, #0
 801d188:	6801      	ldr	r1, [r0, #0]
 801d18a:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d18e:	220b      	movs	r2, #11
 801d190:	9207      	str	r2, [sp, #28]
 801d192:	f8b8 2000 	ldrh.w	r2, [r8]
 801d196:	b2b6      	uxth	r6, r6
 801d198:	9206      	str	r2, [sp, #24]
 801d19a:	2201      	movs	r2, #1
 801d19c:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801d1a0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d1a4:	9601      	str	r6, [sp, #4]
 801d1a6:	9203      	str	r2, [sp, #12]
 801d1a8:	fa1f f28a 	uxth.w	r2, sl
 801d1ac:	9202      	str	r2, [sp, #8]
 801d1ae:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d1b2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d1b6:	9200      	str	r2, [sp, #0]
 801d1b8:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d1ba:	463a      	mov	r2, r7
 801d1bc:	4621      	mov	r1, r4
 801d1be:	47a8      	blx	r5
 801d1c0:	b011      	add	sp, #68	; 0x44
 801d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1c6:	6803      	ldr	r3, [r0, #0]
 801d1c8:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801d1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1ce:	4798      	blx	r3
 801d1d0:	f8b8 2000 	ldrh.w	r2, [r8]
 801d1d4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d1d8:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d1dc:	2dff      	cmp	r5, #255	; 0xff
 801d1de:	fb02 1303 	mla	r3, r2, r3, r1
 801d1e2:	fb0a fa02 	mul.w	sl, sl, r2
 801d1e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d1ea:	d062      	beq.n	801d2b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801d1ec:	ea6f 0c05 	mvn.w	ip, r5
 801d1f0:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801d1f4:	930a      	str	r3, [sp, #40]	; 0x28
 801d1f6:	b2ad      	uxth	r5, r5
 801d1f8:	fa5f fc8c 	uxtb.w	ip, ip
 801d1fc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801d200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d202:	4298      	cmp	r0, r3
 801d204:	f080 8085 	bcs.w	801d312 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d208:	eb00 0b09 	add.w	fp, r0, r9
 801d20c:	4558      	cmp	r0, fp
 801d20e:	d246      	bcs.n	801d29e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801d210:	2303      	movs	r3, #3
 801d212:	2204      	movs	r2, #4
 801d214:	f814 eb01 	ldrb.w	lr, [r4], #1
 801d218:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801d21c:	eb07 0a0e 	add.w	sl, r7, lr
 801d220:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801d224:	8803      	ldrh	r3, [r0, #0]
 801d226:	fb18 f805 	smulbb	r8, r8, r5
 801d22a:	1219      	asrs	r1, r3, #8
 801d22c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d230:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801d234:	fb01 810c 	mla	r1, r1, ip, r8
 801d238:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d23c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d240:	fb1e fe05 	smulbb	lr, lr, r5
 801d244:	fb18 f805 	smulbb	r8, r8, r5
 801d248:	10da      	asrs	r2, r3, #3
 801d24a:	00db      	lsls	r3, r3, #3
 801d24c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d250:	b2db      	uxtb	r3, r3
 801d252:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d256:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d25a:	fb02 820c 	mla	r2, r2, ip, r8
 801d25e:	fb03 e30c 	mla	r3, r3, ip, lr
 801d262:	b289      	uxth	r1, r1
 801d264:	b292      	uxth	r2, r2
 801d266:	b29b      	uxth	r3, r3
 801d268:	f101 0801 	add.w	r8, r1, #1
 801d26c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d270:	f103 0e01 	add.w	lr, r3, #1
 801d274:	f102 0801 	add.w	r8, r2, #1
 801d278:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801d27c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801d280:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d284:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d288:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d28c:	ea4e 0101 	orr.w	r1, lr, r1
 801d290:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d294:	ea41 0108 	orr.w	r1, r1, r8
 801d298:	f820 1b02 	strh.w	r1, [r0], #2
 801d29c:	e7b6      	b.n	801d20c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801d29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2a0:	881b      	ldrh	r3, [r3, #0]
 801d2a2:	1b9b      	subs	r3, r3, r6
 801d2a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d2a8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d2ac:	1b9b      	subs	r3, r3, r6
 801d2ae:	441c      	add	r4, r3
 801d2b0:	e7a6      	b.n	801d200 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d2b2:	2203      	movs	r2, #3
 801d2b4:	2504      	movs	r5, #4
 801d2b6:	491a      	ldr	r1, [pc, #104]	; (801d320 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801d2b8:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801d2bc:	4550      	cmp	r0, sl
 801d2be:	d228      	bcs.n	801d312 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d2c0:	eb00 0c09 	add.w	ip, r0, r9
 801d2c4:	4560      	cmp	r0, ip
 801d2c6:	4623      	mov	r3, r4
 801d2c8:	d219      	bcs.n	801d2fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801d2ca:	f893 e000 	ldrb.w	lr, [r3]
 801d2ce:	3401      	adds	r4, #1
 801d2d0:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801d2d4:	eb07 0b0e 	add.w	fp, r7, lr
 801d2d8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d2dc:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d2e0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d2e4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801d2e8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801d2ec:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d2f0:	ea43 030b 	orr.w	r3, r3, fp
 801d2f4:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801d2f8:	f820 3b02 	strh.w	r3, [r0], #2
 801d2fc:	e7e2      	b.n	801d2c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801d2fe:	f8b8 3000 	ldrh.w	r3, [r8]
 801d302:	1b9b      	subs	r3, r3, r6
 801d304:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d308:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d30c:	1b9b      	subs	r3, r3, r6
 801d30e:	441c      	add	r4, r3
 801d310:	e7d4      	b.n	801d2bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d312:	4b04      	ldr	r3, [pc, #16]	; (801d324 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801d314:	6818      	ldr	r0, [r3, #0]
 801d316:	6803      	ldr	r3, [r0, #0]
 801d318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d31a:	4798      	blx	r3
 801d31c:	e750      	b.n	801d1c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d31e:	bf00      	nop
 801d320:	fffff800 	.word	0xfffff800
 801d324:	2004e118 	.word	0x2004e118
 801d328:	2004e112 	.word	0x2004e112

0801d32c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d32c:	b430      	push	{r4, r5}
 801d32e:	780d      	ldrb	r5, [r1, #0]
 801d330:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d334:	2d01      	cmp	r5, #1
 801d336:	d00a      	beq.n	801d34e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801d338:	d305      	bcc.n	801d346 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d33a:	2d02      	cmp	r5, #2
 801d33c:	d10b      	bne.n	801d356 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801d33e:	9402      	str	r4, [sp, #8]
 801d340:	bc30      	pop	{r4, r5}
 801d342:	f7ff be15 	b.w	801cf70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801d346:	9402      	str	r4, [sp, #8]
 801d348:	bc30      	pop	{r4, r5}
 801d34a:	f7ff bd2b 	b.w	801cda4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d34e:	9402      	str	r4, [sp, #8]
 801d350:	bc30      	pop	{r4, r5}
 801d352:	f7ff bed9 	b.w	801d108 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d356:	bc30      	pop	{r4, r5}
 801d358:	4770      	bx	lr
	...

0801d35c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801d35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d360:	4617      	mov	r7, r2
 801d362:	4604      	mov	r4, r0
 801d364:	460e      	mov	r6, r1
 801d366:	b087      	sub	sp, #28
 801d368:	6810      	ldr	r0, [r2, #0]
 801d36a:	6851      	ldr	r1, [r2, #4]
 801d36c:	ad02      	add	r5, sp, #8
 801d36e:	c503      	stmia	r5!, {r0, r1}
 801d370:	6818      	ldr	r0, [r3, #0]
 801d372:	6859      	ldr	r1, [r3, #4]
 801d374:	ad04      	add	r5, sp, #16
 801d376:	c503      	stmia	r5!, {r0, r1}
 801d378:	a802      	add	r0, sp, #8
 801d37a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801d37e:	f7f9 fb4d 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d382:	4639      	mov	r1, r7
 801d384:	a804      	add	r0, sp, #16
 801d386:	f7f9 fb71 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d38a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d38e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d392:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d396:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d39a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d39e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d3a2:	440e      	add	r6, r1
 801d3a4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d3a8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d3ac:	440a      	add	r2, r1
 801d3ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d3b2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d3b6:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 801d5a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801d3ba:	4413      	add	r3, r2
 801d3bc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d3c0:	4b77      	ldr	r3, [pc, #476]	; (801d5a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d3c2:	6818      	ldr	r0, [r3, #0]
 801d3c4:	6803      	ldr	r3, [r0, #0]
 801d3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3c8:	4798      	blx	r3
 801d3ca:	f8b9 b000 	ldrh.w	fp, [r9]
 801d3ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d3d2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d3d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d3da:	fb0b 2303 	mla	r3, fp, r3, r2
 801d3de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d3e2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d3e6:	fb05 f50b 	mul.w	r5, r5, fp
 801d3ea:	9300      	str	r3, [sp, #0]
 801d3ec:	d069      	beq.n	801d4c2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801d3ee:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801d3f2:	4558      	cmp	r0, fp
 801d3f4:	f080 80cc 	bcs.w	801d590 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d3f8:	4631      	mov	r1, r6
 801d3fa:	9b00      	ldr	r3, [sp, #0]
 801d3fc:	18c3      	adds	r3, r0, r3
 801d3fe:	9301      	str	r3, [sp, #4]
 801d400:	9b01      	ldr	r3, [sp, #4]
 801d402:	4298      	cmp	r0, r3
 801d404:	d24f      	bcs.n	801d4a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801d406:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d40a:	2a00      	cmp	r2, #0
 801d40c:	d048      	beq.n	801d4a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d40e:	fb0a f202 	mul.w	r2, sl, r2
 801d412:	1c53      	adds	r3, r2, #1
 801d414:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d418:	121b      	asrs	r3, r3, #8
 801d41a:	d041      	beq.n	801d4a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d41c:	b29e      	uxth	r6, r3
 801d41e:	43db      	mvns	r3, r3
 801d420:	8802      	ldrh	r2, [r0, #0]
 801d422:	b2db      	uxtb	r3, r3
 801d424:	1215      	asrs	r5, r2, #8
 801d426:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d42a:	f8b4 c000 	ldrh.w	ip, [r4]
 801d42e:	fb15 f503 	smulbb	r5, r5, r3
 801d432:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801d436:	00d2      	lsls	r2, r2, #3
 801d438:	b2d2      	uxtb	r2, r2
 801d43a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d43e:	fb12 f203 	smulbb	r2, r2, r3
 801d442:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d446:	fb07 5706 	mla	r7, r7, r6, r5
 801d44a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d44e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d452:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d456:	fb1e fe03 	smulbb	lr, lr, r3
 801d45a:	fa5f fc8c 	uxtb.w	ip, ip
 801d45e:	fb0c 2c06 	mla	ip, ip, r6, r2
 801d462:	b2bf      	uxth	r7, r7
 801d464:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d468:	fb05 e506 	mla	r5, r5, r6, lr
 801d46c:	f107 0e01 	add.w	lr, r7, #1
 801d470:	fa1f fc8c 	uxth.w	ip, ip
 801d474:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d478:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801d47c:	f10c 0701 	add.w	r7, ip, #1
 801d480:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d484:	b2ad      	uxth	r5, r5
 801d486:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d48a:	ea47 070e 	orr.w	r7, r7, lr
 801d48e:	f105 0e01 	add.w	lr, r5, #1
 801d492:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801d496:	096d      	lsrs	r5, r5, #5
 801d498:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d49c:	432f      	orrs	r7, r5
 801d49e:	8007      	strh	r7, [r0, #0]
 801d4a0:	3002      	adds	r0, #2
 801d4a2:	3402      	adds	r4, #2
 801d4a4:	e7ac      	b.n	801d400 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801d4a6:	f8b9 3000 	ldrh.w	r3, [r9]
 801d4aa:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d4ae:	eba3 0308 	sub.w	r3, r3, r8
 801d4b2:	eba6 0608 	sub.w	r6, r6, r8
 801d4b6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d4ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d4be:	440e      	add	r6, r1
 801d4c0:	e797      	b.n	801d3f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801d4c2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801d4c6:	42a8      	cmp	r0, r5
 801d4c8:	d262      	bcs.n	801d590 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d4ca:	4631      	mov	r1, r6
 801d4cc:	9b00      	ldr	r3, [sp, #0]
 801d4ce:	eb00 0b03 	add.w	fp, r0, r3
 801d4d2:	4558      	cmp	r0, fp
 801d4d4:	d24e      	bcs.n	801d574 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801d4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d4da:	b12b      	cbz	r3, 801d4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d4dc:	2bff      	cmp	r3, #255	; 0xff
 801d4de:	f8b4 e000 	ldrh.w	lr, [r4]
 801d4e2:	d104      	bne.n	801d4ee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801d4e4:	f8a0 e000 	strh.w	lr, [r0]
 801d4e8:	3002      	adds	r0, #2
 801d4ea:	3402      	adds	r4, #2
 801d4ec:	e7f1      	b.n	801d4d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801d4ee:	b29f      	uxth	r7, r3
 801d4f0:	43db      	mvns	r3, r3
 801d4f2:	8802      	ldrh	r2, [r0, #0]
 801d4f4:	b2db      	uxtb	r3, r3
 801d4f6:	1216      	asrs	r6, r2, #8
 801d4f8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d4fc:	fb16 f603 	smulbb	r6, r6, r3
 801d500:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801d504:	00d2      	lsls	r2, r2, #3
 801d506:	b2d2      	uxtb	r2, r2
 801d508:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d50c:	fb1a fa03 	smulbb	sl, sl, r3
 801d510:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d514:	fb12 f303 	smulbb	r3, r2, r3
 801d518:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d51c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d520:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d524:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d528:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d52c:	fa5f fe8e 	uxtb.w	lr, lr
 801d530:	fb06 a607 	mla	r6, r6, r7, sl
 801d534:	fb0e 3307 	mla	r3, lr, r7, r3
 801d538:	fa1f fc8c 	uxth.w	ip, ip
 801d53c:	f10c 0201 	add.w	r2, ip, #1
 801d540:	b2b6      	uxth	r6, r6
 801d542:	b29b      	uxth	r3, r3
 801d544:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d548:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801d54c:	f106 0a01 	add.w	sl, r6, #1
 801d550:	f103 0c01 	add.w	ip, r3, #1
 801d554:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d558:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801d55c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d560:	0976      	lsrs	r6, r6, #5
 801d562:	ea4c 0c02 	orr.w	ip, ip, r2
 801d566:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d56a:	ea4c 0c06 	orr.w	ip, ip, r6
 801d56e:	f8a0 c000 	strh.w	ip, [r0]
 801d572:	e7b9      	b.n	801d4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d574:	f8b9 3000 	ldrh.w	r3, [r9]
 801d578:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d57c:	eba3 0308 	sub.w	r3, r3, r8
 801d580:	eba6 0608 	sub.w	r6, r6, r8
 801d584:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d588:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d58c:	440e      	add	r6, r1
 801d58e:	e79a      	b.n	801d4c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801d590:	4b03      	ldr	r3, [pc, #12]	; (801d5a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d592:	6818      	ldr	r0, [r3, #0]
 801d594:	6803      	ldr	r3, [r0, #0]
 801d596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d598:	4798      	blx	r3
 801d59a:	b007      	add	sp, #28
 801d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5a0:	2004e118 	.word	0x2004e118
 801d5a4:	2004e112 	.word	0x2004e112

0801d5a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ac:	b089      	sub	sp, #36	; 0x24
 801d5ae:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801d5b2:	4682      	mov	sl, r0
 801d5b4:	460f      	mov	r7, r1
 801d5b6:	4691      	mov	r9, r2
 801d5b8:	4698      	mov	r8, r3
 801d5ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d5bc:	2e00      	cmp	r6, #0
 801d5be:	d036      	beq.n	801d62e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d5c0:	4608      	mov	r0, r1
 801d5c2:	f7fc f86d 	bl	80196a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d5c6:	4605      	mov	r5, r0
 801d5c8:	4638      	mov	r0, r7
 801d5ca:	f7fc f89d 	bl	8019708 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d5ce:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d5d2:	4638      	mov	r0, r7
 801d5d4:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d5d8:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d5dc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d5e0:	f7fc f94a 	bl	8019878 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d5e4:	4605      	mov	r5, r0
 801d5e6:	4638      	mov	r0, r7
 801d5e8:	f7fc f976 	bl	80198d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d5ec:	4681      	mov	r9, r0
 801d5ee:	4638      	mov	r0, r7
 801d5f0:	f7fc f9c6 	bl	8019980 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5f4:	280b      	cmp	r0, #11
 801d5f6:	d81a      	bhi.n	801d62e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d5f8:	e8df f000 	tbb	[pc, r0]
 801d5fc:	1906aebd 	.word	0x1906aebd
 801d600:	19191919 	.word	0x19191919
 801d604:	b5191919 	.word	0xb5191919
 801d608:	4bb0      	ldr	r3, [pc, #704]	; (801d8cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801d60a:	6818      	ldr	r0, [r3, #0]
 801d60c:	6803      	ldr	r3, [r0, #0]
 801d60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d610:	4798      	blx	r3
 801d612:	2eff      	cmp	r6, #255	; 0xff
 801d614:	d121      	bne.n	801d65a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d616:	0683      	lsls	r3, r0, #26
 801d618:	d41f      	bmi.n	801d65a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d61a:	4638      	mov	r0, r7
 801d61c:	f7fc f8f4 	bl	8019808 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d620:	b940      	cbnz	r0, 801d634 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801d622:	4623      	mov	r3, r4
 801d624:	aa02      	add	r2, sp, #8
 801d626:	4629      	mov	r1, r5
 801d628:	4650      	mov	r0, sl
 801d62a:	f7ff fa2f 	bl	801ca8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d62e:	b009      	add	sp, #36	; 0x24
 801d630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d634:	f10d 0818 	add.w	r8, sp, #24
 801d638:	4639      	mov	r1, r7
 801d63a:	4640      	mov	r0, r8
 801d63c:	af04      	add	r7, sp, #16
 801d63e:	f7fc f897 	bl	8019770 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d642:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d646:	e887 0003 	stmia.w	r7, {r0, r1}
 801d64a:	4638      	mov	r0, r7
 801d64c:	4621      	mov	r1, r4
 801d64e:	f7f5 fc99 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 801d652:	4638      	mov	r0, r7
 801d654:	f7f5 fcd9 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d658:	b130      	cbz	r0, 801d668 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801d65a:	4633      	mov	r3, r6
 801d65c:	4622      	mov	r2, r4
 801d65e:	a902      	add	r1, sp, #8
 801d660:	4628      	mov	r0, r5
 801d662:	f7ff f92d 	bl	801c8c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d666:	e7e2      	b.n	801d62e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d668:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d66c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d670:	4293      	cmp	r3, r2
 801d672:	dd12      	ble.n	801d69a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801d674:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d678:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d67c:	1a9b      	subs	r3, r3, r2
 801d67e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d682:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d686:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d68a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d68e:	4642      	mov	r2, r8
 801d690:	4633      	mov	r3, r6
 801d692:	a902      	add	r1, sp, #8
 801d694:	4628      	mov	r0, r5
 801d696:	f7ff f913 	bl	801c8c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d69a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d69e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d6a2:	4293      	cmp	r3, r2
 801d6a4:	dd12      	ble.n	801d6cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801d6a6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d6aa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d6ae:	1a9b      	subs	r3, r3, r2
 801d6b0:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d6b4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d6b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d6bc:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d6c0:	23ff      	movs	r3, #255	; 0xff
 801d6c2:	4642      	mov	r2, r8
 801d6c4:	a902      	add	r1, sp, #8
 801d6c6:	4628      	mov	r0, r5
 801d6c8:	f7ff f8fa 	bl	801c8c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d6cc:	463b      	mov	r3, r7
 801d6ce:	aa02      	add	r2, sp, #8
 801d6d0:	4629      	mov	r1, r5
 801d6d2:	4650      	mov	r0, sl
 801d6d4:	f7ff f9da 	bl	801ca8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d6d8:	88a2      	ldrh	r2, [r4, #4]
 801d6da:	8823      	ldrh	r3, [r4, #0]
 801d6dc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d6e0:	4413      	add	r3, r2
 801d6e2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d6e6:	b29b      	uxth	r3, r3
 801d6e8:	440a      	add	r2, r1
 801d6ea:	b292      	uxth	r2, r2
 801d6ec:	b211      	sxth	r1, r2
 801d6ee:	b218      	sxth	r0, r3
 801d6f0:	4288      	cmp	r0, r1
 801d6f2:	dd12      	ble.n	801d71a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801d6f4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d6f8:	1a9b      	subs	r3, r3, r2
 801d6fa:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801d6fe:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d702:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d706:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d70a:	23ff      	movs	r3, #255	; 0xff
 801d70c:	4642      	mov	r2, r8
 801d70e:	a902      	add	r1, sp, #8
 801d710:	4628      	mov	r0, r5
 801d712:	f8ad 601a 	strh.w	r6, [sp, #26]
 801d716:	f7ff f8d3 	bl	801c8c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d71a:	88e2      	ldrh	r2, [r4, #6]
 801d71c:	8863      	ldrh	r3, [r4, #2]
 801d71e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d722:	4413      	add	r3, r2
 801d724:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d728:	b29b      	uxth	r3, r3
 801d72a:	440a      	add	r2, r1
 801d72c:	b292      	uxth	r2, r2
 801d72e:	b211      	sxth	r1, r2
 801d730:	b218      	sxth	r0, r3
 801d732:	4288      	cmp	r0, r1
 801d734:	f77f af7b 	ble.w	801d62e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d738:	f9b4 6000 	ldrsh.w	r6, [r4]
 801d73c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d740:	1a9b      	subs	r3, r3, r2
 801d742:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d746:	f8ad 6018 	strh.w	r6, [sp, #24]
 801d74a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d74e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d752:	23ff      	movs	r3, #255	; 0xff
 801d754:	4642      	mov	r2, r8
 801d756:	e782      	b.n	801d65e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801d758:	4633      	mov	r3, r6
 801d75a:	4622      	mov	r2, r4
 801d75c:	a902      	add	r1, sp, #8
 801d75e:	4628      	mov	r0, r5
 801d760:	f7ff fa04 	bl	801cb6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801d764:	e763      	b.n	801d62e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d766:	9600      	str	r6, [sp, #0]
 801d768:	4623      	mov	r3, r4
 801d76a:	aa02      	add	r2, sp, #8
 801d76c:	4649      	mov	r1, r9
 801d76e:	4628      	mov	r0, r5
 801d770:	f7ff fddc 	bl	801d32c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d774:	e75b      	b.n	801d62e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d776:	4638      	mov	r0, r7
 801d778:	f7fc f846 	bl	8019808 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d77c:	b950      	cbnz	r0, 801d794 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801d77e:	e9cd 6000 	strd	r6, r0, [sp]
 801d782:	f8da 3000 	ldr.w	r3, [sl]
 801d786:	aa02      	add	r2, sp, #8
 801d788:	68de      	ldr	r6, [r3, #12]
 801d78a:	4629      	mov	r1, r5
 801d78c:	4623      	mov	r3, r4
 801d78e:	4650      	mov	r0, sl
 801d790:	47b0      	blx	r6
 801d792:	e74c      	b.n	801d62e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d794:	f10d 0818 	add.w	r8, sp, #24
 801d798:	4639      	mov	r1, r7
 801d79a:	4640      	mov	r0, r8
 801d79c:	af04      	add	r7, sp, #16
 801d79e:	f7fb ffe7 	bl	8019770 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d7a2:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d7a6:	e887 0003 	stmia.w	r7, {r0, r1}
 801d7aa:	4638      	mov	r0, r7
 801d7ac:	4621      	mov	r1, r4
 801d7ae:	f7f5 fbe9 	bl	8012f84 <_ZN8touchgfx4RectaNERKS0_>
 801d7b2:	4638      	mov	r0, r7
 801d7b4:	f7f5 fc29 	bl	801300a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d7b8:	b138      	cbz	r0, 801d7ca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801d7ba:	4623      	mov	r3, r4
 801d7bc:	9600      	str	r6, [sp, #0]
 801d7be:	aa02      	add	r2, sp, #8
 801d7c0:	4649      	mov	r1, r9
 801d7c2:	4628      	mov	r0, r5
 801d7c4:	f7ff fdca 	bl	801d35c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d7c8:	e731      	b.n	801d62e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d7ca:	e9cd 6000 	strd	r6, r0, [sp]
 801d7ce:	f8da 3000 	ldr.w	r3, [sl]
 801d7d2:	aa02      	add	r2, sp, #8
 801d7d4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801d7d8:	4629      	mov	r1, r5
 801d7da:	463b      	mov	r3, r7
 801d7dc:	4650      	mov	r0, sl
 801d7de:	47d8      	blx	fp
 801d7e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d7e4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d7e8:	4293      	cmp	r3, r2
 801d7ea:	dd13      	ble.n	801d814 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801d7ec:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d7f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d7f4:	1a9b      	subs	r3, r3, r2
 801d7f6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d7fa:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d7fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d802:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d806:	9600      	str	r6, [sp, #0]
 801d808:	4643      	mov	r3, r8
 801d80a:	aa02      	add	r2, sp, #8
 801d80c:	4649      	mov	r1, r9
 801d80e:	4628      	mov	r0, r5
 801d810:	f7ff fda4 	bl	801d35c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d814:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d818:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d81c:	4293      	cmp	r3, r2
 801d81e:	dd13      	ble.n	801d848 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801d820:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d824:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d828:	1a9b      	subs	r3, r3, r2
 801d82a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d82e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d832:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d836:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d83a:	9600      	str	r6, [sp, #0]
 801d83c:	4643      	mov	r3, r8
 801d83e:	aa02      	add	r2, sp, #8
 801d840:	4649      	mov	r1, r9
 801d842:	4628      	mov	r0, r5
 801d844:	f7ff fd8a 	bl	801d35c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d848:	88a2      	ldrh	r2, [r4, #4]
 801d84a:	8823      	ldrh	r3, [r4, #0]
 801d84c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d850:	4413      	add	r3, r2
 801d852:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d856:	b29b      	uxth	r3, r3
 801d858:	440a      	add	r2, r1
 801d85a:	b292      	uxth	r2, r2
 801d85c:	b211      	sxth	r1, r2
 801d85e:	b218      	sxth	r0, r3
 801d860:	4288      	cmp	r0, r1
 801d862:	dd13      	ble.n	801d88c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801d864:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d868:	1a9b      	subs	r3, r3, r2
 801d86a:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801d86e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d872:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d876:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d87a:	9600      	str	r6, [sp, #0]
 801d87c:	4643      	mov	r3, r8
 801d87e:	aa02      	add	r2, sp, #8
 801d880:	4649      	mov	r1, r9
 801d882:	4628      	mov	r0, r5
 801d884:	f8ad 701a 	strh.w	r7, [sp, #26]
 801d888:	f7ff fd68 	bl	801d35c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d88c:	88e2      	ldrh	r2, [r4, #6]
 801d88e:	8863      	ldrh	r3, [r4, #2]
 801d890:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d894:	4413      	add	r3, r2
 801d896:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d89a:	b29b      	uxth	r3, r3
 801d89c:	440a      	add	r2, r1
 801d89e:	b292      	uxth	r2, r2
 801d8a0:	b211      	sxth	r1, r2
 801d8a2:	b218      	sxth	r0, r3
 801d8a4:	4288      	cmp	r0, r1
 801d8a6:	f77f aec2 	ble.w	801d62e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d8aa:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d8ae:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d8b2:	1a9b      	subs	r3, r3, r2
 801d8b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d8b8:	f8ad 7018 	strh.w	r7, [sp, #24]
 801d8bc:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d8c0:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d8c4:	9600      	str	r6, [sp, #0]
 801d8c6:	4643      	mov	r3, r8
 801d8c8:	e779      	b.n	801d7be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801d8ca:	bf00      	nop
 801d8cc:	2004e118 	.word	0x2004e118

0801d8d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801d8d0:	b180      	cbz	r0, 801d8f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801d8d2:	2903      	cmp	r1, #3
 801d8d4:	d81c      	bhi.n	801d910 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d8d6:	e8df f001 	tbb	[pc, r1]
 801d8da:	1d02      	.short	0x1d02
 801d8dc:	1f08      	.short	0x1f08
 801d8de:	4b10      	ldr	r3, [pc, #64]	; (801d920 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d8e0:	8818      	ldrh	r0, [r3, #0]
 801d8e2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d8e6:	4240      	negs	r0, r0
 801d8e8:	4770      	bx	lr
 801d8ea:	4b0d      	ldr	r3, [pc, #52]	; (801d920 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d8ec:	8818      	ldrh	r0, [r3, #0]
 801d8ee:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d8f2:	4770      	bx	lr
 801d8f4:	2903      	cmp	r1, #3
 801d8f6:	d80b      	bhi.n	801d910 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d8f8:	a301      	add	r3, pc, #4	; (adr r3, 801d900 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801d8fa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d8fe:	bf00      	nop
 801d900:	0801d915 	.word	0x0801d915
 801d904:	0801d8eb 	.word	0x0801d8eb
 801d908:	0801d919 	.word	0x0801d919
 801d90c:	0801d8df 	.word	0x0801d8df
 801d910:	2000      	movs	r0, #0
 801d912:	4770      	bx	lr
 801d914:	2001      	movs	r0, #1
 801d916:	4770      	bx	lr
 801d918:	f04f 30ff 	mov.w	r0, #4294967295
 801d91c:	4770      	bx	lr
 801d91e:	bf00      	nop
 801d920:	2004e112 	.word	0x2004e112

0801d924 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801d924:	b180      	cbz	r0, 801d948 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801d926:	2903      	cmp	r1, #3
 801d928:	d81c      	bhi.n	801d964 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801d92a:	e8df f001 	tbb	[pc, r1]
 801d92e:	021d      	.short	0x021d
 801d930:	071f      	.short	0x071f
 801d932:	4b10      	ldr	r3, [pc, #64]	; (801d974 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d934:	8818      	ldrh	r0, [r3, #0]
 801d936:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d93a:	4770      	bx	lr
 801d93c:	4b0d      	ldr	r3, [pc, #52]	; (801d974 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d93e:	8818      	ldrh	r0, [r3, #0]
 801d940:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d944:	4240      	negs	r0, r0
 801d946:	4770      	bx	lr
 801d948:	2903      	cmp	r1, #3
 801d94a:	d80b      	bhi.n	801d964 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801d94c:	a301      	add	r3, pc, #4	; (adr r3, 801d954 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801d94e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d952:	bf00      	nop
 801d954:	0801d933 	.word	0x0801d933
 801d958:	0801d96d 	.word	0x0801d96d
 801d95c:	0801d93d 	.word	0x0801d93d
 801d960:	0801d969 	.word	0x0801d969
 801d964:	2000      	movs	r0, #0
 801d966:	4770      	bx	lr
 801d968:	2001      	movs	r0, #1
 801d96a:	4770      	bx	lr
 801d96c:	f04f 30ff 	mov.w	r0, #4294967295
 801d970:	4770      	bx	lr
 801d972:	bf00      	nop
 801d974:	2004e112 	.word	0x2004e112

0801d978 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d97c:	b099      	sub	sp, #100	; 0x64
 801d97e:	910b      	str	r1, [sp, #44]	; 0x2c
 801d980:	a914      	add	r1, sp, #80	; 0x50
 801d982:	e881 000c 	stmia.w	r1, {r2, r3}
 801d986:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801d98a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801d98e:	f891 900d 	ldrb.w	r9, [r1, #13]
 801d992:	9309      	str	r3, [sp, #36]	; 0x24
 801d994:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801d998:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801d99c:	9310      	str	r3, [sp, #64]	; 0x40
 801d99e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801d9a2:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801d9a6:	930c      	str	r3, [sp, #48]	; 0x30
 801d9a8:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801d9ac:	798f      	ldrb	r7, [r1, #6]
 801d9ae:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801d9b2:	431f      	orrs	r7, r3
 801d9b4:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801d9b8:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801d9bc:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801d9c0:	f000 8194 	beq.w	801dcec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801d9c4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801d9c8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801d9cc:	f891 9007 	ldrb.w	r9, [r1, #7]
 801d9d0:	ea59 0903 	orrs.w	r9, r9, r3
 801d9d4:	f000 818a 	beq.w	801dcec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801d9d8:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d9dc:	b29b      	uxth	r3, r3
 801d9de:	2d00      	cmp	r5, #0
 801d9e0:	f000 812f 	beq.w	801dc42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801d9e4:	1aed      	subs	r5, r5, r3
 801d9e6:	b2ad      	uxth	r5, r5
 801d9e8:	042b      	lsls	r3, r5, #16
 801d9ea:	d502      	bpl.n	801d9f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801d9ec:	1b64      	subs	r4, r4, r5
 801d9ee:	2500      	movs	r5, #0
 801d9f0:	b224      	sxth	r4, r4
 801d9f2:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d9f6:	a814      	add	r0, sp, #80	; 0x50
 801d9f8:	428c      	cmp	r4, r1
 801d9fa:	b28b      	uxth	r3, r1
 801d9fc:	bfbf      	itttt	lt
 801d9fe:	18ed      	addlt	r5, r5, r3
 801da00:	1b2c      	sublt	r4, r5, r4
 801da02:	b2a5      	uxthlt	r5, r4
 801da04:	460c      	movlt	r4, r1
 801da06:	8891      	ldrh	r1, [r2, #4]
 801da08:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801da0c:	440b      	add	r3, r1
 801da0e:	b21b      	sxth	r3, r3
 801da10:	930f      	str	r3, [sp, #60]	; 0x3c
 801da12:	88d3      	ldrh	r3, [r2, #6]
 801da14:	8852      	ldrh	r2, [r2, #2]
 801da16:	4621      	mov	r1, r4
 801da18:	4413      	add	r3, r2
 801da1a:	b21b      	sxth	r3, r3
 801da1c:	930d      	str	r3, [sp, #52]	; 0x34
 801da1e:	4bbd      	ldr	r3, [pc, #756]	; (801dd14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801da20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da22:	f893 b000 	ldrb.w	fp, [r3]
 801da26:	f10b 3cff 	add.w	ip, fp, #4294967295
 801da2a:	f1dc 0300 	rsbs	r3, ip, #0
 801da2e:	eb43 030c 	adc.w	r3, r3, ip
 801da32:	930e      	str	r3, [sp, #56]	; 0x38
 801da34:	4653      	mov	r3, sl
 801da36:	f7f8 fe6b 	bl	8016710 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801da3a:	4621      	mov	r1, r4
 801da3c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801da40:	4653      	mov	r3, sl
 801da42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da44:	a814      	add	r0, sp, #80	; 0x50
 801da46:	f7f8 fe80 	bl	801674a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801da4a:	a918      	add	r1, sp, #96	; 0x60
 801da4c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801da50:	a817      	add	r0, sp, #92	; 0x5c
 801da52:	f7f8 ffa1 	bl	8016998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801da56:	f1ba 0f00 	cmp.w	sl, #0
 801da5a:	f040 80f5 	bne.w	801dc48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801da5e:	f1bb 0f01 	cmp.w	fp, #1
 801da62:	f040 80f9 	bne.w	801dc58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801da66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da68:	2b00      	cmp	r3, #0
 801da6a:	f040 8144 	bne.w	801dcf6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 801da6e:	b2ba      	uxth	r2, r7
 801da70:	b905      	cbnz	r5, 801da74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801da72:	b16e      	cbz	r6, 801da90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801da74:	4631      	mov	r1, r6
 801da76:	fb06 5302 	mla	r3, r6, r2, r5
 801da7a:	fb08 f303 	mul.w	r3, r8, r3
 801da7e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801da80:	f003 0607 	and.w	r6, r3, #7
 801da84:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801da88:	9328      	str	r3, [sp, #160]	; 0xa0
 801da8a:	eba9 0301 	sub.w	r3, r9, r1
 801da8e:	930a      	str	r3, [sp, #40]	; 0x28
 801da90:	4651      	mov	r1, sl
 801da92:	980e      	ldr	r0, [sp, #56]	; 0x38
 801da94:	f7ff ff1c 	bl	801d8d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801da98:	4681      	mov	r9, r0
 801da9a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801da9c:	f7ff ff42 	bl	801d924 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801daa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801daa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801daa4:	4683      	mov	fp, r0
 801daa6:	eba3 0a01 	sub.w	sl, r3, r1
 801daaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801daac:	459a      	cmp	sl, r3
 801daae:	bfa8      	it	ge
 801dab0:	469a      	movge	sl, r3
 801dab2:	f1ba 0f00 	cmp.w	sl, #0
 801dab6:	f340 8119 	ble.w	801dcec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801daba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dabc:	1b64      	subs	r4, r4, r5
 801dabe:	1b1c      	subs	r4, r3, r4
 801dac0:	42bc      	cmp	r4, r7
 801dac2:	bfd4      	ite	le
 801dac4:	ebc5 0504 	rsble	r5, r5, r4
 801dac8:	ebc5 0507 	rsbgt	r5, r5, r7
 801dacc:	2d00      	cmp	r5, #0
 801dace:	f340 810d 	ble.w	801dcec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801dad2:	1b52      	subs	r2, r2, r5
 801dad4:	fb08 f302 	mul.w	r3, r8, r2
 801dad8:	930f      	str	r3, [sp, #60]	; 0x3c
 801dada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dadc:	2b00      	cmp	r3, #0
 801dade:	f040 8115 	bne.w	801dd0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 801dae2:	4b8d      	ldr	r3, [pc, #564]	; (801dd18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801dae4:	6818      	ldr	r0, [r3, #0]
 801dae6:	6803      	ldr	r3, [r0, #0]
 801dae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801daea:	4798      	blx	r3
 801daec:	2301      	movs	r3, #1
 801daee:	fa03 f308 	lsl.w	r3, r3, r8
 801daf2:	4a8a      	ldr	r2, [pc, #552]	; (801dd1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801daf4:	3b01      	subs	r3, #1
 801daf6:	b2db      	uxtb	r3, r3
 801daf8:	8811      	ldrh	r1, [r2, #0]
 801dafa:	930e      	str	r3, [sp, #56]	; 0x38
 801dafc:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801db00:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801db04:	fb01 2303 	mla	r3, r1, r3, r2
 801db08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801db0c:	930a      	str	r3, [sp, #40]	; 0x28
 801db0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801db10:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801db14:	9313      	str	r3, [sp, #76]	; 0x4c
 801db16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801db18:	0a19      	lsrs	r1, r3, #8
 801db1a:	b2cb      	uxtb	r3, r1
 801db1c:	9312      	str	r3, [sp, #72]	; 0x48
 801db1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801db20:	b2db      	uxtb	r3, r3
 801db22:	9311      	str	r3, [sp, #68]	; 0x44
 801db24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801db26:	095a      	lsrs	r2, r3, #5
 801db28:	4b7d      	ldr	r3, [pc, #500]	; (801dd20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801db2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801db2e:	400b      	ands	r3, r1
 801db30:	4313      	orrs	r3, r2
 801db32:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801db34:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801db38:	4313      	orrs	r3, r2
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	9310      	str	r3, [sp, #64]	; 0x40
 801db3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db40:	781a      	ldrb	r2, [r3, #0]
 801db42:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801db46:	fb05 b919 	mls	r9, r5, r9, fp
 801db4a:	fb03 fb05 	mul.w	fp, r3, r5
 801db4e:	4132      	asrs	r2, r6
 801db50:	b2d2      	uxtb	r2, r2
 801db52:	930d      	str	r3, [sp, #52]	; 0x34
 801db54:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801db58:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801db5c:	f0c0 80f3 	bcc.w	801dd46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801db60:	46ae      	mov	lr, r5
 801db62:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801db66:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801db6a:	f0c0 80db 	bcc.w	801dd24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801db6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db70:	4013      	ands	r3, r2
 801db72:	d055      	beq.n	801dc20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801db74:	20ff      	movs	r0, #255	; 0xff
 801db76:	990e      	ldr	r1, [sp, #56]	; 0x38
 801db78:	fb90 f1f1 	sdiv	r1, r0, r1
 801db7c:	434b      	muls	r3, r1
 801db7e:	2bfe      	cmp	r3, #254	; 0xfe
 801db80:	dd03      	ble.n	801db8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801db82:	990c      	ldr	r1, [sp, #48]	; 0x30
 801db84:	4281      	cmp	r1, r0
 801db86:	f000 80c3 	beq.w	801dd10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801db8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801db8c:	f8bc 4000 	ldrh.w	r4, [ip]
 801db90:	fb11 f303 	smulbb	r3, r1, r3
 801db94:	b29b      	uxth	r3, r3
 801db96:	1c59      	adds	r1, r3, #1
 801db98:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801db9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dba0:	b29f      	uxth	r7, r3
 801dba2:	43db      	mvns	r3, r3
 801dba4:	b2db      	uxtb	r3, r3
 801dba6:	9309      	str	r3, [sp, #36]	; 0x24
 801dba8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dbaa:	1220      	asrs	r0, r4, #8
 801dbac:	fb13 f907 	smulbb	r9, r3, r7
 801dbb0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801dbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbb6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801dbba:	fb00 9003 	mla	r0, r0, r3, r9
 801dbbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dbc0:	10e1      	asrs	r1, r4, #3
 801dbc2:	fb13 f907 	smulbb	r9, r3, r7
 801dbc6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801dbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbcc:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801dbd0:	fb01 9103 	mla	r1, r1, r3, r9
 801dbd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dbd6:	00e4      	lsls	r4, r4, #3
 801dbd8:	fb13 f707 	smulbb	r7, r3, r7
 801dbdc:	b2e4      	uxtb	r4, r4
 801dbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbe0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801dbe4:	fb04 7403 	mla	r4, r4, r3, r7
 801dbe8:	b280      	uxth	r0, r0
 801dbea:	b2a4      	uxth	r4, r4
 801dbec:	1c43      	adds	r3, r0, #1
 801dbee:	f104 0901 	add.w	r9, r4, #1
 801dbf2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dbf6:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801dbfa:	b289      	uxth	r1, r1
 801dbfc:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801dc00:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801dc04:	ea49 0000 	orr.w	r0, r9, r0
 801dc08:	f101 0901 	add.w	r9, r1, #1
 801dc0c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801dc10:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801dc14:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801dc18:	ea40 0009 	orr.w	r0, r0, r9
 801dc1c:	f8ac 0000 	strh.w	r0, [ip]
 801dc20:	4446      	add	r6, r8
 801dc22:	b2b6      	uxth	r6, r6
 801dc24:	2e07      	cmp	r6, #7
 801dc26:	bf89      	itett	hi
 801dc28:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801dc2a:	fa42 f208 	asrls.w	r2, r2, r8
 801dc2e:	785a      	ldrbhi	r2, [r3, #1]
 801dc30:	3301      	addhi	r3, #1
 801dc32:	bf88      	it	hi
 801dc34:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801dc36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc38:	bf94      	ite	ls
 801dc3a:	b2d2      	uxtbls	r2, r2
 801dc3c:	2600      	movhi	r6, #0
 801dc3e:	449c      	add	ip, r3
 801dc40:	e791      	b.n	801db66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801dc42:	441c      	add	r4, r3
 801dc44:	b224      	sxth	r4, r4
 801dc46:	e6d4      	b.n	801d9f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801dc48:	f1ba 0f01 	cmp.w	sl, #1
 801dc4c:	f47f af0b 	bne.w	801da66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc50:	f1bb 0f01 	cmp.w	fp, #1
 801dc54:	f47f af07 	bne.w	801da66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc58:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801dd18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801dc5c:	f8db 0000 	ldr.w	r0, [fp]
 801dc60:	6803      	ldr	r3, [r0, #0]
 801dc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc64:	4798      	blx	r3
 801dc66:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801dc6a:	465a      	mov	r2, fp
 801dc6c:	d006      	beq.n	801dc7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801dc6e:	f1b8 0f04 	cmp.w	r8, #4
 801dc72:	d13e      	bne.n	801dcf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801dc74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc76:	3300      	adds	r3, #0
 801dc78:	bf18      	it	ne
 801dc7a:	2301      	movne	r3, #1
 801dc7c:	0580      	lsls	r0, r0, #22
 801dc7e:	d56b      	bpl.n	801dd58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801dc80:	f1b8 0f08 	cmp.w	r8, #8
 801dc84:	d168      	bne.n	801dd58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	bf0c      	ite	eq
 801dc8a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801dc8e:	f44f 7180 	movne.w	r1, #256	; 0x100
 801dc92:	2d00      	cmp	r5, #0
 801dc94:	f47f aee7 	bne.w	801da66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc98:	2e00      	cmp	r6, #0
 801dc9a:	f47f aee4 	bne.w	801da66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801dca0:	19e3      	adds	r3, r4, r7
 801dca2:	4283      	cmp	r3, r0
 801dca4:	f73f aedf 	bgt.w	801da66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dcac:	444b      	add	r3, r9
 801dcae:	4283      	cmp	r3, r0
 801dcb0:	f73f aed9 	bgt.w	801da66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dcb4:	2500      	movs	r5, #0
 801dcb6:	6810      	ldr	r0, [r2, #0]
 801dcb8:	b2bf      	uxth	r7, r7
 801dcba:	6804      	ldr	r4, [r0, #0]
 801dcbc:	f1b8 0f08 	cmp.w	r8, #8
 801dcc0:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801dcc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dcc6:	bf1c      	itt	ne
 801dcc8:	3701      	addne	r7, #1
 801dcca:	f027 0701 	bicne.w	r7, r7, #1
 801dcce:	9104      	str	r1, [sp, #16]
 801dcd0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801dcd2:	bf18      	it	ne
 801dcd4:	b2bf      	uxthne	r7, r7
 801dcd6:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801dcda:	e9cd 7900 	strd	r7, r9, [sp]
 801dcde:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801dce2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801dce6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801dce8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801dcea:	47a0      	blx	r4
 801dcec:	b019      	add	sp, #100	; 0x64
 801dcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcf2:	2300      	movs	r3, #0
 801dcf4:	e7c2      	b.n	801dc7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801dcf6:	2208      	movs	r2, #8
 801dcf8:	fb92 f3f8 	sdiv	r3, r2, r8
 801dcfc:	1e5a      	subs	r2, r3, #1
 801dcfe:	443a      	add	r2, r7
 801dd00:	fb92 f2f3 	sdiv	r2, r2, r3
 801dd04:	fb12 f203 	smulbb	r2, r2, r3
 801dd08:	b292      	uxth	r2, r2
 801dd0a:	e6b1      	b.n	801da70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801dd0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801dd0e:	e6ed      	b.n	801daec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801dd10:	9810      	ldr	r0, [sp, #64]	; 0x40
 801dd12:	e783      	b.n	801dc1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801dd14:	2004e110 	.word	0x2004e110
 801dd18:	2004e118 	.word	0x2004e118
 801dd1c:	2004e112 	.word	0x2004e112
 801dd20:	00fff800 	.word	0x00fff800
 801dd24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd26:	b153      	cbz	r3, 801dd3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801dd28:	441e      	add	r6, r3
 801dd2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dd2c:	b2b6      	uxth	r6, r6
 801dd2e:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801dd32:	781a      	ldrb	r2, [r3, #0]
 801dd34:	f006 0607 	and.w	r6, r6, #7
 801dd38:	4132      	asrs	r2, r6
 801dd3a:	9328      	str	r3, [sp, #160]	; 0xa0
 801dd3c:	b2d2      	uxtb	r2, r2
 801dd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd40:	445b      	add	r3, fp
 801dd42:	930a      	str	r3, [sp, #40]	; 0x28
 801dd44:	e708      	b.n	801db58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801dd46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d1cf      	bne.n	801dcec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801dd4c:	4b05      	ldr	r3, [pc, #20]	; (801dd64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 801dd4e:	6818      	ldr	r0, [r3, #0]
 801dd50:	6803      	ldr	r3, [r0, #0]
 801dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd54:	4798      	blx	r3
 801dd56:	e7c9      	b.n	801dcec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	f43f ae84 	beq.w	801da66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dd5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801dd62:	e796      	b.n	801dc92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 801dd64:	2004e118 	.word	0x2004e118

0801dd68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801dd68:	b538      	push	{r3, r4, r5, lr}
 801dd6a:	4605      	mov	r5, r0
 801dd6c:	4c13      	ldr	r4, [pc, #76]	; (801ddbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 801dd6e:	e8d4 3f8f 	ldab	r3, [r4]
 801dd72:	07da      	lsls	r2, r3, #31
 801dd74:	d40b      	bmi.n	801dd8e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801dd76:	4620      	mov	r0, r4
 801dd78:	f007 fd54 	bl	8025824 <__cxa_guard_acquire>
 801dd7c:	b138      	cbz	r0, 801dd8e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801dd7e:	4620      	mov	r0, r4
 801dd80:	f007 fd5c 	bl	802583c <__cxa_guard_release>
 801dd84:	4a0e      	ldr	r2, [pc, #56]	; (801ddc0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801dd86:	490f      	ldr	r1, [pc, #60]	; (801ddc4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801dd88:	480f      	ldr	r0, [pc, #60]	; (801ddc8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801dd8a:	f007 fd44 	bl	8025816 <__aeabi_atexit>
 801dd8e:	4c0f      	ldr	r4, [pc, #60]	; (801ddcc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801dd90:	e8d4 3f8f 	ldab	r3, [r4]
 801dd94:	07db      	lsls	r3, r3, #31
 801dd96:	d40b      	bmi.n	801ddb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801dd98:	4620      	mov	r0, r4
 801dd9a:	f007 fd43 	bl	8025824 <__cxa_guard_acquire>
 801dd9e:	b138      	cbz	r0, 801ddb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801dda0:	4620      	mov	r0, r4
 801dda2:	f007 fd4b 	bl	802583c <__cxa_guard_release>
 801dda6:	4a06      	ldr	r2, [pc, #24]	; (801ddc0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801dda8:	4909      	ldr	r1, [pc, #36]	; (801ddd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801ddaa:	480a      	ldr	r0, [pc, #40]	; (801ddd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801ddac:	f007 fd33 	bl	8025816 <__aeabi_atexit>
 801ddb0:	4b05      	ldr	r3, [pc, #20]	; (801ddc8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801ddb2:	612b      	str	r3, [r5, #16]
 801ddb4:	4b07      	ldr	r3, [pc, #28]	; (801ddd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801ddb6:	616b      	str	r3, [r5, #20]
 801ddb8:	bd38      	pop	{r3, r4, r5, pc}
 801ddba:	bf00      	nop
 801ddbc:	2004e1ec 	.word	0x2004e1ec
 801ddc0:	20000000 	.word	0x20000000
 801ddc4:	0801bf8f 	.word	0x0801bf8f
 801ddc8:	20025864 	.word	0x20025864
 801ddcc:	2004e1f0 	.word	0x2004e1f0
 801ddd0:	0801bf8d 	.word	0x0801bf8d
 801ddd4:	20025868 	.word	0x20025868

0801ddd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801ddd8:	b538      	push	{r3, r4, r5, lr}
 801ddda:	4605      	mov	r5, r0
 801dddc:	4c13      	ldr	r4, [pc, #76]	; (801de2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 801ddde:	e8d4 3f8f 	ldab	r3, [r4]
 801dde2:	07da      	lsls	r2, r3, #31
 801dde4:	d40b      	bmi.n	801ddfe <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801dde6:	4620      	mov	r0, r4
 801dde8:	f007 fd1c 	bl	8025824 <__cxa_guard_acquire>
 801ddec:	b138      	cbz	r0, 801ddfe <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801ddee:	4620      	mov	r0, r4
 801ddf0:	f007 fd24 	bl	802583c <__cxa_guard_release>
 801ddf4:	4a0e      	ldr	r2, [pc, #56]	; (801de30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801ddf6:	490f      	ldr	r1, [pc, #60]	; (801de34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ddf8:	480f      	ldr	r0, [pc, #60]	; (801de38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801ddfa:	f007 fd0c 	bl	8025816 <__aeabi_atexit>
 801ddfe:	4c0f      	ldr	r4, [pc, #60]	; (801de3c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801de00:	e8d4 3f8f 	ldab	r3, [r4]
 801de04:	07db      	lsls	r3, r3, #31
 801de06:	d40b      	bmi.n	801de20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801de08:	4620      	mov	r0, r4
 801de0a:	f007 fd0b 	bl	8025824 <__cxa_guard_acquire>
 801de0e:	b138      	cbz	r0, 801de20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801de10:	4620      	mov	r0, r4
 801de12:	f007 fd13 	bl	802583c <__cxa_guard_release>
 801de16:	4a06      	ldr	r2, [pc, #24]	; (801de30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801de18:	4909      	ldr	r1, [pc, #36]	; (801de40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801de1a:	480a      	ldr	r0, [pc, #40]	; (801de44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801de1c:	f007 fcfb 	bl	8025816 <__aeabi_atexit>
 801de20:	4b05      	ldr	r3, [pc, #20]	; (801de38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801de22:	60ab      	str	r3, [r5, #8]
 801de24:	4b07      	ldr	r3, [pc, #28]	; (801de44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801de26:	60eb      	str	r3, [r5, #12]
 801de28:	bd38      	pop	{r3, r4, r5, pc}
 801de2a:	bf00      	nop
 801de2c:	2004e1c4 	.word	0x2004e1c4
 801de30:	20000000 	.word	0x20000000
 801de34:	0801bf93 	.word	0x0801bf93
 801de38:	2002583c 	.word	0x2002583c
 801de3c:	2004e1c8 	.word	0x2004e1c8
 801de40:	0801bf91 	.word	0x0801bf91
 801de44:	20025840 	.word	0x20025840

0801de48 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801de48:	b510      	push	{r4, lr}
 801de4a:	4604      	mov	r4, r0
 801de4c:	f7ff ff8c 	bl	801dd68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801de50:	4620      	mov	r0, r4
 801de52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de56:	f7ff bfbf 	b.w	801ddd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801de5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801de5c:	b538      	push	{r3, r4, r5, lr}
 801de5e:	4605      	mov	r5, r0
 801de60:	4c13      	ldr	r4, [pc, #76]	; (801deb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 801de62:	e8d4 3f8f 	ldab	r3, [r4]
 801de66:	07da      	lsls	r2, r3, #31
 801de68:	d40b      	bmi.n	801de82 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801de6a:	4620      	mov	r0, r4
 801de6c:	f007 fcda 	bl	8025824 <__cxa_guard_acquire>
 801de70:	b138      	cbz	r0, 801de82 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801de72:	4620      	mov	r0, r4
 801de74:	f007 fce2 	bl	802583c <__cxa_guard_release>
 801de78:	4a0e      	ldr	r2, [pc, #56]	; (801deb4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801de7a:	490f      	ldr	r1, [pc, #60]	; (801deb8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801de7c:	480f      	ldr	r0, [pc, #60]	; (801debc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801de7e:	f007 fcca 	bl	8025816 <__aeabi_atexit>
 801de82:	4c0f      	ldr	r4, [pc, #60]	; (801dec0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801de84:	e8d4 3f8f 	ldab	r3, [r4]
 801de88:	07db      	lsls	r3, r3, #31
 801de8a:	d40b      	bmi.n	801dea4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801de8c:	4620      	mov	r0, r4
 801de8e:	f007 fcc9 	bl	8025824 <__cxa_guard_acquire>
 801de92:	b138      	cbz	r0, 801dea4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801de94:	4620      	mov	r0, r4
 801de96:	f007 fcd1 	bl	802583c <__cxa_guard_release>
 801de9a:	4a06      	ldr	r2, [pc, #24]	; (801deb4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801de9c:	4909      	ldr	r1, [pc, #36]	; (801dec4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801de9e:	480a      	ldr	r0, [pc, #40]	; (801dec8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801dea0:	f007 fcb9 	bl	8025816 <__aeabi_atexit>
 801dea4:	4b05      	ldr	r3, [pc, #20]	; (801debc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801dea6:	622b      	str	r3, [r5, #32]
 801dea8:	4b07      	ldr	r3, [pc, #28]	; (801dec8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801deaa:	626b      	str	r3, [r5, #36]	; 0x24
 801deac:	bd38      	pop	{r3, r4, r5, pc}
 801deae:	bf00      	nop
 801deb0:	2004e1f4 	.word	0x2004e1f4
 801deb4:	20000000 	.word	0x20000000
 801deb8:	0801bf87 	.word	0x0801bf87
 801debc:	2002586c 	.word	0x2002586c
 801dec0:	2004e1f8 	.word	0x2004e1f8
 801dec4:	0801bf85 	.word	0x0801bf85
 801dec8:	20025870 	.word	0x20025870

0801decc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801decc:	b538      	push	{r3, r4, r5, lr}
 801dece:	4605      	mov	r5, r0
 801ded0:	4c13      	ldr	r4, [pc, #76]	; (801df20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 801ded2:	e8d4 3f8f 	ldab	r3, [r4]
 801ded6:	07da      	lsls	r2, r3, #31
 801ded8:	d40b      	bmi.n	801def2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801deda:	4620      	mov	r0, r4
 801dedc:	f007 fca2 	bl	8025824 <__cxa_guard_acquire>
 801dee0:	b138      	cbz	r0, 801def2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801dee2:	4620      	mov	r0, r4
 801dee4:	f007 fcaa 	bl	802583c <__cxa_guard_release>
 801dee8:	4a0e      	ldr	r2, [pc, #56]	; (801df24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801deea:	490f      	ldr	r1, [pc, #60]	; (801df28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801deec:	480f      	ldr	r0, [pc, #60]	; (801df2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801deee:	f007 fc92 	bl	8025816 <__aeabi_atexit>
 801def2:	4c0f      	ldr	r4, [pc, #60]	; (801df30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801def4:	e8d4 3f8f 	ldab	r3, [r4]
 801def8:	07db      	lsls	r3, r3, #31
 801defa:	d40b      	bmi.n	801df14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801defc:	4620      	mov	r0, r4
 801defe:	f007 fc91 	bl	8025824 <__cxa_guard_acquire>
 801df02:	b138      	cbz	r0, 801df14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801df04:	4620      	mov	r0, r4
 801df06:	f007 fc99 	bl	802583c <__cxa_guard_release>
 801df0a:	4a06      	ldr	r2, [pc, #24]	; (801df24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801df0c:	4909      	ldr	r1, [pc, #36]	; (801df34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801df0e:	480a      	ldr	r0, [pc, #40]	; (801df38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801df10:	f007 fc81 	bl	8025816 <__aeabi_atexit>
 801df14:	4b05      	ldr	r3, [pc, #20]	; (801df2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801df16:	61ab      	str	r3, [r5, #24]
 801df18:	4b07      	ldr	r3, [pc, #28]	; (801df38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801df1a:	61eb      	str	r3, [r5, #28]
 801df1c:	bd38      	pop	{r3, r4, r5, pc}
 801df1e:	bf00      	nop
 801df20:	2004e1cc 	.word	0x2004e1cc
 801df24:	20000000 	.word	0x20000000
 801df28:	0801bf8b 	.word	0x0801bf8b
 801df2c:	20025844 	.word	0x20025844
 801df30:	2004e1d0 	.word	0x2004e1d0
 801df34:	0801bf89 	.word	0x0801bf89
 801df38:	20025848 	.word	0x20025848

0801df3c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801df3c:	b510      	push	{r4, lr}
 801df3e:	4604      	mov	r4, r0
 801df40:	f7ff ff8c 	bl	801de5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801df44:	4620      	mov	r0, r4
 801df46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df4a:	f7ff bfbf 	b.w	801decc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801df50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801df50:	b538      	push	{r3, r4, r5, lr}
 801df52:	4605      	mov	r5, r0
 801df54:	4c13      	ldr	r4, [pc, #76]	; (801dfa4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 801df56:	e8d4 3f8f 	ldab	r3, [r4]
 801df5a:	07da      	lsls	r2, r3, #31
 801df5c:	d40b      	bmi.n	801df76 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801df5e:	4620      	mov	r0, r4
 801df60:	f007 fc60 	bl	8025824 <__cxa_guard_acquire>
 801df64:	b138      	cbz	r0, 801df76 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801df66:	4620      	mov	r0, r4
 801df68:	f007 fc68 	bl	802583c <__cxa_guard_release>
 801df6c:	4a0e      	ldr	r2, [pc, #56]	; (801dfa8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801df6e:	490f      	ldr	r1, [pc, #60]	; (801dfac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801df70:	480f      	ldr	r0, [pc, #60]	; (801dfb0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801df72:	f007 fc50 	bl	8025816 <__aeabi_atexit>
 801df76:	4c0f      	ldr	r4, [pc, #60]	; (801dfb4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801df78:	e8d4 3f8f 	ldab	r3, [r4]
 801df7c:	07db      	lsls	r3, r3, #31
 801df7e:	d40b      	bmi.n	801df98 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801df80:	4620      	mov	r0, r4
 801df82:	f007 fc4f 	bl	8025824 <__cxa_guard_acquire>
 801df86:	b138      	cbz	r0, 801df98 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801df88:	4620      	mov	r0, r4
 801df8a:	f007 fc57 	bl	802583c <__cxa_guard_release>
 801df8e:	4a06      	ldr	r2, [pc, #24]	; (801dfa8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801df90:	4909      	ldr	r1, [pc, #36]	; (801dfb8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801df92:	480a      	ldr	r0, [pc, #40]	; (801dfbc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801df94:	f007 fc3f 	bl	8025816 <__aeabi_atexit>
 801df98:	4b05      	ldr	r3, [pc, #20]	; (801dfb0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801df9a:	632b      	str	r3, [r5, #48]	; 0x30
 801df9c:	4b07      	ldr	r3, [pc, #28]	; (801dfbc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801df9e:	636b      	str	r3, [r5, #52]	; 0x34
 801dfa0:	bd38      	pop	{r3, r4, r5, pc}
 801dfa2:	bf00      	nop
 801dfa4:	2004e204 	.word	0x2004e204
 801dfa8:	20000000 	.word	0x20000000
 801dfac:	0801bf7f 	.word	0x0801bf7f
 801dfb0:	2002587c 	.word	0x2002587c
 801dfb4:	2004e208 	.word	0x2004e208
 801dfb8:	0801bf7d 	.word	0x0801bf7d
 801dfbc:	20025880 	.word	0x20025880

0801dfc0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801dfc0:	b538      	push	{r3, r4, r5, lr}
 801dfc2:	4605      	mov	r5, r0
 801dfc4:	4c13      	ldr	r4, [pc, #76]	; (801e014 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 801dfc6:	e8d4 3f8f 	ldab	r3, [r4]
 801dfca:	07da      	lsls	r2, r3, #31
 801dfcc:	d40b      	bmi.n	801dfe6 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801dfce:	4620      	mov	r0, r4
 801dfd0:	f007 fc28 	bl	8025824 <__cxa_guard_acquire>
 801dfd4:	b138      	cbz	r0, 801dfe6 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801dfd6:	4620      	mov	r0, r4
 801dfd8:	f007 fc30 	bl	802583c <__cxa_guard_release>
 801dfdc:	4a0e      	ldr	r2, [pc, #56]	; (801e018 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801dfde:	490f      	ldr	r1, [pc, #60]	; (801e01c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801dfe0:	480f      	ldr	r0, [pc, #60]	; (801e020 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801dfe2:	f007 fc18 	bl	8025816 <__aeabi_atexit>
 801dfe6:	4c0f      	ldr	r4, [pc, #60]	; (801e024 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801dfe8:	e8d4 3f8f 	ldab	r3, [r4]
 801dfec:	07db      	lsls	r3, r3, #31
 801dfee:	d40b      	bmi.n	801e008 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801dff0:	4620      	mov	r0, r4
 801dff2:	f007 fc17 	bl	8025824 <__cxa_guard_acquire>
 801dff6:	b138      	cbz	r0, 801e008 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801dff8:	4620      	mov	r0, r4
 801dffa:	f007 fc1f 	bl	802583c <__cxa_guard_release>
 801dffe:	4a06      	ldr	r2, [pc, #24]	; (801e018 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e000:	4909      	ldr	r1, [pc, #36]	; (801e028 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e002:	480a      	ldr	r0, [pc, #40]	; (801e02c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e004:	f007 fc07 	bl	8025816 <__aeabi_atexit>
 801e008:	4b05      	ldr	r3, [pc, #20]	; (801e020 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e00a:	62ab      	str	r3, [r5, #40]	; 0x28
 801e00c:	4b07      	ldr	r3, [pc, #28]	; (801e02c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e00e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e010:	bd38      	pop	{r3, r4, r5, pc}
 801e012:	bf00      	nop
 801e014:	2004e1d4 	.word	0x2004e1d4
 801e018:	20000000 	.word	0x20000000
 801e01c:	0801bf83 	.word	0x0801bf83
 801e020:	2002584c 	.word	0x2002584c
 801e024:	2004e1d8 	.word	0x2004e1d8
 801e028:	0801bf81 	.word	0x0801bf81
 801e02c:	20025850 	.word	0x20025850

0801e030 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e030:	b510      	push	{r4, lr}
 801e032:	4604      	mov	r4, r0
 801e034:	f7ff ff8c 	bl	801df50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e038:	4620      	mov	r0, r4
 801e03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e03e:	f7ff bfbf 	b.w	801dfc0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e044 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e044:	b538      	push	{r3, r4, r5, lr}
 801e046:	4605      	mov	r5, r0
 801e048:	4c13      	ldr	r4, [pc, #76]	; (801e098 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 801e04a:	e8d4 3f8f 	ldab	r3, [r4]
 801e04e:	07da      	lsls	r2, r3, #31
 801e050:	d40b      	bmi.n	801e06a <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801e052:	4620      	mov	r0, r4
 801e054:	f007 fbe6 	bl	8025824 <__cxa_guard_acquire>
 801e058:	b138      	cbz	r0, 801e06a <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801e05a:	4620      	mov	r0, r4
 801e05c:	f007 fbee 	bl	802583c <__cxa_guard_release>
 801e060:	4a0e      	ldr	r2, [pc, #56]	; (801e09c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e062:	490f      	ldr	r1, [pc, #60]	; (801e0a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e064:	480f      	ldr	r0, [pc, #60]	; (801e0a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e066:	f007 fbd6 	bl	8025816 <__aeabi_atexit>
 801e06a:	4c0f      	ldr	r4, [pc, #60]	; (801e0a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e06c:	e8d4 3f8f 	ldab	r3, [r4]
 801e070:	07db      	lsls	r3, r3, #31
 801e072:	d40b      	bmi.n	801e08c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801e074:	4620      	mov	r0, r4
 801e076:	f007 fbd5 	bl	8025824 <__cxa_guard_acquire>
 801e07a:	b138      	cbz	r0, 801e08c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801e07c:	4620      	mov	r0, r4
 801e07e:	f007 fbdd 	bl	802583c <__cxa_guard_release>
 801e082:	4a06      	ldr	r2, [pc, #24]	; (801e09c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e084:	4909      	ldr	r1, [pc, #36]	; (801e0ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e086:	480a      	ldr	r0, [pc, #40]	; (801e0b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e088:	f007 fbc5 	bl	8025816 <__aeabi_atexit>
 801e08c:	4b05      	ldr	r3, [pc, #20]	; (801e0a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e08e:	652b      	str	r3, [r5, #80]	; 0x50
 801e090:	4b07      	ldr	r3, [pc, #28]	; (801e0b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e092:	656b      	str	r3, [r5, #84]	; 0x54
 801e094:	bd38      	pop	{r3, r4, r5, pc}
 801e096:	bf00      	nop
 801e098:	2004e20c 	.word	0x2004e20c
 801e09c:	20000000 	.word	0x20000000
 801e0a0:	0801bf6f 	.word	0x0801bf6f
 801e0a4:	20025884 	.word	0x20025884
 801e0a8:	2004e210 	.word	0x2004e210
 801e0ac:	0801bf6d 	.word	0x0801bf6d
 801e0b0:	20025888 	.word	0x20025888

0801e0b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e0b4:	b538      	push	{r3, r4, r5, lr}
 801e0b6:	4605      	mov	r5, r0
 801e0b8:	4c13      	ldr	r4, [pc, #76]	; (801e108 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 801e0ba:	e8d4 3f8f 	ldab	r3, [r4]
 801e0be:	07da      	lsls	r2, r3, #31
 801e0c0:	d40b      	bmi.n	801e0da <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801e0c2:	4620      	mov	r0, r4
 801e0c4:	f007 fbae 	bl	8025824 <__cxa_guard_acquire>
 801e0c8:	b138      	cbz	r0, 801e0da <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	f007 fbb6 	bl	802583c <__cxa_guard_release>
 801e0d0:	4a0e      	ldr	r2, [pc, #56]	; (801e10c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e0d2:	490f      	ldr	r1, [pc, #60]	; (801e110 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e0d4:	480f      	ldr	r0, [pc, #60]	; (801e114 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e0d6:	f007 fb9e 	bl	8025816 <__aeabi_atexit>
 801e0da:	4c0f      	ldr	r4, [pc, #60]	; (801e118 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e0dc:	e8d4 3f8f 	ldab	r3, [r4]
 801e0e0:	07db      	lsls	r3, r3, #31
 801e0e2:	d40b      	bmi.n	801e0fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801e0e4:	4620      	mov	r0, r4
 801e0e6:	f007 fb9d 	bl	8025824 <__cxa_guard_acquire>
 801e0ea:	b138      	cbz	r0, 801e0fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801e0ec:	4620      	mov	r0, r4
 801e0ee:	f007 fba5 	bl	802583c <__cxa_guard_release>
 801e0f2:	4a06      	ldr	r2, [pc, #24]	; (801e10c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e0f4:	4909      	ldr	r1, [pc, #36]	; (801e11c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e0f6:	480a      	ldr	r0, [pc, #40]	; (801e120 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e0f8:	f007 fb8d 	bl	8025816 <__aeabi_atexit>
 801e0fc:	4b05      	ldr	r3, [pc, #20]	; (801e114 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e0fe:	64ab      	str	r3, [r5, #72]	; 0x48
 801e100:	4b07      	ldr	r3, [pc, #28]	; (801e120 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e102:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e104:	bd38      	pop	{r3, r4, r5, pc}
 801e106:	bf00      	nop
 801e108:	2004e214 	.word	0x2004e214
 801e10c:	20000000 	.word	0x20000000
 801e110:	0801bf73 	.word	0x0801bf73
 801e114:	2002588c 	.word	0x2002588c
 801e118:	2004e218 	.word	0x2004e218
 801e11c:	0801bf71 	.word	0x0801bf71
 801e120:	20025890 	.word	0x20025890

0801e124 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801e124:	b538      	push	{r3, r4, r5, lr}
 801e126:	4605      	mov	r5, r0
 801e128:	4c13      	ldr	r4, [pc, #76]	; (801e178 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 801e12a:	e8d4 3f8f 	ldab	r3, [r4]
 801e12e:	07da      	lsls	r2, r3, #31
 801e130:	d40b      	bmi.n	801e14a <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801e132:	4620      	mov	r0, r4
 801e134:	f007 fb76 	bl	8025824 <__cxa_guard_acquire>
 801e138:	b138      	cbz	r0, 801e14a <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801e13a:	4620      	mov	r0, r4
 801e13c:	f007 fb7e 	bl	802583c <__cxa_guard_release>
 801e140:	4a0e      	ldr	r2, [pc, #56]	; (801e17c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e142:	490f      	ldr	r1, [pc, #60]	; (801e180 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e144:	480f      	ldr	r0, [pc, #60]	; (801e184 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e146:	f007 fb66 	bl	8025816 <__aeabi_atexit>
 801e14a:	4c0f      	ldr	r4, [pc, #60]	; (801e188 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e14c:	e8d4 3f8f 	ldab	r3, [r4]
 801e150:	07db      	lsls	r3, r3, #31
 801e152:	d40b      	bmi.n	801e16c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801e154:	4620      	mov	r0, r4
 801e156:	f007 fb65 	bl	8025824 <__cxa_guard_acquire>
 801e15a:	b138      	cbz	r0, 801e16c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801e15c:	4620      	mov	r0, r4
 801e15e:	f007 fb6d 	bl	802583c <__cxa_guard_release>
 801e162:	4a06      	ldr	r2, [pc, #24]	; (801e17c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e164:	4909      	ldr	r1, [pc, #36]	; (801e18c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801e166:	480a      	ldr	r0, [pc, #40]	; (801e190 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e168:	f007 fb55 	bl	8025816 <__aeabi_atexit>
 801e16c:	4b05      	ldr	r3, [pc, #20]	; (801e184 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e16e:	642b      	str	r3, [r5, #64]	; 0x40
 801e170:	4b07      	ldr	r3, [pc, #28]	; (801e190 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e172:	646b      	str	r3, [r5, #68]	; 0x44
 801e174:	bd38      	pop	{r3, r4, r5, pc}
 801e176:	bf00      	nop
 801e178:	2004e1dc 	.word	0x2004e1dc
 801e17c:	20000000 	.word	0x20000000
 801e180:	0801bf77 	.word	0x0801bf77
 801e184:	20025854 	.word	0x20025854
 801e188:	2004e1e0 	.word	0x2004e1e0
 801e18c:	0801bf75 	.word	0x0801bf75
 801e190:	20025858 	.word	0x20025858

0801e194 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801e194:	b538      	push	{r3, r4, r5, lr}
 801e196:	4605      	mov	r5, r0
 801e198:	4c13      	ldr	r4, [pc, #76]	; (801e1e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 801e19a:	e8d4 3f8f 	ldab	r3, [r4]
 801e19e:	07da      	lsls	r2, r3, #31
 801e1a0:	d40b      	bmi.n	801e1ba <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	f007 fb3e 	bl	8025824 <__cxa_guard_acquire>
 801e1a8:	b138      	cbz	r0, 801e1ba <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801e1aa:	4620      	mov	r0, r4
 801e1ac:	f007 fb46 	bl	802583c <__cxa_guard_release>
 801e1b0:	4a0e      	ldr	r2, [pc, #56]	; (801e1ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e1b2:	490f      	ldr	r1, [pc, #60]	; (801e1f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e1b4:	480f      	ldr	r0, [pc, #60]	; (801e1f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e1b6:	f007 fb2e 	bl	8025816 <__aeabi_atexit>
 801e1ba:	4c0f      	ldr	r4, [pc, #60]	; (801e1f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e1bc:	e8d4 3f8f 	ldab	r3, [r4]
 801e1c0:	07db      	lsls	r3, r3, #31
 801e1c2:	d40b      	bmi.n	801e1dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	f007 fb2d 	bl	8025824 <__cxa_guard_acquire>
 801e1ca:	b138      	cbz	r0, 801e1dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	f007 fb35 	bl	802583c <__cxa_guard_release>
 801e1d2:	4a06      	ldr	r2, [pc, #24]	; (801e1ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e1d4:	4909      	ldr	r1, [pc, #36]	; (801e1fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801e1d6:	480a      	ldr	r0, [pc, #40]	; (801e200 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e1d8:	f007 fb1d 	bl	8025816 <__aeabi_atexit>
 801e1dc:	4b05      	ldr	r3, [pc, #20]	; (801e1f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e1de:	63ab      	str	r3, [r5, #56]	; 0x38
 801e1e0:	4b07      	ldr	r3, [pc, #28]	; (801e200 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e1e2:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e1e4:	bd38      	pop	{r3, r4, r5, pc}
 801e1e6:	bf00      	nop
 801e1e8:	2004e1fc 	.word	0x2004e1fc
 801e1ec:	20000000 	.word	0x20000000
 801e1f0:	0801bf7b 	.word	0x0801bf7b
 801e1f4:	20025874 	.word	0x20025874
 801e1f8:	2004e200 	.word	0x2004e200
 801e1fc:	0801bf79 	.word	0x0801bf79
 801e200:	20025878 	.word	0x20025878

0801e204 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801e204:	b510      	push	{r4, lr}
 801e206:	4604      	mov	r4, r0
 801e208:	f7ff ff1c 	bl	801e044 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801e20c:	4620      	mov	r0, r4
 801e20e:	f7ff ff89 	bl	801e124 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801e212:	4620      	mov	r0, r4
 801e214:	f7ff ff4e 	bl	801e0b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801e218:	4620      	mov	r0, r4
 801e21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e21e:	f7ff bfb9 	b.w	801e194 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801e224 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e224:	b538      	push	{r3, r4, r5, lr}
 801e226:	4605      	mov	r5, r0
 801e228:	4c13      	ldr	r4, [pc, #76]	; (801e278 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 801e22a:	e8d4 3f8f 	ldab	r3, [r4]
 801e22e:	07da      	lsls	r2, r3, #31
 801e230:	d40b      	bmi.n	801e24a <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801e232:	4620      	mov	r0, r4
 801e234:	f007 faf6 	bl	8025824 <__cxa_guard_acquire>
 801e238:	b138      	cbz	r0, 801e24a <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801e23a:	4620      	mov	r0, r4
 801e23c:	f007 fafe 	bl	802583c <__cxa_guard_release>
 801e240:	4a0e      	ldr	r2, [pc, #56]	; (801e27c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e242:	490f      	ldr	r1, [pc, #60]	; (801e280 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e244:	480f      	ldr	r0, [pc, #60]	; (801e284 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e246:	f007 fae6 	bl	8025816 <__aeabi_atexit>
 801e24a:	4c0f      	ldr	r4, [pc, #60]	; (801e288 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e24c:	e8d4 3f8f 	ldab	r3, [r4]
 801e250:	07db      	lsls	r3, r3, #31
 801e252:	d40b      	bmi.n	801e26c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801e254:	4620      	mov	r0, r4
 801e256:	f007 fae5 	bl	8025824 <__cxa_guard_acquire>
 801e25a:	b138      	cbz	r0, 801e26c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801e25c:	4620      	mov	r0, r4
 801e25e:	f007 faed 	bl	802583c <__cxa_guard_release>
 801e262:	4a06      	ldr	r2, [pc, #24]	; (801e27c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e264:	4909      	ldr	r1, [pc, #36]	; (801e28c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e266:	480a      	ldr	r0, [pc, #40]	; (801e290 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e268:	f007 fad5 	bl	8025816 <__aeabi_atexit>
 801e26c:	4b05      	ldr	r3, [pc, #20]	; (801e284 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e26e:	662b      	str	r3, [r5, #96]	; 0x60
 801e270:	4b07      	ldr	r3, [pc, #28]	; (801e290 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e272:	666b      	str	r3, [r5, #100]	; 0x64
 801e274:	bd38      	pop	{r3, r4, r5, pc}
 801e276:	bf00      	nop
 801e278:	2004e1e4 	.word	0x2004e1e4
 801e27c:	20000000 	.word	0x20000000
 801e280:	0801bf67 	.word	0x0801bf67
 801e284:	2002585c 	.word	0x2002585c
 801e288:	2004e1e8 	.word	0x2004e1e8
 801e28c:	0801bf65 	.word	0x0801bf65
 801e290:	20025860 	.word	0x20025860

0801e294 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e294:	b538      	push	{r3, r4, r5, lr}
 801e296:	4605      	mov	r5, r0
 801e298:	4c13      	ldr	r4, [pc, #76]	; (801e2e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801e29a:	e8d4 3f8f 	ldab	r3, [r4]
 801e29e:	07da      	lsls	r2, r3, #31
 801e2a0:	d40b      	bmi.n	801e2ba <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801e2a2:	4620      	mov	r0, r4
 801e2a4:	f007 fabe 	bl	8025824 <__cxa_guard_acquire>
 801e2a8:	b138      	cbz	r0, 801e2ba <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801e2aa:	4620      	mov	r0, r4
 801e2ac:	f007 fac6 	bl	802583c <__cxa_guard_release>
 801e2b0:	4a0e      	ldr	r2, [pc, #56]	; (801e2ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e2b2:	490f      	ldr	r1, [pc, #60]	; (801e2f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e2b4:	480f      	ldr	r0, [pc, #60]	; (801e2f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e2b6:	f007 faae 	bl	8025816 <__aeabi_atexit>
 801e2ba:	4c0f      	ldr	r4, [pc, #60]	; (801e2f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e2bc:	e8d4 3f8f 	ldab	r3, [r4]
 801e2c0:	07db      	lsls	r3, r3, #31
 801e2c2:	d40b      	bmi.n	801e2dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801e2c4:	4620      	mov	r0, r4
 801e2c6:	f007 faad 	bl	8025824 <__cxa_guard_acquire>
 801e2ca:	b138      	cbz	r0, 801e2dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801e2cc:	4620      	mov	r0, r4
 801e2ce:	f007 fab5 	bl	802583c <__cxa_guard_release>
 801e2d2:	4a06      	ldr	r2, [pc, #24]	; (801e2ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e2d4:	4909      	ldr	r1, [pc, #36]	; (801e2fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e2d6:	480a      	ldr	r0, [pc, #40]	; (801e300 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e2d8:	f007 fa9d 	bl	8025816 <__aeabi_atexit>
 801e2dc:	4b05      	ldr	r3, [pc, #20]	; (801e2f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e2de:	65ab      	str	r3, [r5, #88]	; 0x58
 801e2e0:	4b07      	ldr	r3, [pc, #28]	; (801e300 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e2e2:	65eb      	str	r3, [r5, #92]	; 0x5c
 801e2e4:	bd38      	pop	{r3, r4, r5, pc}
 801e2e6:	bf00      	nop
 801e2e8:	2004e1bc 	.word	0x2004e1bc
 801e2ec:	20000000 	.word	0x20000000
 801e2f0:	0801bf6b 	.word	0x0801bf6b
 801e2f4:	20025834 	.word	0x20025834
 801e2f8:	2004e1c0 	.word	0x2004e1c0
 801e2fc:	0801bf69 	.word	0x0801bf69
 801e300:	20025838 	.word	0x20025838

0801e304 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801e304:	b510      	push	{r4, lr}
 801e306:	4604      	mov	r4, r0
 801e308:	f7ff ff8c 	bl	801e224 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e30c:	4620      	mov	r0, r4
 801e30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e312:	f7ff bfbf 	b.w	801e294 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e318 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e318:	b538      	push	{r3, r4, r5, lr}
 801e31a:	4605      	mov	r5, r0
 801e31c:	4c13      	ldr	r4, [pc, #76]	; (801e36c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801e31e:	e8d4 3f8f 	ldab	r3, [r4]
 801e322:	07da      	lsls	r2, r3, #31
 801e324:	d40b      	bmi.n	801e33e <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801e326:	4620      	mov	r0, r4
 801e328:	f007 fa7c 	bl	8025824 <__cxa_guard_acquire>
 801e32c:	b138      	cbz	r0, 801e33e <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801e32e:	4620      	mov	r0, r4
 801e330:	f007 fa84 	bl	802583c <__cxa_guard_release>
 801e334:	4a0e      	ldr	r2, [pc, #56]	; (801e370 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e336:	490f      	ldr	r1, [pc, #60]	; (801e374 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e338:	480f      	ldr	r0, [pc, #60]	; (801e378 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e33a:	f007 fa6c 	bl	8025816 <__aeabi_atexit>
 801e33e:	4c0f      	ldr	r4, [pc, #60]	; (801e37c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e340:	e8d4 3f8f 	ldab	r3, [r4]
 801e344:	07db      	lsls	r3, r3, #31
 801e346:	d40b      	bmi.n	801e360 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801e348:	4620      	mov	r0, r4
 801e34a:	f007 fa6b 	bl	8025824 <__cxa_guard_acquire>
 801e34e:	b138      	cbz	r0, 801e360 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801e350:	4620      	mov	r0, r4
 801e352:	f007 fa73 	bl	802583c <__cxa_guard_release>
 801e356:	4a06      	ldr	r2, [pc, #24]	; (801e370 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e358:	4909      	ldr	r1, [pc, #36]	; (801e380 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e35a:	480a      	ldr	r0, [pc, #40]	; (801e384 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e35c:	f007 fa5b 	bl	8025816 <__aeabi_atexit>
 801e360:	4b05      	ldr	r3, [pc, #20]	; (801e378 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e362:	672b      	str	r3, [r5, #112]	; 0x70
 801e364:	4b07      	ldr	r3, [pc, #28]	; (801e384 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e366:	676b      	str	r3, [r5, #116]	; 0x74
 801e368:	bd38      	pop	{r3, r4, r5, pc}
 801e36a:	bf00      	nop
 801e36c:	2004e1b4 	.word	0x2004e1b4
 801e370:	20000000 	.word	0x20000000
 801e374:	0801bf5f 	.word	0x0801bf5f
 801e378:	2002582c 	.word	0x2002582c
 801e37c:	2004e1b8 	.word	0x2004e1b8
 801e380:	0801bf5d 	.word	0x0801bf5d
 801e384:	20025830 	.word	0x20025830

0801e388 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e388:	b538      	push	{r3, r4, r5, lr}
 801e38a:	4605      	mov	r5, r0
 801e38c:	4c13      	ldr	r4, [pc, #76]	; (801e3dc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801e38e:	e8d4 3f8f 	ldab	r3, [r4]
 801e392:	07da      	lsls	r2, r3, #31
 801e394:	d40b      	bmi.n	801e3ae <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801e396:	4620      	mov	r0, r4
 801e398:	f007 fa44 	bl	8025824 <__cxa_guard_acquire>
 801e39c:	b138      	cbz	r0, 801e3ae <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801e39e:	4620      	mov	r0, r4
 801e3a0:	f007 fa4c 	bl	802583c <__cxa_guard_release>
 801e3a4:	4a0e      	ldr	r2, [pc, #56]	; (801e3e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e3a6:	490f      	ldr	r1, [pc, #60]	; (801e3e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e3a8:	480f      	ldr	r0, [pc, #60]	; (801e3e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e3aa:	f007 fa34 	bl	8025816 <__aeabi_atexit>
 801e3ae:	4c0f      	ldr	r4, [pc, #60]	; (801e3ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e3b0:	e8d4 3f8f 	ldab	r3, [r4]
 801e3b4:	07db      	lsls	r3, r3, #31
 801e3b6:	d40b      	bmi.n	801e3d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801e3b8:	4620      	mov	r0, r4
 801e3ba:	f007 fa33 	bl	8025824 <__cxa_guard_acquire>
 801e3be:	b138      	cbz	r0, 801e3d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801e3c0:	4620      	mov	r0, r4
 801e3c2:	f007 fa3b 	bl	802583c <__cxa_guard_release>
 801e3c6:	4a06      	ldr	r2, [pc, #24]	; (801e3e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e3c8:	4909      	ldr	r1, [pc, #36]	; (801e3f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e3ca:	480a      	ldr	r0, [pc, #40]	; (801e3f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e3cc:	f007 fa23 	bl	8025816 <__aeabi_atexit>
 801e3d0:	4b05      	ldr	r3, [pc, #20]	; (801e3e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e3d2:	66ab      	str	r3, [r5, #104]	; 0x68
 801e3d4:	4b07      	ldr	r3, [pc, #28]	; (801e3f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e3d6:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e3d8:	bd38      	pop	{r3, r4, r5, pc}
 801e3da:	bf00      	nop
 801e3dc:	2004e1ac 	.word	0x2004e1ac
 801e3e0:	20000000 	.word	0x20000000
 801e3e4:	0801bf63 	.word	0x0801bf63
 801e3e8:	20025824 	.word	0x20025824
 801e3ec:	2004e1b0 	.word	0x2004e1b0
 801e3f0:	0801bf61 	.word	0x0801bf61
 801e3f4:	20025828 	.word	0x20025828

0801e3f8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801e3f8:	b510      	push	{r4, lr}
 801e3fa:	4604      	mov	r4, r0
 801e3fc:	f7ff ff8c 	bl	801e318 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e400:	4620      	mov	r0, r4
 801e402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e406:	f7ff bfbf 	b.w	801e388 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801e40a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801e40a:	b510      	push	{r4, lr}
 801e40c:	4604      	mov	r4, r0
 801e40e:	f7ff fff3 	bl	801e3f8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801e412:	4620      	mov	r0, r4
 801e414:	f7ff ff76 	bl	801e304 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801e418:	4620      	mov	r0, r4
 801e41a:	f7ff fe09 	bl	801e030 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801e41e:	4620      	mov	r0, r4
 801e420:	f7ff fd12 	bl	801de48 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801e424:	4620      	mov	r0, r4
 801e426:	f7ff fd89 	bl	801df3c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801e42a:	4620      	mov	r0, r4
 801e42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e430:	f7ff bee8 	b.w	801e204 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801e434 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801e434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e438:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801e43c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801e440:	fb05 4c0e 	mla	ip, r5, lr, r4
 801e444:	2d00      	cmp	r5, #0
 801e446:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801e44a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801e44e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801e452:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801e456:	eb02 0a0c 	add.w	sl, r2, ip
 801e45a:	8808      	ldrh	r0, [r1, #0]
 801e45c:	f2c0 80b0 	blt.w	801e5c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e460:	45ab      	cmp	fp, r5
 801e462:	f340 80ad 	ble.w	801e5c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e466:	2c00      	cmp	r4, #0
 801e468:	f2c0 80a8 	blt.w	801e5bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e46c:	45a6      	cmp	lr, r4
 801e46e:	f340 80a5 	ble.w	801e5bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e472:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e476:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801e47a:	1c62      	adds	r2, r4, #1
 801e47c:	f100 80a3 	bmi.w	801e5c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e480:	4596      	cmp	lr, r2
 801e482:	f340 80a0 	ble.w	801e5c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e486:	f1b9 0f00 	cmp.w	r9, #0
 801e48a:	f000 809c 	beq.w	801e5c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e48e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e492:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801e496:	3501      	adds	r5, #1
 801e498:	f100 8099 	bmi.w	801e5ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e49c:	45ab      	cmp	fp, r5
 801e49e:	f340 8096 	ble.w	801e5ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e4a2:	2f00      	cmp	r7, #0
 801e4a4:	f000 8093 	beq.w	801e5ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e4a8:	2c00      	cmp	r4, #0
 801e4aa:	f2c0 808e 	blt.w	801e5ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e4ae:	45a6      	cmp	lr, r4
 801e4b0:	f340 808b 	ble.w	801e5ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e4b4:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801e4b8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801e4bc:	3401      	adds	r4, #1
 801e4be:	f100 8089 	bmi.w	801e5d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e4c2:	45a6      	cmp	lr, r4
 801e4c4:	f340 8086 	ble.w	801e5d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e4c8:	f1b9 0f00 	cmp.w	r9, #0
 801e4cc:	f000 8082 	beq.w	801e5d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e4d0:	44d6      	add	lr, sl
 801e4d2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e4d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e4da:	fb19 fe07 	smulbb	lr, r9, r7
 801e4de:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801e4e2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e4e6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801e4ea:	ea44 0808 	orr.w	r8, r4, r8
 801e4ee:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801e4f2:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801e4f6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e4fa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e4fe:	ea44 0c0c 	orr.w	ip, r4, ip
 801e502:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801e506:	fb04 f40c 	mul.w	r4, r4, ip
 801e50a:	f1c7 0210 	rsb	r2, r7, #16
 801e50e:	eba2 0209 	sub.w	r2, r2, r9
 801e512:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801e516:	fb02 4808 	mla	r8, r2, r8, r4
 801e51a:	b2b4      	uxth	r4, r6
 801e51c:	43f6      	mvns	r6, r6
 801e51e:	041a      	lsls	r2, r3, #16
 801e520:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e524:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e528:	4313      	orrs	r3, r2
 801e52a:	fb0e 8303 	mla	r3, lr, r3, r8
 801e52e:	042a      	lsls	r2, r5, #16
 801e530:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e534:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e538:	432a      	orrs	r2, r5
 801e53a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801e53e:	fb07 3202 	mla	r2, r7, r2, r3
 801e542:	0d53      	lsrs	r3, r2, #21
 801e544:	0952      	lsrs	r2, r2, #5
 801e546:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e54a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e54e:	431a      	orrs	r2, r3
 801e550:	b293      	uxth	r3, r2
 801e552:	1202      	asrs	r2, r0, #8
 801e554:	b2f6      	uxtb	r6, r6
 801e556:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e55a:	fb12 f206 	smulbb	r2, r2, r6
 801e55e:	10c7      	asrs	r7, r0, #3
 801e560:	00c0      	lsls	r0, r0, #3
 801e562:	b2c0      	uxtb	r0, r0
 801e564:	121d      	asrs	r5, r3, #8
 801e566:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e56a:	fb10 f006 	smulbb	r0, r0, r6
 801e56e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e572:	fb17 f706 	smulbb	r7, r7, r6
 801e576:	fb05 2504 	mla	r5, r5, r4, r2
 801e57a:	10da      	asrs	r2, r3, #3
 801e57c:	00db      	lsls	r3, r3, #3
 801e57e:	b2db      	uxtb	r3, r3
 801e580:	fb03 0004 	mla	r0, r3, r4, r0
 801e584:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e588:	fb02 7204 	mla	r2, r2, r4, r7
 801e58c:	b2ad      	uxth	r5, r5
 801e58e:	b280      	uxth	r0, r0
 801e590:	1c6b      	adds	r3, r5, #1
 801e592:	b292      	uxth	r2, r2
 801e594:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e598:	1c43      	adds	r3, r0, #1
 801e59a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e59e:	1c50      	adds	r0, r2, #1
 801e5a0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e5a4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e5a8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e5ac:	0952      	lsrs	r2, r2, #5
 801e5ae:	432b      	orrs	r3, r5
 801e5b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e5b4:	4313      	orrs	r3, r2
 801e5b6:	800b      	strh	r3, [r1, #0]
 801e5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5bc:	4680      	mov	r8, r0
 801e5be:	e75c      	b.n	801e47a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801e5c0:	4684      	mov	ip, r0
 801e5c2:	4680      	mov	r8, r0
 801e5c4:	e767      	b.n	801e496 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e5c6:	4684      	mov	ip, r0
 801e5c8:	e765      	b.n	801e496 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e5ca:	4605      	mov	r5, r0
 801e5cc:	e776      	b.n	801e4bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801e5ce:	4603      	mov	r3, r0
 801e5d0:	4605      	mov	r5, r0
 801e5d2:	e782      	b.n	801e4da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801e5d4:	4603      	mov	r3, r0
 801e5d6:	e780      	b.n	801e4da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801e5d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5dc:	b099      	sub	sp, #100	; 0x64
 801e5de:	9215      	str	r2, [sp, #84]	; 0x54
 801e5e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e5e2:	9016      	str	r0, [sp, #88]	; 0x58
 801e5e4:	9309      	str	r3, [sp, #36]	; 0x24
 801e5e6:	6850      	ldr	r0, [r2, #4]
 801e5e8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801e5ec:	910c      	str	r1, [sp, #48]	; 0x30
 801e5ee:	930d      	str	r3, [sp, #52]	; 0x34
 801e5f0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801e5f4:	fb00 1303 	mla	r3, r0, r3, r1
 801e5f8:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801e5fc:	6812      	ldr	r2, [r2, #0]
 801e5fe:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801e602:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	930b      	str	r3, [sp, #44]	; 0x2c
 801e608:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e60a:	685e      	ldr	r6, [r3, #4]
 801e60c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e60e:	3604      	adds	r6, #4
 801e610:	43db      	mvns	r3, r3
 801e612:	b2db      	uxtb	r3, r3
 801e614:	930a      	str	r3, [sp, #40]	; 0x28
 801e616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e618:	2b00      	cmp	r3, #0
 801e61a:	dc03      	bgt.n	801e624 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e61c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e61e:	2b00      	cmp	r3, #0
 801e620:	f340 8225 	ble.w	801ea6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e624:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e626:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e62a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e62e:	1e48      	subs	r0, r1, #1
 801e630:	1e57      	subs	r7, r2, #1
 801e632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e634:	2b00      	cmp	r3, #0
 801e636:	f340 80e3 	ble.w	801e800 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e63a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801e63e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e642:	d406      	bmi.n	801e652 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e644:	4584      	cmp	ip, r0
 801e646:	da04      	bge.n	801e652 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e648:	2b00      	cmp	r3, #0
 801e64a:	db02      	blt.n	801e652 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e64c:	42bb      	cmp	r3, r7
 801e64e:	f2c0 80d8 	blt.w	801e802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e652:	f11c 0c01 	adds.w	ip, ip, #1
 801e656:	f100 80c9 	bmi.w	801e7ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e65a:	4561      	cmp	r1, ip
 801e65c:	f2c0 80c6 	blt.w	801e7ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e660:	3301      	adds	r3, #1
 801e662:	f100 80c3 	bmi.w	801e7ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e666:	429a      	cmp	r2, r3
 801e668:	f2c0 80c0 	blt.w	801e7ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e66c:	4647      	mov	r7, r8
 801e66e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e672:	f1bb 0f00 	cmp.w	fp, #0
 801e676:	f340 80e3 	ble.w	801e840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e67a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e67c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e67e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e682:	ea5f 422a 	movs.w	r2, sl, asr #16
 801e686:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e68a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801e68e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e692:	689b      	ldr	r3, [r3, #8]
 801e694:	f100 8121 	bmi.w	801e8da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e698:	f103 39ff 	add.w	r9, r3, #4294967295
 801e69c:	454a      	cmp	r2, r9
 801e69e:	f280 811c 	bge.w	801e8da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e6a2:	f1bc 0f00 	cmp.w	ip, #0
 801e6a6:	f2c0 8118 	blt.w	801e8da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e6aa:	f10e 39ff 	add.w	r9, lr, #4294967295
 801e6ae:	45cc      	cmp	ip, r9
 801e6b0:	f280 8113 	bge.w	801e8da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e6b4:	b21b      	sxth	r3, r3
 801e6b6:	fb0c 2203 	mla	r2, ip, r3, r2
 801e6ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e6bc:	eb04 0902 	add.w	r9, r4, r2
 801e6c0:	5ca2      	ldrb	r2, [r4, r2]
 801e6c2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801e6c6:	2800      	cmp	r0, #0
 801e6c8:	f000 80fe 	beq.w	801e8c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e6cc:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e6d0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801e6d4:	9211      	str	r2, [sp, #68]	; 0x44
 801e6d6:	b151      	cbz	r1, 801e6ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e6d8:	eb09 0203 	add.w	r2, r9, r3
 801e6dc:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e6e0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e6e4:	930f      	str	r3, [sp, #60]	; 0x3c
 801e6e6:	7853      	ldrb	r3, [r2, #1]
 801e6e8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e6ec:	9312      	str	r3, [sp, #72]	; 0x48
 801e6ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6f0:	fb10 f201 	smulbb	r2, r0, r1
 801e6f4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e6f8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e6fc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e700:	ea4c 0c03 	orr.w	ip, ip, r3
 801e704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e706:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e708:	041b      	lsls	r3, r3, #16
 801e70a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801e70e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e712:	10d2      	asrs	r2, r2, #3
 801e714:	4323      	orrs	r3, r4
 801e716:	4353      	muls	r3, r2
 801e718:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801e71c:	fb09 330c 	mla	r3, r9, ip, r3
 801e720:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e724:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e728:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e72c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e730:	f1c1 0c10 	rsb	ip, r1, #16
 801e734:	ebac 0c00 	sub.w	ip, ip, r0
 801e738:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e73c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e742:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e746:	0418      	lsls	r0, r3, #16
 801e748:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e74c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e750:	4318      	orrs	r0, r3
 801e752:	fb02 c200 	mla	r2, r2, r0, ip
 801e756:	8838      	ldrh	r0, [r7, #0]
 801e758:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e75a:	0d53      	lsrs	r3, r2, #21
 801e75c:	1201      	asrs	r1, r0, #8
 801e75e:	0952      	lsrs	r2, r2, #5
 801e760:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e764:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e768:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e76c:	431a      	orrs	r2, r3
 801e76e:	fb11 f104 	smulbb	r1, r1, r4
 801e772:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801e776:	00c0      	lsls	r0, r0, #3
 801e778:	b292      	uxth	r2, r2
 801e77a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e77e:	b2c0      	uxtb	r0, r0
 801e780:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e784:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801e788:	fb1e fe04 	smulbb	lr, lr, r4
 801e78c:	fb10 f004 	smulbb	r0, r0, r4
 801e790:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e794:	fb0c 1c03 	mla	ip, ip, r3, r1
 801e798:	10d1      	asrs	r1, r2, #3
 801e79a:	00d2      	lsls	r2, r2, #3
 801e79c:	b2d2      	uxtb	r2, r2
 801e79e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e7a2:	fb01 e103 	mla	r1, r1, r3, lr
 801e7a6:	fb02 0303 	mla	r3, r2, r3, r0
 801e7aa:	fa1f fc8c 	uxth.w	ip, ip
 801e7ae:	b29a      	uxth	r2, r3
 801e7b0:	f10c 0301 	add.w	r3, ip, #1
 801e7b4:	b289      	uxth	r1, r1
 801e7b6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e7ba:	1c53      	adds	r3, r2, #1
 801e7bc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e7c0:	1c4a      	adds	r2, r1, #1
 801e7c2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e7c6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e7ca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e7ce:	0949      	lsrs	r1, r1, #5
 801e7d0:	ea43 030c 	orr.w	r3, r3, ip
 801e7d4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e7d8:	430b      	orrs	r3, r1
 801e7da:	803b      	strh	r3, [r7, #0]
 801e7dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e7de:	3702      	adds	r7, #2
 801e7e0:	449a      	add	sl, r3
 801e7e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e7e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e7e8:	441d      	add	r5, r3
 801e7ea:	e742      	b.n	801e672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e7ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e7ee:	f108 0802 	add.w	r8, r8, #2
 801e7f2:	449a      	add	sl, r3
 801e7f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e7f6:	441d      	add	r5, r3
 801e7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7fa:	3b01      	subs	r3, #1
 801e7fc:	9309      	str	r3, [sp, #36]	; 0x24
 801e7fe:	e718      	b.n	801e632 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e800:	d023      	beq.n	801e84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801e802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e804:	9825      	ldr	r0, [sp, #148]	; 0x94
 801e806:	3b01      	subs	r3, #1
 801e808:	fb00 a003 	mla	r0, r0, r3, sl
 801e80c:	1400      	asrs	r0, r0, #16
 801e80e:	f53f af2d 	bmi.w	801e66c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e812:	3901      	subs	r1, #1
 801e814:	4288      	cmp	r0, r1
 801e816:	f6bf af29 	bge.w	801e66c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e81a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e81c:	fb01 5303 	mla	r3, r1, r3, r5
 801e820:	141b      	asrs	r3, r3, #16
 801e822:	f53f af23 	bmi.w	801e66c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e826:	3a01      	subs	r2, #1
 801e828:	4293      	cmp	r3, r2
 801e82a:	f6bf af1f 	bge.w	801e66c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e82e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801e832:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801e836:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801e83a:	f1be 0f00 	cmp.w	lr, #0
 801e83e:	dc6c      	bgt.n	801e91a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e842:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e846:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801e84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	f340 810e 	ble.w	801ea6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e856:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e85a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e85e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e862:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e866:	eef0 6a62 	vmov.f32	s13, s5
 801e86a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e86e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e872:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e876:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e87a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e87e:	ee16 aa90 	vmov	sl, s13
 801e882:	eef0 6a43 	vmov.f32	s13, s6
 801e886:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e88a:	ee12 2a90 	vmov	r2, s5
 801e88e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e894:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e898:	fb92 f3f3 	sdiv	r3, r2, r3
 801e89c:	ee13 2a10 	vmov	r2, s6
 801e8a0:	9325      	str	r3, [sp, #148]	; 0x94
 801e8a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e8a4:	ee16 5a90 	vmov	r5, s13
 801e8a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8ac:	9326      	str	r3, [sp, #152]	; 0x98
 801e8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e8b2:	3b01      	subs	r3, #1
 801e8b4:	930c      	str	r3, [sp, #48]	; 0x30
 801e8b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e8b8:	bf08      	it	eq
 801e8ba:	4613      	moveq	r3, r2
 801e8bc:	eeb0 3a67 	vmov.f32	s6, s15
 801e8c0:	9309      	str	r3, [sp, #36]	; 0x24
 801e8c2:	eef0 2a47 	vmov.f32	s5, s14
 801e8c6:	e6a6      	b.n	801e616 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e8c8:	2900      	cmp	r1, #0
 801e8ca:	f43f af10 	beq.w	801e6ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e8ce:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e8d2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e8d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8d8:	e709      	b.n	801e6ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e8da:	f112 0901 	adds.w	r9, r2, #1
 801e8de:	f53f af7d 	bmi.w	801e7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8e2:	454b      	cmp	r3, r9
 801e8e4:	f6ff af7a 	blt.w	801e7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8e8:	f11c 0901 	adds.w	r9, ip, #1
 801e8ec:	f53f af76 	bmi.w	801e7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8f0:	45ce      	cmp	lr, r9
 801e8f2:	f6ff af73 	blt.w	801e7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8f6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e8f8:	9202      	str	r2, [sp, #8]
 801e8fa:	b21b      	sxth	r3, r3
 801e8fc:	fa0f f28e 	sxth.w	r2, lr
 801e900:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e904:	e9cd c003 	strd	ip, r0, [sp, #12]
 801e908:	9201      	str	r2, [sp, #4]
 801e90a:	9300      	str	r3, [sp, #0]
 801e90c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e90e:	4633      	mov	r3, r6
 801e910:	4639      	mov	r1, r7
 801e912:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e914:	f7ff fd8e 	bl	801e434 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801e918:	e760      	b.n	801e7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e91a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e91c:	ea4f 422a 	mov.w	r2, sl, asr #16
 801e920:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e924:	1429      	asrs	r1, r5, #16
 801e926:	fb03 2101 	mla	r1, r3, r1, r2
 801e92a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e92c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e92e:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801e932:	440a      	add	r2, r1
 801e934:	5c61      	ldrb	r1, [r4, r1]
 801e936:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e93a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801e93e:	f1bc 0f00 	cmp.w	ip, #0
 801e942:	f000 808c 	beq.w	801ea5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801e946:	7857      	ldrb	r7, [r2, #1]
 801e948:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801e94c:	9413      	str	r4, [sp, #76]	; 0x4c
 801e94e:	b140      	cbz	r0, 801e962 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e950:	18d7      	adds	r7, r2, r3
 801e952:	5cd3      	ldrb	r3, [r2, r3]
 801e954:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e958:	9310      	str	r3, [sp, #64]	; 0x40
 801e95a:	787b      	ldrb	r3, [r7, #1]
 801e95c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e960:	9314      	str	r3, [sp, #80]	; 0x50
 801e962:	fb1c f200 	smulbb	r2, ip, r0
 801e966:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e968:	10d2      	asrs	r2, r2, #3
 801e96a:	041f      	lsls	r7, r3, #16
 801e96c:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801e970:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e974:	431f      	orrs	r7, r3
 801e976:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801e97a:	9317      	str	r3, [sp, #92]	; 0x5c
 801e97c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e97e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e980:	041b      	lsls	r3, r3, #16
 801e982:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801e986:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e98a:	ea43 030b 	orr.w	r3, r3, fp
 801e98e:	4353      	muls	r3, r2
 801e990:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e992:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e996:	fb04 3707 	mla	r7, r4, r7, r3
 801e99a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e99e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e9a2:	ea43 0b01 	orr.w	fp, r3, r1
 801e9a6:	f1c0 0110 	rsb	r1, r0, #16
 801e9aa:	eba1 0c0c 	sub.w	ip, r1, ip
 801e9ae:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e9b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9b4:	fb0c 770b 	mla	r7, ip, fp, r7
 801e9b8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e9bc:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801e9c0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e9c4:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e9c8:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e9cc:	fb02 770c 	mla	r7, r2, ip, r7
 801e9d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e9d2:	0d79      	lsrs	r1, r7, #21
 801e9d4:	8812      	ldrh	r2, [r2, #0]
 801e9d6:	097f      	lsrs	r7, r7, #5
 801e9d8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e9dc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e9e0:	430f      	orrs	r7, r1
 801e9e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e9e4:	1211      	asrs	r1, r2, #8
 801e9e6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e9ea:	b2bb      	uxth	r3, r7
 801e9ec:	fb11 f104 	smulbb	r1, r1, r4
 801e9f0:	10d7      	asrs	r7, r2, #3
 801e9f2:	00d2      	lsls	r2, r2, #3
 801e9f4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e9f8:	b2d2      	uxtb	r2, r2
 801e9fa:	1218      	asrs	r0, r3, #8
 801e9fc:	fb17 f704 	smulbb	r7, r7, r4
 801ea00:	fb12 f204 	smulbb	r2, r2, r4
 801ea04:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ea08:	fb00 1009 	mla	r0, r0, r9, r1
 801ea0c:	10d9      	asrs	r1, r3, #3
 801ea0e:	00db      	lsls	r3, r3, #3
 801ea10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ea14:	b2db      	uxtb	r3, r3
 801ea16:	fb01 7109 	mla	r1, r1, r9, r7
 801ea1a:	fb03 2309 	mla	r3, r3, r9, r2
 801ea1e:	b280      	uxth	r0, r0
 801ea20:	b29b      	uxth	r3, r3
 801ea22:	b289      	uxth	r1, r1
 801ea24:	1c42      	adds	r2, r0, #1
 801ea26:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ea2a:	1c4f      	adds	r7, r1, #1
 801ea2c:	1c5a      	adds	r2, r3, #1
 801ea2e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ea32:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801ea36:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ea3a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ea3e:	0949      	lsrs	r1, r1, #5
 801ea40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea42:	4310      	orrs	r0, r2
 801ea44:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ea48:	4308      	orrs	r0, r1
 801ea4a:	f823 0b02 	strh.w	r0, [r3], #2
 801ea4e:	930e      	str	r3, [sp, #56]	; 0x38
 801ea50:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ea52:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ea56:	449a      	add	sl, r3
 801ea58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ea5a:	441d      	add	r5, r3
 801ea5c:	e6ed      	b.n	801e83a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801ea5e:	2800      	cmp	r0, #0
 801ea60:	f43f af7f 	beq.w	801e962 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ea64:	5cd3      	ldrb	r3, [r2, r3]
 801ea66:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ea6a:	9310      	str	r3, [sp, #64]	; 0x40
 801ea6c:	e779      	b.n	801e962 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ea6e:	b019      	add	sp, #100	; 0x64
 801ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ea74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea78:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801ea7c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801ea80:	fb08 470e 	mla	r7, r8, lr, r4
 801ea84:	f1b8 0f00 	cmp.w	r8, #0
 801ea88:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801ea8c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801ea90:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801ea94:	eb02 0907 	add.w	r9, r2, r7
 801ea98:	8808      	ldrh	r0, [r1, #0]
 801ea9a:	db67      	blt.n	801eb6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801ea9c:	45c2      	cmp	sl, r8
 801ea9e:	dd65      	ble.n	801eb6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801eaa0:	2c00      	cmp	r4, #0
 801eaa2:	db61      	blt.n	801eb68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801eaa4:	45a6      	cmp	lr, r4
 801eaa6:	dd5f      	ble.n	801eb68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801eaa8:	5dd2      	ldrb	r2, [r2, r7]
 801eaaa:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801eaae:	1c62      	adds	r2, r4, #1
 801eab0:	d45f      	bmi.n	801eb72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801eab2:	4596      	cmp	lr, r2
 801eab4:	dd5d      	ble.n	801eb72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801eab6:	2d00      	cmp	r5, #0
 801eab8:	d05b      	beq.n	801eb72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801eaba:	f899 2001 	ldrb.w	r2, [r9, #1]
 801eabe:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801eac2:	f118 0801 	adds.w	r8, r8, #1
 801eac6:	d458      	bmi.n	801eb7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801eac8:	45c2      	cmp	sl, r8
 801eaca:	dd56      	ble.n	801eb7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801eacc:	2e00      	cmp	r6, #0
 801eace:	d054      	beq.n	801eb7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ead0:	2c00      	cmp	r4, #0
 801ead2:	db50      	blt.n	801eb76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801ead4:	45a6      	cmp	lr, r4
 801ead6:	dd4e      	ble.n	801eb76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801ead8:	f819 200e 	ldrb.w	r2, [r9, lr]
 801eadc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801eae0:	3401      	adds	r4, #1
 801eae2:	d407      	bmi.n	801eaf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801eae4:	45a6      	cmp	lr, r4
 801eae6:	dd05      	ble.n	801eaf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801eae8:	b125      	cbz	r5, 801eaf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801eaea:	44ce      	add	lr, r9
 801eaec:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801eaf0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801eaf4:	fb15 f406 	smulbb	r4, r5, r6
 801eaf8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801eafc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801eb00:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801eb04:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801eb08:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801eb0c:	ea43 0c0c 	orr.w	ip, r3, ip
 801eb10:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801eb14:	f1c6 0310 	rsb	r3, r6, #16
 801eb18:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801eb1c:	1b5b      	subs	r3, r3, r5
 801eb1e:	ea4e 0707 	orr.w	r7, lr, r7
 801eb22:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801eb26:	437d      	muls	r5, r7
 801eb28:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eb2c:	fb03 5c0c 	mla	ip, r3, ip, r5
 801eb30:	0403      	lsls	r3, r0, #16
 801eb32:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801eb36:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801eb3a:	4318      	orrs	r0, r3
 801eb3c:	fb04 c000 	mla	r0, r4, r0, ip
 801eb40:	0413      	lsls	r3, r2, #16
 801eb42:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801eb46:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801eb4a:	4313      	orrs	r3, r2
 801eb4c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801eb50:	fb06 0003 	mla	r0, r6, r3, r0
 801eb54:	0d43      	lsrs	r3, r0, #21
 801eb56:	0940      	lsrs	r0, r0, #5
 801eb58:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eb5c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801eb60:	4318      	orrs	r0, r3
 801eb62:	8008      	strh	r0, [r1, #0]
 801eb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb68:	4684      	mov	ip, r0
 801eb6a:	e7a0      	b.n	801eaae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801eb6c:	4607      	mov	r7, r0
 801eb6e:	4684      	mov	ip, r0
 801eb70:	e7a7      	b.n	801eac2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801eb72:	4607      	mov	r7, r0
 801eb74:	e7a5      	b.n	801eac2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801eb76:	4602      	mov	r2, r0
 801eb78:	e7b2      	b.n	801eae0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801eb7a:	4602      	mov	r2, r0
 801eb7c:	e7ba      	b.n	801eaf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801eb7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eb82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb86:	b093      	sub	sp, #76	; 0x4c
 801eb88:	920f      	str	r2, [sp, #60]	; 0x3c
 801eb8a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801eb8c:	9010      	str	r0, [sp, #64]	; 0x40
 801eb8e:	6850      	ldr	r0, [r2, #4]
 801eb90:	9108      	str	r1, [sp, #32]
 801eb92:	9306      	str	r3, [sp, #24]
 801eb94:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801eb98:	fb00 1303 	mla	r3, r0, r3, r1
 801eb9c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801eba0:	6812      	ldr	r2, [r2, #0]
 801eba2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801eba6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	9307      	str	r3, [sp, #28]
 801ebac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ebae:	685f      	ldr	r7, [r3, #4]
 801ebb0:	3704      	adds	r7, #4
 801ebb2:	9b08      	ldr	r3, [sp, #32]
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	dc03      	bgt.n	801ebc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ebb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	f340 81b2 	ble.w	801ef24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ebc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ebc2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ebc6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ebca:	1e48      	subs	r0, r1, #1
 801ebcc:	f102 3cff 	add.w	ip, r2, #4294967295
 801ebd0:	9b06      	ldr	r3, [sp, #24]
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	f340 80a9 	ble.w	801ed2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ebd8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ebdc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ebe0:	d406      	bmi.n	801ebf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebe2:	4586      	cmp	lr, r0
 801ebe4:	da04      	bge.n	801ebf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	db02      	blt.n	801ebf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebea:	4563      	cmp	r3, ip
 801ebec:	f2c0 809e 	blt.w	801ed2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ebf0:	f11e 0e01 	adds.w	lr, lr, #1
 801ebf4:	f100 808f 	bmi.w	801ed16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ebf8:	4571      	cmp	r1, lr
 801ebfa:	f2c0 808c 	blt.w	801ed16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ebfe:	3301      	adds	r3, #1
 801ec00:	f100 8089 	bmi.w	801ed16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ec04:	429a      	cmp	r2, r3
 801ec06:	f2c0 8086 	blt.w	801ed16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ec0a:	46c8      	mov	r8, r9
 801ec0c:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ec10:	f1bb 0f00 	cmp.w	fp, #0
 801ec14:	f340 80a6 	ble.w	801ed64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ec18:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ec1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ec1c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ec20:	1422      	asrs	r2, r4, #16
 801ec22:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ec26:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801ec2a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ec2e:	689b      	ldr	r3, [r3, #8]
 801ec30:	f100 80e3 	bmi.w	801edfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec34:	f103 3aff 	add.w	sl, r3, #4294967295
 801ec38:	4552      	cmp	r2, sl
 801ec3a:	f280 80de 	bge.w	801edfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec3e:	f1bc 0f00 	cmp.w	ip, #0
 801ec42:	f2c0 80da 	blt.w	801edfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec46:	f10e 3aff 	add.w	sl, lr, #4294967295
 801ec4a:	45d4      	cmp	ip, sl
 801ec4c:	f280 80d5 	bge.w	801edfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec50:	b21b      	sxth	r3, r3
 801ec52:	fb0c 2203 	mla	r2, ip, r3, r2
 801ec56:	9d07      	ldr	r5, [sp, #28]
 801ec58:	eb05 0a02 	add.w	sl, r5, r2
 801ec5c:	5caa      	ldrb	r2, [r5, r2]
 801ec5e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801ec62:	2800      	cmp	r0, #0
 801ec64:	f000 80c0 	beq.w	801ede8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ec68:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ec6c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801ec70:	920b      	str	r2, [sp, #44]	; 0x2c
 801ec72:	b151      	cbz	r1, 801ec8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ec74:	eb0a 0203 	add.w	r2, sl, r3
 801ec78:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ec7c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ec80:	9309      	str	r3, [sp, #36]	; 0x24
 801ec82:	7853      	ldrb	r3, [r2, #1]
 801ec84:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ec88:	930c      	str	r3, [sp, #48]	; 0x30
 801ec8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec8c:	fb10 f201 	smulbb	r2, r0, r1
 801ec90:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ec94:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ec98:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ec9c:	ea4c 0c03 	orr.w	ip, ip, r3
 801eca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801eca4:	041b      	lsls	r3, r3, #16
 801eca6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ecaa:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ecae:	10d2      	asrs	r2, r2, #3
 801ecb0:	432b      	orrs	r3, r5
 801ecb2:	4353      	muls	r3, r2
 801ecb4:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801ecb8:	fb0a 330c 	mla	r3, sl, ip, r3
 801ecbc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ecc0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ecc4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ecc8:	ea4c 0e0e 	orr.w	lr, ip, lr
 801eccc:	f1c1 0c10 	rsb	ip, r1, #16
 801ecd0:	ebac 0c00 	sub.w	ip, ip, r0
 801ecd4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ecd8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ecdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecde:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801ece2:	0418      	lsls	r0, r3, #16
 801ece4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ece8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ecec:	4318      	orrs	r0, r3
 801ecee:	fb02 c200 	mla	r2, r2, r0, ip
 801ecf2:	0d53      	lsrs	r3, r2, #21
 801ecf4:	0952      	lsrs	r2, r2, #5
 801ecf6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ecfa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ecfe:	431a      	orrs	r2, r3
 801ed00:	f8a8 2000 	strh.w	r2, [r8]
 801ed04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ed06:	f108 0802 	add.w	r8, r8, #2
 801ed0a:	441c      	add	r4, r3
 801ed0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ed0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ed12:	441e      	add	r6, r3
 801ed14:	e77c      	b.n	801ec10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ed16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ed18:	f109 0902 	add.w	r9, r9, #2
 801ed1c:	441c      	add	r4, r3
 801ed1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ed20:	441e      	add	r6, r3
 801ed22:	9b06      	ldr	r3, [sp, #24]
 801ed24:	3b01      	subs	r3, #1
 801ed26:	9306      	str	r3, [sp, #24]
 801ed28:	e752      	b.n	801ebd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ed2a:	d020      	beq.n	801ed6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ed2c:	9b06      	ldr	r3, [sp, #24]
 801ed2e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ed30:	3b01      	subs	r3, #1
 801ed32:	fb00 4003 	mla	r0, r0, r3, r4
 801ed36:	1400      	asrs	r0, r0, #16
 801ed38:	f53f af67 	bmi.w	801ec0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ed3c:	3901      	subs	r1, #1
 801ed3e:	4288      	cmp	r0, r1
 801ed40:	f6bf af63 	bge.w	801ec0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ed44:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ed46:	fb01 6303 	mla	r3, r1, r3, r6
 801ed4a:	141b      	asrs	r3, r3, #16
 801ed4c:	f53f af5d 	bmi.w	801ec0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ed50:	3a01      	subs	r2, #1
 801ed52:	4293      	cmp	r3, r2
 801ed54:	f6bf af59 	bge.w	801ec0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ed58:	46ca      	mov	sl, r9
 801ed5a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ed5e:	f1b8 0f00 	cmp.w	r8, #0
 801ed62:	dc67      	bgt.n	801ee34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ed64:	9b06      	ldr	r3, [sp, #24]
 801ed66:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ed6a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ed6e:	9b08      	ldr	r3, [sp, #32]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	f340 80d7 	ble.w	801ef24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ed76:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed7e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed86:	eeb0 6a62 	vmov.f32	s12, s5
 801ed8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed9e:	ee16 4a10 	vmov	r4, s12
 801eda2:	eeb0 6a43 	vmov.f32	s12, s6
 801eda6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801edaa:	ee12 2a90 	vmov	r2, s5
 801edae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801edb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801edb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801edbc:	ee13 2a10 	vmov	r2, s6
 801edc0:	931f      	str	r3, [sp, #124]	; 0x7c
 801edc2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801edc4:	ee16 6a10 	vmov	r6, s12
 801edc8:	fb92 f3f3 	sdiv	r3, r2, r3
 801edcc:	9320      	str	r3, [sp, #128]	; 0x80
 801edce:	9b08      	ldr	r3, [sp, #32]
 801edd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801edd2:	3b01      	subs	r3, #1
 801edd4:	9308      	str	r3, [sp, #32]
 801edd6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801edd8:	bf08      	it	eq
 801edda:	4613      	moveq	r3, r2
 801eddc:	eeb0 3a67 	vmov.f32	s6, s15
 801ede0:	9306      	str	r3, [sp, #24]
 801ede2:	eef0 2a47 	vmov.f32	s5, s14
 801ede6:	e6e4      	b.n	801ebb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ede8:	2900      	cmp	r1, #0
 801edea:	f43f af4e 	beq.w	801ec8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801edee:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801edf2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801edf6:	9309      	str	r3, [sp, #36]	; 0x24
 801edf8:	e747      	b.n	801ec8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801edfa:	f112 0a01 	adds.w	sl, r2, #1
 801edfe:	d481      	bmi.n	801ed04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee00:	4553      	cmp	r3, sl
 801ee02:	f6ff af7f 	blt.w	801ed04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee06:	f11c 0a01 	adds.w	sl, ip, #1
 801ee0a:	f53f af7b 	bmi.w	801ed04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee0e:	45d6      	cmp	lr, sl
 801ee10:	f6ff af78 	blt.w	801ed04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee14:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801ee18:	b21b      	sxth	r3, r3
 801ee1a:	fa0f f28e 	sxth.w	r2, lr
 801ee1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ee22:	9201      	str	r2, [sp, #4]
 801ee24:	9300      	str	r3, [sp, #0]
 801ee26:	9a07      	ldr	r2, [sp, #28]
 801ee28:	463b      	mov	r3, r7
 801ee2a:	4641      	mov	r1, r8
 801ee2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ee2e:	f7ff fe21 	bl	801ea74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801ee32:	e767      	b.n	801ed04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ee36:	1422      	asrs	r2, r4, #16
 801ee38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ee3c:	1431      	asrs	r1, r6, #16
 801ee3e:	fb03 2101 	mla	r1, r3, r1, r2
 801ee42:	9d07      	ldr	r5, [sp, #28]
 801ee44:	9a07      	ldr	r2, [sp, #28]
 801ee46:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801ee4a:	440a      	add	r2, r1
 801ee4c:	5c69      	ldrb	r1, [r5, r1]
 801ee4e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ee52:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801ee56:	f1be 0f00 	cmp.w	lr, #0
 801ee5a:	d05c      	beq.n	801ef16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801ee5c:	f892 c001 	ldrb.w	ip, [r2, #1]
 801ee60:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801ee64:	950d      	str	r5, [sp, #52]	; 0x34
 801ee66:	b150      	cbz	r0, 801ee7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ee68:	eb02 0c03 	add.w	ip, r2, r3
 801ee6c:	5cd3      	ldrb	r3, [r2, r3]
 801ee6e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ee72:	930a      	str	r3, [sp, #40]	; 0x28
 801ee74:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ee78:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ee7c:	930e      	str	r3, [sp, #56]	; 0x38
 801ee7e:	fb1e f200 	smulbb	r2, lr, r0
 801ee82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee84:	10d2      	asrs	r2, r2, #3
 801ee86:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ee8a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ee8e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ee92:	ea4c 0c03 	orr.w	ip, ip, r3
 801ee96:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801ee9a:	9311      	str	r3, [sp, #68]	; 0x44
 801ee9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee9e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801eea0:	041b      	lsls	r3, r3, #16
 801eea2:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801eea6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801eeaa:	ea43 030b 	orr.w	r3, r3, fp
 801eeae:	4353      	muls	r3, r2
 801eeb0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801eeb2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801eeb6:	fb05 3c0c 	mla	ip, r5, ip, r3
 801eeba:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801eebe:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801eec2:	ea43 0b01 	orr.w	fp, r3, r1
 801eec6:	f1c0 0110 	rsb	r1, r0, #16
 801eeca:	eba1 0e0e 	sub.w	lr, r1, lr
 801eece:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801eed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eed4:	fb0e cc0b 	mla	ip, lr, fp, ip
 801eed8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801eedc:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801eee0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801eee4:	ea4b 0e0e 	orr.w	lr, fp, lr
 801eee8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801eeec:	fb02 cc0e 	mla	ip, r2, lr, ip
 801eef0:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801eef4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801eef8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eefc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ef00:	ea43 0c0c 	orr.w	ip, r3, ip
 801ef04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ef06:	f82a cb02 	strh.w	ip, [sl], #2
 801ef0a:	441c      	add	r4, r3
 801ef0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ef0e:	f108 38ff 	add.w	r8, r8, #4294967295
 801ef12:	441e      	add	r6, r3
 801ef14:	e723      	b.n	801ed5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ef16:	2800      	cmp	r0, #0
 801ef18:	d0b1      	beq.n	801ee7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ef1a:	5cd3      	ldrb	r3, [r2, r3]
 801ef1c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ef20:	930a      	str	r3, [sp, #40]	; 0x28
 801ef22:	e7ac      	b.n	801ee7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ef24:	b013      	add	sp, #76	; 0x4c
 801ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801ef2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef2e:	880d      	ldrh	r5, [r1, #0]
 801ef30:	b087      	sub	sp, #28
 801ef32:	10ef      	asrs	r7, r5, #3
 801ef34:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801ef38:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ef3c:	00ed      	lsls	r5, r5, #3
 801ef3e:	9701      	str	r7, [sp, #4]
 801ef40:	b2ed      	uxtb	r5, r5
 801ef42:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801ef46:	9502      	str	r5, [sp, #8]
 801ef48:	9d01      	ldr	r5, [sp, #4]
 801ef4a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801ef4e:	fb06 0709 	mla	r7, r6, r9, r0
 801ef52:	9103      	str	r1, [sp, #12]
 801ef54:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801ef58:	022d      	lsls	r5, r5, #8
 801ef5a:	9902      	ldr	r1, [sp, #8]
 801ef5c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801ef60:	430d      	orrs	r5, r1
 801ef62:	2e00      	cmp	r6, #0
 801ef64:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801ef68:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801ef6c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801ef70:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801ef74:	eb02 0c07 	add.w	ip, r2, r7
 801ef78:	9505      	str	r5, [sp, #20]
 801ef7a:	f2c0 80b6 	blt.w	801f0ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ef7e:	45b3      	cmp	fp, r6
 801ef80:	f340 80b3 	ble.w	801f0ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ef84:	2800      	cmp	r0, #0
 801ef86:	f2c0 80ae 	blt.w	801f0e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ef8a:	4581      	cmp	r9, r0
 801ef8c:	f340 80ab 	ble.w	801f0e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ef90:	5dd7      	ldrb	r7, [r2, r7]
 801ef92:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ef96:	441f      	add	r7, r3
 801ef98:	1c42      	adds	r2, r0, #1
 801ef9a:	f100 80a9 	bmi.w	801f0f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ef9e:	4591      	cmp	r9, r2
 801efa0:	f340 80a6 	ble.w	801f0f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801efa4:	2c00      	cmp	r4, #0
 801efa6:	f000 80a3 	beq.w	801f0f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801efaa:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801efae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801efb2:	441d      	add	r5, r3
 801efb4:	3601      	adds	r6, #1
 801efb6:	f100 809f 	bmi.w	801f0f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801efba:	45b3      	cmp	fp, r6
 801efbc:	f340 809c 	ble.w	801f0f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801efc0:	f1be 0f00 	cmp.w	lr, #0
 801efc4:	f000 8098 	beq.w	801f0f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801efc8:	2800      	cmp	r0, #0
 801efca:	f2c0 8093 	blt.w	801f0f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801efce:	4581      	cmp	r9, r0
 801efd0:	f340 8090 	ble.w	801f0f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801efd4:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801efd8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801efdc:	441e      	add	r6, r3
 801efde:	3001      	adds	r0, #1
 801efe0:	f100 808d 	bmi.w	801f0fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801efe4:	4581      	cmp	r9, r0
 801efe6:	f340 808a 	ble.w	801f0fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801efea:	2c00      	cmp	r4, #0
 801efec:	f000 8087 	beq.w	801f0fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801eff0:	44e1      	add	r9, ip
 801eff2:	f899 2001 	ldrb.w	r2, [r9, #1]
 801eff6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801effa:	4413      	add	r3, r2
 801effc:	b2a4      	uxth	r4, r4
 801effe:	fa1f fe8e 	uxth.w	lr, lr
 801f002:	fb04 fb0e 	mul.w	fp, r4, lr
 801f006:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801f00a:	fa1f f08e 	uxth.w	r0, lr
 801f00e:	fa1f fe88 	uxth.w	lr, r8
 801f012:	ea6f 0808 	mvn.w	r8, r8
 801f016:	0124      	lsls	r4, r4, #4
 801f018:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801f01c:	eba4 040b 	sub.w	r4, r4, fp
 801f020:	b2a2      	uxth	r2, r4
 801f022:	78ac      	ldrb	r4, [r5, #2]
 801f024:	f897 c002 	ldrb.w	ip, [r7, #2]
 801f028:	4354      	muls	r4, r2
 801f02a:	eba9 0900 	sub.w	r9, r9, r0
 801f02e:	fa1f f989 	uxth.w	r9, r9
 801f032:	fb09 440c 	mla	r4, r9, ip, r4
 801f036:	f896 c002 	ldrb.w	ip, [r6, #2]
 801f03a:	fa5f f888 	uxtb.w	r8, r8
 801f03e:	fb00 440c 	mla	r4, r0, ip, r4
 801f042:	f893 c002 	ldrb.w	ip, [r3, #2]
 801f046:	fb1a fa08 	smulbb	sl, sl, r8
 801f04a:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f04e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f052:	fb0c ac0e 	mla	ip, ip, lr, sl
 801f056:	f895 a001 	ldrb.w	sl, [r5, #1]
 801f05a:	782d      	ldrb	r5, [r5, #0]
 801f05c:	fb02 fa0a 	mul.w	sl, r2, sl
 801f060:	436a      	muls	r2, r5
 801f062:	787c      	ldrb	r4, [r7, #1]
 801f064:	783f      	ldrb	r7, [r7, #0]
 801f066:	fb09 aa04 	mla	sl, r9, r4, sl
 801f06a:	fb09 2207 	mla	r2, r9, r7, r2
 801f06e:	7874      	ldrb	r4, [r6, #1]
 801f070:	7835      	ldrb	r5, [r6, #0]
 801f072:	fb00 aa04 	mla	sl, r0, r4, sl
 801f076:	fb00 2005 	mla	r0, r0, r5, r2
 801f07a:	785c      	ldrb	r4, [r3, #1]
 801f07c:	781b      	ldrb	r3, [r3, #0]
 801f07e:	fb0b a404 	mla	r4, fp, r4, sl
 801f082:	9901      	ldr	r1, [sp, #4]
 801f084:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f088:	9b02      	ldr	r3, [sp, #8]
 801f08a:	fb11 fa08 	smulbb	sl, r1, r8
 801f08e:	fb13 f808 	smulbb	r8, r3, r8
 801f092:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f096:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f09a:	fb04 a40e 	mla	r4, r4, lr, sl
 801f09e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801f0a2:	fa1f fc8c 	uxth.w	ip, ip
 801f0a6:	f10c 0301 	add.w	r3, ip, #1
 801f0aa:	fa1f fe8e 	uxth.w	lr, lr
 801f0ae:	b2a4      	uxth	r4, r4
 801f0b0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f0b4:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801f0b8:	f104 0a01 	add.w	sl, r4, #1
 801f0bc:	f10e 0c01 	add.w	ip, lr, #1
 801f0c0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f0c4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f0c8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f0cc:	0964      	lsrs	r4, r4, #5
 801f0ce:	ea4c 0c03 	orr.w	ip, ip, r3
 801f0d2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f0d6:	9b03      	ldr	r3, [sp, #12]
 801f0d8:	ea4c 0c04 	orr.w	ip, ip, r4
 801f0dc:	f8a3 c000 	strh.w	ip, [r3]
 801f0e0:	b007      	add	sp, #28
 801f0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0e6:	af05      	add	r7, sp, #20
 801f0e8:	e756      	b.n	801ef98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801f0ea:	ad05      	add	r5, sp, #20
 801f0ec:	462f      	mov	r7, r5
 801f0ee:	e761      	b.n	801efb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f0f0:	ad05      	add	r5, sp, #20
 801f0f2:	e75f      	b.n	801efb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f0f4:	ae05      	add	r6, sp, #20
 801f0f6:	e772      	b.n	801efde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f0f8:	ab05      	add	r3, sp, #20
 801f0fa:	461e      	mov	r6, r3
 801f0fc:	e77e      	b.n	801effc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801f0fe:	ab05      	add	r3, sp, #20
 801f100:	e77c      	b.n	801effc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801f102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f106:	b095      	sub	sp, #84	; 0x54
 801f108:	9212      	str	r2, [sp, #72]	; 0x48
 801f10a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f10c:	9013      	str	r0, [sp, #76]	; 0x4c
 801f10e:	9309      	str	r3, [sp, #36]	; 0x24
 801f110:	6850      	ldr	r0, [r2, #4]
 801f112:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801f116:	910e      	str	r1, [sp, #56]	; 0x38
 801f118:	930f      	str	r3, [sp, #60]	; 0x3c
 801f11a:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801f11e:	fb00 1303 	mla	r3, r0, r3, r1
 801f122:	6812      	ldr	r2, [r2, #0]
 801f124:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f128:	930a      	str	r3, [sp, #40]	; 0x28
 801f12a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f12c:	681b      	ldr	r3, [r3, #0]
 801f12e:	930d      	str	r3, [sp, #52]	; 0x34
 801f130:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f132:	685c      	ldr	r4, [r3, #4]
 801f134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f136:	3404      	adds	r4, #4
 801f138:	43db      	mvns	r3, r3
 801f13a:	b2db      	uxtb	r3, r3
 801f13c:	930b      	str	r3, [sp, #44]	; 0x2c
 801f13e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f140:	2b00      	cmp	r3, #0
 801f142:	dc03      	bgt.n	801f14c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f144:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f146:	2b00      	cmp	r3, #0
 801f148:	f340 8255 	ble.w	801f5f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f14c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f14e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f152:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f156:	1e48      	subs	r0, r1, #1
 801f158:	1e55      	subs	r5, r2, #1
 801f15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f15c:	2b00      	cmp	r3, #0
 801f15e:	f340 80f9 	ble.w	801f354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f162:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801f164:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f166:	1436      	asrs	r6, r6, #16
 801f168:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f16c:	d406      	bmi.n	801f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f16e:	4286      	cmp	r6, r0
 801f170:	da04      	bge.n	801f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f172:	2b00      	cmp	r3, #0
 801f174:	db02      	blt.n	801f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f176:	42ab      	cmp	r3, r5
 801f178:	f2c0 80ed 	blt.w	801f356 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f17c:	3601      	adds	r6, #1
 801f17e:	f100 80da 	bmi.w	801f336 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f182:	42b1      	cmp	r1, r6
 801f184:	f2c0 80d7 	blt.w	801f336 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f188:	3301      	adds	r3, #1
 801f18a:	f100 80d4 	bmi.w	801f336 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f18e:	429a      	cmp	r2, r3
 801f190:	f2c0 80d1 	blt.w	801f336 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f196:	9311      	str	r3, [sp, #68]	; 0x44
 801f198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f19a:	930c      	str	r3, [sp, #48]	; 0x30
 801f19c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	f340 80fa 	ble.w	801f398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f1a4:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f1a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f1a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f1aa:	68c6      	ldr	r6, [r0, #12]
 801f1ac:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f1ae:	141d      	asrs	r5, r3, #16
 801f1b0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f1b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f1b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f1b8:	1400      	asrs	r0, r0, #16
 801f1ba:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f1be:	6892      	ldr	r2, [r2, #8]
 801f1c0:	f100 813e 	bmi.w	801f440 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f1c4:	1e57      	subs	r7, r2, #1
 801f1c6:	42b8      	cmp	r0, r7
 801f1c8:	f280 813a 	bge.w	801f440 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f1cc:	2d00      	cmp	r5, #0
 801f1ce:	f2c0 8137 	blt.w	801f440 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f1d2:	1e77      	subs	r7, r6, #1
 801f1d4:	42bd      	cmp	r5, r7
 801f1d6:	f280 8133 	bge.w	801f440 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f1da:	b212      	sxth	r2, r2
 801f1dc:	fb05 0002 	mla	r0, r5, r2, r0
 801f1e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f1e2:	f815 a000 	ldrb.w	sl, [r5, r0]
 801f1e6:	182e      	adds	r6, r5, r0
 801f1e8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801f1ec:	eb04 050a 	add.w	r5, r4, sl
 801f1f0:	2b00      	cmp	r3, #0
 801f1f2:	f000 8117 	beq.w	801f424 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f1f6:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f1fa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f1fe:	44a4      	add	ip, r4
 801f200:	2900      	cmp	r1, #0
 801f202:	f000 8117 	beq.w	801f434 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f206:	18b0      	adds	r0, r6, r2
 801f208:	7840      	ldrb	r0, [r0, #1]
 801f20a:	5cb2      	ldrb	r2, [r6, r2]
 801f20c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f214:	4422      	add	r2, r4
 801f216:	4420      	add	r0, r4
 801f218:	b29b      	uxth	r3, r3
 801f21a:	b289      	uxth	r1, r1
 801f21c:	fb03 f901 	mul.w	r9, r3, r1
 801f220:	011b      	lsls	r3, r3, #4
 801f222:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801f226:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f22a:	eba3 0309 	sub.w	r3, r3, r9
 801f22e:	b29b      	uxth	r3, r3
 801f230:	435f      	muls	r7, r3
 801f232:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f236:	b289      	uxth	r1, r1
 801f238:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f23c:	eba8 0801 	sub.w	r8, r8, r1
 801f240:	fa1f f888 	uxth.w	r8, r8
 801f244:	fb08 770b 	mla	r7, r8, fp, r7
 801f248:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f24c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f24e:	fb01 770b 	mla	r7, r1, fp, r7
 801f252:	f8b6 e000 	ldrh.w	lr, [r6]
 801f256:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f25a:	9310      	str	r3, [sp, #64]	; 0x40
 801f25c:	fb09 770b 	mla	r7, r9, fp, r7
 801f260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f262:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801f266:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f26a:	fb1b fb03 	smulbb	fp, fp, r3
 801f26e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801f272:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f276:	fb07 b706 	mla	r7, r7, r6, fp
 801f27a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f27c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f280:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f284:	f89c c000 	ldrb.w	ip, [ip]
 801f288:	435d      	muls	r5, r3
 801f28a:	fb08 550b 	mla	r5, r8, fp, r5
 801f28e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f294:	fb01 550b 	mla	r5, r1, fp, r5
 801f298:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f29c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801f2a0:	fb09 550b 	mla	r5, r9, fp, r5
 801f2a4:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801f2a8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f2ac:	fb1b fb03 	smulbb	fp, fp, r3
 801f2b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2b2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f2b6:	fb03 f30c 	mul.w	r3, r3, ip
 801f2ba:	fb08 330a 	mla	r3, r8, sl, r3
 801f2be:	f892 c000 	ldrb.w	ip, [r2]
 801f2c2:	fa5f fe8e 	uxtb.w	lr, lr
 801f2c6:	fb01 330c 	mla	r3, r1, ip, r3
 801f2ca:	f890 c000 	ldrb.w	ip, [r0]
 801f2ce:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f2d2:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f2d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2d8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f2dc:	fb1e fe03 	smulbb	lr, lr, r3
 801f2e0:	fb05 b506 	mla	r5, r5, r6, fp
 801f2e4:	fb0c e606 	mla	r6, ip, r6, lr
 801f2e8:	b2bf      	uxth	r7, r7
 801f2ea:	1c7b      	adds	r3, r7, #1
 801f2ec:	b2ad      	uxth	r5, r5
 801f2ee:	b2b6      	uxth	r6, r6
 801f2f0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f2f4:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801f2f8:	f105 0b01 	add.w	fp, r5, #1
 801f2fc:	1c77      	adds	r7, r6, #1
 801f2fe:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f302:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f306:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f30a:	096d      	lsrs	r5, r5, #5
 801f30c:	431f      	orrs	r7, r3
 801f30e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f314:	433d      	orrs	r5, r7
 801f316:	801d      	strh	r5, [r3, #0]
 801f318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f31a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f31c:	3302      	adds	r3, #2
 801f31e:	930c      	str	r3, [sp, #48]	; 0x30
 801f320:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f322:	4413      	add	r3, r2
 801f324:	931f      	str	r3, [sp, #124]	; 0x7c
 801f326:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f328:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f32a:	4413      	add	r3, r2
 801f32c:	9320      	str	r3, [sp, #128]	; 0x80
 801f32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f330:	3b01      	subs	r3, #1
 801f332:	9311      	str	r3, [sp, #68]	; 0x44
 801f334:	e732      	b.n	801f19c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f338:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801f33a:	4433      	add	r3, r6
 801f33c:	931f      	str	r3, [sp, #124]	; 0x7c
 801f33e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801f340:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f342:	4433      	add	r3, r6
 801f344:	9320      	str	r3, [sp, #128]	; 0x80
 801f346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f348:	3b01      	subs	r3, #1
 801f34a:	9309      	str	r3, [sp, #36]	; 0x24
 801f34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f34e:	3302      	adds	r3, #2
 801f350:	930a      	str	r3, [sp, #40]	; 0x28
 801f352:	e702      	b.n	801f15a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f354:	d027      	beq.n	801f3a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f358:	9821      	ldr	r0, [sp, #132]	; 0x84
 801f35a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f35c:	3b01      	subs	r3, #1
 801f35e:	fb00 5003 	mla	r0, r0, r3, r5
 801f362:	1400      	asrs	r0, r0, #16
 801f364:	f53f af16 	bmi.w	801f194 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f368:	3901      	subs	r1, #1
 801f36a:	4288      	cmp	r0, r1
 801f36c:	f6bf af12 	bge.w	801f194 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f370:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f372:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f374:	fb01 0303 	mla	r3, r1, r3, r0
 801f378:	141b      	asrs	r3, r3, #16
 801f37a:	f53f af0b 	bmi.w	801f194 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f37e:	3a01      	subs	r2, #1
 801f380:	4293      	cmp	r3, r2
 801f382:	f6bf af07 	bge.w	801f194 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f388:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801f38c:	9311      	str	r3, [sp, #68]	; 0x44
 801f38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f390:	930c      	str	r3, [sp, #48]	; 0x30
 801f392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f394:	2b00      	cmp	r3, #0
 801f396:	dc70      	bgt.n	801f47a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801f398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f39a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f39c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f3a4:	930a      	str	r3, [sp, #40]	; 0x28
 801f3a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	f340 8124 	ble.w	801f5f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f3ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f3b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f3be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3c2:	eef0 6a62 	vmov.f32	s13, s5
 801f3c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3da:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801f3de:	eef0 6a43 	vmov.f32	s13, s6
 801f3e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3e6:	ee12 2a90 	vmov	r2, s5
 801f3ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f3f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3f8:	ee13 2a10 	vmov	r2, s6
 801f3fc:	9321      	str	r3, [sp, #132]	; 0x84
 801f3fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f400:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801f404:	fb92 f3f3 	sdiv	r3, r2, r3
 801f408:	9322      	str	r3, [sp, #136]	; 0x88
 801f40a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f40c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f40e:	3b01      	subs	r3, #1
 801f410:	930e      	str	r3, [sp, #56]	; 0x38
 801f412:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f414:	bf08      	it	eq
 801f416:	4613      	moveq	r3, r2
 801f418:	eeb0 3a67 	vmov.f32	s6, s15
 801f41c:	9309      	str	r3, [sp, #36]	; 0x24
 801f41e:	eef0 2a47 	vmov.f32	s5, s14
 801f422:	e68c      	b.n	801f13e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f424:	b149      	cbz	r1, 801f43a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801f426:	4628      	mov	r0, r5
 801f428:	5cb2      	ldrb	r2, [r6, r2]
 801f42a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f42e:	4422      	add	r2, r4
 801f430:	46ac      	mov	ip, r5
 801f432:	e6f1      	b.n	801f218 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f434:	4628      	mov	r0, r5
 801f436:	462a      	mov	r2, r5
 801f438:	e6ee      	b.n	801f218 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f43a:	4628      	mov	r0, r5
 801f43c:	462a      	mov	r2, r5
 801f43e:	e7f7      	b.n	801f430 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801f440:	1c47      	adds	r7, r0, #1
 801f442:	f53f af69 	bmi.w	801f318 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f446:	42ba      	cmp	r2, r7
 801f448:	f6ff af66 	blt.w	801f318 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f44c:	1c6f      	adds	r7, r5, #1
 801f44e:	f53f af63 	bmi.w	801f318 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f452:	42be      	cmp	r6, r7
 801f454:	f6ff af60 	blt.w	801f318 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f458:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f45a:	b236      	sxth	r6, r6
 801f45c:	b212      	sxth	r2, r2
 801f45e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801f462:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801f466:	9002      	str	r0, [sp, #8]
 801f468:	9200      	str	r2, [sp, #0]
 801f46a:	9601      	str	r6, [sp, #4]
 801f46c:	4623      	mov	r3, r4
 801f46e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f472:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f474:	f7ff fd59 	bl	801ef2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801f478:	e74e      	b.n	801f318 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f47a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f47c:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f47e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f482:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f484:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f486:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f48a:	142d      	asrs	r5, r5, #16
 801f48c:	1400      	asrs	r0, r0, #16
 801f48e:	fb02 5000 	mla	r0, r2, r0, r5
 801f492:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f494:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f496:	f815 9000 	ldrb.w	r9, [r5, r0]
 801f49a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f49e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f4a2:	182e      	adds	r6, r5, r0
 801f4a4:	eb04 0509 	add.w	r5, r4, r9
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	f000 8096 	beq.w	801f5da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801f4ae:	7877      	ldrb	r7, [r6, #1]
 801f4b0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f4b4:	4427      	add	r7, r4
 801f4b6:	2900      	cmp	r1, #0
 801f4b8:	f000 8097 	beq.w	801f5ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801f4bc:	18b0      	adds	r0, r6, r2
 801f4be:	7840      	ldrb	r0, [r0, #1]
 801f4c0:	5cb2      	ldrb	r2, [r6, r2]
 801f4c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f4c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f4ca:	4422      	add	r2, r4
 801f4cc:	4420      	add	r0, r4
 801f4ce:	b29b      	uxth	r3, r3
 801f4d0:	b289      	uxth	r1, r1
 801f4d2:	fb03 f801 	mul.w	r8, r3, r1
 801f4d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f4d8:	011b      	lsls	r3, r3, #4
 801f4da:	f8b6 c000 	ldrh.w	ip, [r6]
 801f4de:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f4e2:	78be      	ldrb	r6, [r7, #2]
 801f4e4:	eba3 0308 	sub.w	r3, r3, r8
 801f4e8:	b29b      	uxth	r3, r3
 801f4ea:	435e      	muls	r6, r3
 801f4ec:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f4f0:	b289      	uxth	r1, r1
 801f4f2:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f4f6:	ebae 0e01 	sub.w	lr, lr, r1
 801f4fa:	fa1f fe8e 	uxth.w	lr, lr
 801f4fe:	fb0e 660b 	mla	r6, lr, fp, r6
 801f502:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f506:	9310      	str	r3, [sp, #64]	; 0x40
 801f508:	fb01 660b 	mla	r6, r1, fp, r6
 801f50c:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f512:	fb08 660b 	mla	r6, r8, fp, r6
 801f516:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801f51a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f51e:	fb1b fb03 	smulbb	fp, fp, r3
 801f522:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f526:	fb06 b60a 	mla	r6, r6, sl, fp
 801f52a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f52c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f530:	787d      	ldrb	r5, [r7, #1]
 801f532:	783f      	ldrb	r7, [r7, #0]
 801f534:	435d      	muls	r5, r3
 801f536:	fb0e 550b 	mla	r5, lr, fp, r5
 801f53a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f540:	fb01 550b 	mla	r5, r1, fp, r5
 801f544:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f548:	f814 9009 	ldrb.w	r9, [r4, r9]
 801f54c:	fb08 550b 	mla	r5, r8, fp, r5
 801f550:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801f554:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f558:	fb1b fb03 	smulbb	fp, fp, r3
 801f55c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f55e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f562:	437b      	muls	r3, r7
 801f564:	fb0e 3309 	mla	r3, lr, r9, r3
 801f568:	7817      	ldrb	r7, [r2, #0]
 801f56a:	fa5f fc8c 	uxtb.w	ip, ip
 801f56e:	fb01 3307 	mla	r3, r1, r7, r3
 801f572:	7807      	ldrb	r7, [r0, #0]
 801f574:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f578:	fb08 3707 	mla	r7, r8, r7, r3
 801f57c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f57e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f582:	fb1c fc03 	smulbb	ip, ip, r3
 801f586:	fb05 b50a 	mla	r5, r5, sl, fp
 801f58a:	fb07 c70a 	mla	r7, r7, sl, ip
 801f58e:	b2b6      	uxth	r6, r6
 801f590:	b2ad      	uxth	r5, r5
 801f592:	b2bf      	uxth	r7, r7
 801f594:	1c73      	adds	r3, r6, #1
 801f596:	1c7a      	adds	r2, r7, #1
 801f598:	f105 0b01 	add.w	fp, r5, #1
 801f59c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f5a0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801f5a4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f5a8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f5ac:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f5b0:	096d      	lsrs	r5, r5, #5
 801f5b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f5b4:	4316      	orrs	r6, r2
 801f5b6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f5ba:	432e      	orrs	r6, r5
 801f5bc:	f823 6b02 	strh.w	r6, [r3], #2
 801f5c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f5c2:	930c      	str	r3, [sp, #48]	; 0x30
 801f5c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f5c6:	4413      	add	r3, r2
 801f5c8:	931f      	str	r3, [sp, #124]	; 0x7c
 801f5ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f5cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f5ce:	4413      	add	r3, r2
 801f5d0:	9320      	str	r3, [sp, #128]	; 0x80
 801f5d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f5d4:	3b01      	subs	r3, #1
 801f5d6:	9311      	str	r3, [sp, #68]	; 0x44
 801f5d8:	e6db      	b.n	801f392 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801f5da:	b149      	cbz	r1, 801f5f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801f5dc:	4628      	mov	r0, r5
 801f5de:	5cb2      	ldrb	r2, [r6, r2]
 801f5e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f5e4:	4422      	add	r2, r4
 801f5e6:	462f      	mov	r7, r5
 801f5e8:	e771      	b.n	801f4ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f5ea:	4628      	mov	r0, r5
 801f5ec:	462a      	mov	r2, r5
 801f5ee:	e76e      	b.n	801f4ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f5f0:	4628      	mov	r0, r5
 801f5f2:	462a      	mov	r2, r5
 801f5f4:	e7f7      	b.n	801f5e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801f5f6:	b015      	add	sp, #84	; 0x54
 801f5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801f5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f600:	880f      	ldrh	r7, [r1, #0]
 801f602:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f606:	023c      	lsls	r4, r7, #8
 801f608:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801f60c:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801f610:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f614:	017c      	lsls	r4, r7, #5
 801f616:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801f61a:	00ff      	lsls	r7, r7, #3
 801f61c:	ea4b 0404 	orr.w	r4, fp, r4
 801f620:	b2ff      	uxtb	r7, r7
 801f622:	4327      	orrs	r7, r4
 801f624:	2d00      	cmp	r5, #0
 801f626:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f62a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801f62e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801f632:	eb02 080a 	add.w	r8, r2, sl
 801f636:	9701      	str	r7, [sp, #4]
 801f638:	db7e      	blt.n	801f738 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f63a:	45a9      	cmp	r9, r5
 801f63c:	dd7c      	ble.n	801f738 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f63e:	f1bc 0f00 	cmp.w	ip, #0
 801f642:	db77      	blt.n	801f734 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f644:	45e6      	cmp	lr, ip
 801f646:	dd75      	ble.n	801f734 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f648:	f812 700a 	ldrb.w	r7, [r2, sl]
 801f64c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f650:	441f      	add	r7, r3
 801f652:	f11c 0201 	adds.w	r2, ip, #1
 801f656:	d472      	bmi.n	801f73e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f658:	4596      	cmp	lr, r2
 801f65a:	dd70      	ble.n	801f73e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f65c:	2800      	cmp	r0, #0
 801f65e:	d06e      	beq.n	801f73e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f660:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f664:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f668:	441c      	add	r4, r3
 801f66a:	3501      	adds	r5, #1
 801f66c:	d46b      	bmi.n	801f746 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f66e:	45a9      	cmp	r9, r5
 801f670:	dd69      	ble.n	801f746 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f672:	2e00      	cmp	r6, #0
 801f674:	d067      	beq.n	801f746 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f676:	f1bc 0f00 	cmp.w	ip, #0
 801f67a:	db62      	blt.n	801f742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f67c:	45e6      	cmp	lr, ip
 801f67e:	dd60      	ble.n	801f742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f680:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f688:	441d      	add	r5, r3
 801f68a:	f11c 0201 	adds.w	r2, ip, #1
 801f68e:	d45d      	bmi.n	801f74c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f690:	4596      	cmp	lr, r2
 801f692:	dd5b      	ble.n	801f74c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f694:	2800      	cmp	r0, #0
 801f696:	d059      	beq.n	801f74c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f698:	44c6      	add	lr, r8
 801f69a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f69e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6a2:	4413      	add	r3, r2
 801f6a4:	b280      	uxth	r0, r0
 801f6a6:	b2b2      	uxth	r2, r6
 801f6a8:	fb00 f602 	mul.w	r6, r0, r2
 801f6ac:	0100      	lsls	r0, r0, #4
 801f6ae:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801f6b2:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801f6b6:	1b80      	subs	r0, r0, r6
 801f6b8:	fa1f fc82 	uxth.w	ip, r2
 801f6bc:	b282      	uxth	r2, r0
 801f6be:	78a0      	ldrb	r0, [r4, #2]
 801f6c0:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f6c4:	4350      	muls	r0, r2
 801f6c6:	eba8 080c 	sub.w	r8, r8, ip
 801f6ca:	fa1f f888 	uxth.w	r8, r8
 801f6ce:	fb08 0e0e 	mla	lr, r8, lr, r0
 801f6d2:	78a8      	ldrb	r0, [r5, #2]
 801f6d4:	f897 9000 	ldrb.w	r9, [r7]
 801f6d8:	fb0c e000 	mla	r0, ip, r0, lr
 801f6dc:	f893 e002 	ldrb.w	lr, [r3, #2]
 801f6e0:	787f      	ldrb	r7, [r7, #1]
 801f6e2:	fb06 0e0e 	mla	lr, r6, lr, r0
 801f6e6:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801f6ea:	f894 e000 	ldrb.w	lr, [r4]
 801f6ee:	fb02 fe0e 	mul.w	lr, r2, lr
 801f6f2:	fb08 e909 	mla	r9, r8, r9, lr
 801f6f6:	f895 e000 	ldrb.w	lr, [r5]
 801f6fa:	fb0c 990e 	mla	r9, ip, lr, r9
 801f6fe:	f893 e000 	ldrb.w	lr, [r3]
 801f702:	785b      	ldrb	r3, [r3, #1]
 801f704:	fb06 9e0e 	mla	lr, r6, lr, r9
 801f708:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f70c:	ea4e 0e00 	orr.w	lr, lr, r0
 801f710:	7860      	ldrb	r0, [r4, #1]
 801f712:	4350      	muls	r0, r2
 801f714:	fb08 0007 	mla	r0, r8, r7, r0
 801f718:	786a      	ldrb	r2, [r5, #1]
 801f71a:	fb0c 0202 	mla	r2, ip, r2, r0
 801f71e:	fb06 2303 	mla	r3, r6, r3, r2
 801f722:	095b      	lsrs	r3, r3, #5
 801f724:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f728:	ea4e 0303 	orr.w	r3, lr, r3
 801f72c:	800b      	strh	r3, [r1, #0]
 801f72e:	b003      	add	sp, #12
 801f730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f734:	af01      	add	r7, sp, #4
 801f736:	e78c      	b.n	801f652 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801f738:	ac01      	add	r4, sp, #4
 801f73a:	4627      	mov	r7, r4
 801f73c:	e795      	b.n	801f66a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f73e:	ac01      	add	r4, sp, #4
 801f740:	e793      	b.n	801f66a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f742:	ad01      	add	r5, sp, #4
 801f744:	e7a1      	b.n	801f68a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801f746:	ab01      	add	r3, sp, #4
 801f748:	461d      	mov	r5, r3
 801f74a:	e7ab      	b.n	801f6a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801f74c:	ab01      	add	r3, sp, #4
 801f74e:	e7a9      	b.n	801f6a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801f750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f754:	b08f      	sub	sp, #60	; 0x3c
 801f756:	920c      	str	r2, [sp, #48]	; 0x30
 801f758:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f75a:	900d      	str	r0, [sp, #52]	; 0x34
 801f75c:	6850      	ldr	r0, [r2, #4]
 801f75e:	910a      	str	r1, [sp, #40]	; 0x28
 801f760:	9306      	str	r3, [sp, #24]
 801f762:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801f766:	fb00 1303 	mla	r3, r0, r3, r1
 801f76a:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801f76e:	6812      	ldr	r2, [r2, #0]
 801f770:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f774:	9307      	str	r3, [sp, #28]
 801f776:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	9308      	str	r3, [sp, #32]
 801f77c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f77e:	685c      	ldr	r4, [r3, #4]
 801f780:	3404      	adds	r4, #4
 801f782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f784:	2b00      	cmp	r3, #0
 801f786:	dc03      	bgt.n	801f790 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	f340 81d6 	ble.w	801fb3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801f790:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f792:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f796:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f79a:	1e48      	subs	r0, r1, #1
 801f79c:	1e56      	subs	r6, r2, #1
 801f79e:	9b06      	ldr	r3, [sp, #24]
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	f340 80b7 	ble.w	801f914 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f7a6:	ea5f 472b 	movs.w	r7, fp, asr #16
 801f7aa:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f7ae:	d406      	bmi.n	801f7be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f7b0:	4287      	cmp	r7, r0
 801f7b2:	da04      	bge.n	801f7be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	db02      	blt.n	801f7be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f7b8:	42b3      	cmp	r3, r6
 801f7ba:	f2c0 80ac 	blt.w	801f916 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801f7be:	3701      	adds	r7, #1
 801f7c0:	f100 809d 	bmi.w	801f8fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f7c4:	42b9      	cmp	r1, r7
 801f7c6:	f2c0 809a 	blt.w	801f8fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f7ca:	3301      	adds	r3, #1
 801f7cc:	f100 8097 	bmi.w	801f8fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f7d0:	429a      	cmp	r2, r3
 801f7d2:	f2c0 8094 	blt.w	801f8fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f7d6:	9b06      	ldr	r3, [sp, #24]
 801f7d8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7da:	9b07      	ldr	r3, [sp, #28]
 801f7dc:	9309      	str	r3, [sp, #36]	; 0x24
 801f7de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	f340 80b5 	ble.w	801f950 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f7e6:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f7e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f7ea:	68c7      	ldr	r7, [r0, #12]
 801f7ec:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f7f0:	ea4f 4625 	mov.w	r6, r5, asr #16
 801f7f4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f7f8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f7fc:	6892      	ldr	r2, [r2, #8]
 801f7fe:	f100 80fb 	bmi.w	801f9f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f802:	f102 3cff 	add.w	ip, r2, #4294967295
 801f806:	4560      	cmp	r0, ip
 801f808:	f280 80f6 	bge.w	801f9f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f80c:	2e00      	cmp	r6, #0
 801f80e:	f2c0 80f3 	blt.w	801f9f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f812:	f107 3cff 	add.w	ip, r7, #4294967295
 801f816:	4566      	cmp	r6, ip
 801f818:	f280 80ee 	bge.w	801f9f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f81c:	b212      	sxth	r2, r2
 801f81e:	fb06 0002 	mla	r0, r6, r2, r0
 801f822:	9e08      	ldr	r6, [sp, #32]
 801f824:	1837      	adds	r7, r6, r0
 801f826:	5c30      	ldrb	r0, [r6, r0]
 801f828:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801f82c:	eb04 0c08 	add.w	ip, r4, r8
 801f830:	2b00      	cmp	r3, #0
 801f832:	f000 80d3 	beq.w	801f9dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f836:	787e      	ldrb	r6, [r7, #1]
 801f838:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f83c:	4426      	add	r6, r4
 801f83e:	2900      	cmp	r1, #0
 801f840:	f000 80d4 	beq.w	801f9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801f844:	18b8      	adds	r0, r7, r2
 801f846:	7840      	ldrb	r0, [r0, #1]
 801f848:	5cba      	ldrb	r2, [r7, r2]
 801f84a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f84e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f852:	4422      	add	r2, r4
 801f854:	4420      	add	r0, r4
 801f856:	b29b      	uxth	r3, r3
 801f858:	b289      	uxth	r1, r1
 801f85a:	fb03 f901 	mul.w	r9, r3, r1
 801f85e:	011b      	lsls	r3, r3, #4
 801f860:	78b7      	ldrb	r7, [r6, #2]
 801f862:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f866:	eba3 0309 	sub.w	r3, r3, r9
 801f86a:	b29b      	uxth	r3, r3
 801f86c:	435f      	muls	r7, r3
 801f86e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f872:	b289      	uxth	r1, r1
 801f874:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f878:	ebae 0e01 	sub.w	lr, lr, r1
 801f87c:	fa1f fe8e 	uxth.w	lr, lr
 801f880:	fb0e 770a 	mla	r7, lr, sl, r7
 801f884:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f888:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f88c:	fb01 770a 	mla	r7, r1, sl, r7
 801f890:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f894:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f898:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f89c:	f896 8000 	ldrb.w	r8, [r6]
 801f8a0:	7876      	ldrb	r6, [r6, #1]
 801f8a2:	fb03 f808 	mul.w	r8, r3, r8
 801f8a6:	fb0e 8807 	mla	r8, lr, r7, r8
 801f8aa:	7817      	ldrb	r7, [r2, #0]
 801f8ac:	4373      	muls	r3, r6
 801f8ae:	fb01 8807 	mla	r8, r1, r7, r8
 801f8b2:	7807      	ldrb	r7, [r0, #0]
 801f8b4:	fb0e 330c 	mla	r3, lr, ip, r3
 801f8b8:	fb09 8707 	mla	r7, r9, r7, r8
 801f8bc:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f8c0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f8c4:	ea47 070a 	orr.w	r7, r7, sl
 801f8c8:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f8cc:	fb01 310a 	mla	r1, r1, sl, r3
 801f8d0:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8d6:	fb09 1a0a 	mla	sl, r9, sl, r1
 801f8da:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f8de:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f8e2:	ea47 070a 	orr.w	r7, r7, sl
 801f8e6:	801f      	strh	r7, [r3, #0]
 801f8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8ea:	3302      	adds	r3, #2
 801f8ec:	9309      	str	r3, [sp, #36]	; 0x24
 801f8ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f8f0:	449b      	add	fp, r3
 801f8f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f8f4:	441d      	add	r5, r3
 801f8f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8f8:	3b01      	subs	r3, #1
 801f8fa:	930b      	str	r3, [sp, #44]	; 0x2c
 801f8fc:	e76f      	b.n	801f7de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f8fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f900:	449b      	add	fp, r3
 801f902:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f904:	441d      	add	r5, r3
 801f906:	9b06      	ldr	r3, [sp, #24]
 801f908:	3b01      	subs	r3, #1
 801f90a:	9306      	str	r3, [sp, #24]
 801f90c:	9b07      	ldr	r3, [sp, #28]
 801f90e:	3302      	adds	r3, #2
 801f910:	9307      	str	r3, [sp, #28]
 801f912:	e744      	b.n	801f79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f914:	d023      	beq.n	801f95e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801f916:	9b06      	ldr	r3, [sp, #24]
 801f918:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f91a:	3b01      	subs	r3, #1
 801f91c:	fb00 b003 	mla	r0, r0, r3, fp
 801f920:	1400      	asrs	r0, r0, #16
 801f922:	f53f af58 	bmi.w	801f7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f926:	3901      	subs	r1, #1
 801f928:	4288      	cmp	r0, r1
 801f92a:	f6bf af54 	bge.w	801f7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f92e:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f930:	fb01 5303 	mla	r3, r1, r3, r5
 801f934:	141b      	asrs	r3, r3, #16
 801f936:	f53f af4e 	bmi.w	801f7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f93a:	3a01      	subs	r2, #1
 801f93c:	4293      	cmp	r3, r2
 801f93e:	f6bf af4a 	bge.w	801f7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f942:	9b06      	ldr	r3, [sp, #24]
 801f944:	9309      	str	r3, [sp, #36]	; 0x24
 801f946:	9b07      	ldr	r3, [sp, #28]
 801f948:	930b      	str	r3, [sp, #44]	; 0x2c
 801f94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	dc70      	bgt.n	801fa32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801f950:	9b06      	ldr	r3, [sp, #24]
 801f952:	9a07      	ldr	r2, [sp, #28]
 801f954:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f958:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f95c:	9307      	str	r3, [sp, #28]
 801f95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f960:	2b00      	cmp	r3, #0
 801f962:	f340 80eb 	ble.w	801fb3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801f966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f96a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f96e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f972:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f976:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f97a:	eef0 6a62 	vmov.f32	s13, s5
 801f97e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f982:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f986:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f98a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f98e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f992:	ee16 ba90 	vmov	fp, s13
 801f996:	eef0 6a43 	vmov.f32	s13, s6
 801f99a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f99e:	ee12 2a90 	vmov	r2, s5
 801f9a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f9a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9b0:	ee13 2a10 	vmov	r2, s6
 801f9b4:	931b      	str	r3, [sp, #108]	; 0x6c
 801f9b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f9b8:	ee16 5a90 	vmov	r5, s13
 801f9bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9c0:	931c      	str	r3, [sp, #112]	; 0x70
 801f9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f9c6:	3b01      	subs	r3, #1
 801f9c8:	930a      	str	r3, [sp, #40]	; 0x28
 801f9ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f9cc:	bf08      	it	eq
 801f9ce:	4613      	moveq	r3, r2
 801f9d0:	eeb0 3a67 	vmov.f32	s6, s15
 801f9d4:	9306      	str	r3, [sp, #24]
 801f9d6:	eef0 2a47 	vmov.f32	s5, s14
 801f9da:	e6d2      	b.n	801f782 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f9dc:	b149      	cbz	r1, 801f9f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f9de:	4660      	mov	r0, ip
 801f9e0:	5cba      	ldrb	r2, [r7, r2]
 801f9e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f9e6:	4422      	add	r2, r4
 801f9e8:	4666      	mov	r6, ip
 801f9ea:	e734      	b.n	801f856 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f9ec:	4660      	mov	r0, ip
 801f9ee:	4662      	mov	r2, ip
 801f9f0:	e731      	b.n	801f856 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f9f2:	4660      	mov	r0, ip
 801f9f4:	4662      	mov	r2, ip
 801f9f6:	e7f7      	b.n	801f9e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801f9f8:	f110 0c01 	adds.w	ip, r0, #1
 801f9fc:	f53f af74 	bmi.w	801f8e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fa00:	4562      	cmp	r2, ip
 801fa02:	f6ff af71 	blt.w	801f8e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fa06:	f116 0c01 	adds.w	ip, r6, #1
 801fa0a:	f53f af6d 	bmi.w	801f8e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fa0e:	4567      	cmp	r7, ip
 801fa10:	f6ff af6a 	blt.w	801f8e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fa14:	b23f      	sxth	r7, r7
 801fa16:	b212      	sxth	r2, r2
 801fa18:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fa1c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801fa20:	9200      	str	r2, [sp, #0]
 801fa22:	9701      	str	r7, [sp, #4]
 801fa24:	4623      	mov	r3, r4
 801fa26:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801fa2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fa2c:	f7ff fde6 	bl	801f5fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801fa30:	e75a      	b.n	801f8e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fa32:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fa34:	ea4f 462b 	mov.w	r6, fp, asr #16
 801fa38:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fa3c:	1428      	asrs	r0, r5, #16
 801fa3e:	fb02 6000 	mla	r0, r2, r0, r6
 801fa42:	9e08      	ldr	r6, [sp, #32]
 801fa44:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801fa48:	f816 8000 	ldrb.w	r8, [r6, r0]
 801fa4c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fa50:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fa54:	1837      	adds	r7, r6, r0
 801fa56:	eb04 0c08 	add.w	ip, r4, r8
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d060      	beq.n	801fb20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 801fa5e:	787e      	ldrb	r6, [r7, #1]
 801fa60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fa64:	4426      	add	r6, r4
 801fa66:	2900      	cmp	r1, #0
 801fa68:	d062      	beq.n	801fb30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 801fa6a:	18b8      	adds	r0, r7, r2
 801fa6c:	7840      	ldrb	r0, [r0, #1]
 801fa6e:	5cba      	ldrb	r2, [r7, r2]
 801fa70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fa74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa78:	4422      	add	r2, r4
 801fa7a:	4420      	add	r0, r4
 801fa7c:	b29b      	uxth	r3, r3
 801fa7e:	b289      	uxth	r1, r1
 801fa80:	fb03 f901 	mul.w	r9, r3, r1
 801fa84:	011b      	lsls	r3, r3, #4
 801fa86:	78b7      	ldrb	r7, [r6, #2]
 801fa88:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fa8c:	eba3 0309 	sub.w	r3, r3, r9
 801fa90:	b29b      	uxth	r3, r3
 801fa92:	435f      	muls	r7, r3
 801fa94:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fa98:	b289      	uxth	r1, r1
 801fa9a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801fa9e:	ebae 0e01 	sub.w	lr, lr, r1
 801faa2:	fa1f fe8e 	uxth.w	lr, lr
 801faa6:	fb0e 770a 	mla	r7, lr, sl, r7
 801faaa:	f892 a002 	ldrb.w	sl, [r2, #2]
 801faae:	f89c c001 	ldrb.w	ip, [ip, #1]
 801fab2:	fb01 770a 	mla	r7, r1, sl, r7
 801fab6:	f890 a002 	ldrb.w	sl, [r0, #2]
 801faba:	fb09 7a0a 	mla	sl, r9, sl, r7
 801fabe:	f814 7008 	ldrb.w	r7, [r4, r8]
 801fac2:	f896 8000 	ldrb.w	r8, [r6]
 801fac6:	7876      	ldrb	r6, [r6, #1]
 801fac8:	fb03 f808 	mul.w	r8, r3, r8
 801facc:	fb0e 8807 	mla	r8, lr, r7, r8
 801fad0:	7817      	ldrb	r7, [r2, #0]
 801fad2:	4373      	muls	r3, r6
 801fad4:	fb01 8807 	mla	r8, r1, r7, r8
 801fad8:	7807      	ldrb	r7, [r0, #0]
 801fada:	fb0e 330c 	mla	r3, lr, ip, r3
 801fade:	fb09 8707 	mla	r7, r9, r7, r8
 801fae2:	7856      	ldrb	r6, [r2, #1]
 801fae4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801fae8:	fb01 3306 	mla	r3, r1, r6, r3
 801faec:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801faf0:	ea47 070a 	orr.w	r7, r7, sl
 801faf4:	f890 a001 	ldrb.w	sl, [r0, #1]
 801faf8:	fb09 3a0a 	mla	sl, r9, sl, r3
 801fafc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fb00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb02:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fb06:	ea47 070a 	orr.w	r7, r7, sl
 801fb0a:	f823 7b02 	strh.w	r7, [r3], #2
 801fb0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fb12:	449b      	add	fp, r3
 801fb14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fb16:	441d      	add	r5, r3
 801fb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb1a:	3b01      	subs	r3, #1
 801fb1c:	9309      	str	r3, [sp, #36]	; 0x24
 801fb1e:	e714      	b.n	801f94a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fb20:	b149      	cbz	r1, 801fb36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801fb22:	4660      	mov	r0, ip
 801fb24:	5cba      	ldrb	r2, [r7, r2]
 801fb26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb2a:	4422      	add	r2, r4
 801fb2c:	4666      	mov	r6, ip
 801fb2e:	e7a5      	b.n	801fa7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801fb30:	4660      	mov	r0, ip
 801fb32:	4662      	mov	r2, ip
 801fb34:	e7a2      	b.n	801fa7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801fb36:	4660      	mov	r0, ip
 801fb38:	4662      	mov	r2, ip
 801fb3a:	e7f7      	b.n	801fb2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 801fb3c:	b00f      	add	sp, #60	; 0x3c
 801fb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801fb42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb46:	b085      	sub	sp, #20
 801fb48:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fb4c:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801fb50:	9102      	str	r1, [sp, #8]
 801fb52:	fb04 710c 	mla	r1, r4, ip, r7
 801fb56:	2c00      	cmp	r4, #0
 801fb58:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801fb5c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801fb60:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801fb64:	eb02 0e01 	add.w	lr, r2, r1
 801fb68:	f2c0 8122 	blt.w	801fdb0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fb6c:	45a0      	cmp	r8, r4
 801fb6e:	f340 811f 	ble.w	801fdb0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fb72:	2f00      	cmp	r7, #0
 801fb74:	f2c0 811a 	blt.w	801fdac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fb78:	45bc      	cmp	ip, r7
 801fb7a:	f340 8117 	ble.w	801fdac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fb7e:	5c52      	ldrb	r2, [r2, r1]
 801fb80:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fb84:	1c7a      	adds	r2, r7, #1
 801fb86:	f100 8116 	bmi.w	801fdb6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fb8a:	4594      	cmp	ip, r2
 801fb8c:	f340 8113 	ble.w	801fdb6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fb90:	2e00      	cmp	r6, #0
 801fb92:	f000 8112 	beq.w	801fdba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801fb96:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fb9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fb9e:	3401      	adds	r4, #1
 801fba0:	f100 810f 	bmi.w	801fdc2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fba4:	45a0      	cmp	r8, r4
 801fba6:	f340 810c 	ble.w	801fdc2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fbaa:	2800      	cmp	r0, #0
 801fbac:	f000 810c 	beq.w	801fdc8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801fbb0:	2f00      	cmp	r7, #0
 801fbb2:	f2c0 8104 	blt.w	801fdbe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fbb6:	45bc      	cmp	ip, r7
 801fbb8:	f340 8101 	ble.w	801fdbe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fbbc:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801fbc0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fbc4:	3701      	adds	r7, #1
 801fbc6:	f100 8102 	bmi.w	801fdce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fbca:	45bc      	cmp	ip, r7
 801fbcc:	f340 80ff 	ble.w	801fdce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fbd0:	2e00      	cmp	r6, #0
 801fbd2:	f000 80fe 	beq.w	801fdd2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801fbd6:	44f4      	add	ip, lr
 801fbd8:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fbdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fbe0:	b2b6      	uxth	r6, r6
 801fbe2:	b280      	uxth	r0, r0
 801fbe4:	fb00 fe06 	mul.w	lr, r0, r6
 801fbe8:	0136      	lsls	r6, r6, #4
 801fbea:	eba6 070e 	sub.w	r7, r6, lr
 801fbee:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801fbf2:	b2bf      	uxth	r7, r7
 801fbf4:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801fbf8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801fbfc:	fb0a f607 	mul.w	r6, sl, r7
 801fc00:	b280      	uxth	r0, r0
 801fc02:	1a1b      	subs	r3, r3, r0
 801fc04:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801fc08:	b29b      	uxth	r3, r3
 801fc0a:	fb0b 6603 	mla	r6, fp, r3, r6
 801fc0e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fc12:	fb00 6609 	mla	r6, r0, r9, r6
 801fc16:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fc1a:	fb0e 6608 	mla	r6, lr, r8, r6
 801fc1e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fc22:	9600      	str	r6, [sp, #0]
 801fc24:	2e00      	cmp	r6, #0
 801fc26:	f000 80be 	beq.w	801fda6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801fc2a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801fc2e:	fb0b fc0c 	mul.w	ip, fp, ip
 801fc32:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fc36:	fb0b f505 	mul.w	r5, fp, r5
 801fc3a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fc3e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fc42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fc46:	44dc      	add	ip, fp
 801fc48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc4c:	9501      	str	r5, [sp, #4]
 801fc4e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801fc52:	9503      	str	r5, [sp, #12]
 801fc54:	9d01      	ldr	r5, [sp, #4]
 801fc56:	9e02      	ldr	r6, [sp, #8]
 801fc58:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801fc5c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fc60:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801fc64:	fb0a fc0c 	mul.w	ip, sl, ip
 801fc68:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801fc6c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801fc70:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fc74:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fc78:	4465      	add	r5, ip
 801fc7a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fc7e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fc82:	fb09 fc0c 	mul.w	ip, r9, ip
 801fc86:	fb09 f904 	mul.w	r9, r9, r4
 801fc8a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801fc8e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fc92:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801fc96:	fb08 f404 	mul.w	r4, r8, r4
 801fc9a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fc9e:	fb08 f802 	mul.w	r8, r8, r2
 801fca2:	0a2d      	lsrs	r5, r5, #8
 801fca4:	0a22      	lsrs	r2, r4, #8
 801fca6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fcaa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fcae:	437d      	muls	r5, r7
 801fcb0:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801fcb4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801fcb8:	4414      	add	r4, r2
 801fcba:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801fcbe:	fb0a fa01 	mul.w	sl, sl, r1
 801fcc2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fcc6:	9a03      	ldr	r2, [sp, #12]
 801fcc8:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801fccc:	fb02 5503 	mla	r5, r2, r3, r5
 801fcd0:	0a24      	lsrs	r4, r4, #8
 801fcd2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801fcd6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fcda:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801fcde:	fb04 540e 	mla	r4, r4, lr, r5
 801fce2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801fce6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fcea:	4461      	add	r1, ip
 801fcec:	0a09      	lsrs	r1, r1, #8
 801fcee:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801fcf2:	fb01 4100 	mla	r1, r1, r0, r4
 801fcf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fcfa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fcfe:	fb07 f70a 	mul.w	r7, r7, sl
 801fd02:	0a09      	lsrs	r1, r1, #8
 801fd04:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801fd08:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801fd0c:	fb03 7101 	mla	r1, r3, r1, r7
 801fd10:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fd14:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fd18:	fb0e 1e08 	mla	lr, lr, r8, r1
 801fd1c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fd20:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801fd24:	fb00 e101 	mla	r1, r0, r1, lr
 801fd28:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801fd2c:	9a00      	ldr	r2, [sp, #0]
 801fd2e:	b287      	uxth	r7, r0
 801fd30:	437a      	muls	r2, r7
 801fd32:	1c53      	adds	r3, r2, #1
 801fd34:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fd38:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801fd3c:	0a09      	lsrs	r1, r1, #8
 801fd3e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801fd42:	4321      	orrs	r1, r4
 801fd44:	0c0a      	lsrs	r2, r1, #16
 801fd46:	8836      	ldrh	r6, [r6, #0]
 801fd48:	fb12 f207 	smulbb	r2, r2, r7
 801fd4c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801fd50:	b2c8      	uxtb	r0, r1
 801fd52:	1235      	asrs	r5, r6, #8
 801fd54:	fb14 f407 	smulbb	r4, r4, r7
 801fd58:	fb10 f007 	smulbb	r0, r0, r7
 801fd5c:	b2db      	uxtb	r3, r3
 801fd5e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fd62:	fb05 2503 	mla	r5, r5, r3, r2
 801fd66:	10f2      	asrs	r2, r6, #3
 801fd68:	00f6      	lsls	r6, r6, #3
 801fd6a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fd6e:	b2f6      	uxtb	r6, r6
 801fd70:	fb02 4203 	mla	r2, r2, r3, r4
 801fd74:	fb06 0303 	mla	r3, r6, r3, r0
 801fd78:	b2ad      	uxth	r5, r5
 801fd7a:	b299      	uxth	r1, r3
 801fd7c:	b294      	uxth	r4, r2
 801fd7e:	1c6b      	adds	r3, r5, #1
 801fd80:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fd84:	1c62      	adds	r2, r4, #1
 801fd86:	1c4b      	adds	r3, r1, #1
 801fd88:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fd8c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fd90:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fd94:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fd98:	0952      	lsrs	r2, r2, #5
 801fd9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fd9e:	432b      	orrs	r3, r5
 801fda0:	4313      	orrs	r3, r2
 801fda2:	9a02      	ldr	r2, [sp, #8]
 801fda4:	8013      	strh	r3, [r2, #0]
 801fda6:	b005      	add	sp, #20
 801fda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdac:	2500      	movs	r5, #0
 801fdae:	e6e9      	b.n	801fb84 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801fdb0:	2100      	movs	r1, #0
 801fdb2:	460d      	mov	r5, r1
 801fdb4:	e6f3      	b.n	801fb9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fdb6:	2100      	movs	r1, #0
 801fdb8:	e6f1      	b.n	801fb9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fdba:	4631      	mov	r1, r6
 801fdbc:	e6ef      	b.n	801fb9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fdbe:	2400      	movs	r4, #0
 801fdc0:	e700      	b.n	801fbc4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801fdc2:	2200      	movs	r2, #0
 801fdc4:	4614      	mov	r4, r2
 801fdc6:	e70b      	b.n	801fbe0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fdc8:	4602      	mov	r2, r0
 801fdca:	4604      	mov	r4, r0
 801fdcc:	e708      	b.n	801fbe0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fdce:	2200      	movs	r2, #0
 801fdd0:	e706      	b.n	801fbe0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fdd2:	4632      	mov	r2, r6
 801fdd4:	e704      	b.n	801fbe0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801fdd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdda:	b09f      	sub	sp, #124	; 0x7c
 801fddc:	921b      	str	r2, [sp, #108]	; 0x6c
 801fdde:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fde0:	901d      	str	r0, [sp, #116]	; 0x74
 801fde2:	9309      	str	r3, [sp, #36]	; 0x24
 801fde4:	6850      	ldr	r0, [r2, #4]
 801fde6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801fdea:	9119      	str	r1, [sp, #100]	; 0x64
 801fdec:	931c      	str	r3, [sp, #112]	; 0x70
 801fdee:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801fdf2:	fb00 1303 	mla	r3, r0, r3, r1
 801fdf6:	6812      	ldr	r2, [r2, #0]
 801fdf8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801fdfa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fdfe:	930c      	str	r3, [sp, #48]	; 0x30
 801fe00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fe02:	681b      	ldr	r3, [r3, #0]
 801fe04:	9312      	str	r3, [sp, #72]	; 0x48
 801fe06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fe08:	685e      	ldr	r6, [r3, #4]
 801fe0a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801fe0e:	3604      	adds	r6, #4
 801fe10:	930d      	str	r3, [sp, #52]	; 0x34
 801fe12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	dc03      	bgt.n	801fe20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fe18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	f340 8387 	ble.w	802052e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801fe20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fe22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe2a:	1e48      	subs	r0, r1, #1
 801fe2c:	1e57      	subs	r7, r2, #1
 801fe2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	f340 8194 	ble.w	802015e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801fe36:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801fe38:	142b      	asrs	r3, r5, #16
 801fe3a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801fe3e:	d406      	bmi.n	801fe4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fe40:	4584      	cmp	ip, r0
 801fe42:	da04      	bge.n	801fe4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	db02      	blt.n	801fe4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fe48:	42bb      	cmp	r3, r7
 801fe4a:	f2c0 8189 	blt.w	8020160 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fe4e:	f11c 0c01 	adds.w	ip, ip, #1
 801fe52:	f100 8177 	bmi.w	8020144 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fe56:	4561      	cmp	r1, ip
 801fe58:	f2c0 8174 	blt.w	8020144 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fe5c:	3301      	adds	r3, #1
 801fe5e:	f100 8171 	bmi.w	8020144 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fe62:	429a      	cmp	r2, r3
 801fe64:	f2c0 816e 	blt.w	8020144 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fe68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fe6c:	931a      	str	r3, [sp, #104]	; 0x68
 801fe6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	f340 8193 	ble.w	802019c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801fe76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fe78:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fe7c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fe80:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fe82:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fe86:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801fe8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fe8c:	141b      	asrs	r3, r3, #16
 801fe8e:	f100 81d6 	bmi.w	802023e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fe92:	f100 38ff 	add.w	r8, r0, #4294967295
 801fe96:	4543      	cmp	r3, r8
 801fe98:	f280 81d1 	bge.w	802023e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fe9c:	f1bc 0f00 	cmp.w	ip, #0
 801fea0:	f2c0 81cd 	blt.w	802023e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fea4:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fea8:	45c4      	cmp	ip, r8
 801feaa:	f280 81c8 	bge.w	802023e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801feae:	b200      	sxth	r0, r0
 801feb0:	fb0c 3300 	mla	r3, ip, r0, r3
 801feb4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801feb6:	eb04 0803 	add.w	r8, r4, r3
 801feba:	5ce3      	ldrb	r3, [r4, r3]
 801febc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fec0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fec4:	2a00      	cmp	r2, #0
 801fec6:	f000 81af 	beq.w	8020228 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801feca:	f898 c001 	ldrb.w	ip, [r8, #1]
 801fece:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801fed2:	940e      	str	r4, [sp, #56]	; 0x38
 801fed4:	0e24      	lsrs	r4, r4, #24
 801fed6:	9415      	str	r4, [sp, #84]	; 0x54
 801fed8:	b179      	cbz	r1, 801fefa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801feda:	eb08 0c00 	add.w	ip, r8, r0
 801fede:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fee2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fee6:	900a      	str	r0, [sp, #40]	; 0x28
 801fee8:	0e00      	lsrs	r0, r0, #24
 801feea:	9013      	str	r0, [sp, #76]	; 0x4c
 801feec:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fef0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fef4:	900f      	str	r0, [sp, #60]	; 0x3c
 801fef6:	0e00      	lsrs	r0, r0, #24
 801fef8:	9016      	str	r0, [sp, #88]	; 0x58
 801fefa:	b292      	uxth	r2, r2
 801fefc:	b289      	uxth	r1, r1
 801fefe:	fb02 f901 	mul.w	r9, r2, r1
 801ff02:	0112      	lsls	r2, r2, #4
 801ff04:	eba2 0809 	sub.w	r8, r2, r9
 801ff08:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ff0a:	fa1f f888 	uxth.w	r8, r8
 801ff0e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ff12:	fb08 f000 	mul.w	r0, r8, r0
 801ff16:	b289      	uxth	r1, r1
 801ff18:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ff1c:	1a52      	subs	r2, r2, r1
 801ff1e:	b292      	uxth	r2, r2
 801ff20:	fb02 000e 	mla	r0, r2, lr, r0
 801ff24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ff26:	fb01 0004 	mla	r0, r1, r4, r0
 801ff2a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ff2c:	fb09 0004 	mla	r0, r9, r4, r0
 801ff30:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ff34:	2800      	cmp	r0, #0
 801ff36:	f000 80fa 	beq.w	802012e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801ff3a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ff3e:	d01b      	beq.n	801ff78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801ff40:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ff44:	fb0e fa0a 	mul.w	sl, lr, sl
 801ff48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff4c:	fb0e fe03 	mul.w	lr, lr, r3
 801ff50:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ff54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff58:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ff5c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ff60:	4453      	add	r3, sl
 801ff62:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ff66:	0a1b      	lsrs	r3, r3, #8
 801ff68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff70:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ff74:	ea43 030c 	orr.w	r3, r3, ip
 801ff78:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff7a:	2cff      	cmp	r4, #255	; 0xff
 801ff7c:	d021      	beq.n	801ffc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801ff7e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ff80:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ff84:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff86:	fb04 fb0b 	mul.w	fp, r4, fp
 801ff8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ff8c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ff90:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ff94:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ff9a:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff9e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ffa2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ffa6:	44de      	add	lr, fp
 801ffa8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ffac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ffb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ffb8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ffbc:	ea4e 040a 	orr.w	r4, lr, sl
 801ffc0:	940e      	str	r4, [sp, #56]	; 0x38
 801ffc2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ffc4:	2cff      	cmp	r4, #255	; 0xff
 801ffc6:	d021      	beq.n	802000c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ffc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ffca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ffce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ffd0:	fb04 fb0b 	mul.w	fp, r4, fp
 801ffd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ffd6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ffda:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ffde:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ffe0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ffe4:	fb04 fa0a 	mul.w	sl, r4, sl
 801ffe8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ffec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fff0:	44de      	add	lr, fp
 801fff2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fff6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fffa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fffe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020002:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020006:	ea4e 040a 	orr.w	r4, lr, sl
 802000a:	940a      	str	r4, [sp, #40]	; 0x28
 802000c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802000e:	2cff      	cmp	r4, #255	; 0xff
 8020010:	d021      	beq.n	8020056 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8020012:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020014:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020018:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802001a:	fb04 fb0b 	mul.w	fp, r4, fp
 802001e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020020:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020024:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020028:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802002a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802002e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020032:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020036:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802003a:	44de      	add	lr, fp
 802003c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020040:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020044:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020048:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802004c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020050:	ea4e 040a 	orr.w	r4, lr, sl
 8020054:	940f      	str	r4, [sp, #60]	; 0x3c
 8020056:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020058:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802005c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020060:	fb08 fc0c 	mul.w	ip, r8, ip
 8020064:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020068:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802006a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802006e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020072:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020076:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020078:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802007c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802007e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020082:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020086:	fb08 f80e 	mul.w	r8, r8, lr
 802008a:	fb02 8303 	mla	r3, r2, r3, r8
 802008e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020090:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020094:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802009a:	fb01 330a 	mla	r3, r1, sl, r3
 802009e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80200a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80200a4:	fb09 3901 	mla	r9, r9, r1, r3
 80200a8:	4342      	muls	r2, r0
 80200aa:	1c50      	adds	r0, r2, #1
 80200ac:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80200b0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80200b4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80200b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80200bc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80200c0:	ea4c 0c09 	orr.w	ip, ip, r9
 80200c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80200c6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80200ca:	883b      	ldrh	r3, [r7, #0]
 80200cc:	fb12 f204 	smulbb	r2, r2, r4
 80200d0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80200d4:	fa5f fc8c 	uxtb.w	ip, ip
 80200d8:	1219      	asrs	r1, r3, #8
 80200da:	fb1c fc04 	smulbb	ip, ip, r4
 80200de:	b2c0      	uxtb	r0, r0
 80200e0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80200e4:	fb01 2100 	mla	r1, r1, r0, r2
 80200e8:	10da      	asrs	r2, r3, #3
 80200ea:	00db      	lsls	r3, r3, #3
 80200ec:	fb1e fe04 	smulbb	lr, lr, r4
 80200f0:	b2db      	uxtb	r3, r3
 80200f2:	fb03 c300 	mla	r3, r3, r0, ip
 80200f6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80200fa:	b289      	uxth	r1, r1
 80200fc:	fb02 e200 	mla	r2, r2, r0, lr
 8020100:	fa1f fc83 	uxth.w	ip, r3
 8020104:	1c4b      	adds	r3, r1, #1
 8020106:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802010a:	f10c 0301 	add.w	r3, ip, #1
 802010e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020112:	b292      	uxth	r2, r2
 8020114:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020118:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802011c:	430b      	orrs	r3, r1
 802011e:	1c51      	adds	r1, r2, #1
 8020120:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020124:	0952      	lsrs	r2, r2, #5
 8020126:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802012a:	4313      	orrs	r3, r2
 802012c:	803b      	strh	r3, [r7, #0]
 802012e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020130:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020132:	3702      	adds	r7, #2
 8020134:	441a      	add	r2, r3
 8020136:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020138:	9229      	str	r2, [sp, #164]	; 0xa4
 802013a:	441d      	add	r5, r3
 802013c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802013e:	3b01      	subs	r3, #1
 8020140:	931a      	str	r3, [sp, #104]	; 0x68
 8020142:	e694      	b.n	801fe6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020144:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020146:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020148:	441c      	add	r4, r3
 802014a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802014c:	9429      	str	r4, [sp, #164]	; 0xa4
 802014e:	441d      	add	r5, r3
 8020150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020152:	3b01      	subs	r3, #1
 8020154:	9309      	str	r3, [sp, #36]	; 0x24
 8020156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020158:	3302      	adds	r3, #2
 802015a:	930c      	str	r3, [sp, #48]	; 0x30
 802015c:	e667      	b.n	801fe2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802015e:	d024      	beq.n	80201aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8020160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020162:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020164:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020166:	3b01      	subs	r3, #1
 8020168:	fb00 4003 	mla	r0, r0, r3, r4
 802016c:	1400      	asrs	r0, r0, #16
 802016e:	f53f ae7b 	bmi.w	801fe68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020172:	3901      	subs	r1, #1
 8020174:	4288      	cmp	r0, r1
 8020176:	f6bf ae77 	bge.w	801fe68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802017a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802017c:	fb01 5303 	mla	r3, r1, r3, r5
 8020180:	141b      	asrs	r3, r3, #16
 8020182:	f53f ae71 	bmi.w	801fe68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020186:	3a01      	subs	r2, #1
 8020188:	4293      	cmp	r3, r2
 802018a:	f6bf ae6d 	bge.w	801fe68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802018e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020192:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020196:	f1bb 0f00 	cmp.w	fp, #0
 802019a:	dc70      	bgt.n	802027e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802019c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802019e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80201a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201a4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80201a8:	930c      	str	r3, [sp, #48]	; 0x30
 80201aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	f340 81be 	ble.w	802052e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80201b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80201b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80201c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201c6:	eef0 6a62 	vmov.f32	s13, s5
 80201ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201de:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80201e2:	eef0 6a43 	vmov.f32	s13, s6
 80201e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201ea:	ee12 2a90 	vmov	r2, s5
 80201ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80201fc:	ee13 2a10 	vmov	r2, s6
 8020200:	932b      	str	r3, [sp, #172]	; 0xac
 8020202:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020204:	ee16 5a90 	vmov	r5, s13
 8020208:	fb92 f3f3 	sdiv	r3, r2, r3
 802020c:	932c      	str	r3, [sp, #176]	; 0xb0
 802020e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020210:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020212:	3b01      	subs	r3, #1
 8020214:	9319      	str	r3, [sp, #100]	; 0x64
 8020216:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020218:	bf08      	it	eq
 802021a:	4613      	moveq	r3, r2
 802021c:	eeb0 3a67 	vmov.f32	s6, s15
 8020220:	9309      	str	r3, [sp, #36]	; 0x24
 8020222:	eef0 2a47 	vmov.f32	s5, s14
 8020226:	e5f4      	b.n	801fe12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020228:	2900      	cmp	r1, #0
 802022a:	f43f ae66 	beq.w	801fefa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802022e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020232:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020236:	900a      	str	r0, [sp, #40]	; 0x28
 8020238:	0e00      	lsrs	r0, r0, #24
 802023a:	9013      	str	r0, [sp, #76]	; 0x4c
 802023c:	e65d      	b.n	801fefa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802023e:	f113 0801 	adds.w	r8, r3, #1
 8020242:	f53f af74 	bmi.w	802012e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020246:	4540      	cmp	r0, r8
 8020248:	f6ff af71 	blt.w	802012e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802024c:	f11c 0801 	adds.w	r8, ip, #1
 8020250:	f53f af6d 	bmi.w	802012e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020254:	45c6      	cmp	lr, r8
 8020256:	f6ff af6a 	blt.w	802012e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802025a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802025c:	9302      	str	r3, [sp, #8]
 802025e:	b200      	sxth	r0, r0
 8020260:	fa0f f38e 	sxth.w	r3, lr
 8020264:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020268:	e9cd c203 	strd	ip, r2, [sp, #12]
 802026c:	9301      	str	r3, [sp, #4]
 802026e:	9000      	str	r0, [sp, #0]
 8020270:	4633      	mov	r3, r6
 8020272:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020274:	4639      	mov	r1, r7
 8020276:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020278:	f7ff fc63 	bl	801fb42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802027c:	e757      	b.n	802012e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802027e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020280:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020282:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020286:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020288:	1427      	asrs	r7, r4, #16
 802028a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802028e:	142b      	asrs	r3, r5, #16
 8020290:	fb01 7303 	mla	r3, r1, r3, r7
 8020294:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020296:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802029a:	18e7      	adds	r7, r4, r3
 802029c:	5ce3      	ldrb	r3, [r4, r3]
 802029e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80202a2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80202a6:	2a00      	cmp	r2, #0
 80202a8:	f000 8137 	beq.w	802051a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80202ac:	f897 e001 	ldrb.w	lr, [r7, #1]
 80202b0:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80202b4:	9410      	str	r4, [sp, #64]	; 0x40
 80202b6:	0e24      	lsrs	r4, r4, #24
 80202b8:	9417      	str	r4, [sp, #92]	; 0x5c
 80202ba:	b170      	cbz	r0, 80202da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80202bc:	eb07 0e01 	add.w	lr, r7, r1
 80202c0:	5c79      	ldrb	r1, [r7, r1]
 80202c2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80202c8:	0e09      	lsrs	r1, r1, #24
 80202ca:	9114      	str	r1, [sp, #80]	; 0x50
 80202cc:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80202d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202d4:	9111      	str	r1, [sp, #68]	; 0x44
 80202d6:	0e09      	lsrs	r1, r1, #24
 80202d8:	9118      	str	r1, [sp, #96]	; 0x60
 80202da:	b292      	uxth	r2, r2
 80202dc:	b280      	uxth	r0, r0
 80202de:	fb02 f800 	mul.w	r8, r2, r0
 80202e2:	0112      	lsls	r2, r2, #4
 80202e4:	eba2 0e08 	sub.w	lr, r2, r8
 80202e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80202ea:	fa1f fe8e 	uxth.w	lr, lr
 80202ee:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80202f2:	fb0e f101 	mul.w	r1, lr, r1
 80202f6:	b280      	uxth	r0, r0
 80202f8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80202fc:	1a12      	subs	r2, r2, r0
 80202fe:	b292      	uxth	r2, r2
 8020300:	fb02 110c 	mla	r1, r2, ip, r1
 8020304:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020306:	fb00 1104 	mla	r1, r0, r4, r1
 802030a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802030c:	fb08 1104 	mla	r1, r8, r4, r1
 8020310:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020314:	2900      	cmp	r1, #0
 8020316:	f000 80f5 	beq.w	8020504 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802031a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802031e:	d019      	beq.n	8020354 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8020320:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020324:	fb0c fa0a 	mul.w	sl, ip, sl
 8020328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802032c:	fb0c fc03 	mul.w	ip, ip, r3
 8020330:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020334:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020338:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802033c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020340:	4453      	add	r3, sl
 8020342:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020346:	0a1b      	lsrs	r3, r3, #8
 8020348:	0a3f      	lsrs	r7, r7, #8
 802034a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802034e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020352:	433b      	orrs	r3, r7
 8020354:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020356:	2cff      	cmp	r4, #255	; 0xff
 8020358:	d020      	beq.n	802039c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 802035a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802035c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020360:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020362:	4367      	muls	r7, r4
 8020364:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020366:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802036a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802036e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020370:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020374:	fb04 fa0a 	mul.w	sl, r4, sl
 8020378:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802037c:	44bc      	add	ip, r7
 802037e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020382:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020386:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802038a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802038e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020392:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020396:	ea4c 040a 	orr.w	r4, ip, sl
 802039a:	9410      	str	r4, [sp, #64]	; 0x40
 802039c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802039e:	2cff      	cmp	r4, #255	; 0xff
 80203a0:	d020      	beq.n	80203e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 80203a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80203a4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80203a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80203aa:	4367      	muls	r7, r4
 80203ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80203ae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80203b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80203b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80203b8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80203bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80203c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203c4:	44bc      	add	ip, r7
 80203c6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80203ca:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80203ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80203de:	ea4c 040a 	orr.w	r4, ip, sl
 80203e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80203e4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80203e6:	2cff      	cmp	r4, #255	; 0xff
 80203e8:	d020      	beq.n	802042c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80203ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203ec:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80203f0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80203f2:	4367      	muls	r7, r4
 80203f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203f6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80203fa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80203fe:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020400:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020404:	fb04 fa0a 	mul.w	sl, r4, sl
 8020408:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802040c:	44bc      	add	ip, r7
 802040e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020412:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020416:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802041a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802041e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020422:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020426:	ea4c 040a 	orr.w	r4, ip, sl
 802042a:	9411      	str	r4, [sp, #68]	; 0x44
 802042c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802042e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020432:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020436:	fb0e f707 	mul.w	r7, lr, r7
 802043a:	fb02 770c 	mla	r7, r2, ip, r7
 802043e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020440:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020444:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020448:	fb00 770c 	mla	r7, r0, ip, r7
 802044c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802044e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020452:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020454:	fb08 770c 	mla	r7, r8, ip, r7
 8020458:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802045c:	fb0e fe0c 	mul.w	lr, lr, ip
 8020460:	fb02 e303 	mla	r3, r2, r3, lr
 8020464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020466:	0a3f      	lsrs	r7, r7, #8
 8020468:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802046c:	fb00 330a 	mla	r3, r0, sl, r3
 8020470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020472:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020476:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802047a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802047e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020480:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020484:	434b      	muls	r3, r1
 8020486:	1c59      	adds	r1, r3, #1
 8020488:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802048c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020490:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020494:	ea47 070c 	orr.w	r7, r7, ip
 8020498:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802049a:	0c3b      	lsrs	r3, r7, #16
 802049c:	f8b9 0000 	ldrh.w	r0, [r9]
 80204a0:	fb13 f304 	smulbb	r3, r3, r4
 80204a4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80204a8:	b2ff      	uxtb	r7, r7
 80204aa:	1202      	asrs	r2, r0, #8
 80204ac:	fb17 f704 	smulbb	r7, r7, r4
 80204b0:	b2c9      	uxtb	r1, r1
 80204b2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80204b6:	fb02 3201 	mla	r2, r2, r1, r3
 80204ba:	10c3      	asrs	r3, r0, #3
 80204bc:	00c0      	lsls	r0, r0, #3
 80204be:	fb1c fc04 	smulbb	ip, ip, r4
 80204c2:	b2c0      	uxtb	r0, r0
 80204c4:	fb00 7001 	mla	r0, r0, r1, r7
 80204c8:	b292      	uxth	r2, r2
 80204ca:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80204ce:	fb03 c301 	mla	r3, r3, r1, ip
 80204d2:	f102 0c01 	add.w	ip, r2, #1
 80204d6:	b280      	uxth	r0, r0
 80204d8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80204dc:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80204e0:	1c42      	adds	r2, r0, #1
 80204e2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80204e6:	b29b      	uxth	r3, r3
 80204e8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80204ec:	ea42 020c 	orr.w	r2, r2, ip
 80204f0:	f103 0c01 	add.w	ip, r3, #1
 80204f4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80204f8:	095b      	lsrs	r3, r3, #5
 80204fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80204fe:	431a      	orrs	r2, r3
 8020500:	f8a9 2000 	strh.w	r2, [r9]
 8020504:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020506:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020508:	f109 0902 	add.w	r9, r9, #2
 802050c:	441a      	add	r2, r3
 802050e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020510:	9229      	str	r2, [sp, #164]	; 0xa4
 8020512:	441d      	add	r5, r3
 8020514:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020518:	e63d      	b.n	8020196 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802051a:	2800      	cmp	r0, #0
 802051c:	f43f aedd 	beq.w	80202da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020520:	5c79      	ldrb	r1, [r7, r1]
 8020522:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020526:	910b      	str	r1, [sp, #44]	; 0x2c
 8020528:	0e09      	lsrs	r1, r1, #24
 802052a:	9114      	str	r1, [sp, #80]	; 0x50
 802052c:	e6d5      	b.n	80202da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802052e:	b01f      	add	sp, #124	; 0x7c
 8020530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020534 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8020534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020538:	b089      	sub	sp, #36	; 0x24
 802053a:	9101      	str	r1, [sp, #4]
 802053c:	9801      	ldr	r0, [sp, #4]
 802053e:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8020542:	8800      	ldrh	r0, [r0, #0]
 8020544:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8020548:	1206      	asrs	r6, r0, #8
 802054a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802054e:	9602      	str	r6, [sp, #8]
 8020550:	10c6      	asrs	r6, r0, #3
 8020552:	00c0      	lsls	r0, r0, #3
 8020554:	b2c0      	uxtb	r0, r0
 8020556:	9004      	str	r0, [sp, #16]
 8020558:	fb07 100c 	mla	r0, r7, ip, r1
 802055c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020560:	2f00      	cmp	r7, #0
 8020562:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8020566:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 802056a:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 802056e:	9603      	str	r6, [sp, #12]
 8020570:	eb02 0e00 	add.w	lr, r2, r0
 8020574:	f2c0 810a 	blt.w	802078c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020578:	45b8      	cmp	r8, r7
 802057a:	f340 8107 	ble.w	802078c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802057e:	2900      	cmp	r1, #0
 8020580:	f2c0 8102 	blt.w	8020788 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020584:	458c      	cmp	ip, r1
 8020586:	f340 80ff 	ble.w	8020788 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 802058a:	5c12      	ldrb	r2, [r2, r0]
 802058c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020590:	1c4a      	adds	r2, r1, #1
 8020592:	f100 80fe 	bmi.w	8020792 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020596:	4594      	cmp	ip, r2
 8020598:	f340 80fb 	ble.w	8020792 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802059c:	2d00      	cmp	r5, #0
 802059e:	f000 80fa 	beq.w	8020796 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 80205a2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80205a6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80205aa:	3701      	adds	r7, #1
 80205ac:	f100 80f7 	bmi.w	802079e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80205b0:	45b8      	cmp	r8, r7
 80205b2:	f340 80f4 	ble.w	802079e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80205b6:	2c00      	cmp	r4, #0
 80205b8:	f000 80f4 	beq.w	80207a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 80205bc:	2900      	cmp	r1, #0
 80205be:	eb0e 020c 	add.w	r2, lr, ip
 80205c2:	f2c0 80ea 	blt.w	802079a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80205c6:	458c      	cmp	ip, r1
 80205c8:	f340 80e7 	ble.w	802079a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80205cc:	f81e 700c 	ldrb.w	r7, [lr, ip]
 80205d0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80205d4:	3101      	adds	r1, #1
 80205d6:	f100 80e8 	bmi.w	80207aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80205da:	458c      	cmp	ip, r1
 80205dc:	f340 80e5 	ble.w	80207aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80205e0:	2d00      	cmp	r5, #0
 80205e2:	f000 80e4 	beq.w	80207ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 80205e6:	7852      	ldrb	r2, [r2, #1]
 80205e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80205ec:	0e0b      	lsrs	r3, r1, #24
 80205ee:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80205f2:	9300      	str	r3, [sp, #0]
 80205f4:	b2a4      	uxth	r4, r4
 80205f6:	b2ab      	uxth	r3, r5
 80205f8:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80205fc:	fb03 f904 	mul.w	r9, r3, r4
 8020600:	fb0a f505 	mul.w	r5, sl, r5
 8020604:	011b      	lsls	r3, r3, #4
 8020606:	eba3 0e09 	sub.w	lr, r3, r9
 802060a:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 802060e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020612:	0a28      	lsrs	r0, r5, #8
 8020614:	fb0a f303 	mul.w	r3, sl, r3
 8020618:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802061c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020620:	4405      	add	r5, r0
 8020622:	0a2d      	lsrs	r5, r5, #8
 8020624:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8020628:	9005      	str	r0, [sp, #20]
 802062a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 802062e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020632:	0a1b      	lsrs	r3, r3, #8
 8020634:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020638:	9306      	str	r3, [sp, #24]
 802063a:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802063e:	fb0b f303 	mul.w	r3, fp, r3
 8020642:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020646:	ea4f 6817 	mov.w	r8, r7, lsr #24
 802064a:	fb0b f606 	mul.w	r6, fp, r6
 802064e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020652:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020656:	fb08 f707 	mul.w	r7, r8, r7
 802065a:	0a1d      	lsrs	r5, r3, #8
 802065c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020660:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020664:	441d      	add	r5, r3
 8020666:	f506 7380 	add.w	r3, r6, #256	; 0x100
 802066a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802066e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020672:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020676:	fb08 fc0c 	mul.w	ip, r8, ip
 802067a:	0a1b      	lsrs	r3, r3, #8
 802067c:	9307      	str	r3, [sp, #28]
 802067e:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8020682:	0e0b      	lsrs	r3, r1, #24
 8020684:	0a2d      	lsrs	r5, r5, #8
 8020686:	fa1f fe8e 	uxth.w	lr, lr
 802068a:	435f      	muls	r7, r3
 802068c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020690:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8020694:	fb05 f50e 	mul.w	r5, r5, lr
 8020698:	b2a4      	uxth	r4, r4
 802069a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802069e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80206a2:	4359      	muls	r1, r3
 80206a4:	1b12      	subs	r2, r2, r4
 80206a6:	9b05      	ldr	r3, [sp, #20]
 80206a8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80206ac:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80206b0:	b292      	uxth	r2, r2
 80206b2:	4460      	add	r0, ip
 80206b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80206b8:	fb03 5502 	mla	r5, r3, r2, r5
 80206bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80206c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206c4:	44bc      	add	ip, r7
 80206c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206ce:	0a36      	lsrs	r6, r6, #8
 80206d0:	fb0c 5509 	mla	r5, ip, r9, r5
 80206d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80206d8:	fb0e f606 	mul.w	r6, lr, r6
 80206dc:	9b06      	ldr	r3, [sp, #24]
 80206de:	0a00      	lsrs	r0, r0, #8
 80206e0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80206e4:	fb00 5504 	mla	r5, r0, r4, r5
 80206e8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80206ec:	fb02 6000 	mla	r0, r2, r0, r6
 80206f0:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80206f4:	fb0e fe0b 	mul.w	lr, lr, fp
 80206f8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80206fc:	0a09      	lsrs	r1, r1, #8
 80206fe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020702:	fb09 0001 	mla	r0, r9, r1, r0
 8020706:	fb02 e20a 	mla	r2, r2, sl, lr
 802070a:	9b07      	ldr	r3, [sp, #28]
 802070c:	0a2d      	lsrs	r5, r5, #8
 802070e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020712:	fb04 0003 	mla	r0, r4, r3, r0
 8020716:	fb04 2408 	mla	r4, r4, r8, r2
 802071a:	9b00      	ldr	r3, [sp, #0]
 802071c:	9a04      	ldr	r2, [sp, #16]
 802071e:	fb09 4903 	mla	r9, r9, r3, r4
 8020722:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8020726:	9b02      	ldr	r3, [sp, #8]
 8020728:	fa5f f989 	uxtb.w	r9, r9
 802072c:	fb03 f109 	mul.w	r1, r3, r9
 8020730:	9b03      	ldr	r3, [sp, #12]
 8020732:	0a00      	lsrs	r0, r0, #8
 8020734:	fb03 f309 	mul.w	r3, r3, r9
 8020738:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802073c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020740:	4305      	orrs	r5, r0
 8020742:	fb02 f909 	mul.w	r9, r2, r9
 8020746:	1c58      	adds	r0, r3, #1
 8020748:	1c4a      	adds	r2, r1, #1
 802074a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802074e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020752:	0a2b      	lsrs	r3, r5, #8
 8020754:	0c2a      	lsrs	r2, r5, #16
 8020756:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802075a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802075e:	00db      	lsls	r3, r3, #3
 8020760:	0212      	lsls	r2, r2, #8
 8020762:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020766:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802076a:	4313      	orrs	r3, r2
 802076c:	f109 0201 	add.w	r2, r9, #1
 8020770:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8020774:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8020778:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802077c:	431d      	orrs	r5, r3
 802077e:	9b01      	ldr	r3, [sp, #4]
 8020780:	801d      	strh	r5, [r3, #0]
 8020782:	b009      	add	sp, #36	; 0x24
 8020784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020788:	2000      	movs	r0, #0
 802078a:	e701      	b.n	8020590 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 802078c:	2600      	movs	r6, #0
 802078e:	4630      	mov	r0, r6
 8020790:	e70b      	b.n	80205aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020792:	2600      	movs	r6, #0
 8020794:	e709      	b.n	80205aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020796:	462e      	mov	r6, r5
 8020798:	e707      	b.n	80205aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802079a:	2700      	movs	r7, #0
 802079c:	e71a      	b.n	80205d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 802079e:	2100      	movs	r1, #0
 80207a0:	460f      	mov	r7, r1
 80207a2:	e723      	b.n	80205ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80207a4:	4621      	mov	r1, r4
 80207a6:	4627      	mov	r7, r4
 80207a8:	e720      	b.n	80205ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80207aa:	2100      	movs	r1, #0
 80207ac:	e71e      	b.n	80205ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80207ae:	4629      	mov	r1, r5
 80207b0:	e71c      	b.n	80205ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

080207b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207b8:	b09b      	sub	sp, #108	; 0x6c
 80207ba:	9218      	str	r2, [sp, #96]	; 0x60
 80207bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80207be:	9019      	str	r0, [sp, #100]	; 0x64
 80207c0:	6850      	ldr	r0, [r2, #4]
 80207c2:	9116      	str	r1, [sp, #88]	; 0x58
 80207c4:	9307      	str	r3, [sp, #28]
 80207c6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80207ca:	fb00 1303 	mla	r3, r0, r3, r1
 80207ce:	6812      	ldr	r2, [r2, #0]
 80207d0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80207d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80207d6:	930a      	str	r3, [sp, #40]	; 0x28
 80207d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80207de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207e0:	685e      	ldr	r6, [r3, #4]
 80207e2:	3604      	adds	r6, #4
 80207e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	dc03      	bgt.n	80207f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80207ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	f340 8373 	ble.w	8020ed8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80207f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80207fc:	1e48      	subs	r0, r1, #1
 80207fe:	1e57      	subs	r7, r2, #1
 8020800:	9b07      	ldr	r3, [sp, #28]
 8020802:	2b00      	cmp	r3, #0
 8020804:	f340 818f 	ble.w	8020b26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8020808:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802080a:	142b      	asrs	r3, r5, #16
 802080c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020810:	d406      	bmi.n	8020820 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020812:	4584      	cmp	ip, r0
 8020814:	da04      	bge.n	8020820 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020816:	2b00      	cmp	r3, #0
 8020818:	db02      	blt.n	8020820 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802081a:	42bb      	cmp	r3, r7
 802081c:	f2c0 8184 	blt.w	8020b28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020820:	f11c 0c01 	adds.w	ip, ip, #1
 8020824:	f100 8172 	bmi.w	8020b0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020828:	4561      	cmp	r1, ip
 802082a:	f2c0 816f 	blt.w	8020b0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802082e:	3301      	adds	r3, #1
 8020830:	f100 816c 	bmi.w	8020b0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020834:	429a      	cmp	r2, r3
 8020836:	f2c0 8169 	blt.w	8020b0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802083a:	9b07      	ldr	r3, [sp, #28]
 802083c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802083e:	9317      	str	r3, [sp, #92]	; 0x5c
 8020840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020842:	2b00      	cmp	r3, #0
 8020844:	f340 818e 	ble.w	8020b64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8020848:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802084a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802084e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020852:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020854:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020858:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802085c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802085e:	141b      	asrs	r3, r3, #16
 8020860:	f100 81d1 	bmi.w	8020c06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020864:	f101 38ff 	add.w	r8, r1, #4294967295
 8020868:	4543      	cmp	r3, r8
 802086a:	f280 81cc 	bge.w	8020c06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802086e:	f1bc 0f00 	cmp.w	ip, #0
 8020872:	f2c0 81c8 	blt.w	8020c06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020876:	f10e 38ff 	add.w	r8, lr, #4294967295
 802087a:	45c4      	cmp	ip, r8
 802087c:	f280 81c3 	bge.w	8020c06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020880:	b209      	sxth	r1, r1
 8020882:	fb0c 3301 	mla	r3, ip, r1, r3
 8020886:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020888:	eb04 0803 	add.w	r8, r4, r3
 802088c:	5ce3      	ldrb	r3, [r4, r3]
 802088e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020892:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020896:	2a00      	cmp	r2, #0
 8020898:	f000 81aa 	beq.w	8020bf0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 802089c:	f898 c001 	ldrb.w	ip, [r8, #1]
 80208a0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80208a4:	940b      	str	r4, [sp, #44]	; 0x2c
 80208a6:	0e24      	lsrs	r4, r4, #24
 80208a8:	9412      	str	r4, [sp, #72]	; 0x48
 80208aa:	b178      	cbz	r0, 80208cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80208ac:	eb08 0c01 	add.w	ip, r8, r1
 80208b0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80208b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80208b8:	9108      	str	r1, [sp, #32]
 80208ba:	0e09      	lsrs	r1, r1, #24
 80208bc:	9110      	str	r1, [sp, #64]	; 0x40
 80208be:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80208c2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80208c6:	910c      	str	r1, [sp, #48]	; 0x30
 80208c8:	0e09      	lsrs	r1, r1, #24
 80208ca:	9113      	str	r1, [sp, #76]	; 0x4c
 80208cc:	b292      	uxth	r2, r2
 80208ce:	b280      	uxth	r0, r0
 80208d0:	fb02 f900 	mul.w	r9, r2, r0
 80208d4:	0112      	lsls	r2, r2, #4
 80208d6:	eba2 0809 	sub.w	r8, r2, r9
 80208da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80208dc:	fa1f f888 	uxth.w	r8, r8
 80208e0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80208e4:	fb08 f101 	mul.w	r1, r8, r1
 80208e8:	b280      	uxth	r0, r0
 80208ea:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80208ee:	1a12      	subs	r2, r2, r0
 80208f0:	b292      	uxth	r2, r2
 80208f2:	fb02 110e 	mla	r1, r2, lr, r1
 80208f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80208f8:	fb00 1104 	mla	r1, r0, r4, r1
 80208fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80208fe:	fb09 1104 	mla	r1, r9, r4, r1
 8020902:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020906:	2900      	cmp	r1, #0
 8020908:	f000 80f5 	beq.w	8020af6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802090c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020910:	d01b      	beq.n	802094a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020912:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020916:	fb0e fa0a 	mul.w	sl, lr, sl
 802091a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802091e:	fb0e fe03 	mul.w	lr, lr, r3
 8020922:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020926:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802092a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802092e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020932:	4453      	add	r3, sl
 8020934:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020938:	0a1b      	lsrs	r3, r3, #8
 802093a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802093e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020942:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020946:	ea43 030c 	orr.w	r3, r3, ip
 802094a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802094c:	2cff      	cmp	r4, #255	; 0xff
 802094e:	d021      	beq.n	8020994 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8020950:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020952:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020956:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020958:	fb04 fb0b 	mul.w	fp, r4, fp
 802095c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802095e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020962:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020966:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020968:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802096c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020970:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020974:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020978:	44de      	add	lr, fp
 802097a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802097e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020982:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020986:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802098a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802098e:	ea4e 040a 	orr.w	r4, lr, sl
 8020992:	940b      	str	r4, [sp, #44]	; 0x2c
 8020994:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020996:	2cff      	cmp	r4, #255	; 0xff
 8020998:	d021      	beq.n	80209de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802099a:	9c08      	ldr	r4, [sp, #32]
 802099c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80209a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209a2:	fb04 fb0b 	mul.w	fp, r4, fp
 80209a6:	9c08      	ldr	r4, [sp, #32]
 80209a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80209ba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80209be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80209c2:	44de      	add	lr, fp
 80209c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209d8:	ea4e 040a 	orr.w	r4, lr, sl
 80209dc:	9408      	str	r4, [sp, #32]
 80209de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209e0:	2cff      	cmp	r4, #255	; 0xff
 80209e2:	d021      	beq.n	8020a28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80209e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80209e6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80209ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209ec:	fb04 fb0b 	mul.w	fp, r4, fp
 80209f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80209f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209f6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a00:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a04:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020a08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020a0c:	44de      	add	lr, fp
 8020a0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a22:	ea4e 040a 	orr.w	r4, lr, sl
 8020a26:	940c      	str	r4, [sp, #48]	; 0x30
 8020a28:	43c9      	mvns	r1, r1
 8020a2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a2c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020a30:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020a34:	fb08 fc0c 	mul.w	ip, r8, ip
 8020a38:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020a3c:	9c08      	ldr	r4, [sp, #32]
 8020a3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a42:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a46:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020a4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020a4c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a50:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a52:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020a56:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020a5a:	fb08 f80e 	mul.w	r8, r8, lr
 8020a5e:	fb02 8303 	mla	r3, r2, r3, r8
 8020a62:	9a08      	ldr	r2, [sp, #32]
 8020a64:	f8b7 8000 	ldrh.w	r8, [r7]
 8020a68:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020a6c:	fb00 330a 	mla	r3, r0, sl, r3
 8020a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020a72:	fa5f fe81 	uxtb.w	lr, r1
 8020a76:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020a7a:	fb09 3900 	mla	r9, r9, r0, r3
 8020a7e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8020a82:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020a86:	fb02 f20e 	mul.w	r2, r2, lr
 8020a8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a8e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020a92:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8020a96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a9a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020a9e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020aa2:	ea4c 0c09 	orr.w	ip, ip, r9
 8020aa6:	fb00 f00e 	mul.w	r0, r0, lr
 8020aaa:	1c53      	adds	r3, r2, #1
 8020aac:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020ab0:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8020ab4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020ab8:	4a62      	ldr	r2, [pc, #392]	; (8020c44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8020aba:	b2db      	uxtb	r3, r3
 8020abc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8020ac0:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8020ac4:	b2c9      	uxtb	r1, r1
 8020ac6:	1c43      	adds	r3, r0, #1
 8020ac8:	fb01 f10e 	mul.w	r1, r1, lr
 8020acc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020ad0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020ad4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020ad8:	00db      	lsls	r3, r3, #3
 8020ada:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020ade:	4313      	orrs	r3, r2
 8020ae0:	1c4a      	adds	r2, r1, #1
 8020ae2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020ae6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020aea:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8020aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8020af2:	f8a7 c000 	strh.w	ip, [r7]
 8020af6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020af8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020afa:	3702      	adds	r7, #2
 8020afc:	441a      	add	r2, r3
 8020afe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b00:	9225      	str	r2, [sp, #148]	; 0x94
 8020b02:	441d      	add	r5, r3
 8020b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020b06:	3b01      	subs	r3, #1
 8020b08:	9317      	str	r3, [sp, #92]	; 0x5c
 8020b0a:	e699      	b.n	8020840 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020b0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020b0e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020b10:	441c      	add	r4, r3
 8020b12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b14:	9425      	str	r4, [sp, #148]	; 0x94
 8020b16:	441d      	add	r5, r3
 8020b18:	9b07      	ldr	r3, [sp, #28]
 8020b1a:	3b01      	subs	r3, #1
 8020b1c:	9307      	str	r3, [sp, #28]
 8020b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b20:	3302      	adds	r3, #2
 8020b22:	930a      	str	r3, [sp, #40]	; 0x28
 8020b24:	e66c      	b.n	8020800 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020b26:	d024      	beq.n	8020b72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8020b28:	9b07      	ldr	r3, [sp, #28]
 8020b2a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020b2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020b2e:	3b01      	subs	r3, #1
 8020b30:	fb00 4003 	mla	r0, r0, r3, r4
 8020b34:	1400      	asrs	r0, r0, #16
 8020b36:	f53f ae80 	bmi.w	802083a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b3a:	3901      	subs	r1, #1
 8020b3c:	4288      	cmp	r0, r1
 8020b3e:	f6bf ae7c 	bge.w	802083a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b42:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020b44:	fb01 5303 	mla	r3, r1, r3, r5
 8020b48:	141b      	asrs	r3, r3, #16
 8020b4a:	f53f ae76 	bmi.w	802083a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b4e:	3a01      	subs	r2, #1
 8020b50:	4293      	cmp	r3, r2
 8020b52:	f6bf ae72 	bge.w	802083a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b56:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020b5a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8020b5e:	f1bb 0f00 	cmp.w	fp, #0
 8020b62:	dc71      	bgt.n	8020c48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8020b64:	9b07      	ldr	r3, [sp, #28]
 8020b66:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b6c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020b70:	930a      	str	r3, [sp, #40]	; 0x28
 8020b72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020b74:	2b00      	cmp	r3, #0
 8020b76:	f340 81af 	ble.w	8020ed8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8020b7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020b7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020b8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b8e:	eef0 6a62 	vmov.f32	s13, s5
 8020b92:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b96:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ba2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ba6:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8020baa:	eef0 6a43 	vmov.f32	s13, s6
 8020bae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020bb2:	ee12 2a90 	vmov	r2, s5
 8020bb6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020bba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020bbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bc4:	ee13 2a10 	vmov	r2, s6
 8020bc8:	9327      	str	r3, [sp, #156]	; 0x9c
 8020bca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020bcc:	ee16 5a90 	vmov	r5, s13
 8020bd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bd4:	9328      	str	r3, [sp, #160]	; 0xa0
 8020bd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020bd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020bda:	3b01      	subs	r3, #1
 8020bdc:	9316      	str	r3, [sp, #88]	; 0x58
 8020bde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020be0:	bf08      	it	eq
 8020be2:	4613      	moveq	r3, r2
 8020be4:	eeb0 3a67 	vmov.f32	s6, s15
 8020be8:	9307      	str	r3, [sp, #28]
 8020bea:	eef0 2a47 	vmov.f32	s5, s14
 8020bee:	e5f9      	b.n	80207e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020bf0:	2800      	cmp	r0, #0
 8020bf2:	f43f ae6b 	beq.w	80208cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020bf6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020bfa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020bfe:	9108      	str	r1, [sp, #32]
 8020c00:	0e09      	lsrs	r1, r1, #24
 8020c02:	9110      	str	r1, [sp, #64]	; 0x40
 8020c04:	e662      	b.n	80208cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020c06:	f113 0801 	adds.w	r8, r3, #1
 8020c0a:	f53f af74 	bmi.w	8020af6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c0e:	4541      	cmp	r1, r8
 8020c10:	f6ff af71 	blt.w	8020af6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c14:	f11c 0801 	adds.w	r8, ip, #1
 8020c18:	f53f af6d 	bmi.w	8020af6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c1c:	45c6      	cmp	lr, r8
 8020c1e:	f6ff af6a 	blt.w	8020af6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c22:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020c26:	b209      	sxth	r1, r1
 8020c28:	fa0f f38e 	sxth.w	r3, lr
 8020c2c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020c30:	9301      	str	r3, [sp, #4]
 8020c32:	9100      	str	r1, [sp, #0]
 8020c34:	4633      	mov	r3, r6
 8020c36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c38:	4639      	mov	r1, r7
 8020c3a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020c3c:	f7ff fc7a 	bl	8020534 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8020c40:	e759      	b.n	8020af6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c42:	bf00      	nop
 8020c44:	fffff800 	.word	0xfffff800
 8020c48:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020c4a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020c4c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020c50:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c52:	1427      	asrs	r7, r4, #16
 8020c54:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c58:	142b      	asrs	r3, r5, #16
 8020c5a:	fb01 7303 	mla	r3, r1, r3, r7
 8020c5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c60:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020c64:	18e7      	adds	r7, r4, r3
 8020c66:	5ce3      	ldrb	r3, [r4, r3]
 8020c68:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020c6c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020c70:	2a00      	cmp	r2, #0
 8020c72:	f000 8127 	beq.w	8020ec4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8020c76:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020c7a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020c7e:	940d      	str	r4, [sp, #52]	; 0x34
 8020c80:	0e24      	lsrs	r4, r4, #24
 8020c82:	9414      	str	r4, [sp, #80]	; 0x50
 8020c84:	b170      	cbz	r0, 8020ca4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020c86:	eb07 0e01 	add.w	lr, r7, r1
 8020c8a:	5c79      	ldrb	r1, [r7, r1]
 8020c8c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020c90:	9109      	str	r1, [sp, #36]	; 0x24
 8020c92:	0e09      	lsrs	r1, r1, #24
 8020c94:	9111      	str	r1, [sp, #68]	; 0x44
 8020c96:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020c9a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020c9e:	910e      	str	r1, [sp, #56]	; 0x38
 8020ca0:	0e09      	lsrs	r1, r1, #24
 8020ca2:	9115      	str	r1, [sp, #84]	; 0x54
 8020ca4:	b292      	uxth	r2, r2
 8020ca6:	b280      	uxth	r0, r0
 8020ca8:	fb02 f800 	mul.w	r8, r2, r0
 8020cac:	0112      	lsls	r2, r2, #4
 8020cae:	eba2 0e08 	sub.w	lr, r2, r8
 8020cb2:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020cb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020cb8:	fa1f fe8e 	uxth.w	lr, lr
 8020cbc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020cc0:	fb0e f202 	mul.w	r2, lr, r2
 8020cc4:	b280      	uxth	r0, r0
 8020cc6:	1a09      	subs	r1, r1, r0
 8020cc8:	b289      	uxth	r1, r1
 8020cca:	fb01 220c 	mla	r2, r1, ip, r2
 8020cce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020cd0:	fb00 2204 	mla	r2, r0, r4, r2
 8020cd4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020cd6:	fb08 2204 	mla	r2, r8, r4, r2
 8020cda:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020cde:	2a00      	cmp	r2, #0
 8020ce0:	f000 80e5 	beq.w	8020eae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8020ce4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020ce8:	d019      	beq.n	8020d1e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8020cea:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020cee:	fb0c fa0a 	mul.w	sl, ip, sl
 8020cf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020cf6:	fb0c fc03 	mul.w	ip, ip, r3
 8020cfa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020cfe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d02:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020d06:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020d0a:	4453      	add	r3, sl
 8020d0c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020d10:	0a1b      	lsrs	r3, r3, #8
 8020d12:	0a3f      	lsrs	r7, r7, #8
 8020d14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d18:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020d1c:	433b      	orrs	r3, r7
 8020d1e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d20:	2cff      	cmp	r4, #255	; 0xff
 8020d22:	d020      	beq.n	8020d66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8020d24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020d26:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d2a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d2c:	4367      	muls	r7, r4
 8020d2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020d30:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d34:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020d38:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d3a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d3e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d46:	44bc      	add	ip, r7
 8020d48:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020d4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d60:	ea4c 040a 	orr.w	r4, ip, sl
 8020d64:	940d      	str	r4, [sp, #52]	; 0x34
 8020d66:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020d68:	2cff      	cmp	r4, #255	; 0xff
 8020d6a:	d020      	beq.n	8020dae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8020d6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020d6e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d72:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020d74:	4367      	muls	r7, r4
 8020d76:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020d78:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d7c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020d80:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020d82:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d86:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d8e:	44bc      	add	ip, r7
 8020d90:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020d94:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020da0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020da4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020da8:	ea4c 040a 	orr.w	r4, ip, sl
 8020dac:	9409      	str	r4, [sp, #36]	; 0x24
 8020dae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020db0:	2cff      	cmp	r4, #255	; 0xff
 8020db2:	d020      	beq.n	8020df6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8020db4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020db6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020dba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020dbc:	4367      	muls	r7, r4
 8020dbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020dc0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020dc4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020dc8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020dca:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020dce:	fb04 fa0a 	mul.w	sl, r4, sl
 8020dd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dd6:	44bc      	add	ip, r7
 8020dd8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020ddc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020de0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020de8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020df0:	ea4c 040a 	orr.w	r4, ip, sl
 8020df4:	940e      	str	r4, [sp, #56]	; 0x38
 8020df6:	43d2      	mvns	r2, r2
 8020df8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020dfa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020dfe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020e02:	fb0e f707 	mul.w	r7, lr, r7
 8020e06:	fb01 770c 	mla	r7, r1, ip, r7
 8020e0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020e0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e10:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020e14:	fb00 770c 	mla	r7, r0, ip, r7
 8020e18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020e1a:	b2d2      	uxtb	r2, r2
 8020e1c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020e20:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020e22:	fb08 770c 	mla	r7, r8, ip, r7
 8020e26:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020e2a:	fb0e fe0c 	mul.w	lr, lr, ip
 8020e2e:	fb01 e303 	mla	r3, r1, r3, lr
 8020e32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020e34:	0a3f      	lsrs	r7, r7, #8
 8020e36:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020e3a:	fb00 330a 	mla	r3, r0, sl, r3
 8020e3e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020e40:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020e44:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020e48:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020e4c:	f8b9 3000 	ldrh.w	r3, [r9]
 8020e50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e54:	1218      	asrs	r0, r3, #8
 8020e56:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020e5a:	4350      	muls	r0, r2
 8020e5c:	10d9      	asrs	r1, r3, #3
 8020e5e:	00db      	lsls	r3, r3, #3
 8020e60:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020e64:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020e68:	b2db      	uxtb	r3, r3
 8020e6a:	ea47 070c 	orr.w	r7, r7, ip
 8020e6e:	4351      	muls	r1, r2
 8020e70:	4353      	muls	r3, r2
 8020e72:	1c42      	adds	r2, r0, #1
 8020e74:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020e78:	0c3a      	lsrs	r2, r7, #16
 8020e7a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020e7e:	4a18      	ldr	r2, [pc, #96]	; (8020ee0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8020e80:	b2c0      	uxtb	r0, r0
 8020e82:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8020e86:	1c4a      	adds	r2, r1, #1
 8020e88:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020e8c:	0a3a      	lsrs	r2, r7, #8
 8020e8e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020e92:	00c9      	lsls	r1, r1, #3
 8020e94:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020e98:	4301      	orrs	r1, r0
 8020e9a:	1c58      	adds	r0, r3, #1
 8020e9c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020ea0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8020ea4:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8020ea8:	4308      	orrs	r0, r1
 8020eaa:	f8a9 0000 	strh.w	r0, [r9]
 8020eae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020eb0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020eb2:	f109 0902 	add.w	r9, r9, #2
 8020eb6:	441a      	add	r2, r3
 8020eb8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020eba:	9225      	str	r2, [sp, #148]	; 0x94
 8020ebc:	441d      	add	r5, r3
 8020ebe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020ec2:	e64c      	b.n	8020b5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020ec4:	2800      	cmp	r0, #0
 8020ec6:	f43f aeed 	beq.w	8020ca4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020eca:	5c79      	ldrb	r1, [r7, r1]
 8020ecc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020ed0:	9109      	str	r1, [sp, #36]	; 0x24
 8020ed2:	0e09      	lsrs	r1, r1, #24
 8020ed4:	9111      	str	r1, [sp, #68]	; 0x44
 8020ed6:	e6e5      	b.n	8020ca4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020ed8:	b01b      	add	sp, #108	; 0x6c
 8020eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ede:	bf00      	nop
 8020ee0:	fffff800 	.word	0xfffff800

08020ee4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8020ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ee8:	b085      	sub	sp, #20
 8020eea:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8020eee:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8020ef2:	fb00 7406 	mla	r4, r0, r6, r7
 8020ef6:	2800      	cmp	r0, #0
 8020ef8:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8020efc:	9103      	str	r1, [sp, #12]
 8020efe:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8020f02:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8020f06:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8020f0a:	9501      	str	r5, [sp, #4]
 8020f0c:	eb03 0904 	add.w	r9, r3, r4
 8020f10:	f2c0 8150 	blt.w	80211b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8020f14:	4583      	cmp	fp, r0
 8020f16:	f340 814d 	ble.w	80211b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8020f1a:	2f00      	cmp	r7, #0
 8020f1c:	f2c0 8146 	blt.w	80211ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8020f20:	42be      	cmp	r6, r7
 8020f22:	f340 8143 	ble.w	80211ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8020f26:	f813 c004 	ldrb.w	ip, [r3, r4]
 8020f2a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8020f2e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8020f32:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020f36:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8020f3a:	4355      	muls	r5, r2
 8020f3c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020f40:	fb0c f203 	mul.w	r2, ip, r3
 8020f44:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8020f48:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8020f4c:	441d      	add	r5, r3
 8020f4e:	f102 0320 	add.w	r3, r2, #32
 8020f52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020f56:	0a1b      	lsrs	r3, r3, #8
 8020f58:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8020f5c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020f60:	431c      	orrs	r4, r3
 8020f62:	1c7b      	adds	r3, r7, #1
 8020f64:	f100 812b 	bmi.w	80211be <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020f68:	429e      	cmp	r6, r3
 8020f6a:	f340 8128 	ble.w	80211be <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020f6e:	2900      	cmp	r1, #0
 8020f70:	f000 8128 	beq.w	80211c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8020f74:	9a01      	ldr	r2, [sp, #4]
 8020f76:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020f7a:	8855      	ldrh	r5, [r2, #2]
 8020f7c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8020f80:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8020f84:	fb08 f802 	mul.w	r8, r8, r2
 8020f88:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8020f8c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020f90:	435d      	muls	r5, r3
 8020f92:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8020f96:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020f9a:	44d0      	add	r8, sl
 8020f9c:	f105 0a20 	add.w	sl, r5, #32
 8020fa0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020fa4:	0a2d      	lsrs	r5, r5, #8
 8020fa6:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8020faa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020fae:	432a      	orrs	r2, r5
 8020fb0:	3001      	adds	r0, #1
 8020fb2:	f100 810d 	bmi.w	80211d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8020fb6:	4583      	cmp	fp, r0
 8020fb8:	f340 810a 	ble.w	80211d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8020fbc:	f1be 0f00 	cmp.w	lr, #0
 8020fc0:	f000 810b 	beq.w	80211da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8020fc4:	2f00      	cmp	r7, #0
 8020fc6:	f2c0 8100 	blt.w	80211ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8020fca:	42be      	cmp	r6, r7
 8020fcc:	f340 80fd 	ble.w	80211ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8020fd0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8020fd4:	9801      	ldr	r0, [sp, #4]
 8020fd6:	f819 5006 	ldrb.w	r5, [r9, r6]
 8020fda:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8020fde:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020fe2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8020fe6:	fb0a fa00 	mul.w	sl, sl, r0
 8020fea:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020fee:	fb05 f808 	mul.w	r8, r5, r8
 8020ff2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8020ff6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020ffa:	4482      	add	sl, r0
 8020ffc:	f108 0020 	add.w	r0, r8, #32
 8021000:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021004:	0a00      	lsrs	r0, r0, #8
 8021006:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802100a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802100e:	ea4b 0b00 	orr.w	fp, fp, r0
 8021012:	3701      	adds	r7, #1
 8021014:	f100 80e6 	bmi.w	80211e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021018:	42be      	cmp	r6, r7
 802101a:	f340 80e3 	ble.w	80211e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802101e:	2900      	cmp	r1, #0
 8021020:	f000 80e3 	beq.w	80211ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8021024:	9801      	ldr	r0, [sp, #4]
 8021026:	3601      	adds	r6, #1
 8021028:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802102c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021030:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021034:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021038:	fb07 f800 	mul.w	r8, r7, r0
 802103c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021040:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021044:	fb09 f906 	mul.w	r9, r9, r6
 8021048:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802104c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021050:	44d1      	add	r9, sl
 8021052:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021056:	f108 0020 	add.w	r0, r8, #32
 802105a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802105e:	0a00      	lsrs	r0, r0, #8
 8021060:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021064:	4330      	orrs	r0, r6
 8021066:	b28e      	uxth	r6, r1
 8021068:	fa1f f98e 	uxth.w	r9, lr
 802106c:	fb06 f809 	mul.w	r8, r6, r9
 8021070:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021074:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021078:	0136      	lsls	r6, r6, #4
 802107a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802107e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021082:	9601      	str	r6, [sp, #4]
 8021084:	ea4a 0404 	orr.w	r4, sl, r4
 8021088:	fa1f f689 	uxth.w	r6, r9
 802108c:	9602      	str	r6, [sp, #8]
 802108e:	4626      	mov	r6, r4
 8021090:	fb11 f90e 	smulbb	r9, r1, lr
 8021094:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021098:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802109c:	f1ce 0410 	rsb	r4, lr, #16
 80210a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80210a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80210a8:	1a64      	subs	r4, r4, r1
 80210aa:	ea4a 0202 	orr.w	r2, sl, r2
 80210ae:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80210b2:	434a      	muls	r2, r1
 80210b4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80210b8:	fb04 2406 	mla	r4, r4, r6, r2
 80210bc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80210c0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80210c4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80210c8:	ea4a 0000 	orr.w	r0, sl, r0
 80210cc:	fb09 4200 	mla	r2, r9, r0, r4
 80210d0:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80210d4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80210d8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80210dc:	ea44 0b0b 	orr.w	fp, r4, fp
 80210e0:	9c01      	ldr	r4, [sp, #4]
 80210e2:	9e02      	ldr	r6, [sp, #8]
 80210e4:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 80210e8:	1ba4      	subs	r4, r4, r6
 80210ea:	9e01      	ldr	r6, [sp, #4]
 80210ec:	b2a4      	uxth	r4, r4
 80210ee:	eba6 0608 	sub.w	r6, r6, r8
 80210f2:	b2b6      	uxth	r6, r6
 80210f4:	4373      	muls	r3, r6
 80210f6:	fb0c 3304 	mla	r3, ip, r4, r3
 80210fa:	9c02      	ldr	r4, [sp, #8]
 80210fc:	9903      	ldr	r1, [sp, #12]
 80210fe:	fb04 3505 	mla	r5, r4, r5, r3
 8021102:	fb08 5707 	mla	r7, r8, r7, r5
 8021106:	8808      	ldrh	r0, [r1, #0]
 8021108:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 802110c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021110:	b289      	uxth	r1, r1
 8021112:	434f      	muls	r7, r1
 8021114:	1c7b      	adds	r3, r7, #1
 8021116:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802111a:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802111e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021122:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021126:	1203      	asrs	r3, r0, #8
 8021128:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802112c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021130:	b2ff      	uxtb	r7, r7
 8021132:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021136:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802113a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802113e:	fb13 f307 	smulbb	r3, r3, r7
 8021142:	ea42 0e0e 	orr.w	lr, r2, lr
 8021146:	fa1f f28e 	uxth.w	r2, lr
 802114a:	1215      	asrs	r5, r2, #8
 802114c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021150:	fb05 3501 	mla	r5, r5, r1, r3
 8021154:	10c3      	asrs	r3, r0, #3
 8021156:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802115a:	fb13 f307 	smulbb	r3, r3, r7
 802115e:	10d4      	asrs	r4, r2, #3
 8021160:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021164:	fb04 3401 	mla	r4, r4, r1, r3
 8021168:	00c3      	lsls	r3, r0, #3
 802116a:	b2db      	uxtb	r3, r3
 802116c:	fb13 f307 	smulbb	r3, r3, r7
 8021170:	00d2      	lsls	r2, r2, #3
 8021172:	b2d2      	uxtb	r2, r2
 8021174:	fb02 3101 	mla	r1, r2, r1, r3
 8021178:	b2ad      	uxth	r5, r5
 802117a:	b289      	uxth	r1, r1
 802117c:	b2a4      	uxth	r4, r4
 802117e:	1c6b      	adds	r3, r5, #1
 8021180:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021184:	1c62      	adds	r2, r4, #1
 8021186:	1c4b      	adds	r3, r1, #1
 8021188:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802118c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8021190:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021194:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021198:	0964      	lsrs	r4, r4, #5
 802119a:	432b      	orrs	r3, r5
 802119c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80211a0:	9a03      	ldr	r2, [sp, #12]
 80211a2:	4323      	orrs	r3, r4
 80211a4:	8013      	strh	r3, [r2, #0]
 80211a6:	b005      	add	sp, #20
 80211a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211ac:	f04f 0c00 	mov.w	ip, #0
 80211b0:	4664      	mov	r4, ip
 80211b2:	e6d6      	b.n	8020f62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80211b4:	2300      	movs	r3, #0
 80211b6:	469c      	mov	ip, r3
 80211b8:	461a      	mov	r2, r3
 80211ba:	461c      	mov	r4, r3
 80211bc:	e6f8      	b.n	8020fb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80211be:	2300      	movs	r3, #0
 80211c0:	461a      	mov	r2, r3
 80211c2:	e6f5      	b.n	8020fb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80211c4:	460b      	mov	r3, r1
 80211c6:	460a      	mov	r2, r1
 80211c8:	e6f2      	b.n	8020fb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80211ca:	2500      	movs	r5, #0
 80211cc:	46ab      	mov	fp, r5
 80211ce:	e720      	b.n	8021012 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80211d0:	2700      	movs	r7, #0
 80211d2:	463d      	mov	r5, r7
 80211d4:	4638      	mov	r0, r7
 80211d6:	46bb      	mov	fp, r7
 80211d8:	e745      	b.n	8021066 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80211da:	4677      	mov	r7, lr
 80211dc:	4675      	mov	r5, lr
 80211de:	4670      	mov	r0, lr
 80211e0:	46f3      	mov	fp, lr
 80211e2:	e740      	b.n	8021066 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80211e4:	2700      	movs	r7, #0
 80211e6:	4638      	mov	r0, r7
 80211e8:	e73d      	b.n	8021066 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80211ea:	460f      	mov	r7, r1
 80211ec:	4608      	mov	r0, r1
 80211ee:	e73a      	b.n	8021066 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080211f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211f4:	b097      	sub	sp, #92	; 0x5c
 80211f6:	9214      	str	r2, [sp, #80]	; 0x50
 80211f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80211fa:	9015      	str	r0, [sp, #84]	; 0x54
 80211fc:	9308      	str	r3, [sp, #32]
 80211fe:	6850      	ldr	r0, [r2, #4]
 8021200:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021204:	9111      	str	r1, [sp, #68]	; 0x44
 8021206:	9312      	str	r3, [sp, #72]	; 0x48
 8021208:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802120c:	fb00 1303 	mla	r3, r0, r3, r1
 8021210:	6812      	ldr	r2, [r2, #0]
 8021212:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021216:	9309      	str	r3, [sp, #36]	; 0x24
 8021218:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802121a:	681b      	ldr	r3, [r3, #0]
 802121c:	930b      	str	r3, [sp, #44]	; 0x2c
 802121e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021220:	685b      	ldr	r3, [r3, #4]
 8021222:	930c      	str	r3, [sp, #48]	; 0x30
 8021224:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021228:	930a      	str	r3, [sp, #40]	; 0x28
 802122a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802122c:	2b00      	cmp	r3, #0
 802122e:	dc03      	bgt.n	8021238 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021230:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021232:	2b00      	cmp	r3, #0
 8021234:	f340 83cb 	ble.w	80219ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021238:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802123a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802123e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021242:	1e48      	subs	r0, r1, #1
 8021244:	1e55      	subs	r5, r2, #1
 8021246:	9b08      	ldr	r3, [sp, #32]
 8021248:	2b00      	cmp	r3, #0
 802124a:	f340 81a3 	ble.w	8021594 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 802124e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8021250:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021252:	1436      	asrs	r6, r6, #16
 8021254:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021258:	d406      	bmi.n	8021268 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802125a:	4286      	cmp	r6, r0
 802125c:	da04      	bge.n	8021268 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802125e:	2b00      	cmp	r3, #0
 8021260:	db02      	blt.n	8021268 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021262:	42ab      	cmp	r3, r5
 8021264:	f2c0 8197 	blt.w	8021596 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021268:	3601      	adds	r6, #1
 802126a:	f100 8184 	bmi.w	8021576 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802126e:	42b1      	cmp	r1, r6
 8021270:	f2c0 8181 	blt.w	8021576 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021274:	3301      	adds	r3, #1
 8021276:	f100 817e 	bmi.w	8021576 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802127a:	429a      	cmp	r2, r3
 802127c:	f2c0 817b 	blt.w	8021576 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021280:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021284:	9b08      	ldr	r3, [sp, #32]
 8021286:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021288:	9313      	str	r3, [sp, #76]	; 0x4c
 802128a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802128c:	2b00      	cmp	r3, #0
 802128e:	f340 81a4 	ble.w	80215da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021292:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021294:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021296:	1418      	asrs	r0, r3, #16
 8021298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802129a:	142d      	asrs	r5, r5, #16
 802129c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80212a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80212a2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80212a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80212a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80212ac:	f100 81f8 	bmi.w	80216a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80212b0:	f102 3eff 	add.w	lr, r2, #4294967295
 80212b4:	4575      	cmp	r5, lr
 80212b6:	f280 81f3 	bge.w	80216a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80212ba:	2800      	cmp	r0, #0
 80212bc:	f2c0 81f0 	blt.w	80216a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80212c0:	f103 3eff 	add.w	lr, r3, #4294967295
 80212c4:	4570      	cmp	r0, lr
 80212c6:	f280 81eb 	bge.w	80216a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80212ca:	b212      	sxth	r2, r2
 80212cc:	fb00 5002 	mla	r0, r0, r2, r5
 80212d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212d2:	fa1f fe81 	uxth.w	lr, r1
 80212d6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80212da:	eb03 0a00 	add.w	sl, r3, r0
 80212de:	f813 9000 	ldrb.w	r9, [r3, r0]
 80212e2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80212e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80212ea:	b29b      	uxth	r3, r3
 80212ec:	f1bc 0f00 	cmp.w	ip, #0
 80212f0:	f000 81b9 	beq.w	8021666 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80212f4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80212f8:	eb0a 0b02 	add.w	fp, sl, r2
 80212fc:	fa1f fa8c 	uxth.w	sl, ip
 8021300:	fb0a fe0e 	mul.w	lr, sl, lr
 8021304:	eba5 050e 	sub.w	r5, r5, lr
 8021308:	b2ad      	uxth	r5, r5
 802130a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802130e:	fb08 f505 	mul.w	r5, r8, r5
 8021312:	fa1f fa8a 	uxth.w	sl, sl
 8021316:	eba3 030a 	sub.w	r3, r3, sl
 802131a:	b29b      	uxth	r3, r3
 802131c:	940d      	str	r4, [sp, #52]	; 0x34
 802131e:	fb09 5303 	mla	r3, r9, r3, r5
 8021322:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021326:	940e      	str	r4, [sp, #56]	; 0x38
 8021328:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802132a:	fb0a 3304 	mla	r3, sl, r4, r3
 802132e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021330:	fb0e 3304 	mla	r3, lr, r4, r3
 8021334:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021338:	2b00      	cmp	r3, #0
 802133a:	f000 810f 	beq.w	802155c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802133e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021340:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021344:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021348:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802134c:	f000 8190 	beq.w	8021670 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021350:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021354:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021358:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802135c:	fb09 f000 	mul.w	r0, r9, r0
 8021360:	fb0a fe0e 	mul.w	lr, sl, lr
 8021364:	f100 0b20 	add.w	fp, r0, #32
 8021368:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802136c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021370:	44ce      	add	lr, r9
 8021372:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021376:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802137a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802137e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021382:	ea4e 0909 	orr.w	r9, lr, r9
 8021386:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802138a:	8868      	ldrh	r0, [r5, #2]
 802138c:	d019      	beq.n	80213c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802138e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021392:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021396:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802139a:	fb08 f800 	mul.w	r8, r8, r0
 802139e:	fb0a fe0e 	mul.w	lr, sl, lr
 80213a2:	f108 0b20 	add.w	fp, r8, #32
 80213a6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80213aa:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80213ae:	4486      	add	lr, r0
 80213b0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80213b4:	0a00      	lsrs	r0, r0, #8
 80213b6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80213ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80213be:	ea4e 0000 	orr.w	r0, lr, r0
 80213c2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80213c6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80213ca:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80213ce:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80213d2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80213d6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80213da:	ea4e 0909 	orr.w	r9, lr, r9
 80213de:	ea4a 0000 	orr.w	r0, sl, r0
 80213e2:	f1bc 0f00 	cmp.w	ip, #0
 80213e6:	f000 8145 	beq.w	8021674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80213ea:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80213ee:	3a01      	subs	r2, #1
 80213f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80213f2:	0052      	lsls	r2, r2, #1
 80213f4:	3202      	adds	r2, #2
 80213f6:	2cff      	cmp	r4, #255	; 0xff
 80213f8:	eb05 0e02 	add.w	lr, r5, r2
 80213fc:	5aaa      	ldrh	r2, [r5, r2]
 80213fe:	d018      	beq.n	8021432 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021400:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021404:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021408:	fb04 fa02 	mul.w	sl, r4, r2
 802140c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021410:	fb08 f805 	mul.w	r8, r8, r5
 8021414:	f10a 0520 	add.w	r5, sl, #32
 8021418:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802141c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021420:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021424:	4442      	add	r2, r8
 8021426:	0a2d      	lsrs	r5, r5, #8
 8021428:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802142c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021430:	432a      	orrs	r2, r5
 8021432:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021434:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021438:	2cff      	cmp	r4, #255	; 0xff
 802143a:	d01a      	beq.n	8021472 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802143c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021440:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021444:	fb04 fa05 	mul.w	sl, r4, r5
 8021448:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802144c:	fb08 f80e 	mul.w	r8, r8, lr
 8021450:	f10a 0e20 	add.w	lr, sl, #32
 8021454:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021458:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802145c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021460:	4445      	add	r5, r8
 8021462:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021466:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802146a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802146e:	ea45 050e 	orr.w	r5, r5, lr
 8021472:	fb1c fe01 	smulbb	lr, ip, r1
 8021476:	f1cc 0810 	rsb	r8, ip, #16
 802147a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802147e:	eba8 0801 	sub.w	r8, r8, r1
 8021482:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021486:	4341      	muls	r1, r0
 8021488:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802148c:	fb09 1108 	mla	r1, r9, r8, r1
 8021490:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021494:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021498:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802149c:	ea4a 0202 	orr.w	r2, sl, r2
 80214a0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80214a4:	fb0c 1102 	mla	r1, ip, r2, r1
 80214a8:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80214ac:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80214b0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80214b4:	ea4b 0505 	orr.w	r5, fp, r5
 80214b8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80214bc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80214c0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80214c4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80214c8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80214cc:	ea42 0e0e 	orr.w	lr, r2, lr
 80214d0:	fa1f f28e 	uxth.w	r2, lr
 80214d4:	2bff      	cmp	r3, #255	; 0xff
 80214d6:	d103      	bne.n	80214e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80214d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80214da:	29ff      	cmp	r1, #255	; 0xff
 80214dc:	f000 80de 	beq.w	802169c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80214e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80214e2:	8838      	ldrh	r0, [r7, #0]
 80214e4:	434b      	muls	r3, r1
 80214e6:	f103 0c01 	add.w	ip, r3, #1
 80214ea:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80214ee:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80214f2:	fa5f fc83 	uxtb.w	ip, r3
 80214f6:	1203      	asrs	r3, r0, #8
 80214f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80214fc:	fb13 f30c 	smulbb	r3, r3, ip
 8021500:	1215      	asrs	r5, r2, #8
 8021502:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021506:	fb05 3501 	mla	r5, r5, r1, r3
 802150a:	10c3      	asrs	r3, r0, #3
 802150c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021510:	fb13 f30c 	smulbb	r3, r3, ip
 8021514:	10d1      	asrs	r1, r2, #3
 8021516:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021518:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802151c:	fb01 3104 	mla	r1, r1, r4, r3
 8021520:	00c3      	lsls	r3, r0, #3
 8021522:	b2db      	uxtb	r3, r3
 8021524:	fb13 f30c 	smulbb	r3, r3, ip
 8021528:	00d2      	lsls	r2, r2, #3
 802152a:	b2d2      	uxtb	r2, r2
 802152c:	fb02 3304 	mla	r3, r2, r4, r3
 8021530:	b2ad      	uxth	r5, r5
 8021532:	b29a      	uxth	r2, r3
 8021534:	1c6b      	adds	r3, r5, #1
 8021536:	b289      	uxth	r1, r1
 8021538:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802153c:	1c53      	adds	r3, r2, #1
 802153e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021542:	1c4a      	adds	r2, r1, #1
 8021544:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021548:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802154c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021550:	0949      	lsrs	r1, r1, #5
 8021552:	432b      	orrs	r3, r5
 8021554:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021558:	430b      	orrs	r3, r1
 802155a:	803b      	strh	r3, [r7, #0]
 802155c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802155e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021560:	3702      	adds	r7, #2
 8021562:	4413      	add	r3, r2
 8021564:	9321      	str	r3, [sp, #132]	; 0x84
 8021566:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021568:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802156a:	441a      	add	r2, r3
 802156c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802156e:	9222      	str	r2, [sp, #136]	; 0x88
 8021570:	3b01      	subs	r3, #1
 8021572:	9313      	str	r3, [sp, #76]	; 0x4c
 8021574:	e689      	b.n	802128a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021578:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802157a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 802157c:	4433      	add	r3, r6
 802157e:	9321      	str	r3, [sp, #132]	; 0x84
 8021580:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021582:	441c      	add	r4, r3
 8021584:	9b08      	ldr	r3, [sp, #32]
 8021586:	9422      	str	r4, [sp, #136]	; 0x88
 8021588:	3b01      	subs	r3, #1
 802158a:	9308      	str	r3, [sp, #32]
 802158c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802158e:	3302      	adds	r3, #2
 8021590:	9309      	str	r3, [sp, #36]	; 0x24
 8021592:	e658      	b.n	8021246 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021594:	d028      	beq.n	80215e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021596:	9b08      	ldr	r3, [sp, #32]
 8021598:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802159a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802159c:	3b01      	subs	r3, #1
 802159e:	fb00 5003 	mla	r0, r0, r3, r5
 80215a2:	1400      	asrs	r0, r0, #16
 80215a4:	f53f ae6c 	bmi.w	8021280 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80215a8:	3901      	subs	r1, #1
 80215aa:	4288      	cmp	r0, r1
 80215ac:	f6bf ae68 	bge.w	8021280 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80215b0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80215b2:	9822      	ldr	r0, [sp, #136]	; 0x88
 80215b4:	fb01 0303 	mla	r3, r1, r3, r0
 80215b8:	141b      	asrs	r3, r3, #16
 80215ba:	f53f ae61 	bmi.w	8021280 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80215be:	3a01      	subs	r2, #1
 80215c0:	4293      	cmp	r3, r2
 80215c2:	f6bf ae5d 	bge.w	8021280 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80215c6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80215ca:	9b08      	ldr	r3, [sp, #32]
 80215cc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80215d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80215d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	f300 8082 	bgt.w	80216de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 80215da:	9b08      	ldr	r3, [sp, #32]
 80215dc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80215e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215e2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80215e6:	9309      	str	r3, [sp, #36]	; 0x24
 80215e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80215ea:	2b00      	cmp	r3, #0
 80215ec:	f340 81ef 	ble.w	80219ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80215f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80215f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80215f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80215fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021600:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021604:	eef0 6a62 	vmov.f32	s13, s5
 8021608:	ee31 1a05 	vadd.f32	s2, s2, s10
 802160c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021610:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021614:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021618:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802161c:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8021620:	eef0 6a43 	vmov.f32	s13, s6
 8021624:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021628:	ee12 2a90 	vmov	r2, s5
 802162c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021630:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021632:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021636:	fb92 f3f3 	sdiv	r3, r2, r3
 802163a:	ee13 2a10 	vmov	r2, s6
 802163e:	9323      	str	r3, [sp, #140]	; 0x8c
 8021640:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021642:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8021646:	fb92 f3f3 	sdiv	r3, r2, r3
 802164a:	9324      	str	r3, [sp, #144]	; 0x90
 802164c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802164e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021650:	3b01      	subs	r3, #1
 8021652:	9311      	str	r3, [sp, #68]	; 0x44
 8021654:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021656:	bf08      	it	eq
 8021658:	4613      	moveq	r3, r2
 802165a:	eeb0 3a67 	vmov.f32	s6, s15
 802165e:	9308      	str	r3, [sp, #32]
 8021660:	eef0 2a47 	vmov.f32	s5, s14
 8021664:	e5e1      	b.n	802122a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021666:	fb08 f505 	mul.w	r5, r8, r5
 802166a:	fb09 5303 	mla	r3, r9, r3, r5
 802166e:	e661      	b.n	8021334 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8021670:	4681      	mov	r9, r0
 8021672:	e688      	b.n	8021386 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8021674:	f1c1 0210 	rsb	r2, r1, #16
 8021678:	4341      	muls	r1, r0
 802167a:	fb09 1902 	mla	r9, r9, r2, r1
 802167e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021682:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021686:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802168a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802168e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021692:	ea42 0909 	orr.w	r9, r2, r9
 8021696:	fa1f f289 	uxth.w	r2, r9
 802169a:	e71b      	b.n	80214d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802169c:	803a      	strh	r2, [r7, #0]
 802169e:	e75d      	b.n	802155c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80216a0:	f115 0e01 	adds.w	lr, r5, #1
 80216a4:	f53f af5a 	bmi.w	802155c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80216a8:	4572      	cmp	r2, lr
 80216aa:	f6ff af57 	blt.w	802155c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80216ae:	f110 0e01 	adds.w	lr, r0, #1
 80216b2:	f53f af53 	bmi.w	802155c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80216b6:	4573      	cmp	r3, lr
 80216b8:	f6ff af50 	blt.w	802155c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80216bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80216be:	b21b      	sxth	r3, r3
 80216c0:	b212      	sxth	r2, r2
 80216c2:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80216c6:	9301      	str	r3, [sp, #4]
 80216c8:	9200      	str	r2, [sp, #0]
 80216ca:	e9cd c405 	strd	ip, r4, [sp, #20]
 80216ce:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80216d2:	9502      	str	r5, [sp, #8]
 80216d4:	4639      	mov	r1, r7
 80216d6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80216d8:	f7ff fc04 	bl	8020ee4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80216dc:	e73e      	b.n	802155c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80216de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80216e0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80216e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80216e6:	fa1f fc82 	uxth.w	ip, r2
 80216ea:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80216ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80216f0:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80216f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80216f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80216fa:	141f      	asrs	r7, r3, #16
 80216fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80216fe:	141b      	asrs	r3, r3, #16
 8021700:	fb01 3707 	mla	r7, r1, r7, r3
 8021704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021706:	eb03 0a07 	add.w	sl, r3, r7
 802170a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802170e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8021712:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021716:	b29b      	uxth	r3, r3
 8021718:	2d00      	cmp	r5, #0
 802171a:	f000 813d 	beq.w	8021998 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802171e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8021722:	eb0a 0b01 	add.w	fp, sl, r1
 8021726:	fa1f fa85 	uxth.w	sl, r5
 802172a:	fb0a fc0c 	mul.w	ip, sl, ip
 802172e:	eba0 000c 	sub.w	r0, r0, ip
 8021732:	b280      	uxth	r0, r0
 8021734:	fb08 f000 	mul.w	r0, r8, r0
 8021738:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802173c:	fa1f fa8a 	uxth.w	sl, sl
 8021740:	eba3 030a 	sub.w	r3, r3, sl
 8021744:	b29b      	uxth	r3, r3
 8021746:	fb09 0303 	mla	r3, r9, r3, r0
 802174a:	940f      	str	r4, [sp, #60]	; 0x3c
 802174c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802174e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021752:	fb0a 3300 	mla	r3, sl, r0, r3
 8021756:	fb0c 3304 	mla	r3, ip, r4, r3
 802175a:	9410      	str	r4, [sp, #64]	; 0x40
 802175c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021760:	2b00      	cmp	r3, #0
 8021762:	f000 810b 	beq.w	802197c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8021766:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021768:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802176a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802176e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8021772:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021776:	f000 8114 	beq.w	80219a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 802177a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802177e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021782:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021786:	fb09 f707 	mul.w	r7, r9, r7
 802178a:	fb0a fc0c 	mul.w	ip, sl, ip
 802178e:	f107 0b20 	add.w	fp, r7, #32
 8021792:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021796:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802179a:	44cc      	add	ip, r9
 802179c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80217a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80217a4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80217a8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80217ac:	ea4c 0909 	orr.w	r9, ip, r9
 80217b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80217b4:	8847      	ldrh	r7, [r0, #2]
 80217b6:	d019      	beq.n	80217ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 80217b8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80217bc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80217c0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80217c4:	fb08 f807 	mul.w	r8, r8, r7
 80217c8:	fb0a fc0c 	mul.w	ip, sl, ip
 80217cc:	f108 0b20 	add.w	fp, r8, #32
 80217d0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80217d4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80217d8:	44bc      	add	ip, r7
 80217da:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80217de:	0a3f      	lsrs	r7, r7, #8
 80217e0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80217e4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80217e8:	ea4c 0707 	orr.w	r7, ip, r7
 80217ec:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80217f0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80217f4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80217f8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80217fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021800:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021804:	ea4c 0909 	orr.w	r9, ip, r9
 8021808:	ea4a 0707 	orr.w	r7, sl, r7
 802180c:	2d00      	cmp	r5, #0
 802180e:	f000 80ca 	beq.w	80219a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8021812:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8021816:	3901      	subs	r1, #1
 8021818:	0049      	lsls	r1, r1, #1
 802181a:	3102      	adds	r1, #2
 802181c:	eb00 0c01 	add.w	ip, r0, r1
 8021820:	5a41      	ldrh	r1, [r0, r1]
 8021822:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021824:	28ff      	cmp	r0, #255	; 0xff
 8021826:	d019      	beq.n	802185c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8021828:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802182a:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802182e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021832:	fb04 fa01 	mul.w	sl, r4, r1
 8021836:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802183a:	fb08 f800 	mul.w	r8, r8, r0
 802183e:	f10a 0020 	add.w	r0, sl, #32
 8021842:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8021846:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802184a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802184e:	4441      	add	r1, r8
 8021850:	0a00      	lsrs	r0, r0, #8
 8021852:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021856:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802185a:	4301      	orrs	r1, r0
 802185c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802185e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8021862:	2cff      	cmp	r4, #255	; 0xff
 8021864:	d01a      	beq.n	802189c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8021866:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802186a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802186e:	fb04 fa00 	mul.w	sl, r4, r0
 8021872:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021876:	fb08 f80c 	mul.w	r8, r8, ip
 802187a:	f10a 0c20 	add.w	ip, sl, #32
 802187e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8021882:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021886:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802188a:	4440      	add	r0, r8
 802188c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021890:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021894:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021898:	ea40 000c 	orr.w	r0, r0, ip
 802189c:	fb15 fc02 	smulbb	ip, r5, r2
 80218a0:	f1c5 0810 	rsb	r8, r5, #16
 80218a4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80218a8:	eba8 0802 	sub.w	r8, r8, r2
 80218ac:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80218b0:	437a      	muls	r2, r7
 80218b2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80218b6:	fb09 2208 	mla	r2, r9, r8, r2
 80218ba:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80218be:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80218c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80218c6:	ea4a 0101 	orr.w	r1, sl, r1
 80218ca:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80218ce:	fb05 2201 	mla	r2, r5, r1, r2
 80218d2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80218d6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80218da:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80218de:	ea4b 0000 	orr.w	r0, fp, r0
 80218e2:	fb0c 2200 	mla	r2, ip, r0, r2
 80218e6:	0d57      	lsrs	r7, r2, #21
 80218e8:	0952      	lsrs	r2, r2, #5
 80218ea:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80218ee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80218f2:	433a      	orrs	r2, r7
 80218f4:	2bff      	cmp	r3, #255	; 0xff
 80218f6:	b292      	uxth	r2, r2
 80218f8:	d102      	bne.n	8021900 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80218fa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80218fc:	29ff      	cmp	r1, #255	; 0xff
 80218fe:	d063      	beq.n	80219c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8021900:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021902:	f8be 1000 	ldrh.w	r1, [lr]
 8021906:	4343      	muls	r3, r0
 8021908:	1c58      	adds	r0, r3, #1
 802190a:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802190e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021912:	1208      	asrs	r0, r1, #8
 8021914:	b2db      	uxtb	r3, r3
 8021916:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802191a:	fb10 f003 	smulbb	r0, r0, r3
 802191e:	10cf      	asrs	r7, r1, #3
 8021920:	00c9      	lsls	r1, r1, #3
 8021922:	b2c9      	uxtb	r1, r1
 8021924:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021926:	1215      	asrs	r5, r2, #8
 8021928:	fb11 f103 	smulbb	r1, r1, r3
 802192c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021930:	fb05 0504 	mla	r5, r5, r4, r0
 8021934:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021938:	10d0      	asrs	r0, r2, #3
 802193a:	00d2      	lsls	r2, r2, #3
 802193c:	fb17 f703 	smulbb	r7, r7, r3
 8021940:	b2d2      	uxtb	r2, r2
 8021942:	fb02 1204 	mla	r2, r2, r4, r1
 8021946:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802194a:	fb00 7004 	mla	r0, r0, r4, r7
 802194e:	b2ad      	uxth	r5, r5
 8021950:	b292      	uxth	r2, r2
 8021952:	1c6b      	adds	r3, r5, #1
 8021954:	1c57      	adds	r7, r2, #1
 8021956:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802195a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802195e:	b280      	uxth	r0, r0
 8021960:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021964:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021968:	433d      	orrs	r5, r7
 802196a:	1c47      	adds	r7, r0, #1
 802196c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8021970:	097f      	lsrs	r7, r7, #5
 8021972:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021976:	433d      	orrs	r5, r7
 8021978:	f8ae 5000 	strh.w	r5, [lr]
 802197c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802197e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021980:	f10e 0e02 	add.w	lr, lr, #2
 8021984:	4413      	add	r3, r2
 8021986:	9321      	str	r3, [sp, #132]	; 0x84
 8021988:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802198a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802198c:	441a      	add	r2, r3
 802198e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021990:	9222      	str	r2, [sp, #136]	; 0x88
 8021992:	3b01      	subs	r3, #1
 8021994:	9313      	str	r3, [sp, #76]	; 0x4c
 8021996:	e61c      	b.n	80215d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8021998:	fb08 f000 	mul.w	r0, r8, r0
 802199c:	fb09 0303 	mla	r3, r9, r3, r0
 80219a0:	e6dc      	b.n	802175c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 80219a2:	46b9      	mov	r9, r7
 80219a4:	e704      	b.n	80217b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 80219a6:	f1c2 0110 	rsb	r1, r2, #16
 80219aa:	437a      	muls	r2, r7
 80219ac:	fb09 2901 	mla	r9, r9, r1, r2
 80219b0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80219b4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80219b8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80219bc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80219c0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80219c4:	4302      	orrs	r2, r0
 80219c6:	e795      	b.n	80218f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80219c8:	f8ae 2000 	strh.w	r2, [lr]
 80219cc:	e7d6      	b.n	802197c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80219ce:	b017      	add	sp, #92	; 0x5c
 80219d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080219d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80219d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219d8:	b085      	sub	sp, #20
 80219da:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80219de:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80219e2:	fb00 7406 	mla	r4, r0, r6, r7
 80219e6:	2800      	cmp	r0, #0
 80219e8:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80219ec:	9103      	str	r1, [sp, #12]
 80219ee:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80219f2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80219f6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80219fa:	9501      	str	r5, [sp, #4]
 80219fc:	eb02 0904 	add.w	r9, r2, r4
 8021a00:	f2c0 8141 	blt.w	8021c86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8021a04:	4583      	cmp	fp, r0
 8021a06:	f340 813e 	ble.w	8021c86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8021a0a:	2f00      	cmp	r7, #0
 8021a0c:	f2c0 8137 	blt.w	8021c7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8021a10:	42be      	cmp	r6, r7
 8021a12:	f340 8134 	ble.w	8021c7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8021a16:	f812 c004 	ldrb.w	ip, [r2, r4]
 8021a1a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8021a1e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8021a22:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021a26:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8021a2a:	4355      	muls	r5, r2
 8021a2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a30:	fb0c f203 	mul.w	r2, ip, r3
 8021a34:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021a38:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021a3c:	441d      	add	r5, r3
 8021a3e:	f102 0320 	add.w	r3, r2, #32
 8021a42:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021a46:	0a1b      	lsrs	r3, r3, #8
 8021a48:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021a4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a50:	431c      	orrs	r4, r3
 8021a52:	1c7b      	adds	r3, r7, #1
 8021a54:	f100 811c 	bmi.w	8021c90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021a58:	429e      	cmp	r6, r3
 8021a5a:	f340 8119 	ble.w	8021c90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021a5e:	2900      	cmp	r1, #0
 8021a60:	f000 8119 	beq.w	8021c96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8021a64:	9a01      	ldr	r2, [sp, #4]
 8021a66:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021a6a:	8855      	ldrh	r5, [r2, #2]
 8021a6c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021a70:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021a74:	fb08 f802 	mul.w	r8, r8, r2
 8021a78:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021a7c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021a80:	435d      	muls	r5, r3
 8021a82:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8021a86:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021a8a:	44d0      	add	r8, sl
 8021a8c:	f105 0a20 	add.w	sl, r5, #32
 8021a90:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021a94:	0a2d      	lsrs	r5, r5, #8
 8021a96:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021a9a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021a9e:	432a      	orrs	r2, r5
 8021aa0:	3001      	adds	r0, #1
 8021aa2:	f100 80fe 	bmi.w	8021ca2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021aa6:	4583      	cmp	fp, r0
 8021aa8:	f340 80fb 	ble.w	8021ca2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021aac:	f1be 0f00 	cmp.w	lr, #0
 8021ab0:	f000 80fc 	beq.w	8021cac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8021ab4:	2f00      	cmp	r7, #0
 8021ab6:	f2c0 80f1 	blt.w	8021c9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021aba:	42be      	cmp	r6, r7
 8021abc:	f340 80ee 	ble.w	8021c9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021ac0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021ac4:	9801      	ldr	r0, [sp, #4]
 8021ac6:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021aca:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021ace:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021ad2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8021ad6:	fb0a fa00 	mul.w	sl, sl, r0
 8021ada:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021ade:	fb05 f808 	mul.w	r8, r5, r8
 8021ae2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021ae6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021aea:	4482      	add	sl, r0
 8021aec:	f108 0020 	add.w	r0, r8, #32
 8021af0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021af4:	0a00      	lsrs	r0, r0, #8
 8021af6:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021afa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021afe:	ea4b 0b00 	orr.w	fp, fp, r0
 8021b02:	3701      	adds	r7, #1
 8021b04:	f100 80d7 	bmi.w	8021cb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021b08:	42be      	cmp	r6, r7
 8021b0a:	f340 80d4 	ble.w	8021cb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021b0e:	2900      	cmp	r1, #0
 8021b10:	f000 80d4 	beq.w	8021cbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8021b14:	9801      	ldr	r0, [sp, #4]
 8021b16:	3601      	adds	r6, #1
 8021b18:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021b1c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021b20:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021b24:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b28:	fb07 f800 	mul.w	r8, r7, r0
 8021b2c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021b30:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021b34:	fb09 f906 	mul.w	r9, r9, r6
 8021b38:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021b3c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021b40:	44d1      	add	r9, sl
 8021b42:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021b46:	f108 0020 	add.w	r0, r8, #32
 8021b4a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021b4e:	0a00      	lsrs	r0, r0, #8
 8021b50:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b54:	4330      	orrs	r0, r6
 8021b56:	b28e      	uxth	r6, r1
 8021b58:	fa1f f98e 	uxth.w	r9, lr
 8021b5c:	fb06 f809 	mul.w	r8, r6, r9
 8021b60:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021b64:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021b68:	0136      	lsls	r6, r6, #4
 8021b6a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021b6e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021b72:	9601      	str	r6, [sp, #4]
 8021b74:	ea4a 0404 	orr.w	r4, sl, r4
 8021b78:	fa1f f689 	uxth.w	r6, r9
 8021b7c:	9602      	str	r6, [sp, #8]
 8021b7e:	4626      	mov	r6, r4
 8021b80:	fb11 f90e 	smulbb	r9, r1, lr
 8021b84:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021b88:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021b8c:	f1ce 0410 	rsb	r4, lr, #16
 8021b90:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021b94:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021b98:	1a64      	subs	r4, r4, r1
 8021b9a:	ea4a 0202 	orr.w	r2, sl, r2
 8021b9e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021ba2:	434a      	muls	r2, r1
 8021ba4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021ba8:	fb04 2406 	mla	r4, r4, r6, r2
 8021bac:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021bb0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021bb4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021bb8:	ea4a 0000 	orr.w	r0, sl, r0
 8021bbc:	fb09 4200 	mla	r2, r9, r0, r4
 8021bc0:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021bc4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021bc8:	9801      	ldr	r0, [sp, #4]
 8021bca:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021bce:	ea44 0b0b 	orr.w	fp, r4, fp
 8021bd2:	9c02      	ldr	r4, [sp, #8]
 8021bd4:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021bd8:	1b00      	subs	r0, r0, r4
 8021bda:	9c01      	ldr	r4, [sp, #4]
 8021bdc:	b280      	uxth	r0, r0
 8021bde:	eba4 0608 	sub.w	r6, r4, r8
 8021be2:	b2b6      	uxth	r6, r6
 8021be4:	4373      	muls	r3, r6
 8021be6:	fb0c 3300 	mla	r3, ip, r0, r3
 8021bea:	9802      	ldr	r0, [sp, #8]
 8021bec:	9903      	ldr	r1, [sp, #12]
 8021bee:	fb00 3505 	mla	r5, r0, r5, r3
 8021bf2:	fb08 5707 	mla	r7, r8, r7, r5
 8021bf6:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8021bfa:	8809      	ldrh	r1, [r1, #0]
 8021bfc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021c00:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021c04:	120b      	asrs	r3, r1, #8
 8021c06:	b2ff      	uxtb	r7, r7
 8021c08:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021c0c:	437b      	muls	r3, r7
 8021c0e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021c12:	10c8      	asrs	r0, r1, #3
 8021c14:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021c18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c1c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021c20:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021c24:	00c9      	lsls	r1, r1, #3
 8021c26:	4378      	muls	r0, r7
 8021c28:	ea42 0e0e 	orr.w	lr, r2, lr
 8021c2c:	b2c9      	uxtb	r1, r1
 8021c2e:	fa1f f28e 	uxth.w	r2, lr
 8021c32:	434f      	muls	r7, r1
 8021c34:	1c59      	adds	r1, r3, #1
 8021c36:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021c3a:	1213      	asrs	r3, r2, #8
 8021c3c:	f023 0307 	bic.w	r3, r3, #7
 8021c40:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021c44:	1c41      	adds	r1, r0, #1
 8021c46:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8021c4a:	10d1      	asrs	r1, r2, #3
 8021c4c:	f021 0103 	bic.w	r1, r1, #3
 8021c50:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021c54:	021b      	lsls	r3, r3, #8
 8021c56:	00c9      	lsls	r1, r1, #3
 8021c58:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021c5c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021c60:	430b      	orrs	r3, r1
 8021c62:	1c79      	adds	r1, r7, #1
 8021c64:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021c68:	00d2      	lsls	r2, r2, #3
 8021c6a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8021c6e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021c72:	431a      	orrs	r2, r3
 8021c74:	9b03      	ldr	r3, [sp, #12]
 8021c76:	801a      	strh	r2, [r3, #0]
 8021c78:	b005      	add	sp, #20
 8021c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c7e:	f04f 0c00 	mov.w	ip, #0
 8021c82:	4664      	mov	r4, ip
 8021c84:	e6e5      	b.n	8021a52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8021c86:	2300      	movs	r3, #0
 8021c88:	469c      	mov	ip, r3
 8021c8a:	461a      	mov	r2, r3
 8021c8c:	461c      	mov	r4, r3
 8021c8e:	e707      	b.n	8021aa0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021c90:	2300      	movs	r3, #0
 8021c92:	461a      	mov	r2, r3
 8021c94:	e704      	b.n	8021aa0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021c96:	460b      	mov	r3, r1
 8021c98:	460a      	mov	r2, r1
 8021c9a:	e701      	b.n	8021aa0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021c9c:	2500      	movs	r5, #0
 8021c9e:	46ab      	mov	fp, r5
 8021ca0:	e72f      	b.n	8021b02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8021ca2:	2700      	movs	r7, #0
 8021ca4:	463d      	mov	r5, r7
 8021ca6:	4638      	mov	r0, r7
 8021ca8:	46bb      	mov	fp, r7
 8021caa:	e754      	b.n	8021b56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021cac:	4677      	mov	r7, lr
 8021cae:	4675      	mov	r5, lr
 8021cb0:	4670      	mov	r0, lr
 8021cb2:	46f3      	mov	fp, lr
 8021cb4:	e74f      	b.n	8021b56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021cb6:	2700      	movs	r7, #0
 8021cb8:	4638      	mov	r0, r7
 8021cba:	e74c      	b.n	8021b56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021cbc:	460f      	mov	r7, r1
 8021cbe:	4608      	mov	r0, r1
 8021cc0:	e749      	b.n	8021b56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08021cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cc8:	b093      	sub	sp, #76	; 0x4c
 8021cca:	9210      	str	r2, [sp, #64]	; 0x40
 8021ccc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021cce:	9011      	str	r0, [sp, #68]	; 0x44
 8021cd0:	6850      	ldr	r0, [r2, #4]
 8021cd2:	910e      	str	r1, [sp, #56]	; 0x38
 8021cd4:	9306      	str	r3, [sp, #24]
 8021cd6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021cda:	fb00 1303 	mla	r3, r0, r3, r1
 8021cde:	6812      	ldr	r2, [r2, #0]
 8021ce0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021ce4:	9307      	str	r3, [sp, #28]
 8021ce6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ce8:	681b      	ldr	r3, [r3, #0]
 8021cea:	9308      	str	r3, [sp, #32]
 8021cec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021cee:	685b      	ldr	r3, [r3, #4]
 8021cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8021cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	dc03      	bgt.n	8021d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021cf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021cfa:	2b00      	cmp	r3, #0
 8021cfc:	f340 83b4 	ble.w	8022468 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8021d00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021d0a:	1e48      	subs	r0, r1, #1
 8021d0c:	1e55      	subs	r5, r2, #1
 8021d0e:	9b06      	ldr	r3, [sp, #24]
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	f340 8163 	ble.w	8021fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021d16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021d18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021d1a:	1436      	asrs	r6, r6, #16
 8021d1c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021d20:	d406      	bmi.n	8021d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d22:	4286      	cmp	r6, r0
 8021d24:	da04      	bge.n	8021d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	db02      	blt.n	8021d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d2a:	42ab      	cmp	r3, r5
 8021d2c:	f2c0 8157 	blt.w	8021fde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021d30:	3601      	adds	r6, #1
 8021d32:	f100 8144 	bmi.w	8021fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8021d36:	42b1      	cmp	r1, r6
 8021d38:	f2c0 8141 	blt.w	8021fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8021d3c:	3301      	adds	r3, #1
 8021d3e:	f100 813e 	bmi.w	8021fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8021d42:	429a      	cmp	r2, r3
 8021d44:	f2c0 813b 	blt.w	8021fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8021d48:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021d4c:	9b06      	ldr	r3, [sp, #24]
 8021d4e:	9f07      	ldr	r7, [sp, #28]
 8021d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8021d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021d54:	2b00      	cmp	r3, #0
 8021d56:	f340 8164 	ble.w	8022022 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8021d5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021d5c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021d5e:	1418      	asrs	r0, r3, #16
 8021d60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021d62:	142d      	asrs	r5, r5, #16
 8021d64:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021d68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021d6a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021d6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021d74:	f100 81ee 	bmi.w	8022154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021d78:	f102 3eff 	add.w	lr, r2, #4294967295
 8021d7c:	4575      	cmp	r5, lr
 8021d7e:	f280 81e9 	bge.w	8022154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021d82:	2800      	cmp	r0, #0
 8021d84:	f2c0 81e6 	blt.w	8022154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021d88:	f103 3eff 	add.w	lr, r3, #4294967295
 8021d8c:	4570      	cmp	r0, lr
 8021d8e:	f280 81e1 	bge.w	8022154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021d92:	b212      	sxth	r2, r2
 8021d94:	fb00 5002 	mla	r0, r0, r2, r5
 8021d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d9a:	fa1f fe81 	uxth.w	lr, r1
 8021d9e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021da2:	eb03 0a00 	add.w	sl, r3, r0
 8021da6:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021daa:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021dae:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021db2:	b29b      	uxth	r3, r3
 8021db4:	f1bc 0f00 	cmp.w	ip, #0
 8021db8:	f000 8179 	beq.w	80220ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021dbc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021dc0:	eb0a 0b02 	add.w	fp, sl, r2
 8021dc4:	fa1f fa8c 	uxth.w	sl, ip
 8021dc8:	fb0a fe0e 	mul.w	lr, sl, lr
 8021dcc:	eba5 050e 	sub.w	r5, r5, lr
 8021dd0:	b2ad      	uxth	r5, r5
 8021dd2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021dd6:	fb08 f505 	mul.w	r5, r8, r5
 8021dda:	fa1f fa8a 	uxth.w	sl, sl
 8021dde:	eba3 030a 	sub.w	r3, r3, sl
 8021de2:	b29b      	uxth	r3, r3
 8021de4:	940a      	str	r4, [sp, #40]	; 0x28
 8021de6:	fb09 5303 	mla	r3, r9, r3, r5
 8021dea:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021dee:	940b      	str	r4, [sp, #44]	; 0x2c
 8021df0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021df2:	fb0a 3304 	mla	r3, sl, r4, r3
 8021df6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021df8:	fb0e 3304 	mla	r3, lr, r4, r3
 8021dfc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	f000 80cf 	beq.w	8021fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8021e06:	9c08      	ldr	r4, [sp, #32]
 8021e08:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021e0c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021e10:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021e14:	f000 8150 	beq.w	80220b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8021e18:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021e1c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021e20:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021e24:	fb09 f000 	mul.w	r0, r9, r0
 8021e28:	fb0a fe0e 	mul.w	lr, sl, lr
 8021e2c:	f100 0b20 	add.w	fp, r0, #32
 8021e30:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021e34:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021e38:	44ce      	add	lr, r9
 8021e3a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021e3e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021e42:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021e46:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021e4a:	ea4e 0909 	orr.w	r9, lr, r9
 8021e4e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021e52:	8868      	ldrh	r0, [r5, #2]
 8021e54:	d019      	beq.n	8021e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021e56:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021e5a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021e5e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021e62:	fb08 f800 	mul.w	r8, r8, r0
 8021e66:	fb0a fe0e 	mul.w	lr, sl, lr
 8021e6a:	f108 0b20 	add.w	fp, r8, #32
 8021e6e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021e72:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021e76:	4486      	add	lr, r0
 8021e78:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021e7c:	0a00      	lsrs	r0, r0, #8
 8021e7e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021e82:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021e86:	ea4e 0000 	orr.w	r0, lr, r0
 8021e8a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021e8e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021e92:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021e96:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021e9a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021e9e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021ea2:	ea4e 0909 	orr.w	r9, lr, r9
 8021ea6:	ea4a 0000 	orr.w	r0, sl, r0
 8021eaa:	f1bc 0f00 	cmp.w	ip, #0
 8021eae:	f000 8105 	beq.w	80220bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021eb2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021eb6:	3a01      	subs	r2, #1
 8021eb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021eba:	0052      	lsls	r2, r2, #1
 8021ebc:	3202      	adds	r2, #2
 8021ebe:	2cff      	cmp	r4, #255	; 0xff
 8021ec0:	eb05 0e02 	add.w	lr, r5, r2
 8021ec4:	5aaa      	ldrh	r2, [r5, r2]
 8021ec6:	d018      	beq.n	8021efa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8021ec8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021ecc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021ed0:	fb04 fa02 	mul.w	sl, r4, r2
 8021ed4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021ed8:	fb08 f805 	mul.w	r8, r8, r5
 8021edc:	f10a 0520 	add.w	r5, sl, #32
 8021ee0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021ee4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021ee8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021eec:	4442      	add	r2, r8
 8021eee:	0a2d      	lsrs	r5, r5, #8
 8021ef0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021ef4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021ef8:	432a      	orrs	r2, r5
 8021efa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021efc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021f00:	2cff      	cmp	r4, #255	; 0xff
 8021f02:	d01a      	beq.n	8021f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021f04:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021f08:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021f0c:	fb04 fa05 	mul.w	sl, r4, r5
 8021f10:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021f14:	fb08 f80e 	mul.w	r8, r8, lr
 8021f18:	f10a 0e20 	add.w	lr, sl, #32
 8021f1c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021f20:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021f24:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021f28:	4445      	add	r5, r8
 8021f2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f2e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021f32:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021f36:	ea45 050e 	orr.w	r5, r5, lr
 8021f3a:	fb1c fe01 	smulbb	lr, ip, r1
 8021f3e:	f1cc 0810 	rsb	r8, ip, #16
 8021f42:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021f46:	eba8 0801 	sub.w	r8, r8, r1
 8021f4a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021f4e:	4341      	muls	r1, r0
 8021f50:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021f54:	fb09 1108 	mla	r1, r9, r8, r1
 8021f58:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021f5c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021f60:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021f64:	ea4a 0202 	orr.w	r2, sl, r2
 8021f68:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021f6c:	fb0c 1102 	mla	r1, ip, r2, r1
 8021f70:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021f74:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021f78:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021f7c:	ea4b 0505 	orr.w	r5, fp, r5
 8021f80:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021f84:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021f88:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021f8c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021f90:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021f94:	ea42 0e0e 	orr.w	lr, r2, lr
 8021f98:	fa1f f28e 	uxth.w	r2, lr
 8021f9c:	2bff      	cmp	r3, #255	; 0xff
 8021f9e:	f040 80a1 	bne.w	80220e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8021fa2:	803a      	strh	r2, [r7, #0]
 8021fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021fa6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021fa8:	3702      	adds	r7, #2
 8021faa:	4413      	add	r3, r2
 8021fac:	931d      	str	r3, [sp, #116]	; 0x74
 8021fae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021fb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021fb2:	441a      	add	r2, r3
 8021fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021fb6:	921e      	str	r2, [sp, #120]	; 0x78
 8021fb8:	3b01      	subs	r3, #1
 8021fba:	930f      	str	r3, [sp, #60]	; 0x3c
 8021fbc:	e6c9      	b.n	8021d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021fbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021fc0:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8021fc2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8021fc4:	4433      	add	r3, r6
 8021fc6:	931d      	str	r3, [sp, #116]	; 0x74
 8021fc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021fca:	441c      	add	r4, r3
 8021fcc:	9b06      	ldr	r3, [sp, #24]
 8021fce:	941e      	str	r4, [sp, #120]	; 0x78
 8021fd0:	3b01      	subs	r3, #1
 8021fd2:	9306      	str	r3, [sp, #24]
 8021fd4:	9b07      	ldr	r3, [sp, #28]
 8021fd6:	3302      	adds	r3, #2
 8021fd8:	9307      	str	r3, [sp, #28]
 8021fda:	e698      	b.n	8021d0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021fdc:	d028      	beq.n	8022030 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021fde:	9b06      	ldr	r3, [sp, #24]
 8021fe0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021fe2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021fe4:	3b01      	subs	r3, #1
 8021fe6:	fb00 5003 	mla	r0, r0, r3, r5
 8021fea:	1400      	asrs	r0, r0, #16
 8021fec:	f53f aeac 	bmi.w	8021d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021ff0:	3901      	subs	r1, #1
 8021ff2:	4288      	cmp	r0, r1
 8021ff4:	f6bf aea8 	bge.w	8021d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021ff8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021ffa:	981e      	ldr	r0, [sp, #120]	; 0x78
 8021ffc:	fb01 0303 	mla	r3, r1, r3, r0
 8022000:	141b      	asrs	r3, r3, #16
 8022002:	f53f aea1 	bmi.w	8021d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022006:	3a01      	subs	r2, #1
 8022008:	4293      	cmp	r3, r2
 802200a:	f6bf ae9d 	bge.w	8021d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802200e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022012:	9b06      	ldr	r3, [sp, #24]
 8022014:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022018:	930f      	str	r3, [sp, #60]	; 0x3c
 802201a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802201c:	2b00      	cmp	r3, #0
 802201e:	f300 80b6 	bgt.w	802218e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8022022:	9b06      	ldr	r3, [sp, #24]
 8022024:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022028:	9b07      	ldr	r3, [sp, #28]
 802202a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802202e:	9307      	str	r3, [sp, #28]
 8022030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022032:	2b00      	cmp	r3, #0
 8022034:	f340 8218 	ble.w	8022468 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802203c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022040:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022044:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022048:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802204c:	eef0 6a62 	vmov.f32	s13, s5
 8022050:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022054:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022058:	ee61 7a27 	vmul.f32	s15, s2, s15
 802205c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022060:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022064:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022068:	eef0 6a43 	vmov.f32	s13, s6
 802206c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022070:	ee12 2a90 	vmov	r2, s5
 8022074:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022078:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802207a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802207e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022082:	ee13 2a10 	vmov	r2, s6
 8022086:	931f      	str	r3, [sp, #124]	; 0x7c
 8022088:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802208a:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802208e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022092:	9320      	str	r3, [sp, #128]	; 0x80
 8022094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022096:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022098:	3b01      	subs	r3, #1
 802209a:	930e      	str	r3, [sp, #56]	; 0x38
 802209c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802209e:	bf08      	it	eq
 80220a0:	4613      	moveq	r3, r2
 80220a2:	eeb0 3a67 	vmov.f32	s6, s15
 80220a6:	9306      	str	r3, [sp, #24]
 80220a8:	eef0 2a47 	vmov.f32	s5, s14
 80220ac:	e621      	b.n	8021cf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80220ae:	fb08 f505 	mul.w	r5, r8, r5
 80220b2:	fb09 5303 	mla	r3, r9, r3, r5
 80220b6:	e6a1      	b.n	8021dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80220b8:	4681      	mov	r9, r0
 80220ba:	e6c8      	b.n	8021e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80220bc:	f1c1 0210 	rsb	r2, r1, #16
 80220c0:	4341      	muls	r1, r0
 80220c2:	fb09 1902 	mla	r9, r9, r2, r1
 80220c6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80220ca:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80220ce:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80220d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220d6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80220da:	ea42 0909 	orr.w	r9, r2, r9
 80220de:	fa1f f289 	uxth.w	r2, r9
 80220e2:	e75b      	b.n	8021f9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80220e4:	43db      	mvns	r3, r3
 80220e6:	f8b7 c000 	ldrh.w	ip, [r7]
 80220ea:	fa5f fe83 	uxtb.w	lr, r3
 80220ee:	ea4f 202c 	mov.w	r0, ip, asr #8
 80220f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80220f6:	fb00 f00e 	mul.w	r0, r0, lr
 80220fa:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80220fe:	1c41      	adds	r1, r0, #1
 8022100:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022104:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022108:	fb05 f50e 	mul.w	r5, r5, lr
 802210c:	1211      	asrs	r1, r2, #8
 802210e:	f021 0107 	bic.w	r1, r1, #7
 8022112:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022116:	48d6      	ldr	r0, [pc, #856]	; (8022470 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022118:	b2c9      	uxtb	r1, r1
 802211a:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802211e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022122:	1c69      	adds	r1, r5, #1
 8022124:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022128:	b2db      	uxtb	r3, r3
 802212a:	10d1      	asrs	r1, r2, #3
 802212c:	fb03 f30e 	mul.w	r3, r3, lr
 8022130:	f021 0103 	bic.w	r1, r1, #3
 8022134:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022138:	00c9      	lsls	r1, r1, #3
 802213a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802213e:	4301      	orrs	r1, r0
 8022140:	1c58      	adds	r0, r3, #1
 8022142:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022146:	00d2      	lsls	r2, r2, #3
 8022148:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802214c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022150:	430a      	orrs	r2, r1
 8022152:	e726      	b.n	8021fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8022154:	f115 0e01 	adds.w	lr, r5, #1
 8022158:	f53f af24 	bmi.w	8021fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802215c:	4572      	cmp	r2, lr
 802215e:	f6ff af21 	blt.w	8021fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022162:	f110 0e01 	adds.w	lr, r0, #1
 8022166:	f53f af1d 	bmi.w	8021fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802216a:	4573      	cmp	r3, lr
 802216c:	f6ff af1a 	blt.w	8021fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022170:	b21b      	sxth	r3, r3
 8022172:	b212      	sxth	r2, r2
 8022174:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022178:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802217c:	9301      	str	r3, [sp, #4]
 802217e:	9200      	str	r2, [sp, #0]
 8022180:	4639      	mov	r1, r7
 8022182:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8022186:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022188:	f7ff fc24 	bl	80219d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802218c:	e70a      	b.n	8021fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802218e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022190:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022194:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022196:	fa1f fc82 	uxth.w	ip, r2
 802219a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802219e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80221a0:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80221a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80221aa:	141f      	asrs	r7, r3, #16
 80221ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80221ae:	141b      	asrs	r3, r3, #16
 80221b0:	fb01 3707 	mla	r7, r1, r7, r3
 80221b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221b6:	eb03 0a07 	add.w	sl, r3, r7
 80221ba:	f813 9007 	ldrb.w	r9, [r3, r7]
 80221be:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80221c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80221c6:	b29b      	uxth	r3, r3
 80221c8:	2d00      	cmp	r5, #0
 80221ca:	f000 80fe 	beq.w	80223ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80221ce:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80221d2:	eb0a 0b01 	add.w	fp, sl, r1
 80221d6:	fa1f fa85 	uxth.w	sl, r5
 80221da:	fb0a fc0c 	mul.w	ip, sl, ip
 80221de:	eba0 000c 	sub.w	r0, r0, ip
 80221e2:	b280      	uxth	r0, r0
 80221e4:	fb08 f000 	mul.w	r0, r8, r0
 80221e8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80221ec:	fa1f fa8a 	uxth.w	sl, sl
 80221f0:	eba3 030a 	sub.w	r3, r3, sl
 80221f4:	b29b      	uxth	r3, r3
 80221f6:	fb09 0303 	mla	r3, r9, r3, r0
 80221fa:	940c      	str	r4, [sp, #48]	; 0x30
 80221fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80221fe:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022202:	fb0a 3300 	mla	r3, sl, r0, r3
 8022206:	fb0c 3304 	mla	r3, ip, r4, r3
 802220a:	940d      	str	r4, [sp, #52]	; 0x34
 802220c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022210:	2b00      	cmp	r3, #0
 8022212:	f000 80cc 	beq.w	80223ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022216:	9808      	ldr	r0, [sp, #32]
 8022218:	9c08      	ldr	r4, [sp, #32]
 802221a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802221e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022222:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022226:	f000 80d5 	beq.w	80223d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802222a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802222e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022232:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022236:	fb09 f707 	mul.w	r7, r9, r7
 802223a:	fb0a fc0c 	mul.w	ip, sl, ip
 802223e:	f107 0b20 	add.w	fp, r7, #32
 8022242:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022246:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802224a:	44cc      	add	ip, r9
 802224c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022250:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022254:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022258:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802225c:	ea4c 0909 	orr.w	r9, ip, r9
 8022260:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022264:	8847      	ldrh	r7, [r0, #2]
 8022266:	d019      	beq.n	802229c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8022268:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802226c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022270:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022274:	fb08 f807 	mul.w	r8, r8, r7
 8022278:	fb0a fc0c 	mul.w	ip, sl, ip
 802227c:	f108 0b20 	add.w	fp, r8, #32
 8022280:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022284:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022288:	44bc      	add	ip, r7
 802228a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802228e:	0a3f      	lsrs	r7, r7, #8
 8022290:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022294:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022298:	ea4c 0707 	orr.w	r7, ip, r7
 802229c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80222a0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80222a4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80222a8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80222ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80222b0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80222b4:	ea4c 0909 	orr.w	r9, ip, r9
 80222b8:	ea4a 0707 	orr.w	r7, sl, r7
 80222bc:	2d00      	cmp	r5, #0
 80222be:	f000 808b 	beq.w	80223d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80222c2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80222c6:	3901      	subs	r1, #1
 80222c8:	0049      	lsls	r1, r1, #1
 80222ca:	3102      	adds	r1, #2
 80222cc:	eb00 0c01 	add.w	ip, r0, r1
 80222d0:	5a41      	ldrh	r1, [r0, r1]
 80222d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80222d4:	28ff      	cmp	r0, #255	; 0xff
 80222d6:	d019      	beq.n	802230c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 80222d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80222da:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80222de:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80222e2:	fb04 fa01 	mul.w	sl, r4, r1
 80222e6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80222ea:	fb08 f800 	mul.w	r8, r8, r0
 80222ee:	f10a 0020 	add.w	r0, sl, #32
 80222f2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80222f6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80222fa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80222fe:	4441      	add	r1, r8
 8022300:	0a00      	lsrs	r0, r0, #8
 8022302:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022306:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802230a:	4301      	orrs	r1, r0
 802230c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802230e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022312:	2cff      	cmp	r4, #255	; 0xff
 8022314:	d01a      	beq.n	802234c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8022316:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802231a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802231e:	fb04 fa00 	mul.w	sl, r4, r0
 8022322:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022326:	fb08 f80c 	mul.w	r8, r8, ip
 802232a:	f10a 0c20 	add.w	ip, sl, #32
 802232e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022332:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022336:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802233a:	4440      	add	r0, r8
 802233c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022340:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022344:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022348:	ea40 000c 	orr.w	r0, r0, ip
 802234c:	fb15 fc02 	smulbb	ip, r5, r2
 8022350:	f1c5 0810 	rsb	r8, r5, #16
 8022354:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022358:	eba8 0802 	sub.w	r8, r8, r2
 802235c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022360:	437a      	muls	r2, r7
 8022362:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022366:	fb09 2208 	mla	r2, r9, r8, r2
 802236a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802236e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022372:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022376:	ea4a 0101 	orr.w	r1, sl, r1
 802237a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802237e:	fb05 2201 	mla	r2, r5, r1, r2
 8022382:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022386:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802238a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802238e:	ea4b 0000 	orr.w	r0, fp, r0
 8022392:	fb0c 2200 	mla	r2, ip, r0, r2
 8022396:	0d57      	lsrs	r7, r2, #21
 8022398:	0952      	lsrs	r2, r2, #5
 802239a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802239e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80223a2:	433a      	orrs	r2, r7
 80223a4:	2bff      	cmp	r3, #255	; 0xff
 80223a6:	b292      	uxth	r2, r2
 80223a8:	d127      	bne.n	80223fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 80223aa:	f8ae 2000 	strh.w	r2, [lr]
 80223ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80223b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80223b2:	f10e 0e02 	add.w	lr, lr, #2
 80223b6:	4413      	add	r3, r2
 80223b8:	931d      	str	r3, [sp, #116]	; 0x74
 80223ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80223bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80223be:	441a      	add	r2, r3
 80223c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80223c2:	921e      	str	r2, [sp, #120]	; 0x78
 80223c4:	3b01      	subs	r3, #1
 80223c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80223c8:	e627      	b.n	802201a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80223ca:	fb08 f000 	mul.w	r0, r8, r0
 80223ce:	fb09 0303 	mla	r3, r9, r3, r0
 80223d2:	e71b      	b.n	802220c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 80223d4:	46b9      	mov	r9, r7
 80223d6:	e743      	b.n	8022260 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 80223d8:	f1c2 0110 	rsb	r1, r2, #16
 80223dc:	437a      	muls	r2, r7
 80223de:	fb09 2901 	mla	r9, r9, r1, r2
 80223e2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80223e6:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80223ea:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80223ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80223f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80223f6:	4302      	orrs	r2, r0
 80223f8:	e7d4      	b.n	80223a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80223fa:	43db      	mvns	r3, r3
 80223fc:	f8be 7000 	ldrh.w	r7, [lr]
 8022400:	fa5f fc83 	uxtb.w	ip, r3
 8022404:	1238      	asrs	r0, r7, #8
 8022406:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802240a:	fb00 f00c 	mul.w	r0, r0, ip
 802240e:	10fd      	asrs	r5, r7, #3
 8022410:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022414:	fb05 f10c 	mul.w	r1, r5, ip
 8022418:	1c45      	adds	r5, r0, #1
 802241a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802241e:	1215      	asrs	r5, r2, #8
 8022420:	f025 0507 	bic.w	r5, r5, #7
 8022424:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022428:	00fb      	lsls	r3, r7, #3
 802242a:	1c4d      	adds	r5, r1, #1
 802242c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022430:	b2db      	uxtb	r3, r3
 8022432:	10d1      	asrs	r1, r2, #3
 8022434:	fb03 f30c 	mul.w	r3, r3, ip
 8022438:	f021 0103 	bic.w	r1, r1, #3
 802243c:	4c0c      	ldr	r4, [pc, #48]	; (8022470 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802243e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022442:	b2c0      	uxtb	r0, r0
 8022444:	00c9      	lsls	r1, r1, #3
 8022446:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802244a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802244e:	4308      	orrs	r0, r1
 8022450:	1c59      	adds	r1, r3, #1
 8022452:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022456:	00d2      	lsls	r2, r2, #3
 8022458:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802245c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8022460:	4318      	orrs	r0, r3
 8022462:	f8ae 0000 	strh.w	r0, [lr]
 8022466:	e7a2      	b.n	80223ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022468:	b013      	add	sp, #76	; 0x4c
 802246a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802246e:	bf00      	nop
 8022470:	fffff800 	.word	0xfffff800

08022474 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022478:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 802247c:	fb05 4c03 	mla	ip, r5, r3, r4
 8022480:	2d00      	cmp	r5, #0
 8022482:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8022486:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 802248a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802248e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022492:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022496:	8808      	ldrh	r0, [r1, #0]
 8022498:	f2c0 80a7 	blt.w	80225ea <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802249c:	45aa      	cmp	sl, r5
 802249e:	f340 80a4 	ble.w	80225ea <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80224a2:	2c00      	cmp	r4, #0
 80224a4:	f2c0 809f 	blt.w	80225e6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80224a8:	42a3      	cmp	r3, r4
 80224aa:	f340 809c 	ble.w	80225e6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80224ae:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80224b2:	1c62      	adds	r2, r4, #1
 80224b4:	f100 809c 	bmi.w	80225f0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80224b8:	4293      	cmp	r3, r2
 80224ba:	f340 8099 	ble.w	80225f0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80224be:	f1b9 0f00 	cmp.w	r9, #0
 80224c2:	f000 8095 	beq.w	80225f0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80224c6:	f8be c002 	ldrh.w	ip, [lr, #2]
 80224ca:	3501      	adds	r5, #1
 80224cc:	f100 8094 	bmi.w	80225f8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80224d0:	45aa      	cmp	sl, r5
 80224d2:	f340 8091 	ble.w	80225f8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80224d6:	2f00      	cmp	r7, #0
 80224d8:	f000 808e 	beq.w	80225f8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80224dc:	2c00      	cmp	r4, #0
 80224de:	f2c0 8089 	blt.w	80225f4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80224e2:	42a3      	cmp	r3, r4
 80224e4:	f340 8086 	ble.w	80225f4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80224e8:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80224ec:	3401      	adds	r4, #1
 80224ee:	f100 8086 	bmi.w	80225fe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80224f2:	42a3      	cmp	r3, r4
 80224f4:	f340 8083 	ble.w	80225fe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80224f8:	f1b9 0f00 	cmp.w	r9, #0
 80224fc:	d07f      	beq.n	80225fe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80224fe:	3301      	adds	r3, #1
 8022500:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8022504:	fb19 fe07 	smulbb	lr, r9, r7
 8022508:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802250c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022510:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022514:	ea44 0808 	orr.w	r8, r4, r8
 8022518:	ea4f 440c 	mov.w	r4, ip, lsl #16
 802251c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022520:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022524:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022528:	ea44 0c0c 	orr.w	ip, r4, ip
 802252c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022530:	fb04 f40c 	mul.w	r4, r4, ip
 8022534:	f1c7 0210 	rsb	r2, r7, #16
 8022538:	eba2 0209 	sub.w	r2, r2, r9
 802253c:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022540:	fb02 4808 	mla	r8, r2, r8, r4
 8022544:	b2b4      	uxth	r4, r6
 8022546:	43f6      	mvns	r6, r6
 8022548:	041a      	lsls	r2, r3, #16
 802254a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802254e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022552:	4313      	orrs	r3, r2
 8022554:	fb0e 8303 	mla	r3, lr, r3, r8
 8022558:	042a      	lsls	r2, r5, #16
 802255a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802255e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022562:	432a      	orrs	r2, r5
 8022564:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022568:	fb07 3202 	mla	r2, r7, r2, r3
 802256c:	0d53      	lsrs	r3, r2, #21
 802256e:	0952      	lsrs	r2, r2, #5
 8022570:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022574:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022578:	431a      	orrs	r2, r3
 802257a:	b293      	uxth	r3, r2
 802257c:	1202      	asrs	r2, r0, #8
 802257e:	b2f6      	uxtb	r6, r6
 8022580:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022584:	fb12 f206 	smulbb	r2, r2, r6
 8022588:	10c7      	asrs	r7, r0, #3
 802258a:	00c0      	lsls	r0, r0, #3
 802258c:	b2c0      	uxtb	r0, r0
 802258e:	121d      	asrs	r5, r3, #8
 8022590:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022594:	fb10 f006 	smulbb	r0, r0, r6
 8022598:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802259c:	fb17 f706 	smulbb	r7, r7, r6
 80225a0:	fb05 2504 	mla	r5, r5, r4, r2
 80225a4:	10da      	asrs	r2, r3, #3
 80225a6:	00db      	lsls	r3, r3, #3
 80225a8:	b2db      	uxtb	r3, r3
 80225aa:	fb03 0004 	mla	r0, r3, r4, r0
 80225ae:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80225b2:	fb02 7204 	mla	r2, r2, r4, r7
 80225b6:	b2ad      	uxth	r5, r5
 80225b8:	b280      	uxth	r0, r0
 80225ba:	1c6b      	adds	r3, r5, #1
 80225bc:	b292      	uxth	r2, r2
 80225be:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80225c2:	1c43      	adds	r3, r0, #1
 80225c4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80225c8:	1c50      	adds	r0, r2, #1
 80225ca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80225ce:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80225d2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80225d6:	0952      	lsrs	r2, r2, #5
 80225d8:	432b      	orrs	r3, r5
 80225da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80225de:	4313      	orrs	r3, r2
 80225e0:	800b      	strh	r3, [r1, #0]
 80225e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80225e6:	4680      	mov	r8, r0
 80225e8:	e763      	b.n	80224b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 80225ea:	4684      	mov	ip, r0
 80225ec:	4680      	mov	r8, r0
 80225ee:	e76c      	b.n	80224ca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80225f0:	4684      	mov	ip, r0
 80225f2:	e76a      	b.n	80224ca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80225f4:	4605      	mov	r5, r0
 80225f6:	e779      	b.n	80224ec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80225f8:	4603      	mov	r3, r0
 80225fa:	4605      	mov	r5, r0
 80225fc:	e782      	b.n	8022504 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80225fe:	4603      	mov	r3, r0
 8022600:	e780      	b.n	8022504 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08022602 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022606:	b093      	sub	sp, #76	; 0x4c
 8022608:	461d      	mov	r5, r3
 802260a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802260e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022610:	910a      	str	r1, [sp, #40]	; 0x28
 8022612:	9210      	str	r2, [sp, #64]	; 0x40
 8022614:	6859      	ldr	r1, [r3, #4]
 8022616:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802261a:	681b      	ldr	r3, [r3, #0]
 802261c:	920b      	str	r2, [sp, #44]	; 0x2c
 802261e:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8022622:	fb01 2707 	mla	r7, r1, r7, r2
 8022626:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802262a:	9307      	str	r3, [sp, #28]
 802262c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802262e:	9011      	str	r0, [sp, #68]	; 0x44
 8022630:	681b      	ldr	r3, [r3, #0]
 8022632:	9309      	str	r3, [sp, #36]	; 0x24
 8022634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022636:	43db      	mvns	r3, r3
 8022638:	b2db      	uxtb	r3, r3
 802263a:	9308      	str	r3, [sp, #32]
 802263c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802263e:	2b00      	cmp	r3, #0
 8022640:	dc03      	bgt.n	802264a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022642:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022644:	2b00      	cmp	r3, #0
 8022646:	f340 8203 	ble.w	8022a50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802264a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802264c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022650:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022654:	1e48      	subs	r0, r1, #1
 8022656:	f102 3cff 	add.w	ip, r2, #4294967295
 802265a:	2d00      	cmp	r5, #0
 802265c:	f340 80da 	ble.w	8022814 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8022660:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022664:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022668:	d406      	bmi.n	8022678 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802266a:	4586      	cmp	lr, r0
 802266c:	da04      	bge.n	8022678 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802266e:	2b00      	cmp	r3, #0
 8022670:	db02      	blt.n	8022678 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022672:	4563      	cmp	r3, ip
 8022674:	f2c0 80cf 	blt.w	8022816 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022678:	f11e 0e01 	adds.w	lr, lr, #1
 802267c:	f100 80c1 	bmi.w	8022802 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022680:	4571      	cmp	r1, lr
 8022682:	f2c0 80be 	blt.w	8022802 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022686:	3301      	adds	r3, #1
 8022688:	f100 80bb 	bmi.w	8022802 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802268c:	429a      	cmp	r2, r3
 802268e:	f2c0 80b8 	blt.w	8022802 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022692:	46a9      	mov	r9, r5
 8022694:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022698:	f1b9 0f00 	cmp.w	r9, #0
 802269c:	f340 80d8 	ble.w	8022850 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80226a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226a2:	1421      	asrs	r1, r4, #16
 80226a4:	ea4f 4026 	mov.w	r0, r6, asr #16
 80226a8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80226ac:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80226b0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80226b4:	f100 8111 	bmi.w	80228da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80226b8:	f10e 3aff 	add.w	sl, lr, #4294967295
 80226bc:	4551      	cmp	r1, sl
 80226be:	f280 810c 	bge.w	80228da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80226c2:	2800      	cmp	r0, #0
 80226c4:	f2c0 8109 	blt.w	80228da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80226c8:	f103 3aff 	add.w	sl, r3, #4294967295
 80226cc:	4550      	cmp	r0, sl
 80226ce:	f280 8104 	bge.w	80228da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80226d2:	fa0f f38e 	sxth.w	r3, lr
 80226d6:	fb00 1103 	mla	r1, r0, r3, r1
 80226da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80226dc:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80226e0:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80226e4:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80226e8:	f1bc 0f00 	cmp.w	ip, #0
 80226ec:	d007      	beq.n	80226fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80226ee:	005b      	lsls	r3, r3, #1
 80226f0:	eb0a 0003 	add.w	r0, sl, r3
 80226f4:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80226f8:	930c      	str	r3, [sp, #48]	; 0x30
 80226fa:	8843      	ldrh	r3, [r0, #2]
 80226fc:	930d      	str	r3, [sp, #52]	; 0x34
 80226fe:	fb12 f30c 	smulbb	r3, r2, ip
 8022702:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8022706:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802270a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802270e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022712:	10db      	asrs	r3, r3, #3
 8022714:	ea40 000e 	orr.w	r0, r0, lr
 8022718:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802271c:	f1cc 0e10 	rsb	lr, ip, #16
 8022720:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022724:	ebae 0e02 	sub.w	lr, lr, r2
 8022728:	ea4a 0101 	orr.w	r1, sl, r1
 802272c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022730:	4351      	muls	r1, r2
 8022732:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022738:	fb0e 1e00 	mla	lr, lr, r0, r1
 802273c:	0410      	lsls	r0, r2, #16
 802273e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022742:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022746:	4310      	orrs	r0, r2
 8022748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802274a:	fb03 e000 	mla	r0, r3, r0, lr
 802274e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022750:	0412      	lsls	r2, r2, #16
 8022752:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022756:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802275a:	ea42 020e 	orr.w	r2, r2, lr
 802275e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022762:	fb03 0302 	mla	r3, r3, r2, r0
 8022766:	f8b8 0000 	ldrh.w	r0, [r8]
 802276a:	9f08      	ldr	r7, [sp, #32]
 802276c:	0d5a      	lsrs	r2, r3, #21
 802276e:	1201      	asrs	r1, r0, #8
 8022770:	095b      	lsrs	r3, r3, #5
 8022772:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022776:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802277a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802277e:	4313      	orrs	r3, r2
 8022780:	fb11 f107 	smulbb	r1, r1, r7
 8022784:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022788:	00c0      	lsls	r0, r0, #3
 802278a:	b29b      	uxth	r3, r3
 802278c:	b2c0      	uxtb	r0, r0
 802278e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8022792:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022796:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802279a:	fb10 f007 	smulbb	r0, r0, r7
 802279e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80227a2:	fb1e fe07 	smulbb	lr, lr, r7
 80227a6:	fb0c 1c02 	mla	ip, ip, r2, r1
 80227aa:	10d9      	asrs	r1, r3, #3
 80227ac:	00db      	lsls	r3, r3, #3
 80227ae:	b2db      	uxtb	r3, r3
 80227b0:	fb03 0302 	mla	r3, r3, r2, r0
 80227b4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80227b8:	fb01 e102 	mla	r1, r1, r2, lr
 80227bc:	fa1f fc8c 	uxth.w	ip, ip
 80227c0:	b29a      	uxth	r2, r3
 80227c2:	f10c 0301 	add.w	r3, ip, #1
 80227c6:	b289      	uxth	r1, r1
 80227c8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80227cc:	1c53      	adds	r3, r2, #1
 80227ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80227d2:	1c4a      	adds	r2, r1, #1
 80227d4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80227d8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80227dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80227e0:	0949      	lsrs	r1, r1, #5
 80227e2:	ea43 030c 	orr.w	r3, r3, ip
 80227e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80227ea:	430b      	orrs	r3, r1
 80227ec:	f8a8 3000 	strh.w	r3, [r8]
 80227f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80227f2:	f108 0802 	add.w	r8, r8, #2
 80227f6:	441c      	add	r4, r3
 80227f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80227fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80227fe:	441e      	add	r6, r3
 8022800:	e74a      	b.n	8022698 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022802:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022804:	3d01      	subs	r5, #1
 8022806:	441c      	add	r4, r3
 8022808:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802280a:	441e      	add	r6, r3
 802280c:	9b07      	ldr	r3, [sp, #28]
 802280e:	3302      	adds	r3, #2
 8022810:	9307      	str	r3, [sp, #28]
 8022812:	e722      	b.n	802265a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022814:	d022      	beq.n	802285c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8022816:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022818:	1e6b      	subs	r3, r5, #1
 802281a:	fb00 4003 	mla	r0, r0, r3, r4
 802281e:	1400      	asrs	r0, r0, #16
 8022820:	f53f af37 	bmi.w	8022692 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022824:	3901      	subs	r1, #1
 8022826:	4288      	cmp	r0, r1
 8022828:	f6bf af33 	bge.w	8022692 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802282c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802282e:	fb01 6303 	mla	r3, r1, r3, r6
 8022832:	141b      	asrs	r3, r3, #16
 8022834:	f53f af2d 	bmi.w	8022692 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022838:	3a01      	subs	r2, #1
 802283a:	4293      	cmp	r3, r2
 802283c:	f6bf af29 	bge.w	8022692 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022840:	46a8      	mov	r8, r5
 8022842:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8022846:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 802284a:	f1b8 0f00 	cmp.w	r8, #0
 802284e:	dc5e      	bgt.n	802290e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8022850:	9b07      	ldr	r3, [sp, #28]
 8022852:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022856:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802285a:	9307      	str	r3, [sp, #28]
 802285c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802285e:	2b00      	cmp	r3, #0
 8022860:	f340 80f6 	ble.w	8022a50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022868:	ee30 0a04 	vadd.f32	s0, s0, s8
 802286c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022870:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022874:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022878:	eef0 6a62 	vmov.f32	s13, s5
 802287c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022880:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022884:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022888:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802288c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022890:	ee16 4a90 	vmov	r4, s13
 8022894:	eef0 6a43 	vmov.f32	s13, s6
 8022898:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802289c:	ee12 2a90 	vmov	r2, s5
 80228a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80228a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80228a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80228ae:	ee13 2a10 	vmov	r2, s6
 80228b2:	931f      	str	r3, [sp, #124]	; 0x7c
 80228b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80228b6:	ee16 6a90 	vmov	r6, s13
 80228ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80228be:	9320      	str	r3, [sp, #128]	; 0x80
 80228c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80228c4:	3b01      	subs	r3, #1
 80228c6:	930a      	str	r3, [sp, #40]	; 0x28
 80228c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80228ca:	bf0c      	ite	eq
 80228cc:	4615      	moveq	r5, r2
 80228ce:	461d      	movne	r5, r3
 80228d0:	eeb0 3a67 	vmov.f32	s6, s15
 80228d4:	eef0 2a47 	vmov.f32	s5, s14
 80228d8:	e6b0      	b.n	802263c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80228da:	f111 0a01 	adds.w	sl, r1, #1
 80228de:	d487      	bmi.n	80227f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80228e0:	45d6      	cmp	lr, sl
 80228e2:	db85      	blt.n	80227f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80228e4:	f110 0a01 	adds.w	sl, r0, #1
 80228e8:	d482      	bmi.n	80227f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80228ea:	4553      	cmp	r3, sl
 80228ec:	db80      	blt.n	80227f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80228ee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80228f0:	b21b      	sxth	r3, r3
 80228f2:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80228f6:	9101      	str	r1, [sp, #4]
 80228f8:	9300      	str	r3, [sp, #0]
 80228fa:	e9cd c704 	strd	ip, r7, [sp, #16]
 80228fe:	fa0f f38e 	sxth.w	r3, lr
 8022902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022904:	4641      	mov	r1, r8
 8022906:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022908:	f7ff fdb4 	bl	8022474 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802290c:	e770      	b.n	80227f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802290e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022910:	1430      	asrs	r0, r6, #16
 8022912:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022916:	1423      	asrs	r3, r4, #16
 8022918:	fb01 3000 	mla	r0, r1, r0, r3
 802291c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802291e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022920:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8022924:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022928:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802292c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022930:	8858      	ldrh	r0, [r3, #2]
 8022932:	f1be 0f00 	cmp.w	lr, #0
 8022936:	d00b      	beq.n	8022950 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022938:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802293c:	3901      	subs	r1, #1
 802293e:	0049      	lsls	r1, r1, #1
 8022940:	3102      	adds	r1, #2
 8022942:	eb03 0b01 	add.w	fp, r3, r1
 8022946:	5a5b      	ldrh	r3, [r3, r1]
 8022948:	930e      	str	r3, [sp, #56]	; 0x38
 802294a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802294e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022950:	fb12 f30e 	smulbb	r3, r2, lr
 8022954:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8022958:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802295c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022960:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8022964:	10db      	asrs	r3, r3, #3
 8022966:	ea41 010c 	orr.w	r1, r1, ip
 802296a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802296e:	f1ce 0c10 	rsb	ip, lr, #16
 8022972:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022976:	ebac 0c02 	sub.w	ip, ip, r2
 802297a:	ea4b 0000 	orr.w	r0, fp, r0
 802297e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022982:	4350      	muls	r0, r2
 8022984:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802298a:	fb0c 0c01 	mla	ip, ip, r1, r0
 802298e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022992:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022996:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802299a:	ea4b 0101 	orr.w	r1, fp, r1
 802299e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80229a0:	fb03 c101 	mla	r1, r3, r1, ip
 80229a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80229a6:	0412      	lsls	r2, r2, #16
 80229a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80229ac:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80229b0:	4302      	orrs	r2, r0
 80229b2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80229b6:	fb03 1202 	mla	r2, r3, r2, r1
 80229ba:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80229be:	0952      	lsrs	r2, r2, #5
 80229c0:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80229c4:	f8b9 2000 	ldrh.w	r2, [r9]
 80229c8:	9f08      	ldr	r7, [sp, #32]
 80229ca:	1211      	asrs	r1, r2, #8
 80229cc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80229d0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80229d4:	fb11 f107 	smulbb	r1, r1, r7
 80229d8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80229dc:	ea4b 0303 	orr.w	r3, fp, r3
 80229e0:	00d2      	lsls	r2, r2, #3
 80229e2:	b29b      	uxth	r3, r3
 80229e4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80229e8:	b2d2      	uxtb	r2, r2
 80229ea:	1218      	asrs	r0, r3, #8
 80229ec:	fb1c fc07 	smulbb	ip, ip, r7
 80229f0:	fb12 f207 	smulbb	r2, r2, r7
 80229f4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80229f8:	fb00 100a 	mla	r0, r0, sl, r1
 80229fc:	10d9      	asrs	r1, r3, #3
 80229fe:	00db      	lsls	r3, r3, #3
 8022a00:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022a04:	b2db      	uxtb	r3, r3
 8022a06:	fb01 c10a 	mla	r1, r1, sl, ip
 8022a0a:	fb03 230a 	mla	r3, r3, sl, r2
 8022a0e:	b280      	uxth	r0, r0
 8022a10:	b29b      	uxth	r3, r3
 8022a12:	b289      	uxth	r1, r1
 8022a14:	1c42      	adds	r2, r0, #1
 8022a16:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022a1a:	f101 0c01 	add.w	ip, r1, #1
 8022a1e:	1c5a      	adds	r2, r3, #1
 8022a20:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022a24:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022a28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022a2a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022a2e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022a32:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022a36:	4310      	orrs	r0, r2
 8022a38:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022a3c:	441c      	add	r4, r3
 8022a3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a40:	ea40 000c 	orr.w	r0, r0, ip
 8022a44:	f829 0b02 	strh.w	r0, [r9], #2
 8022a48:	441e      	add	r6, r3
 8022a4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8022a4e:	e6fc      	b.n	802284a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022a50:	b013      	add	sp, #76	; 0x4c
 8022a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8022a56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022a5a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8022a5e:	fb0e 4703 	mla	r7, lr, r3, r4
 8022a62:	f1be 0f00 	cmp.w	lr, #0
 8022a66:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8022a6a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8022a6e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8022a72:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8022a76:	8808      	ldrh	r0, [r1, #0]
 8022a78:	db60      	blt.n	8022b3c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022a7a:	45f1      	cmp	r9, lr
 8022a7c:	dd5e      	ble.n	8022b3c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022a7e:	2c00      	cmp	r4, #0
 8022a80:	db5a      	blt.n	8022b38 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022a82:	42a3      	cmp	r3, r4
 8022a84:	dd58      	ble.n	8022b38 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022a86:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8022a8a:	1c62      	adds	r2, r4, #1
 8022a8c:	d459      	bmi.n	8022b42 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022a8e:	4293      	cmp	r3, r2
 8022a90:	dd57      	ble.n	8022b42 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022a92:	2d00      	cmp	r5, #0
 8022a94:	d055      	beq.n	8022b42 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022a96:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8022a9a:	f11e 0e01 	adds.w	lr, lr, #1
 8022a9e:	d454      	bmi.n	8022b4a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022aa0:	45f1      	cmp	r9, lr
 8022aa2:	dd52      	ble.n	8022b4a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022aa4:	2e00      	cmp	r6, #0
 8022aa6:	d050      	beq.n	8022b4a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022aa8:	2c00      	cmp	r4, #0
 8022aaa:	db4c      	blt.n	8022b46 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022aac:	42a3      	cmp	r3, r4
 8022aae:	dd4a      	ble.n	8022b46 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022ab0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8022ab4:	3401      	adds	r4, #1
 8022ab6:	d405      	bmi.n	8022ac4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022ab8:	42a3      	cmp	r3, r4
 8022aba:	dd03      	ble.n	8022ac4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022abc:	b115      	cbz	r5, 8022ac4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022abe:	3301      	adds	r3, #1
 8022ac0:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8022ac4:	fb15 f406 	smulbb	r4, r5, r6
 8022ac8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022acc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022ad0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022ad4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022ad8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8022adc:	ea43 0c0c 	orr.w	ip, r3, ip
 8022ae0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022ae4:	f1c6 0310 	rsb	r3, r6, #16
 8022ae8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022aec:	1b5b      	subs	r3, r3, r5
 8022aee:	ea4e 0707 	orr.w	r7, lr, r7
 8022af2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8022af6:	437d      	muls	r5, r7
 8022af8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8022afc:	fb03 5c0c 	mla	ip, r3, ip, r5
 8022b00:	0403      	lsls	r3, r0, #16
 8022b02:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022b06:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022b0a:	4318      	orrs	r0, r3
 8022b0c:	fb04 c000 	mla	r0, r4, r0, ip
 8022b10:	0413      	lsls	r3, r2, #16
 8022b12:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022b16:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022b1a:	4313      	orrs	r3, r2
 8022b1c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8022b20:	fb06 0003 	mla	r0, r6, r3, r0
 8022b24:	0d43      	lsrs	r3, r0, #21
 8022b26:	0940      	lsrs	r0, r0, #5
 8022b28:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022b2c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022b30:	4318      	orrs	r0, r3
 8022b32:	8008      	strh	r0, [r1, #0]
 8022b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022b38:	4684      	mov	ip, r0
 8022b3a:	e7a6      	b.n	8022a8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8022b3c:	4607      	mov	r7, r0
 8022b3e:	4684      	mov	ip, r0
 8022b40:	e7ab      	b.n	8022a9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022b42:	4607      	mov	r7, r0
 8022b44:	e7a9      	b.n	8022a9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022b46:	4602      	mov	r2, r0
 8022b48:	e7b4      	b.n	8022ab4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8022b4a:	4602      	mov	r2, r0
 8022b4c:	e7ba      	b.n	8022ac4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08022b4e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b52:	b08f      	sub	sp, #60	; 0x3c
 8022b54:	461d      	mov	r5, r3
 8022b56:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8022b5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022b5c:	9107      	str	r1, [sp, #28]
 8022b5e:	6859      	ldr	r1, [r3, #4]
 8022b60:	920c      	str	r2, [sp, #48]	; 0x30
 8022b62:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8022b66:	fb01 2707 	mla	r7, r1, r7, r2
 8022b6a:	681b      	ldr	r3, [r3, #0]
 8022b6c:	900d      	str	r0, [sp, #52]	; 0x34
 8022b6e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8022b72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b74:	f8d3 8000 	ldr.w	r8, [r3]
 8022b78:	9b07      	ldr	r3, [sp, #28]
 8022b7a:	2b00      	cmp	r3, #0
 8022b7c:	dc03      	bgt.n	8022b86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	f340 8181 	ble.w	8022e88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022b86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b8c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022b90:	1e48      	subs	r0, r1, #1
 8022b92:	f102 3cff 	add.w	ip, r2, #4294967295
 8022b96:	2d00      	cmp	r5, #0
 8022b98:	f340 809b 	ble.w	8022cd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8022b9c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022ba0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022ba4:	d406      	bmi.n	8022bb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022ba6:	4586      	cmp	lr, r0
 8022ba8:	da04      	bge.n	8022bb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022baa:	2b00      	cmp	r3, #0
 8022bac:	db02      	blt.n	8022bb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022bae:	4563      	cmp	r3, ip
 8022bb0:	f2c0 8090 	blt.w	8022cd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022bb4:	f11e 0e01 	adds.w	lr, lr, #1
 8022bb8:	f100 8084 	bmi.w	8022cc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022bbc:	4571      	cmp	r1, lr
 8022bbe:	f2c0 8081 	blt.w	8022cc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022bc2:	3301      	adds	r3, #1
 8022bc4:	d47e      	bmi.n	8022cc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022bc6:	429a      	cmp	r2, r3
 8022bc8:	db7c      	blt.n	8022cc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022bca:	46aa      	mov	sl, r5
 8022bcc:	46b9      	mov	r9, r7
 8022bce:	f1ba 0f00 	cmp.w	sl, #0
 8022bd2:	f340 8099 	ble.w	8022d08 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022bd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022bd8:	1421      	asrs	r1, r4, #16
 8022bda:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022bde:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022be2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022be6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022bea:	f100 80d0 	bmi.w	8022d8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022bee:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022bf2:	4559      	cmp	r1, fp
 8022bf4:	f280 80cb 	bge.w	8022d8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022bf8:	2800      	cmp	r0, #0
 8022bfa:	f2c0 80c8 	blt.w	8022d8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022bfe:	f103 3bff 	add.w	fp, r3, #4294967295
 8022c02:	4558      	cmp	r0, fp
 8022c04:	f280 80c3 	bge.w	8022d8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022c08:	fa0f fe8e 	sxth.w	lr, lr
 8022c0c:	fb00 110e 	mla	r1, r0, lr, r1
 8022c10:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022c14:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8022c18:	8841      	ldrh	r1, [r0, #2]
 8022c1a:	f1bc 0f00 	cmp.w	ip, #0
 8022c1e:	d00b      	beq.n	8022c38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8022c20:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8022c24:	3b01      	subs	r3, #1
 8022c26:	005b      	lsls	r3, r3, #1
 8022c28:	3302      	adds	r3, #2
 8022c2a:	eb00 0e03 	add.w	lr, r0, r3
 8022c2e:	5ac3      	ldrh	r3, [r0, r3]
 8022c30:	9308      	str	r3, [sp, #32]
 8022c32:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8022c36:	9309      	str	r3, [sp, #36]	; 0x24
 8022c38:	fb12 f30c 	smulbb	r3, r2, ip
 8022c3c:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8022c40:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022c44:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022c48:	ea40 000b 	orr.w	r0, r0, fp
 8022c4c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022c50:	10db      	asrs	r3, r3, #3
 8022c52:	f1cc 0e10 	rsb	lr, ip, #16
 8022c56:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022c5a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022c5e:	ebae 0e02 	sub.w	lr, lr, r2
 8022c62:	ea4b 0101 	orr.w	r1, fp, r1
 8022c66:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022c6a:	4351      	muls	r1, r2
 8022c6c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c72:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022c76:	0410      	lsls	r0, r2, #16
 8022c78:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022c7c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022c80:	4310      	orrs	r0, r2
 8022c82:	9a08      	ldr	r2, [sp, #32]
 8022c84:	fb03 e000 	mla	r0, r3, r0, lr
 8022c88:	9908      	ldr	r1, [sp, #32]
 8022c8a:	0412      	lsls	r2, r2, #16
 8022c8c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022c90:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022c94:	ea42 020e 	orr.w	r2, r2, lr
 8022c98:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022c9c:	fb03 0302 	mla	r3, r3, r2, r0
 8022ca0:	0d5a      	lsrs	r2, r3, #21
 8022ca2:	095b      	lsrs	r3, r3, #5
 8022ca4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022ca8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022cac:	4313      	orrs	r3, r2
 8022cae:	f8a9 3000 	strh.w	r3, [r9]
 8022cb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022cb4:	f109 0902 	add.w	r9, r9, #2
 8022cb8:	441c      	add	r4, r3
 8022cba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022cbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022cc0:	441e      	add	r6, r3
 8022cc2:	e784      	b.n	8022bce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022cc6:	3d01      	subs	r5, #1
 8022cc8:	441c      	add	r4, r3
 8022cca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022ccc:	3702      	adds	r7, #2
 8022cce:	441e      	add	r6, r3
 8022cd0:	e761      	b.n	8022b96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022cd2:	d01d      	beq.n	8022d10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022cd4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022cd6:	1e6b      	subs	r3, r5, #1
 8022cd8:	fb00 4003 	mla	r0, r0, r3, r4
 8022cdc:	1400      	asrs	r0, r0, #16
 8022cde:	f53f af74 	bmi.w	8022bca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022ce2:	3901      	subs	r1, #1
 8022ce4:	4288      	cmp	r0, r1
 8022ce6:	f6bf af70 	bge.w	8022bca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022cea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022cec:	fb01 6303 	mla	r3, r1, r3, r6
 8022cf0:	141b      	asrs	r3, r3, #16
 8022cf2:	f53f af6a 	bmi.w	8022bca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022cf6:	3a01      	subs	r2, #1
 8022cf8:	4293      	cmp	r3, r2
 8022cfa:	f6bf af66 	bge.w	8022bca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022cfe:	46a9      	mov	r9, r5
 8022d00:	46ba      	mov	sl, r7
 8022d02:	f1b9 0f00 	cmp.w	r9, #0
 8022d06:	dc5a      	bgt.n	8022dbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8022d08:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022d0c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8022d10:	9b07      	ldr	r3, [sp, #28]
 8022d12:	2b00      	cmp	r3, #0
 8022d14:	f340 80b8 	ble.w	8022e88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022d1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022d20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d24:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022d28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d2c:	eef0 6a62 	vmov.f32	s13, s5
 8022d30:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d38:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d44:	ee16 4a90 	vmov	r4, s13
 8022d48:	eef0 6a43 	vmov.f32	s13, s6
 8022d4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d50:	ee12 2a90 	vmov	r2, s5
 8022d54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d62:	ee13 2a10 	vmov	r2, s6
 8022d66:	931b      	str	r3, [sp, #108]	; 0x6c
 8022d68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d6a:	ee16 6a90 	vmov	r6, s13
 8022d6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d72:	931c      	str	r3, [sp, #112]	; 0x70
 8022d74:	9b07      	ldr	r3, [sp, #28]
 8022d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d78:	3b01      	subs	r3, #1
 8022d7a:	9307      	str	r3, [sp, #28]
 8022d7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d7e:	bf0c      	ite	eq
 8022d80:	4615      	moveq	r5, r2
 8022d82:	461d      	movne	r5, r3
 8022d84:	eeb0 3a67 	vmov.f32	s6, s15
 8022d88:	eef0 2a47 	vmov.f32	s5, s14
 8022d8c:	e6f4      	b.n	8022b78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022d8e:	f111 0b01 	adds.w	fp, r1, #1
 8022d92:	d48e      	bmi.n	8022cb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022d94:	45de      	cmp	lr, fp
 8022d96:	db8c      	blt.n	8022cb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022d98:	f110 0b01 	adds.w	fp, r0, #1
 8022d9c:	d489      	bmi.n	8022cb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022d9e:	455b      	cmp	r3, fp
 8022da0:	db87      	blt.n	8022cb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022da2:	b21b      	sxth	r3, r3
 8022da4:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8022da8:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8022dac:	9300      	str	r3, [sp, #0]
 8022dae:	4642      	mov	r2, r8
 8022db0:	fa0f f38e 	sxth.w	r3, lr
 8022db4:	4649      	mov	r1, r9
 8022db6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022db8:	f7ff fe4d 	bl	8022a56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8022dbc:	e779      	b.n	8022cb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022dbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022dc0:	1420      	asrs	r0, r4, #16
 8022dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022dc6:	1431      	asrs	r1, r6, #16
 8022dc8:	fb03 0101 	mla	r1, r3, r1, r0
 8022dcc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022dd0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022dd4:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8022dd8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022ddc:	8841      	ldrh	r1, [r0, #2]
 8022dde:	f1be 0f00 	cmp.w	lr, #0
 8022de2:	d00b      	beq.n	8022dfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8022de4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022de8:	3b01      	subs	r3, #1
 8022dea:	005b      	lsls	r3, r3, #1
 8022dec:	3302      	adds	r3, #2
 8022dee:	eb00 0b03 	add.w	fp, r0, r3
 8022df2:	5ac3      	ldrh	r3, [r0, r3]
 8022df4:	930a      	str	r3, [sp, #40]	; 0x28
 8022df6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8022dfc:	fb12 f30e 	smulbb	r3, r2, lr
 8022e00:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8022e04:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022e08:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022e0c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022e10:	10db      	asrs	r3, r3, #3
 8022e12:	ea40 000c 	orr.w	r0, r0, ip
 8022e16:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022e1a:	f1ce 0c10 	rsb	ip, lr, #16
 8022e1e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022e22:	ebac 0c02 	sub.w	ip, ip, r2
 8022e26:	ea4b 0101 	orr.w	r1, fp, r1
 8022e2a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022e2e:	4351      	muls	r1, r2
 8022e30:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022e34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022e36:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022e3a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022e3e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022e42:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8022e46:	ea4b 0000 	orr.w	r0, fp, r0
 8022e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e4c:	fb03 c000 	mla	r0, r3, r0, ip
 8022e50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022e52:	0412      	lsls	r2, r2, #16
 8022e54:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022e58:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8022e5c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022e60:	ea42 0b0b 	orr.w	fp, r2, fp
 8022e64:	fb03 000b 	mla	r0, r3, fp, r0
 8022e68:	0d43      	lsrs	r3, r0, #21
 8022e6a:	0940      	lsrs	r0, r0, #5
 8022e6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e70:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022e74:	4318      	orrs	r0, r3
 8022e76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022e78:	f82a 0b02 	strh.w	r0, [sl], #2
 8022e7c:	441c      	add	r4, r3
 8022e7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e80:	f109 39ff 	add.w	r9, r9, #4294967295
 8022e84:	441e      	add	r6, r3
 8022e86:	e73c      	b.n	8022d02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022e88:	b00f      	add	sp, #60	; 0x3c
 8022e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8022e8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e92:	b085      	sub	sp, #20
 8022e94:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8022e98:	9102      	str	r1, [sp, #8]
 8022e9a:	fb04 7103 	mla	r1, r4, r3, r7
 8022e9e:	2c00      	cmp	r4, #0
 8022ea0:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8022ea4:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8022ea8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022eac:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8022eb0:	f2c0 811b 	blt.w	80230ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022eb4:	45a6      	cmp	lr, r4
 8022eb6:	f340 8118 	ble.w	80230ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022eba:	2f00      	cmp	r7, #0
 8022ebc:	f2c0 8113 	blt.w	80230e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022ec0:	42bb      	cmp	r3, r7
 8022ec2:	f340 8110 	ble.w	80230e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022ec6:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8022eca:	1c7a      	adds	r2, r7, #1
 8022ecc:	f100 8110 	bmi.w	80230f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022ed0:	4293      	cmp	r3, r2
 8022ed2:	f340 810d 	ble.w	80230f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022ed6:	2e00      	cmp	r6, #0
 8022ed8:	f000 810c 	beq.w	80230f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8022edc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022ee0:	3401      	adds	r4, #1
 8022ee2:	f100 810b 	bmi.w	80230fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022ee6:	45a6      	cmp	lr, r4
 8022ee8:	f340 8108 	ble.w	80230fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022eec:	2800      	cmp	r0, #0
 8022eee:	f000 8108 	beq.w	8023102 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8022ef2:	2f00      	cmp	r7, #0
 8022ef4:	f2c0 8100 	blt.w	80230f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8022ef8:	42bb      	cmp	r3, r7
 8022efa:	f340 80fd 	ble.w	80230f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8022efe:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022f02:	3701      	adds	r7, #1
 8022f04:	f100 8100 	bmi.w	8023108 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8022f08:	42bb      	cmp	r3, r7
 8022f0a:	f340 80fd 	ble.w	8023108 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8022f0e:	2e00      	cmp	r6, #0
 8022f10:	f000 80fc 	beq.w	802310c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8022f14:	3301      	adds	r3, #1
 8022f16:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022f1a:	b2b6      	uxth	r6, r6
 8022f1c:	b280      	uxth	r0, r0
 8022f1e:	fb00 fe06 	mul.w	lr, r0, r6
 8022f22:	0136      	lsls	r6, r6, #4
 8022f24:	eba6 070e 	sub.w	r7, r6, lr
 8022f28:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022f2c:	b2bf      	uxth	r7, r7
 8022f2e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8022f32:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8022f36:	fb0a f607 	mul.w	r6, sl, r7
 8022f3a:	b280      	uxth	r0, r0
 8022f3c:	1a1b      	subs	r3, r3, r0
 8022f3e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022f42:	b29b      	uxth	r3, r3
 8022f44:	fb0b 6603 	mla	r6, fp, r3, r6
 8022f48:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022f4c:	fb00 6609 	mla	r6, r0, r9, r6
 8022f50:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022f54:	fb0e 6608 	mla	r6, lr, r8, r6
 8022f58:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022f5c:	9600      	str	r6, [sp, #0]
 8022f5e:	2e00      	cmp	r6, #0
 8022f60:	f000 80be 	beq.w	80230e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8022f64:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022f68:	fb0b fc0c 	mul.w	ip, fp, ip
 8022f6c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022f70:	fb0b f505 	mul.w	r5, fp, r5
 8022f74:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022f78:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022f7c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022f80:	44dc      	add	ip, fp
 8022f82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f86:	9501      	str	r5, [sp, #4]
 8022f88:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022f8c:	9503      	str	r5, [sp, #12]
 8022f8e:	9d01      	ldr	r5, [sp, #4]
 8022f90:	9e02      	ldr	r6, [sp, #8]
 8022f92:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022f96:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022f9a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8022f9e:	fb0a fc0c 	mul.w	ip, sl, ip
 8022fa2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8022fa6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8022faa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022fae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022fb2:	4465      	add	r5, ip
 8022fb4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022fb8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022fbc:	fb09 fc0c 	mul.w	ip, r9, ip
 8022fc0:	fb09 f904 	mul.w	r9, r9, r4
 8022fc4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022fc8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022fcc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8022fd0:	fb08 f404 	mul.w	r4, r8, r4
 8022fd4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022fd8:	fb08 f802 	mul.w	r8, r8, r2
 8022fdc:	0a2d      	lsrs	r5, r5, #8
 8022fde:	0a22      	lsrs	r2, r4, #8
 8022fe0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022fe4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022fe8:	437d      	muls	r5, r7
 8022fea:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022fee:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022ff2:	4414      	add	r4, r2
 8022ff4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8022ff8:	fb0a fa01 	mul.w	sl, sl, r1
 8022ffc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023000:	9a03      	ldr	r2, [sp, #12]
 8023002:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023006:	fb02 5503 	mla	r5, r2, r3, r5
 802300a:	0a24      	lsrs	r4, r4, #8
 802300c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023010:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023014:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023018:	fb04 540e 	mla	r4, r4, lr, r5
 802301c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023020:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023024:	4461      	add	r1, ip
 8023026:	0a09      	lsrs	r1, r1, #8
 8023028:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802302c:	fb01 4100 	mla	r1, r1, r0, r4
 8023030:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023034:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023038:	fb07 f70a 	mul.w	r7, r7, sl
 802303c:	0a09      	lsrs	r1, r1, #8
 802303e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8023042:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8023046:	fb03 7101 	mla	r1, r3, r1, r7
 802304a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802304e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023052:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023056:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802305a:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802305e:	fb00 e101 	mla	r1, r0, r1, lr
 8023062:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023066:	9a00      	ldr	r2, [sp, #0]
 8023068:	b287      	uxth	r7, r0
 802306a:	437a      	muls	r2, r7
 802306c:	1c53      	adds	r3, r2, #1
 802306e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023072:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023076:	0a09      	lsrs	r1, r1, #8
 8023078:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802307c:	4321      	orrs	r1, r4
 802307e:	0c0a      	lsrs	r2, r1, #16
 8023080:	8836      	ldrh	r6, [r6, #0]
 8023082:	fb12 f207 	smulbb	r2, r2, r7
 8023086:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802308a:	b2c8      	uxtb	r0, r1
 802308c:	1235      	asrs	r5, r6, #8
 802308e:	fb14 f407 	smulbb	r4, r4, r7
 8023092:	fb10 f007 	smulbb	r0, r0, r7
 8023096:	b2db      	uxtb	r3, r3
 8023098:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802309c:	fb05 2503 	mla	r5, r5, r3, r2
 80230a0:	10f2      	asrs	r2, r6, #3
 80230a2:	00f6      	lsls	r6, r6, #3
 80230a4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80230a8:	b2f6      	uxtb	r6, r6
 80230aa:	fb02 4203 	mla	r2, r2, r3, r4
 80230ae:	fb06 0303 	mla	r3, r6, r3, r0
 80230b2:	b2ad      	uxth	r5, r5
 80230b4:	b299      	uxth	r1, r3
 80230b6:	b294      	uxth	r4, r2
 80230b8:	1c6b      	adds	r3, r5, #1
 80230ba:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80230be:	1c62      	adds	r2, r4, #1
 80230c0:	1c4b      	adds	r3, r1, #1
 80230c2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80230c6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80230ca:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80230ce:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80230d2:	0952      	lsrs	r2, r2, #5
 80230d4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80230d8:	432b      	orrs	r3, r5
 80230da:	4313      	orrs	r3, r2
 80230dc:	9a02      	ldr	r2, [sp, #8]
 80230de:	8013      	strh	r3, [r2, #0]
 80230e0:	b005      	add	sp, #20
 80230e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230e6:	2500      	movs	r5, #0
 80230e8:	e6ef      	b.n	8022eca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80230ea:	2100      	movs	r1, #0
 80230ec:	460d      	mov	r5, r1
 80230ee:	e6f7      	b.n	8022ee0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80230f0:	2100      	movs	r1, #0
 80230f2:	e6f5      	b.n	8022ee0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80230f4:	4631      	mov	r1, r6
 80230f6:	e6f3      	b.n	8022ee0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80230f8:	2400      	movs	r4, #0
 80230fa:	e702      	b.n	8022f02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80230fc:	2200      	movs	r2, #0
 80230fe:	4614      	mov	r4, r2
 8023100:	e70b      	b.n	8022f1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023102:	4602      	mov	r2, r0
 8023104:	4604      	mov	r4, r0
 8023106:	e708      	b.n	8022f1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023108:	2200      	movs	r2, #0
 802310a:	e706      	b.n	8022f1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802310c:	4632      	mov	r2, r6
 802310e:	e704      	b.n	8022f1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08023110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023114:	b09d      	sub	sp, #116	; 0x74
 8023116:	9219      	str	r2, [sp, #100]	; 0x64
 8023118:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802311a:	901b      	str	r0, [sp, #108]	; 0x6c
 802311c:	9307      	str	r3, [sp, #28]
 802311e:	6850      	ldr	r0, [r2, #4]
 8023120:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023124:	9117      	str	r1, [sp, #92]	; 0x5c
 8023126:	931a      	str	r3, [sp, #104]	; 0x68
 8023128:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802312c:	fb00 1303 	mla	r3, r0, r3, r1
 8023130:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023134:	6812      	ldr	r2, [r2, #0]
 8023136:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802313a:	930a      	str	r3, [sp, #40]	; 0x28
 802313c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	9310      	str	r3, [sp, #64]	; 0x40
 8023142:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023146:	930b      	str	r3, [sp, #44]	; 0x2c
 8023148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802314a:	2b00      	cmp	r3, #0
 802314c:	dc03      	bgt.n	8023156 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802314e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023150:	2b00      	cmp	r3, #0
 8023152:	f340 8375 	ble.w	8023840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023156:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023158:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802315c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023160:	1e48      	subs	r0, r1, #1
 8023162:	1e57      	subs	r7, r2, #1
 8023164:	9b07      	ldr	r3, [sp, #28]
 8023166:	2b00      	cmp	r3, #0
 8023168:	f340 818e 	ble.w	8023488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802316c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023170:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023174:	d406      	bmi.n	8023184 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023176:	4584      	cmp	ip, r0
 8023178:	da04      	bge.n	8023184 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802317a:	2b00      	cmp	r3, #0
 802317c:	db02      	blt.n	8023184 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802317e:	42bb      	cmp	r3, r7
 8023180:	f2c0 8183 	blt.w	802348a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023184:	f11c 0c01 	adds.w	ip, ip, #1
 8023188:	f100 8173 	bmi.w	8023472 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802318c:	4561      	cmp	r1, ip
 802318e:	f2c0 8170 	blt.w	8023472 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023192:	3301      	adds	r3, #1
 8023194:	f100 816d 	bmi.w	8023472 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023198:	429a      	cmp	r2, r3
 802319a:	f2c0 816a 	blt.w	8023472 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802319e:	9b07      	ldr	r3, [sp, #28]
 80231a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80231a2:	9318      	str	r3, [sp, #96]	; 0x60
 80231a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	f340 818c 	ble.w	80234c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80231ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80231ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80231b0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80231b4:	1422      	asrs	r2, r4, #16
 80231b6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80231ba:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80231be:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80231c2:	689b      	ldr	r3, [r3, #8]
 80231c4:	f100 81cd 	bmi.w	8023562 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80231c8:	f103 38ff 	add.w	r8, r3, #4294967295
 80231cc:	4542      	cmp	r2, r8
 80231ce:	f280 81c8 	bge.w	8023562 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80231d2:	f1bc 0f00 	cmp.w	ip, #0
 80231d6:	f2c0 81c4 	blt.w	8023562 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80231da:	f10e 38ff 	add.w	r8, lr, #4294967295
 80231de:	45c4      	cmp	ip, r8
 80231e0:	f280 81bf 	bge.w	8023562 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80231e4:	b21b      	sxth	r3, r3
 80231e6:	fb0c 2203 	mla	r2, ip, r3, r2
 80231ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80231ec:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80231f0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80231f4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80231f8:	2800      	cmp	r0, #0
 80231fa:	f000 81a9 	beq.w	8023550 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80231fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023202:	950c      	str	r5, [sp, #48]	; 0x30
 8023204:	0e2d      	lsrs	r5, r5, #24
 8023206:	9513      	str	r5, [sp, #76]	; 0x4c
 8023208:	b181      	cbz	r1, 802322c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802320a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802320e:	3b01      	subs	r3, #1
 8023210:	009b      	lsls	r3, r3, #2
 8023212:	3304      	adds	r3, #4
 8023214:	eb08 0c03 	add.w	ip, r8, r3
 8023218:	f858 3003 	ldr.w	r3, [r8, r3]
 802321c:	9308      	str	r3, [sp, #32]
 802321e:	0e1b      	lsrs	r3, r3, #24
 8023220:	9311      	str	r3, [sp, #68]	; 0x44
 8023222:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023226:	930d      	str	r3, [sp, #52]	; 0x34
 8023228:	0e1b      	lsrs	r3, r3, #24
 802322a:	9314      	str	r3, [sp, #80]	; 0x50
 802322c:	b280      	uxth	r0, r0
 802322e:	b289      	uxth	r1, r1
 8023230:	fb00 f901 	mul.w	r9, r0, r1
 8023234:	0100      	lsls	r0, r0, #4
 8023236:	eba0 0809 	sub.w	r8, r0, r9
 802323a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802323e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023240:	fa1f f888 	uxth.w	r8, r8
 8023244:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023248:	fb08 f000 	mul.w	r0, r8, r0
 802324c:	b289      	uxth	r1, r1
 802324e:	1a5b      	subs	r3, r3, r1
 8023250:	b29b      	uxth	r3, r3
 8023252:	fb03 000e 	mla	r0, r3, lr, r0
 8023256:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023258:	fb01 0005 	mla	r0, r1, r5, r0
 802325c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802325e:	fb09 0005 	mla	r0, r9, r5, r0
 8023262:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023266:	2800      	cmp	r0, #0
 8023268:	f000 80fa 	beq.w	8023460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802326c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023270:	d01b      	beq.n	80232aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023272:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023276:	fb0e fa0a 	mul.w	sl, lr, sl
 802327a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802327e:	fb0e fe02 	mul.w	lr, lr, r2
 8023282:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023286:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802328a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802328e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023292:	4452      	add	r2, sl
 8023294:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023298:	0a12      	lsrs	r2, r2, #8
 802329a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802329e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80232a2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80232a6:	ea42 020c 	orr.w	r2, r2, ip
 80232aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80232ac:	2dff      	cmp	r5, #255	; 0xff
 80232ae:	d021      	beq.n	80232f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80232b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80232b2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80232b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80232b8:	fb05 fb0b 	mul.w	fp, r5, fp
 80232bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80232be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80232c2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80232c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80232c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80232cc:	fb05 fa0a 	mul.w	sl, r5, sl
 80232d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80232d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80232d8:	44de      	add	lr, fp
 80232da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80232de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80232e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80232e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80232ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80232ee:	ea4e 050a 	orr.w	r5, lr, sl
 80232f2:	950c      	str	r5, [sp, #48]	; 0x30
 80232f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80232f6:	2dff      	cmp	r5, #255	; 0xff
 80232f8:	d021      	beq.n	802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80232fa:	9d08      	ldr	r5, [sp, #32]
 80232fc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023300:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023302:	fb05 fb0b 	mul.w	fp, r5, fp
 8023306:	9d08      	ldr	r5, [sp, #32]
 8023308:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802330c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023310:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023312:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023316:	fb05 fa0a 	mul.w	sl, r5, sl
 802331a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802331e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023322:	44de      	add	lr, fp
 8023324:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023328:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802332c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023330:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023334:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023338:	ea4e 050a 	orr.w	r5, lr, sl
 802333c:	9508      	str	r5, [sp, #32]
 802333e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023340:	2dff      	cmp	r5, #255	; 0xff
 8023342:	d021      	beq.n	8023388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023344:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023346:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802334a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802334c:	fb05 fb0b 	mul.w	fp, r5, fp
 8023350:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023352:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023356:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802335a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802335c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023360:	fb05 fa0a 	mul.w	sl, r5, sl
 8023364:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023368:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802336c:	44de      	add	lr, fp
 802336e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023372:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023376:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802337a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802337e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023382:	ea4e 050a 	orr.w	r5, lr, sl
 8023386:	950d      	str	r5, [sp, #52]	; 0x34
 8023388:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802338a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802338e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023392:	fb08 fc0c 	mul.w	ip, r8, ip
 8023396:	fb03 cc0e 	mla	ip, r3, lr, ip
 802339a:	9d08      	ldr	r5, [sp, #32]
 802339c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80233a0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80233a4:	fb01 cc0e 	mla	ip, r1, lr, ip
 80233a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80233aa:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80233ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80233b0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80233b4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80233b8:	fb08 f80e 	mul.w	r8, r8, lr
 80233bc:	fb03 8202 	mla	r2, r3, r2, r8
 80233c0:	9b08      	ldr	r3, [sp, #32]
 80233c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80233c6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80233ca:	fb01 220a 	mla	r2, r1, sl, r2
 80233ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80233d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80233d4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80233d8:	fb09 2901 	mla	r9, r9, r1, r2
 80233dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80233de:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80233e2:	4342      	muls	r2, r0
 80233e4:	1c50      	adds	r0, r2, #1
 80233e6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80233ea:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80233ee:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80233f2:	ea4c 0c09 	orr.w	ip, ip, r9
 80233f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80233f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80233fc:	883b      	ldrh	r3, [r7, #0]
 80233fe:	fb12 f205 	smulbb	r2, r2, r5
 8023402:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023406:	fa5f fc8c 	uxtb.w	ip, ip
 802340a:	1219      	asrs	r1, r3, #8
 802340c:	fb1c fc05 	smulbb	ip, ip, r5
 8023410:	b2c0      	uxtb	r0, r0
 8023412:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023416:	fb01 2100 	mla	r1, r1, r0, r2
 802341a:	10da      	asrs	r2, r3, #3
 802341c:	00db      	lsls	r3, r3, #3
 802341e:	fb1e fe05 	smulbb	lr, lr, r5
 8023422:	b2db      	uxtb	r3, r3
 8023424:	fb03 c300 	mla	r3, r3, r0, ip
 8023428:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802342c:	b289      	uxth	r1, r1
 802342e:	fb02 e200 	mla	r2, r2, r0, lr
 8023432:	fa1f fc83 	uxth.w	ip, r3
 8023436:	1c4b      	adds	r3, r1, #1
 8023438:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802343c:	f10c 0301 	add.w	r3, ip, #1
 8023440:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023444:	b292      	uxth	r2, r2
 8023446:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802344a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802344e:	430b      	orrs	r3, r1
 8023450:	1c51      	adds	r1, r2, #1
 8023452:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023456:	0952      	lsrs	r2, r2, #5
 8023458:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802345c:	4313      	orrs	r3, r2
 802345e:	803b      	strh	r3, [r7, #0]
 8023460:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023462:	3702      	adds	r7, #2
 8023464:	441c      	add	r4, r3
 8023466:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023468:	441e      	add	r6, r3
 802346a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802346c:	3b01      	subs	r3, #1
 802346e:	9318      	str	r3, [sp, #96]	; 0x60
 8023470:	e698      	b.n	80231a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023472:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023474:	441c      	add	r4, r3
 8023476:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023478:	441e      	add	r6, r3
 802347a:	9b07      	ldr	r3, [sp, #28]
 802347c:	3b01      	subs	r3, #1
 802347e:	9307      	str	r3, [sp, #28]
 8023480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023482:	3302      	adds	r3, #2
 8023484:	930a      	str	r3, [sp, #40]	; 0x28
 8023486:	e66d      	b.n	8023164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8023488:	d023      	beq.n	80234d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802348a:	9b07      	ldr	r3, [sp, #28]
 802348c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802348e:	3b01      	subs	r3, #1
 8023490:	fb00 4003 	mla	r0, r0, r3, r4
 8023494:	1400      	asrs	r0, r0, #16
 8023496:	f53f ae82 	bmi.w	802319e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802349a:	3901      	subs	r1, #1
 802349c:	4288      	cmp	r0, r1
 802349e:	f6bf ae7e 	bge.w	802319e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80234a2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80234a4:	fb01 6303 	mla	r3, r1, r3, r6
 80234a8:	141b      	asrs	r3, r3, #16
 80234aa:	f53f ae78 	bmi.w	802319e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80234ae:	3a01      	subs	r2, #1
 80234b0:	4293      	cmp	r3, r2
 80234b2:	f6bf ae74 	bge.w	802319e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80234b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80234ba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80234be:	f1bb 0f00 	cmp.w	fp, #0
 80234c2:	dc6c      	bgt.n	802359e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80234c4:	9b07      	ldr	r3, [sp, #28]
 80234c6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80234ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234cc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80234d0:	930a      	str	r3, [sp, #40]	; 0x28
 80234d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	f340 81b3 	ble.w	8023840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80234da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80234de:	ee30 0a04 	vadd.f32	s0, s0, s8
 80234e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80234e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80234ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80234ee:	eef0 6a62 	vmov.f32	s13, s5
 80234f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80234f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80234fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80234fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023502:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023506:	ee16 4a90 	vmov	r4, s13
 802350a:	eef0 6a43 	vmov.f32	s13, s6
 802350e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023512:	ee12 2a90 	vmov	r2, s5
 8023516:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802351a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802351c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023520:	fb92 f3f3 	sdiv	r3, r2, r3
 8023524:	ee13 2a10 	vmov	r2, s6
 8023528:	9329      	str	r3, [sp, #164]	; 0xa4
 802352a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802352c:	ee16 6a90 	vmov	r6, s13
 8023530:	fb92 f3f3 	sdiv	r3, r2, r3
 8023534:	932a      	str	r3, [sp, #168]	; 0xa8
 8023536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023538:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802353a:	3b01      	subs	r3, #1
 802353c:	9317      	str	r3, [sp, #92]	; 0x5c
 802353e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023540:	bf08      	it	eq
 8023542:	4613      	moveq	r3, r2
 8023544:	eeb0 3a67 	vmov.f32	s6, s15
 8023548:	9307      	str	r3, [sp, #28]
 802354a:	eef0 2a47 	vmov.f32	s5, s14
 802354e:	e5fb      	b.n	8023148 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023550:	2900      	cmp	r1, #0
 8023552:	f43f ae6b 	beq.w	802322c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023556:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802355a:	9308      	str	r3, [sp, #32]
 802355c:	0e1b      	lsrs	r3, r3, #24
 802355e:	9311      	str	r3, [sp, #68]	; 0x44
 8023560:	e664      	b.n	802322c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023562:	f112 0801 	adds.w	r8, r2, #1
 8023566:	f53f af7b 	bmi.w	8023460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802356a:	4543      	cmp	r3, r8
 802356c:	f6ff af78 	blt.w	8023460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023570:	f11c 0801 	adds.w	r8, ip, #1
 8023574:	f53f af74 	bmi.w	8023460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023578:	45c6      	cmp	lr, r8
 802357a:	f6ff af71 	blt.w	8023460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802357e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023580:	9201      	str	r2, [sp, #4]
 8023582:	fa0f f28e 	sxth.w	r2, lr
 8023586:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802358a:	e9cd c002 	strd	ip, r0, [sp, #8]
 802358e:	9200      	str	r2, [sp, #0]
 8023590:	b21b      	sxth	r3, r3
 8023592:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023594:	4639      	mov	r1, r7
 8023596:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023598:	f7ff fc79 	bl	8022e8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802359c:	e760      	b.n	8023460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802359e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80235a0:	1427      	asrs	r7, r4, #16
 80235a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80235a6:	1433      	asrs	r3, r6, #16
 80235a8:	fb01 7303 	mla	r3, r1, r3, r7
 80235ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80235ae:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80235b2:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80235b6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80235ba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80235be:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80235c2:	2a00      	cmp	r2, #0
 80235c4:	f000 8133 	beq.w	802382e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80235c8:	687d      	ldr	r5, [r7, #4]
 80235ca:	950e      	str	r5, [sp, #56]	; 0x38
 80235cc:	0e2d      	lsrs	r5, r5, #24
 80235ce:	9515      	str	r5, [sp, #84]	; 0x54
 80235d0:	b178      	cbz	r0, 80235f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80235d2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80235d6:	3901      	subs	r1, #1
 80235d8:	0089      	lsls	r1, r1, #2
 80235da:	3104      	adds	r1, #4
 80235dc:	eb07 0e01 	add.w	lr, r7, r1
 80235e0:	5879      	ldr	r1, [r7, r1]
 80235e2:	9109      	str	r1, [sp, #36]	; 0x24
 80235e4:	0e09      	lsrs	r1, r1, #24
 80235e6:	9112      	str	r1, [sp, #72]	; 0x48
 80235e8:	f8de 1004 	ldr.w	r1, [lr, #4]
 80235ec:	910f      	str	r1, [sp, #60]	; 0x3c
 80235ee:	0e09      	lsrs	r1, r1, #24
 80235f0:	9116      	str	r1, [sp, #88]	; 0x58
 80235f2:	b292      	uxth	r2, r2
 80235f4:	b280      	uxth	r0, r0
 80235f6:	fb02 f800 	mul.w	r8, r2, r0
 80235fa:	0112      	lsls	r2, r2, #4
 80235fc:	eba2 0e08 	sub.w	lr, r2, r8
 8023600:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023602:	fa1f fe8e 	uxth.w	lr, lr
 8023606:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802360a:	fb0e f101 	mul.w	r1, lr, r1
 802360e:	b280      	uxth	r0, r0
 8023610:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023614:	1a12      	subs	r2, r2, r0
 8023616:	b292      	uxth	r2, r2
 8023618:	fb02 110c 	mla	r1, r2, ip, r1
 802361c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802361e:	fb00 1105 	mla	r1, r0, r5, r1
 8023622:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023624:	fb08 1105 	mla	r1, r8, r5, r1
 8023628:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802362c:	2900      	cmp	r1, #0
 802362e:	f000 80f5 	beq.w	802381c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8023632:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023636:	d019      	beq.n	802366c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8023638:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802363c:	fb0c fa0a 	mul.w	sl, ip, sl
 8023640:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023644:	fb0c fc03 	mul.w	ip, ip, r3
 8023648:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802364c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023650:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023654:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023658:	4453      	add	r3, sl
 802365a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802365e:	0a1b      	lsrs	r3, r3, #8
 8023660:	0a3f      	lsrs	r7, r7, #8
 8023662:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023666:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802366a:	433b      	orrs	r3, r7
 802366c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802366e:	2dff      	cmp	r5, #255	; 0xff
 8023670:	d020      	beq.n	80236b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8023672:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023674:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023678:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802367a:	436f      	muls	r7, r5
 802367c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802367e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023682:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023686:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023688:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802368c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023690:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023694:	44bc      	add	ip, r7
 8023696:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802369a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802369e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80236a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80236a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80236aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80236ae:	ea4c 050a 	orr.w	r5, ip, sl
 80236b2:	950e      	str	r5, [sp, #56]	; 0x38
 80236b4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80236b6:	2dff      	cmp	r5, #255	; 0xff
 80236b8:	d020      	beq.n	80236fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 80236ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80236bc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80236c0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80236c2:	436f      	muls	r7, r5
 80236c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80236c6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80236ca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80236ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80236d0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80236d4:	fb05 fa0a 	mul.w	sl, r5, sl
 80236d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80236dc:	44bc      	add	ip, r7
 80236de:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80236e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80236e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80236ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80236ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80236f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80236f6:	ea4c 050a 	orr.w	r5, ip, sl
 80236fa:	9509      	str	r5, [sp, #36]	; 0x24
 80236fc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80236fe:	2dff      	cmp	r5, #255	; 0xff
 8023700:	d020      	beq.n	8023744 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8023702:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023704:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023708:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802370a:	436f      	muls	r7, r5
 802370c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802370e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023712:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023716:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023718:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802371c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023720:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023724:	44bc      	add	ip, r7
 8023726:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802372a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802372e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023732:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023736:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802373a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802373e:	ea4c 050a 	orr.w	r5, ip, sl
 8023742:	950f      	str	r5, [sp, #60]	; 0x3c
 8023744:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023746:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802374a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802374e:	fb0e f707 	mul.w	r7, lr, r7
 8023752:	fb02 770c 	mla	r7, r2, ip, r7
 8023756:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023758:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802375c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023760:	fb00 770c 	mla	r7, r0, ip, r7
 8023764:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023766:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802376a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802376c:	fb08 770c 	mla	r7, r8, ip, r7
 8023770:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023774:	fb0e fe0c 	mul.w	lr, lr, ip
 8023778:	fb02 e303 	mla	r3, r2, r3, lr
 802377c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802377e:	0a3f      	lsrs	r7, r7, #8
 8023780:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023784:	fb00 330a 	mla	r3, r0, sl, r3
 8023788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802378a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802378e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023792:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023798:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802379c:	4359      	muls	r1, r3
 802379e:	1c4b      	adds	r3, r1, #1
 80237a0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80237a4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80237a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80237ac:	ea47 070c 	orr.w	r7, r7, ip
 80237b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80237b2:	0c3b      	lsrs	r3, r7, #16
 80237b4:	f8b9 0000 	ldrh.w	r0, [r9]
 80237b8:	fb13 f305 	smulbb	r3, r3, r5
 80237bc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80237c0:	b2ff      	uxtb	r7, r7
 80237c2:	1202      	asrs	r2, r0, #8
 80237c4:	fb17 f705 	smulbb	r7, r7, r5
 80237c8:	b2c9      	uxtb	r1, r1
 80237ca:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80237ce:	fb02 3201 	mla	r2, r2, r1, r3
 80237d2:	10c3      	asrs	r3, r0, #3
 80237d4:	00c0      	lsls	r0, r0, #3
 80237d6:	fb1c fc05 	smulbb	ip, ip, r5
 80237da:	b2c0      	uxtb	r0, r0
 80237dc:	fb00 7001 	mla	r0, r0, r1, r7
 80237e0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80237e4:	fb03 c301 	mla	r3, r3, r1, ip
 80237e8:	b292      	uxth	r2, r2
 80237ea:	b280      	uxth	r0, r0
 80237ec:	1c51      	adds	r1, r2, #1
 80237ee:	f100 0c01 	add.w	ip, r0, #1
 80237f2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80237f6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80237fa:	b29b      	uxth	r3, r3
 80237fc:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023800:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8023804:	ea4c 0202 	orr.w	r2, ip, r2
 8023808:	f103 0c01 	add.w	ip, r3, #1
 802380c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8023810:	095b      	lsrs	r3, r3, #5
 8023812:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023816:	431a      	orrs	r2, r3
 8023818:	f8a9 2000 	strh.w	r2, [r9]
 802381c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802381e:	f109 0902 	add.w	r9, r9, #2
 8023822:	441c      	add	r4, r3
 8023824:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023826:	f10b 3bff 	add.w	fp, fp, #4294967295
 802382a:	441e      	add	r6, r3
 802382c:	e647      	b.n	80234be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802382e:	2800      	cmp	r0, #0
 8023830:	f43f aedf 	beq.w	80235f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023834:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8023838:	9109      	str	r1, [sp, #36]	; 0x24
 802383a:	0e09      	lsrs	r1, r1, #24
 802383c:	9112      	str	r1, [sp, #72]	; 0x48
 802383e:	e6d8      	b.n	80235f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023840:	b01d      	add	sp, #116	; 0x74
 8023842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023846 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8023846:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802384a:	b085      	sub	sp, #20
 802384c:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023850:	9102      	str	r1, [sp, #8]
 8023852:	fb04 7103 	mla	r1, r4, r3, r7
 8023856:	2c00      	cmp	r4, #0
 8023858:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802385c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023860:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023864:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8023868:	f2c0 810c 	blt.w	8023a84 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802386c:	45a6      	cmp	lr, r4
 802386e:	f340 8109 	ble.w	8023a84 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8023872:	2f00      	cmp	r7, #0
 8023874:	f2c0 8104 	blt.w	8023a80 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8023878:	42bb      	cmp	r3, r7
 802387a:	f340 8101 	ble.w	8023a80 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802387e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8023882:	1c7a      	adds	r2, r7, #1
 8023884:	f100 8101 	bmi.w	8023a8a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8023888:	4293      	cmp	r3, r2
 802388a:	f340 80fe 	ble.w	8023a8a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802388e:	2e00      	cmp	r6, #0
 8023890:	f000 80fd 	beq.w	8023a8e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8023894:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023898:	3401      	adds	r4, #1
 802389a:	f100 80fc 	bmi.w	8023a96 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802389e:	45a6      	cmp	lr, r4
 80238a0:	f340 80f9 	ble.w	8023a96 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80238a4:	2800      	cmp	r0, #0
 80238a6:	f000 80f9 	beq.w	8023a9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 80238aa:	2f00      	cmp	r7, #0
 80238ac:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80238b0:	f2c0 80ef 	blt.w	8023a92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80238b4:	42bb      	cmp	r3, r7
 80238b6:	f340 80ec 	ble.w	8023a92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80238ba:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80238be:	3701      	adds	r7, #1
 80238c0:	f100 80ef 	bmi.w	8023aa2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80238c4:	42bb      	cmp	r3, r7
 80238c6:	f340 80ec 	ble.w	8023aa2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80238ca:	2e00      	cmp	r6, #0
 80238cc:	f000 80eb 	beq.w	8023aa6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80238d0:	6852      	ldr	r2, [r2, #4]
 80238d2:	b2b6      	uxth	r6, r6
 80238d4:	b280      	uxth	r0, r0
 80238d6:	fb00 fe06 	mul.w	lr, r0, r6
 80238da:	0136      	lsls	r6, r6, #4
 80238dc:	eba6 070e 	sub.w	r7, r6, lr
 80238e0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80238e4:	b2bf      	uxth	r7, r7
 80238e6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80238ea:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80238ee:	fb07 f60a 	mul.w	r6, r7, sl
 80238f2:	b280      	uxth	r0, r0
 80238f4:	1a1b      	subs	r3, r3, r0
 80238f6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80238fa:	b29b      	uxth	r3, r3
 80238fc:	fb0b 6603 	mla	r6, fp, r3, r6
 8023900:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023904:	fb00 6609 	mla	r6, r0, r9, r6
 8023908:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802390c:	fb0e 6608 	mla	r6, lr, r8, r6
 8023910:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023914:	9600      	str	r6, [sp, #0]
 8023916:	2e00      	cmp	r6, #0
 8023918:	f000 80af 	beq.w	8023a7a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802391c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023920:	fb0b fc0c 	mul.w	ip, fp, ip
 8023924:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023928:	fb0b f505 	mul.w	r5, fp, r5
 802392c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023930:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023934:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023938:	44dc      	add	ip, fp
 802393a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802393e:	9501      	str	r5, [sp, #4]
 8023940:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023944:	9503      	str	r5, [sp, #12]
 8023946:	9d01      	ldr	r5, [sp, #4]
 8023948:	9e02      	ldr	r6, [sp, #8]
 802394a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802394e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023952:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023956:	fb0a fc0c 	mul.w	ip, sl, ip
 802395a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802395e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023962:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023966:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802396a:	4465      	add	r5, ip
 802396c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023970:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023974:	fb09 fc0c 	mul.w	ip, r9, ip
 8023978:	fb09 f904 	mul.w	r9, r9, r4
 802397c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023980:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023984:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023988:	fb08 f404 	mul.w	r4, r8, r4
 802398c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023990:	fb08 f802 	mul.w	r8, r8, r2
 8023994:	0a2d      	lsrs	r5, r5, #8
 8023996:	0a22      	lsrs	r2, r4, #8
 8023998:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802399c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80239a0:	437d      	muls	r5, r7
 80239a2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80239a6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80239aa:	4414      	add	r4, r2
 80239ac:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80239b0:	fb0a fa01 	mul.w	sl, sl, r1
 80239b4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80239b8:	9a03      	ldr	r2, [sp, #12]
 80239ba:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80239be:	fb02 5503 	mla	r5, r2, r3, r5
 80239c2:	0a24      	lsrs	r4, r4, #8
 80239c4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80239c8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80239cc:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80239d0:	fb04 540e 	mla	r4, r4, lr, r5
 80239d4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80239d8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80239dc:	4461      	add	r1, ip
 80239de:	0a09      	lsrs	r1, r1, #8
 80239e0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80239e4:	fb01 4100 	mla	r1, r1, r0, r4
 80239e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80239f0:	fb07 f70a 	mul.w	r7, r7, sl
 80239f4:	0a09      	lsrs	r1, r1, #8
 80239f6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80239fa:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80239fe:	fb03 7101 	mla	r1, r3, r1, r7
 8023a02:	9b00      	ldr	r3, [sp, #0]
 8023a04:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023a08:	43da      	mvns	r2, r3
 8023a0a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023a0e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023a12:	8836      	ldrh	r6, [r6, #0]
 8023a14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023a18:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8023a1c:	fb00 e101 	mla	r1, r0, r1, lr
 8023a20:	1233      	asrs	r3, r6, #8
 8023a22:	b2d2      	uxtb	r2, r2
 8023a24:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023a28:	4353      	muls	r3, r2
 8023a2a:	10f0      	asrs	r0, r6, #3
 8023a2c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023a30:	4350      	muls	r0, r2
 8023a32:	0a09      	lsrs	r1, r1, #8
 8023a34:	00f6      	lsls	r6, r6, #3
 8023a36:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023a3a:	b2f6      	uxtb	r6, r6
 8023a3c:	4321      	orrs	r1, r4
 8023a3e:	4356      	muls	r6, r2
 8023a40:	1c5a      	adds	r2, r3, #1
 8023a42:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023a46:	0c0b      	lsrs	r3, r1, #16
 8023a48:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023a4c:	1c42      	adds	r2, r0, #1
 8023a4e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023a52:	0a0a      	lsrs	r2, r1, #8
 8023a54:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023a58:	021b      	lsls	r3, r3, #8
 8023a5a:	00d2      	lsls	r2, r2, #3
 8023a5c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a60:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023a64:	4313      	orrs	r3, r2
 8023a66:	1c72      	adds	r2, r6, #1
 8023a68:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8023a6c:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8023a70:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023a74:	4319      	orrs	r1, r3
 8023a76:	9b02      	ldr	r3, [sp, #8]
 8023a78:	8019      	strh	r1, [r3, #0]
 8023a7a:	b005      	add	sp, #20
 8023a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a80:	2500      	movs	r5, #0
 8023a82:	e6fe      	b.n	8023882 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8023a84:	2100      	movs	r1, #0
 8023a86:	460d      	mov	r5, r1
 8023a88:	e706      	b.n	8023898 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023a8a:	2100      	movs	r1, #0
 8023a8c:	e704      	b.n	8023898 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023a8e:	4631      	mov	r1, r6
 8023a90:	e702      	b.n	8023898 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023a92:	2400      	movs	r4, #0
 8023a94:	e713      	b.n	80238be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8023a96:	2200      	movs	r2, #0
 8023a98:	4614      	mov	r4, r2
 8023a9a:	e71a      	b.n	80238d2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023a9c:	4602      	mov	r2, r0
 8023a9e:	4604      	mov	r4, r0
 8023aa0:	e717      	b.n	80238d2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023aa2:	2200      	movs	r2, #0
 8023aa4:	e715      	b.n	80238d2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023aa6:	4632      	mov	r2, r6
 8023aa8:	e713      	b.n	80238d2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08023aac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ab0:	b09b      	sub	sp, #108	; 0x6c
 8023ab2:	9218      	str	r2, [sp, #96]	; 0x60
 8023ab4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023ab6:	9019      	str	r0, [sp, #100]	; 0x64
 8023ab8:	6850      	ldr	r0, [r2, #4]
 8023aba:	9116      	str	r1, [sp, #88]	; 0x58
 8023abc:	9307      	str	r3, [sp, #28]
 8023abe:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023ac2:	fb00 1303 	mla	r3, r0, r3, r1
 8023ac6:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8023aca:	6812      	ldr	r2, [r2, #0]
 8023acc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8023ad2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ad4:	681b      	ldr	r3, [r3, #0]
 8023ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8023ad8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023ada:	2b00      	cmp	r3, #0
 8023adc:	dc03      	bgt.n	8023ae6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023ade:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023ae0:	2b00      	cmp	r3, #0
 8023ae2:	f340 8387 	ble.w	80241f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023ae6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ae8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023aec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023af0:	1e48      	subs	r0, r1, #1
 8023af2:	1e57      	subs	r7, r2, #1
 8023af4:	9b07      	ldr	r3, [sp, #28]
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	f340 8166 	ble.w	8023dc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023afc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023b00:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023b04:	d406      	bmi.n	8023b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023b06:	4584      	cmp	ip, r0
 8023b08:	da04      	bge.n	8023b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023b0a:	2b00      	cmp	r3, #0
 8023b0c:	db02      	blt.n	8023b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023b0e:	42bb      	cmp	r3, r7
 8023b10:	f2c0 815b 	blt.w	8023dca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023b14:	f11c 0c01 	adds.w	ip, ip, #1
 8023b18:	f100 814b 	bmi.w	8023db2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b1c:	4561      	cmp	r1, ip
 8023b1e:	f2c0 8148 	blt.w	8023db2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b22:	3301      	adds	r3, #1
 8023b24:	f100 8145 	bmi.w	8023db2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b28:	429a      	cmp	r2, r3
 8023b2a:	f2c0 8142 	blt.w	8023db2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b2e:	9b07      	ldr	r3, [sp, #28]
 8023b30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023b32:	9317      	str	r3, [sp, #92]	; 0x5c
 8023b34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023b36:	2b00      	cmp	r3, #0
 8023b38:	f340 8165 	ble.w	8023e06 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8023b3c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023b3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023b40:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023b44:	1422      	asrs	r2, r4, #16
 8023b46:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023b4a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023b4e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023b52:	689b      	ldr	r3, [r3, #8]
 8023b54:	f100 81d5 	bmi.w	8023f02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023b58:	f103 38ff 	add.w	r8, r3, #4294967295
 8023b5c:	4542      	cmp	r2, r8
 8023b5e:	f280 81d0 	bge.w	8023f02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023b62:	f1bc 0f00 	cmp.w	ip, #0
 8023b66:	f2c0 81cc 	blt.w	8023f02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023b6a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023b6e:	45c4      	cmp	ip, r8
 8023b70:	f280 81c7 	bge.w	8023f02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023b74:	b21b      	sxth	r3, r3
 8023b76:	fb0c 2203 	mla	r2, ip, r3, r2
 8023b7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023b7c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023b80:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023b84:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023b88:	2900      	cmp	r1, #0
 8023b8a:	f000 8182 	beq.w	8023e92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023b8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023b92:	950b      	str	r5, [sp, #44]	; 0x2c
 8023b94:	0e2d      	lsrs	r5, r5, #24
 8023b96:	9512      	str	r5, [sp, #72]	; 0x48
 8023b98:	b180      	cbz	r0, 8023bbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023b9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023b9e:	3b01      	subs	r3, #1
 8023ba0:	009b      	lsls	r3, r3, #2
 8023ba2:	3304      	adds	r3, #4
 8023ba4:	eb08 0c03 	add.w	ip, r8, r3
 8023ba8:	f858 3003 	ldr.w	r3, [r8, r3]
 8023bac:	9308      	str	r3, [sp, #32]
 8023bae:	0e1b      	lsrs	r3, r3, #24
 8023bb0:	9310      	str	r3, [sp, #64]	; 0x40
 8023bb2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8023bb8:	0e1b      	lsrs	r3, r3, #24
 8023bba:	9313      	str	r3, [sp, #76]	; 0x4c
 8023bbc:	b289      	uxth	r1, r1
 8023bbe:	b280      	uxth	r0, r0
 8023bc0:	fb01 f900 	mul.w	r9, r1, r0
 8023bc4:	0109      	lsls	r1, r1, #4
 8023bc6:	eba1 0809 	sub.w	r8, r1, r9
 8023bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023bcc:	fa1f f888 	uxth.w	r8, r8
 8023bd0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023bd4:	fb08 f303 	mul.w	r3, r8, r3
 8023bd8:	b280      	uxth	r0, r0
 8023bda:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8023bde:	1a09      	subs	r1, r1, r0
 8023be0:	b289      	uxth	r1, r1
 8023be2:	fb01 330e 	mla	r3, r1, lr, r3
 8023be6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023be8:	fb00 3305 	mla	r3, r0, r5, r3
 8023bec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023bee:	fb09 3305 	mla	r3, r9, r5, r3
 8023bf2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023bf6:	2b00      	cmp	r3, #0
 8023bf8:	f000 80d2 	beq.w	8023da0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023bfc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023c00:	d01b      	beq.n	8023c3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8023c02:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023c06:	fb0e fa0a 	mul.w	sl, lr, sl
 8023c0a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023c0e:	fb0e fe02 	mul.w	lr, lr, r2
 8023c12:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023c16:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023c1a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023c1e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023c22:	4452      	add	r2, sl
 8023c24:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023c28:	0a12      	lsrs	r2, r2, #8
 8023c2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c2e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023c32:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c36:	ea42 020c 	orr.w	r2, r2, ip
 8023c3a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023c3c:	2dff      	cmp	r5, #255	; 0xff
 8023c3e:	d021      	beq.n	8023c84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8023c40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023c42:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023c46:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023c48:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023c4e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c52:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023c56:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023c58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c5c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023c60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c64:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c68:	44de      	add	lr, fp
 8023c6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c7e:	ea4e 050a 	orr.w	r5, lr, sl
 8023c82:	950b      	str	r5, [sp, #44]	; 0x2c
 8023c84:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023c86:	2dff      	cmp	r5, #255	; 0xff
 8023c88:	d021      	beq.n	8023cce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8023c8a:	9d08      	ldr	r5, [sp, #32]
 8023c8c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023c90:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023c92:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c96:	9d08      	ldr	r5, [sp, #32]
 8023c98:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023c9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023c9e:	fb05 fa0e 	mul.w	sl, r5, lr
 8023ca2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ca6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023caa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023cae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023cb2:	44de      	add	lr, fp
 8023cb4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cbc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cc0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cc4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023cc8:	ea4e 050a 	orr.w	r5, lr, sl
 8023ccc:	9508      	str	r5, [sp, #32]
 8023cce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cd0:	2dff      	cmp	r5, #255	; 0xff
 8023cd2:	d021      	beq.n	8023d18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8023cd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023cd6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023cda:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cdc:	fb05 fb0b 	mul.w	fp, r5, fp
 8023ce0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023ce2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ce6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023cea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cf0:	fb05 fa0a 	mul.w	sl, r5, sl
 8023cf4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023cf8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023cfc:	44de      	add	lr, fp
 8023cfe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d12:	ea4e 050a 	orr.w	r5, lr, sl
 8023d16:	950c      	str	r5, [sp, #48]	; 0x30
 8023d18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023d1a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023d1e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023d22:	fb08 fc0c 	mul.w	ip, r8, ip
 8023d26:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023d2a:	9d08      	ldr	r5, [sp, #32]
 8023d2c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023d30:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023d34:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023d38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023d3a:	2bff      	cmp	r3, #255	; 0xff
 8023d3c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023d40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023d42:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023d46:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023d4a:	fb08 f80e 	mul.w	r8, r8, lr
 8023d4e:	fb01 8202 	mla	r2, r1, r2, r8
 8023d52:	9908      	ldr	r1, [sp, #32]
 8023d54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d58:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023d5c:	fb00 220a 	mla	r2, r0, sl, r2
 8023d60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023d62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d66:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023d6a:	fb09 2900 	mla	r9, r9, r0, r2
 8023d6e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d72:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023d76:	ea4c 0c09 	orr.w	ip, ip, r9
 8023d7a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8023d7e:	f040 8091 	bne.w	8023ea4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8023d82:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8023d86:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8023d8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023d8e:	f022 0207 	bic.w	r2, r2, #7
 8023d92:	431a      	orrs	r2, r3
 8023d94:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023d98:	ea4c 0c02 	orr.w	ip, ip, r2
 8023d9c:	f8a7 c000 	strh.w	ip, [r7]
 8023da0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023da2:	3702      	adds	r7, #2
 8023da4:	441c      	add	r4, r3
 8023da6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023da8:	441e      	add	r6, r3
 8023daa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023dac:	3b01      	subs	r3, #1
 8023dae:	9317      	str	r3, [sp, #92]	; 0x5c
 8023db0:	e6c0      	b.n	8023b34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8023db2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023db4:	441c      	add	r4, r3
 8023db6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023db8:	441e      	add	r6, r3
 8023dba:	9b07      	ldr	r3, [sp, #28]
 8023dbc:	3b01      	subs	r3, #1
 8023dbe:	9307      	str	r3, [sp, #28]
 8023dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dc2:	3302      	adds	r3, #2
 8023dc4:	930a      	str	r3, [sp, #40]	; 0x28
 8023dc6:	e695      	b.n	8023af4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023dc8:	d024      	beq.n	8023e14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023dca:	9b07      	ldr	r3, [sp, #28]
 8023dcc:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023dce:	3b01      	subs	r3, #1
 8023dd0:	fb00 4003 	mla	r0, r0, r3, r4
 8023dd4:	1400      	asrs	r0, r0, #16
 8023dd6:	f53f aeaa 	bmi.w	8023b2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023dda:	3901      	subs	r1, #1
 8023ddc:	4288      	cmp	r0, r1
 8023dde:	f6bf aea6 	bge.w	8023b2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023de2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023de4:	fb01 6303 	mla	r3, r1, r3, r6
 8023de8:	141b      	asrs	r3, r3, #16
 8023dea:	f53f aea0 	bmi.w	8023b2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023dee:	3a01      	subs	r2, #1
 8023df0:	4293      	cmp	r3, r2
 8023df2:	f6bf ae9c 	bge.w	8023b2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023df6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023dfa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8023dfe:	f1bb 0f00 	cmp.w	fp, #0
 8023e02:	f300 809a 	bgt.w	8023f3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023e06:	9b07      	ldr	r3, [sp, #28]
 8023e08:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e0e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023e12:	930a      	str	r3, [sp, #40]	; 0x28
 8023e14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023e16:	2b00      	cmp	r3, #0
 8023e18:	f340 81ec 	ble.w	80241f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023e24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023e28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023e2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023e30:	eef0 6a62 	vmov.f32	s13, s5
 8023e34:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023e38:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023e3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023e40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023e48:	ee16 4a90 	vmov	r4, s13
 8023e4c:	eef0 6a43 	vmov.f32	s13, s6
 8023e50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e54:	ee12 2a90 	vmov	r2, s5
 8023e58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023e5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e66:	ee13 2a10 	vmov	r2, s6
 8023e6a:	9327      	str	r3, [sp, #156]	; 0x9c
 8023e6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e6e:	ee16 6a90 	vmov	r6, s13
 8023e72:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e76:	9328      	str	r3, [sp, #160]	; 0xa0
 8023e78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023e7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023e7c:	3b01      	subs	r3, #1
 8023e7e:	9316      	str	r3, [sp, #88]	; 0x58
 8023e80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e82:	bf08      	it	eq
 8023e84:	4613      	moveq	r3, r2
 8023e86:	eeb0 3a67 	vmov.f32	s6, s15
 8023e8a:	9307      	str	r3, [sp, #28]
 8023e8c:	eef0 2a47 	vmov.f32	s5, s14
 8023e90:	e622      	b.n	8023ad8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8023e92:	2800      	cmp	r0, #0
 8023e94:	f43f ae92 	beq.w	8023bbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023e98:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023e9c:	9308      	str	r3, [sp, #32]
 8023e9e:	0e1b      	lsrs	r3, r3, #24
 8023ea0:	9310      	str	r3, [sp, #64]	; 0x40
 8023ea2:	e68b      	b.n	8023bbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023ea4:	43db      	mvns	r3, r3
 8023ea6:	8839      	ldrh	r1, [r7, #0]
 8023ea8:	fa5f f883 	uxtb.w	r8, r3
 8023eac:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8023eb0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023eb4:	fb0e fe08 	mul.w	lr, lr, r8
 8023eb8:	10c8      	asrs	r0, r1, #3
 8023eba:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023ebe:	fb00 f008 	mul.w	r0, r0, r8
 8023ec2:	00cb      	lsls	r3, r1, #3
 8023ec4:	f10e 0101 	add.w	r1, lr, #1
 8023ec8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8023ecc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023ed0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8023ed4:	b2db      	uxtb	r3, r3
 8023ed6:	f100 0e01 	add.w	lr, r0, #1
 8023eda:	fb03 f308 	mul.w	r3, r3, r8
 8023ede:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8023ee2:	4dc6      	ldr	r5, [pc, #792]	; (80241fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8023ee4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023ee8:	b2c9      	uxtb	r1, r1
 8023eea:	00d2      	lsls	r2, r2, #3
 8023eec:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8023ef0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ef4:	430a      	orrs	r2, r1
 8023ef6:	1c59      	adds	r1, r3, #1
 8023ef8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023efc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023f00:	e748      	b.n	8023d94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8023f02:	f112 0801 	adds.w	r8, r2, #1
 8023f06:	f53f af4b 	bmi.w	8023da0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f0a:	4543      	cmp	r3, r8
 8023f0c:	f6ff af48 	blt.w	8023da0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f10:	f11c 0801 	adds.w	r8, ip, #1
 8023f14:	f53f af44 	bmi.w	8023da0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f18:	45c6      	cmp	lr, r8
 8023f1a:	f6ff af41 	blt.w	8023da0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f1e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023f22:	fa0f f28e 	sxth.w	r2, lr
 8023f26:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023f2a:	9200      	str	r2, [sp, #0]
 8023f2c:	b21b      	sxth	r3, r3
 8023f2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023f30:	4639      	mov	r1, r7
 8023f32:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023f34:	f7ff fc87 	bl	8023846 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8023f38:	e732      	b.n	8023da0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023f3c:	1421      	asrs	r1, r4, #16
 8023f3e:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8023f42:	1433      	asrs	r3, r6, #16
 8023f44:	fb07 1303 	mla	r3, r7, r3, r1
 8023f48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023f4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023f4c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023f50:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023f54:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023f58:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023f5c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023f60:	2a00      	cmp	r2, #0
 8023f62:	f000 8108 	beq.w	8024176 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8023f66:	684d      	ldr	r5, [r1, #4]
 8023f68:	950d      	str	r5, [sp, #52]	; 0x34
 8023f6a:	0e2d      	lsrs	r5, r5, #24
 8023f6c:	9514      	str	r5, [sp, #80]	; 0x50
 8023f6e:	b178      	cbz	r0, 8023f90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023f70:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8023f74:	3f01      	subs	r7, #1
 8023f76:	00bf      	lsls	r7, r7, #2
 8023f78:	3704      	adds	r7, #4
 8023f7a:	eb01 0e07 	add.w	lr, r1, r7
 8023f7e:	59c9      	ldr	r1, [r1, r7]
 8023f80:	9109      	str	r1, [sp, #36]	; 0x24
 8023f82:	0e09      	lsrs	r1, r1, #24
 8023f84:	9111      	str	r1, [sp, #68]	; 0x44
 8023f86:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023f8a:	910e      	str	r1, [sp, #56]	; 0x38
 8023f8c:	0e09      	lsrs	r1, r1, #24
 8023f8e:	9115      	str	r1, [sp, #84]	; 0x54
 8023f90:	b292      	uxth	r2, r2
 8023f92:	b280      	uxth	r0, r0
 8023f94:	fb02 f900 	mul.w	r9, r2, r0
 8023f98:	0112      	lsls	r2, r2, #4
 8023f9a:	eba2 0e09 	sub.w	lr, r2, r9
 8023f9e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023fa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023fa4:	fa1f fe8e 	uxth.w	lr, lr
 8023fa8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023fac:	fb0e f202 	mul.w	r2, lr, r2
 8023fb0:	b280      	uxth	r0, r0
 8023fb2:	1a09      	subs	r1, r1, r0
 8023fb4:	b289      	uxth	r1, r1
 8023fb6:	fb01 220c 	mla	r2, r1, ip, r2
 8023fba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023fbc:	fb00 2205 	mla	r2, r0, r5, r2
 8023fc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023fc2:	fb09 2205 	mla	r2, r9, r5, r2
 8023fc6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023fca:	2a00      	cmp	r2, #0
 8023fcc:	f000 80ca 	beq.w	8024164 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8023fd0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023fd4:	d019      	beq.n	802400a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8023fd6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023fda:	fb0c fa0a 	mul.w	sl, ip, sl
 8023fde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023fe2:	fb0c fc03 	mul.w	ip, ip, r3
 8023fe6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023fea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023fee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023ff2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023ff6:	4453      	add	r3, sl
 8023ff8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023ffc:	0a1b      	lsrs	r3, r3, #8
 8023ffe:	0a3f      	lsrs	r7, r7, #8
 8024000:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024004:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024008:	433b      	orrs	r3, r7
 802400a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802400c:	2dff      	cmp	r5, #255	; 0xff
 802400e:	d020      	beq.n	8024052 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8024010:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024012:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024016:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024018:	436f      	muls	r7, r5
 802401a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802401c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024020:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024024:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024026:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802402a:	fb05 fa0a 	mul.w	sl, r5, sl
 802402e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024032:	44bc      	add	ip, r7
 8024034:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024038:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802403c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024040:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024044:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024048:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802404c:	ea4c 050a 	orr.w	r5, ip, sl
 8024050:	950d      	str	r5, [sp, #52]	; 0x34
 8024052:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024054:	2dff      	cmp	r5, #255	; 0xff
 8024056:	d020      	beq.n	802409a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8024058:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802405a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802405e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024060:	436f      	muls	r7, r5
 8024062:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024064:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024068:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802406a:	fb05 fa0c 	mul.w	sl, r5, ip
 802406e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024072:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024076:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802407a:	44bc      	add	ip, r7
 802407c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024080:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024088:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802408c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024090:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024094:	ea4c 050a 	orr.w	r5, ip, sl
 8024098:	9509      	str	r5, [sp, #36]	; 0x24
 802409a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802409c:	2dff      	cmp	r5, #255	; 0xff
 802409e:	d020      	beq.n	80240e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80240a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80240a2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80240a6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80240a8:	436f      	muls	r7, r5
 80240aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80240ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80240b0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80240b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80240b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80240ba:	fb05 fa0a 	mul.w	sl, r5, sl
 80240be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240c2:	44bc      	add	ip, r7
 80240c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80240c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80240cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240dc:	ea4c 050a 	orr.w	r5, ip, sl
 80240e0:	950e      	str	r5, [sp, #56]	; 0x38
 80240e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80240e4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80240e8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80240ec:	fb0e f707 	mul.w	r7, lr, r7
 80240f0:	fb01 770c 	mla	r7, r1, ip, r7
 80240f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80240f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80240fa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80240fe:	fb00 770c 	mla	r7, r0, ip, r7
 8024102:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024104:	2aff      	cmp	r2, #255	; 0xff
 8024106:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802410a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802410c:	fb09 770c 	mla	r7, r9, ip, r7
 8024110:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024114:	fb0e fe0c 	mul.w	lr, lr, ip
 8024118:	fb01 e303 	mla	r3, r1, r3, lr
 802411c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802411e:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8024122:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024126:	fb00 330a 	mla	r3, r0, sl, r3
 802412a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802412c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024130:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024134:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024138:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802413c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024140:	ea47 070c 	orr.w	r7, r7, ip
 8024144:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024148:	d11e      	bne.n	8024188 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802414a:	097a      	lsrs	r2, r7, #5
 802414c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8024150:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024154:	f023 0307 	bic.w	r3, r3, #7
 8024158:	4313      	orrs	r3, r2
 802415a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802415e:	431f      	orrs	r7, r3
 8024160:	f8a8 7000 	strh.w	r7, [r8]
 8024164:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024166:	f108 0802 	add.w	r8, r8, #2
 802416a:	441c      	add	r4, r3
 802416c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802416e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024172:	441e      	add	r6, r3
 8024174:	e643      	b.n	8023dfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024176:	2800      	cmp	r0, #0
 8024178:	f43f af0a 	beq.w	8023f90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802417c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024180:	9109      	str	r1, [sp, #36]	; 0x24
 8024182:	0e09      	lsrs	r1, r1, #24
 8024184:	9111      	str	r1, [sp, #68]	; 0x44
 8024186:	e703      	b.n	8023f90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024188:	43d2      	mvns	r2, r2
 802418a:	f8b8 1000 	ldrh.w	r1, [r8]
 802418e:	fa5f fe82 	uxtb.w	lr, r2
 8024192:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024196:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802419a:	fb0c fc0e 	mul.w	ip, ip, lr
 802419e:	10c8      	asrs	r0, r1, #3
 80241a0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80241a4:	fb00 f00e 	mul.w	r0, r0, lr
 80241a8:	00ca      	lsls	r2, r1, #3
 80241aa:	f10c 0101 	add.w	r1, ip, #1
 80241ae:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80241b2:	b2d2      	uxtb	r2, r2
 80241b4:	0c39      	lsrs	r1, r7, #16
 80241b6:	fb02 f20e 	mul.w	r2, r2, lr
 80241ba:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80241be:	490f      	ldr	r1, [pc, #60]	; (80241fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80241c0:	fa5f fc8c 	uxtb.w	ip, ip
 80241c4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80241c8:	1c41      	adds	r1, r0, #1
 80241ca:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80241ce:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80241d2:	1c51      	adds	r1, r2, #1
 80241d4:	00c0      	lsls	r0, r0, #3
 80241d6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80241da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80241de:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80241e2:	ea4c 0c00 	orr.w	ip, ip, r0
 80241e6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80241ea:	ea47 0c0c 	orr.w	ip, r7, ip
 80241ee:	f8a8 c000 	strh.w	ip, [r8]
 80241f2:	e7b7      	b.n	8024164 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80241f4:	b01b      	add	sp, #108	; 0x6c
 80241f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241fa:	bf00      	nop
 80241fc:	fffff800 	.word	0xfffff800

08024200 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024204:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024208:	2d00      	cmp	r5, #0
 802420a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802420e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024212:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024216:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802421a:	fb05 0e03 	mla	lr, r5, r3, r0
 802421e:	f2c0 808c 	blt.w	802433a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024222:	45a9      	cmp	r9, r5
 8024224:	f340 8089 	ble.w	802433a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024228:	2800      	cmp	r0, #0
 802422a:	f2c0 8084 	blt.w	8024336 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802422e:	4580      	cmp	r8, r0
 8024230:	f340 8081 	ble.w	8024336 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024234:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024238:	5d16      	ldrb	r6, [r2, r4]
 802423a:	f01e 0f01 	tst.w	lr, #1
 802423e:	bf0c      	ite	eq
 8024240:	f006 060f 	andeq.w	r6, r6, #15
 8024244:	1136      	asrne	r6, r6, #4
 8024246:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802424a:	b2f6      	uxtb	r6, r6
 802424c:	1c44      	adds	r4, r0, #1
 802424e:	d477      	bmi.n	8024340 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024250:	45a0      	cmp	r8, r4
 8024252:	dd75      	ble.n	8024340 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024254:	2f00      	cmp	r7, #0
 8024256:	d075      	beq.n	8024344 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8024258:	f10e 0a01 	add.w	sl, lr, #1
 802425c:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024260:	5d14      	ldrb	r4, [r2, r4]
 8024262:	f01a 0f01 	tst.w	sl, #1
 8024266:	bf0c      	ite	eq
 8024268:	f004 040f 	andeq.w	r4, r4, #15
 802426c:	1124      	asrne	r4, r4, #4
 802426e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024272:	b2e4      	uxtb	r4, r4
 8024274:	3501      	adds	r5, #1
 8024276:	d469      	bmi.n	802434c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024278:	45a9      	cmp	r9, r5
 802427a:	dd67      	ble.n	802434c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802427c:	f1bc 0f00 	cmp.w	ip, #0
 8024280:	d067      	beq.n	8024352 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8024282:	2800      	cmp	r0, #0
 8024284:	db60      	blt.n	8024348 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024286:	4580      	cmp	r8, r0
 8024288:	dd5e      	ble.n	8024348 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802428a:	eb03 090e 	add.w	r9, r3, lr
 802428e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024292:	5d55      	ldrb	r5, [r2, r5]
 8024294:	f019 0f01 	tst.w	r9, #1
 8024298:	bf0c      	ite	eq
 802429a:	f005 050f 	andeq.w	r5, r5, #15
 802429e:	112d      	asrne	r5, r5, #4
 80242a0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80242a4:	b2ed      	uxtb	r5, r5
 80242a6:	3001      	adds	r0, #1
 80242a8:	d456      	bmi.n	8024358 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80242aa:	4580      	cmp	r8, r0
 80242ac:	dd54      	ble.n	8024358 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80242ae:	2f00      	cmp	r7, #0
 80242b0:	d054      	beq.n	802435c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80242b2:	3301      	adds	r3, #1
 80242b4:	449e      	add	lr, r3
 80242b6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80242ba:	5cd0      	ldrb	r0, [r2, r3]
 80242bc:	f01e 0f01 	tst.w	lr, #1
 80242c0:	bf0c      	ite	eq
 80242c2:	f000 000f 	andeq.w	r0, r0, #15
 80242c6:	1100      	asrne	r0, r0, #4
 80242c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80242cc:	b2c3      	uxtb	r3, r0
 80242ce:	b2ba      	uxth	r2, r7
 80242d0:	fa1f fc8c 	uxth.w	ip, ip
 80242d4:	fb02 f00c 	mul.w	r0, r2, ip
 80242d8:	0112      	lsls	r2, r2, #4
 80242da:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80242de:	1a12      	subs	r2, r2, r0
 80242e0:	b292      	uxth	r2, r2
 80242e2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80242e6:	4362      	muls	r2, r4
 80242e8:	fa1f fc8c 	uxth.w	ip, ip
 80242ec:	eba7 070c 	sub.w	r7, r7, ip
 80242f0:	b2bf      	uxth	r7, r7
 80242f2:	fb06 2207 	mla	r2, r6, r7, r2
 80242f6:	fb0c 2505 	mla	r5, ip, r5, r2
 80242fa:	fb00 5303 	mla	r3, r0, r3, r5
 80242fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024302:	b1b3      	cbz	r3, 8024332 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024304:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024308:	435a      	muls	r2, r3
 802430a:	1c53      	adds	r3, r2, #1
 802430c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024310:	4a2d      	ldr	r2, [pc, #180]	; (80243c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8024312:	121b      	asrs	r3, r3, #8
 8024314:	6812      	ldr	r2, [r2, #0]
 8024316:	2bff      	cmp	r3, #255	; 0xff
 8024318:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802431c:	d120      	bne.n	8024360 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802431e:	4b2b      	ldr	r3, [pc, #172]	; (80243cc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8024320:	0950      	lsrs	r0, r2, #5
 8024322:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024326:	4033      	ands	r3, r6
 8024328:	4318      	orrs	r0, r3
 802432a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802432e:	4302      	orrs	r2, r0
 8024330:	800a      	strh	r2, [r1, #0]
 8024332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024336:	2600      	movs	r6, #0
 8024338:	e788      	b.n	802424c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802433a:	2400      	movs	r4, #0
 802433c:	4626      	mov	r6, r4
 802433e:	e799      	b.n	8024274 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024340:	2400      	movs	r4, #0
 8024342:	e797      	b.n	8024274 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024344:	463c      	mov	r4, r7
 8024346:	e795      	b.n	8024274 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024348:	2500      	movs	r5, #0
 802434a:	e7ac      	b.n	80242a6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802434c:	2300      	movs	r3, #0
 802434e:	461d      	mov	r5, r3
 8024350:	e7bd      	b.n	80242ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024352:	4663      	mov	r3, ip
 8024354:	4665      	mov	r5, ip
 8024356:	e7ba      	b.n	80242ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024358:	2300      	movs	r3, #0
 802435a:	e7b8      	b.n	80242ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802435c:	463b      	mov	r3, r7
 802435e:	e7b6      	b.n	80242ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024360:	b29f      	uxth	r7, r3
 8024362:	43db      	mvns	r3, r3
 8024364:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024368:	880d      	ldrh	r5, [r1, #0]
 802436a:	fb10 f007 	smulbb	r0, r0, r7
 802436e:	b2f6      	uxtb	r6, r6
 8024370:	b2d2      	uxtb	r2, r2
 8024372:	122c      	asrs	r4, r5, #8
 8024374:	fb12 f207 	smulbb	r2, r2, r7
 8024378:	fb16 f607 	smulbb	r6, r6, r7
 802437c:	b2db      	uxtb	r3, r3
 802437e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024382:	fb04 0403 	mla	r4, r4, r3, r0
 8024386:	10e8      	asrs	r0, r5, #3
 8024388:	00ed      	lsls	r5, r5, #3
 802438a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802438e:	b2ed      	uxtb	r5, r5
 8024390:	fb00 6603 	mla	r6, r0, r3, r6
 8024394:	fb05 2303 	mla	r3, r5, r3, r2
 8024398:	b2a4      	uxth	r4, r4
 802439a:	b29a      	uxth	r2, r3
 802439c:	1c63      	adds	r3, r4, #1
 802439e:	b2b0      	uxth	r0, r6
 80243a0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80243a4:	1c53      	adds	r3, r2, #1
 80243a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80243aa:	1c42      	adds	r2, r0, #1
 80243ac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80243b0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80243b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80243b8:	0940      	lsrs	r0, r0, #5
 80243ba:	4323      	orrs	r3, r4
 80243bc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80243c0:	4303      	orrs	r3, r0
 80243c2:	800b      	strh	r3, [r1, #0]
 80243c4:	e7b5      	b.n	8024332 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80243c6:	bf00      	nop
 80243c8:	2004e128 	.word	0x2004e128
 80243cc:	00fff800 	.word	0x00fff800

080243d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243d4:	b097      	sub	sp, #92	; 0x5c
 80243d6:	9214      	str	r2, [sp, #80]	; 0x50
 80243d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80243da:	9015      	str	r0, [sp, #84]	; 0x54
 80243dc:	9309      	str	r3, [sp, #36]	; 0x24
 80243de:	6850      	ldr	r0, [r2, #4]
 80243e0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80243e4:	910d      	str	r1, [sp, #52]	; 0x34
 80243e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80243e8:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80243ec:	fb00 1303 	mla	r3, r0, r3, r1
 80243f0:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80243f4:	6812      	ldr	r2, [r2, #0]
 80243f6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80243fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243fc:	689b      	ldr	r3, [r3, #8]
 80243fe:	3301      	adds	r3, #1
 8024400:	f023 0301 	bic.w	r3, r3, #1
 8024404:	930a      	str	r3, [sp, #40]	; 0x28
 8024406:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024408:	681f      	ldr	r7, [r3, #0]
 802440a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802440c:	2b00      	cmp	r3, #0
 802440e:	dc03      	bgt.n	8024418 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024410:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024412:	2b00      	cmp	r3, #0
 8024414:	f340 8287 	ble.w	8024926 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024418:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802441a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802441e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024422:	1e48      	subs	r0, r1, #1
 8024424:	f102 3cff 	add.w	ip, r2, #4294967295
 8024428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802442a:	2b00      	cmp	r3, #0
 802442c:	f340 80c3 	ble.w	80245b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024430:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024434:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024438:	d406      	bmi.n	8024448 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802443a:	4586      	cmp	lr, r0
 802443c:	da04      	bge.n	8024448 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802443e:	2b00      	cmp	r3, #0
 8024440:	db02      	blt.n	8024448 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024442:	4563      	cmp	r3, ip
 8024444:	f2c0 80b8 	blt.w	80245b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024448:	f11e 0e01 	adds.w	lr, lr, #1
 802444c:	f100 80a9 	bmi.w	80245a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024450:	4571      	cmp	r1, lr
 8024452:	f2c0 80a6 	blt.w	80245a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024456:	3301      	adds	r3, #1
 8024458:	f100 80a3 	bmi.w	80245a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802445c:	429a      	cmp	r2, r3
 802445e:	f2c0 80a0 	blt.w	80245a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024462:	46c8      	mov	r8, r9
 8024464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024466:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802446a:	930e      	str	r3, [sp, #56]	; 0x38
 802446c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802446e:	2b00      	cmp	r3, #0
 8024470:	f340 80c2 	ble.w	80245f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024474:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024476:	1430      	asrs	r0, r6, #16
 8024478:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802447c:	1423      	asrs	r3, r4, #16
 802447e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024482:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024486:	f100 814d 	bmi.w	8024724 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802448a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802448e:	455b      	cmp	r3, fp
 8024490:	f280 8148 	bge.w	8024724 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8024494:	2800      	cmp	r0, #0
 8024496:	f2c0 8145 	blt.w	8024724 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802449a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802449e:	4558      	cmp	r0, fp
 80244a0:	f280 8140 	bge.w	8024724 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80244a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80244a6:	fb00 3305 	mla	r3, r0, r5, r3
 80244aa:	0858      	lsrs	r0, r3, #1
 80244ac:	f817 c000 	ldrb.w	ip, [r7, r0]
 80244b0:	07dd      	lsls	r5, r3, #31
 80244b2:	bf54      	ite	pl
 80244b4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80244b8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80244bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80244c0:	fa5f fc8c 	uxtb.w	ip, ip
 80244c4:	2a00      	cmp	r2, #0
 80244c6:	f000 80db 	beq.w	8024680 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80244ca:	1c58      	adds	r0, r3, #1
 80244cc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80244d0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80244d4:	07c0      	lsls	r0, r0, #31
 80244d6:	bf54      	ite	pl
 80244d8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80244dc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80244e0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80244e4:	fa5f f08e 	uxtb.w	r0, lr
 80244e8:	9010      	str	r0, [sp, #64]	; 0x40
 80244ea:	b1c9      	cbz	r1, 8024520 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80244ec:	4453      	add	r3, sl
 80244ee:	0858      	lsrs	r0, r3, #1
 80244f0:	5c38      	ldrb	r0, [r7, r0]
 80244f2:	07dd      	lsls	r5, r3, #31
 80244f4:	bf54      	ite	pl
 80244f6:	f000 000f 	andpl.w	r0, r0, #15
 80244fa:	1100      	asrmi	r0, r0, #4
 80244fc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024500:	3301      	adds	r3, #1
 8024502:	b2c0      	uxtb	r0, r0
 8024504:	900b      	str	r0, [sp, #44]	; 0x2c
 8024506:	0858      	lsrs	r0, r3, #1
 8024508:	f817 e000 	ldrb.w	lr, [r7, r0]
 802450c:	07dd      	lsls	r5, r3, #31
 802450e:	bf54      	ite	pl
 8024510:	f00e 030f 	andpl.w	r3, lr, #15
 8024514:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024518:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802451c:	b2db      	uxtb	r3, r3
 802451e:	9311      	str	r3, [sp, #68]	; 0x44
 8024520:	b292      	uxth	r2, r2
 8024522:	b289      	uxth	r1, r1
 8024524:	fb02 f301 	mul.w	r3, r2, r1
 8024528:	0112      	lsls	r2, r2, #4
 802452a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802452e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024530:	1ad2      	subs	r2, r2, r3
 8024532:	b292      	uxth	r2, r2
 8024534:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024538:	436a      	muls	r2, r5
 802453a:	b289      	uxth	r1, r1
 802453c:	1a40      	subs	r0, r0, r1
 802453e:	b280      	uxth	r0, r0
 8024540:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024546:	fb01 c102 	mla	r1, r1, r2, ip
 802454a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802454c:	fb03 1302 	mla	r3, r3, r2, r1
 8024550:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024554:	b1db      	cbz	r3, 802458e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024558:	4353      	muls	r3, r2
 802455a:	1c5a      	adds	r2, r3, #1
 802455c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024560:	4ac6      	ldr	r2, [pc, #792]	; (802487c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8024562:	121b      	asrs	r3, r3, #8
 8024564:	6812      	ldr	r2, [r2, #0]
 8024566:	2bff      	cmp	r3, #255	; 0xff
 8024568:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802456c:	f040 8099 	bne.w	80246a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8024570:	0953      	lsrs	r3, r2, #5
 8024572:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024576:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802457a:	f02c 0c07 	bic.w	ip, ip, #7
 802457e:	ea43 0c0c 	orr.w	ip, r3, ip
 8024582:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024586:	ea4c 0202 	orr.w	r2, ip, r2
 802458a:	f8a8 2000 	strh.w	r2, [r8]
 802458e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024590:	f108 0802 	add.w	r8, r8, #2
 8024594:	441c      	add	r4, r3
 8024596:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024598:	441e      	add	r6, r3
 802459a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802459c:	3b01      	subs	r3, #1
 802459e:	930e      	str	r3, [sp, #56]	; 0x38
 80245a0:	e764      	b.n	802446c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80245a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80245a4:	f109 0902 	add.w	r9, r9, #2
 80245a8:	441c      	add	r4, r3
 80245aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80245ac:	441e      	add	r6, r3
 80245ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245b0:	3b01      	subs	r3, #1
 80245b2:	9309      	str	r3, [sp, #36]	; 0x24
 80245b4:	e738      	b.n	8024428 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80245b6:	d024      	beq.n	8024602 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80245b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245ba:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80245bc:	3b01      	subs	r3, #1
 80245be:	fb00 4003 	mla	r0, r0, r3, r4
 80245c2:	1400      	asrs	r0, r0, #16
 80245c4:	f53f af4d 	bmi.w	8024462 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80245c8:	3901      	subs	r1, #1
 80245ca:	4288      	cmp	r0, r1
 80245cc:	f6bf af49 	bge.w	8024462 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80245d0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80245d2:	fb01 6303 	mla	r3, r1, r3, r6
 80245d6:	141b      	asrs	r3, r3, #16
 80245d8:	f53f af43 	bmi.w	8024462 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80245dc:	3a01      	subs	r2, #1
 80245de:	4293      	cmp	r3, r2
 80245e0:	f6bf af3f 	bge.w	8024462 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80245e4:	46c8      	mov	r8, r9
 80245e6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80245ea:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80245ee:	930e      	str	r3, [sp, #56]	; 0x38
 80245f0:	f1bb 0f00 	cmp.w	fp, #0
 80245f4:	f300 80b7 	bgt.w	8024766 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80245f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245fa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80245fe:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024604:	2b00      	cmp	r3, #0
 8024606:	f340 818e 	ble.w	8024926 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802460a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802460e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024612:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024616:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802461a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802461e:	eef0 6a62 	vmov.f32	s13, s5
 8024622:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024626:	ee77 2a62 	vsub.f32	s5, s14, s5
 802462a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802462e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024632:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024636:	ee16 4a90 	vmov	r4, s13
 802463a:	eef0 6a43 	vmov.f32	s13, s6
 802463e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024642:	ee12 2a90 	vmov	r2, s5
 8024646:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802464a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802464c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024650:	fb92 f3f3 	sdiv	r3, r2, r3
 8024654:	ee13 2a10 	vmov	r2, s6
 8024658:	9323      	str	r3, [sp, #140]	; 0x8c
 802465a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802465c:	ee16 6a90 	vmov	r6, s13
 8024660:	fb92 f3f3 	sdiv	r3, r2, r3
 8024664:	9324      	str	r3, [sp, #144]	; 0x90
 8024666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024668:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802466a:	3b01      	subs	r3, #1
 802466c:	930d      	str	r3, [sp, #52]	; 0x34
 802466e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024670:	bf08      	it	eq
 8024672:	4613      	moveq	r3, r2
 8024674:	eeb0 3a67 	vmov.f32	s6, s15
 8024678:	9309      	str	r3, [sp, #36]	; 0x24
 802467a:	eef0 2a47 	vmov.f32	s5, s14
 802467e:	e6c4      	b.n	802440a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024680:	2900      	cmp	r1, #0
 8024682:	f43f af4d 	beq.w	8024520 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8024686:	eb0a 0003 	add.w	r0, sl, r3
 802468a:	0843      	lsrs	r3, r0, #1
 802468c:	5cfb      	ldrb	r3, [r7, r3]
 802468e:	07c0      	lsls	r0, r0, #31
 8024690:	bf54      	ite	pl
 8024692:	f003 030f 	andpl.w	r3, r3, #15
 8024696:	111b      	asrmi	r3, r3, #4
 8024698:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802469c:	b2db      	uxtb	r3, r3
 802469e:	930b      	str	r3, [sp, #44]	; 0x2c
 80246a0:	e73e      	b.n	8024520 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80246a2:	fa1f fb83 	uxth.w	fp, r3
 80246a6:	43db      	mvns	r3, r3
 80246a8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80246ac:	f8b8 e000 	ldrh.w	lr, [r8]
 80246b0:	fb11 f10b 	smulbb	r1, r1, fp
 80246b4:	fa5f fc8c 	uxtb.w	ip, ip
 80246b8:	b2d2      	uxtb	r2, r2
 80246ba:	ea4f 202e 	mov.w	r0, lr, asr #8
 80246be:	fb1c fc0b 	smulbb	ip, ip, fp
 80246c2:	fb12 fb0b 	smulbb	fp, r2, fp
 80246c6:	b2db      	uxtb	r3, r3
 80246c8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80246cc:	fb00 1003 	mla	r0, r0, r3, r1
 80246d0:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80246d4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80246d8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80246dc:	fa5f fe8e 	uxtb.w	lr, lr
 80246e0:	fb01 cc03 	mla	ip, r1, r3, ip
 80246e4:	fb0e bb03 	mla	fp, lr, r3, fp
 80246e8:	b280      	uxth	r0, r0
 80246ea:	1c43      	adds	r3, r0, #1
 80246ec:	fa1f fc8c 	uxth.w	ip, ip
 80246f0:	fa1f fb8b 	uxth.w	fp, fp
 80246f4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80246f8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80246fc:	f10c 0101 	add.w	r1, ip, #1
 8024700:	f10b 0001 	add.w	r0, fp, #1
 8024704:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024708:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802470c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024710:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024714:	4318      	orrs	r0, r3
 8024716:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802471a:	ea40 000c 	orr.w	r0, r0, ip
 802471e:	f8a8 0000 	strh.w	r0, [r8]
 8024722:	e734      	b.n	802458e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024724:	f113 0b01 	adds.w	fp, r3, #1
 8024728:	f53f af31 	bmi.w	802458e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802472c:	45dc      	cmp	ip, fp
 802472e:	f6ff af2e 	blt.w	802458e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024732:	f110 0b01 	adds.w	fp, r0, #1
 8024736:	f53f af2a 	bmi.w	802458e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802473a:	45de      	cmp	lr, fp
 802473c:	f6ff af27 	blt.w	802458e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024740:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024742:	9302      	str	r3, [sp, #8]
 8024744:	fa0f f38e 	sxth.w	r3, lr
 8024748:	9301      	str	r3, [sp, #4]
 802474a:	fa0f f38c 	sxth.w	r3, ip
 802474e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024752:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8024756:	9300      	str	r3, [sp, #0]
 8024758:	463a      	mov	r2, r7
 802475a:	4653      	mov	r3, sl
 802475c:	4641      	mov	r1, r8
 802475e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024760:	f7ff fd4e 	bl	8024200 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8024764:	e713      	b.n	802458e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024766:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024768:	1422      	asrs	r2, r4, #16
 802476a:	1433      	asrs	r3, r6, #16
 802476c:	fb05 2303 	mla	r3, r5, r3, r2
 8024770:	085a      	lsrs	r2, r3, #1
 8024772:	5cba      	ldrb	r2, [r7, r2]
 8024774:	07dd      	lsls	r5, r3, #31
 8024776:	bf54      	ite	pl
 8024778:	f002 020f 	andpl.w	r2, r2, #15
 802477c:	1112      	asrmi	r2, r2, #4
 802477e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024782:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024786:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802478a:	b2d2      	uxtb	r2, r2
 802478c:	2900      	cmp	r1, #0
 802478e:	d077      	beq.n	8024880 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8024790:	f103 0e01 	add.w	lr, r3, #1
 8024794:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024798:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802479c:	f01e 0f01 	tst.w	lr, #1
 80247a0:	bf0c      	ite	eq
 80247a2:	f00c 0c0f 	andeq.w	ip, ip, #15
 80247a6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80247aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80247ae:	fa5f f58c 	uxtb.w	r5, ip
 80247b2:	9512      	str	r5, [sp, #72]	; 0x48
 80247b4:	b300      	cbz	r0, 80247f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80247b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80247b8:	442b      	add	r3, r5
 80247ba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80247be:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80247c2:	07dd      	lsls	r5, r3, #31
 80247c4:	bf54      	ite	pl
 80247c6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80247ca:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80247ce:	3301      	adds	r3, #1
 80247d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80247d4:	fa5f f58c 	uxtb.w	r5, ip
 80247d8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80247dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80247e0:	950c      	str	r5, [sp, #48]	; 0x30
 80247e2:	07dd      	lsls	r5, r3, #31
 80247e4:	bf54      	ite	pl
 80247e6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80247ea:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80247ee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80247f2:	fa5f f38c 	uxtb.w	r3, ip
 80247f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80247f8:	b289      	uxth	r1, r1
 80247fa:	b280      	uxth	r0, r0
 80247fc:	fb01 f300 	mul.w	r3, r1, r0
 8024800:	0109      	lsls	r1, r1, #4
 8024802:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024806:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024808:	1ac9      	subs	r1, r1, r3
 802480a:	b289      	uxth	r1, r1
 802480c:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8024810:	4369      	muls	r1, r5
 8024812:	b280      	uxth	r0, r0
 8024814:	ebac 0c00 	sub.w	ip, ip, r0
 8024818:	fa1f fc8c 	uxth.w	ip, ip
 802481c:	fb02 120c 	mla	r2, r2, ip, r1
 8024820:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024822:	fb00 2001 	mla	r0, r0, r1, r2
 8024826:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024828:	fb03 0302 	mla	r3, r3, r2, r0
 802482c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024830:	b1d3      	cbz	r3, 8024868 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8024832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024834:	4353      	muls	r3, r2
 8024836:	1c5a      	adds	r2, r3, #1
 8024838:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802483c:	4a0f      	ldr	r2, [pc, #60]	; (802487c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802483e:	121b      	asrs	r3, r3, #8
 8024840:	6812      	ldr	r2, [r2, #0]
 8024842:	2bff      	cmp	r3, #255	; 0xff
 8024844:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024848:	d12e      	bne.n	80248a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802484a:	0953      	lsrs	r3, r2, #5
 802484c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024850:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024854:	f02c 0c07 	bic.w	ip, ip, #7
 8024858:	ea43 0c0c 	orr.w	ip, r3, ip
 802485c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024860:	ea4c 0202 	orr.w	r2, ip, r2
 8024864:	f8a8 2000 	strh.w	r2, [r8]
 8024868:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802486a:	f108 0802 	add.w	r8, r8, #2
 802486e:	441c      	add	r4, r3
 8024870:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024872:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024876:	441e      	add	r6, r3
 8024878:	e6ba      	b.n	80245f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802487a:	bf00      	nop
 802487c:	2004e128 	.word	0x2004e128
 8024880:	2800      	cmp	r0, #0
 8024882:	d0b9      	beq.n	80247f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8024884:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024886:	442b      	add	r3, r5
 8024888:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802488c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024890:	07db      	lsls	r3, r3, #31
 8024892:	bf54      	ite	pl
 8024894:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024898:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802489c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80248a0:	fa5f f38c 	uxtb.w	r3, ip
 80248a4:	930c      	str	r3, [sp, #48]	; 0x30
 80248a6:	e7a7      	b.n	80247f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80248a8:	fa1f fa83 	uxth.w	sl, r3
 80248ac:	43db      	mvns	r3, r3
 80248ae:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80248b2:	f8b8 e000 	ldrh.w	lr, [r8]
 80248b6:	fb11 f10a 	smulbb	r1, r1, sl
 80248ba:	b2d2      	uxtb	r2, r2
 80248bc:	ea4f 202e 	mov.w	r0, lr, asr #8
 80248c0:	fb12 f20a 	smulbb	r2, r2, sl
 80248c4:	b2db      	uxtb	r3, r3
 80248c6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80248ca:	fb00 1003 	mla	r0, r0, r3, r1
 80248ce:	fa5f fc8c 	uxtb.w	ip, ip
 80248d2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80248d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80248da:	fb1c fc0a 	smulbb	ip, ip, sl
 80248de:	fa5f fe8e 	uxtb.w	lr, lr
 80248e2:	fb0e 2203 	mla	r2, lr, r3, r2
 80248e6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80248ea:	fb01 cc03 	mla	ip, r1, r3, ip
 80248ee:	b280      	uxth	r0, r0
 80248f0:	b292      	uxth	r2, r2
 80248f2:	1c43      	adds	r3, r0, #1
 80248f4:	1c51      	adds	r1, r2, #1
 80248f6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80248fa:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80248fe:	fa1f fc8c 	uxth.w	ip, ip
 8024902:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024906:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802490a:	4308      	orrs	r0, r1
 802490c:	f10c 0101 	add.w	r1, ip, #1
 8024910:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024914:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024918:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802491c:	ea40 000c 	orr.w	r0, r0, ip
 8024920:	f8a8 0000 	strh.w	r0, [r8]
 8024924:	e7a0      	b.n	8024868 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8024926:	b017      	add	sp, #92	; 0x5c
 8024928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802492c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024930:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024934:	2d00      	cmp	r5, #0
 8024936:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802493a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802493e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024942:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024946:	fb05 0e03 	mla	lr, r5, r3, r0
 802494a:	f2c0 80b0 	blt.w	8024aae <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802494e:	45a9      	cmp	r9, r5
 8024950:	f340 80ad 	ble.w	8024aae <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8024954:	2800      	cmp	r0, #0
 8024956:	f2c0 80a8 	blt.w	8024aaa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802495a:	4580      	cmp	r8, r0
 802495c:	f340 80a5 	ble.w	8024aaa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024960:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024964:	5d16      	ldrb	r6, [r2, r4]
 8024966:	f01e 0f01 	tst.w	lr, #1
 802496a:	bf0c      	ite	eq
 802496c:	f006 060f 	andeq.w	r6, r6, #15
 8024970:	1136      	asrne	r6, r6, #4
 8024972:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024976:	b2f6      	uxtb	r6, r6
 8024978:	1c44      	adds	r4, r0, #1
 802497a:	f100 809b 	bmi.w	8024ab4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802497e:	45a0      	cmp	r8, r4
 8024980:	f340 8098 	ble.w	8024ab4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8024984:	2f00      	cmp	r7, #0
 8024986:	f000 8097 	beq.w	8024ab8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802498a:	f10e 0a01 	add.w	sl, lr, #1
 802498e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024992:	5d14      	ldrb	r4, [r2, r4]
 8024994:	f01a 0f01 	tst.w	sl, #1
 8024998:	bf0c      	ite	eq
 802499a:	f004 040f 	andeq.w	r4, r4, #15
 802499e:	1124      	asrne	r4, r4, #4
 80249a0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80249a4:	b2e4      	uxtb	r4, r4
 80249a6:	3501      	adds	r5, #1
 80249a8:	f100 808a 	bmi.w	8024ac0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80249ac:	45a9      	cmp	r9, r5
 80249ae:	f340 8087 	ble.w	8024ac0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80249b2:	f1bc 0f00 	cmp.w	ip, #0
 80249b6:	f000 8086 	beq.w	8024ac6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 80249ba:	2800      	cmp	r0, #0
 80249bc:	db7e      	blt.n	8024abc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80249be:	4580      	cmp	r8, r0
 80249c0:	dd7c      	ble.n	8024abc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80249c2:	eb03 090e 	add.w	r9, r3, lr
 80249c6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80249ca:	5d55      	ldrb	r5, [r2, r5]
 80249cc:	f019 0f01 	tst.w	r9, #1
 80249d0:	bf0c      	ite	eq
 80249d2:	f005 050f 	andeq.w	r5, r5, #15
 80249d6:	112d      	asrne	r5, r5, #4
 80249d8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80249dc:	b2ed      	uxtb	r5, r5
 80249de:	3001      	adds	r0, #1
 80249e0:	d474      	bmi.n	8024acc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80249e2:	4580      	cmp	r8, r0
 80249e4:	dd72      	ble.n	8024acc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80249e6:	2f00      	cmp	r7, #0
 80249e8:	d072      	beq.n	8024ad0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80249ea:	3301      	adds	r3, #1
 80249ec:	449e      	add	lr, r3
 80249ee:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80249f2:	5cd0      	ldrb	r0, [r2, r3]
 80249f4:	f01e 0f01 	tst.w	lr, #1
 80249f8:	bf0c      	ite	eq
 80249fa:	f000 000f 	andeq.w	r0, r0, #15
 80249fe:	1100      	asrne	r0, r0, #4
 8024a00:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024a04:	b2c3      	uxtb	r3, r0
 8024a06:	b2ba      	uxth	r2, r7
 8024a08:	fa1f fc8c 	uxth.w	ip, ip
 8024a0c:	fb02 f00c 	mul.w	r0, r2, ip
 8024a10:	0112      	lsls	r2, r2, #4
 8024a12:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024a16:	1a12      	subs	r2, r2, r0
 8024a18:	b292      	uxth	r2, r2
 8024a1a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024a1e:	4362      	muls	r2, r4
 8024a20:	fa1f fc8c 	uxth.w	ip, ip
 8024a24:	eba7 070c 	sub.w	r7, r7, ip
 8024a28:	b2bf      	uxth	r7, r7
 8024a2a:	fb06 2207 	mla	r2, r6, r7, r2
 8024a2e:	fb0c 2505 	mla	r5, ip, r5, r2
 8024a32:	fb00 5303 	mla	r3, r0, r3, r5
 8024a36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024a3a:	b3a3      	cbz	r3, 8024aa6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8024a3c:	4a25      	ldr	r2, [pc, #148]	; (8024ad4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8024a3e:	880e      	ldrh	r6, [r1, #0]
 8024a40:	6815      	ldr	r5, [r2, #0]
 8024a42:	b29a      	uxth	r2, r3
 8024a44:	43db      	mvns	r3, r3
 8024a46:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8024a4a:	fb10 f002 	smulbb	r0, r0, r2
 8024a4e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8024a52:	b2ed      	uxtb	r5, r5
 8024a54:	1234      	asrs	r4, r6, #8
 8024a56:	fb17 f702 	smulbb	r7, r7, r2
 8024a5a:	fb15 f202 	smulbb	r2, r5, r2
 8024a5e:	b2db      	uxtb	r3, r3
 8024a60:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024a64:	fb04 0403 	mla	r4, r4, r3, r0
 8024a68:	10f0      	asrs	r0, r6, #3
 8024a6a:	00f6      	lsls	r6, r6, #3
 8024a6c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024a70:	b2f6      	uxtb	r6, r6
 8024a72:	fb00 7003 	mla	r0, r0, r3, r7
 8024a76:	fb06 2303 	mla	r3, r6, r3, r2
 8024a7a:	b2a4      	uxth	r4, r4
 8024a7c:	b29a      	uxth	r2, r3
 8024a7e:	1c63      	adds	r3, r4, #1
 8024a80:	b280      	uxth	r0, r0
 8024a82:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024a86:	1c53      	adds	r3, r2, #1
 8024a88:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024a8c:	1c42      	adds	r2, r0, #1
 8024a8e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024a92:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024a96:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024a9a:	0940      	lsrs	r0, r0, #5
 8024a9c:	4323      	orrs	r3, r4
 8024a9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024aa2:	4303      	orrs	r3, r0
 8024aa4:	800b      	strh	r3, [r1, #0]
 8024aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024aaa:	2600      	movs	r6, #0
 8024aac:	e764      	b.n	8024978 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8024aae:	2400      	movs	r4, #0
 8024ab0:	4626      	mov	r6, r4
 8024ab2:	e778      	b.n	80249a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024ab4:	2400      	movs	r4, #0
 8024ab6:	e776      	b.n	80249a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024ab8:	463c      	mov	r4, r7
 8024aba:	e774      	b.n	80249a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024abc:	2500      	movs	r5, #0
 8024abe:	e78e      	b.n	80249de <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8024ac0:	2300      	movs	r3, #0
 8024ac2:	461d      	mov	r5, r3
 8024ac4:	e79f      	b.n	8024a06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024ac6:	4663      	mov	r3, ip
 8024ac8:	4665      	mov	r5, ip
 8024aca:	e79c      	b.n	8024a06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024acc:	2300      	movs	r3, #0
 8024ace:	e79a      	b.n	8024a06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024ad0:	463b      	mov	r3, r7
 8024ad2:	e798      	b.n	8024a06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024ad4:	2004e128 	.word	0x2004e128

08024ad8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024adc:	b093      	sub	sp, #76	; 0x4c
 8024ade:	920c      	str	r2, [sp, #48]	; 0x30
 8024ae0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024ae2:	9011      	str	r0, [sp, #68]	; 0x44
 8024ae4:	6850      	ldr	r0, [r2, #4]
 8024ae6:	9107      	str	r1, [sp, #28]
 8024ae8:	461d      	mov	r5, r3
 8024aea:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8024aee:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8024af2:	fb00 1303 	mla	r3, r0, r3, r1
 8024af6:	6812      	ldr	r2, [r2, #0]
 8024af8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024afc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024afe:	689b      	ldr	r3, [r3, #8]
 8024b00:	3301      	adds	r3, #1
 8024b02:	f023 0301 	bic.w	r3, r3, #1
 8024b06:	9306      	str	r3, [sp, #24]
 8024b08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b0a:	681f      	ldr	r7, [r3, #0]
 8024b0c:	9b07      	ldr	r3, [sp, #28]
 8024b0e:	2b00      	cmp	r3, #0
 8024b10:	dc03      	bgt.n	8024b1a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b14:	2b00      	cmp	r3, #0
 8024b16:	f340 8265 	ble.w	8024fe4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8024b1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b1c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024b20:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024b24:	1e48      	subs	r0, r1, #1
 8024b26:	f102 3cff 	add.w	ip, r2, #4294967295
 8024b2a:	2d00      	cmp	r5, #0
 8024b2c:	f340 80b7 	ble.w	8024c9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024b30:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024b34:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024b38:	d406      	bmi.n	8024b48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024b3a:	4586      	cmp	lr, r0
 8024b3c:	da04      	bge.n	8024b48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024b3e:	2b00      	cmp	r3, #0
 8024b40:	db02      	blt.n	8024b48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024b42:	4563      	cmp	r3, ip
 8024b44:	f2c0 80ac 	blt.w	8024ca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8024b48:	f11e 0e01 	adds.w	lr, lr, #1
 8024b4c:	f100 809f 	bmi.w	8024c8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024b50:	4571      	cmp	r1, lr
 8024b52:	f2c0 809c 	blt.w	8024c8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024b56:	3301      	adds	r3, #1
 8024b58:	f100 8099 	bmi.w	8024c8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024b5c:	429a      	cmp	r2, r3
 8024b5e:	f2c0 8096 	blt.w	8024c8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024b62:	46c8      	mov	r8, r9
 8024b64:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8024b68:	9509      	str	r5, [sp, #36]	; 0x24
 8024b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	f340 80b5 	ble.w	8024cdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024b72:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8024b76:	9308      	str	r3, [sp, #32]
 8024b78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b7a:	1430      	asrs	r0, r6, #16
 8024b7c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024b80:	1423      	asrs	r3, r4, #16
 8024b82:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024b86:	f100 813e 	bmi.w	8024e06 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024b8a:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024b8e:	455b      	cmp	r3, fp
 8024b90:	f280 8139 	bge.w	8024e06 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024b94:	2800      	cmp	r0, #0
 8024b96:	f2c0 8136 	blt.w	8024e06 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024b9a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024b9e:	4558      	cmp	r0, fp
 8024ba0:	f280 8131 	bge.w	8024e06 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024ba4:	9a06      	ldr	r2, [sp, #24]
 8024ba6:	fb00 3302 	mla	r3, r0, r2, r3
 8024baa:	0858      	lsrs	r0, r3, #1
 8024bac:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024bb0:	07da      	lsls	r2, r3, #31
 8024bb2:	bf54      	ite	pl
 8024bb4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024bb8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024bbc:	9a08      	ldr	r2, [sp, #32]
 8024bbe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024bc2:	fa5f fc8c 	uxtb.w	ip, ip
 8024bc6:	2a00      	cmp	r2, #0
 8024bc8:	f000 80cb 	beq.w	8024d62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8024bcc:	1c58      	adds	r0, r3, #1
 8024bce:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024bd2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024bd6:	07c0      	lsls	r0, r0, #31
 8024bd8:	bf54      	ite	pl
 8024bda:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024bde:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024be2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024be6:	fa5f fe8e 	uxtb.w	lr, lr
 8024bea:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8024bee:	b1b9      	cbz	r1, 8024c20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024bf0:	4453      	add	r3, sl
 8024bf2:	0858      	lsrs	r0, r3, #1
 8024bf4:	5c38      	ldrb	r0, [r7, r0]
 8024bf6:	07da      	lsls	r2, r3, #31
 8024bf8:	bf54      	ite	pl
 8024bfa:	f000 000f 	andpl.w	r0, r0, #15
 8024bfe:	1100      	asrmi	r0, r0, #4
 8024c00:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024c04:	b2c0      	uxtb	r0, r0
 8024c06:	900a      	str	r0, [sp, #40]	; 0x28
 8024c08:	1c58      	adds	r0, r3, #1
 8024c0a:	0843      	lsrs	r3, r0, #1
 8024c0c:	5cfb      	ldrb	r3, [r7, r3]
 8024c0e:	07c2      	lsls	r2, r0, #31
 8024c10:	bf54      	ite	pl
 8024c12:	f003 030f 	andpl.w	r3, r3, #15
 8024c16:	111b      	asrmi	r3, r3, #4
 8024c18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024c1c:	b2db      	uxtb	r3, r3
 8024c1e:	930e      	str	r3, [sp, #56]	; 0x38
 8024c20:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024c24:	b289      	uxth	r1, r1
 8024c26:	fb02 f301 	mul.w	r3, r2, r1
 8024c2a:	0112      	lsls	r2, r2, #4
 8024c2c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024c30:	b289      	uxth	r1, r1
 8024c32:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024c36:	1a40      	subs	r0, r0, r1
 8024c38:	fa1f fe80 	uxth.w	lr, r0
 8024c3c:	1ad2      	subs	r2, r2, r3
 8024c3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024c40:	b292      	uxth	r2, r2
 8024c42:	4342      	muls	r2, r0
 8024c44:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024c4a:	fb01 c102 	mla	r1, r1, r2, ip
 8024c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024c50:	fb03 1302 	mla	r3, r3, r2, r1
 8024c54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c58:	2bff      	cmp	r3, #255	; 0xff
 8024c5a:	f040 8093 	bne.w	8024d84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8024c5e:	4bbe      	ldr	r3, [pc, #760]	; (8024f58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8024c60:	681a      	ldr	r2, [r3, #0]
 8024c62:	4bbe      	ldr	r3, [pc, #760]	; (8024f5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024c64:	0951      	lsrs	r1, r2, #5
 8024c66:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024c6a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024c6e:	430b      	orrs	r3, r1
 8024c70:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024c74:	4313      	orrs	r3, r2
 8024c76:	f8a8 3000 	strh.w	r3, [r8]
 8024c7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024c7c:	f108 0802 	add.w	r8, r8, #2
 8024c80:	441c      	add	r4, r3
 8024c82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c84:	441e      	add	r6, r3
 8024c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c88:	3b01      	subs	r3, #1
 8024c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8024c8c:	e76d      	b.n	8024b6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024c8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024c90:	3d01      	subs	r5, #1
 8024c92:	441c      	add	r4, r3
 8024c94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c96:	f109 0902 	add.w	r9, r9, #2
 8024c9a:	441e      	add	r6, r3
 8024c9c:	e745      	b.n	8024b2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024c9e:	d021      	beq.n	8024ce4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024ca0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024ca2:	1e6b      	subs	r3, r5, #1
 8024ca4:	fb00 4003 	mla	r0, r0, r3, r4
 8024ca8:	1400      	asrs	r0, r0, #16
 8024caa:	f53f af5a 	bmi.w	8024b62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024cae:	3901      	subs	r1, #1
 8024cb0:	4288      	cmp	r0, r1
 8024cb2:	f6bf af56 	bge.w	8024b62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024cb6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024cb8:	fb01 6303 	mla	r3, r1, r3, r6
 8024cbc:	141b      	asrs	r3, r3, #16
 8024cbe:	f53f af50 	bmi.w	8024b62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024cc2:	3a01      	subs	r2, #1
 8024cc4:	4293      	cmp	r3, r2
 8024cc6:	f6bf af4c 	bge.w	8024b62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024cca:	46a8      	mov	r8, r5
 8024ccc:	46ce      	mov	lr, r9
 8024cce:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024cd2:	9308      	str	r3, [sp, #32]
 8024cd4:	f1b8 0f00 	cmp.w	r8, #0
 8024cd8:	f300 80b5 	bgt.w	8024e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024cdc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024ce0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024ce4:	9b07      	ldr	r3, [sp, #28]
 8024ce6:	2b00      	cmp	r3, #0
 8024ce8:	f340 817c 	ble.w	8024fe4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8024cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024cf0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024cf4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024cf8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024cfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024d00:	eef0 6a62 	vmov.f32	s13, s5
 8024d04:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024d08:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024d0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024d10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024d18:	ee16 4a90 	vmov	r4, s13
 8024d1c:	eef0 6a43 	vmov.f32	s13, s6
 8024d20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024d24:	ee12 2a90 	vmov	r2, s5
 8024d28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024d2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024d2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d36:	ee13 2a10 	vmov	r2, s6
 8024d3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8024d3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024d3e:	ee16 6a90 	vmov	r6, s13
 8024d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d46:	9320      	str	r3, [sp, #128]	; 0x80
 8024d48:	9b07      	ldr	r3, [sp, #28]
 8024d4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024d4c:	3b01      	subs	r3, #1
 8024d4e:	9307      	str	r3, [sp, #28]
 8024d50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024d52:	bf0c      	ite	eq
 8024d54:	4615      	moveq	r5, r2
 8024d56:	461d      	movne	r5, r3
 8024d58:	eeb0 3a67 	vmov.f32	s6, s15
 8024d5c:	eef0 2a47 	vmov.f32	s5, s14
 8024d60:	e6d4      	b.n	8024b0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024d62:	2900      	cmp	r1, #0
 8024d64:	f43f af5c 	beq.w	8024c20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024d68:	eb0a 0003 	add.w	r0, sl, r3
 8024d6c:	0843      	lsrs	r3, r0, #1
 8024d6e:	5cfb      	ldrb	r3, [r7, r3]
 8024d70:	07c0      	lsls	r0, r0, #31
 8024d72:	bf54      	ite	pl
 8024d74:	f003 030f 	andpl.w	r3, r3, #15
 8024d78:	111b      	asrmi	r3, r3, #4
 8024d7a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024d7e:	b2db      	uxtb	r3, r3
 8024d80:	930a      	str	r3, [sp, #40]	; 0x28
 8024d82:	e74d      	b.n	8024c20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024d84:	2b00      	cmp	r3, #0
 8024d86:	f43f af78 	beq.w	8024c7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024d8a:	fa1f fe83 	uxth.w	lr, r3
 8024d8e:	43db      	mvns	r3, r3
 8024d90:	4a71      	ldr	r2, [pc, #452]	; (8024f58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8024d92:	f8b8 c000 	ldrh.w	ip, [r8]
 8024d96:	6810      	ldr	r0, [r2, #0]
 8024d98:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024d9c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024da0:	fb12 f20e 	smulbb	r2, r2, lr
 8024da4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024da8:	b2c0      	uxtb	r0, r0
 8024daa:	fb1b fb0e 	smulbb	fp, fp, lr
 8024dae:	fb10 fe0e 	smulbb	lr, r0, lr
 8024db2:	b2db      	uxtb	r3, r3
 8024db4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024db8:	fb01 2103 	mla	r1, r1, r3, r2
 8024dbc:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024dc0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024dc4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024dc8:	fa5f fc8c 	uxtb.w	ip, ip
 8024dcc:	fb02 b203 	mla	r2, r2, r3, fp
 8024dd0:	fb0c e303 	mla	r3, ip, r3, lr
 8024dd4:	b289      	uxth	r1, r1
 8024dd6:	1c48      	adds	r0, r1, #1
 8024dd8:	b292      	uxth	r2, r2
 8024dda:	b29b      	uxth	r3, r3
 8024ddc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024de0:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8024de4:	f102 0b01 	add.w	fp, r2, #1
 8024de8:	1c59      	adds	r1, r3, #1
 8024dea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024dee:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024df2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024df6:	0952      	lsrs	r2, r2, #5
 8024df8:	4301      	orrs	r1, r0
 8024dfa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024dfe:	4311      	orrs	r1, r2
 8024e00:	f8a8 1000 	strh.w	r1, [r8]
 8024e04:	e739      	b.n	8024c7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e06:	f113 0b01 	adds.w	fp, r3, #1
 8024e0a:	f53f af36 	bmi.w	8024c7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e0e:	45dc      	cmp	ip, fp
 8024e10:	f6ff af33 	blt.w	8024c7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e14:	f110 0b01 	adds.w	fp, r0, #1
 8024e18:	f53f af2f 	bmi.w	8024c7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e1c:	45de      	cmp	lr, fp
 8024e1e:	f6ff af2c 	blt.w	8024c7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e22:	9a08      	ldr	r2, [sp, #32]
 8024e24:	9302      	str	r3, [sp, #8]
 8024e26:	fa0f f38e 	sxth.w	r3, lr
 8024e2a:	9301      	str	r3, [sp, #4]
 8024e2c:	fa0f f38c 	sxth.w	r3, ip
 8024e30:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024e34:	9105      	str	r1, [sp, #20]
 8024e36:	9300      	str	r3, [sp, #0]
 8024e38:	463a      	mov	r2, r7
 8024e3a:	4653      	mov	r3, sl
 8024e3c:	4641      	mov	r1, r8
 8024e3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024e40:	f7ff fd74 	bl	802492c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8024e44:	e719      	b.n	8024c7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e46:	9906      	ldr	r1, [sp, #24]
 8024e48:	1422      	asrs	r2, r4, #16
 8024e4a:	1433      	asrs	r3, r6, #16
 8024e4c:	fb01 2303 	mla	r3, r1, r3, r2
 8024e50:	085a      	lsrs	r2, r3, #1
 8024e52:	5cba      	ldrb	r2, [r7, r2]
 8024e54:	07d9      	lsls	r1, r3, #31
 8024e56:	bf54      	ite	pl
 8024e58:	f002 020f 	andpl.w	r2, r2, #15
 8024e5c:	1112      	asrmi	r2, r2, #4
 8024e5e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024e62:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024e66:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024e6a:	b2d2      	uxtb	r2, r2
 8024e6c:	2800      	cmp	r0, #0
 8024e6e:	d062      	beq.n	8024f36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024e70:	f103 0a01 	add.w	sl, r3, #1
 8024e74:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024e78:	5c79      	ldrb	r1, [r7, r1]
 8024e7a:	f01a 0f01 	tst.w	sl, #1
 8024e7e:	bf0c      	ite	eq
 8024e80:	f001 010f 	andeq.w	r1, r1, #15
 8024e84:	1109      	asrne	r1, r1, #4
 8024e86:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024e8a:	b2c9      	uxtb	r1, r1
 8024e8c:	910f      	str	r1, [sp, #60]	; 0x3c
 8024e8e:	f1bc 0f00 	cmp.w	ip, #0
 8024e92:	d019      	beq.n	8024ec8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024e94:	9908      	ldr	r1, [sp, #32]
 8024e96:	440b      	add	r3, r1
 8024e98:	0859      	lsrs	r1, r3, #1
 8024e9a:	5c79      	ldrb	r1, [r7, r1]
 8024e9c:	f013 0f01 	tst.w	r3, #1
 8024ea0:	bf0c      	ite	eq
 8024ea2:	f001 010f 	andeq.w	r1, r1, #15
 8024ea6:	1109      	asrne	r1, r1, #4
 8024ea8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024eac:	b2c9      	uxtb	r1, r1
 8024eae:	3301      	adds	r3, #1
 8024eb0:	910b      	str	r1, [sp, #44]	; 0x2c
 8024eb2:	0859      	lsrs	r1, r3, #1
 8024eb4:	5c79      	ldrb	r1, [r7, r1]
 8024eb6:	07db      	lsls	r3, r3, #31
 8024eb8:	bf54      	ite	pl
 8024eba:	f001 010f 	andpl.w	r1, r1, #15
 8024ebe:	1109      	asrmi	r1, r1, #4
 8024ec0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024ec4:	b2c9      	uxtb	r1, r1
 8024ec6:	9110      	str	r1, [sp, #64]	; 0x40
 8024ec8:	b280      	uxth	r0, r0
 8024eca:	fa1f fc8c 	uxth.w	ip, ip
 8024ece:	fb00 f30c 	mul.w	r3, r0, ip
 8024ed2:	0100      	lsls	r0, r0, #4
 8024ed4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024ed8:	fa1f fc8c 	uxth.w	ip, ip
 8024edc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024ee0:	eba1 010c 	sub.w	r1, r1, ip
 8024ee4:	fa1f fa81 	uxth.w	sl, r1
 8024ee8:	1ac0      	subs	r0, r0, r3
 8024eea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024eec:	b280      	uxth	r0, r0
 8024eee:	4348      	muls	r0, r1
 8024ef0:	fb02 020a 	mla	r2, r2, sl, r0
 8024ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024ef6:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024efa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024efc:	fb03 c302 	mla	r3, r3, r2, ip
 8024f00:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024f04:	2bff      	cmp	r3, #255	; 0xff
 8024f06:	d12b      	bne.n	8024f60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024f08:	4b13      	ldr	r3, [pc, #76]	; (8024f58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8024f0a:	681a      	ldr	r2, [r3, #0]
 8024f0c:	4b13      	ldr	r3, [pc, #76]	; (8024f5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024f0e:	0951      	lsrs	r1, r2, #5
 8024f10:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024f14:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024f18:	430b      	orrs	r3, r1
 8024f1a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024f1e:	4313      	orrs	r3, r2
 8024f20:	f8ae 3000 	strh.w	r3, [lr]
 8024f24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024f26:	f10e 0e02 	add.w	lr, lr, #2
 8024f2a:	441c      	add	r4, r3
 8024f2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024f2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8024f32:	441e      	add	r6, r3
 8024f34:	e6ce      	b.n	8024cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8024f36:	f1bc 0f00 	cmp.w	ip, #0
 8024f3a:	d0c5      	beq.n	8024ec8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024f3c:	9908      	ldr	r1, [sp, #32]
 8024f3e:	440b      	add	r3, r1
 8024f40:	0859      	lsrs	r1, r3, #1
 8024f42:	5c79      	ldrb	r1, [r7, r1]
 8024f44:	07db      	lsls	r3, r3, #31
 8024f46:	bf54      	ite	pl
 8024f48:	f001 010f 	andpl.w	r1, r1, #15
 8024f4c:	1109      	asrmi	r1, r1, #4
 8024f4e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024f52:	b2c9      	uxtb	r1, r1
 8024f54:	910b      	str	r1, [sp, #44]	; 0x2c
 8024f56:	e7b7      	b.n	8024ec8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024f58:	2004e128 	.word	0x2004e128
 8024f5c:	fffff800 	.word	0xfffff800
 8024f60:	2b00      	cmp	r3, #0
 8024f62:	d0df      	beq.n	8024f24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024f64:	fa1f fa83 	uxth.w	sl, r3
 8024f68:	43db      	mvns	r3, r3
 8024f6a:	4a20      	ldr	r2, [pc, #128]	; (8024fec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 8024f6c:	f8be c000 	ldrh.w	ip, [lr]
 8024f70:	6810      	ldr	r0, [r2, #0]
 8024f72:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024f76:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024f7a:	fb12 f20a 	smulbb	r2, r2, sl
 8024f7e:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024f82:	b2c0      	uxtb	r0, r0
 8024f84:	fb10 f00a 	smulbb	r0, r0, sl
 8024f88:	b2db      	uxtb	r3, r3
 8024f8a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024f8e:	fb01 2103 	mla	r1, r1, r3, r2
 8024f92:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024f96:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024f9a:	fb1b fb0a 	smulbb	fp, fp, sl
 8024f9e:	fa5f fc8c 	uxtb.w	ip, ip
 8024fa2:	fb0c 0003 	mla	r0, ip, r3, r0
 8024fa6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024faa:	fb02 b203 	mla	r2, r2, r3, fp
 8024fae:	b289      	uxth	r1, r1
 8024fb0:	b280      	uxth	r0, r0
 8024fb2:	1c4b      	adds	r3, r1, #1
 8024fb4:	f100 0b01 	add.w	fp, r0, #1
 8024fb8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024fbc:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8024fc0:	b292      	uxth	r2, r2
 8024fc2:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8024fc6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8024fca:	ea4b 0101 	orr.w	r1, fp, r1
 8024fce:	f102 0b01 	add.w	fp, r2, #1
 8024fd2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024fd6:	0952      	lsrs	r2, r2, #5
 8024fd8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024fdc:	4311      	orrs	r1, r2
 8024fde:	f8ae 1000 	strh.w	r1, [lr]
 8024fe2:	e79f      	b.n	8024f24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024fe4:	b013      	add	sp, #76	; 0x4c
 8024fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fea:	bf00      	nop
 8024fec:	2004e128 	.word	0x2004e128

08024ff0 <CRC_Lock>:
 8024ff0:	b530      	push	{r4, r5, lr}
 8024ff2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024ff6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024ffa:	4a1e      	ldr	r2, [pc, #120]	; (8025074 <CRC_Lock+0x84>)
 8024ffc:	6813      	ldr	r3, [r2, #0]
 8024ffe:	f023 0301 	bic.w	r3, r3, #1
 8025002:	6013      	str	r3, [r2, #0]
 8025004:	4b1c      	ldr	r3, [pc, #112]	; (8025078 <CRC_Lock+0x88>)
 8025006:	681a      	ldr	r2, [r3, #0]
 8025008:	4022      	ands	r2, r4
 802500a:	42aa      	cmp	r2, r5
 802500c:	d005      	beq.n	802501a <CRC_Lock+0x2a>
 802500e:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025012:	681b      	ldr	r3, [r3, #0]
 8025014:	4023      	ands	r3, r4
 8025016:	4293      	cmp	r3, r2
 8025018:	d124      	bne.n	8025064 <CRC_Lock+0x74>
 802501a:	4b18      	ldr	r3, [pc, #96]	; (802507c <CRC_Lock+0x8c>)
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	bb0b      	cbnz	r3, 8025064 <CRC_Lock+0x74>
 8025020:	4b17      	ldr	r3, [pc, #92]	; (8025080 <CRC_Lock+0x90>)
 8025022:	681a      	ldr	r2, [r3, #0]
 8025024:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025028:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802502c:	d00d      	beq.n	802504a <CRC_Lock+0x5a>
 802502e:	f240 4483 	movw	r4, #1155	; 0x483
 8025032:	681a      	ldr	r2, [r3, #0]
 8025034:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025038:	42a2      	cmp	r2, r4
 802503a:	d006      	beq.n	802504a <CRC_Lock+0x5a>
 802503c:	f240 4285 	movw	r2, #1157	; 0x485
 8025040:	681b      	ldr	r3, [r3, #0]
 8025042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025046:	4293      	cmp	r3, r2
 8025048:	d10c      	bne.n	8025064 <CRC_Lock+0x74>
 802504a:	2201      	movs	r2, #1
 802504c:	4b0d      	ldr	r3, [pc, #52]	; (8025084 <CRC_Lock+0x94>)
 802504e:	601a      	str	r2, [r3, #0]
 8025050:	681a      	ldr	r2, [r3, #0]
 8025052:	2a00      	cmp	r2, #0
 8025054:	d1fc      	bne.n	8025050 <CRC_Lock+0x60>
 8025056:	4b0c      	ldr	r3, [pc, #48]	; (8025088 <CRC_Lock+0x98>)
 8025058:	6018      	str	r0, [r3, #0]
 802505a:	6818      	ldr	r0, [r3, #0]
 802505c:	1a43      	subs	r3, r0, r1
 802505e:	4258      	negs	r0, r3
 8025060:	4158      	adcs	r0, r3
 8025062:	bd30      	pop	{r4, r5, pc}
 8025064:	2201      	movs	r2, #1
 8025066:	4b09      	ldr	r3, [pc, #36]	; (802508c <CRC_Lock+0x9c>)
 8025068:	601a      	str	r2, [r3, #0]
 802506a:	681a      	ldr	r2, [r3, #0]
 802506c:	2a00      	cmp	r2, #0
 802506e:	d1fc      	bne.n	802506a <CRC_Lock+0x7a>
 8025070:	4b07      	ldr	r3, [pc, #28]	; (8025090 <CRC_Lock+0xa0>)
 8025072:	e7f1      	b.n	8025058 <CRC_Lock+0x68>
 8025074:	e0002000 	.word	0xe0002000
 8025078:	e000ed00 	.word	0xe000ed00
 802507c:	e0042000 	.word	0xe0042000
 8025080:	5c001000 	.word	0x5c001000
 8025084:	58024c08 	.word	0x58024c08
 8025088:	58024c00 	.word	0x58024c00
 802508c:	40023008 	.word	0x40023008
 8025090:	40023000 	.word	0x40023000

08025094 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8025094:	6101      	str	r1, [r0, #16]
 8025096:	4770      	bx	lr

08025098 <_ZN8touchgfx8Gestures4tickEv>:
 8025098:	7b83      	ldrb	r3, [r0, #14]
 802509a:	b14b      	cbz	r3, 80250b0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802509c:	8903      	ldrh	r3, [r0, #8]
 802509e:	3301      	adds	r3, #1
 80250a0:	b29b      	uxth	r3, r3
 80250a2:	2b07      	cmp	r3, #7
 80250a4:	8103      	strh	r3, [r0, #8]
 80250a6:	bf81      	itttt	hi
 80250a8:	2300      	movhi	r3, #0
 80250aa:	8143      	strhhi	r3, [r0, #10]
 80250ac:	8183      	strhhi	r3, [r0, #12]
 80250ae:	7383      	strbhi	r3, [r0, #14]
 80250b0:	4770      	bx	lr
	...

080250b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80250b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80250b8:	4698      	mov	r8, r3
 80250ba:	4604      	mov	r4, r0
 80250bc:	8883      	ldrh	r3, [r0, #4]
 80250be:	460e      	mov	r6, r1
 80250c0:	88c1      	ldrh	r1, [r0, #6]
 80250c2:	2000      	movs	r0, #0
 80250c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80250c8:	eba8 0303 	sub.w	r3, r8, r3
 80250cc:	b21b      	sxth	r3, r3
 80250ce:	4617      	mov	r7, r2
 80250d0:	4a17      	ldr	r2, [pc, #92]	; (8025130 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80250d2:	2b00      	cmp	r3, #0
 80250d4:	bfb8      	it	lt
 80250d6:	425b      	neglt	r3, r3
 80250d8:	9200      	str	r2, [sp, #0]
 80250da:	8aa2      	ldrh	r2, [r4, #20]
 80250dc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80250e0:	b21b      	sxth	r3, r3
 80250e2:	4293      	cmp	r3, r2
 80250e4:	f88d 0004 	strb.w	r0, [sp, #4]
 80250e8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80250ec:	f8ad 800a 	strh.w	r8, [sp, #10]
 80250f0:	f8ad 500c 	strh.w	r5, [sp, #12]
 80250f4:	dc07      	bgt.n	8025106 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80250f6:	1a69      	subs	r1, r5, r1
 80250f8:	b209      	sxth	r1, r1
 80250fa:	2900      	cmp	r1, #0
 80250fc:	bfb8      	it	lt
 80250fe:	4249      	neglt	r1, r1
 8025100:	b209      	sxth	r1, r1
 8025102:	428a      	cmp	r2, r1
 8025104:	da10      	bge.n	8025128 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8025106:	6920      	ldr	r0, [r4, #16]
 8025108:	4669      	mov	r1, sp
 802510a:	6803      	ldr	r3, [r0, #0]
 802510c:	eba8 0606 	sub.w	r6, r8, r6
 8025110:	685b      	ldr	r3, [r3, #4]
 8025112:	4798      	blx	r3
 8025114:	2300      	movs	r3, #0
 8025116:	2001      	movs	r0, #1
 8025118:	1bef      	subs	r7, r5, r7
 802511a:	8123      	strh	r3, [r4, #8]
 802511c:	8166      	strh	r6, [r4, #10]
 802511e:	81a7      	strh	r7, [r4, #12]
 8025120:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025124:	80e5      	strh	r5, [r4, #6]
 8025126:	73a0      	strb	r0, [r4, #14]
 8025128:	b004      	add	sp, #16
 802512a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802512e:	bf00      	nop
 8025130:	08028b3c 	.word	0x08028b3c

08025134 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025136:	461e      	mov	r6, r3
 8025138:	1e4b      	subs	r3, r1, #1
 802513a:	2b01      	cmp	r3, #1
 802513c:	b085      	sub	sp, #20
 802513e:	4604      	mov	r4, r0
 8025140:	460d      	mov	r5, r1
 8025142:	4617      	mov	r7, r2
 8025144:	d84b      	bhi.n	80251de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025146:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802514a:	1cd3      	adds	r3, r2, #3
 802514c:	b29b      	uxth	r3, r3
 802514e:	2b06      	cmp	r3, #6
 8025150:	d916      	bls.n	8025180 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025152:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80251f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025156:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802515a:	f8cd c004 	str.w	ip, [sp, #4]
 802515e:	f04f 0c00 	mov.w	ip, #0
 8025162:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025166:	6900      	ldr	r0, [r0, #16]
 8025168:	f8ad 100c 	strh.w	r1, [sp, #12]
 802516c:	f88d c008 	strb.w	ip, [sp, #8]
 8025170:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025174:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025178:	6803      	ldr	r3, [r0, #0]
 802517a:	a901      	add	r1, sp, #4
 802517c:	689b      	ldr	r3, [r3, #8]
 802517e:	4798      	blx	r3
 8025180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025184:	1cd3      	adds	r3, r2, #3
 8025186:	b29b      	uxth	r3, r3
 8025188:	2b06      	cmp	r3, #6
 802518a:	d916      	bls.n	80251ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802518c:	f8df c064 	ldr.w	ip, [pc, #100]	; 80251f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025190:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025194:	f8cd c004 	str.w	ip, [sp, #4]
 8025198:	f04f 0c01 	mov.w	ip, #1
 802519c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80251a0:	6920      	ldr	r0, [r4, #16]
 80251a2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80251a6:	f88d c008 	strb.w	ip, [sp, #8]
 80251aa:	f8ad 200a 	strh.w	r2, [sp, #10]
 80251ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80251b2:	6803      	ldr	r3, [r0, #0]
 80251b4:	a901      	add	r1, sp, #4
 80251b6:	689b      	ldr	r3, [r3, #8]
 80251b8:	4798      	blx	r3
 80251ba:	4b0d      	ldr	r3, [pc, #52]	; (80251f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80251bc:	6920      	ldr	r0, [r4, #16]
 80251be:	9301      	str	r3, [sp, #4]
 80251c0:	2300      	movs	r3, #0
 80251c2:	f88d 5008 	strb.w	r5, [sp, #8]
 80251c6:	f8ad 700a 	strh.w	r7, [sp, #10]
 80251ca:	f8ad 600c 	strh.w	r6, [sp, #12]
 80251ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80251d2:	6803      	ldr	r3, [r0, #0]
 80251d4:	a901      	add	r1, sp, #4
 80251d6:	681b      	ldr	r3, [r3, #0]
 80251d8:	4798      	blx	r3
 80251da:	b005      	add	sp, #20
 80251dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80251de:	2900      	cmp	r1, #0
 80251e0:	d1eb      	bne.n	80251ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80251e2:	80a2      	strh	r2, [r4, #4]
 80251e4:	80c6      	strh	r6, [r0, #6]
 80251e6:	60a1      	str	r1, [r4, #8]
 80251e8:	81a1      	strh	r1, [r4, #12]
 80251ea:	73a1      	strb	r1, [r4, #14]
 80251ec:	e7e5      	b.n	80251ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80251ee:	bf00      	nop
 80251f0:	08028b28 	.word	0x08028b28
 80251f4:	08028b50 	.word	0x08028b50

080251f8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 80251f8:	10c9      	asrs	r1, r1, #3
 80251fa:	2900      	cmp	r1, #0
 80251fc:	bfb8      	it	lt
 80251fe:	4249      	neglt	r1, r1
 8025200:	2801      	cmp	r0, #1
 8025202:	d108      	bne.n	8025216 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025204:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8025208:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802520c:	4601      	mov	r1, r0
 802520e:	dd02      	ble.n	8025216 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025210:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8025214:	4770      	bx	lr
 8025216:	29ff      	cmp	r1, #255	; 0xff
 8025218:	bfa8      	it	ge
 802521a:	21ff      	movge	r1, #255	; 0xff
 802521c:	4608      	mov	r0, r1
 802521e:	4770      	bx	lr

08025220 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025220:	b410      	push	{r4}
 8025222:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8025226:	429c      	cmp	r4, r3
 8025228:	d803      	bhi.n	8025232 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802522a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802522e:	f7f0 bba3 	b.w	8015978 <_ZN8touchgfx7Outline6lineToEii>
 8025232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025236:	4770      	bx	lr

08025238 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8025238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802523c:	b08b      	sub	sp, #44	; 0x2c
 802523e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025242:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8025246:	4606      	mov	r6, r0
 8025248:	9308      	str	r3, [sp, #32]
 802524a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802524e:	468a      	mov	sl, r1
 8025250:	9309      	str	r3, [sp, #36]	; 0x24
 8025252:	f7f0 fcfd 	bl	8015c50 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8025256:	68b5      	ldr	r5, [r6, #8]
 8025258:	4604      	mov	r4, r0
 802525a:	2d00      	cmp	r5, #0
 802525c:	d044      	beq.n	80252e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802525e:	6873      	ldr	r3, [r6, #4]
 8025260:	42ab      	cmp	r3, r5
 8025262:	d33d      	bcc.n	80252e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8025264:	f04f 0800 	mov.w	r8, #0
 8025268:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802526c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8025270:	eb02 0b03 	add.w	fp, r2, r3
 8025274:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025278:	fb02 1203 	mla	r2, r2, r3, r1
 802527c:	9205      	str	r2, [sp, #20]
 802527e:	1e6a      	subs	r2, r5, #1
 8025280:	9204      	str	r2, [sp, #16]
 8025282:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8025286:	f9b4 7000 	ldrsh.w	r7, [r4]
 802528a:	454b      	cmp	r3, r9
 802528c:	463a      	mov	r2, r7
 802528e:	d008      	beq.n	80252a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8025290:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8025294:	eb03 0b09 	add.w	fp, r3, r9
 8025298:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802529c:	fb03 1309 	mla	r3, r3, r9, r1
 80252a0:	9305      	str	r3, [sp, #20]
 80252a2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80252a6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80252aa:	4498      	add	r8, r3
 80252ac:	9b04      	ldr	r3, [sp, #16]
 80252ae:	3b01      	subs	r3, #1
 80252b0:	9304      	str	r3, [sp, #16]
 80252b2:	9b04      	ldr	r3, [sp, #16]
 80252b4:	3301      	adds	r3, #1
 80252b6:	d015      	beq.n	80252e4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80252b8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80252bc:	42bb      	cmp	r3, r7
 80252be:	d117      	bne.n	80252f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80252c0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80252c4:	9b04      	ldr	r3, [sp, #16]
 80252c6:	4548      	cmp	r0, r9
 80252c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80252cc:	d17d      	bne.n	80253ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80252ce:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80252d2:	4401      	add	r1, r0
 80252d4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80252d8:	4480      	add	r8, r0
 80252da:	e7e9      	b.n	80252b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80252dc:	461f      	mov	r7, r3
 80252de:	e042      	b.n	8025366 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80252e0:	2000      	movs	r0, #0
 80252e2:	e002      	b.n	80252ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80252e4:	2900      	cmp	r1, #0
 80252e6:	d16d      	bne.n	80253c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80252e8:	2001      	movs	r0, #1
 80252ea:	b00b      	add	sp, #44	; 0x2c
 80252ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252f0:	b379      	cbz	r1, 8025352 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80252f2:	2f00      	cmp	r7, #0
 80252f4:	db29      	blt.n	802534a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80252f6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80252fa:	42bb      	cmp	r3, r7
 80252fc:	dd25      	ble.n	802534a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80252fe:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8025302:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8025306:	f7ff ff77 	bl	80251f8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802530a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802530c:	fb10 f003 	smulbb	r0, r0, r3
 8025310:	b280      	uxth	r0, r0
 8025312:	1c41      	adds	r1, r0, #1
 8025314:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025318:	1209      	asrs	r1, r1, #8
 802531a:	f011 0fff 	tst.w	r1, #255	; 0xff
 802531e:	d014      	beq.n	802534a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025320:	b2c9      	uxtb	r1, r1
 8025322:	9102      	str	r1, [sp, #8]
 8025324:	2101      	movs	r1, #1
 8025326:	9808      	ldr	r0, [sp, #32]
 8025328:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802532a:	b2ba      	uxth	r2, r7
 802532c:	4413      	add	r3, r2
 802532e:	9101      	str	r1, [sp, #4]
 8025330:	4402      	add	r2, r0
 8025332:	fa0f f18b 	sxth.w	r1, fp
 8025336:	f8da 0000 	ldr.w	r0, [sl]
 802533a:	9100      	str	r1, [sp, #0]
 802533c:	6941      	ldr	r1, [r0, #20]
 802533e:	b21b      	sxth	r3, r3
 8025340:	460d      	mov	r5, r1
 8025342:	b212      	sxth	r2, r2
 8025344:	9905      	ldr	r1, [sp, #20]
 8025346:	4650      	mov	r0, sl
 8025348:	47a8      	blx	r5
 802534a:	9b04      	ldr	r3, [sp, #16]
 802534c:	1c7a      	adds	r2, r7, #1
 802534e:	3301      	adds	r3, #1
 8025350:	d0ca      	beq.n	80252e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025352:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025356:	1abb      	subs	r3, r7, r2
 8025358:	2b00      	cmp	r3, #0
 802535a:	dd31      	ble.n	80253c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802535c:	2a00      	cmp	r2, #0
 802535e:	dabd      	bge.n	80252dc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8025360:	2f00      	cmp	r7, #0
 8025362:	dd2d      	ble.n	80253c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025364:	2200      	movs	r2, #0
 8025366:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802536a:	19d1      	adds	r1, r2, r7
 802536c:	4299      	cmp	r1, r3
 802536e:	db02      	blt.n	8025376 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8025370:	1a9f      	subs	r7, r3, r2
 8025372:	2f00      	cmp	r7, #0
 8025374:	dd24      	ble.n	80253c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025376:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802537a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802537e:	f7ff ff3b 	bl	80251f8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8025382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025384:	fb10 f003 	smulbb	r0, r0, r3
 8025388:	b280      	uxth	r0, r0
 802538a:	1c41      	adds	r1, r0, #1
 802538c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025390:	1209      	asrs	r1, r1, #8
 8025392:	f011 0fff 	tst.w	r1, #255	; 0xff
 8025396:	d013      	beq.n	80253c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025398:	9808      	ldr	r0, [sp, #32]
 802539a:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802539c:	b292      	uxth	r2, r2
 802539e:	b2c9      	uxtb	r1, r1
 80253a0:	4413      	add	r3, r2
 80253a2:	9102      	str	r1, [sp, #8]
 80253a4:	4402      	add	r2, r0
 80253a6:	b23f      	sxth	r7, r7
 80253a8:	f8da 0000 	ldr.w	r0, [sl]
 80253ac:	fa0f f18b 	sxth.w	r1, fp
 80253b0:	9100      	str	r1, [sp, #0]
 80253b2:	9701      	str	r7, [sp, #4]
 80253b4:	6947      	ldr	r7, [r0, #20]
 80253b6:	b21b      	sxth	r3, r3
 80253b8:	b212      	sxth	r2, r2
 80253ba:	9905      	ldr	r1, [sp, #20]
 80253bc:	4650      	mov	r0, sl
 80253be:	47b8      	blx	r7
 80253c0:	464b      	mov	r3, r9
 80253c2:	e75e      	b.n	8025282 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80253c4:	2f00      	cmp	r7, #0
 80253c6:	da96      	bge.n	80252f6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80253c8:	e78e      	b.n	80252e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80253ca:	2900      	cmp	r1, #0
 80253cc:	d0f8      	beq.n	80253c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80253ce:	e790      	b.n	80252f2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080253d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80253d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80253d4:	2500      	movs	r5, #0
 80253d6:	4b4b      	ldr	r3, [pc, #300]	; (8025504 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 80253d8:	4604      	mov	r4, r0
 80253da:	f100 0620 	add.w	r6, r0, #32
 80253de:	e9c0 3100 	strd	r3, r1, [r0]
 80253e2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80253e6:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80253ea:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80253ee:	f100 0718 	add.w	r7, r0, #24
 80253f2:	4630      	mov	r0, r6
 80253f4:	4690      	mov	r8, r2
 80253f6:	f7ef fdf7 	bl	8014fe8 <_ZN8touchgfx7OutlineC1Ev>
 80253fa:	2301      	movs	r3, #1
 80253fc:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8025400:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8025404:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8025408:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 802540c:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8025410:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8025414:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025418:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 802541c:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8025420:	f9b8 2000 	ldrsh.w	r2, [r8]
 8025424:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8025428:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802542c:	4410      	add	r0, r2
 802542e:	b280      	uxth	r0, r0
 8025430:	fa0f fa80 	sxth.w	sl, r0
 8025434:	45aa      	cmp	sl, r5
 8025436:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802543a:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802543e:	9500      	str	r5, [sp, #0]
 8025440:	dd5c      	ble.n	80254fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025442:	4591      	cmp	r9, r2
 8025444:	dd5a      	ble.n	80254fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025446:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802544a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802544e:	440b      	add	r3, r1
 8025450:	b29b      	uxth	r3, r3
 8025452:	b21d      	sxth	r5, r3
 8025454:	2d00      	cmp	r5, #0
 8025456:	dd51      	ble.n	80254fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025458:	458e      	cmp	lr, r1
 802545a:	dd4f      	ble.n	80254fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802545c:	45d1      	cmp	r9, sl
 802545e:	bfb8      	it	lt
 8025460:	fa1f f089 	uxthlt.w	r0, r9
 8025464:	45ae      	cmp	lr, r5
 8025466:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802546a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802546e:	bfb8      	it	lt
 8025470:	fa1f f38e 	uxthlt.w	r3, lr
 8025474:	1a80      	subs	r0, r0, r2
 8025476:	1a5b      	subs	r3, r3, r1
 8025478:	f8ad 0004 	strh.w	r0, [sp, #4]
 802547c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8025480:	f8ad 2000 	strh.w	r2, [sp]
 8025484:	f8ad 1002 	strh.w	r1, [sp, #2]
 8025488:	466d      	mov	r5, sp
 802548a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802548e:	e887 0003 	stmia.w	r7, {r0, r1}
 8025492:	f8dc 3000 	ldr.w	r3, [ip]
 8025496:	4660      	mov	r0, ip
 8025498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802549a:	4639      	mov	r1, r7
 802549c:	4798      	blx	r3
 802549e:	6861      	ldr	r1, [r4, #4]
 80254a0:	4628      	mov	r0, r5
 80254a2:	3104      	adds	r1, #4
 80254a4:	f7f1 fae2 	bl	8016a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80254a8:	4638      	mov	r0, r7
 80254aa:	f7f1 fab7 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80254ae:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80254b2:	f8bd 2000 	ldrh.w	r2, [sp]
 80254b6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80254ba:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80254be:	4630      	mov	r0, r6
 80254c0:	f7ef fd76 	bl	8014fb0 <_ZN8touchgfx7Outline5resetEv>
 80254c4:	4620      	mov	r0, r4
 80254c6:	f9bd 3000 	ldrsh.w	r3, [sp]
 80254ca:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 80254ce:	015b      	lsls	r3, r3, #5
 80254d0:	60a3      	str	r3, [r4, #8]
 80254d2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80254d6:	015b      	lsls	r3, r3, #5
 80254d8:	60e3      	str	r3, [r4, #12]
 80254da:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80254de:	015b      	lsls	r3, r3, #5
 80254e0:	6123      	str	r3, [r4, #16]
 80254e2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80254e6:	015b      	lsls	r3, r3, #5
 80254e8:	6163      	str	r3, [r4, #20]
 80254ea:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80254ee:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80254f2:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 80254f6:	b002      	add	sp, #8
 80254f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80254fc:	2300      	movs	r3, #0
 80254fe:	9301      	str	r3, [sp, #4]
 8025500:	e7c2      	b.n	8025488 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 8025502:	bf00      	nop
 8025504:	08028624 	.word	0x08028624

08025508 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8025508:	b510      	push	{r4, lr}
 802550a:	4b07      	ldr	r3, [pc, #28]	; (8025528 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802550c:	781b      	ldrb	r3, [r3, #0]
 802550e:	2b01      	cmp	r3, #1
 8025510:	d108      	bne.n	8025524 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8025512:	6843      	ldr	r3, [r0, #4]
 8025514:	6814      	ldr	r4, [r2, #0]
 8025516:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802551a:	680b      	ldr	r3, [r1, #0]
 802551c:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8025520:	6013      	str	r3, [r2, #0]
 8025522:	600c      	str	r4, [r1, #0]
 8025524:	bd10      	pop	{r4, pc}
 8025526:	bf00      	nop
 8025528:	2004e110 	.word	0x2004e110

0802552c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802552c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802552e:	4604      	mov	r4, r0
 8025530:	ab02      	add	r3, sp, #8
 8025532:	f843 2d08 	str.w	r2, [r3, #-8]!
 8025536:	461a      	mov	r2, r3
 8025538:	9101      	str	r1, [sp, #4]
 802553a:	a901      	add	r1, sp, #4
 802553c:	f7ff ffe4 	bl	8025508 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025540:	68a3      	ldr	r3, [r4, #8]
 8025542:	9901      	ldr	r1, [sp, #4]
 8025544:	9a00      	ldr	r2, [sp, #0]
 8025546:	1ac9      	subs	r1, r1, r3
 8025548:	68e3      	ldr	r3, [r4, #12]
 802554a:	9101      	str	r1, [sp, #4]
 802554c:	1ad2      	subs	r2, r2, r3
 802554e:	2a00      	cmp	r2, #0
 8025550:	9200      	str	r2, [sp, #0]
 8025552:	db1c      	blt.n	802558e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8025554:	6963      	ldr	r3, [r4, #20]
 8025556:	429a      	cmp	r2, r3
 8025558:	bfac      	ite	ge
 802555a:	2002      	movge	r0, #2
 802555c:	2000      	movlt	r0, #0
 802555e:	2900      	cmp	r1, #0
 8025560:	db17      	blt.n	8025592 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8025562:	6923      	ldr	r3, [r4, #16]
 8025564:	4299      	cmp	r1, r3
 8025566:	bfac      	ite	ge
 8025568:	2308      	movge	r3, #8
 802556a:	2300      	movlt	r3, #0
 802556c:	4303      	orrs	r3, r0
 802556e:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8025572:	b2dd      	uxtb	r5, r3
 8025574:	b978      	cbnz	r0, 8025596 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8025576:	f104 0020 	add.w	r0, r4, #32
 802557a:	f7ff fe51 	bl	8025220 <_ZN8touchgfx10Rasterizer6lineToEii>
 802557e:	9b01      	ldr	r3, [sp, #4]
 8025580:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8025584:	65e3      	str	r3, [r4, #92]	; 0x5c
 8025586:	9b00      	ldr	r3, [sp, #0]
 8025588:	6623      	str	r3, [r4, #96]	; 0x60
 802558a:	b002      	add	sp, #8
 802558c:	bd70      	pop	{r4, r5, r6, pc}
 802558e:	2001      	movs	r0, #1
 8025590:	e7e5      	b.n	802555e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8025592:	2304      	movs	r3, #4
 8025594:	e7ea      	b.n	802556c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8025596:	b113      	cbz	r3, 802559e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8025598:	ea10 0305 	ands.w	r3, r0, r5
 802559c:	d11d      	bne.n	80255da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 802559e:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 80255a2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80255a6:	f104 0620 	add.w	r6, r4, #32
 80255aa:	b193      	cbz	r3, 80255d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80255ac:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80255b0:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80255b4:	4298      	cmp	r0, r3
 80255b6:	d802      	bhi.n	80255be <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80255b8:	4630      	mov	r0, r6
 80255ba:	f7f0 f9f7 	bl	80159ac <_ZN8touchgfx7Outline6moveToEii>
 80255be:	2300      	movs	r3, #0
 80255c0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80255c4:	2301      	movs	r3, #1
 80255c6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80255ca:	e9dd 2100 	ldrd	r2, r1, [sp]
 80255ce:	4630      	mov	r0, r6
 80255d0:	e7d3      	b.n	802557a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80255d2:	4630      	mov	r0, r6
 80255d4:	f7ff fe24 	bl	8025220 <_ZN8touchgfx10Rasterizer6lineToEii>
 80255d8:	e7f7      	b.n	80255ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80255da:	461d      	mov	r5, r3
 80255dc:	e7cf      	b.n	802557e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

080255de <_ZN8touchgfx6Canvas5closeEv>:
 80255de:	b538      	push	{r3, r4, r5, lr}
 80255e0:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80255e4:	4604      	mov	r4, r0
 80255e6:	b993      	cbnz	r3, 802560e <_ZN8touchgfx6Canvas5closeEv+0x30>
 80255e8:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80255ec:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 80255f0:	4213      	tst	r3, r2
 80255f2:	d10c      	bne.n	802560e <_ZN8touchgfx6Canvas5closeEv+0x30>
 80255f4:	f100 0520 	add.w	r5, r0, #32
 80255f8:	b123      	cbz	r3, 8025604 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80255fa:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 80255fe:	4628      	mov	r0, r5
 8025600:	f7ff fe0e 	bl	8025220 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025604:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8025608:	4628      	mov	r0, r5
 802560a:	f7ff fe09 	bl	8025220 <_ZN8touchgfx10Rasterizer6lineToEii>
 802560e:	2300      	movs	r3, #0
 8025610:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025614:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8025618:	4298      	cmp	r0, r3
 802561a:	bf34      	ite	cc
 802561c:	2000      	movcc	r0, #0
 802561e:	2001      	movcs	r0, #1
 8025620:	bd38      	pop	{r3, r4, r5, pc}
	...

08025624 <_ZN8touchgfx6Canvas6renderEh>:
 8025624:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025628:	4604      	mov	r4, r0
 802562a:	6840      	ldr	r0, [r0, #4]
 802562c:	460d      	mov	r5, r1
 802562e:	6803      	ldr	r3, [r0, #0]
 8025630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025632:	4798      	blx	r3
 8025634:	fb10 f105 	smulbb	r1, r0, r5
 8025638:	b289      	uxth	r1, r1
 802563a:	1c4d      	adds	r5, r1, #1
 802563c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025640:	122d      	asrs	r5, r5, #8
 8025642:	f000 8097 	beq.w	8025774 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8025646:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 802564a:	2b00      	cmp	r3, #0
 802564c:	f000 8092 	beq.w	8025774 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8025650:	4620      	mov	r0, r4
 8025652:	f7ff ffc4 	bl	80255de <_ZN8touchgfx6Canvas5closeEv>
 8025656:	4607      	mov	r7, r0
 8025658:	2800      	cmp	r0, #0
 802565a:	d043      	beq.n	80256e4 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802565c:	6863      	ldr	r3, [r4, #4]
 802565e:	4e46      	ldr	r6, [pc, #280]	; (8025778 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 8025660:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8025662:	6837      	ldr	r7, [r6, #0]
 8025664:	6803      	ldr	r3, [r0, #0]
 8025666:	689b      	ldr	r3, [r3, #8]
 8025668:	4798      	blx	r3
 802566a:	4601      	mov	r1, r0
 802566c:	4638      	mov	r0, r7
 802566e:	f7ee fb6b 	bl	8013d48 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8025672:	4607      	mov	r7, r0
 8025674:	f7e8 f8ba 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8025678:	6803      	ldr	r3, [r0, #0]
 802567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802567c:	4798      	blx	r3
 802567e:	4680      	mov	r8, r0
 8025680:	f7e8 f8b4 	bl	800d7ec <_ZN8touchgfx3HAL3lcdEv>
 8025684:	6803      	ldr	r3, [r0, #0]
 8025686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025688:	4798      	blx	r3
 802568a:	280b      	cmp	r0, #11
 802568c:	d857      	bhi.n	802573e <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802568e:	e8df f000 	tbb	[pc, r0]
 8025692:	584d      	.short	0x584d
 8025694:	2d560668 	.word	0x2d560668
 8025698:	6161613d 	.word	0x6161613d
 802569c:	6161      	.short	0x6161
 802569e:	2208      	movs	r2, #8
 80256a0:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80256a4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256a8:	fb91 f2f2 	sdiv	r2, r1, r2
 80256ac:	fb08 2303 	mla	r3, r8, r3, r2
 80256b0:	441f      	add	r7, r3
 80256b2:	424b      	negs	r3, r1
 80256b4:	f003 0307 	and.w	r3, r3, #7
 80256b8:	f001 0107 	and.w	r1, r1, #7
 80256bc:	bf58      	it	pl
 80256be:	4259      	negpl	r1, r3
 80256c0:	b2c9      	uxtb	r1, r1
 80256c2:	b2ed      	uxtb	r5, r5
 80256c4:	e9cd 1500 	strd	r1, r5, [sp]
 80256c8:	6860      	ldr	r0, [r4, #4]
 80256ca:	fa0f f388 	sxth.w	r3, r8
 80256ce:	463a      	mov	r2, r7
 80256d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80256d2:	f104 0020 	add.w	r0, r4, #32
 80256d6:	f7ff fdaf 	bl	8025238 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80256da:	4607      	mov	r7, r0
 80256dc:	6830      	ldr	r0, [r6, #0]
 80256de:	6803      	ldr	r3, [r0, #0]
 80256e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80256e2:	4798      	blx	r3
 80256e4:	4638      	mov	r0, r7
 80256e6:	b002      	add	sp, #8
 80256e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80256ec:	2204      	movs	r2, #4
 80256ee:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80256f2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256f6:	fb91 f2f2 	sdiv	r2, r1, r2
 80256fa:	fb08 2303 	mla	r3, r8, r3, r2
 80256fe:	441f      	add	r7, r3
 8025700:	424b      	negs	r3, r1
 8025702:	f003 0303 	and.w	r3, r3, #3
 8025706:	f001 0103 	and.w	r1, r1, #3
 802570a:	e7d7      	b.n	80256bc <_ZN8touchgfx6Canvas6renderEh+0x98>
 802570c:	2202      	movs	r2, #2
 802570e:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8025712:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025716:	fb91 f2f2 	sdiv	r2, r1, r2
 802571a:	fb08 2303 	mla	r3, r8, r3, r2
 802571e:	2900      	cmp	r1, #0
 8025720:	f001 0101 	and.w	r1, r1, #1
 8025724:	441f      	add	r7, r3
 8025726:	bfb8      	it	lt
 8025728:	4249      	neglt	r1, r1
 802572a:	e7c9      	b.n	80256c0 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 802572c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025730:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025734:	fb08 f303 	mul.w	r3, r8, r3
 8025738:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802573c:	441f      	add	r7, r3
 802573e:	2100      	movs	r1, #0
 8025740:	e7bf      	b.n	80256c2 <_ZN8touchgfx6Canvas6renderEh+0x9e>
 8025742:	2103      	movs	r1, #3
 8025744:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025748:	fb08 f203 	mul.w	r2, r8, r3
 802574c:	8b23      	ldrh	r3, [r4, #24]
 802574e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8025752:	e7f3      	b.n	802573c <_ZN8touchgfx6Canvas6renderEh+0x118>
 8025754:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025758:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802575c:	fb08 2303 	mla	r3, r8, r3, r2
 8025760:	e7ec      	b.n	802573c <_ZN8touchgfx6Canvas6renderEh+0x118>
 8025762:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025766:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802576a:	fb08 f303 	mul.w	r3, r8, r3
 802576e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025772:	e7e3      	b.n	802573c <_ZN8touchgfx6Canvas6renderEh+0x118>
 8025774:	2701      	movs	r7, #1
 8025776:	e7b5      	b.n	80256e4 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025778:	2004e118 	.word	0x2004e118

0802577c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802577c:	b513      	push	{r0, r1, r4, lr}
 802577e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8025782:	4604      	mov	r4, r0
 8025784:	e9cd 2100 	strd	r2, r1, [sp]
 8025788:	b1a3      	cbz	r3, 80257b4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802578a:	466a      	mov	r2, sp
 802578c:	a901      	add	r1, sp, #4
 802578e:	4620      	mov	r0, r4
 8025790:	f7ff feba 	bl	8025508 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025794:	68a3      	ldr	r3, [r4, #8]
 8025796:	9901      	ldr	r1, [sp, #4]
 8025798:	9a00      	ldr	r2, [sp, #0]
 802579a:	1ac9      	subs	r1, r1, r3
 802579c:	68e3      	ldr	r3, [r4, #12]
 802579e:	9101      	str	r1, [sp, #4]
 80257a0:	1ad2      	subs	r2, r2, r3
 80257a2:	2a00      	cmp	r2, #0
 80257a4:	9200      	str	r2, [sp, #0]
 80257a6:	da0b      	bge.n	80257c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80257a8:	2301      	movs	r3, #1
 80257aa:	2900      	cmp	r1, #0
 80257ac:	da0e      	bge.n	80257cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80257ae:	f043 0304 	orr.w	r3, r3, #4
 80257b2:	e013      	b.n	80257dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80257b4:	f7ff ff13 	bl	80255de <_ZN8touchgfx6Canvas5closeEv>
 80257b8:	2800      	cmp	r0, #0
 80257ba:	d1e6      	bne.n	802578a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80257bc:	b002      	add	sp, #8
 80257be:	bd10      	pop	{r4, pc}
 80257c0:	6963      	ldr	r3, [r4, #20]
 80257c2:	429a      	cmp	r2, r3
 80257c4:	bfac      	ite	ge
 80257c6:	2302      	movge	r3, #2
 80257c8:	2300      	movlt	r3, #0
 80257ca:	e7ee      	b.n	80257aa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80257cc:	6920      	ldr	r0, [r4, #16]
 80257ce:	4281      	cmp	r1, r0
 80257d0:	bfac      	ite	ge
 80257d2:	2008      	movge	r0, #8
 80257d4:	2000      	movlt	r0, #0
 80257d6:	4318      	orrs	r0, r3
 80257d8:	b2c3      	uxtb	r3, r0
 80257da:	b158      	cbz	r0, 80257f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80257dc:	2201      	movs	r2, #1
 80257de:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80257e2:	9901      	ldr	r1, [sp, #4]
 80257e4:	9a00      	ldr	r2, [sp, #0]
 80257e6:	66a1      	str	r1, [r4, #104]	; 0x68
 80257e8:	66e2      	str	r2, [r4, #108]	; 0x6c
 80257ea:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80257ee:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80257f2:	e7e3      	b.n	80257bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80257f4:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80257f8:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80257fc:	4298      	cmp	r0, r3
 80257fe:	d803      	bhi.n	8025808 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8025800:	f104 0020 	add.w	r0, r4, #32
 8025804:	f7f0 f8d2 	bl	80159ac <_ZN8touchgfx7Outline6moveToEii>
 8025808:	2300      	movs	r3, #0
 802580a:	2201      	movs	r2, #1
 802580c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025810:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8025814:	e7e5      	b.n	80257e2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08025816 <__aeabi_atexit>:
 8025816:	460b      	mov	r3, r1
 8025818:	4601      	mov	r1, r0
 802581a:	4618      	mov	r0, r3
 802581c:	f000 b850 	b.w	80258c0 <__cxa_atexit>

08025820 <_ZdlPvj>:
 8025820:	f000 b812 	b.w	8025848 <_ZdlPv>

08025824 <__cxa_guard_acquire>:
 8025824:	6803      	ldr	r3, [r0, #0]
 8025826:	07db      	lsls	r3, r3, #31
 8025828:	d406      	bmi.n	8025838 <__cxa_guard_acquire+0x14>
 802582a:	7843      	ldrb	r3, [r0, #1]
 802582c:	b103      	cbz	r3, 8025830 <__cxa_guard_acquire+0xc>
 802582e:	deff      	udf	#255	; 0xff
 8025830:	2301      	movs	r3, #1
 8025832:	7043      	strb	r3, [r0, #1]
 8025834:	4618      	mov	r0, r3
 8025836:	4770      	bx	lr
 8025838:	2000      	movs	r0, #0
 802583a:	4770      	bx	lr

0802583c <__cxa_guard_release>:
 802583c:	2301      	movs	r3, #1
 802583e:	6003      	str	r3, [r0, #0]
 8025840:	4770      	bx	lr

08025842 <__cxa_pure_virtual>:
 8025842:	b508      	push	{r3, lr}
 8025844:	f000 f80c 	bl	8025860 <_ZSt9terminatev>

08025848 <_ZdlPv>:
 8025848:	f000 b88c 	b.w	8025964 <free>

0802584c <_ZN10__cxxabiv111__terminateEPFvvE>:
 802584c:	b508      	push	{r3, lr}
 802584e:	4780      	blx	r0
 8025850:	f000 f80b 	bl	802586a <abort>

08025854 <_ZSt13get_terminatev>:
 8025854:	4b01      	ldr	r3, [pc, #4]	; (802585c <_ZSt13get_terminatev+0x8>)
 8025856:	e8d3 0faf 	lda	r0, [r3]
 802585a:	4770      	bx	lr
 802585c:	20025894 	.word	0x20025894

08025860 <_ZSt9terminatev>:
 8025860:	b508      	push	{r3, lr}
 8025862:	f7ff fff7 	bl	8025854 <_ZSt13get_terminatev>
 8025866:	f7ff fff1 	bl	802584c <_ZN10__cxxabiv111__terminateEPFvvE>

0802586a <abort>:
 802586a:	2006      	movs	r0, #6
 802586c:	b508      	push	{r3, lr}
 802586e:	f000 fc91 	bl	8026194 <raise>
 8025872:	2001      	movs	r0, #1
 8025874:	f7dc fb28 	bl	8001ec8 <_exit>

08025878 <__assert_func>:
 8025878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802587a:	4614      	mov	r4, r2
 802587c:	461a      	mov	r2, r3
 802587e:	4b09      	ldr	r3, [pc, #36]	; (80258a4 <__assert_func+0x2c>)
 8025880:	4605      	mov	r5, r0
 8025882:	681b      	ldr	r3, [r3, #0]
 8025884:	68d8      	ldr	r0, [r3, #12]
 8025886:	b14c      	cbz	r4, 802589c <__assert_func+0x24>
 8025888:	4b07      	ldr	r3, [pc, #28]	; (80258a8 <__assert_func+0x30>)
 802588a:	9100      	str	r1, [sp, #0]
 802588c:	4907      	ldr	r1, [pc, #28]	; (80258ac <__assert_func+0x34>)
 802588e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025892:	462b      	mov	r3, r5
 8025894:	f000 f828 	bl	80258e8 <fiprintf>
 8025898:	f7ff ffe7 	bl	802586a <abort>
 802589c:	4b04      	ldr	r3, [pc, #16]	; (80258b0 <__assert_func+0x38>)
 802589e:	461c      	mov	r4, r3
 80258a0:	e7f3      	b.n	802588a <__assert_func+0x12>
 80258a2:	bf00      	nop
 80258a4:	20025898 	.word	0x20025898
 80258a8:	08028e18 	.word	0x08028e18
 80258ac:	08028e25 	.word	0x08028e25
 80258b0:	08028e53 	.word	0x08028e53

080258b4 <atexit>:
 80258b4:	2300      	movs	r3, #0
 80258b6:	4601      	mov	r1, r0
 80258b8:	461a      	mov	r2, r3
 80258ba:	4618      	mov	r0, r3
 80258bc:	f000 bd46 	b.w	802634c <__register_exitproc>

080258c0 <__cxa_atexit>:
 80258c0:	b510      	push	{r4, lr}
 80258c2:	4c05      	ldr	r4, [pc, #20]	; (80258d8 <__cxa_atexit+0x18>)
 80258c4:	4613      	mov	r3, r2
 80258c6:	b12c      	cbz	r4, 80258d4 <__cxa_atexit+0x14>
 80258c8:	460a      	mov	r2, r1
 80258ca:	4601      	mov	r1, r0
 80258cc:	2002      	movs	r0, #2
 80258ce:	f000 fd3d 	bl	802634c <__register_exitproc>
 80258d2:	bd10      	pop	{r4, pc}
 80258d4:	4620      	mov	r0, r4
 80258d6:	e7fc      	b.n	80258d2 <__cxa_atexit+0x12>
 80258d8:	0802634d 	.word	0x0802634d

080258dc <__errno>:
 80258dc:	4b01      	ldr	r3, [pc, #4]	; (80258e4 <__errno+0x8>)
 80258de:	6818      	ldr	r0, [r3, #0]
 80258e0:	4770      	bx	lr
 80258e2:	bf00      	nop
 80258e4:	20025898 	.word	0x20025898

080258e8 <fiprintf>:
 80258e8:	b40e      	push	{r1, r2, r3}
 80258ea:	b503      	push	{r0, r1, lr}
 80258ec:	ab03      	add	r3, sp, #12
 80258ee:	4601      	mov	r1, r0
 80258f0:	4805      	ldr	r0, [pc, #20]	; (8025908 <fiprintf+0x20>)
 80258f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80258f6:	6800      	ldr	r0, [r0, #0]
 80258f8:	9301      	str	r3, [sp, #4]
 80258fa:	f000 f94d 	bl	8025b98 <_vfiprintf_r>
 80258fe:	b002      	add	sp, #8
 8025900:	f85d eb04 	ldr.w	lr, [sp], #4
 8025904:	b003      	add	sp, #12
 8025906:	4770      	bx	lr
 8025908:	20025898 	.word	0x20025898

0802590c <__libc_init_array>:
 802590c:	b570      	push	{r4, r5, r6, lr}
 802590e:	4d0d      	ldr	r5, [pc, #52]	; (8025944 <__libc_init_array+0x38>)
 8025910:	2600      	movs	r6, #0
 8025912:	4c0d      	ldr	r4, [pc, #52]	; (8025948 <__libc_init_array+0x3c>)
 8025914:	1b64      	subs	r4, r4, r5
 8025916:	10a4      	asrs	r4, r4, #2
 8025918:	42a6      	cmp	r6, r4
 802591a:	d109      	bne.n	8025930 <__libc_init_array+0x24>
 802591c:	4d0b      	ldr	r5, [pc, #44]	; (802594c <__libc_init_array+0x40>)
 802591e:	2600      	movs	r6, #0
 8025920:	4c0b      	ldr	r4, [pc, #44]	; (8025950 <__libc_init_array+0x44>)
 8025922:	f001 f85b 	bl	80269dc <_init>
 8025926:	1b64      	subs	r4, r4, r5
 8025928:	10a4      	asrs	r4, r4, #2
 802592a:	42a6      	cmp	r6, r4
 802592c:	d105      	bne.n	802593a <__libc_init_array+0x2e>
 802592e:	bd70      	pop	{r4, r5, r6, pc}
 8025930:	f855 3b04 	ldr.w	r3, [r5], #4
 8025934:	3601      	adds	r6, #1
 8025936:	4798      	blx	r3
 8025938:	e7ee      	b.n	8025918 <__libc_init_array+0xc>
 802593a:	f855 3b04 	ldr.w	r3, [r5], #4
 802593e:	3601      	adds	r6, #1
 8025940:	4798      	blx	r3
 8025942:	e7f2      	b.n	802592a <__libc_init_array+0x1e>
 8025944:	0804e8c8 	.word	0x0804e8c8
 8025948:	0804e8c8 	.word	0x0804e8c8
 802594c:	0804e8c8 	.word	0x0804e8c8
 8025950:	0804e8dc 	.word	0x0804e8dc

08025954 <malloc>:
 8025954:	4b02      	ldr	r3, [pc, #8]	; (8025960 <malloc+0xc>)
 8025956:	4601      	mov	r1, r0
 8025958:	6818      	ldr	r0, [r3, #0]
 802595a:	f000 b87f 	b.w	8025a5c <_malloc_r>
 802595e:	bf00      	nop
 8025960:	20025898 	.word	0x20025898

08025964 <free>:
 8025964:	4b02      	ldr	r3, [pc, #8]	; (8025970 <free+0xc>)
 8025966:	4601      	mov	r1, r0
 8025968:	6818      	ldr	r0, [r3, #0]
 802596a:	f000 b80b 	b.w	8025984 <_free_r>
 802596e:	bf00      	nop
 8025970:	20025898 	.word	0x20025898

08025974 <memset>:
 8025974:	4402      	add	r2, r0
 8025976:	4603      	mov	r3, r0
 8025978:	4293      	cmp	r3, r2
 802597a:	d100      	bne.n	802597e <memset+0xa>
 802597c:	4770      	bx	lr
 802597e:	f803 1b01 	strb.w	r1, [r3], #1
 8025982:	e7f9      	b.n	8025978 <memset+0x4>

08025984 <_free_r>:
 8025984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025986:	2900      	cmp	r1, #0
 8025988:	d043      	beq.n	8025a12 <_free_r+0x8e>
 802598a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802598e:	1f0c      	subs	r4, r1, #4
 8025990:	9001      	str	r0, [sp, #4]
 8025992:	2b00      	cmp	r3, #0
 8025994:	bfb8      	it	lt
 8025996:	18e4      	addlt	r4, r4, r3
 8025998:	f000 ff68 	bl	802686c <__malloc_lock>
 802599c:	4a1e      	ldr	r2, [pc, #120]	; (8025a18 <_free_r+0x94>)
 802599e:	9801      	ldr	r0, [sp, #4]
 80259a0:	6813      	ldr	r3, [r2, #0]
 80259a2:	b933      	cbnz	r3, 80259b2 <_free_r+0x2e>
 80259a4:	6063      	str	r3, [r4, #4]
 80259a6:	6014      	str	r4, [r2, #0]
 80259a8:	b003      	add	sp, #12
 80259aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80259ae:	f000 bf63 	b.w	8026878 <__malloc_unlock>
 80259b2:	42a3      	cmp	r3, r4
 80259b4:	d908      	bls.n	80259c8 <_free_r+0x44>
 80259b6:	6825      	ldr	r5, [r4, #0]
 80259b8:	1961      	adds	r1, r4, r5
 80259ba:	428b      	cmp	r3, r1
 80259bc:	bf01      	itttt	eq
 80259be:	6819      	ldreq	r1, [r3, #0]
 80259c0:	685b      	ldreq	r3, [r3, #4]
 80259c2:	1949      	addeq	r1, r1, r5
 80259c4:	6021      	streq	r1, [r4, #0]
 80259c6:	e7ed      	b.n	80259a4 <_free_r+0x20>
 80259c8:	461a      	mov	r2, r3
 80259ca:	685b      	ldr	r3, [r3, #4]
 80259cc:	b10b      	cbz	r3, 80259d2 <_free_r+0x4e>
 80259ce:	42a3      	cmp	r3, r4
 80259d0:	d9fa      	bls.n	80259c8 <_free_r+0x44>
 80259d2:	6811      	ldr	r1, [r2, #0]
 80259d4:	1855      	adds	r5, r2, r1
 80259d6:	42a5      	cmp	r5, r4
 80259d8:	d10b      	bne.n	80259f2 <_free_r+0x6e>
 80259da:	6824      	ldr	r4, [r4, #0]
 80259dc:	4421      	add	r1, r4
 80259de:	1854      	adds	r4, r2, r1
 80259e0:	6011      	str	r1, [r2, #0]
 80259e2:	42a3      	cmp	r3, r4
 80259e4:	d1e0      	bne.n	80259a8 <_free_r+0x24>
 80259e6:	681c      	ldr	r4, [r3, #0]
 80259e8:	685b      	ldr	r3, [r3, #4]
 80259ea:	4421      	add	r1, r4
 80259ec:	6053      	str	r3, [r2, #4]
 80259ee:	6011      	str	r1, [r2, #0]
 80259f0:	e7da      	b.n	80259a8 <_free_r+0x24>
 80259f2:	d902      	bls.n	80259fa <_free_r+0x76>
 80259f4:	230c      	movs	r3, #12
 80259f6:	6003      	str	r3, [r0, #0]
 80259f8:	e7d6      	b.n	80259a8 <_free_r+0x24>
 80259fa:	6825      	ldr	r5, [r4, #0]
 80259fc:	1961      	adds	r1, r4, r5
 80259fe:	428b      	cmp	r3, r1
 8025a00:	bf02      	ittt	eq
 8025a02:	6819      	ldreq	r1, [r3, #0]
 8025a04:	685b      	ldreq	r3, [r3, #4]
 8025a06:	1949      	addeq	r1, r1, r5
 8025a08:	6063      	str	r3, [r4, #4]
 8025a0a:	bf08      	it	eq
 8025a0c:	6021      	streq	r1, [r4, #0]
 8025a0e:	6054      	str	r4, [r2, #4]
 8025a10:	e7ca      	b.n	80259a8 <_free_r+0x24>
 8025a12:	b003      	add	sp, #12
 8025a14:	bd30      	pop	{r4, r5, pc}
 8025a16:	bf00      	nop
 8025a18:	2004e21c 	.word	0x2004e21c

08025a1c <sbrk_aligned>:
 8025a1c:	b570      	push	{r4, r5, r6, lr}
 8025a1e:	4e0e      	ldr	r6, [pc, #56]	; (8025a58 <sbrk_aligned+0x3c>)
 8025a20:	460c      	mov	r4, r1
 8025a22:	4605      	mov	r5, r0
 8025a24:	6831      	ldr	r1, [r6, #0]
 8025a26:	b911      	cbnz	r1, 8025a2e <sbrk_aligned+0x12>
 8025a28:	f000 fb7c 	bl	8026124 <_sbrk_r>
 8025a2c:	6030      	str	r0, [r6, #0]
 8025a2e:	4621      	mov	r1, r4
 8025a30:	4628      	mov	r0, r5
 8025a32:	f000 fb77 	bl	8026124 <_sbrk_r>
 8025a36:	1c43      	adds	r3, r0, #1
 8025a38:	d00a      	beq.n	8025a50 <sbrk_aligned+0x34>
 8025a3a:	1cc4      	adds	r4, r0, #3
 8025a3c:	f024 0403 	bic.w	r4, r4, #3
 8025a40:	42a0      	cmp	r0, r4
 8025a42:	d007      	beq.n	8025a54 <sbrk_aligned+0x38>
 8025a44:	1a21      	subs	r1, r4, r0
 8025a46:	4628      	mov	r0, r5
 8025a48:	f000 fb6c 	bl	8026124 <_sbrk_r>
 8025a4c:	3001      	adds	r0, #1
 8025a4e:	d101      	bne.n	8025a54 <sbrk_aligned+0x38>
 8025a50:	f04f 34ff 	mov.w	r4, #4294967295
 8025a54:	4620      	mov	r0, r4
 8025a56:	bd70      	pop	{r4, r5, r6, pc}
 8025a58:	2004e220 	.word	0x2004e220

08025a5c <_malloc_r>:
 8025a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a60:	1ccd      	adds	r5, r1, #3
 8025a62:	4607      	mov	r7, r0
 8025a64:	f025 0503 	bic.w	r5, r5, #3
 8025a68:	3508      	adds	r5, #8
 8025a6a:	2d0c      	cmp	r5, #12
 8025a6c:	bf38      	it	cc
 8025a6e:	250c      	movcc	r5, #12
 8025a70:	2d00      	cmp	r5, #0
 8025a72:	db01      	blt.n	8025a78 <_malloc_r+0x1c>
 8025a74:	42a9      	cmp	r1, r5
 8025a76:	d905      	bls.n	8025a84 <_malloc_r+0x28>
 8025a78:	230c      	movs	r3, #12
 8025a7a:	2600      	movs	r6, #0
 8025a7c:	603b      	str	r3, [r7, #0]
 8025a7e:	4630      	mov	r0, r6
 8025a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a84:	4e2e      	ldr	r6, [pc, #184]	; (8025b40 <_malloc_r+0xe4>)
 8025a86:	f000 fef1 	bl	802686c <__malloc_lock>
 8025a8a:	6833      	ldr	r3, [r6, #0]
 8025a8c:	461c      	mov	r4, r3
 8025a8e:	bb34      	cbnz	r4, 8025ade <_malloc_r+0x82>
 8025a90:	4629      	mov	r1, r5
 8025a92:	4638      	mov	r0, r7
 8025a94:	f7ff ffc2 	bl	8025a1c <sbrk_aligned>
 8025a98:	1c43      	adds	r3, r0, #1
 8025a9a:	4604      	mov	r4, r0
 8025a9c:	d14d      	bne.n	8025b3a <_malloc_r+0xde>
 8025a9e:	6834      	ldr	r4, [r6, #0]
 8025aa0:	4626      	mov	r6, r4
 8025aa2:	2e00      	cmp	r6, #0
 8025aa4:	d140      	bne.n	8025b28 <_malloc_r+0xcc>
 8025aa6:	6823      	ldr	r3, [r4, #0]
 8025aa8:	4631      	mov	r1, r6
 8025aaa:	4638      	mov	r0, r7
 8025aac:	eb04 0803 	add.w	r8, r4, r3
 8025ab0:	f000 fb38 	bl	8026124 <_sbrk_r>
 8025ab4:	4580      	cmp	r8, r0
 8025ab6:	d13a      	bne.n	8025b2e <_malloc_r+0xd2>
 8025ab8:	6821      	ldr	r1, [r4, #0]
 8025aba:	3503      	adds	r5, #3
 8025abc:	4638      	mov	r0, r7
 8025abe:	1a6d      	subs	r5, r5, r1
 8025ac0:	f025 0503 	bic.w	r5, r5, #3
 8025ac4:	3508      	adds	r5, #8
 8025ac6:	2d0c      	cmp	r5, #12
 8025ac8:	bf38      	it	cc
 8025aca:	250c      	movcc	r5, #12
 8025acc:	4629      	mov	r1, r5
 8025ace:	f7ff ffa5 	bl	8025a1c <sbrk_aligned>
 8025ad2:	3001      	adds	r0, #1
 8025ad4:	d02b      	beq.n	8025b2e <_malloc_r+0xd2>
 8025ad6:	6823      	ldr	r3, [r4, #0]
 8025ad8:	442b      	add	r3, r5
 8025ada:	6023      	str	r3, [r4, #0]
 8025adc:	e00e      	b.n	8025afc <_malloc_r+0xa0>
 8025ade:	6822      	ldr	r2, [r4, #0]
 8025ae0:	1b52      	subs	r2, r2, r5
 8025ae2:	d41e      	bmi.n	8025b22 <_malloc_r+0xc6>
 8025ae4:	2a0b      	cmp	r2, #11
 8025ae6:	d916      	bls.n	8025b16 <_malloc_r+0xba>
 8025ae8:	1961      	adds	r1, r4, r5
 8025aea:	42a3      	cmp	r3, r4
 8025aec:	6025      	str	r5, [r4, #0]
 8025aee:	bf18      	it	ne
 8025af0:	6059      	strne	r1, [r3, #4]
 8025af2:	6863      	ldr	r3, [r4, #4]
 8025af4:	bf08      	it	eq
 8025af6:	6031      	streq	r1, [r6, #0]
 8025af8:	5162      	str	r2, [r4, r5]
 8025afa:	604b      	str	r3, [r1, #4]
 8025afc:	f104 060b 	add.w	r6, r4, #11
 8025b00:	4638      	mov	r0, r7
 8025b02:	f000 feb9 	bl	8026878 <__malloc_unlock>
 8025b06:	1d23      	adds	r3, r4, #4
 8025b08:	f026 0607 	bic.w	r6, r6, #7
 8025b0c:	1af2      	subs	r2, r6, r3
 8025b0e:	d0b6      	beq.n	8025a7e <_malloc_r+0x22>
 8025b10:	1b9b      	subs	r3, r3, r6
 8025b12:	50a3      	str	r3, [r4, r2]
 8025b14:	e7b3      	b.n	8025a7e <_malloc_r+0x22>
 8025b16:	6862      	ldr	r2, [r4, #4]
 8025b18:	42a3      	cmp	r3, r4
 8025b1a:	bf0c      	ite	eq
 8025b1c:	6032      	streq	r2, [r6, #0]
 8025b1e:	605a      	strne	r2, [r3, #4]
 8025b20:	e7ec      	b.n	8025afc <_malloc_r+0xa0>
 8025b22:	4623      	mov	r3, r4
 8025b24:	6864      	ldr	r4, [r4, #4]
 8025b26:	e7b2      	b.n	8025a8e <_malloc_r+0x32>
 8025b28:	4634      	mov	r4, r6
 8025b2a:	6876      	ldr	r6, [r6, #4]
 8025b2c:	e7b9      	b.n	8025aa2 <_malloc_r+0x46>
 8025b2e:	230c      	movs	r3, #12
 8025b30:	4638      	mov	r0, r7
 8025b32:	603b      	str	r3, [r7, #0]
 8025b34:	f000 fea0 	bl	8026878 <__malloc_unlock>
 8025b38:	e7a1      	b.n	8025a7e <_malloc_r+0x22>
 8025b3a:	6025      	str	r5, [r4, #0]
 8025b3c:	e7de      	b.n	8025afc <_malloc_r+0xa0>
 8025b3e:	bf00      	nop
 8025b40:	2004e21c 	.word	0x2004e21c

08025b44 <__sfputc_r>:
 8025b44:	6893      	ldr	r3, [r2, #8]
 8025b46:	3b01      	subs	r3, #1
 8025b48:	2b00      	cmp	r3, #0
 8025b4a:	6093      	str	r3, [r2, #8]
 8025b4c:	b410      	push	{r4}
 8025b4e:	da08      	bge.n	8025b62 <__sfputc_r+0x1e>
 8025b50:	6994      	ldr	r4, [r2, #24]
 8025b52:	42a3      	cmp	r3, r4
 8025b54:	db01      	blt.n	8025b5a <__sfputc_r+0x16>
 8025b56:	290a      	cmp	r1, #10
 8025b58:	d103      	bne.n	8025b62 <__sfputc_r+0x1e>
 8025b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025b5e:	f000 bb35 	b.w	80261cc <__swbuf_r>
 8025b62:	6813      	ldr	r3, [r2, #0]
 8025b64:	1c58      	adds	r0, r3, #1
 8025b66:	6010      	str	r0, [r2, #0]
 8025b68:	4608      	mov	r0, r1
 8025b6a:	7019      	strb	r1, [r3, #0]
 8025b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025b70:	4770      	bx	lr

08025b72 <__sfputs_r>:
 8025b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b74:	4606      	mov	r6, r0
 8025b76:	460f      	mov	r7, r1
 8025b78:	4614      	mov	r4, r2
 8025b7a:	18d5      	adds	r5, r2, r3
 8025b7c:	42ac      	cmp	r4, r5
 8025b7e:	d101      	bne.n	8025b84 <__sfputs_r+0x12>
 8025b80:	2000      	movs	r0, #0
 8025b82:	e007      	b.n	8025b94 <__sfputs_r+0x22>
 8025b84:	463a      	mov	r2, r7
 8025b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025b8a:	4630      	mov	r0, r6
 8025b8c:	f7ff ffda 	bl	8025b44 <__sfputc_r>
 8025b90:	1c43      	adds	r3, r0, #1
 8025b92:	d1f3      	bne.n	8025b7c <__sfputs_r+0xa>
 8025b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025b98 <_vfiprintf_r>:
 8025b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b9c:	460d      	mov	r5, r1
 8025b9e:	b09d      	sub	sp, #116	; 0x74
 8025ba0:	4614      	mov	r4, r2
 8025ba2:	4698      	mov	r8, r3
 8025ba4:	4606      	mov	r6, r0
 8025ba6:	b118      	cbz	r0, 8025bb0 <_vfiprintf_r+0x18>
 8025ba8:	6983      	ldr	r3, [r0, #24]
 8025baa:	b90b      	cbnz	r3, 8025bb0 <_vfiprintf_r+0x18>
 8025bac:	f000 fd4a 	bl	8026644 <__sinit>
 8025bb0:	4b89      	ldr	r3, [pc, #548]	; (8025dd8 <_vfiprintf_r+0x240>)
 8025bb2:	429d      	cmp	r5, r3
 8025bb4:	d11b      	bne.n	8025bee <_vfiprintf_r+0x56>
 8025bb6:	6875      	ldr	r5, [r6, #4]
 8025bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025bba:	07d9      	lsls	r1, r3, #31
 8025bbc:	d405      	bmi.n	8025bca <_vfiprintf_r+0x32>
 8025bbe:	89ab      	ldrh	r3, [r5, #12]
 8025bc0:	059a      	lsls	r2, r3, #22
 8025bc2:	d402      	bmi.n	8025bca <_vfiprintf_r+0x32>
 8025bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025bc6:	f000 fddb 	bl	8026780 <__retarget_lock_acquire_recursive>
 8025bca:	89ab      	ldrh	r3, [r5, #12]
 8025bcc:	071b      	lsls	r3, r3, #28
 8025bce:	d501      	bpl.n	8025bd4 <_vfiprintf_r+0x3c>
 8025bd0:	692b      	ldr	r3, [r5, #16]
 8025bd2:	b9eb      	cbnz	r3, 8025c10 <_vfiprintf_r+0x78>
 8025bd4:	4629      	mov	r1, r5
 8025bd6:	4630      	mov	r0, r6
 8025bd8:	f000 fb4a 	bl	8026270 <__swsetup_r>
 8025bdc:	b1c0      	cbz	r0, 8025c10 <_vfiprintf_r+0x78>
 8025bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025be0:	07dc      	lsls	r4, r3, #31
 8025be2:	d50e      	bpl.n	8025c02 <_vfiprintf_r+0x6a>
 8025be4:	f04f 30ff 	mov.w	r0, #4294967295
 8025be8:	b01d      	add	sp, #116	; 0x74
 8025bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bee:	4b7b      	ldr	r3, [pc, #492]	; (8025ddc <_vfiprintf_r+0x244>)
 8025bf0:	429d      	cmp	r5, r3
 8025bf2:	d101      	bne.n	8025bf8 <_vfiprintf_r+0x60>
 8025bf4:	68b5      	ldr	r5, [r6, #8]
 8025bf6:	e7df      	b.n	8025bb8 <_vfiprintf_r+0x20>
 8025bf8:	4b79      	ldr	r3, [pc, #484]	; (8025de0 <_vfiprintf_r+0x248>)
 8025bfa:	429d      	cmp	r5, r3
 8025bfc:	bf08      	it	eq
 8025bfe:	68f5      	ldreq	r5, [r6, #12]
 8025c00:	e7da      	b.n	8025bb8 <_vfiprintf_r+0x20>
 8025c02:	89ab      	ldrh	r3, [r5, #12]
 8025c04:	0598      	lsls	r0, r3, #22
 8025c06:	d4ed      	bmi.n	8025be4 <_vfiprintf_r+0x4c>
 8025c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025c0a:	f000 fdbb 	bl	8026784 <__retarget_lock_release_recursive>
 8025c0e:	e7e9      	b.n	8025be4 <_vfiprintf_r+0x4c>
 8025c10:	2300      	movs	r3, #0
 8025c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8025c16:	f04f 0901 	mov.w	r9, #1
 8025c1a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8025de4 <_vfiprintf_r+0x24c>
 8025c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8025c20:	2320      	movs	r3, #32
 8025c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025c26:	2330      	movs	r3, #48	; 0x30
 8025c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025c2c:	4623      	mov	r3, r4
 8025c2e:	469a      	mov	sl, r3
 8025c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025c34:	b10a      	cbz	r2, 8025c3a <_vfiprintf_r+0xa2>
 8025c36:	2a25      	cmp	r2, #37	; 0x25
 8025c38:	d1f9      	bne.n	8025c2e <_vfiprintf_r+0x96>
 8025c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8025c3e:	d00b      	beq.n	8025c58 <_vfiprintf_r+0xc0>
 8025c40:	465b      	mov	r3, fp
 8025c42:	4622      	mov	r2, r4
 8025c44:	4629      	mov	r1, r5
 8025c46:	4630      	mov	r0, r6
 8025c48:	f7ff ff93 	bl	8025b72 <__sfputs_r>
 8025c4c:	3001      	adds	r0, #1
 8025c4e:	f000 80aa 	beq.w	8025da6 <_vfiprintf_r+0x20e>
 8025c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025c54:	445a      	add	r2, fp
 8025c56:	9209      	str	r2, [sp, #36]	; 0x24
 8025c58:	f89a 3000 	ldrb.w	r3, [sl]
 8025c5c:	2b00      	cmp	r3, #0
 8025c5e:	f000 80a2 	beq.w	8025da6 <_vfiprintf_r+0x20e>
 8025c62:	2300      	movs	r3, #0
 8025c64:	f04f 32ff 	mov.w	r2, #4294967295
 8025c68:	f10a 0a01 	add.w	sl, sl, #1
 8025c6c:	9304      	str	r3, [sp, #16]
 8025c6e:	9307      	str	r3, [sp, #28]
 8025c70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025c74:	931a      	str	r3, [sp, #104]	; 0x68
 8025c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025c7a:	4654      	mov	r4, sl
 8025c7c:	2205      	movs	r2, #5
 8025c7e:	4859      	ldr	r0, [pc, #356]	; (8025de4 <_vfiprintf_r+0x24c>)
 8025c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025c84:	f000 fde4 	bl	8026850 <memchr>
 8025c88:	9a04      	ldr	r2, [sp, #16]
 8025c8a:	b9d8      	cbnz	r0, 8025cc4 <_vfiprintf_r+0x12c>
 8025c8c:	06d1      	lsls	r1, r2, #27
 8025c8e:	bf44      	itt	mi
 8025c90:	2320      	movmi	r3, #32
 8025c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025c96:	0713      	lsls	r3, r2, #28
 8025c98:	bf44      	itt	mi
 8025c9a:	232b      	movmi	r3, #43	; 0x2b
 8025c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8025ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8025ca6:	d015      	beq.n	8025cd4 <_vfiprintf_r+0x13c>
 8025ca8:	9a07      	ldr	r2, [sp, #28]
 8025caa:	4654      	mov	r4, sl
 8025cac:	2000      	movs	r0, #0
 8025cae:	f04f 0c0a 	mov.w	ip, #10
 8025cb2:	4621      	mov	r1, r4
 8025cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025cb8:	3b30      	subs	r3, #48	; 0x30
 8025cba:	2b09      	cmp	r3, #9
 8025cbc:	d94e      	bls.n	8025d5c <_vfiprintf_r+0x1c4>
 8025cbe:	b1b0      	cbz	r0, 8025cee <_vfiprintf_r+0x156>
 8025cc0:	9207      	str	r2, [sp, #28]
 8025cc2:	e014      	b.n	8025cee <_vfiprintf_r+0x156>
 8025cc4:	eba0 0308 	sub.w	r3, r0, r8
 8025cc8:	46a2      	mov	sl, r4
 8025cca:	fa09 f303 	lsl.w	r3, r9, r3
 8025cce:	4313      	orrs	r3, r2
 8025cd0:	9304      	str	r3, [sp, #16]
 8025cd2:	e7d2      	b.n	8025c7a <_vfiprintf_r+0xe2>
 8025cd4:	9b03      	ldr	r3, [sp, #12]
 8025cd6:	1d19      	adds	r1, r3, #4
 8025cd8:	681b      	ldr	r3, [r3, #0]
 8025cda:	2b00      	cmp	r3, #0
 8025cdc:	9103      	str	r1, [sp, #12]
 8025cde:	bfbb      	ittet	lt
 8025ce0:	425b      	neglt	r3, r3
 8025ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8025ce6:	9307      	strge	r3, [sp, #28]
 8025ce8:	9307      	strlt	r3, [sp, #28]
 8025cea:	bfb8      	it	lt
 8025cec:	9204      	strlt	r2, [sp, #16]
 8025cee:	7823      	ldrb	r3, [r4, #0]
 8025cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8025cf2:	d10c      	bne.n	8025d0e <_vfiprintf_r+0x176>
 8025cf4:	7863      	ldrb	r3, [r4, #1]
 8025cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8025cf8:	d135      	bne.n	8025d66 <_vfiprintf_r+0x1ce>
 8025cfa:	9b03      	ldr	r3, [sp, #12]
 8025cfc:	3402      	adds	r4, #2
 8025cfe:	1d1a      	adds	r2, r3, #4
 8025d00:	681b      	ldr	r3, [r3, #0]
 8025d02:	2b00      	cmp	r3, #0
 8025d04:	9203      	str	r2, [sp, #12]
 8025d06:	bfb8      	it	lt
 8025d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8025d0c:	9305      	str	r3, [sp, #20]
 8025d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8025df4 <_vfiprintf_r+0x25c>
 8025d12:	2203      	movs	r2, #3
 8025d14:	7821      	ldrb	r1, [r4, #0]
 8025d16:	4650      	mov	r0, sl
 8025d18:	f000 fd9a 	bl	8026850 <memchr>
 8025d1c:	b140      	cbz	r0, 8025d30 <_vfiprintf_r+0x198>
 8025d1e:	2340      	movs	r3, #64	; 0x40
 8025d20:	eba0 000a 	sub.w	r0, r0, sl
 8025d24:	3401      	adds	r4, #1
 8025d26:	fa03 f000 	lsl.w	r0, r3, r0
 8025d2a:	9b04      	ldr	r3, [sp, #16]
 8025d2c:	4303      	orrs	r3, r0
 8025d2e:	9304      	str	r3, [sp, #16]
 8025d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025d34:	2206      	movs	r2, #6
 8025d36:	482c      	ldr	r0, [pc, #176]	; (8025de8 <_vfiprintf_r+0x250>)
 8025d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025d3c:	f000 fd88 	bl	8026850 <memchr>
 8025d40:	2800      	cmp	r0, #0
 8025d42:	d03f      	beq.n	8025dc4 <_vfiprintf_r+0x22c>
 8025d44:	4b29      	ldr	r3, [pc, #164]	; (8025dec <_vfiprintf_r+0x254>)
 8025d46:	bb1b      	cbnz	r3, 8025d90 <_vfiprintf_r+0x1f8>
 8025d48:	9b03      	ldr	r3, [sp, #12]
 8025d4a:	3307      	adds	r3, #7
 8025d4c:	f023 0307 	bic.w	r3, r3, #7
 8025d50:	3308      	adds	r3, #8
 8025d52:	9303      	str	r3, [sp, #12]
 8025d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d56:	443b      	add	r3, r7
 8025d58:	9309      	str	r3, [sp, #36]	; 0x24
 8025d5a:	e767      	b.n	8025c2c <_vfiprintf_r+0x94>
 8025d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8025d60:	460c      	mov	r4, r1
 8025d62:	2001      	movs	r0, #1
 8025d64:	e7a5      	b.n	8025cb2 <_vfiprintf_r+0x11a>
 8025d66:	2300      	movs	r3, #0
 8025d68:	3401      	adds	r4, #1
 8025d6a:	f04f 0c0a 	mov.w	ip, #10
 8025d6e:	4619      	mov	r1, r3
 8025d70:	9305      	str	r3, [sp, #20]
 8025d72:	4620      	mov	r0, r4
 8025d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025d78:	3a30      	subs	r2, #48	; 0x30
 8025d7a:	2a09      	cmp	r2, #9
 8025d7c:	d903      	bls.n	8025d86 <_vfiprintf_r+0x1ee>
 8025d7e:	2b00      	cmp	r3, #0
 8025d80:	d0c5      	beq.n	8025d0e <_vfiprintf_r+0x176>
 8025d82:	9105      	str	r1, [sp, #20]
 8025d84:	e7c3      	b.n	8025d0e <_vfiprintf_r+0x176>
 8025d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8025d8a:	4604      	mov	r4, r0
 8025d8c:	2301      	movs	r3, #1
 8025d8e:	e7f0      	b.n	8025d72 <_vfiprintf_r+0x1da>
 8025d90:	ab03      	add	r3, sp, #12
 8025d92:	462a      	mov	r2, r5
 8025d94:	a904      	add	r1, sp, #16
 8025d96:	4630      	mov	r0, r6
 8025d98:	9300      	str	r3, [sp, #0]
 8025d9a:	4b15      	ldr	r3, [pc, #84]	; (8025df0 <_vfiprintf_r+0x258>)
 8025d9c:	e000      	b.n	8025da0 <_vfiprintf_r+0x208>
 8025d9e:	bf00      	nop
 8025da0:	4607      	mov	r7, r0
 8025da2:	1c78      	adds	r0, r7, #1
 8025da4:	d1d6      	bne.n	8025d54 <_vfiprintf_r+0x1bc>
 8025da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025da8:	07d9      	lsls	r1, r3, #31
 8025daa:	d405      	bmi.n	8025db8 <_vfiprintf_r+0x220>
 8025dac:	89ab      	ldrh	r3, [r5, #12]
 8025dae:	059a      	lsls	r2, r3, #22
 8025db0:	d402      	bmi.n	8025db8 <_vfiprintf_r+0x220>
 8025db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025db4:	f000 fce6 	bl	8026784 <__retarget_lock_release_recursive>
 8025db8:	89ab      	ldrh	r3, [r5, #12]
 8025dba:	065b      	lsls	r3, r3, #25
 8025dbc:	f53f af12 	bmi.w	8025be4 <_vfiprintf_r+0x4c>
 8025dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025dc2:	e711      	b.n	8025be8 <_vfiprintf_r+0x50>
 8025dc4:	ab03      	add	r3, sp, #12
 8025dc6:	462a      	mov	r2, r5
 8025dc8:	a904      	add	r1, sp, #16
 8025dca:	4630      	mov	r0, r6
 8025dcc:	9300      	str	r3, [sp, #0]
 8025dce:	4b08      	ldr	r3, [pc, #32]	; (8025df0 <_vfiprintf_r+0x258>)
 8025dd0:	f000 f882 	bl	8025ed8 <_printf_i>
 8025dd4:	e7e4      	b.n	8025da0 <_vfiprintf_r+0x208>
 8025dd6:	bf00      	nop
 8025dd8:	08028eb0 	.word	0x08028eb0
 8025ddc:	08028ed0 	.word	0x08028ed0
 8025de0:	08028e90 	.word	0x08028e90
 8025de4:	08028e58 	.word	0x08028e58
 8025de8:	08028e62 	.word	0x08028e62
 8025dec:	00000000 	.word	0x00000000
 8025df0:	08025b73 	.word	0x08025b73
 8025df4:	08028e5e 	.word	0x08028e5e

08025df8 <_printf_common>:
 8025df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025dfc:	4616      	mov	r6, r2
 8025dfe:	4699      	mov	r9, r3
 8025e00:	688a      	ldr	r2, [r1, #8]
 8025e02:	4607      	mov	r7, r0
 8025e04:	690b      	ldr	r3, [r1, #16]
 8025e06:	460c      	mov	r4, r1
 8025e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025e0c:	4293      	cmp	r3, r2
 8025e0e:	bfb8      	it	lt
 8025e10:	4613      	movlt	r3, r2
 8025e12:	6033      	str	r3, [r6, #0]
 8025e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025e18:	b10a      	cbz	r2, 8025e1e <_printf_common+0x26>
 8025e1a:	3301      	adds	r3, #1
 8025e1c:	6033      	str	r3, [r6, #0]
 8025e1e:	6823      	ldr	r3, [r4, #0]
 8025e20:	0699      	lsls	r1, r3, #26
 8025e22:	bf42      	ittt	mi
 8025e24:	6833      	ldrmi	r3, [r6, #0]
 8025e26:	3302      	addmi	r3, #2
 8025e28:	6033      	strmi	r3, [r6, #0]
 8025e2a:	6825      	ldr	r5, [r4, #0]
 8025e2c:	f015 0506 	ands.w	r5, r5, #6
 8025e30:	d106      	bne.n	8025e40 <_printf_common+0x48>
 8025e32:	f104 0a19 	add.w	sl, r4, #25
 8025e36:	68e3      	ldr	r3, [r4, #12]
 8025e38:	6832      	ldr	r2, [r6, #0]
 8025e3a:	1a9b      	subs	r3, r3, r2
 8025e3c:	42ab      	cmp	r3, r5
 8025e3e:	dc29      	bgt.n	8025e94 <_printf_common+0x9c>
 8025e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025e44:	1e13      	subs	r3, r2, #0
 8025e46:	6822      	ldr	r2, [r4, #0]
 8025e48:	bf18      	it	ne
 8025e4a:	2301      	movne	r3, #1
 8025e4c:	0692      	lsls	r2, r2, #26
 8025e4e:	d42e      	bmi.n	8025eae <_printf_common+0xb6>
 8025e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025e54:	4649      	mov	r1, r9
 8025e56:	4638      	mov	r0, r7
 8025e58:	47c0      	blx	r8
 8025e5a:	3001      	adds	r0, #1
 8025e5c:	d021      	beq.n	8025ea2 <_printf_common+0xaa>
 8025e5e:	6823      	ldr	r3, [r4, #0]
 8025e60:	341a      	adds	r4, #26
 8025e62:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8025e66:	f003 0306 	and.w	r3, r3, #6
 8025e6a:	6832      	ldr	r2, [r6, #0]
 8025e6c:	2600      	movs	r6, #0
 8025e6e:	2b04      	cmp	r3, #4
 8025e70:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8025e74:	bf08      	it	eq
 8025e76:	1aad      	subeq	r5, r5, r2
 8025e78:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8025e7c:	bf14      	ite	ne
 8025e7e:	2500      	movne	r5, #0
 8025e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025e84:	4293      	cmp	r3, r2
 8025e86:	bfc4      	itt	gt
 8025e88:	1a9b      	subgt	r3, r3, r2
 8025e8a:	18ed      	addgt	r5, r5, r3
 8025e8c:	42b5      	cmp	r5, r6
 8025e8e:	d11a      	bne.n	8025ec6 <_printf_common+0xce>
 8025e90:	2000      	movs	r0, #0
 8025e92:	e008      	b.n	8025ea6 <_printf_common+0xae>
 8025e94:	2301      	movs	r3, #1
 8025e96:	4652      	mov	r2, sl
 8025e98:	4649      	mov	r1, r9
 8025e9a:	4638      	mov	r0, r7
 8025e9c:	47c0      	blx	r8
 8025e9e:	3001      	adds	r0, #1
 8025ea0:	d103      	bne.n	8025eaa <_printf_common+0xb2>
 8025ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8025ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025eaa:	3501      	adds	r5, #1
 8025eac:	e7c3      	b.n	8025e36 <_printf_common+0x3e>
 8025eae:	18e1      	adds	r1, r4, r3
 8025eb0:	1c5a      	adds	r2, r3, #1
 8025eb2:	2030      	movs	r0, #48	; 0x30
 8025eb4:	3302      	adds	r3, #2
 8025eb6:	4422      	add	r2, r4
 8025eb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025ec4:	e7c4      	b.n	8025e50 <_printf_common+0x58>
 8025ec6:	2301      	movs	r3, #1
 8025ec8:	4622      	mov	r2, r4
 8025eca:	4649      	mov	r1, r9
 8025ecc:	4638      	mov	r0, r7
 8025ece:	47c0      	blx	r8
 8025ed0:	3001      	adds	r0, #1
 8025ed2:	d0e6      	beq.n	8025ea2 <_printf_common+0xaa>
 8025ed4:	3601      	adds	r6, #1
 8025ed6:	e7d9      	b.n	8025e8c <_printf_common+0x94>

08025ed8 <_printf_i>:
 8025ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025edc:	7e0f      	ldrb	r7, [r1, #24]
 8025ede:	4691      	mov	r9, r2
 8025ee0:	4680      	mov	r8, r0
 8025ee2:	460c      	mov	r4, r1
 8025ee4:	2f78      	cmp	r7, #120	; 0x78
 8025ee6:	469a      	mov	sl, r3
 8025ee8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025eee:	d807      	bhi.n	8025f00 <_printf_i+0x28>
 8025ef0:	2f62      	cmp	r7, #98	; 0x62
 8025ef2:	d80a      	bhi.n	8025f0a <_printf_i+0x32>
 8025ef4:	2f00      	cmp	r7, #0
 8025ef6:	f000 80d8 	beq.w	80260aa <_printf_i+0x1d2>
 8025efa:	2f58      	cmp	r7, #88	; 0x58
 8025efc:	f000 80a3 	beq.w	8026046 <_printf_i+0x16e>
 8025f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025f08:	e03a      	b.n	8025f80 <_printf_i+0xa8>
 8025f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025f0e:	2b15      	cmp	r3, #21
 8025f10:	d8f6      	bhi.n	8025f00 <_printf_i+0x28>
 8025f12:	a101      	add	r1, pc, #4	; (adr r1, 8025f18 <_printf_i+0x40>)
 8025f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025f18:	08025f71 	.word	0x08025f71
 8025f1c:	08025f85 	.word	0x08025f85
 8025f20:	08025f01 	.word	0x08025f01
 8025f24:	08025f01 	.word	0x08025f01
 8025f28:	08025f01 	.word	0x08025f01
 8025f2c:	08025f01 	.word	0x08025f01
 8025f30:	08025f85 	.word	0x08025f85
 8025f34:	08025f01 	.word	0x08025f01
 8025f38:	08025f01 	.word	0x08025f01
 8025f3c:	08025f01 	.word	0x08025f01
 8025f40:	08025f01 	.word	0x08025f01
 8025f44:	08026091 	.word	0x08026091
 8025f48:	08025fb5 	.word	0x08025fb5
 8025f4c:	08026073 	.word	0x08026073
 8025f50:	08025f01 	.word	0x08025f01
 8025f54:	08025f01 	.word	0x08025f01
 8025f58:	080260b3 	.word	0x080260b3
 8025f5c:	08025f01 	.word	0x08025f01
 8025f60:	08025fb5 	.word	0x08025fb5
 8025f64:	08025f01 	.word	0x08025f01
 8025f68:	08025f01 	.word	0x08025f01
 8025f6c:	0802607b 	.word	0x0802607b
 8025f70:	682b      	ldr	r3, [r5, #0]
 8025f72:	1d1a      	adds	r2, r3, #4
 8025f74:	681b      	ldr	r3, [r3, #0]
 8025f76:	602a      	str	r2, [r5, #0]
 8025f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025f80:	2301      	movs	r3, #1
 8025f82:	e0a3      	b.n	80260cc <_printf_i+0x1f4>
 8025f84:	6820      	ldr	r0, [r4, #0]
 8025f86:	6829      	ldr	r1, [r5, #0]
 8025f88:	0606      	lsls	r6, r0, #24
 8025f8a:	f101 0304 	add.w	r3, r1, #4
 8025f8e:	d50a      	bpl.n	8025fa6 <_printf_i+0xce>
 8025f90:	680e      	ldr	r6, [r1, #0]
 8025f92:	602b      	str	r3, [r5, #0]
 8025f94:	2e00      	cmp	r6, #0
 8025f96:	da03      	bge.n	8025fa0 <_printf_i+0xc8>
 8025f98:	232d      	movs	r3, #45	; 0x2d
 8025f9a:	4276      	negs	r6, r6
 8025f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025fa0:	485e      	ldr	r0, [pc, #376]	; (802611c <_printf_i+0x244>)
 8025fa2:	230a      	movs	r3, #10
 8025fa4:	e019      	b.n	8025fda <_printf_i+0x102>
 8025fa6:	680e      	ldr	r6, [r1, #0]
 8025fa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025fac:	602b      	str	r3, [r5, #0]
 8025fae:	bf18      	it	ne
 8025fb0:	b236      	sxthne	r6, r6
 8025fb2:	e7ef      	b.n	8025f94 <_printf_i+0xbc>
 8025fb4:	682b      	ldr	r3, [r5, #0]
 8025fb6:	6820      	ldr	r0, [r4, #0]
 8025fb8:	1d19      	adds	r1, r3, #4
 8025fba:	6029      	str	r1, [r5, #0]
 8025fbc:	0601      	lsls	r1, r0, #24
 8025fbe:	d501      	bpl.n	8025fc4 <_printf_i+0xec>
 8025fc0:	681e      	ldr	r6, [r3, #0]
 8025fc2:	e002      	b.n	8025fca <_printf_i+0xf2>
 8025fc4:	0646      	lsls	r6, r0, #25
 8025fc6:	d5fb      	bpl.n	8025fc0 <_printf_i+0xe8>
 8025fc8:	881e      	ldrh	r6, [r3, #0]
 8025fca:	2f6f      	cmp	r7, #111	; 0x6f
 8025fcc:	4853      	ldr	r0, [pc, #332]	; (802611c <_printf_i+0x244>)
 8025fce:	bf0c      	ite	eq
 8025fd0:	2308      	moveq	r3, #8
 8025fd2:	230a      	movne	r3, #10
 8025fd4:	2100      	movs	r1, #0
 8025fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025fda:	6865      	ldr	r5, [r4, #4]
 8025fdc:	2d00      	cmp	r5, #0
 8025fde:	60a5      	str	r5, [r4, #8]
 8025fe0:	bfa2      	ittt	ge
 8025fe2:	6821      	ldrge	r1, [r4, #0]
 8025fe4:	f021 0104 	bicge.w	r1, r1, #4
 8025fe8:	6021      	strge	r1, [r4, #0]
 8025fea:	b90e      	cbnz	r6, 8025ff0 <_printf_i+0x118>
 8025fec:	2d00      	cmp	r5, #0
 8025fee:	d04d      	beq.n	802608c <_printf_i+0x1b4>
 8025ff0:	4615      	mov	r5, r2
 8025ff2:	fbb6 f1f3 	udiv	r1, r6, r3
 8025ff6:	fb03 6711 	mls	r7, r3, r1, r6
 8025ffa:	5dc7      	ldrb	r7, [r0, r7]
 8025ffc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026000:	4637      	mov	r7, r6
 8026002:	460e      	mov	r6, r1
 8026004:	42bb      	cmp	r3, r7
 8026006:	d9f4      	bls.n	8025ff2 <_printf_i+0x11a>
 8026008:	2b08      	cmp	r3, #8
 802600a:	d10b      	bne.n	8026024 <_printf_i+0x14c>
 802600c:	6823      	ldr	r3, [r4, #0]
 802600e:	07de      	lsls	r6, r3, #31
 8026010:	d508      	bpl.n	8026024 <_printf_i+0x14c>
 8026012:	6923      	ldr	r3, [r4, #16]
 8026014:	6861      	ldr	r1, [r4, #4]
 8026016:	4299      	cmp	r1, r3
 8026018:	bfde      	ittt	le
 802601a:	2330      	movle	r3, #48	; 0x30
 802601c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026020:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026024:	1b52      	subs	r2, r2, r5
 8026026:	6122      	str	r2, [r4, #16]
 8026028:	464b      	mov	r3, r9
 802602a:	aa03      	add	r2, sp, #12
 802602c:	4621      	mov	r1, r4
 802602e:	4640      	mov	r0, r8
 8026030:	f8cd a000 	str.w	sl, [sp]
 8026034:	f7ff fee0 	bl	8025df8 <_printf_common>
 8026038:	3001      	adds	r0, #1
 802603a:	d14c      	bne.n	80260d6 <_printf_i+0x1fe>
 802603c:	f04f 30ff 	mov.w	r0, #4294967295
 8026040:	b004      	add	sp, #16
 8026042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026046:	4835      	ldr	r0, [pc, #212]	; (802611c <_printf_i+0x244>)
 8026048:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802604c:	6829      	ldr	r1, [r5, #0]
 802604e:	6823      	ldr	r3, [r4, #0]
 8026050:	f851 6b04 	ldr.w	r6, [r1], #4
 8026054:	6029      	str	r1, [r5, #0]
 8026056:	061d      	lsls	r5, r3, #24
 8026058:	d514      	bpl.n	8026084 <_printf_i+0x1ac>
 802605a:	07df      	lsls	r7, r3, #31
 802605c:	bf44      	itt	mi
 802605e:	f043 0320 	orrmi.w	r3, r3, #32
 8026062:	6023      	strmi	r3, [r4, #0]
 8026064:	b91e      	cbnz	r6, 802606e <_printf_i+0x196>
 8026066:	6823      	ldr	r3, [r4, #0]
 8026068:	f023 0320 	bic.w	r3, r3, #32
 802606c:	6023      	str	r3, [r4, #0]
 802606e:	2310      	movs	r3, #16
 8026070:	e7b0      	b.n	8025fd4 <_printf_i+0xfc>
 8026072:	6823      	ldr	r3, [r4, #0]
 8026074:	f043 0320 	orr.w	r3, r3, #32
 8026078:	6023      	str	r3, [r4, #0]
 802607a:	2378      	movs	r3, #120	; 0x78
 802607c:	4828      	ldr	r0, [pc, #160]	; (8026120 <_printf_i+0x248>)
 802607e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026082:	e7e3      	b.n	802604c <_printf_i+0x174>
 8026084:	0659      	lsls	r1, r3, #25
 8026086:	bf48      	it	mi
 8026088:	b2b6      	uxthmi	r6, r6
 802608a:	e7e6      	b.n	802605a <_printf_i+0x182>
 802608c:	4615      	mov	r5, r2
 802608e:	e7bb      	b.n	8026008 <_printf_i+0x130>
 8026090:	682b      	ldr	r3, [r5, #0]
 8026092:	6826      	ldr	r6, [r4, #0]
 8026094:	1d18      	adds	r0, r3, #4
 8026096:	6961      	ldr	r1, [r4, #20]
 8026098:	6028      	str	r0, [r5, #0]
 802609a:	0635      	lsls	r5, r6, #24
 802609c:	681b      	ldr	r3, [r3, #0]
 802609e:	d501      	bpl.n	80260a4 <_printf_i+0x1cc>
 80260a0:	6019      	str	r1, [r3, #0]
 80260a2:	e002      	b.n	80260aa <_printf_i+0x1d2>
 80260a4:	0670      	lsls	r0, r6, #25
 80260a6:	d5fb      	bpl.n	80260a0 <_printf_i+0x1c8>
 80260a8:	8019      	strh	r1, [r3, #0]
 80260aa:	2300      	movs	r3, #0
 80260ac:	4615      	mov	r5, r2
 80260ae:	6123      	str	r3, [r4, #16]
 80260b0:	e7ba      	b.n	8026028 <_printf_i+0x150>
 80260b2:	682b      	ldr	r3, [r5, #0]
 80260b4:	2100      	movs	r1, #0
 80260b6:	1d1a      	adds	r2, r3, #4
 80260b8:	602a      	str	r2, [r5, #0]
 80260ba:	681d      	ldr	r5, [r3, #0]
 80260bc:	6862      	ldr	r2, [r4, #4]
 80260be:	4628      	mov	r0, r5
 80260c0:	f000 fbc6 	bl	8026850 <memchr>
 80260c4:	b108      	cbz	r0, 80260ca <_printf_i+0x1f2>
 80260c6:	1b40      	subs	r0, r0, r5
 80260c8:	6060      	str	r0, [r4, #4]
 80260ca:	6863      	ldr	r3, [r4, #4]
 80260cc:	6123      	str	r3, [r4, #16]
 80260ce:	2300      	movs	r3, #0
 80260d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80260d4:	e7a8      	b.n	8026028 <_printf_i+0x150>
 80260d6:	6923      	ldr	r3, [r4, #16]
 80260d8:	462a      	mov	r2, r5
 80260da:	4649      	mov	r1, r9
 80260dc:	4640      	mov	r0, r8
 80260de:	47d0      	blx	sl
 80260e0:	3001      	adds	r0, #1
 80260e2:	d0ab      	beq.n	802603c <_printf_i+0x164>
 80260e4:	6823      	ldr	r3, [r4, #0]
 80260e6:	079b      	lsls	r3, r3, #30
 80260e8:	d413      	bmi.n	8026112 <_printf_i+0x23a>
 80260ea:	68e0      	ldr	r0, [r4, #12]
 80260ec:	9b03      	ldr	r3, [sp, #12]
 80260ee:	4298      	cmp	r0, r3
 80260f0:	bfb8      	it	lt
 80260f2:	4618      	movlt	r0, r3
 80260f4:	e7a4      	b.n	8026040 <_printf_i+0x168>
 80260f6:	2301      	movs	r3, #1
 80260f8:	4632      	mov	r2, r6
 80260fa:	4649      	mov	r1, r9
 80260fc:	4640      	mov	r0, r8
 80260fe:	47d0      	blx	sl
 8026100:	3001      	adds	r0, #1
 8026102:	d09b      	beq.n	802603c <_printf_i+0x164>
 8026104:	3501      	adds	r5, #1
 8026106:	68e3      	ldr	r3, [r4, #12]
 8026108:	9903      	ldr	r1, [sp, #12]
 802610a:	1a5b      	subs	r3, r3, r1
 802610c:	42ab      	cmp	r3, r5
 802610e:	dcf2      	bgt.n	80260f6 <_printf_i+0x21e>
 8026110:	e7eb      	b.n	80260ea <_printf_i+0x212>
 8026112:	2500      	movs	r5, #0
 8026114:	f104 0619 	add.w	r6, r4, #25
 8026118:	e7f5      	b.n	8026106 <_printf_i+0x22e>
 802611a:	bf00      	nop
 802611c:	08028e69 	.word	0x08028e69
 8026120:	08028e7a 	.word	0x08028e7a

08026124 <_sbrk_r>:
 8026124:	b538      	push	{r3, r4, r5, lr}
 8026126:	2300      	movs	r3, #0
 8026128:	4d05      	ldr	r5, [pc, #20]	; (8026140 <_sbrk_r+0x1c>)
 802612a:	4604      	mov	r4, r0
 802612c:	4608      	mov	r0, r1
 802612e:	602b      	str	r3, [r5, #0]
 8026130:	f7db ff42 	bl	8001fb8 <_sbrk>
 8026134:	1c43      	adds	r3, r0, #1
 8026136:	d102      	bne.n	802613e <_sbrk_r+0x1a>
 8026138:	682b      	ldr	r3, [r5, #0]
 802613a:	b103      	cbz	r3, 802613e <_sbrk_r+0x1a>
 802613c:	6023      	str	r3, [r4, #0]
 802613e:	bd38      	pop	{r3, r4, r5, pc}
 8026140:	2004e3c0 	.word	0x2004e3c0

08026144 <_raise_r>:
 8026144:	291f      	cmp	r1, #31
 8026146:	b538      	push	{r3, r4, r5, lr}
 8026148:	4604      	mov	r4, r0
 802614a:	460d      	mov	r5, r1
 802614c:	d904      	bls.n	8026158 <_raise_r+0x14>
 802614e:	2316      	movs	r3, #22
 8026150:	6003      	str	r3, [r0, #0]
 8026152:	f04f 30ff 	mov.w	r0, #4294967295
 8026156:	bd38      	pop	{r3, r4, r5, pc}
 8026158:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802615a:	b112      	cbz	r2, 8026162 <_raise_r+0x1e>
 802615c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026160:	b94b      	cbnz	r3, 8026176 <_raise_r+0x32>
 8026162:	4620      	mov	r0, r4
 8026164:	f000 f830 	bl	80261c8 <_getpid_r>
 8026168:	462a      	mov	r2, r5
 802616a:	4601      	mov	r1, r0
 802616c:	4620      	mov	r0, r4
 802616e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026172:	f000 b817 	b.w	80261a4 <_kill_r>
 8026176:	2b01      	cmp	r3, #1
 8026178:	d00a      	beq.n	8026190 <_raise_r+0x4c>
 802617a:	1c59      	adds	r1, r3, #1
 802617c:	d103      	bne.n	8026186 <_raise_r+0x42>
 802617e:	2316      	movs	r3, #22
 8026180:	6003      	str	r3, [r0, #0]
 8026182:	2001      	movs	r0, #1
 8026184:	e7e7      	b.n	8026156 <_raise_r+0x12>
 8026186:	2400      	movs	r4, #0
 8026188:	4628      	mov	r0, r5
 802618a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802618e:	4798      	blx	r3
 8026190:	2000      	movs	r0, #0
 8026192:	e7e0      	b.n	8026156 <_raise_r+0x12>

08026194 <raise>:
 8026194:	4b02      	ldr	r3, [pc, #8]	; (80261a0 <raise+0xc>)
 8026196:	4601      	mov	r1, r0
 8026198:	6818      	ldr	r0, [r3, #0]
 802619a:	f7ff bfd3 	b.w	8026144 <_raise_r>
 802619e:	bf00      	nop
 80261a0:	20025898 	.word	0x20025898

080261a4 <_kill_r>:
 80261a4:	b538      	push	{r3, r4, r5, lr}
 80261a6:	2300      	movs	r3, #0
 80261a8:	4d06      	ldr	r5, [pc, #24]	; (80261c4 <_kill_r+0x20>)
 80261aa:	4604      	mov	r4, r0
 80261ac:	4608      	mov	r0, r1
 80261ae:	4611      	mov	r1, r2
 80261b0:	602b      	str	r3, [r5, #0]
 80261b2:	f7db fe79 	bl	8001ea8 <_kill>
 80261b6:	1c43      	adds	r3, r0, #1
 80261b8:	d102      	bne.n	80261c0 <_kill_r+0x1c>
 80261ba:	682b      	ldr	r3, [r5, #0]
 80261bc:	b103      	cbz	r3, 80261c0 <_kill_r+0x1c>
 80261be:	6023      	str	r3, [r4, #0]
 80261c0:	bd38      	pop	{r3, r4, r5, pc}
 80261c2:	bf00      	nop
 80261c4:	2004e3c0 	.word	0x2004e3c0

080261c8 <_getpid_r>:
 80261c8:	f7db be66 	b.w	8001e98 <_getpid>

080261cc <__swbuf_r>:
 80261cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80261ce:	460e      	mov	r6, r1
 80261d0:	4614      	mov	r4, r2
 80261d2:	4605      	mov	r5, r0
 80261d4:	b118      	cbz	r0, 80261de <__swbuf_r+0x12>
 80261d6:	6983      	ldr	r3, [r0, #24]
 80261d8:	b90b      	cbnz	r3, 80261de <__swbuf_r+0x12>
 80261da:	f000 fa33 	bl	8026644 <__sinit>
 80261de:	4b21      	ldr	r3, [pc, #132]	; (8026264 <__swbuf_r+0x98>)
 80261e0:	429c      	cmp	r4, r3
 80261e2:	d12b      	bne.n	802623c <__swbuf_r+0x70>
 80261e4:	686c      	ldr	r4, [r5, #4]
 80261e6:	69a3      	ldr	r3, [r4, #24]
 80261e8:	60a3      	str	r3, [r4, #8]
 80261ea:	89a3      	ldrh	r3, [r4, #12]
 80261ec:	071a      	lsls	r2, r3, #28
 80261ee:	d52f      	bpl.n	8026250 <__swbuf_r+0x84>
 80261f0:	6923      	ldr	r3, [r4, #16]
 80261f2:	b36b      	cbz	r3, 8026250 <__swbuf_r+0x84>
 80261f4:	6923      	ldr	r3, [r4, #16]
 80261f6:	b2f6      	uxtb	r6, r6
 80261f8:	6820      	ldr	r0, [r4, #0]
 80261fa:	4637      	mov	r7, r6
 80261fc:	1ac0      	subs	r0, r0, r3
 80261fe:	6963      	ldr	r3, [r4, #20]
 8026200:	4283      	cmp	r3, r0
 8026202:	dc04      	bgt.n	802620e <__swbuf_r+0x42>
 8026204:	4621      	mov	r1, r4
 8026206:	4628      	mov	r0, r5
 8026208:	f000 f988 	bl	802651c <_fflush_r>
 802620c:	bb30      	cbnz	r0, 802625c <__swbuf_r+0x90>
 802620e:	68a3      	ldr	r3, [r4, #8]
 8026210:	3001      	adds	r0, #1
 8026212:	3b01      	subs	r3, #1
 8026214:	60a3      	str	r3, [r4, #8]
 8026216:	6823      	ldr	r3, [r4, #0]
 8026218:	1c5a      	adds	r2, r3, #1
 802621a:	6022      	str	r2, [r4, #0]
 802621c:	701e      	strb	r6, [r3, #0]
 802621e:	6963      	ldr	r3, [r4, #20]
 8026220:	4283      	cmp	r3, r0
 8026222:	d004      	beq.n	802622e <__swbuf_r+0x62>
 8026224:	89a3      	ldrh	r3, [r4, #12]
 8026226:	07db      	lsls	r3, r3, #31
 8026228:	d506      	bpl.n	8026238 <__swbuf_r+0x6c>
 802622a:	2e0a      	cmp	r6, #10
 802622c:	d104      	bne.n	8026238 <__swbuf_r+0x6c>
 802622e:	4621      	mov	r1, r4
 8026230:	4628      	mov	r0, r5
 8026232:	f000 f973 	bl	802651c <_fflush_r>
 8026236:	b988      	cbnz	r0, 802625c <__swbuf_r+0x90>
 8026238:	4638      	mov	r0, r7
 802623a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802623c:	4b0a      	ldr	r3, [pc, #40]	; (8026268 <__swbuf_r+0x9c>)
 802623e:	429c      	cmp	r4, r3
 8026240:	d101      	bne.n	8026246 <__swbuf_r+0x7a>
 8026242:	68ac      	ldr	r4, [r5, #8]
 8026244:	e7cf      	b.n	80261e6 <__swbuf_r+0x1a>
 8026246:	4b09      	ldr	r3, [pc, #36]	; (802626c <__swbuf_r+0xa0>)
 8026248:	429c      	cmp	r4, r3
 802624a:	bf08      	it	eq
 802624c:	68ec      	ldreq	r4, [r5, #12]
 802624e:	e7ca      	b.n	80261e6 <__swbuf_r+0x1a>
 8026250:	4621      	mov	r1, r4
 8026252:	4628      	mov	r0, r5
 8026254:	f000 f80c 	bl	8026270 <__swsetup_r>
 8026258:	2800      	cmp	r0, #0
 802625a:	d0cb      	beq.n	80261f4 <__swbuf_r+0x28>
 802625c:	f04f 37ff 	mov.w	r7, #4294967295
 8026260:	e7ea      	b.n	8026238 <__swbuf_r+0x6c>
 8026262:	bf00      	nop
 8026264:	08028eb0 	.word	0x08028eb0
 8026268:	08028ed0 	.word	0x08028ed0
 802626c:	08028e90 	.word	0x08028e90

08026270 <__swsetup_r>:
 8026270:	4b32      	ldr	r3, [pc, #200]	; (802633c <__swsetup_r+0xcc>)
 8026272:	b570      	push	{r4, r5, r6, lr}
 8026274:	681d      	ldr	r5, [r3, #0]
 8026276:	4606      	mov	r6, r0
 8026278:	460c      	mov	r4, r1
 802627a:	b125      	cbz	r5, 8026286 <__swsetup_r+0x16>
 802627c:	69ab      	ldr	r3, [r5, #24]
 802627e:	b913      	cbnz	r3, 8026286 <__swsetup_r+0x16>
 8026280:	4628      	mov	r0, r5
 8026282:	f000 f9df 	bl	8026644 <__sinit>
 8026286:	4b2e      	ldr	r3, [pc, #184]	; (8026340 <__swsetup_r+0xd0>)
 8026288:	429c      	cmp	r4, r3
 802628a:	d10f      	bne.n	80262ac <__swsetup_r+0x3c>
 802628c:	686c      	ldr	r4, [r5, #4]
 802628e:	89a3      	ldrh	r3, [r4, #12]
 8026290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026294:	0719      	lsls	r1, r3, #28
 8026296:	d42c      	bmi.n	80262f2 <__swsetup_r+0x82>
 8026298:	06dd      	lsls	r5, r3, #27
 802629a:	d411      	bmi.n	80262c0 <__swsetup_r+0x50>
 802629c:	2309      	movs	r3, #9
 802629e:	6033      	str	r3, [r6, #0]
 80262a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80262a4:	f04f 30ff 	mov.w	r0, #4294967295
 80262a8:	81a3      	strh	r3, [r4, #12]
 80262aa:	e03e      	b.n	802632a <__swsetup_r+0xba>
 80262ac:	4b25      	ldr	r3, [pc, #148]	; (8026344 <__swsetup_r+0xd4>)
 80262ae:	429c      	cmp	r4, r3
 80262b0:	d101      	bne.n	80262b6 <__swsetup_r+0x46>
 80262b2:	68ac      	ldr	r4, [r5, #8]
 80262b4:	e7eb      	b.n	802628e <__swsetup_r+0x1e>
 80262b6:	4b24      	ldr	r3, [pc, #144]	; (8026348 <__swsetup_r+0xd8>)
 80262b8:	429c      	cmp	r4, r3
 80262ba:	bf08      	it	eq
 80262bc:	68ec      	ldreq	r4, [r5, #12]
 80262be:	e7e6      	b.n	802628e <__swsetup_r+0x1e>
 80262c0:	0758      	lsls	r0, r3, #29
 80262c2:	d512      	bpl.n	80262ea <__swsetup_r+0x7a>
 80262c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80262c6:	b141      	cbz	r1, 80262da <__swsetup_r+0x6a>
 80262c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80262cc:	4299      	cmp	r1, r3
 80262ce:	d002      	beq.n	80262d6 <__swsetup_r+0x66>
 80262d0:	4630      	mov	r0, r6
 80262d2:	f7ff fb57 	bl	8025984 <_free_r>
 80262d6:	2300      	movs	r3, #0
 80262d8:	6363      	str	r3, [r4, #52]	; 0x34
 80262da:	89a3      	ldrh	r3, [r4, #12]
 80262dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80262e0:	81a3      	strh	r3, [r4, #12]
 80262e2:	2300      	movs	r3, #0
 80262e4:	6063      	str	r3, [r4, #4]
 80262e6:	6923      	ldr	r3, [r4, #16]
 80262e8:	6023      	str	r3, [r4, #0]
 80262ea:	89a3      	ldrh	r3, [r4, #12]
 80262ec:	f043 0308 	orr.w	r3, r3, #8
 80262f0:	81a3      	strh	r3, [r4, #12]
 80262f2:	6923      	ldr	r3, [r4, #16]
 80262f4:	b94b      	cbnz	r3, 802630a <__swsetup_r+0x9a>
 80262f6:	89a3      	ldrh	r3, [r4, #12]
 80262f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80262fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026300:	d003      	beq.n	802630a <__swsetup_r+0x9a>
 8026302:	4621      	mov	r1, r4
 8026304:	4630      	mov	r0, r6
 8026306:	f000 fa63 	bl	80267d0 <__smakebuf_r>
 802630a:	89a0      	ldrh	r0, [r4, #12]
 802630c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026310:	f010 0301 	ands.w	r3, r0, #1
 8026314:	d00a      	beq.n	802632c <__swsetup_r+0xbc>
 8026316:	2300      	movs	r3, #0
 8026318:	60a3      	str	r3, [r4, #8]
 802631a:	6963      	ldr	r3, [r4, #20]
 802631c:	425b      	negs	r3, r3
 802631e:	61a3      	str	r3, [r4, #24]
 8026320:	6923      	ldr	r3, [r4, #16]
 8026322:	b943      	cbnz	r3, 8026336 <__swsetup_r+0xc6>
 8026324:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026328:	d1ba      	bne.n	80262a0 <__swsetup_r+0x30>
 802632a:	bd70      	pop	{r4, r5, r6, pc}
 802632c:	0781      	lsls	r1, r0, #30
 802632e:	bf58      	it	pl
 8026330:	6963      	ldrpl	r3, [r4, #20]
 8026332:	60a3      	str	r3, [r4, #8]
 8026334:	e7f4      	b.n	8026320 <__swsetup_r+0xb0>
 8026336:	2000      	movs	r0, #0
 8026338:	e7f7      	b.n	802632a <__swsetup_r+0xba>
 802633a:	bf00      	nop
 802633c:	20025898 	.word	0x20025898
 8026340:	08028eb0 	.word	0x08028eb0
 8026344:	08028ed0 	.word	0x08028ed0
 8026348:	08028e90 	.word	0x08028e90

0802634c <__register_exitproc>:
 802634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026350:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8026410 <__register_exitproc+0xc4>
 8026354:	4606      	mov	r6, r0
 8026356:	461f      	mov	r7, r3
 8026358:	460d      	mov	r5, r1
 802635a:	f8d8 0000 	ldr.w	r0, [r8]
 802635e:	4691      	mov	r9, r2
 8026360:	f000 fa0e 	bl	8026780 <__retarget_lock_acquire_recursive>
 8026364:	4b26      	ldr	r3, [pc, #152]	; (8026400 <__register_exitproc+0xb4>)
 8026366:	681c      	ldr	r4, [r3, #0]
 8026368:	b934      	cbnz	r4, 8026378 <__register_exitproc+0x2c>
 802636a:	4c26      	ldr	r4, [pc, #152]	; (8026404 <__register_exitproc+0xb8>)
 802636c:	601c      	str	r4, [r3, #0]
 802636e:	4b26      	ldr	r3, [pc, #152]	; (8026408 <__register_exitproc+0xbc>)
 8026370:	b113      	cbz	r3, 8026378 <__register_exitproc+0x2c>
 8026372:	681b      	ldr	r3, [r3, #0]
 8026374:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026378:	6863      	ldr	r3, [r4, #4]
 802637a:	2b1f      	cmp	r3, #31
 802637c:	dd07      	ble.n	802638e <__register_exitproc+0x42>
 802637e:	f8d8 0000 	ldr.w	r0, [r8]
 8026382:	f000 f9ff 	bl	8026784 <__retarget_lock_release_recursive>
 8026386:	f04f 30ff 	mov.w	r0, #4294967295
 802638a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802638e:	b35e      	cbz	r6, 80263e8 <__register_exitproc+0x9c>
 8026390:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026394:	b988      	cbnz	r0, 80263ba <__register_exitproc+0x6e>
 8026396:	4b1d      	ldr	r3, [pc, #116]	; (802640c <__register_exitproc+0xc0>)
 8026398:	b923      	cbnz	r3, 80263a4 <__register_exitproc+0x58>
 802639a:	f8d8 0000 	ldr.w	r0, [r8]
 802639e:	f000 f9f0 	bl	8026782 <__retarget_lock_release>
 80263a2:	e7f0      	b.n	8026386 <__register_exitproc+0x3a>
 80263a4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80263a8:	f7ff fad4 	bl	8025954 <malloc>
 80263ac:	2800      	cmp	r0, #0
 80263ae:	d0f4      	beq.n	802639a <__register_exitproc+0x4e>
 80263b0:	2300      	movs	r3, #0
 80263b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80263b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80263ba:	6863      	ldr	r3, [r4, #4]
 80263bc:	2201      	movs	r2, #1
 80263be:	2e02      	cmp	r6, #2
 80263c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80263c4:	fa02 f203 	lsl.w	r2, r2, r3
 80263c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80263cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80263d0:	ea43 0302 	orr.w	r3, r3, r2
 80263d4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80263d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80263dc:	bf02      	ittt	eq
 80263de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80263e2:	4313      	orreq	r3, r2
 80263e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80263e8:	6863      	ldr	r3, [r4, #4]
 80263ea:	f8d8 0000 	ldr.w	r0, [r8]
 80263ee:	1c5a      	adds	r2, r3, #1
 80263f0:	3302      	adds	r3, #2
 80263f2:	6062      	str	r2, [r4, #4]
 80263f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80263f8:	f000 f9c4 	bl	8026784 <__retarget_lock_release_recursive>
 80263fc:	2000      	movs	r0, #0
 80263fe:	e7c4      	b.n	802638a <__register_exitproc+0x3e>
 8026400:	2004e3b8 	.word	0x2004e3b8
 8026404:	2004e32c 	.word	0x2004e32c
 8026408:	08028e8c 	.word	0x08028e8c
 802640c:	08025955 	.word	0x08025955
 8026410:	200258fc 	.word	0x200258fc

08026414 <__sflush_r>:
 8026414:	898a      	ldrh	r2, [r1, #12]
 8026416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802641a:	4605      	mov	r5, r0
 802641c:	0710      	lsls	r0, r2, #28
 802641e:	460c      	mov	r4, r1
 8026420:	d458      	bmi.n	80264d4 <__sflush_r+0xc0>
 8026422:	684b      	ldr	r3, [r1, #4]
 8026424:	2b00      	cmp	r3, #0
 8026426:	dc05      	bgt.n	8026434 <__sflush_r+0x20>
 8026428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802642a:	2b00      	cmp	r3, #0
 802642c:	dc02      	bgt.n	8026434 <__sflush_r+0x20>
 802642e:	2000      	movs	r0, #0
 8026430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026436:	2e00      	cmp	r6, #0
 8026438:	d0f9      	beq.n	802642e <__sflush_r+0x1a>
 802643a:	2300      	movs	r3, #0
 802643c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026440:	682f      	ldr	r7, [r5, #0]
 8026442:	602b      	str	r3, [r5, #0]
 8026444:	d032      	beq.n	80264ac <__sflush_r+0x98>
 8026446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026448:	89a3      	ldrh	r3, [r4, #12]
 802644a:	075a      	lsls	r2, r3, #29
 802644c:	d505      	bpl.n	802645a <__sflush_r+0x46>
 802644e:	6863      	ldr	r3, [r4, #4]
 8026450:	1ac0      	subs	r0, r0, r3
 8026452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026454:	b10b      	cbz	r3, 802645a <__sflush_r+0x46>
 8026456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026458:	1ac0      	subs	r0, r0, r3
 802645a:	2300      	movs	r3, #0
 802645c:	4602      	mov	r2, r0
 802645e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026460:	4628      	mov	r0, r5
 8026462:	6a21      	ldr	r1, [r4, #32]
 8026464:	47b0      	blx	r6
 8026466:	1c43      	adds	r3, r0, #1
 8026468:	89a3      	ldrh	r3, [r4, #12]
 802646a:	d106      	bne.n	802647a <__sflush_r+0x66>
 802646c:	6829      	ldr	r1, [r5, #0]
 802646e:	291d      	cmp	r1, #29
 8026470:	d82c      	bhi.n	80264cc <__sflush_r+0xb8>
 8026472:	4a29      	ldr	r2, [pc, #164]	; (8026518 <__sflush_r+0x104>)
 8026474:	40ca      	lsrs	r2, r1
 8026476:	07d6      	lsls	r6, r2, #31
 8026478:	d528      	bpl.n	80264cc <__sflush_r+0xb8>
 802647a:	2200      	movs	r2, #0
 802647c:	04d9      	lsls	r1, r3, #19
 802647e:	6062      	str	r2, [r4, #4]
 8026480:	6922      	ldr	r2, [r4, #16]
 8026482:	6022      	str	r2, [r4, #0]
 8026484:	d504      	bpl.n	8026490 <__sflush_r+0x7c>
 8026486:	1c42      	adds	r2, r0, #1
 8026488:	d101      	bne.n	802648e <__sflush_r+0x7a>
 802648a:	682b      	ldr	r3, [r5, #0]
 802648c:	b903      	cbnz	r3, 8026490 <__sflush_r+0x7c>
 802648e:	6560      	str	r0, [r4, #84]	; 0x54
 8026490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026492:	602f      	str	r7, [r5, #0]
 8026494:	2900      	cmp	r1, #0
 8026496:	d0ca      	beq.n	802642e <__sflush_r+0x1a>
 8026498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802649c:	4299      	cmp	r1, r3
 802649e:	d002      	beq.n	80264a6 <__sflush_r+0x92>
 80264a0:	4628      	mov	r0, r5
 80264a2:	f7ff fa6f 	bl	8025984 <_free_r>
 80264a6:	2000      	movs	r0, #0
 80264a8:	6360      	str	r0, [r4, #52]	; 0x34
 80264aa:	e7c1      	b.n	8026430 <__sflush_r+0x1c>
 80264ac:	6a21      	ldr	r1, [r4, #32]
 80264ae:	2301      	movs	r3, #1
 80264b0:	4628      	mov	r0, r5
 80264b2:	47b0      	blx	r6
 80264b4:	1c41      	adds	r1, r0, #1
 80264b6:	d1c7      	bne.n	8026448 <__sflush_r+0x34>
 80264b8:	682b      	ldr	r3, [r5, #0]
 80264ba:	2b00      	cmp	r3, #0
 80264bc:	d0c4      	beq.n	8026448 <__sflush_r+0x34>
 80264be:	2b1d      	cmp	r3, #29
 80264c0:	d001      	beq.n	80264c6 <__sflush_r+0xb2>
 80264c2:	2b16      	cmp	r3, #22
 80264c4:	d101      	bne.n	80264ca <__sflush_r+0xb6>
 80264c6:	602f      	str	r7, [r5, #0]
 80264c8:	e7b1      	b.n	802642e <__sflush_r+0x1a>
 80264ca:	89a3      	ldrh	r3, [r4, #12]
 80264cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80264d0:	81a3      	strh	r3, [r4, #12]
 80264d2:	e7ad      	b.n	8026430 <__sflush_r+0x1c>
 80264d4:	690f      	ldr	r7, [r1, #16]
 80264d6:	2f00      	cmp	r7, #0
 80264d8:	d0a9      	beq.n	802642e <__sflush_r+0x1a>
 80264da:	0793      	lsls	r3, r2, #30
 80264dc:	680e      	ldr	r6, [r1, #0]
 80264de:	600f      	str	r7, [r1, #0]
 80264e0:	bf0c      	ite	eq
 80264e2:	694b      	ldreq	r3, [r1, #20]
 80264e4:	2300      	movne	r3, #0
 80264e6:	eba6 0807 	sub.w	r8, r6, r7
 80264ea:	608b      	str	r3, [r1, #8]
 80264ec:	f1b8 0f00 	cmp.w	r8, #0
 80264f0:	dd9d      	ble.n	802642e <__sflush_r+0x1a>
 80264f2:	4643      	mov	r3, r8
 80264f4:	463a      	mov	r2, r7
 80264f6:	6a21      	ldr	r1, [r4, #32]
 80264f8:	4628      	mov	r0, r5
 80264fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80264fc:	47b0      	blx	r6
 80264fe:	2800      	cmp	r0, #0
 8026500:	dc06      	bgt.n	8026510 <__sflush_r+0xfc>
 8026502:	89a3      	ldrh	r3, [r4, #12]
 8026504:	f04f 30ff 	mov.w	r0, #4294967295
 8026508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802650c:	81a3      	strh	r3, [r4, #12]
 802650e:	e78f      	b.n	8026430 <__sflush_r+0x1c>
 8026510:	4407      	add	r7, r0
 8026512:	eba8 0800 	sub.w	r8, r8, r0
 8026516:	e7e9      	b.n	80264ec <__sflush_r+0xd8>
 8026518:	20400001 	.word	0x20400001

0802651c <_fflush_r>:
 802651c:	b538      	push	{r3, r4, r5, lr}
 802651e:	690b      	ldr	r3, [r1, #16]
 8026520:	4605      	mov	r5, r0
 8026522:	460c      	mov	r4, r1
 8026524:	b913      	cbnz	r3, 802652c <_fflush_r+0x10>
 8026526:	2500      	movs	r5, #0
 8026528:	4628      	mov	r0, r5
 802652a:	bd38      	pop	{r3, r4, r5, pc}
 802652c:	b118      	cbz	r0, 8026536 <_fflush_r+0x1a>
 802652e:	6983      	ldr	r3, [r0, #24]
 8026530:	b90b      	cbnz	r3, 8026536 <_fflush_r+0x1a>
 8026532:	f000 f887 	bl	8026644 <__sinit>
 8026536:	4b14      	ldr	r3, [pc, #80]	; (8026588 <_fflush_r+0x6c>)
 8026538:	429c      	cmp	r4, r3
 802653a:	d11b      	bne.n	8026574 <_fflush_r+0x58>
 802653c:	686c      	ldr	r4, [r5, #4]
 802653e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026542:	2b00      	cmp	r3, #0
 8026544:	d0ef      	beq.n	8026526 <_fflush_r+0xa>
 8026546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026548:	07d0      	lsls	r0, r2, #31
 802654a:	d404      	bmi.n	8026556 <_fflush_r+0x3a>
 802654c:	0599      	lsls	r1, r3, #22
 802654e:	d402      	bmi.n	8026556 <_fflush_r+0x3a>
 8026550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026552:	f000 f915 	bl	8026780 <__retarget_lock_acquire_recursive>
 8026556:	4628      	mov	r0, r5
 8026558:	4621      	mov	r1, r4
 802655a:	f7ff ff5b 	bl	8026414 <__sflush_r>
 802655e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026560:	4605      	mov	r5, r0
 8026562:	07da      	lsls	r2, r3, #31
 8026564:	d4e0      	bmi.n	8026528 <_fflush_r+0xc>
 8026566:	89a3      	ldrh	r3, [r4, #12]
 8026568:	059b      	lsls	r3, r3, #22
 802656a:	d4dd      	bmi.n	8026528 <_fflush_r+0xc>
 802656c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802656e:	f000 f909 	bl	8026784 <__retarget_lock_release_recursive>
 8026572:	e7d9      	b.n	8026528 <_fflush_r+0xc>
 8026574:	4b05      	ldr	r3, [pc, #20]	; (802658c <_fflush_r+0x70>)
 8026576:	429c      	cmp	r4, r3
 8026578:	d101      	bne.n	802657e <_fflush_r+0x62>
 802657a:	68ac      	ldr	r4, [r5, #8]
 802657c:	e7df      	b.n	802653e <_fflush_r+0x22>
 802657e:	4b04      	ldr	r3, [pc, #16]	; (8026590 <_fflush_r+0x74>)
 8026580:	429c      	cmp	r4, r3
 8026582:	bf08      	it	eq
 8026584:	68ec      	ldreq	r4, [r5, #12]
 8026586:	e7da      	b.n	802653e <_fflush_r+0x22>
 8026588:	08028eb0 	.word	0x08028eb0
 802658c:	08028ed0 	.word	0x08028ed0
 8026590:	08028e90 	.word	0x08028e90

08026594 <std>:
 8026594:	2300      	movs	r3, #0
 8026596:	b510      	push	{r4, lr}
 8026598:	4604      	mov	r4, r0
 802659a:	6083      	str	r3, [r0, #8]
 802659c:	8181      	strh	r1, [r0, #12]
 802659e:	4619      	mov	r1, r3
 80265a0:	6643      	str	r3, [r0, #100]	; 0x64
 80265a2:	81c2      	strh	r2, [r0, #14]
 80265a4:	2208      	movs	r2, #8
 80265a6:	6183      	str	r3, [r0, #24]
 80265a8:	e9c0 3300 	strd	r3, r3, [r0]
 80265ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80265b0:	305c      	adds	r0, #92	; 0x5c
 80265b2:	f7ff f9df 	bl	8025974 <memset>
 80265b6:	4b05      	ldr	r3, [pc, #20]	; (80265cc <std+0x38>)
 80265b8:	6224      	str	r4, [r4, #32]
 80265ba:	6263      	str	r3, [r4, #36]	; 0x24
 80265bc:	4b04      	ldr	r3, [pc, #16]	; (80265d0 <std+0x3c>)
 80265be:	62a3      	str	r3, [r4, #40]	; 0x28
 80265c0:	4b04      	ldr	r3, [pc, #16]	; (80265d4 <std+0x40>)
 80265c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80265c4:	4b04      	ldr	r3, [pc, #16]	; (80265d8 <std+0x44>)
 80265c6:	6323      	str	r3, [r4, #48]	; 0x30
 80265c8:	bd10      	pop	{r4, pc}
 80265ca:	bf00      	nop
 80265cc:	08026885 	.word	0x08026885
 80265d0:	080268a7 	.word	0x080268a7
 80265d4:	080268df 	.word	0x080268df
 80265d8:	08026903 	.word	0x08026903

080265dc <_cleanup_r>:
 80265dc:	4901      	ldr	r1, [pc, #4]	; (80265e4 <_cleanup_r+0x8>)
 80265de:	f000 b8af 	b.w	8026740 <_fwalk_reent>
 80265e2:	bf00      	nop
 80265e4:	0802651d 	.word	0x0802651d

080265e8 <__sfmoreglue>:
 80265e8:	b570      	push	{r4, r5, r6, lr}
 80265ea:	2268      	movs	r2, #104	; 0x68
 80265ec:	1e4d      	subs	r5, r1, #1
 80265ee:	460e      	mov	r6, r1
 80265f0:	4355      	muls	r5, r2
 80265f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80265f6:	f7ff fa31 	bl	8025a5c <_malloc_r>
 80265fa:	4604      	mov	r4, r0
 80265fc:	b140      	cbz	r0, 8026610 <__sfmoreglue+0x28>
 80265fe:	2100      	movs	r1, #0
 8026600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026604:	e9c0 1600 	strd	r1, r6, [r0]
 8026608:	300c      	adds	r0, #12
 802660a:	60a0      	str	r0, [r4, #8]
 802660c:	f7ff f9b2 	bl	8025974 <memset>
 8026610:	4620      	mov	r0, r4
 8026612:	bd70      	pop	{r4, r5, r6, pc}

08026614 <__sfp_lock_acquire>:
 8026614:	4801      	ldr	r0, [pc, #4]	; (802661c <__sfp_lock_acquire+0x8>)
 8026616:	f000 b8b3 	b.w	8026780 <__retarget_lock_acquire_recursive>
 802661a:	bf00      	nop
 802661c:	2004e3be 	.word	0x2004e3be

08026620 <__sfp_lock_release>:
 8026620:	4801      	ldr	r0, [pc, #4]	; (8026628 <__sfp_lock_release+0x8>)
 8026622:	f000 b8af 	b.w	8026784 <__retarget_lock_release_recursive>
 8026626:	bf00      	nop
 8026628:	2004e3be 	.word	0x2004e3be

0802662c <__sinit_lock_acquire>:
 802662c:	4801      	ldr	r0, [pc, #4]	; (8026634 <__sinit_lock_acquire+0x8>)
 802662e:	f000 b8a7 	b.w	8026780 <__retarget_lock_acquire_recursive>
 8026632:	bf00      	nop
 8026634:	2004e3bf 	.word	0x2004e3bf

08026638 <__sinit_lock_release>:
 8026638:	4801      	ldr	r0, [pc, #4]	; (8026640 <__sinit_lock_release+0x8>)
 802663a:	f000 b8a3 	b.w	8026784 <__retarget_lock_release_recursive>
 802663e:	bf00      	nop
 8026640:	2004e3bf 	.word	0x2004e3bf

08026644 <__sinit>:
 8026644:	b510      	push	{r4, lr}
 8026646:	4604      	mov	r4, r0
 8026648:	f7ff fff0 	bl	802662c <__sinit_lock_acquire>
 802664c:	69a3      	ldr	r3, [r4, #24]
 802664e:	b11b      	cbz	r3, 8026658 <__sinit+0x14>
 8026650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026654:	f7ff bff0 	b.w	8026638 <__sinit_lock_release>
 8026658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802665c:	6523      	str	r3, [r4, #80]	; 0x50
 802665e:	4620      	mov	r0, r4
 8026660:	4b12      	ldr	r3, [pc, #72]	; (80266ac <__sinit+0x68>)
 8026662:	4a13      	ldr	r2, [pc, #76]	; (80266b0 <__sinit+0x6c>)
 8026664:	681b      	ldr	r3, [r3, #0]
 8026666:	62a2      	str	r2, [r4, #40]	; 0x28
 8026668:	42a3      	cmp	r3, r4
 802666a:	bf04      	itt	eq
 802666c:	2301      	moveq	r3, #1
 802666e:	61a3      	streq	r3, [r4, #24]
 8026670:	f000 f820 	bl	80266b4 <__sfp>
 8026674:	6060      	str	r0, [r4, #4]
 8026676:	4620      	mov	r0, r4
 8026678:	f000 f81c 	bl	80266b4 <__sfp>
 802667c:	60a0      	str	r0, [r4, #8]
 802667e:	4620      	mov	r0, r4
 8026680:	f000 f818 	bl	80266b4 <__sfp>
 8026684:	2200      	movs	r2, #0
 8026686:	2104      	movs	r1, #4
 8026688:	60e0      	str	r0, [r4, #12]
 802668a:	6860      	ldr	r0, [r4, #4]
 802668c:	f7ff ff82 	bl	8026594 <std>
 8026690:	2201      	movs	r2, #1
 8026692:	2109      	movs	r1, #9
 8026694:	68a0      	ldr	r0, [r4, #8]
 8026696:	f7ff ff7d 	bl	8026594 <std>
 802669a:	2202      	movs	r2, #2
 802669c:	2112      	movs	r1, #18
 802669e:	68e0      	ldr	r0, [r4, #12]
 80266a0:	f7ff ff78 	bl	8026594 <std>
 80266a4:	2301      	movs	r3, #1
 80266a6:	61a3      	str	r3, [r4, #24]
 80266a8:	e7d2      	b.n	8026650 <__sinit+0xc>
 80266aa:	bf00      	nop
 80266ac:	08028e54 	.word	0x08028e54
 80266b0:	080265dd 	.word	0x080265dd

080266b4 <__sfp>:
 80266b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266b6:	4607      	mov	r7, r0
 80266b8:	f7ff ffac 	bl	8026614 <__sfp_lock_acquire>
 80266bc:	4b1e      	ldr	r3, [pc, #120]	; (8026738 <__sfp+0x84>)
 80266be:	681e      	ldr	r6, [r3, #0]
 80266c0:	69b3      	ldr	r3, [r6, #24]
 80266c2:	b913      	cbnz	r3, 80266ca <__sfp+0x16>
 80266c4:	4630      	mov	r0, r6
 80266c6:	f7ff ffbd 	bl	8026644 <__sinit>
 80266ca:	3648      	adds	r6, #72	; 0x48
 80266cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80266d0:	3b01      	subs	r3, #1
 80266d2:	d503      	bpl.n	80266dc <__sfp+0x28>
 80266d4:	6833      	ldr	r3, [r6, #0]
 80266d6:	b30b      	cbz	r3, 802671c <__sfp+0x68>
 80266d8:	6836      	ldr	r6, [r6, #0]
 80266da:	e7f7      	b.n	80266cc <__sfp+0x18>
 80266dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80266e0:	b9d5      	cbnz	r5, 8026718 <__sfp+0x64>
 80266e2:	4b16      	ldr	r3, [pc, #88]	; (802673c <__sfp+0x88>)
 80266e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80266e8:	6665      	str	r5, [r4, #100]	; 0x64
 80266ea:	60e3      	str	r3, [r4, #12]
 80266ec:	f000 f847 	bl	802677e <__retarget_lock_init_recursive>
 80266f0:	f7ff ff96 	bl	8026620 <__sfp_lock_release>
 80266f4:	2208      	movs	r2, #8
 80266f6:	4629      	mov	r1, r5
 80266f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80266fc:	6025      	str	r5, [r4, #0]
 80266fe:	61a5      	str	r5, [r4, #24]
 8026700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026708:	f7ff f934 	bl	8025974 <memset>
 802670c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026714:	4620      	mov	r0, r4
 8026716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026718:	3468      	adds	r4, #104	; 0x68
 802671a:	e7d9      	b.n	80266d0 <__sfp+0x1c>
 802671c:	2104      	movs	r1, #4
 802671e:	4638      	mov	r0, r7
 8026720:	f7ff ff62 	bl	80265e8 <__sfmoreglue>
 8026724:	4604      	mov	r4, r0
 8026726:	6030      	str	r0, [r6, #0]
 8026728:	2800      	cmp	r0, #0
 802672a:	d1d5      	bne.n	80266d8 <__sfp+0x24>
 802672c:	f7ff ff78 	bl	8026620 <__sfp_lock_release>
 8026730:	230c      	movs	r3, #12
 8026732:	603b      	str	r3, [r7, #0]
 8026734:	e7ee      	b.n	8026714 <__sfp+0x60>
 8026736:	bf00      	nop
 8026738:	08028e54 	.word	0x08028e54
 802673c:	ffff0001 	.word	0xffff0001

08026740 <_fwalk_reent>:
 8026740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026744:	4606      	mov	r6, r0
 8026746:	4688      	mov	r8, r1
 8026748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802674c:	2700      	movs	r7, #0
 802674e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026752:	f1b9 0901 	subs.w	r9, r9, #1
 8026756:	d505      	bpl.n	8026764 <_fwalk_reent+0x24>
 8026758:	6824      	ldr	r4, [r4, #0]
 802675a:	2c00      	cmp	r4, #0
 802675c:	d1f7      	bne.n	802674e <_fwalk_reent+0xe>
 802675e:	4638      	mov	r0, r7
 8026760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026764:	89ab      	ldrh	r3, [r5, #12]
 8026766:	2b01      	cmp	r3, #1
 8026768:	d907      	bls.n	802677a <_fwalk_reent+0x3a>
 802676a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802676e:	3301      	adds	r3, #1
 8026770:	d003      	beq.n	802677a <_fwalk_reent+0x3a>
 8026772:	4629      	mov	r1, r5
 8026774:	4630      	mov	r0, r6
 8026776:	47c0      	blx	r8
 8026778:	4307      	orrs	r7, r0
 802677a:	3568      	adds	r5, #104	; 0x68
 802677c:	e7e9      	b.n	8026752 <_fwalk_reent+0x12>

0802677e <__retarget_lock_init_recursive>:
 802677e:	4770      	bx	lr

08026780 <__retarget_lock_acquire_recursive>:
 8026780:	4770      	bx	lr

08026782 <__retarget_lock_release>:
 8026782:	4770      	bx	lr

08026784 <__retarget_lock_release_recursive>:
 8026784:	4770      	bx	lr

08026786 <__swhatbuf_r>:
 8026786:	b570      	push	{r4, r5, r6, lr}
 8026788:	460e      	mov	r6, r1
 802678a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802678e:	b096      	sub	sp, #88	; 0x58
 8026790:	4614      	mov	r4, r2
 8026792:	2900      	cmp	r1, #0
 8026794:	461d      	mov	r5, r3
 8026796:	da08      	bge.n	80267aa <__swhatbuf_r+0x24>
 8026798:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802679c:	2200      	movs	r2, #0
 802679e:	602a      	str	r2, [r5, #0]
 80267a0:	061a      	lsls	r2, r3, #24
 80267a2:	d410      	bmi.n	80267c6 <__swhatbuf_r+0x40>
 80267a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80267a8:	e00e      	b.n	80267c8 <__swhatbuf_r+0x42>
 80267aa:	466a      	mov	r2, sp
 80267ac:	f000 f8d0 	bl	8026950 <_fstat_r>
 80267b0:	2800      	cmp	r0, #0
 80267b2:	dbf1      	blt.n	8026798 <__swhatbuf_r+0x12>
 80267b4:	9a01      	ldr	r2, [sp, #4]
 80267b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80267ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80267be:	425a      	negs	r2, r3
 80267c0:	415a      	adcs	r2, r3
 80267c2:	602a      	str	r2, [r5, #0]
 80267c4:	e7ee      	b.n	80267a4 <__swhatbuf_r+0x1e>
 80267c6:	2340      	movs	r3, #64	; 0x40
 80267c8:	2000      	movs	r0, #0
 80267ca:	6023      	str	r3, [r4, #0]
 80267cc:	b016      	add	sp, #88	; 0x58
 80267ce:	bd70      	pop	{r4, r5, r6, pc}

080267d0 <__smakebuf_r>:
 80267d0:	898b      	ldrh	r3, [r1, #12]
 80267d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80267d4:	079d      	lsls	r5, r3, #30
 80267d6:	4606      	mov	r6, r0
 80267d8:	460c      	mov	r4, r1
 80267da:	d507      	bpl.n	80267ec <__smakebuf_r+0x1c>
 80267dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80267e0:	6023      	str	r3, [r4, #0]
 80267e2:	6123      	str	r3, [r4, #16]
 80267e4:	2301      	movs	r3, #1
 80267e6:	6163      	str	r3, [r4, #20]
 80267e8:	b002      	add	sp, #8
 80267ea:	bd70      	pop	{r4, r5, r6, pc}
 80267ec:	ab01      	add	r3, sp, #4
 80267ee:	466a      	mov	r2, sp
 80267f0:	f7ff ffc9 	bl	8026786 <__swhatbuf_r>
 80267f4:	9900      	ldr	r1, [sp, #0]
 80267f6:	4605      	mov	r5, r0
 80267f8:	4630      	mov	r0, r6
 80267fa:	f7ff f92f 	bl	8025a5c <_malloc_r>
 80267fe:	b948      	cbnz	r0, 8026814 <__smakebuf_r+0x44>
 8026800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026804:	059a      	lsls	r2, r3, #22
 8026806:	d4ef      	bmi.n	80267e8 <__smakebuf_r+0x18>
 8026808:	f023 0303 	bic.w	r3, r3, #3
 802680c:	f043 0302 	orr.w	r3, r3, #2
 8026810:	81a3      	strh	r3, [r4, #12]
 8026812:	e7e3      	b.n	80267dc <__smakebuf_r+0xc>
 8026814:	4b0d      	ldr	r3, [pc, #52]	; (802684c <__smakebuf_r+0x7c>)
 8026816:	62b3      	str	r3, [r6, #40]	; 0x28
 8026818:	89a3      	ldrh	r3, [r4, #12]
 802681a:	6020      	str	r0, [r4, #0]
 802681c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026820:	6120      	str	r0, [r4, #16]
 8026822:	81a3      	strh	r3, [r4, #12]
 8026824:	9b00      	ldr	r3, [sp, #0]
 8026826:	6163      	str	r3, [r4, #20]
 8026828:	9b01      	ldr	r3, [sp, #4]
 802682a:	b15b      	cbz	r3, 8026844 <__smakebuf_r+0x74>
 802682c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026830:	4630      	mov	r0, r6
 8026832:	f000 f89f 	bl	8026974 <_isatty_r>
 8026836:	b128      	cbz	r0, 8026844 <__smakebuf_r+0x74>
 8026838:	89a3      	ldrh	r3, [r4, #12]
 802683a:	f023 0303 	bic.w	r3, r3, #3
 802683e:	f043 0301 	orr.w	r3, r3, #1
 8026842:	81a3      	strh	r3, [r4, #12]
 8026844:	89a0      	ldrh	r0, [r4, #12]
 8026846:	4305      	orrs	r5, r0
 8026848:	81a5      	strh	r5, [r4, #12]
 802684a:	e7cd      	b.n	80267e8 <__smakebuf_r+0x18>
 802684c:	080265dd 	.word	0x080265dd

08026850 <memchr>:
 8026850:	b2c9      	uxtb	r1, r1
 8026852:	4402      	add	r2, r0
 8026854:	b510      	push	{r4, lr}
 8026856:	4290      	cmp	r0, r2
 8026858:	4603      	mov	r3, r0
 802685a:	d101      	bne.n	8026860 <memchr+0x10>
 802685c:	2300      	movs	r3, #0
 802685e:	e003      	b.n	8026868 <memchr+0x18>
 8026860:	781c      	ldrb	r4, [r3, #0]
 8026862:	3001      	adds	r0, #1
 8026864:	428c      	cmp	r4, r1
 8026866:	d1f6      	bne.n	8026856 <memchr+0x6>
 8026868:	4618      	mov	r0, r3
 802686a:	bd10      	pop	{r4, pc}

0802686c <__malloc_lock>:
 802686c:	4801      	ldr	r0, [pc, #4]	; (8026874 <__malloc_lock+0x8>)
 802686e:	f7ff bf87 	b.w	8026780 <__retarget_lock_acquire_recursive>
 8026872:	bf00      	nop
 8026874:	2004e3bd 	.word	0x2004e3bd

08026878 <__malloc_unlock>:
 8026878:	4801      	ldr	r0, [pc, #4]	; (8026880 <__malloc_unlock+0x8>)
 802687a:	f7ff bf83 	b.w	8026784 <__retarget_lock_release_recursive>
 802687e:	bf00      	nop
 8026880:	2004e3bd 	.word	0x2004e3bd

08026884 <__sread>:
 8026884:	b510      	push	{r4, lr}
 8026886:	460c      	mov	r4, r1
 8026888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802688c:	f000 f894 	bl	80269b8 <_read_r>
 8026890:	2800      	cmp	r0, #0
 8026892:	bfab      	itete	ge
 8026894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026896:	89a3      	ldrhlt	r3, [r4, #12]
 8026898:	181b      	addge	r3, r3, r0
 802689a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802689e:	bfac      	ite	ge
 80268a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80268a2:	81a3      	strhlt	r3, [r4, #12]
 80268a4:	bd10      	pop	{r4, pc}

080268a6 <__swrite>:
 80268a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80268aa:	461f      	mov	r7, r3
 80268ac:	898b      	ldrh	r3, [r1, #12]
 80268ae:	4605      	mov	r5, r0
 80268b0:	460c      	mov	r4, r1
 80268b2:	05db      	lsls	r3, r3, #23
 80268b4:	4616      	mov	r6, r2
 80268b6:	d505      	bpl.n	80268c4 <__swrite+0x1e>
 80268b8:	2302      	movs	r3, #2
 80268ba:	2200      	movs	r2, #0
 80268bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268c0:	f000 f868 	bl	8026994 <_lseek_r>
 80268c4:	89a3      	ldrh	r3, [r4, #12]
 80268c6:	4632      	mov	r2, r6
 80268c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80268cc:	4628      	mov	r0, r5
 80268ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80268d2:	81a3      	strh	r3, [r4, #12]
 80268d4:	463b      	mov	r3, r7
 80268d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80268da:	f000 b817 	b.w	802690c <_write_r>

080268de <__sseek>:
 80268de:	b510      	push	{r4, lr}
 80268e0:	460c      	mov	r4, r1
 80268e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268e6:	f000 f855 	bl	8026994 <_lseek_r>
 80268ea:	1c43      	adds	r3, r0, #1
 80268ec:	89a3      	ldrh	r3, [r4, #12]
 80268ee:	bf15      	itete	ne
 80268f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80268f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80268f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80268fa:	81a3      	strheq	r3, [r4, #12]
 80268fc:	bf18      	it	ne
 80268fe:	81a3      	strhne	r3, [r4, #12]
 8026900:	bd10      	pop	{r4, pc}

08026902 <__sclose>:
 8026902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026906:	f000 b813 	b.w	8026930 <_close_r>
	...

0802690c <_write_r>:
 802690c:	b538      	push	{r3, r4, r5, lr}
 802690e:	4604      	mov	r4, r0
 8026910:	4d06      	ldr	r5, [pc, #24]	; (802692c <_write_r+0x20>)
 8026912:	4608      	mov	r0, r1
 8026914:	4611      	mov	r1, r2
 8026916:	2200      	movs	r2, #0
 8026918:	602a      	str	r2, [r5, #0]
 802691a:	461a      	mov	r2, r3
 802691c:	f7db fafb 	bl	8001f16 <_write>
 8026920:	1c43      	adds	r3, r0, #1
 8026922:	d102      	bne.n	802692a <_write_r+0x1e>
 8026924:	682b      	ldr	r3, [r5, #0]
 8026926:	b103      	cbz	r3, 802692a <_write_r+0x1e>
 8026928:	6023      	str	r3, [r4, #0]
 802692a:	bd38      	pop	{r3, r4, r5, pc}
 802692c:	2004e3c0 	.word	0x2004e3c0

08026930 <_close_r>:
 8026930:	b538      	push	{r3, r4, r5, lr}
 8026932:	2300      	movs	r3, #0
 8026934:	4d05      	ldr	r5, [pc, #20]	; (802694c <_close_r+0x1c>)
 8026936:	4604      	mov	r4, r0
 8026938:	4608      	mov	r0, r1
 802693a:	602b      	str	r3, [r5, #0]
 802693c:	f7db fb07 	bl	8001f4e <_close>
 8026940:	1c43      	adds	r3, r0, #1
 8026942:	d102      	bne.n	802694a <_close_r+0x1a>
 8026944:	682b      	ldr	r3, [r5, #0]
 8026946:	b103      	cbz	r3, 802694a <_close_r+0x1a>
 8026948:	6023      	str	r3, [r4, #0]
 802694a:	bd38      	pop	{r3, r4, r5, pc}
 802694c:	2004e3c0 	.word	0x2004e3c0

08026950 <_fstat_r>:
 8026950:	b538      	push	{r3, r4, r5, lr}
 8026952:	2300      	movs	r3, #0
 8026954:	4d06      	ldr	r5, [pc, #24]	; (8026970 <_fstat_r+0x20>)
 8026956:	4604      	mov	r4, r0
 8026958:	4608      	mov	r0, r1
 802695a:	4611      	mov	r1, r2
 802695c:	602b      	str	r3, [r5, #0]
 802695e:	f7db fb02 	bl	8001f66 <_fstat>
 8026962:	1c43      	adds	r3, r0, #1
 8026964:	d102      	bne.n	802696c <_fstat_r+0x1c>
 8026966:	682b      	ldr	r3, [r5, #0]
 8026968:	b103      	cbz	r3, 802696c <_fstat_r+0x1c>
 802696a:	6023      	str	r3, [r4, #0]
 802696c:	bd38      	pop	{r3, r4, r5, pc}
 802696e:	bf00      	nop
 8026970:	2004e3c0 	.word	0x2004e3c0

08026974 <_isatty_r>:
 8026974:	b538      	push	{r3, r4, r5, lr}
 8026976:	2300      	movs	r3, #0
 8026978:	4d05      	ldr	r5, [pc, #20]	; (8026990 <_isatty_r+0x1c>)
 802697a:	4604      	mov	r4, r0
 802697c:	4608      	mov	r0, r1
 802697e:	602b      	str	r3, [r5, #0]
 8026980:	f7db fb01 	bl	8001f86 <_isatty>
 8026984:	1c43      	adds	r3, r0, #1
 8026986:	d102      	bne.n	802698e <_isatty_r+0x1a>
 8026988:	682b      	ldr	r3, [r5, #0]
 802698a:	b103      	cbz	r3, 802698e <_isatty_r+0x1a>
 802698c:	6023      	str	r3, [r4, #0]
 802698e:	bd38      	pop	{r3, r4, r5, pc}
 8026990:	2004e3c0 	.word	0x2004e3c0

08026994 <_lseek_r>:
 8026994:	b538      	push	{r3, r4, r5, lr}
 8026996:	4604      	mov	r4, r0
 8026998:	4d06      	ldr	r5, [pc, #24]	; (80269b4 <_lseek_r+0x20>)
 802699a:	4608      	mov	r0, r1
 802699c:	4611      	mov	r1, r2
 802699e:	2200      	movs	r2, #0
 80269a0:	602a      	str	r2, [r5, #0]
 80269a2:	461a      	mov	r2, r3
 80269a4:	f7db fafa 	bl	8001f9c <_lseek>
 80269a8:	1c43      	adds	r3, r0, #1
 80269aa:	d102      	bne.n	80269b2 <_lseek_r+0x1e>
 80269ac:	682b      	ldr	r3, [r5, #0]
 80269ae:	b103      	cbz	r3, 80269b2 <_lseek_r+0x1e>
 80269b0:	6023      	str	r3, [r4, #0]
 80269b2:	bd38      	pop	{r3, r4, r5, pc}
 80269b4:	2004e3c0 	.word	0x2004e3c0

080269b8 <_read_r>:
 80269b8:	b538      	push	{r3, r4, r5, lr}
 80269ba:	4604      	mov	r4, r0
 80269bc:	4d06      	ldr	r5, [pc, #24]	; (80269d8 <_read_r+0x20>)
 80269be:	4608      	mov	r0, r1
 80269c0:	4611      	mov	r1, r2
 80269c2:	2200      	movs	r2, #0
 80269c4:	602a      	str	r2, [r5, #0]
 80269c6:	461a      	mov	r2, r3
 80269c8:	f7db fa88 	bl	8001edc <_read>
 80269cc:	1c43      	adds	r3, r0, #1
 80269ce:	d102      	bne.n	80269d6 <_read_r+0x1e>
 80269d0:	682b      	ldr	r3, [r5, #0]
 80269d2:	b103      	cbz	r3, 80269d6 <_read_r+0x1e>
 80269d4:	6023      	str	r3, [r4, #0]
 80269d6:	bd38      	pop	{r3, r4, r5, pc}
 80269d8:	2004e3c0 	.word	0x2004e3c0

080269dc <_init>:
 80269dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269de:	bf00      	nop
 80269e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269e2:	bc08      	pop	{r3}
 80269e4:	469e      	mov	lr, r3
 80269e6:	4770      	bx	lr

080269e8 <_fini>:
 80269e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269ea:	bf00      	nop
 80269ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269ee:	bc08      	pop	{r3}
 80269f0:	469e      	mov	lr, r3
 80269f2:	4770      	bx	lr
